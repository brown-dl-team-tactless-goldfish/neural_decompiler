func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    %ecx, -36(%rbp)
        movl    %r8d, -40(%rbp)
        movl    %r9d, -44(%rbp)
        movl    $-1, -8(%rbp)
        movl    $-1, -4(%rbp)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        js      .L2
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        jmp     .L3
.L2:
        cmpl    $0, -28(%rbp)
        jle     .L4
        movl    -28(%rbp), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        js      .L4
        movl    -28(%rbp), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -8(%rbp)
        cmpl    $0, -4(%rbp)
        jns     .L5
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L4
.L5:
        cmpl    $0, -4(%rbp)
        js      .L4
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L4
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
.L4:
        movl    -36(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -28(%rbp)
        jge     .L6
        movl    -28(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        js      .L6
        movl    -28(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -8(%rbp)
        cmpl    $0, -4(%rbp)
        jns     .L7
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L6
.L7:
        cmpl    $0, -4(%rbp)
        js      .L6
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L6
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
.L6:
        cmpl    $0, -32(%rbp)
        jle     .L8
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        subq    $4, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        js      .L8
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        subq    $4, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -8(%rbp)
        cmpl    $0, -4(%rbp)
        jns     .L9
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L8
.L9:
        cmpl    $0, -4(%rbp)
        js      .L8
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L8
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
.L8:
        movl    -40(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -32(%rbp)
        jge     .L10
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        addq    $1, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        js      .L10
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        addq    $1, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -8(%rbp)
        cmpl    $0, -4(%rbp)
        jns     .L11
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L10
.L11:
        cmpl    $0, -4(%rbp)
        js      .L10
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L10
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
.L10:
        cmpl    $0, -4(%rbp)
        js      .L12
        movl    -4(%rbp), %eax
        cmpl    -44(%rbp), %eax
        jg      .L13
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        addl    $1, %edx
        movl    %edx, (%rax)
        jmp     .L12
.L13:
        movl    $-1, -4(%rbp)
.L12:
        movl    -4(%rbp), %eax
.L3:
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $88, %rsp
        movq    %rdi, -72(%rbp)
        movl    %esi, -76(%rbp)
        movl    %edx, -80(%rbp)
        movq    %rcx, -88(%rbp)
        movq    %r8, -96(%rbp)
        cmpq    $0, -72(%rbp)
        setne   %al
        movzbl  %al, %eax
        movl    %eax, %edi
        movl    $0, %eax
        call    assert
        cmpl    $0, -76(%rbp)
        setg    %al
        movzbl  %al, %eax
        movl    %eax, %edi
        movl    $0, %eax
        call    assert
        cmpl    $0, -80(%rbp)
        setg    %al
        movzbl  %al, %eax
        movl    %eax, %edi
        movl    $0, %eax
        call    assert
        movq    -96(%rbp), %rax
        movl    -76(%rbp), %edx
        movl    %edx, (%rax)
        movl    -76(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, %rdx
        movq    -88(%rbp), %rax
        movq    %rdx, (%rax)
        movl    $0, -20(%rbp)
        jmp     .L15
.L16:
        movq    -88(%rbp), %rax
        movq    (%rax), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    -80(%rbp), %eax
        movl    %eax, (%rdx)
        addl    $1, -20(%rbp)
.L15:
        movl    -20(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L16
        movl    -76(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -48(%rbp)
        cmpq    $0, -48(%rbp)
        setne   %al
        movzbl  %al, %eax
        movl    %eax, %edi
        movl    $0, %eax
        call    assert
        movl    $0, -20(%rbp)
        jmp     .L17
.L18:
        movl    -80(%rbp), %eax
        cltq
        salq    $2, %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -48(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        setne   %al
        movzbl  %al, %eax
        movl    %eax, %edi
        movl    $0, %eax
        call    assert
        addl    $1, -20(%rbp)
.L17:
        movl    -20(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L18
        movl    -76(%rbp), %eax
        movslq  %eax, %rdx
        movl    -80(%rbp), %eax
        cltq
        imulq   %rdx, %rax
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -56(%rbp)
        movl    $0, -28(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L19
.L24:
        movl    $0, -24(%rbp)
        jmp     .L20
.L23:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jne     .L21
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    $0, (%rax)
        jmp     .L22
.L21:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    $-1, (%rax)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rax, %rdx
        movl    -20(%rbp), %eax
        movl    %eax, (%rdx)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rax, %rdx
        movl    -24(%rbp), %eax
        movl    %eax, 4(%rdx)
        addl    $1, -28(%rbp)
.L22:
        addl    $1, -24(%rbp)
.L20:
        movl    -24(%rbp), %eax
        cmpl    -80(%rbp), %eax
        jl      .L23
        addl    $1, -20(%rbp)
.L19:
        movl    -20(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L24
        movl    $0, -36(%rbp)
        jmp     .L25
.L29:
        movl    $0, -32(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L26
.L28:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    4(%rax), %edx
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %esi
        movl    -36(%rbp), %r8d
        movl    -80(%rbp), %edi
        movl    -76(%rbp), %ecx
        movq    -48(%rbp), %rax
        movl    %r8d, %r9d
        movl    %edi, %r8d
        movq    %rax, %rdi
        call    func_2
        movl    %eax, -60(%rbp)
        cmpl    $0, -60(%rbp)
        jns     .L27
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -56(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -56(%rbp), %rdx
        addq    %rcx, %rdx
        movl    4(%rax), %eax
        movl    %eax, 4(%rdx)
        addl    $1, -32(%rbp)
.L27:
        addl    $1, -20(%rbp)
.L26:
        movl    -20(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L28
        movl    -32(%rbp), %eax
        movl    %eax, -28(%rbp)
        addl    $1, -36(%rbp)
.L25:
        cmpl    $0, -28(%rbp)
        jg      .L29
        movq    -56(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -48(%rbp), %rax
        addq    $88, %rsp
        popq    %rbx
        popq    %rbp
        ret
