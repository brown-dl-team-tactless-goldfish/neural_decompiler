#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
int i = 32;
while(i--){
if ((n >> i) & 1)
else
}
}
int hammingWeight_1(uint32_t n) {
int ret = 0;
while (n) {
ret += n & 0x01;
n >>= 1;
}
return ret;
}
int hammingWeight_2(uint32_t n) {
int ret = 0;
while (n) {
n = n & (n - 1);
ret ++;
}
return ret;
}
int hammingWeight_3(uint32_t n) {
uint32_t t = n;
t = ((t & 0xAAAAAAAA) >> 1) + (t & 0x55555555);
t = ((t & 0xCCCCCCCC) >> 2) + (t & 0x33333333);
t = ((t & 0xF0F0F0F0) >> 4) + (t & 0x0F0F0F0F);
t = ((t & 0xFF00FF00) >> 8) + (t & 0x00FF00FF);
t = ((t & 0xFFFF0000) >> 16) + (t & 0x0000FFFF);
return t;
}
int hammingWeight_4(uint32_t n) {
n = n - ((n >> 1) & 0x55555555);
n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
n = (n + (n >> 4)) & 0x0F0F0F0F;
n = n + (n >> 8);
n = n + (n >> 16);
return n & 0x0000003F;
}
int hammingWeight_5(uint32_t n) {
uint32_t t;
t = (n >> 1) & 033333333333;
n = n - t;
t = (t >> 1) & 033333333333;
n = n - t;
n = (n + (n >> 3)) & 030707070707;
return n % 63;
}
int hammingWeight(uint32_t n) {
uint32_t t;
t = (n >> 1) & 0x77777777;
n = n - t;
t = (t >> 1) & 0x77777777;
n = n - t;
t = (t >> 1) & 0x77777777;
n = n - t;
n = (n + (n >> 4)) & 0x0F0F0F0F; 
n = n * 0x01010101;
return n >> 24;
}
int main() {
uint32_t n = 11;
return 0;
}