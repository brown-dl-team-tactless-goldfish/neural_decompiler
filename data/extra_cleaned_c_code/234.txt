#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
struct ListNode {
int val;
struct ListNode *next;
};
 
bool isPalindrome(struct ListNode* head) {
if (head == NULL) return true;
struct ListNode *p = head;
int len = 0;
while (p) {
len++;
p = p->next;
}
int half = len / 2;
p = head;
while (half--) {
p = p->next;
}
if (len % 2 == 1) {
p = p->next;
}
struct ListNode *prev = NULL, *next = NULL;
while (p) {
next = p->next;
p->next = prev;
prev = p;
p = next;
}
struct ListNode *q = prev;
p = head;
half = len / 2;
while (half--) {
if (p->val != q->val)
return false;
p = p->next;
q = q->next;
}
return true;
}
if (head == NULL) return;
while (head) {
head = head->next;
}
}
int main() {
struct ListNode *l1 = (struct ListNode *)calloc(4, sizeof(struct ListNode));
struct ListNode *l2 = (struct ListNode *)calloc(5, sizeof(struct ListNode));
struct ListNode *p = l1;
p->val = 1;
p->next = l1 + 1;
p = p->next;
p->val = 2;
p->next = l1 + 2;
p = p->next;
p->val = 2;
p->next = l1 + 3;
p = p->next;
p->val = 1;
p->next = NULL;
p = l2;
p->val = 1;
p->next = l2 + 1;
p = p->next;
p->val = 2;
p->next = l2 + 2;
p = p->next;
p->val = 3;
p->next = l2 + 3;
p = p->next;
p->val = 2;
p->next = l2 + 4;
p = p->next;
p->val = 1;
p->next = NULL;
return 0;
}