#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
enum { DIE2DIE = 0, LIVE2DIE = 1, DIE2LIVE = 2, LIVE2LIVE = 3 };
int neighbors(int **board, int boardRowSize, int boardColSize, int i, int j) {
int n = 0;
if (i - 1 >= 0)
n += board[i - 1][j] & 0x01; 
if (i - 1 >= 0 && j + 1 < boardColSize)
n += board[i - 1][j + 1] & 0x01; 
if (j + 1 < boardColSize)
n += board[i][j + 1] & 0x01; 
if (i + 1 < boardRowSize && j + 1 < boardColSize)
n += board[i + 1][j + 1] & 0x01; 
if (i + 1 < boardRowSize)
n += board[i + 1][j] & 0x01; 
if (i + 1 < boardRowSize && j - 1 >= 0)
n += board[i + 1][j - 1] & 0x01; 
if (j - 1 >= 0)
n += board[i][j - 1] & 0x01; 
if (i - 1 >= 0 && j - 1 >= 0)
n += board[i - 1][j - 1] & 0x01; 
return n;
}
void gameOfLife(int** board, int boardRowSize, int boardColSize) {
int i, j;
for (i = 0; i < boardRowSize; i++) {
for (j = 0; j < boardColSize; j++) {
int n = neighbors(board, boardRowSize, boardColSize, i, j);
if (board[i][j] == 1) {
if (n < 2 || n > 3) { 
board[i][j] = LIVE2DIE;
}
else { 
board[i][j] = LIVE2LIVE;
}
}
else if (board[i][j] == 0) {
if (n == 3) { 
board[i][j] = DIE2LIVE;
}
else {
board[i][j] = DIE2DIE;
}
}
}
}
for (i = 0; i < boardRowSize; i++) {
for (j = 0; j < boardColSize; j++) {
board[i][j] >>= 1; 
}
}
}
int i, j;
for (i = 0; i < boardRowSize; i++ ){
for (j = 0; j < boardColSize; j++) {
}
}
}
int ** generateBoard(char **board_ch, int boardRowSize, int boardColSize) {
int **board_i = (int **)malloc(boardRowSize * sizeof(int *));
int i, j;
for (i = 0; i < boardRowSize; i++) {
board_i[i] = (int *)malloc(boardColSize * sizeof(int));
for (j = 0; j < boardColSize; j++) {
board_i[i][j] = board_ch[i][j] - '0';
}
}
return board_i;
}
int main() {
char *strs[] = {
"1001",
"0110",
"1101",
"0110"
};
int rows = sizeof(strs) / sizeof(strs[0]);
int cols = strlen(strs[0]);
int **board = generateBoard(strs, rows, cols);
gameOfLife(board, rows, cols);
return 0;
}