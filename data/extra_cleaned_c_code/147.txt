#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
#include <time.h>
struct ListNode {
int val;
struct ListNode *next;
};
struct ListNode* insertionSortList(struct ListNode* head) {
if (head == NULL) return NULL;
struct ListNode *dummy = (struct ListNode *)malloc(sizeof(struct ListNode));
dummy->val = 0;
dummy->next = NULL;
struct ListNode *t = dummy;
struct ListNode *p;
struct ListNode *min_ptr, *min_prev; 
int min_val;
p = head;
while (p) {
min_val = p->val;
min_ptr = p;
min_prev = NULL;
struct ListNode *q = p->next;
struct ListNode *prev = p;
while (q) {
if (q->val < min_val) {
min_val = q->val;
min_prev = prev;
min_ptr = q;
}
prev = q;
q = q->next;
}
if (p == min_ptr) { 
p = p->next;
}
else {
min_prev->next = min_ptr->next; 
}
t->next = min_ptr;
t = t->next;
}
t->next = NULL;
t = dummy->next;
free(dummy);
return t;
}
while (head) {
head = head->next;
}
}
int main() {
int n = 10;
struct ListNode *head = (struct ListNode *)calloc(n, sizeof(struct ListNode));
struct ListNode **p = &head;
int i;
srand(time(NULL));
for (i = 0; i < n; i++) {
(*p)->val = rand() % n;
(*p)->next = *p + 1;
p = &((*p)->next);
}
*p = NULL;
struct ListNode *new_head = insertionSortList(head);
return 0;
}