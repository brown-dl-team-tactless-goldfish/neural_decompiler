#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
struct StackNode {
int val;
struct StackNode *next;
};
struct Stack {
struct StackNode *top;
};
void push(struct Stack *stack, int new_val) {
if (stack == NULL) return;
struct StackNode *new_node
= (struct StackNode *)malloc(sizeof(struct StackNode));
new_node->val = new_val;
new_node->next = stack->top;
stack->top = new_node;
}
int pop(struct Stack *stack) {
if (stack == NULL || stack->top == NULL) return 0;
struct StackNode *t = stack->top;
int ans = t->val;
stack->top = stack->top->next;
free(t);
return ans;
}
bool isEmpty(struct Stack *stack) {
if (stack == NULL) return true;
return (stack->top == NULL) ? true : false;
}
typedef struct {
struct Stack in;
struct Stack out;
} Queue;
void queueCreate(Queue *queue, int maxSize) {
if (queue == NULL) return;
queue->in.top = queue->out.top = NULL;
}
void queuePush(Queue *queue, int element) {
if (queue == NULL) return;
while (!isEmpty(&queue->out)) {
int top = pop(&queue->out);
push(&queue->in, top);
}
push(&queue->in, element);
}
void queuePop(Queue *queue) {
if (queue == NULL) return;
if (isEmpty(&queue->out)) {
while (!isEmpty(&queue->in)) {
int top = pop(&queue->in);
push(&queue->out, top);
}
}
pop(&queue->out);
}
int queuePeek(Queue *queue) {
if (isEmpty(&queue->out)) {
while (!isEmpty(&queue->in)) {
int top = pop(&queue->in);
push(&queue->out, top);
}
}
if (!isEmpty(&queue->out) && queue->out.top) {
return queue->out.top->val;
}
else {
return 0;
}
}
bool queueEmpty(Queue *queue) {
if (isEmpty(&queue->in) && isEmpty(&queue->out)) {
return true;
}
else {
return false;
}
}
void queueDestroy(Queue *queue) {
while (!isEmpty(&queue->in)) {
pop(&queue->in);
}
while (!isEmpty(&queue->out)) {
pop(&queue->out);
}
}
int main() {
int maxSize = 5;
Queue q;
return 0;
}