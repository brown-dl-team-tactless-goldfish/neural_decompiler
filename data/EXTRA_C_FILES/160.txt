#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
struct ListNode {
int val;
struct ListNode *next;
};
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
int lenA, lenB;
lenA = lenB = 0;
struct ListNode *ptrA, *ptrB;
ptrA = headA;
ptrB = headB;
while (ptrA != 0) {
lenA++;
ptrA = ptrA->next;
}
while (ptrB != 0) {
lenB++;
ptrB = ptrB->next;
}
int diff = lenA - lenB;
ptrA = headA;
ptrB = headB;
if (diff > 0) {
while (diff--)ptrA = ptrA->next;
}
else {
while (diff++)ptrB = ptrB->next;
}
while (ptrA != 0 && ptrB != 0) {
if (ptrA == ptrB) {
return ptrA;
}
ptrA = ptrA->next;
ptrB = ptrB->next;
}
return NULL;
}
int main() {
struct ListNode *headA
= (struct ListNode *)calloc(5, sizeof(struct ListNode));
struct ListNode *headB
= (struct ListNode *)calloc(3, sizeof(struct ListNode));
struct ListNode *headC
= (struct ListNode *)calloc(3, sizeof(struct ListNode));
struct ListNode **p = &headA;
int i;
for (i = 1; i <= 5; i++) {
(*p)->val = i;
(*p)->next = *p + 1;
p = &(*p)->next;
}
*p = NULL;
p = &headB;
for (i = 1; i <= 3; i++) {
(*p)->val = i + 5;
(*p)->next = *p + 1;
p = &(*p)->next;
}
*p = headA + 2; 
p = &headC;
for (i = 1; i <= 3; i++) {
(*p)->val = i + 5;
(*p)->next = *p + 1;
p = &(*p)->next;
}
*p = NULL;
struct ListNode *q = headA;
while (q != NULL) {
q = q->next;
}
q = headB;
while (q) {
q = q->next;
}
q = headC;
while (q) {
q = q->next;
}
struct ListNode *ret;
ret = getIntersectionNode(headA, headB);
ret = getIntersectionNode(headC, headB);
return 0;
}