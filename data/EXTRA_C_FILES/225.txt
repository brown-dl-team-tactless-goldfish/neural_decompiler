#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
struct QueueNode {
int val;
struct QueueNode *next;
};
struct Queue{
int size;
struct QueueNode *front;
struct QueueNode *tail;
};
void push(struct Queue *queue, int new_val) {
if (queue == NULL) return;
struct QueueNode *new_node = (struct QueueNode *)malloc(sizeof(struct QueueNode));
new_node->val = new_val;
new_node->next = NULL;
if (queue->tail != NULL) {
queue->tail->next = new_node;
}
queue->tail = new_node;
if (queue->front == NULL) {
queue->front = new_node;
queue->size = 1;
}
else{
queue->size++;
}
}
void pop(struct Queue *queue) {
if (queue == NULL || queue->front == NULL) return;
struct QueueNode *tmp = queue->front;
queue->front = queue->front->next;
free(tmp);
queue->size--;
if (queue->front == NULL) {
queue->tail = NULL;
queue->size = 0;
}
}
int size(struct Queue *queue) {
if (queue == NULL) {
return 0;
}
else {
return queue->size;
}
}
bool isEmpty(struct Queue *queue) {
if (queue == NULL) {
return true;
}
else {
return (queue->size == 0) ? true : false;
}
}
typedef struct {
struct Queue queue;
} Stack;
void stackCreate(Stack *stack, int maxSize) {
if (stack == NULL) return;
stack->queue.front = stack->queue.tail = 0;
stack->queue.size = 0;
}
void stackPush(Stack *stack, int element) {
if (stack == NULL) return;
push(&stack->queue, element);
}
void stackPop(Stack *stack) {
if (stack == NULL) return;
int originalSize = size(&stack->queue);
int i;
for (i = 0; i < originalSize - 1; i++) {
if (stack->queue.front == NULL) {
return;
}
int tmp = stack->queue.front->val;
pop(&stack->queue);
push(&stack->queue, tmp);
}
pop(&stack->queue);
}
int stackTop(Stack *stack) {
if (stack == NULL || stack->queue.tail == NULL) {
return 0;
}
else {
return stack->queue.tail->val;
}
}
bool stackEmpty(Stack *stack) {
if (stack == NULL) return true;
return isEmpty(&stack->queue);
}
void stackDestroy(Stack *stack) {
if (stack == NULL) return;
while (size(&stack->queue) > 0) {
pop(&stack->queue);
}
}
int main() {
Stack s;
int maxSize = 5;
stackCreate(&s, maxSize);
stackPush(&s, 1);
stackPush(&s, 2);
stackPush(&s, 3);
stackPop(&s);
stackDestroy(&s);
return 0;
}