func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $80, %rsp
        movq    %rdi, -56(%rbp)
        movq    %rsi, -64(%rbp)
        movl    %edx, -68(%rbp)
        movq    -56(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -8(%rbp)
        movl    -8(%rbp), %edx
        movl    -68(%rbp), %eax
        addl    %edx, %eax
        addl    $1, %eax
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jle     .L2
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -56(%rbp), %rcx
        movq    -24(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memcpy
.L2:
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movb    $32, (%rax)
        movl    $1, -4(%rbp)
        jmp     .L3
.L5:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -64(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        movl    %eax, -28(%rbp)
        cmpl    $0, -28(%rbp)
        jle     .L4
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -32(%rbp)
        movl    -28(%rbp), %eax
        cltq
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        leaq    -4(%rdx), %rcx
        movq    -64(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rdx), %edx
        movslq  %edx, %rcx
        movq    -56(%rbp), %rdx
        leaq    (%rcx,%rdx), %rsi
        movl    -32(%rbp), %edx
        movslq  %edx, %rcx
        movq    -24(%rbp), %rdx
        addq    %rdx, %rcx
        movq    %rax, %rdx
        movq    %rcx, %rdi
        call    memcpy
.L4:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movb    $32, (%rax)
        addl    $1, -4(%rbp)
.L3:
        movl    -4(%rbp), %eax
        cmpl    -68(%rbp), %eax
        jl      .L5
        movl    -68(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -68(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -36(%rbp)
        movl    -68(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -40(%rbp)
        movl    -8(%rbp), %eax
        subl    -40(%rbp), %eax
        movl    %eax, -44(%rbp)
        movl    -44(%rbp), %eax
        cltq
        movl    -40(%rbp), %edx
        movslq  %edx, %rcx
        movq    -56(%rbp), %rdx
        leaq    (%rcx,%rdx), %rsi
        movl    -36(%rbp), %edx
        movslq  %edx, %rcx
        movq    -24(%rbp), %rdx
        addq    %rdx, %rcx
        movq    %rax, %rdx
        movq    %rcx, %rdi
        call    memcpy
        movl    -12(%rbp), %eax
        cltq
        leaq    -1(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -24(%rbp), %rax
        leave
        ret
