func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -4(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movl    -4(%rbp), %edx
        movl    %edx, (%rax)
        nop
        popq    %rbp
        ret
func_5:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    -28(%rbp), %eax
        movl    %eax, -4(%rbp)
        movl    -28(%rbp), %eax
        addl    %eax, %eax
        addl    $1, %eax
        movl    %eax, -8(%rbp)
        movl    -28(%rbp), %eax
        addl    $1, %eax
        addl    %eax, %eax
        movl    %eax, -12(%rbp)
        movl    -8(%rbp), %eax
        cmpl    -32(%rbp), %eax
        jge     .L3
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L3
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
.L3:
        movl    -12(%rbp), %eax
        cmpl    -32(%rbp), %eax
        jge     .L4
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L4
        movl    -12(%rbp), %eax
        movl    %eax, -4(%rbp)
.L4:
        movl    -28(%rbp), %eax
        cmpl    -4(%rbp), %eax
        je      .L6
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_4
        movl    -32(%rbp), %edx
        movl    -4(%rbp), %ecx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_5
.L6:
        nop
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    -28(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        subl    $1, %eax
        movl    %eax, -4(%rbp)
        jmp     .L8
.L9:
        movl    -28(%rbp), %edx
        movl    -4(%rbp), %ecx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_5
        subl    $1, -4(%rbp)
.L8:
        cmpl    $0, -4(%rbp)
        jns     .L9
        movl    -28(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -4(%rbp)
        jmp     .L10
.L11:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movq    -24(%rbp), %rax
        movq    %rax, %rsi
        movq    %rdx, %rdi
        call    func_4
        movl    -4(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_5
        subl    $1, -4(%rbp)
.L10:
        cmpl    $0, -4(%rbp)
        jg      .L11
        movq    -24(%rbp), %rax
        addq    $4, %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        movl    %eax, -8(%rbp)
        movl    $2, -4(%rbp)
        jmp     .L12
.L15:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        cmpl    %eax, -8(%rbp)
        je      .L13
        movl    $0, %eax
        jmp     .L14
.L13:
        addl    $1, -4(%rbp)
.L12:
        movl    -4(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L15
        movl    $1, %eax
.L14:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movl    %edx, -48(%rbp)
        movl    -48(%rbp), %eax
        subl    -44(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    $0, -8(%rbp)
        movl    -44(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L17
.L18:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movl    -8(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -8(%rbp)
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    (%rcx), %eax
        movl    %eax, (%rdx)
        addl    $1, -4(%rbp)
.L17:
        movl    -4(%rbp), %eax
        cmpl    -48(%rbp), %eax
        jle     .L18
        movl    -12(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_2
        movb    %al, -25(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movzbl  -25(%rbp), %eax
        leave
        ret
func_1Subarrays:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movq    %rdx, -56(%rbp)
        movl    %ecx, -48(%rbp)
        movq    %r8, -64(%rbp)
        movl    %r9d, -68(%rbp)
        movl    -48(%rbp), %eax
        cmpl    -68(%rbp), %eax
        sete    %al
        movzbl  %al, %eax
        movl    %eax, %edi
        movl    $0, %eax
        call    assert
        movl    -48(%rbp), %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $0, -20(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L21
.L22:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %ecx
        movl    -20(%rbp), %eax
        movslq  %eax, %rsi
        movq    -32(%rbp), %rax
        leaq    (%rsi,%rax), %rbx
        movq    -40(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_1
        movb    %al, (%rbx)
        addl    $1, -20(%rbp)
.L21:
        movl    -20(%rbp), %eax
        cmpl    -48(%rbp), %eax
        jl      .L22
        movq    16(%rbp), %rax
        movl    -48(%rbp), %edx
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        addq    $72, %rsp
        popq    %rbx
        popq    %rbp
        ret
