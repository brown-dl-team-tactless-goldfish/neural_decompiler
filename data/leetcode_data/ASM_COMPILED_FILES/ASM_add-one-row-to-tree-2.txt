func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    %ecx, %eax
        movb    %al, -36(%rbp)
        cmpl    $1, -32(%rbp)
        jne     .L2
        movl    $24, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    -28(%rbp), %edx
        movl    %edx, (%rax)
        cmpb    $0, -36(%rbp)
        je      .L3
        movq    -24(%rbp), %rax
        movq    (%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    $0, 16(%rax)
        jmp     .L4
.L3:
        movq    -24(%rbp), %rax
        movq    (%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 16(%rax)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
.L4:
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, (%rax)
        jmp     .L1
.L2:
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L7
        movl    -32(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        leaq    8(%rax), %rdi
        movl    -28(%rbp), %eax
        movl    $1, %ecx
        movl    %eax, %esi
        call    func_1
        movl    -32(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        leaq    16(%rax), %rdi
        movl    -28(%rbp), %eax
        movl    $0, %ecx
        movl    %eax, %esi
        call    func_1
        jmp     .L1
.L7:
        nop
.L1:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        cmpl    $1, -32(%rbp)
        jne     .L9
        movl    $24, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    -28(%rbp), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    -24(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    $0, 16(%rax)
        movq    -8(%rbp), %rax
        jmp     .L10
.L9:
        movl    -32(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        leaq    8(%rax), %rdi
        movl    -28(%rbp), %eax
        movl    $1, %ecx
        movl    %eax, %esi
        call    func_1
        movl    -32(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        leaq    16(%rax), %rdi
        movl    -28(%rbp), %eax
        movl    $0, %ecx
        movl    %eax, %esi
        call    func_1
        movq    -24(%rbp), %rax
.L10:
        leave
        ret
