var_5:
        .long   -1
var_10:
        .long   -1
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movl    var_10(%rip), %eax
        addl    $1, %eax
        movl    %eax, var_10(%rip)
        movl    var_10(%rip), %eax
        cltq
        movq    -8(%rbp), %rdx
        movq    %rdx, var_9(,%rax,8)
        movl    var_5(%rip), %eax
        cmpl    $-1, %eax
        jne     .L3
        movl    $0, var_5(%rip)
.L3:
        nop
        popq    %rbp
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    var_5(%rip), %eax
        cmpl    $-1, %eax
        jne     .L5
        movl    $0, %eax
        jmp     .L6
.L5:
        movl    var_5(%rip), %eax
        cltq
        movq    var_9(,%rax,8), %rax
        movq    %rax, -8(%rbp)
        movl    var_5(%rip), %eax
        addl    $1, %eax
        movl    %eax, var_5(%rip)
        movl    var_5(%rip), %edx
        movl    var_10(%rip), %eax
        cmpl    %eax, %edx
        jle     .L7
        movl    $-1, var_5(%rip)
        movl    $-1, var_10(%rip)
.L7:
        movq    -8(%rbp), %rax
.L6:
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $8072, %rsp
        movq    %rdi, -8056(%rbp)
        movq    %rsi, -8064(%rbp)
        movq    %rdx, -8072(%rbp)
        leaq    -8048(%rbp), %rdx
        movl    $0, %eax
        movl    $1000, %ecx
        movq    %rdx, %rdi
        rep stosq
        movl    $1, -8048(%rbp)
        movl    $0, -28(%rbp)
        movl    $16000, %edi
        call    malloc
        movq    %rax, -48(%rbp)
        movl    $8000, %edi
        call    malloc
        movq    %rax, %rdx
        movq    -8072(%rbp), %rax
        movq    %rdx, (%rax)
        movl    $0, -20(%rbp)
        movl    $1, -24(%rbp)
        movl    $4, %edi
        call    malloc
        movq    %rax, %rdx
        movq    -48(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -8072(%rbp), %rax
        movq    (%rax), %rax
        movl    $1, (%rax)
        movq    -8056(%rbp), %rax
        movq    %rax, -40(%rbp)
        jmp     .L9
.L13:
        movl    -20(%rbp), %eax
        cltq
        movl    -8048(%rbp,%rax,4), %eax
        cmpl    %eax, -28(%rbp)
        jl      .L10
        addl    $1, -20(%rbp)
        addl    $1, -24(%rbp)
        movl    $0, -28(%rbp)
        movl    -20(%rbp), %eax
        cltq
        movl    -8048(%rbp,%rax,4), %eax
        cltq
        salq    $2, %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -48(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movq    -8072(%rbp), %rax
        movq    (%rax), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    -20(%rbp), %eax
        cltq
        movl    -8048(%rbp,%rax,4), %eax
        movl    %eax, (%rdx)
.L10:
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L11
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    -24(%rbp), %eax
        cltq
        movl    -8048(%rbp,%rax,4), %eax
        leal    1(%rax), %edx
        movl    -24(%rbp), %eax
        cltq
        movl    %edx, -8048(%rbp,%rax,4)
.L11:
        movq    -40(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L12
        movq    -40(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    -24(%rbp), %eax
        cltq
        movl    -8048(%rbp,%rax,4), %eax
        leal    1(%rax), %edx
        movl    -24(%rbp), %eax
        cltq
        movl    %edx, -8048(%rbp,%rax,4)
.L12:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rcx
        movl    -28(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -28(%rbp)
        cltq
        salq    $2, %rax
        leaq    (%rcx,%rax), %rdx
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    $0, %eax
        call    func_4
        movq    %rax, -40(%rbp)
.L9:
        cmpq    $0, -40(%rbp)
        jne     .L13
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8064(%rbp), %rax
        movl    %edx, (%rax)
        movq    -48(%rbp), %rax
        addq    $8072, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L16
        movq    -16(%rbp), %rax
        movl    $0, (%rax)
        movl    $0, %eax
        jmp     .L17
.L16:
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rcx
        movq    -8(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        movl    $0, %eax
        call    __level_order
        cltq
.L17:
        leave
        ret
