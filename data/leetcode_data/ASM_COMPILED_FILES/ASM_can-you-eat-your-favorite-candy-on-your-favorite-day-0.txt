func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $112, %rsp
        movq    %rdi, -72(%rbp)
        movl    %esi, -76(%rbp)
        movq    %rdx, -88(%rbp)
        movl    %ecx, -80(%rbp)
        movq    %r8, -96(%rbp)
        movq    %r9, -104(%rbp)
        movl    -80(%rbp), %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    -76(%rbp), %eax
        addl    $1, %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movq    -24(%rbp), %rax
        movq    $0, (%rax)
        movl    $0, -4(%rbp)
        jmp     .L2
.L3:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rcx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movl    -4(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,8), %rsi
        movq    -24(%rbp), %rax
        addq    %rsi, %rax
        addq    %rcx, %rdx
        movq    %rdx, (%rax)
        addl    $1, -4(%rbp)
.L2:
        movl    -4(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L3
        movl    $0, -8(%rbp)
        jmp     .L4
.L7:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -88(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        movl    %eax, -28(%rbp)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -88(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    4(%rax), %eax
        movl    %eax, -32(%rbp)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -88(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    8(%rax), %eax
        movl    %eax, -36(%rbp)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -36(%rbp), %edx
        movslq  %edx, %rcx
        cqto
        idivq   %rcx
        movq    %rax, -48(%rbp)
        movl    -28(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        subq    $1, %rax
        movq    %rax, -56(%rbp)
        movl    -32(%rbp), %eax
        cltq
        cmpq    %rax, -48(%rbp)
        jg      .L5
        movl    -32(%rbp), %eax
        cltq
        cmpq    %rax, -56(%rbp)
        jl      .L5
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $1, (%rax)
        jmp     .L6
.L5:
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
.L6:
        addl    $1, -8(%rbp)
.L4:
        movl    -8(%rbp), %eax
        cmpl    -80(%rbp), %eax
        jl      .L7
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -104(%rbp), %rax
        movl    -80(%rbp), %edx
        movl    %edx, (%rax)
        movq    -16(%rbp), %rax
        leave
        ret
