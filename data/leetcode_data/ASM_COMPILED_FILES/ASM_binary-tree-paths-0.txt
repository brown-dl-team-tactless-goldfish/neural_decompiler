func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movl    -44(%rbp), %edx
        movl    %edx, %eax
        sall    $2, %eax
        addl    %edx, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    $0, -4(%rbp)
        movl    $0, -8(%rbp)
        jmp     .L2
.L8:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jns     .L3
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $45, (%rax)
        addl    $1, -4(%rbp)
.L3:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    %edx, %eax
        sarl    $31, %eax
        xorl    %eax, %edx
        movl    %edx, -20(%rbp)
        subl    %eax, -20(%rbp)
        cmpl    $100, -20(%rbp)
        jne     .L4
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $49, (%rax)
        addl    $1, -4(%rbp)
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $48, (%rax)
        addl    $1, -4(%rbp)
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $48, (%rax)
        addl    $1, -4(%rbp)
        jmp     .L5
.L4:
        cmpl    $9, -20(%rbp)
        jle     .L6
        movl    -20(%rbp), %ecx
        movl    $1717986919, %edx
        movl    %ecx, %eax
        imull   %edx
        sarl    $2, %edx
        movl    %ecx, %eax
        sarl    $31, %eax
        subl    %eax, %edx
        movl    %edx, %eax
        leal    48(%rax), %ecx
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        addl    $1, -4(%rbp)
.L6:
        movl    -20(%rbp), %ecx
        movl    $1717986919, %edx
        movl    %ecx, %eax
        imull   %edx
        sarl    $2, %edx
        movl    %ecx, %eax
        sarl    $31, %eax
        subl    %eax, %edx
        movl    %edx, %eax
        sall    $2, %eax
        addl    %edx, %eax
        addl    %eax, %eax
        subl    %eax, %ecx
        movl    %ecx, %edx
        movl    %edx, %eax
        leal    48(%rax), %ecx
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        addl    $1, -4(%rbp)
.L5:
        movl    -44(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -8(%rbp)
        jge     .L7
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $45, (%rax)
        addl    $1, -4(%rbp)
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $62, (%rax)
        addl    $1, -4(%rbp)
.L7:
        addl    $1, -8(%rbp)
.L2:
        movl    -8(%rbp), %eax
        cmpl    -44(%rbp), %eax
        jl      .L8
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -16(%rbp), %rax
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    %rdx, -40(%rbp)
        movq    %rcx, -48(%rbp)
        movl    %r8d, -52(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L14
        movl    -52(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -48(%rbp), %rax
        addq    %rax, %rdx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -52(%rbp)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L13
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L13
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    -52(%rbp), %edx
        movq    -48(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_2
        movq    %rax, (%rbx)
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -40(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L10
.L13:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movl    -52(%rbp), %edi
        movq    -48(%rbp), %rcx
        movq    -40(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movl    %edi, %r8d
        movq    %rax, %rdi
        call    func_3
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movl    -52(%rbp), %edi
        movq    -48(%rbp), %rcx
        movq    -40(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movl    %edi, %r8d
        movq    %rax, %rdi
        call    func_3
        jmp     .L10
.L14:
        nop
.L10:
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    $400, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movl    $400, %edi
        call    malloc
        movq    %rax, -16(%rbp)
        movq    -32(%rbp), %rax
        movl    $0, (%rax)
        movq    -16(%rbp), %rcx
        movq    -32(%rbp), %rdx
        movq    -8(%rbp), %rsi
        movq    -24(%rbp), %rax
        movl    $0, %r8d
        movq    %rax, %rdi
        call    func_3
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        leave
        ret
