func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $80, %rsp
        movq    %rdi, -56(%rbp)
        movl    %esi, -60(%rbp)
        movl    %edx, -64(%rbp)
        movl    %ecx, -68(%rbp)
        movl    -68(%rbp), %eax
        subl    -64(%rbp), %eax
        addl    $1, %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $1, -4(%rbp)
        movl    $0, -36(%rbp)
        movb    $1, -5(%rbp)
        movl    -64(%rbp), %eax
        movl    %eax, -12(%rbp)
        movl    $0, -16(%rbp)
        jmp     .L2
.L3:
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    -16(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -32(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -12(%rbp)
        addl    $1, -16(%rbp)
.L2:
        movl    -12(%rbp), %eax
        cmpl    -68(%rbp), %eax
        jle     .L3
        movl    $0, -20(%rbp)
        jmp     .L4
.L8:
        movl    $0, -24(%rbp)
        jmp     .L5
.L7:
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -24(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rcx
        movq    -32(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jl      .L6
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -40(%rbp)
        movl    -24(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -32(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -24(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rax, %rdx
        movl    -40(%rbp), %eax
        movl    %eax, (%rdx)
.L6:
        addl    $1, -24(%rbp)
.L5:
        movl    -68(%rbp), %eax
        subl    -64(%rbp), %eax
        cmpl    %eax, -24(%rbp)
        jl      .L7
        addl    $1, -20(%rbp)
.L4:
        movl    -68(%rbp), %eax
        subl    -64(%rbp), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L8
        movq    -32(%rbp), %rax
        addq    $4, %rax
        movl    (%rax), %edx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        movl    %eax, -44(%rbp)
        jmp     .L9
.L12:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -32(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        cmpl    %eax, -44(%rbp)
        je      .L10
        movb    $0, -5(%rbp)
.L10:
        addl    $1, -4(%rbp)
.L9:
        movl    -68(%rbp), %eax
        subl    -64(%rbp), %eax
        cmpl    %eax, -4(%rbp)
        jg      .L11
        cmpb    $0, -5(%rbp)
        jne     .L12
.L11:
        movzbl  -5(%rbp), %eax
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movq    %rdx, -56(%rbp)
        movl    %ecx, -48(%rbp)
        movq    %r8, -64(%rbp)
        movl    %r9d, -68(%rbp)
        movl    -48(%rbp), %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L15
.L16:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -20(%rbp), %eax
        movslq  %eax, %rsi
        movq    -32(%rbp), %rax
        leaq    (%rsi,%rax), %rbx
        movl    -44(%rbp), %esi
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    func_2
        movb    %al, (%rbx)
        addl    $1, -20(%rbp)
.L15:
        movl    -20(%rbp), %eax
        cmpl    -48(%rbp), %eax
        jl      .L16
        movq    16(%rbp), %rax
        movl    -48(%rbp), %edx
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        addq    $72, %rsp
        popq    %rbx
        popq    %rbp
        ret
