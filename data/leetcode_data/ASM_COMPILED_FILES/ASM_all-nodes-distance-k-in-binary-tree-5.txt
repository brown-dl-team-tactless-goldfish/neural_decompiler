func_5:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    6012(%rax), %eax
        cmpl    $-1, %eax
        jne     .L2
        movl    $1, %eax
        jmp     .L3
.L2:
        movl    $0, %eax
.L3:
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    6016(%rax), %eax
        cmpl    $500, %eax
        jne     .L5
        movl    $1, %eax
        jmp     .L6
.L5:
        movl    $0, %eax
.L6:
        popq    %rbp
        ret
func_6:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $24, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movl    %edx, -20(%rbp)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    func_2
        testl   %eax, %eax
        jne     .L10
        movq    -8(%rbp), %rax
        movl    6016(%rax), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movl    %edx, 6016(%rax)
        movq    -8(%rbp), %rax
        movl    6016(%rax), %edx
        movq    -8(%rbp), %rax
        movslq  %edx, %rdx
        movq    -16(%rbp), %rcx
        movq    %rcx, (%rax,%rdx,8)
        movq    -8(%rbp), %rax
        movl    6016(%rax), %edx
        movq    -8(%rbp), %rax
        movslq  %edx, %rdx
        leaq    1000(%rdx), %rcx
        movl    -20(%rbp), %edx
        movl    %edx, 8(%rax,%rcx,4)
        movq    -8(%rbp), %rax
        movl    6012(%rax), %eax
        cmpl    $-1, %eax
        jne     .L7
        movq    -8(%rbp), %rax
        movl    $0, 6012(%rax)
        jmp     .L7
.L10:
        nop
.L7:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    func_5
        testl   %eax, %eax
        je      .L12
        movl    $0, %eax
        jmp     .L13
.L12:
        movq    -24(%rbp), %rax
        movl    6012(%rax), %edx
        movq    -24(%rbp), %rax
        movslq  %edx, %rdx
        addq    $1000, %rdx
        movl    8(%rax,%rdx,4), %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        movl    6012(%rax), %edx
        movq    -24(%rbp), %rax
        movslq  %edx, %rdx
        movq    (%rax,%rdx,8), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movl    6012(%rax), %edx
        movq    -24(%rbp), %rax
        movl    6016(%rax), %eax
        cmpl    %eax, %edx
        jne     .L14
        movq    -24(%rbp), %rax
        movl    $-1, 6012(%rax)
        movq    -24(%rbp), %rax
        movl    $-1, 6016(%rax)
        jmp     .L15
.L14:
        movq    -24(%rbp), %rax
        movl    6012(%rax), %eax
        leal    1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, 6012(%rax)
.L15:
        movq    -8(%rbp), %rax
.L13:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $24, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L17
        movl    $0, %eax
        jmp     .L18
.L17:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        leal    1(%rax), %ebx
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        addl    %ebx, %eax
.L18:
        addq    $24, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L24
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L22
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rax, (%rdx)
.L22:
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L23
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rax, (%rdx)
.L23:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_4
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_4
        jmp     .L19
.L24:
        nop
.L19:
        leave
        ret
func_7:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $6128, %rsp
        movq    %rdi, -6104(%rbp)
        movq    %rsi, -6112(%rbp)
        movl    %edx, -6116(%rbp)
        movq    %rcx, -6128(%rbp)
        movq    -6104(%rbp), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -12(%rbp)
        movl    $4008, %edi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    memset
        movq    -6104(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    $0, (%rax)
        movq    -24(%rbp), %rdx
        movq    -6104(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_4
        movl    $501, %edi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $0, -4(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L26
.L27:
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        addl    $1, -4(%rbp)
.L26:
        movl    -4(%rbp), %eax
        cmpl    -12(%rbp), %eax
        jl      .L27
        movl    $-1, -68(%rbp)
        movl    $-1, -64(%rbp)
        movl    -12(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -40(%rbp)
        movl    $0, -8(%rbp)
        movq    -6112(%rbp), %rax
        movq    %rax, -48(%rbp)
        movl    $0, -6084(%rbp)
        movl    -6084(%rbp), %edx
        movq    -48(%rbp), %rcx
        leaq    -6080(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_6
        movq    -6112(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movb    $1, (%rax)
        jmp     .L28
.L33:
        leaq    -6084(%rbp), %rdx
        leaq    -6080(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    %rax, -48(%rbp)
        movl    -6084(%rbp), %eax
        cmpl    %eax, -6116(%rbp)
        je      .L29
        movq    -48(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L30
        movq    -48(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        xorl    $1, %eax
        testb   %al, %al
        je      .L30
        movl    -6084(%rbp), %eax
        leal    1(%rax), %edx
        movq    -48(%rbp), %rax
        movq    8(%rax), %rcx
        leaq    -6080(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_6
        movq    -48(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movb    $1, (%rax)
.L30:
        movq    -48(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L31
        movq    -48(%rbp), %rax
        movq    16(%rax), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        xorl    $1, %eax
        testb   %al, %al
        je      .L31
        movl    -6084(%rbp), %eax
        leal    1(%rax), %edx
        movq    -48(%rbp), %rax
        movq    16(%rax), %rcx
        leaq    -6080(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_6
        movq    -48(%rbp), %rax
        movq    16(%rax), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movb    $1, (%rax)
.L31:
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, -56(%rbp)
        cmpq    $0, -56(%rbp)
        je      .L28
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        xorl    $1, %eax
        testb   %al, %al
        je      .L28
        movl    -6084(%rbp), %eax
        leal    1(%rax), %edx
        movq    -56(%rbp), %rcx
        leaq    -6080(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_6
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movb    $1, (%rax)
        jmp     .L28
.L29:
        movl    -6084(%rbp), %eax
        cmpl    %eax, -6116(%rbp)
        jne     .L28
        movl    -8(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -8(%rbp)
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rax, %rdx
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
.L28:
        leaq    -6080(%rbp), %rax
        movq    %rax, %rdi
        call    func_5
        testl   %eax, %eax
        je      .L33
        movq    -6128(%rbp), %rax
        movl    -8(%rbp), %edx
        movl    %edx, (%rax)
        movq    -40(%rbp), %rax
        leave
        ret
