func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %r12
        pushq   %rbx
        subq    $64, %rsp
        movq    %rdi, -72(%rbp)
        movl    %esi, -76(%rbp)
        movq    %rsp, %rax
        movq    %rax, %r12
        movl    -76(%rbp), %eax
        movslq  %eax, %rdx
        subq    $1, %rdx
        movq    %rdx, -48(%rbp)
        movslq  %eax, %rdx
        movq    %rdx, %r8
        movl    $0, %r9d
        movslq  %eax, %rdx
        movq    %rdx, %rcx
        movl    $0, %ebx
        cltq
        leaq    0(,%rax,4), %rdx
        movl    $16, %eax
        subq    $1, %rax
        addq    %rdx, %rax
        movl    $16, %esi
        movl    $0, %edx
        divq    %rsi
        imulq   $16, %rax, %rax
        subq    %rax, %rsp
        movq    %rsp, %rax
        addq    $3, %rax
        shrq    $2, %rax
        salq    $2, %rax
        movq    %rax, -56(%rbp)
        movl    $0, -32(%rbp)
        jmp     .L2
.L3:
        movq    -56(%rbp), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        movl    $0, (%rax,%rdx,4)
        addl    $1, -32(%rbp)
.L2:
        movl    -32(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L3
        movl    $0, -28(%rbp)
        movl    $0, -24(%rbp)
        jmp     .L4
.L9:
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movzbl  (%rax), %eax
        movb    %al, -57(%rbp)
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    atoi
        testl   %eax, %eax
        je      .L5
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -28(%rbp), %ebx
        leal    1(%rbx), %edx
        movl    %edx, -28(%rbp)
        movq    %rax, %rdi
        call    atoi
        movl    %eax, %ecx
        movq    -56(%rbp), %rax
        movslq  %ebx, %rdx
        movl    %ecx, (%rax,%rdx,4)
        jmp     .L6
.L5:
        cmpb    $43, -57(%rbp)
        jne     .L7
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -56(%rbp), %rax
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %ecx
        movl    -28(%rbp), %eax
        leal    -2(%rax), %edx
        movq    -56(%rbp), %rax
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %eax
        addl    %eax, %ecx
        movq    -56(%rbp), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        movl    %ecx, (%rax,%rdx,4)
        addl    $1, -28(%rbp)
        jmp     .L6
.L7:
        cmpb    $67, -57(%rbp)
        jne     .L8
        subl    $1, -28(%rbp)
        jmp     .L6
.L8:
        cmpb    $68, -57(%rbp)
        jne     .L6
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -56(%rbp), %rax
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %eax
        leal    (%rax,%rax), %ecx
        movq    -56(%rbp), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        movl    %ecx, (%rax,%rdx,4)
        addl    $1, -28(%rbp)
.L6:
        addl    $1, -24(%rbp)
.L4:
        movl    -24(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L9
        movl    $0, -20(%rbp)
        movl    $0, -36(%rbp)
        jmp     .L10
.L11:
        movq    -56(%rbp), %rax
        movl    -36(%rbp), %edx
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %eax
        addl    %eax, -20(%rbp)
        addl    $1, -36(%rbp)
.L10:
        movl    -36(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L11
        movl    -20(%rbp), %eax
        movq    %r12, %rsp
        leaq    -16(%rbp), %rsp
        popq    %rbx
        popq    %r12
        popq    %rbp
        ret
.LC0:
        .string "%d"
.LC1:
        .string "%s"
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $40, %rsp
        leaq    -40(%rbp), %rax
        movq    %rax, %rsi
        movl    $.LC0, %edi
        movl    $0, %eax
        call    __isoc99_scanf
        movl    -40(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L14
.L15:
        movl    -40(%rbp), %eax
        cltq
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -32(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rsi
        movl    $.LC1, %edi
        movl    $0, %eax
        call    __isoc99_scanf
        addl    $1, -20(%rbp)
.L14:
        movl    -40(%rbp), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L15
        movl    $0, -24(%rbp)
        jmp     .L16
.L17:
        addl    $1, -24(%rbp)
.L16:
        movl    -40(%rbp), %eax
        cmpl    %eax, -24(%rbp)
        jl      .L17
        movl    -40(%rbp), %edx
        movq    -32(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -36(%rbp)
        movl    $0, %eax
        addq    $40, %rsp
        popq    %rbx
        popq    %rbp
        ret
