func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %edx
        movq    -16(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    -8(%rbp), %rax
        movl    (%rax), %edx
        movq    -16(%rbp), %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $88, %rsp
        movq    %rdi, -72(%rbp)
        movl    %esi, -76(%rbp)
        movq    %rdx, -88(%rbp)
        movl    %ecx, -80(%rbp)
        movq    %r8, -96(%rbp)
        movl    -80(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -56(%rbp)
        movq    -96(%rbp), %rax
        movl    -76(%rbp), %edx
        movl    %edx, (%rax)
        movl    $0, -20(%rbp)
        jmp     .L6
.L7:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    $4, %esi
        movl    $2, %edi
        call    calloc
        movq    %rax, (%rbx)
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -88(%rbp), %rax
        addq    %rax, %rdx
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movq    (%rax), %rax
        movl    (%rdx), %edx
        movl    %edx, (%rax)
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        leaq    4(%rax), %rdx
        movl    -20(%rbp), %eax
        movl    %eax, (%rdx)
        addl    $1, -20(%rbp)
.L6:
        movl    -20(%rbp), %eax
        cmpl    -80(%rbp), %eax
        jl      .L7
        movl    -80(%rbp), %eax
        movslq  %eax, %rsi
        movq    -56(%rbp), %rax
        movl    $func_2, %ecx
        movl    $8, %edx
        movq    %rax, %rdi
        call    qsort
        movl    -76(%rbp), %eax
        movslq  %eax, %rsi
        movq    -72(%rbp), %rax
        movl    $func_1, %ecx
        movl    $4, %edx
        movq    %rax, %rdi
        call    qsort
        movl    $0, -24(%rbp)
        movl    -76(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -64(%rbp)
        movl    $0, -28(%rbp)
        jmp     .L8
.L9:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    $4, %esi
        movl    $2, %edi
        call    calloc
        movq    %rax, (%rbx)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -64(%rbp), %rdx
        addq    %rcx, %rdx
        movq    (%rdx), %rdx
        addq    $4, %rdx
        movl    4(%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -28(%rbp)
.L8:
        movl    -28(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L9
        movl    -76(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -32(%rbp)
        movl    $0, -36(%rbp)
        movl    $0, -40(%rbp)
        jmp     .L10
.L13:
        movl    -40(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jg      .L11
        movl    -40(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movl    -32(%rbp), %eax
        leal    -1(%rax), %edx
        movl    %edx, -32(%rbp)
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    (%rcx), %edx
        movl    %edx, (%rax)
        jmp     .L12
.L11:
        movl    -40(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movl    -36(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -36(%rbp)
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    (%rcx), %edx
        movl    %edx, (%rax)
        addl    $1, -24(%rbp)
.L12:
        addl    $1, -40(%rbp)
.L10:
        movl    -40(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L13
        movl    $0, -44(%rbp)
        jmp     .L14
.L15:
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -44(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -64(%rbp), %rdx
        addq    %rcx, %rdx
        movq    (%rdx), %rdx
        addq    $4, %rdx
        movl    (%rdx), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -72(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -44(%rbp)
.L14:
        movl    -44(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L15
        movq    -72(%rbp), %rax
        addq    $88, %rsp
        popq    %rbx
        popq    %rbp
        ret
