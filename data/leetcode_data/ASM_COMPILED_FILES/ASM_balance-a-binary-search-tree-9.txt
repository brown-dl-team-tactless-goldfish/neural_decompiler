check_balance_factor.4147:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %r10, -32(%rbp)
        movl    $0, -4(%rbp)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L2
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L2
        movl    $0, -4(%rbp)
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L4
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L4
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movl    4(%rax), %eax
        movl    %eax, -4(%rbp)
        jmp     .L3
.L4:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L5
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L5
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movl    4(%rax), %eax
        movl    %eax, -4(%rbp)
        jmp     .L3
.L5:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movl    4(%rax), %edx
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movl    4(%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        movl    %eax, -4(%rbp)
        movl    -4(%rbp), %eax
        sarl    $31, %eax
        xorl    %eax, -4(%rbp)
        subl    %eax, -4(%rbp)
.L3:
        movl    -4(%rbp), %eax
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        leaq    16(%rbp), %rax
        movq    %rax, -8(%rbp)
        movl    $0, %eax
        movq    %rax, -16(%rbp)
        movq    -24(%rbp), %rax
        leaq    -16(%rbp), %rdx
        movq    %rdx, %r10
        movq    %rax, %rdi
        call    inOrderTraversal.4190
        movq    -16(%rbp), %rax
        leave
        ret
heightImbalancingNode.4152:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %r10, %rbx
        movq    %r10, -56(%rbp)
        movq    $0, -24(%rbp)
        cmpq    $0, -40(%rbp)
        je      .L10
        movq    -40(%rbp), %rax
        movq    16(%rax), %rax
        movq    -48(%rbp), %rdx
        movq    %rbx, %r10
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    heightImbalancingNode.4152
        movq    %rax, -24(%rbp)
        movq    -48(%rbp), %rax
        movzbl  (%rax), %eax
        xorl    $1, %eax
        testb   %al, %al
        je      .L10
        movq    -40(%rbp), %rax
        movq    %rbx, %r10
        movq    %rax, %rdi
        call    check_balance_factor.4147
        movl    %eax, -28(%rbp)
        cmpl    $1, -28(%rbp)
        jle     .L10
        movq    -48(%rbp), %rax
        movb    $1, (%rax)
        movq    -40(%rbp), %rax
        movq    %rax, -24(%rbp)
        movq    -24(%rbp), %rax
        jmp     .L11
.L10:
        movq    -24(%rbp), %rax
.L11:
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
LLRotation.4158:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -56(%rbp)
        movl    %esi, -60(%rbp)
        movq    %r10, %rbx
        movq    %r10, -72(%rbp)
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -20(%rbp)
        movl    $24, %edi
        call    malloc
        movq    %rax, -32(%rbp)
        movq    -56(%rbp), %rax
        movl    (%rax), %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
        movq    -56(%rbp), %rax
        movq    8(%rax), %rdx
        movq    -32(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -56(%rbp), %rax
        movq    16(%rax), %rdx
        movq    -32(%rbp), %rax
        movq    %rdx, 16(%rax)
        movq    -56(%rbp), %rax
        movl    4(%rax), %edx
        movq    -32(%rbp), %rax
        movl    %edx, 4(%rax)
        movq    -56(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, -40(%rbp)
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -48(%rbp)
        movq    -40(%rbp), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        movq    -48(%rbp), %rdx
        movq    %rdx, 16(%rax)
        movl    -20(%rbp), %eax
        cmpl    -60(%rbp), %eax
        jne     .L13
        movq    -40(%rbp), %rax
        movq    %rax, (%rbx)
        jmp     .L15
.L13:
        movq    -56(%rbp), %rcx
        movq    -40(%rbp), %rsi
        movq    (%rsi), %rax
        movq    8(%rsi), %rdx
        movq    %rax, (%rcx)
        movq    %rdx, 8(%rcx)
        movq    16(%rsi), %rax
        movq    %rax, 16(%rcx)
.L15:
        nop
        addq    $72, %rsp
        popq    %rbx
        popq    %rbp
        ret
maximum.4166:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -4(%rbp)
        movl    %esi, -8(%rbp)
        movq    %r10, -16(%rbp)
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L17
        movl    -4(%rbp), %eax
        jmp     .L18
.L17:
        movl    -8(%rbp), %eax
.L18:
        popq    %rbp
        ret
updateHeight.4169:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %r12
        pushq   %rbx
        subq    $16, %rsp
        movq    %rdi, -24(%rbp)
        movq    %r10, %rbx
        movq    %r10, -32(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L20
        movl    $0, %eax
        jmp     .L21
.L20:
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rbx, %r10
        movq    %rax, %rdi
        call    updateHeight.4169
        movl    %eax, %r12d
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rbx, %r10
        movq    %rax, %rdi
        call    updateHeight.4169
        movq    %rbx, %r10
        movl    %r12d, %esi
        movl    %eax, %edi
        call    maximum.4166
        leal    1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, 4(%rax)
        movq    -24(%rbp), %rax
        movl    4(%rax), %eax
.L21:
        addq    $16, %rsp
        popq    %rbx
        popq    %r12
        popq    %rbp
        ret
createNode.4172:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movl    %edi, -20(%rbp)
        movq    %r10, -32(%rbp)
        movl    $24, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -8(%rbp), %rax
        movq    $0, 16(%rax)
        movq    -8(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        leave
        ret
insertion.4177:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movl    %edi, -36(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %r10, %rax
        movq    %r10, -56(%rbp)
        movq    -48(%rbp), %rdx
        movq    %rdx, -8(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L25
        movl    -36(%rbp), %edx
        movq    %rax, %r10
        movl    %edx, %edi
        call    createNode.4172
        movq    %rax, -16(%rbp)
        movq    -16(%rbp), %rax
        jmp     .L26
.L25:
        movq    -8(%rbp), %rdx
        movl    (%rdx), %edx
        cmpl    %edx, -36(%rbp)
        jge     .L27
        movq    -8(%rbp), %rdx
        movq    8(%rdx), %rdx
        testq   %rdx, %rdx
        jne     .L28
        movl    -36(%rbp), %edx
        movq    %rax, %r10
        movl    %edx, %edi
        call    createNode.4172
        movq    %rax, -24(%rbp)
        movq    -8(%rbp), %rax
        movq    -24(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -48(%rbp), %rax
        jmp     .L26
.L28:
        movq    -8(%rbp), %rdx
        movq    8(%rdx), %rdx
        movq    %rdx, -8(%rbp)
        jmp     .L25
.L27:
        movq    -8(%rbp), %rdx
        movq    16(%rdx), %rdx
        testq   %rdx, %rdx
        jne     .L30
        movl    -36(%rbp), %edx
        movq    %rax, %r10
        movl    %edx, %edi
        call    createNode.4172
        movq    %rax, -32(%rbp)
        movq    -8(%rbp), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, 16(%rax)
        movq    -48(%rbp), %rax
        jmp     .L26
.L30:
        movq    -8(%rbp), %rdx
        movq    16(%rdx), %rdx
        movq    %rdx, -8(%rbp)
        jmp     .L25
.L26:
        leave
        ret
avlTreeInsertion.4185:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $40, %rsp
        movl    %edi, -36(%rbp)
        movq    %r10, %rbx
        movq    %r10, -48(%rbp)
        movb    $0, -25(%rbp)
        movq    (%rbx), %rdx
        movl    -36(%rbp), %eax
        movq    %rbx, %r10
        movq    %rdx, %rsi
        movl    %eax, %edi
        call    insertion.4177
        movq    %rax, (%rbx)
        movq    (%rbx), %rax
        movq    %rbx, %r10
        movq    %rax, %rdi
        call    updateHeight.4169
        movq    (%rbx), %rax
        leaq    -25(%rbp), %rdx
        movq    %rbx, %r10
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    heightImbalancingNode.4152
        movq    %rax, -24(%rbp)
        movzbl  -25(%rbp), %eax
        testb   %al, %al
        je      .L33
        movq    (%rbx), %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movq    %rbx, %r10
        movl    %edx, %esi
        movq    %rax, %rdi
        call    LLRotation.4158
.L33:
        nop
        addq    $40, %rsp
        popq    %rbx
        popq    %rbp
        ret
inOrderTraversal.4190:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $24, %rsp
        movq    %rdi, -24(%rbp)
        movq    %r10, %rbx
        movq    %r10, -32(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L36
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rbx, %r10
        movq    %rax, %rdi
        call    inOrderTraversal.4190
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movq    %rbx, %r10
        movl    %eax, %edi
        call    avlTreeInsertion.4185
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rbx, %r10
        movq    %rax, %rdi
        call    inOrderTraversal.4190
.L36:
        nop
        addq    $24, %rsp
        popq    %rbx
        popq    %rbp
        ret
