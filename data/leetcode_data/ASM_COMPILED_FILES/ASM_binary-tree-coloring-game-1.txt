func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $24, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L4
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L4
        movl    $1, %eax
        jmp     .L3
.L4:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        leal    1(%rax), %ebx
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        addl    %ebx, %eax
.L3:
        addq    $24, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        movq    %rdx, -24(%rbp)
        movq    %rcx, -32(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L9
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -12(%rbp)
        jne     .L8
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L5
.L8:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -32(%rbp), %rcx
        movq    -24(%rbp), %rdx
        movl    -12(%rbp), %esi
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -32(%rbp), %rcx
        movq    -24(%rbp), %rdx
        movl    -12(%rbp), %esi
        movq    %rax, %rdi
        call    func_1
        jmp     .L5
.L9:
        nop
.L5:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    $0, -4(%rbp)
        movl    $0, -8(%rbp)
        leaq    -8(%rbp), %rcx
        leaq    -4(%rbp), %rdx
        movl    -32(%rbp), %esi
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movl    -4(%rbp), %eax
        subl    %eax, %edx
        movl    -8(%rbp), %eax
        subl    %eax, %edx
        movl    -28(%rbp), %eax
        movl    %eax, %ecx
        shrl    $31, %ecx
        addl    %ecx, %eax
        sarl    %eax
        cmpl    %eax, %edx
        jle     .L11
        movl    $1, %eax
        jmp     .L15
.L11:
        movl    -28(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movl    -4(%rbp), %eax
        cmpl    %eax, %edx
        jge     .L13
        movl    $1, %eax
        jmp     .L15
.L13:
        movl    -28(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movl    -8(%rbp), %eax
        cmpl    %eax, %edx
        jge     .L14
        movl    $1, %eax
        jmp     .L15
.L14:
        movl    $0, %eax
.L15:
        leave
        ret
