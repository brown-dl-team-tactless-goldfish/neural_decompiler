func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -56(%rbp)
        movq    %rsi, -64(%rbp)
        movq    $0, -32(%rbp)
        movq    -64(%rbp), %rax
        movl    $0, (%rax)
        movq    $0, -8(%rbp)
        movq    $0, -16(%rbp)
        movl    $0, -36(%rbp)
        movl    $0, -40(%rbp)
        cmpq    $0, -56(%rbp)
        jne     .L2
        movq    -32(%rbp), %rax
        jmp     .L10
.L2:
        movq    -56(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L4
        movq    -56(%rbp), %rax
        movq    8(%rax), %rax
        leaq    -36(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    %rax, -8(%rbp)
.L4:
        movq    -56(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L5
        movq    -56(%rbp), %rax
        movq    16(%rax), %rax
        leaq    -40(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    %rax, -16(%rbp)
.L5:
        movl    -36(%rbp), %eax
        leal    1(%rax), %edx
        movl    -40(%rbp), %eax
        addl    %eax, %edx
        movq    -64(%rbp), %rax
        movl    %edx, (%rax)
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L6
.L7:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -8(%rbp), %rax
        addq    %rdx, %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -32(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -20(%rbp)
.L6:
        movl    -36(%rbp), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L7
        movl    $0, -24(%rbp)
        jmp     .L8
.L9:
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    -20(%rbp), %ecx
        movl    -24(%rbp), %edx
        addl    %ecx, %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -32(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -24(%rbp)
.L8:
        movl    -40(%rbp), %eax
        cmpl    %eax, -24(%rbp)
        jl      .L9
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -32(%rbp), %rax
        addq    %rax, %rdx
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -16(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -32(%rbp), %rax
.L10:
        leave
        ret
