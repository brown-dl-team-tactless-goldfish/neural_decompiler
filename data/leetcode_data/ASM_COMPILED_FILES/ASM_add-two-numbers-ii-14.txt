func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movl    %edi, -20(%rbp)
        movl    $16, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -8(%rbp), %rax
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    $0, -4(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, -16(%rbp)
        jmp     .L4
.L5:
        addl    $1, -4(%rbp)
        movq    -16(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -16(%rbp)
.L4:
        cmpq    $0, -16(%rbp)
        jne     .L5
        movl    -4(%rbp), %eax
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    %edx, -36(%rbp)
        movl    %ecx, -40(%rbp)
        movl    $0, -8(%rbp)
        movl    $404, %edi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L8
.L9:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    $0, (%rax)
        addl    $1, -4(%rbp)
.L8:
        cmpl    $100, -4(%rbp)
        jle     .L9
        movl    $101, %eax
        subl    -36(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L10
.L11:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
        addl    $1, -4(%rbp)
.L10:
        cmpl    $100, -4(%rbp)
        jle     .L11
        movl    $101, %eax
        subl    -40(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L12
.L13:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movq    -32(%rbp), %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rsi
        movq    -16(%rbp), %rax
        addq    %rsi, %rax
        addl    %ecx, %edx
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -32(%rbp)
        addl    $1, -4(%rbp)
.L12:
        cmpl    $100, -4(%rbp)
        jle     .L13
        movl    $100, -4(%rbp)
        jmp     .L14
.L17:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    -8(%rbp), %edx
        addl    %ecx, %edx
        movl    %edx, (%rax)
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    $9, %eax
        jle     .L15
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -16(%rbp), %rax
        addq    %rcx, %rax
        subl    $10, %edx
        movl    %edx, (%rax)
        movl    $1, -8(%rbp)
        jmp     .L16
.L15:
        movl    $0, -8(%rbp)
.L16:
        subl    $1, -4(%rbp)
.L14:
        cmpl    $0, -4(%rbp)
        jns     .L17
        movq    -16(%rbp), %rax
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $80, %rsp
        movq    %rdi, -72(%rbp)
        movq    %rsi, -80(%rbp)
        movq    -72(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -28(%rbp)
        movq    -80(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -32(%rbp)
        movl    -32(%rbp), %ecx
        movl    -28(%rbp), %edx
        movq    -80(%rbp), %rsi
        movq    -72(%rbp), %rax
        movq    %rax, %rdi
        call    func_2
        movq    %rax, -40(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L20
.L24:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        je      .L21
        movl    -4(%rbp), %eax
        movl    %eax, -8(%rbp)
        jmp     .L22
.L21:
        cmpl    $101, -4(%rbp)
        jne     .L23
        movl    $100, -8(%rbp)
.L23:
        addl    $1, -4(%rbp)
.L20:
        cmpl    $100, -4(%rbp)
        jle     .L24
.L22:
        movb    $1, -9(%rbp)
        movl    $16, %edi
        call    malloc
        movq    %rax, -48(%rbp)
        movq    -48(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -48(%rbp), %rax
        movq    %rax, -24(%rbp)
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        jmp     .L25
.L28:
        cmpb    $0, -9(%rbp)
        je      .L26
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movb    $0, -9(%rbp)
        jmp     .L27
.L26:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, %edi
        call    func_4
        movq    %rax, -56(%rbp)
        movq    -24(%rbp), %rax
        movq    -56(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
.L27:
        addl    $1, -4(%rbp)
.L25:
        cmpl    $100, -4(%rbp)
        jle     .L28
        movq    -48(%rbp), %rax
        leave
        ret
