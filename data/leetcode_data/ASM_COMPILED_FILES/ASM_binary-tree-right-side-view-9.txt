func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -56(%rbp)
        movq    %rsi, -64(%rbp)
        cmpq    $0, -56(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movl    $4, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -64(%rbp), %rax
        movl    $0, (%rax)
        movl    $8, %edi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    $8, %edi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    $1, -28(%rbp)
        movl    $0, -32(%rbp)
        movl    -28(%rbp), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -56(%rbp), %rax
        movq    %rax, (%rdx)
        jmp     .L4
.L9:
        movl    $0, -32(%rbp)
        movl    -28(%rbp), %eax
        cltq
        salq    $4, %rax
        movq    %rax, %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, -24(%rbp)
        movl    $0, -36(%rbp)
        jmp     .L5
.L8:
        movl    -36(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L6
        movl    -36(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -32(%rbp), %eax
        leal    1(%rax), %ecx
        movl    %ecx, -32(%rbp)
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -24(%rbp), %rax
        addq    %rax, %rcx
        movq    8(%rdx), %rax
        movq    %rax, (%rcx)
.L6:
        movl    -36(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L7
        movl    -36(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -32(%rbp), %eax
        leal    1(%rax), %ecx
        movl    %ecx, -32(%rbp)
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -24(%rbp), %rax
        addq    %rax, %rcx
        movq    16(%rdx), %rax
        movq    %rax, (%rcx)
.L7:
        addl    $1, -36(%rbp)
.L5:
        movl    -36(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L8
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -64(%rbp), %rax
        movl    %edx, (%rax)
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, -8(%rbp)
        movl    -28(%rbp), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    -64(%rbp), %rdx
        movl    (%rdx), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        leaq    -4(%rdx), %rcx
        movq    -8(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -16(%rbp), %rax
        movq    %rax, -48(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, -16(%rbp)
        movq    -48(%rbp), %rax
        movq    %rax, -24(%rbp)
        movl    -32(%rbp), %eax
        movl    %eax, -28(%rbp)
.L4:
        cmpl    $0, -28(%rbp)
        jne     .L9
        movq    -8(%rbp), %rax
.L3:
        leave
        ret
