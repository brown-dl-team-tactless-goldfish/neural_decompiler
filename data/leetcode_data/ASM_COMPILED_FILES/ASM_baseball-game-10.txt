.LC0:
        .string "D"
.LC1:
        .string "C"
.LC2:
        .string "+"
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -56(%rbp)
        movl    %esi, -60(%rbp)
        movl    -60(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    $-1, -4(%rbp)
        movq    $.LC0, -32(%rbp)
        movq    $.LC1, -40(%rbp)
        movq    $.LC2, -48(%rbp)
        movl    $0, -12(%rbp)
        jmp     .L2
.L7:
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    strcmp
        testl   %eax, %eax
        jne     .L3
        addl    $1, -4(%rbp)
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        addl    %edx, %edx
        movl    %edx, (%rax)
        jmp     .L4
.L3:
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    -40(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    strcmp
        testl   %eax, %eax
        jne     .L5
        subl    $1, -4(%rbp)
        jmp     .L4
.L5:
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    -48(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    strcmp
        testl   %eax, %eax
        jne     .L6
        addl    $1, -4(%rbp)
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -8(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rsi
        movq    -24(%rbp), %rax
        addq    %rsi, %rax
        addl    %ecx, %edx
        movl    %edx, (%rax)
        jmp     .L4
.L6:
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    atoi
        movl    %eax, -8(%rbp)
        addl    $1, -4(%rbp)
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -8(%rbp), %eax
        movl    %eax, (%rdx)
.L4:
        addl    $1, -12(%rbp)
.L2:
        movl    -12(%rbp), %eax
        cmpl    -60(%rbp), %eax
        jl      .L7
        movl    $0, -8(%rbp)
        movl    $0, -16(%rbp)
        jmp     .L8
.L9:
        movl    -16(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        addl    %eax, -8(%rbp)
        addl    $1, -16(%rbp)
.L8:
        movl    -4(%rbp), %eax
        cmpl    -16(%rbp), %eax
        jge     .L9
        movl    -8(%rbp), %eax
        leave
        ret
