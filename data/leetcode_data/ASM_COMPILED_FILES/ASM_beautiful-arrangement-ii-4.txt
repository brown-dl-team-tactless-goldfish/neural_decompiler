func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movl    %edi, -36(%rbp)
        movl    %esi, -40(%rbp)
        movq    %rdx, -48(%rbp)
        movl    -36(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        movl    $0, %eax
        call    var_4
        cltq
        movq    %rax, -24(%rbp)
        movl    $1, -4(%rbp)
        movl    -36(%rbp), %eax
        movl    %eax, -8(%rbp)
        movl    $0, -12(%rbp)
        jmp     .L2
.L5:
        movl    -40(%rbp), %eax
        andl    $1, %eax
        testl   %eax, %eax
        je      .L3
        movl    -4(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -4(%rbp)
        movl    -12(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    %eax, (%rdx)
        jmp     .L4
.L3:
        movl    -8(%rbp), %eax
        leal    -1(%rax), %edx
        movl    %edx, -8(%rbp)
        movl    -12(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    %eax, (%rdx)
.L4:
        subl    $1, -40(%rbp)
        addl    $1, -12(%rbp)
.L2:
        cmpl    $0, -40(%rbp)
        jne     .L5
        jmp     .L6
.L7:
        movl    -4(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -4(%rbp)
        movl    -12(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    %eax, (%rdx)
        addl    $1, -12(%rbp)
.L6:
        movl    -12(%rbp), %eax
        cmpl    -36(%rbp), %eax
        jl      .L7
        movq    -48(%rbp), %rax
        movl    -12(%rbp), %edx
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        leave
        ret
