func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        movq    -8(%rbp), %rax
        movl    -12(%rbp), %edx
        movl    %edx, (%rax)
        movl    -12(%rbp), %eax
        cltq
        salq    $4, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 8(%rax)
        movl    -12(%rbp), %eax
        cltq
        salq    $4, %rax
        movq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    memset
        nop
        leave
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -32(%rbp)
        jl      .L3
        movl    -32(%rbp), %eax
        addl    $10, %eax
        cltq
        salq    $4, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -8(%rbp)
        movl    -32(%rbp), %eax
        addl    $10, %eax
        cltq
        salq    $4, %rax
        movq    %rax, %rdx
        movq    -8(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    memset
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $4, %rax
        movq    %rax, %rdx
        movq    -24(%rbp), %rax
        movq    8(%rax), %rcx
        movq    -8(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memmove
        movl    -32(%rbp), %eax
        leal    10(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 8(%rax)
.L3:
        movl    $16, %edi
        call    malloc
        movq    %rax, -16(%rbp)
        movq    -16(%rbp), %rax
        movl    -28(%rbp), %edx
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $4, %rdx
        addq    %rdx, %rax
        movq    8(%rax), %rdx
        movq    -16(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $4, %rdx
        addq    %rax, %rdx
        movq    -16(%rbp), %rax
        movq    %rax, 8(%rdx)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $4, %rdx
        addq    %rdx, %rax
        movl    (%rax), %edx
        addl    $1, %edx
        movl    %edx, (%rax)
        nop
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        movq    %rdx, -24(%rbp)
        movq    -8(%rbp), %rax
        movl    (%rax), %ecx
        movl    -12(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_4
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L5
        movl    -12(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_3
.L5:
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L7
        movl    -12(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_3
.L7:
        nop
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $104, %rsp
        movq    %rdi, -88(%rbp)
        movq    %rsi, -96(%rbp)
        movq    %rdx, -104(%rbp)
        cmpq    $0, -88(%rbp)
        jne     .L9
        movl    $0, %eax
        jmp     .L19
.L9:
        leaq    -80(%rbp), %rax
        movl    $200, %esi
        movq    %rax, %rdi
        call    func_1
        leaq    -80(%rbp), %rdx
        movq    -88(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_3
        movl    $0, -20(%rbp)
        jmp     .L11
.L14:
        movq    -72(%rbp), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $4, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        je      .L20
        addl    $1, -20(%rbp)
.L11:
        movl    -80(%rbp), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L14
        jmp     .L13
.L20:
        nop
.L13:
        movl    -20(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -56(%rbp)
        movl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, %rdx
        movq    -96(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -104(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
        movl    -20(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -24(%rbp)
        movl    $0, -28(%rbp)
        jmp     .L15
.L18:
        movq    -72(%rbp), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $4, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -60(%rbp)
        movq    -96(%rbp), %rax
        movq    (%rax), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    -60(%rbp), %eax
        movl    %eax, (%rdx)
        movl    -60(%rbp), %eax
        cltq
        salq    $2, %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -56(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movq    -72(%rbp), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $4, %rdx
        addq    %rdx, %rax
        movq    8(%rax), %rax
        movq    %rax, -40(%rbp)
        movl    -60(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -44(%rbp)
        jmp     .L16
.L17:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -44(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -40(%rbp)
        subl    $1, -44(%rbp)
.L16:
        cmpl    $0, -44(%rbp)
        jns     .L17
        subl    $1, -24(%rbp)
        addl    $1, -28(%rbp)
.L15:
        cmpl    $0, -24(%rbp)
        jns     .L18
        movq    -56(%rbp), %rax
.L19:
        addq    $104, %rsp
        popq    %rbx
        popq    %rbp
        ret
