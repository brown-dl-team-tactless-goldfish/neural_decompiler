func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movl    %edx, -20(%rbp)
        movq    -16(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jle     .L2
        movq    -16(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
.L2:
        cmpq    $0, -8(%rbp)
        je      .L5
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
        jmp     .L1
.L5:
        nop
.L1:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movl    %edx, -20(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L9
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        jmp     .L6
.L9:
        nop
.L6:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -32(%rbp), %rax
        movl    $0, (%rax)
        movq    -32(%rbp), %rcx
        movq    -24(%rbp), %rax
        movl    $0, %edx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rcx
        movq    -24(%rbp), %rax
        movl    $0, %edx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        leave
        ret
