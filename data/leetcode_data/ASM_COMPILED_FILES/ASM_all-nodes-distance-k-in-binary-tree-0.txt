func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L2
        movl    $-1, %eax
        jmp     .L3
.L2:
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_2
        cvtsi2sd        %eax, %xmm2
        movsd   %xmm2, -16(%rbp)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_2
        cvtsi2sd        %eax, %xmm0
        movsd   -16(%rbp), %xmm1
        call    fmax
        movapd  %xmm0, %xmm1
        movsd   .LC0(%rip), %xmm0
        addsd   %xmm1, %xmm0
        cvttsd2si       %xmm0, %eax
.L3:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    %rdx, -40(%rbp)
        movl    %ecx, -44(%rbp)
        movq    %r8, -56(%rbp)
        movq    %r9, -64(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L10
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rax, %rdx
        movq    -24(%rbp), %rax
        movq    %rax, (%rdx)
        movq    -24(%rbp), %rax
        cmpq    -32(%rbp), %rax
        jne     .L7
        movl    -44(%rbp), %eax
        leal    1(%rax), %edx
        movq    -64(%rbp), %rax
        movl    %edx, (%rax)
        movl    $0, -4(%rbp)
        jmp     .L8
.L9:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -56(%rbp), %rdx
        addq    %rcx, %rdx
        movq    (%rax), %rax
        movq    %rax, (%rdx)
        addl    $1, -4(%rbp)
.L8:
        movl    -44(%rbp), %eax
        cmpl    -4(%rbp), %eax
        jge     .L9
        jmp     .L4
.L7:
        movl    -44(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -64(%rbp), %r8
        movq    -56(%rbp), %rdi
        movq    -40(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %r8, %r9
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movl    -44(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -64(%rbp), %r8
        movq    -56(%rbp), %rdi
        movq    -40(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %r8, %r9
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        jmp     .L4
.L10:
        nop
.L4:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movl    %ecx, -28(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L15
        cmpl    $0, -28(%rbp)
        jne     .L14
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L11
.L14:
        movl    -28(%rbp), %eax
        leal    -1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_1
        movl    -28(%rbp), %eax
        leal    -1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_1
        jmp     .L11
.L15:
        nop
.L11:
        leave
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $96, %rsp
        movq    %rdi, -72(%rbp)
        movq    %rsi, -80(%rbp)
        movl    %edx, -84(%rbp)
        movq    %rcx, -96(%rbp)
        movl    $400, %edi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    $0, -48(%rbp)
        movq    -72(%rbp), %rax
        cmpq    -80(%rbp), %rax
        jne     .L17
        movl    -84(%rbp), %ecx
        leaq    -48(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    -72(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        movl    -48(%rbp), %edx
        movq    -96(%rbp), %rax
        movl    %edx, (%rax)
        movq    -16(%rbp), %rax
        jmp     .L25
.L17:
        movq    -72(%rbp), %rax
        movq    %rax, %rdi
        call    func_2
        movl    %eax, -20(%rbp)
        movl    -20(%rbp), %eax
        addl    $1, %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    -20(%rbp), %eax
        addl    $1, %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -40(%rbp)
        movl    $0, -44(%rbp)
        movl    $0, -52(%rbp)
        leaq    -52(%rbp), %r8
        movq    -40(%rbp), %rdi
        movl    -44(%rbp), %ecx
        movq    -32(%rbp), %rdx
        movq    -80(%rbp), %rsi
        movq    -72(%rbp), %rax
        movq    %r8, %r9
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movl    -84(%rbp), %ecx
        leaq    -48(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    -80(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        movl    $1, -4(%rbp)
        movl    -52(%rbp), %eax
        subl    $2, %eax
        movl    %eax, -8(%rbp)
        jmp     .L19
.L24:
        movl    -84(%rbp), %eax
        cmpl    -4(%rbp), %eax
        jne     .L20
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -48(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -16(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -48(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -48(%rbp)
        jmp     .L21
.L20:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    8(%rax), %rdx
        movl    -8(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,8), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movq    (%rax), %rax
        cmpq    %rax, %rdx
        jne     .L22
        movl    -84(%rbp), %eax
        subl    -4(%rbp), %eax
        leal    -1(%rax), %ecx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    16(%rax), %rax
        leaq    -48(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_1
        jmp     .L23
.L22:
        movl    -84(%rbp), %eax
        subl    -4(%rbp), %eax
        leal    -1(%rax), %ecx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    8(%rax), %rax
        leaq    -48(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_1
.L23:
        addl    $1, -4(%rbp)
        subl    $1, -8(%rbp)
.L19:
        cmpl    $0, -8(%rbp)
        jns     .L24
.L21:
        movl    -48(%rbp), %edx
        movq    -96(%rbp), %rax
        movl    %edx, (%rax)
        movq    -16(%rbp), %rax
.L25:
        leave
        ret
.LC0:
        .long   0
        .long   1072693248
