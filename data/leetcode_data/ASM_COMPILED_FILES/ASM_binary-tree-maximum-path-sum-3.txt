func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -4(%rbp)
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -8(%rbp)
        cmpl    $0, -4(%rbp)
        jle     .L4
        cmpl    $0, -8(%rbp)
        jle     .L5
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        addl    %eax, %edx
        movl    -4(%rbp), %eax
        addl    %eax, %edx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L6
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        addl    %eax, %edx
        movl    -4(%rbp), %eax
        addl    %eax, %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
.L6:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L7
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        jmp     .L3
.L7:
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        addl    %edx, %eax
        jmp     .L3
.L5:
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        addl    %eax, %edx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L9
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        addl    %eax, %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
.L9:
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        jmp     .L3
.L4:
        cmpl    $0, -8(%rbp)
        jle     .L10
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        addl    %eax, %edx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L11
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        addl    %eax, %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
.L11:
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        addl    %edx, %eax
        jmp     .L3
.L10:
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L12
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
.L12:
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    $0, %edx
        testl   %eax, %eax
        cmovs   %edx, %eax
.L3:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -8(%rbp)
        leaq    -8(%rbp), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -4(%rbp)
        movl    -8(%rbp), %eax
        leave
        ret
