func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L5
        movl    -12(%rbp), %eax
        cltq
        movzbl  var_3(%rax), %eax
        xorl    $1, %eax
        testb   %al, %al
        je      .L4
        movl    var_1(%rip), %eax
        leal    1(%rax), %edx
        movl    %edx, var_1(%rip)
        movq    -8(%rbp), %rdx
        movl    (%rdx), %edx
        cltq
        movl    %edx, var_12(,%rax,4)
        movl    -12(%rbp), %eax
        cltq
        movb    $1, var_3(%rax)
.L4:
        movl    -12(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_2
        movl    -12(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_2
        jmp     .L1
.L5:
        nop
.L1:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    var_1(%rip), %eax
        testl   %eax, %eax
        je      .L14
        movl    var_1(%rip), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, var_7(%rip)
        movq    var_7(%rip), %rax
        testq   %rax, %rax
        jne     .L9
        movl    $1, %edi
        call    exit
.L9:
        movl    $0, -4(%rbp)
        jmp     .L10
.L11:
        movq    var_7(%rip), %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        cltq
        movl    var_12(,%rax,4), %eax
        movl    %eax, (%rdx)
        addl    $1, -4(%rbp)
.L10:
        movl    var_1(%rip), %eax
        cmpl    %eax, -4(%rbp)
        jl      .L11
        movl    $0, -4(%rbp)
        jmp     .L12
.L13:
        movl    -4(%rbp), %eax
        cltq
        movb    $0, var_3(%rax)
        addl    $1, -4(%rbp)
.L12:
        cmpl    $999, -4(%rbp)
        jle     .L13
        jmp     .L6
.L14:
        nop
.L6:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movl    $0, var_1(%rip)
        movq    $0, var_7(%rip)
        movq    -8(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_2
        movl    $0, %eax
        call    func_3
        movl    var_1(%rip), %edx
        movq    -16(%rbp), %rax
        movl    %edx, (%rax)
        movq    var_7(%rip), %rax
        leave
        ret
