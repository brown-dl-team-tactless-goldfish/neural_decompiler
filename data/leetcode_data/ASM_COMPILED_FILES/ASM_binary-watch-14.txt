func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -20(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L2
.L3:
        movl    -20(%rbp), %eax
        subl    $1, %eax
        andl    %eax, -20(%rbp)
        addl    $1, -4(%rbp)
.L2:
        cmpl    $0, -20(%rbp)
        jne     .L3
        movl    -4(%rbp), %eax
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movl    %edi, -52(%rbp)
        movq    %rsi, -64(%rbp)
        movl    $8, %edi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    $0, -28(%rbp)
        movl    $0, -32(%rbp)
        jmp     .L6
.L10:
        movl    $0, -36(%rbp)
        jmp     .L7
.L9:
        movl    -32(%rbp), %eax
        movl    %eax, %edi
        call    func_2
        movl    %eax, %ebx
        movl    -36(%rbp), %eax
        movl    %eax, %edi
        call    func_2
        addl    %ebx, %eax
        cmpl    %eax, -52(%rbp)
        jne     .L8
        addl    $1, -28(%rbp)
        movl    $6, %edi
        call    malloc
        movq    %rax, -48(%rbp)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, -24(%rbp)
        movl    -28(%rbp), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movq    -48(%rbp), %rax
        movq    %rax, (%rdx)
.L8:
        addl    $1, -36(%rbp)
.L7:
        cmpl    $59, -36(%rbp)
        jle     .L9
        addl    $1, -32(%rbp)
.L6:
        cmpl    $11, -32(%rbp)
        jle     .L10
        movq    -64(%rbp), %rax
        movl    -28(%rbp), %edx
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
