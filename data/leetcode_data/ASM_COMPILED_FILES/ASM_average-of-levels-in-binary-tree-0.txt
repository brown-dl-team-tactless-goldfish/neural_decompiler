func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        movq    %rdx, -24(%rbp)
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    (%rax), %rdx
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    (%rax), %rax
        addq    $1, %rdx
        movq    %rdx, (%rax)
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movq    (%rax), %rcx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rsi
        movq    -24(%rbp), %rax
        addq    %rsi, %rax
        movq    (%rax), %rax
        addq    $8, %rax
        addq    %rcx, %rdx
        movq    %rdx, (%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L2
        movl    -12(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_1
.L2:
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L4
        movl    -12(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_1
.L4:
        nop
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -56(%rbp)
        movq    %rsi, -64(%rbp)
        movq    -56(%rbp), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -24(%rbp)
        movl    -24(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L6
.L7:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    $8, %esi
        movl    $2, %edi
        call    calloc
        movq    %rax, (%rbx)
        addl    $1, -20(%rbp)
.L6:
        movl    -20(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jl      .L7
        movq    -32(%rbp), %rdx
        movq    -56(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_1
        movl    -24(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -40(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L8
.L11:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        jne     .L9
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        pxor    %xmm0, %xmm0
        movsd   %xmm0, (%rax)
        jmp     .L10
.L9:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movq    (%rax), %rax
        cvtsi2sdq       %rax, %xmm0
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    (%rax), %rax
        cvtsi2sdq       %rax, %xmm1
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        divsd   %xmm1, %xmm0
        movsd   %xmm0, (%rax)
.L10:
        addl    $1, -20(%rbp)
.L8:
        movl    -20(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jl      .L11
        movq    -64(%rbp), %rax
        movl    -24(%rbp), %edx
        movl    %edx, (%rax)
        movl    $0, -20(%rbp)
        jmp     .L12
.L13:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
        addl    $1, -20(%rbp)
.L12:
        movl    -20(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jl      .L13
        movq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -40(%rbp), %rax
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L16
        movl    $0, %eax
        jmp     .L17
.L16:
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        cvtsi2sd        %eax, %xmm2
        movsd   %xmm2, -16(%rbp)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        cvtsi2sd        %eax, %xmm0
        movsd   -16(%rbp), %xmm1
        call    fmax
        movapd  %xmm0, %xmm1
        movsd   .LC1(%rip), %xmm0
        addsd   %xmm1, %xmm0
        cvttsd2si       %xmm0, %eax
.L17:
        leave
        ret
.LC1:
        .long   0
        .long   1072693248
