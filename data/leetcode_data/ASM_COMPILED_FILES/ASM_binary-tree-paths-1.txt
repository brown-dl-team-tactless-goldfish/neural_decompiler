func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %rdx, -56(%rbp)
        movq    %rcx, -64(%rbp)
        movq    %r8, -72(%rbp)
        cmpq    $0, -40(%rbp)
        je      .L5
        movl    $0, -25(%rbp)
        movb    $0, -21(%rbp)
        movl    $0, -20(%rbp)
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -48(%rbp), %rax
        addq    %rax, %rdx
        leaq    -25(%rbp), %rax
        movq    %rax, %rsi
        movq    %rdx, %rdi
        call    strcpy
        movq    -56(%rbp), %rax
        movl    (%rax), %edx
        movl    -20(%rbp), %eax
        addl    %eax, %edx
        movq    -56(%rbp), %rax
        movl    %edx, (%rax)
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L3
        movq    -40(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L3
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        movslq  %eax, %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        addl    $1, %eax
        cltq
        movq    -72(%rbp), %rdx
        movl    (%rdx), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -64(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rsi
        movl    $1, %edi
        call    calloc
        movq    %rax, (%rbx)
        movq    -72(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -72(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    -48(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    strcpy
        jmp     .L4
.L3:
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -56(%rbp), %rdx
        movl    %ecx, (%rdx)
        movslq  %eax, %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movb    $45, (%rax)
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -56(%rbp), %rdx
        movl    %ecx, (%rdx)
        movslq  %eax, %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movb    $62, (%rax)
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        movq    -72(%rbp), %rdi
        movq    -64(%rbp), %rcx
        movq    -56(%rbp), %rdx
        movq    -48(%rbp), %rsi
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_1
        movq    -40(%rbp), %rax
        movq    16(%rax), %rax
        movq    -72(%rbp), %rdi
        movq    -64(%rbp), %rcx
        movq    -56(%rbp), %rdx
        movq    -48(%rbp), %rsi
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_1
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        leal    -2(%rax), %edx
        movq    -56(%rbp), %rax
        movl    %edx, (%rax)
.L4:
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        subl    -20(%rbp), %eax
        movl    %eax, %edx
        movq    -56(%rbp), %rax
        movl    %edx, (%rax)
.L5:
        nop
        addq    $72, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movl    $100, %esi
        movl    $8, %edi
        call    calloc
        movq    %rax, -8(%rbp)
        movl    $305, %esi
        movl    $1, %edi
        call    calloc
        movq    %rax, -16(%rbp)
        movl    $0, -20(%rbp)
        movq    -48(%rbp), %rax
        movl    $0, (%rax)
        movq    -48(%rbp), %rdi
        movq    -8(%rbp), %rcx
        leaq    -20(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    -40(%rbp), %rax
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        leave
        ret
