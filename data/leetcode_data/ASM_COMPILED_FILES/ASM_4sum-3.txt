func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L2
.L6:
        movl    -4(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L3
.L5:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jge     .L4
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -12(%rbp)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -12(%rbp), %eax
        movl    %eax, (%rdx)
.L4:
        addl    $1, -8(%rbp)
.L3:
        movl    -8(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L5
        addl    $1, -4(%rbp)
.L2:
        movl    -4(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L6
        nop
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %rdx, -56(%rbp)
        movq    %rcx, -64(%rbp)
        movl    %r8d, -68(%rbp)
        movq    %r9, -80(%rbp)
        cmpl    $3, 16(%rbp)
        jg      .L8
        movl    24(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -20(%rbp)
        jmp     .L9
.L13:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    16(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -80(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        cmpl    $0, -20(%rbp)
        jle     .L10
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -64(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jne     .L11
.L10:
        movl    24(%rbp), %eax
        addl    $1, %eax
        cmpl    %eax, -20(%rbp)
        jne     .L12
.L11:
        movl    16(%rbp), %eax
        leal    1(%rax), %r10d
        movq    -80(%rbp), %r9
        movl    -68(%rbp), %r8d
        movq    -64(%rbp), %rcx
        movq    -56(%rbp), %rdx
        movq    -48(%rbp), %rsi
        movq    -40(%rbp), %rax
        subq    $8, %rsp
        movl    32(%rbp), %edi
        pushq   %rdi
        movl    -20(%rbp), %edi
        pushq   %rdi
        pushq   %r10
        movq    %rax, %rdi
        call    func_3
        addq    $32, %rsp
.L12:
        addl    $1, -20(%rbp)
.L9:
        movl    -20(%rbp), %eax
        cmpl    -68(%rbp), %eax
        jl      .L13
        jmp     .L19
.L8:
        movl    $0, -24(%rbp)
        movl    $0, -28(%rbp)
        jmp     .L15
.L16:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        addl    %eax, -24(%rbp)
        addl    $1, -28(%rbp)
.L15:
        cmpl    $3, -28(%rbp)
        jle     .L16
        movl    -24(%rbp), %eax
        cmpl    32(%rbp), %eax
        jne     .L19
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -48(%rbp), %rax
        movl    %edx, (%rax)
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -40(%rbp), %rax
        movq    (%rax), %rdx
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        subq    $8, %rax
        leaq    (%rdx,%rax), %rbx
        movl    $16, %edi
        call    malloc
        movq    %rax, (%rbx)
        movq    -56(%rbp), %rax
        movq    (%rax), %rdx
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        subq    $4, %rax
        addq    %rdx, %rax
        movl    $4, (%rax)
        movl    $0, -32(%rbp)
        jmp     .L17
.L18:
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -80(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movq    -40(%rbp), %rax
        movq    (%rax), %rdx
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        subq    $8, %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    (%rcx), %eax
        movl    %eax, (%rdx)
        addl    $1, -32(%rbp)
.L17:
        cmpl    $3, -32(%rbp)
        jle     .L18
.L19:
        nop
        movq    -8(%rbp), %rbx
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movl    %edx, -48(%rbp)
        movq    %rcx, -56(%rbp)
        movq    %r8, -64(%rbp)
        movl    $0, -4(%rbp)
        movl    $-1, -8(%rbp)
        movq    -56(%rbp), %rax
        movl    $0, (%rax)
        movl    -44(%rbp), %edx
        movq    -40(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_1
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, %rdx
        movq    -64(%rbp), %rax
        movq    %rdx, (%rax)
        movl    $16, %edi
        call    malloc
        movq    %rax, -16(%rbp)
        movq    -16(%rbp), %r9
        movl    -44(%rbp), %r8d
        movq    -40(%rbp), %rcx
        movq    -64(%rbp), %rdx
        movq    -56(%rbp), %rsi
        leaq    -24(%rbp), %rax
        subq    $8, %rsp
        movl    -48(%rbp), %edi
        pushq   %rdi
        movl    -8(%rbp), %edi
        pushq   %rdi
        movl    -4(%rbp), %edi
        pushq   %rdi
        movq    %rax, %rdi
        call    func_3
        addq    $32, %rsp
        movq    -24(%rbp), %rax
        leave
        ret
