func_2_depth:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        movq    %rdx, -24(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L5
        addl    $1, -12(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -12(%rbp)
        jle     .L4
        movq    -24(%rbp), %rax
        movl    -12(%rbp), %edx
        movl    %edx, (%rax)
.L4:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movl    -12(%rbp), %ecx
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_2_depth
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movl    -12(%rbp), %ecx
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_2_depth
        jmp     .L1
.L5:
        nop
.L1:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $40, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movq    %rdx, -40(%rbp)
        movq    %rcx, -48(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L12
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jne     .L9
        cmpl    $10, -28(%rbp)
        jg      .L10
        movl    -28(%rbp), %eax
        movl    $1, %edx
        movl    %eax, %ecx
        sall    %cl, %edx
        movl    %edx, %eax
        cltq
        salq    $2, %rax
        jmp     .L11
.L10:
        movl    $4096, %eax
.L11:
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -40(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
.L9:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rsi
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -48(%rbp), %rax
        addq    %rax, %rdx
        movl    (%rdx), %eax
        leal    1(%rax), %ecx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -28(%rbp), %eax
        leal    1(%rax), %esi
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -48(%rbp), %rcx
        movq    -40(%rbp), %rdx
        movq    %rax, %rdi
        call    func_2
        movl    -28(%rbp), %eax
        leal    1(%rax), %esi
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -48(%rbp), %rcx
        movq    -40(%rbp), %rdx
        movq    %rax, %rdi
        call    func_2
        jmp     .L6
.L12:
        nop
.L6:
        addq    $40, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    %rdx, -40(%rbp)
        movq    -32(%rbp), %rax
        movl    $0, (%rax)
        cmpq    $0, -24(%rbp)
        jne     .L14
        movl    $0, %eax
        jmp     .L15
.L14:
        movq    -32(%rbp), %rdx
        movq    -24(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_2_depth
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -40(%rbp), %rax
        movq    (%rax), %rcx
        movq    -8(%rbp), %rdx
        movq    -24(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_2
        movq    -8(%rbp), %rax
.L15:
        leave
        ret
