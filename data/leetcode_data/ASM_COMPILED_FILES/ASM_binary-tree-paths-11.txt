func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $664, %rsp
        movq    %rdi, -648(%rbp)
        movq    %rsi, -656(%rbp)
        movq    %rdx, -664(%rbp)
        movq    -648(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L2
        movq    -648(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L2
        movq    -664(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -656(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    $1, %esi
        movl    $610, %edi
        call    calloc
        movq    %rax, (%rbx)
        movq    -664(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -664(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L1
.L2:
        movl    $0, -20(%rbp)
        movq    -648(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L4
        movq    -664(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -20(%rbp)
        movq    -648(%rbp), %rax
        movq    8(%rax), %rax
        movq    -664(%rbp), %rdx
        movq    -656(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        leaq    -640(%rbp), %rdx
        movl    $0, %eax
        movl    $76, %ecx
        movq    %rdx, %rdi
        rep stosq
        movq    %rdi, %rdx
        movw    %ax, (%rdx)
        addq    $2, %rdx
        jmp     .L5
.L6:
        addl    $1, -20(%rbp)
.L5:
        movq    -664(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L6
.L4:
        movq    -648(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L1
        movq    -664(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -20(%rbp)
        movq    -648(%rbp), %rax
        movq    16(%rax), %rax
        movq    -664(%rbp), %rdx
        movq    -656(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        leaq    -640(%rbp), %rdx
        movl    $0, %eax
        movl    $76, %ecx
        movq    %rdx, %rdi
        rep stosq
        movq    %rdi, %rdx
        movw    %ax, (%rdx)
        addq    $2, %rdx
        jmp     .L7
.L8:
        addl    $1, -20(%rbp)
.L7:
        movq    -664(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L8
.L1:
        addq    $664, %rsp
        popq    %rbx
        popq    %rbp
        ret
binaryfunc_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    $800, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -32(%rbp), %rax
        movl    $0, (%rax)
        movq    -32(%rbp), %rdx
        movq    -8(%rbp), %rcx
        movq    -24(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        leave
        ret
