func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $24, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_2
        leal    1(%rax), %ebx
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_2
        addl    %ebx, %eax
.L3:
        addq    $24, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movl    %ecx, -28(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L8
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -28(%rbp)
        jne     .L7
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -24(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
.L7:
        movl    -28(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_3
        movl    -28(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_3
        jmp     .L4
.L8:
        nop
.L4:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movl    $0, -20(%rbp)
        movl    $0, -4(%rbp)
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    func_2
        movl    %eax, -8(%rbp)
        movl    -8(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    memset
        movl    -4(%rbp), %ecx
        leaq    -20(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    func_3
        movl    -20(%rbp), %edx
        movq    -48(%rbp), %rax
        movl    %edx, (%rax)
        movq    -16(%rbp), %rax
        leave
        ret
