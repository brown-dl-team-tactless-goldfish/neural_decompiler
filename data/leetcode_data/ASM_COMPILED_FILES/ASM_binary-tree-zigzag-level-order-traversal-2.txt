func_10:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    $0, (%rax)
        movl    $80000, %edi
        call    malloc
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rax, (%rdx)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        nop
        popq    %rbp
        ret
func_8:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        leal    -1(%rax), %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        popq    %rbp
        ret
func_9:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    -16(%rbp), %rax
        movl    (%rax), %eax
        popq    %rbp
        ret
func_5:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    -16(%rbp), %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jne     .L9
        movl    $1, %eax
        jmp     .L10
.L9:
        movl    $0, %eax
.L10:
        popq    %rbp
        ret
func_6:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    -8(%rbp), %rax
        movl    $0, (%rax)
        movq    -16(%rbp), %rax
        movl    $0, (%rax)
        movl    $80000, %edi
        call    malloc
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -24(%rbp), %rax
        movq    %rax, (%rdx)
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movl    %edx, (%rax)
        nop
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        popq    %rbp
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %edx
        movq    -16(%rbp), %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        popq    %rbp
        ret
func_7:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movq    -16(%rbp), %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jne     .L19
        movl    $1, %eax
        jmp     .L20
.L19:
        movl    $0, %eax
.L20:
        popq    %rbp
        ret
func_11:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $152, %rsp
        movq    %rdi, -136(%rbp)
        movq    %rsi, -144(%rbp)
        movq    %rdx, -152(%rbp)
        movq    -144(%rbp), %rax
        movl    $0, (%rax)
        cmpq    $0, -136(%rbp)
        jne     .L22
        movl    $0, %eax
        jmp     .L36
.L22:
        leaq    -116(%rbp), %rax
        movq    %rax, -40(%rbp)
        leaq    -120(%rbp), %rax
        movq    %rax, -48(%rbp)
        leaq    -124(%rbp), %rax
        movq    %rax, -56(%rbp)
        movb    $1, -17(%rbp)
        movq    -48(%rbp), %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_6
        movq    %rax, -64(%rbp)
        movq    -56(%rbp), %rax
        movq    %rax, %rdi
        call    func_10
        movq    %rax, -72(%rbp)
        movl    $80000, %edi
        call    malloc
        movq    %rax, -80(%rbp)
        movl    $40000, %edi
        call    malloc
        movq    %rax, %rdx
        movq    -152(%rbp), %rax
        movq    %rdx, (%rax)
        movl    $0, -24(%rbp)
        movq    -136(%rbp), %rdx
        movq    -64(%rbp), %rcx
        movq    -48(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
        jmp     .L24
.L35:
        cmpb    $0, -17(%rbp)
        je      .L25
        movq    -48(%rbp), %rdx
        movq    -40(%rbp), %rcx
        movq    -64(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_4
        movl    %eax, -84(%rbp)
        movl    -84(%rbp), %eax
        cltq
        salq    $2, %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -80(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movq    -152(%rbp), %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    -84(%rbp), %eax
        movl    %eax, (%rdx)
        movl    $0, -28(%rbp)
        jmp     .L26
.L29:
        movq    -64(%rbp), %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    %rax, -96(%rbp)
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movq    -96(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -96(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L27
        movq    -96(%rbp), %rax
        movq    8(%rax), %rax
        movq    -56(%rbp), %rdx
        movq    -72(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        movq    -96(%rbp), %rax
        movq    8(%rax), %rdx
        movq    -64(%rbp), %rcx
        movq    -48(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
.L27:
        movq    -96(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L28
        movq    -96(%rbp), %rax
        movq    16(%rax), %rax
        movq    -56(%rbp), %rdx
        movq    -72(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        movq    -96(%rbp), %rax
        movq    16(%rax), %rdx
        movq    -64(%rbp), %rcx
        movq    -48(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
.L28:
        addl    $1, -28(%rbp)
.L26:
        movl    -28(%rbp), %eax
        cmpl    -84(%rbp), %eax
        jl      .L29
        jmp     .L30
.L25:
        movq    -56(%rbp), %rdx
        movq    -72(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_9
        movl    %eax, -100(%rbp)
        movl    -100(%rbp), %eax
        cltq
        salq    $2, %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -80(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movq    -152(%rbp), %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    -100(%rbp), %eax
        movl    %eax, (%rdx)
        movl    $0, -32(%rbp)
        jmp     .L31
.L34:
        movq    -56(%rbp), %rdx
        movq    -72(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_8
        movq    %rax, -112(%rbp)
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movq    -112(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -64(%rbp), %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    %rax, -112(%rbp)
        movq    -112(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L32
        movq    -112(%rbp), %rax
        movq    8(%rax), %rdx
        movq    -64(%rbp), %rcx
        movq    -48(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
.L32:
        movq    -112(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L33
        movq    -112(%rbp), %rax
        movq    16(%rax), %rdx
        movq    -64(%rbp), %rcx
        movq    -48(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
.L33:
        addl    $1, -32(%rbp)
.L31:
        movl    -32(%rbp), %eax
        cmpl    -100(%rbp), %eax
        jl      .L34
.L30:
        movzbl  -17(%rbp), %eax
        testl   %eax, %eax
        setne   %al
        xorl    $1, %eax
        movzbl  %al, %eax
        movb    %al, -17(%rbp)
        andb    $1, -17(%rbp)
        addl    $1, -24(%rbp)
        movq    -144(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -144(%rbp), %rax
        movl    %edx, (%rax)
.L24:
        movq    -48(%rbp), %rdx
        movq    -40(%rbp), %rcx
        movq    -64(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_7
        xorl    $1, %eax
        testb   %al, %al
        jne     .L35
        movq    -56(%rbp), %rdx
        movq    -72(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_5
        xorl    $1, %eax
        testb   %al, %al
        jne     .L35
        movq    -80(%rbp), %rax
.L36:
        addq    $152, %rsp
        popq    %rbx
        popq    %rbp
        ret
