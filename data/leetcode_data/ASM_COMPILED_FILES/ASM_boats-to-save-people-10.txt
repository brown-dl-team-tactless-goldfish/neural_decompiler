func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -56(%rbp)
        movl    %esi, -60(%rbp)
        movl    %edx, -64(%rbp)
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -24(%rbp)
        movl    $0, -32(%rbp)
        movl    $1, -20(%rbp)
        jmp     .L2
.L4:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -24(%rbp)
        jge     .L3
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -24(%rbp)
.L3:
        addl    $1, -20(%rbp)
.L2:
        movl    -20(%rbp), %eax
        cmpl    -60(%rbp), %eax
        jl      .L4
        movl    -24(%rbp), %eax
        leal    1(%rax), %ecx
        movq    %rsp, %rax
        movq    %rax, %rbx
        movslq  %ecx, %rax
        subq    $1, %rax
        movq    %rax, -40(%rbp)
        movslq  %ecx, %rax
        movq    %rax, %r10
        movl    $0, %r11d
        movslq  %ecx, %rax
        movq    %rax, %r8
        movl    $0, %r9d
        movslq  %ecx, %rax
        leaq    0(,%rax,4), %rdx
        movl    $16, %eax
        subq    $1, %rax
        addq    %rdx, %rax
        movl    $16, %esi
        movl    $0, %edx
        divq    %rsi
        imulq   $16, %rax, %rax
        subq    %rax, %rsp
        movq    %rsp, %rax
        addq    $3, %rax
        shrq    $2, %rax
        salq    $2, %rax
        movq    %rax, -48(%rbp)
        movslq  %ecx, %rax
        leaq    0(,%rax,4), %rdx
        movq    -48(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    memset
        movl    $0, -20(%rbp)
        jmp     .L5
.L6:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movq    -48(%rbp), %rdx
        movslq  %eax, %rcx
        movl    (%rdx,%rcx,4), %edx
        leal    1(%rdx), %ecx
        movq    -48(%rbp), %rdx
        cltq
        movl    %ecx, (%rdx,%rax,4)
        addl    $1, -20(%rbp)
.L5:
        movl    -20(%rbp), %eax
        cmpl    -60(%rbp), %eax
        jl      .L6
        movl    $1, -20(%rbp)
        movl    -24(%rbp), %eax
        movl    %eax, -28(%rbp)
        jmp     .L7
.L9:
        addl    $1, -20(%rbp)
.L7:
        movl    -20(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jg      .L10
        movq    -48(%rbp), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %eax
        testl   %eax, %eax
        jle     .L9
        jmp     .L10
.L12:
        subl    $1, -28(%rbp)
.L10:
        movl    -20(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jg      .L11
        movq    -48(%rbp), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %eax
        testl   %eax, %eax
        jle     .L12
.L11:
        movl    -20(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jg      .L19
        addl    $1, -32(%rbp)
        movl    -20(%rbp), %edx
        movl    -28(%rbp), %eax
        addl    %edx, %eax
        cmpl    %eax, -64(%rbp)
        jl      .L15
        movq    -48(%rbp), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %eax
        leal    -1(%rax), %ecx
        movq    -48(%rbp), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        movl    %ecx, (%rax,%rdx,4)
.L15:
        movq    -48(%rbp), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %eax
        leal    -1(%rax), %ecx
        movq    -48(%rbp), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        movl    %ecx, (%rax,%rdx,4)
        jmp     .L7
.L19:
        nop
        movl    -32(%rbp), %eax
        movq    %rbx, %rsp
        movq    -8(%rbp), %rbx
        leave
        ret
