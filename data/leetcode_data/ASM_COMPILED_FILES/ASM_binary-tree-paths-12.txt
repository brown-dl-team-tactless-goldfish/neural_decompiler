.LC0:
        .string "1"
.LC1:
        .string "2"
.LC2:
        .string "3"
.LC3:
        .string "4"
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L7
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L4
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L4
        movq    -16(%rbp), %rax
        movq    $.LC0, (%rax)
        jmp     .L1
.L4:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L5
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L5
        movq    -16(%rbp), %rax
        movq    $.LC1, (%rax)
        jmp     .L1
.L5:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L6
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L6
        movq    -16(%rbp), %rax
        movq    $.LC2, (%rax)
        jmp     .L1
.L6:
        movq    -16(%rbp), %rax
        movq    $.LC3, (%rax)
        jmp     .L1
.L7:
        nop
.L1:
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    $8, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -32(%rbp), %rax
        movl    $1, (%rax)
        movq    -8(%rbp), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        leave
        ret
