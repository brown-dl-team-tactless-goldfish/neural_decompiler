#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
typedef struct 
{
int var_15;
int var_9;
int * var_1;
}var_0;
bool func_1(var_0 * var_10)
{
return (var_10->var_15 == var_10->var_9 - 1) ? 1 : 0;
}
bool func_4(var_0 * var_10)
{
return (var_10->var_15 == -1) ? 1 : 0;
}
void func_2(var_0 * var_10, int var_3)
{
if(func_1(var_10))
return;
var_10->var_1[++(var_10->var_15)] = var_3;
}
int func_5(var_0 * var_10)
{
if(func_4(var_10))
return -1;
return var_10->var_1[(var_10->var_15)--];
}
char ** func_3(int* var_12, int var_13, int var_4, int* var_8)
{
int var_2 = 1;
char ** var_6 = (char **)malloc(sizeof(char *) * (2 * var_4));
int var_7 = 0;
int var_14 = 0;
var_0 var_10;
var_10.var_15 = -1;
var_10.var_9 = var_4;
var_10.var_1 = (int *)malloc(sizeof(int) * var_10.var_9);
while(var_2 != var_12[var_13-1])
{
func_2(&var_10, var_2);
char * var_11 = (char *)malloc(sizeof(char) * 5);
strncpy(var_11, "Push", 5);
var_6[var_7++] = var_11;
if(var_2 == var_12[var_14])
{
var_14++;
}
else
{
func_5(&var_10);
char * func_5_arr = (char *)malloc(sizeof(char) * 4);
strncpy(func_5_arr, "Pop", 4);
var_6[var_7++] = func_5_arr;
}
var_2++;
} 
func_2(&var_10, var_2);
char * var_11 = (char *)malloc(sizeof(char) * 5);
strncpy(var_11, "Push", 5);
var_6[var_7++] = var_11;
*var_8 = var_7;
return var_6;
}