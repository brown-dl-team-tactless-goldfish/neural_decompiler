min:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -4(%rbp)
        movl    %esi, -8(%rbp)
        movl    -4(%rbp), %eax
        cmpl    %eax, -8(%rbp)
        cmovle  -8(%rbp), %eax
        popq    %rbp
        ret
hIndex:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        cmpq    $0, -40(%rbp)
        je      .L4
        cmpl    $0, -44(%rbp)
        jne     .L5
.L4:
        movl    $0, %eax
        jmp     .L6
.L5:
        cmpl    $1, -44(%rbp)
        jne     .L7
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        movl    $1, %esi
        movl    %eax, %edi
        call    min
        jmp     .L6
.L7:
        movl    $0, -4(%rbp)
        movl    -44(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L8
.L13:
        movl    -8(%rbp), %eax
        subl    -4(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -16(%rbp)
        movl    -44(%rbp), %eax
        subl    -16(%rbp), %eax
        leal    1(%rax), %edx
        movl    -16(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        movl    %edx, %esi
        movl    %eax, %edi
        call    min
        movl    %eax, -20(%rbp)
        movl    -44(%rbp), %eax
        subl    -16(%rbp), %eax
        movl    %eax, %edx
        movl    -16(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        movl    %edx, %esi
        movl    %eax, %edi
        call    min
        movl    %eax, -12(%rbp)
        movl    -44(%rbp), %eax
        subl    -16(%rbp), %eax
        leal    -1(%rax), %edx
        movl    -16(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        movl    %edx, %esi
        movl    %eax, %edi
        call    min
        movl    %eax, -24(%rbp)
        movl    -20(%rbp), %eax
        cmpl    -12(%rbp), %eax
        jg      .L9
        movl    -12(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jg      .L10
.L9:
        movl    -12(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jg      .L11
        movl    -16(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -4(%rbp)
        jmp     .L8
.L11:
        movl    -12(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jle     .L12
        movl    -16(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L8
.L12:
        addl    $1, -4(%rbp)
.L8:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L13
.L10:
        movl    -12(%rbp), %eax
.L6:
        leave
        ret
hIndex0:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L15
        cmpl    $0, -28(%rbp)
        jne     .L16
.L15:
        movl    $0, %eax
        jmp     .L17
.L16:
        movl    $0, -4(%rbp)
        movl    -28(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L18
.L20:
        movl    -8(%rbp), %eax
        subl    -4(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -28(%rbp), %eax
        subl    -12(%rbp), %eax
        cmpl    %eax, %edx
        jl      .L19
        movl    -12(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L18
.L19:
        movl    -12(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -4(%rbp)
.L18:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L20
        movl    -28(%rbp), %eax
        subl    -4(%rbp), %eax
.L17:
        popq    %rbp
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "hIndex(citations0, sizeof(citations0) / sizeof(citations0[0])) == 3"
.LC2:
        .string "hIndex(citations1, sizeof(citations1) / sizeof(citations1[0])) == 3"
.LC3:
        .string "hIndex(citations2, sizeof(citations2) / sizeof(citations2[0])) == 4"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $96, %rsp
        movl    $0, -32(%rbp)
        movl    $1, -28(%rbp)
        movl    $3, -24(%rbp)
        movl    $5, -20(%rbp)
        movl    $6, -16(%rbp)
        movl    $0, -64(%rbp)
        movl    $3, -60(%rbp)
        movl    $3, -56(%rbp)
        movl    $3, -52(%rbp)
        movl    $4, -48(%rbp)
        movl    $0, -96(%rbp)
        movl    $3, -92(%rbp)
        movl    $4, -88(%rbp)
        movl    $4, -84(%rbp)
        movl    $4, -80(%rbp)
        movl    $4, -76(%rbp)
        movl    $5, -72(%rbp)
        movl    $5, -68(%rbp)
        leaq    -32(%rbp), %rax
        movl    $5, %esi
        movq    %rax, %rdi
        call    hIndex
        cmpl    $3, %eax
        je      .L22
        movl    $__PRETTY_FUNCTION__.4178, %ecx
        movl    $54, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L22:
        leaq    -64(%rbp), %rax
        movl    $5, %esi
        movq    %rax, %rdi
        call    hIndex
        cmpl    $3, %eax
        je      .L23
        movl    $__PRETTY_FUNCTION__.4178, %ecx
        movl    $55, %edx
        movl    $.LC0, %esi
        movl    $.LC2, %edi
        call    __assert_fail
.L23:
        leaq    -96(%rbp), %rax
        movl    $8, %esi
        movq    %rax, %rdi
        call    hIndex
        cmpl    $4, %eax
        je      .L24
        movl    $__PRETTY_FUNCTION__.4178, %ecx
        movl    $56, %edx
        movl    $.LC0, %esi
        movl    $.LC3, %edi
        call    __assert_fail
.L24:
        movl    $0, %eax
        leave
        ret
__PRETTY_FUNCTION__.4178:
        .string "main"
