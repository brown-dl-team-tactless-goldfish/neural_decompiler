canCompleteCircuit:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movq    %rdx, -40(%rbp)
        movl    %ecx, -32(%rbp)
        movl    -28(%rbp), %eax
        cmpl    -32(%rbp), %eax
        je      .L2
        movl    $-1, %eax
        jmp     .L3
.L2:
        movl    $0, -8(%rbp)
        movl    $0, -12(%rbp)
        movl    $0, -16(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L4
.L6:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        addl    %eax, -12(%rbp)
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        addl    %eax, -8(%rbp)
        cmpl    $0, -12(%rbp)
        jns     .L5
        movl    -4(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -16(%rbp)
        movl    $0, -12(%rbp)
.L5:
        addl    $1, -4(%rbp)
.L4:
        movl    -4(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L6
        cmpl    $0, -8(%rbp)
        js      .L7
        movl    -16(%rbp), %eax
        jmp     .L3
.L7:
        movl    $-1, %eax
.L3:
        popq    %rbp
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "canCompleteCircuit(gas, sizeof(gas) / sizeof(gas[0]), cost, sizeof(cost) / sizeof(cost[0])) == 1"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    $1, -8(%rbp)
        movl    $2, -4(%rbp)
        movl    $2, -16(%rbp)
        movl    $1, -12(%rbp)
        leaq    -16(%rbp), %rdx
        leaq    -8(%rbp), %rax
        movl    $2, %ecx
        movl    $2, %esi
        movq    %rax, %rdi
        call    canCompleteCircuit
        cmpl    $1, %eax
        je      .L10
        movl    $__PRETTY_FUNCTION__.4163, %ecx
        movl    $27, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L10:
        movl    $0, %eax
        leave
        ret
__PRETTY_FUNCTION__.4163:
        .string "main"
