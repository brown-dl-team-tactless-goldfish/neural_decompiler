connectHelper:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L8
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L9
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L9
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -8(%rbp), %rdx
        movq    16(%rdx), %rdx
        movq    %rdx, 24(%rax)
        cmpq    $0, -16(%rbp)
        je      .L6
        movq    -16(%rbp), %rax
        movq    8(%rax), %rax
        jmp     .L7
.L6:
        movl    $0, %eax
.L7:
        movq    -8(%rbp), %rdx
        movq    16(%rdx), %rdx
        movq    %rax, 24(%rdx)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    connectHelper
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    24(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    connectHelper
        jmp     .L1
.L8:
        nop
        jmp     .L1
.L9:
        nop
.L1:
        leave
        ret
connect:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L13
        movq    -8(%rbp), %rax
        movq    $0, 24(%rax)
        movq    -8(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    connectHelper
        jmp     .L10
.L13:
        nop
.L10:
        leave
        ret
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    $32, %esi
        movl    $7, %edi
        call    calloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    $1, (%rax)
        movq    -8(%rbp), %rax
        leaq    32(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    $2, (%rax)
        movq    -8(%rbp), %rax
        leaq    64(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 16(%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movl    $3, (%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -8(%rbp), %rdx
        addq    $96, %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    8(%rax), %rax
        movl    $4, (%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -8(%rbp), %rdx
        subq    $-128, %rdx
        movq    %rdx, 16(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    16(%rax), %rax
        movl    $5, (%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -8(%rbp), %rdx
        addq    $160, %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    8(%rax), %rax
        movl    $6, (%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -8(%rbp), %rdx
        addq    $192, %rdx
        movq    %rdx, 16(%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    16(%rax), %rax
        movl    $7, (%rax)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    connect
        movl    $0, %eax
        leave
        ret
