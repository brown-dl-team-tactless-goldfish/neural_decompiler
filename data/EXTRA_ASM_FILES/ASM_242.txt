isAnagram:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $144, %rsp
        movq    %rdi, -136(%rbp)
        movq    %rsi, -144(%rbp)
        cmpq    $0, -136(%rbp)
        je      .L2
        cmpq    $0, -144(%rbp)
        jne     .L3
.L2:
        movl    $0, %eax
        jmp     .L13
.L3:
        movq    -136(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -8(%rbp)
        movq    -144(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -12(%rbp)
        movl    -8(%rbp), %eax
        cmpl    -12(%rbp), %eax
        je      .L5
        movl    $0, %eax
        jmp     .L13
.L5:
        leaq    -128(%rbp), %rdx
        movl    $0, %eax
        movl    $13, %ecx
        movq    %rdx, %rdi
        rep stosq
        movl    $0, -4(%rbp)
        jmp     .L6
.L7:
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -136(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        subl    $97, %eax
        movslq  %eax, %rdx
        movl    -128(%rbp,%rdx,4), %edx
        addl    $1, %edx
        cltq
        movl    %edx, -128(%rbp,%rax,4)
        addl    $1, -4(%rbp)
.L6:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jl      .L7
        movl    $0, -4(%rbp)
        jmp     .L8
.L9:
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -144(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        subl    $97, %eax
        movslq  %eax, %rdx
        movl    -128(%rbp,%rdx,4), %edx
        subl    $1, %edx
        cltq
        movl    %edx, -128(%rbp,%rax,4)
        addl    $1, -4(%rbp)
.L8:
        movl    -4(%rbp), %eax
        cmpl    -12(%rbp), %eax
        jl      .L9
        movl    $0, -4(%rbp)
        jmp     .L10
.L12:
        movl    -4(%rbp), %eax
        cltq
        movl    -128(%rbp,%rax,4), %eax
        testl   %eax, %eax
        je      .L11
        movl    $0, %eax
        jmp     .L13
.L11:
        addl    $1, -4(%rbp)
.L10:
        cmpl    $25, -4(%rbp)
        jle     .L12
        movl    $1, %eax
.L13:
        leave
        ret
.LC0:
        .string "nagaram"
.LC1:
        .string "anagram"
.LC2:
        .string "/app/example.c"
.LC3:
        .string "isAnagram(\"anagram\", \"nagaram\") == true"
.LC4:
        .string "car"
.LC5:
        .string "rat"
.LC6:
        .string "isAnagram(\"rat\", \"car\") == false"
.LC7:
        .string "aab"
.LC8:
        .string "aba"
.LC9:
        .string "isAnagram(\"aba\", \"aab\") == true"
.LC10:
        .string "ab"
.LC11:
        .string "isAnagram(\"aba\", \"ab\") == false"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    isAnagram
        testb   %al, %al
        jne     .L15
        movl    $__PRETTY_FUNCTION__.4165, %ecx
        movl    $27, %edx
        movl    $.LC2, %esi
        movl    $.LC3, %edi
        call    __assert_fail
.L15:
        movl    $.LC4, %esi
        movl    $.LC5, %edi
        call    isAnagram
        xorl    $1, %eax
        testb   %al, %al
        jne     .L16
        movl    $__PRETTY_FUNCTION__.4165, %ecx
        movl    $28, %edx
        movl    $.LC2, %esi
        movl    $.LC6, %edi
        call    __assert_fail
.L16:
        movl    $.LC7, %esi
        movl    $.LC8, %edi
        call    isAnagram
        testb   %al, %al
        jne     .L17
        movl    $__PRETTY_FUNCTION__.4165, %ecx
        movl    $29, %edx
        movl    $.LC2, %esi
        movl    $.LC9, %edi
        call    __assert_fail
.L17:
        movl    $.LC10, %esi
        movl    $.LC8, %edi
        call    isAnagram
        xorl    $1, %eax
        testb   %al, %al
        jne     .L18
        movl    $__PRETTY_FUNCTION__.4165, %ecx
        movl    $30, %edx
        movl    $.LC2, %esi
        movl    $.LC11, %edi
        call    __assert_fail
.L18:
        movl    $0, %eax
        popq    %rbp
        ret
__PRETTY_FUNCTION__.4165:
        .string "main"
