push:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L6
        movl    $16, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    -28(%rbp), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L4
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 8(%rax)
.L4:
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 16(%rax)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L5
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -24(%rbp), %rax
        movl    $1, (%rax)
        jmp     .L1
.L5:
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L1
.L6:
        nop
.L1:
        leave
        ret
pop:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L11
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L11
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    8(%rax), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L7
        movq    -24(%rbp), %rax
        movq    $0, 16(%rax)
        movq    -24(%rbp), %rax
        movl    $0, (%rax)
        jmp     .L7
.L11:
        nop
.L7:
        leave
        ret
size:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L13
        movl    $0, %eax
        jmp     .L14
.L13:
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
.L14:
        popq    %rbp
        ret
isEmpty:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L16
        movl    $1, %eax
        jmp     .L17
.L16:
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        sete    %al
.L17:
        popq    %rbp
        ret
stackCreate:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L21
        movq    -8(%rbp), %rax
        movq    $0, 16(%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movl    $0, (%rax)
        jmp     .L18
.L21:
        nop
.L18:
        popq    %rbp
        ret
stackPush:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L25
        movq    -8(%rbp), %rax
        movl    -12(%rbp), %edx
        movl    %edx, %esi
        movq    %rax, %rdi
        call    push
        jmp     .L22
.L25:
        nop
.L22:
        leave
        ret
stackPop:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L32
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    size
        movl    %eax, -8(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L29
.L31:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L33
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %eax
        movl    %eax, -12(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    pop
        movq    -24(%rbp), %rax
        movl    -12(%rbp), %edx
        movl    %edx, %esi
        movq    %rax, %rdi
        call    push
        addl    $1, -4(%rbp)
.L29:
        movl    -8(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -4(%rbp)
        jl      .L31
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    pop
        jmp     .L26
.L32:
        nop
        jmp     .L26
.L33:
        nop
.L26:
        leave
        ret
stackTop:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L35
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L36
.L35:
        movl    $0, %eax
        jmp     .L37
.L36:
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movl    (%rax), %eax
.L37:
        popq    %rbp
        ret
stackEmpty:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $8, %rsp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L39
        movl    $1, %eax
        jmp     .L40
.L39:
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    isEmpty
.L40:
        leave
        ret
stackDestroy:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L46
        jmp     .L44
.L45:
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    pop
.L44:
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    size
        testl   %eax, %eax
        jg      .L45
        jmp     .L41
.L46:
        nop
.L41:
        leave
        ret
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movl    $5, -4(%rbp)
        movl    -4(%rbp), %edx
        leaq    -32(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    stackCreate
        leaq    -32(%rbp), %rax
        movl    $1, %esi
        movq    %rax, %rdi
        call    stackPush
        leaq    -32(%rbp), %rax
        movl    $2, %esi
        movq    %rax, %rdi
        call    stackPush
        leaq    -32(%rbp), %rax
        movl    $3, %esi
        movq    %rax, %rdi
        call    stackPush
        leaq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    stackPop
        leaq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    stackDestroy
        movl    $0, %eax
        leave
        ret
