addDigits0:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -20(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L2
.L3:
        movl    -20(%rbp), %ecx
        movl    $1717986919, %edx
        movl    %ecx, %eax
        imull   %edx
        sarl    $2, %edx
        movl    %ecx, %eax
        sarl    $31, %eax
        subl    %eax, %edx
        movl    %edx, %eax
        sall    $2, %eax
        addl    %edx, %eax
        addl    %eax, %eax
        subl    %eax, %ecx
        movl    %ecx, %edx
        addl    %edx, -4(%rbp)
        movl    -20(%rbp), %ecx
        movl    $1717986919, %edx
        movl    %ecx, %eax
        imull   %edx
        sarl    $2, %edx
        movl    %ecx, %eax
        sarl    $31, %eax
        subl    %eax, %edx
        movl    %edx, %eax
        movl    %eax, -20(%rbp)
        cmpl    $9, -4(%rbp)
        jle     .L2
        movl    -4(%rbp), %ecx
        movl    $1717986919, %edx
        movl    %ecx, %eax
        imull   %edx
        sarl    $2, %edx
        movl    %ecx, %eax
        sarl    $31, %eax
        movl    %edx, %esi
        subl    %eax, %esi
        movl    -4(%rbp), %ecx
        movl    $1717986919, %edx
        movl    %ecx, %eax
        imull   %edx
        sarl    $2, %edx
        movl    %ecx, %eax
        sarl    $31, %eax
        subl    %eax, %edx
        movl    %edx, %eax
        sall    $2, %eax
        addl    %edx, %eax
        addl    %eax, %eax
        subl    %eax, %ecx
        movl    %ecx, %edx
        leal    (%rsi,%rdx), %eax
        movl    %eax, -4(%rbp)
.L2:
        cmpl    $0, -20(%rbp)
        jg      .L3
        movl    -4(%rbp), %eax
        popq    %rbp
        ret
addDigits:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -4(%rbp)
        movl    -4(%rbp), %eax
        leal    -1(%rax), %ecx
        movl    $954437177, %edx
        movl    %ecx, %eax
        imull   %edx
        sarl    %edx
        movl    %ecx, %eax
        sarl    $31, %eax
        subl    %eax, %edx
        movl    %edx, %eax
        sall    $3, %eax
        addl    %edx, %eax
        subl    %eax, %ecx
        movl    %ecx, %edx
        leal    1(%rdx), %eax
        popq    %rbp
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "addDigits(0) == 0"
.LC2:
        .string "addDigits(1) == 1"
.LC3:
        .string "addDigits(9) == 9"
.LC4:
        .string "addDigits(38) == 2"
.LC5:
        .string "addDigits(12345) == 6"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    $0, %edi
        call    addDigits
        testl   %eax, %eax
        je      .L8
        movl    $__PRETTY_FUNCTION__.4158, %ecx
        movl    $23, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L8:
        movl    $1, %edi
        call    addDigits
        cmpl    $1, %eax
        je      .L9
        movl    $__PRETTY_FUNCTION__.4158, %ecx
        movl    $24, %edx
        movl    $.LC0, %esi
        movl    $.LC2, %edi
        call    __assert_fail
.L9:
        movl    $9, %edi
        call    addDigits
        cmpl    $9, %eax
        je      .L10
        movl    $__PRETTY_FUNCTION__.4158, %ecx
        movl    $25, %edx
        movl    $.LC0, %esi
        movl    $.LC3, %edi
        call    __assert_fail
.L10:
        movl    $38, %edi
        call    addDigits
        cmpl    $2, %eax
        je      .L11
        movl    $__PRETTY_FUNCTION__.4158, %ecx
        movl    $26, %edx
        movl    $.LC0, %esi
        movl    $.LC4, %edi
        call    __assert_fail
.L11:
        movl    $12345, %edi
        call    addDigits
        cmpl    $6, %eax
        je      .L12
        movl    $__PRETTY_FUNCTION__.4158, %ecx
        movl    $27, %edx
        movl    $.LC0, %esi
        movl    $.LC5, %edi
        call    __assert_fail
.L12:
        movl    $0, %eax
        popq    %rbp
        ret
__PRETTY_FUNCTION__.4158:
        .string "main"
