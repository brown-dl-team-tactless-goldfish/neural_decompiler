hash:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -20(%rbp)
        movl    %esi, -24(%rbp)
        movl    -20(%rbp), %eax
        cltd
        idivl   -24(%rbp)
        movl    %edx, -4(%rbp)
        movl    -4(%rbp), %eax
        cltd
        movl    %edx, %eax
        xorl    -4(%rbp), %eax
        subl    %edx, %eax
        popq    %rbp
        ret
calculate:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    %edx, -36(%rbp)
        movl    %ecx, -40(%rbp)
        movl    -40(%rbp), %edx
        movl    -36(%rbp), %eax
        movl    %edx, %esi
        movl    %eax, %edi
        call    hash
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        jmp     .L4
.L8:
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -36(%rbp)
        jne     .L5
        movq    -8(%rbp), %rax
        movl    4(%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    $1, %eax
        jne     .L6
        movl    -36(%rbp), %eax
        leal    1(%rax), %edi
        movl    -40(%rbp), %edx
        movq    -32(%rbp), %rsi
        movq    -24(%rbp), %rax
        movl    %edx, %ecx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    calculate
        movl    %eax, %ecx
        movq    -8(%rbp), %rax
        movl    4(%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        leal    1(%rcx), %edx
        movl    %edx, (%rax)
.L6:
        movq    -8(%rbp), %rax
        movl    4(%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        jmp     .L7
.L5:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -8(%rbp)
.L4:
        cmpq    $0, -8(%rbp)
        jne     .L8
        movl    $0, %eax
.L7:
        leave
        ret
longestConsecutive:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $80, %rsp
        movq    %rdi, -72(%rbp)
        movl    %esi, -76(%rbp)
        movl    -76(%rbp), %eax
        cltq
        movl    $8, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -32(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L10
.L13:
        movl    $16, %esi
        movl    $1, %edi
        call    calloc
        movq    %rax, -40(%rbp)
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movq    -40(%rbp), %rax
        movl    %edx, (%rax)
        movq    -40(%rbp), %rax
        movl    -4(%rbp), %edx
        movl    %edx, 4(%rax)
        movq    -40(%rbp), %rax
        movq    $0, 8(%rax)
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    -76(%rbp), %edx
        movl    %edx, %esi
        movl    %eax, %edi
        call    hash
        movl    %eax, -44(%rbp)
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movq    %rax, -16(%rbp)
        jmp     .L11
.L12:
        movq    -16(%rbp), %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movq    %rax, -16(%rbp)
.L11:
        movq    -16(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        jne     .L12
        movq    -16(%rbp), %rax
        movq    -40(%rbp), %rdx
        movq    %rdx, (%rax)
        addl    $1, -4(%rbp)
.L10:
        movl    -4(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L13
        movl    -76(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -56(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L14
.L15:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    $1, (%rax)
        addl    $1, -4(%rbp)
.L14:
        movl    -4(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L15
        movl    $0, -4(%rbp)
        jmp     .L16
.L19:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    $1, %eax
        jg      .L24
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        leal    1(%rax), %edi
        movl    -76(%rbp), %edx
        movq    -56(%rbp), %rsi
        movq    -32(%rbp), %rax
        movl    %edx, %ecx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    calculate
        movl    %eax, %ecx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        leal    1(%rcx), %edx
        movl    %edx, (%rax)
        jmp     .L18
.L24:
        nop
.L18:
        addl    $1, -4(%rbp)
.L16:
        movl    -4(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L19
        movl    $1, -20(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L20
.L22:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jge     .L21
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -20(%rbp)
.L21:
        addl    $1, -4(%rbp)
.L20:
        movl    -4(%rbp), %eax
        cmpl    -76(%rbp), %eax
        jl      .L22
        movl    -20(%rbp), %eax
        leave
        ret
main:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    $100, -32(%rbp)
        movl    $4, -28(%rbp)
        movl    $200, -24(%rbp)
        movl    $1, -20(%rbp)
        movl    $3, -16(%rbp)
        movl    $2, -12(%rbp)
        movl    $2, -64(%rbp)
        movl    $3, -60(%rbp)
        movl    $4, -56(%rbp)
        movl    $5, -52(%rbp)
        movl    $6, -48(%rbp)
        movl    $7, -44(%rbp)
        movl    $1, -40(%rbp)
        movl    $0, %eax
        popq    %rbp
        ret
