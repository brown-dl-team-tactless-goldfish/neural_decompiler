trieCreate:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    $216, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movb    $0, (%rax)
        movq    -8(%rbp), %rax
        addq    $8, %rax
        movl    $208, %edx
        movl    $0, %esi
        movq    %rax, %rdi
        call    memset
        movq    -8(%rbp), %rax
        leave
        ret
insert:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $40, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        cmpq    $0, -40(%rbp)
        je      .L10
        cmpq    $0, -48(%rbp)
        je      .L10
        movq    -40(%rbp), %rax
        movq    %rax, -24(%rbp)
        jmp     .L7
.L9:
        movq    -48(%rbp), %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        leal    -97(%rax), %edx
        movq    -24(%rbp), %rax
        movslq  %edx, %rdx
        movq    8(%rax,%rdx,8), %rax
        testq   %rax, %rax
        jne     .L8
        movq    -48(%rbp), %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        leal    -97(%rax), %ebx
        movl    $0, %eax
        call    trieCreate
        movq    %rax, %rcx
        movq    -24(%rbp), %rax
        movslq  %ebx, %rdx
        movq    %rcx, 8(%rax,%rdx,8)
.L8:
        movq    -48(%rbp), %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        leal    -97(%rax), %edx
        movq    -24(%rbp), %rax
        movslq  %edx, %rdx
        movq    8(%rax,%rdx,8), %rax
        movq    %rax, -24(%rbp)
        addq    $1, -48(%rbp)
.L7:
        movq    -48(%rbp), %rax
        movzbl  (%rax), %eax
        testb   %al, %al
        jne     .L9
        movq    -24(%rbp), %rax
        movb    $1, (%rax)
        jmp     .L3
.L10:
        nop
.L3:
        addq    $40, %rsp
        popq    %rbx
        popq    %rbp
        ret
trieFree:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L16
        movl    $0, -4(%rbp)
        jmp     .L14
.L15:
        movq    -24(%rbp), %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        movq    8(%rax,%rdx,8), %rax
        movq    %rax, %rdi
        call    trieFree
        addl    $1, -4(%rbp)
.L14:
        cmpl    $25, -4(%rbp)
        jle     .L15
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    free
        jmp     .L11
.L16:
        nop
.L11:
        leave
        ret
dfs:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movq    %rcx, -40(%rbp)
        movl    %r8d, -44(%rbp)
        movl    %r9d, -48(%rbp)
        cmpl    $0, -44(%rbp)
        js      .L21
        movl    -44(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jge     .L21
        cmpl    $0, -48(%rbp)
        js      .L21
        movl    -48(%rbp), %eax
        cmpl    -32(%rbp), %eax
        jge     .L21
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -48(%rbp), %eax
        cltq
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        xorl    $1, %eax
        testb   %al, %al
        je      .L21
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -48(%rbp), %eax
        cltq
        addq    %rdx, %rax
        movl    24(%rbp), %edx
        movslq  %edx, %rcx
        movq    16(%rbp), %rdx
        addq    %rcx, %rdx
        movzbl  (%rax), %eax
        movb    %al, (%rdx)
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -48(%rbp), %eax
        cltq
        addq    %rdx, %rax
        movb    $1, (%rax)
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -48(%rbp), %eax
        cltq
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        leal    -97(%rax), %edx
        movq    32(%rbp), %rax
        movslq  %edx, %rdx
        movq    8(%rax,%rdx,8), %rax
        movq    %rax, -8(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L19
        movq    -8(%rbp), %rax
        movzbl  (%rax), %eax
        testb   %al, %al
        je      .L20
        movq    48(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    48(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        leaq    0(,%rax,8), %rdx
        movq    40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    16(%rbp), %rsi
        movq    %rax, %rdi
        call    strcpy
        movq    -8(%rbp), %rax
        movb    $0, (%rax)
.L20:
        addl    $1, 24(%rbp)
        movl    -48(%rbp), %eax
        leal    -1(%rax), %r9d
        movl    -44(%rbp), %r8d
        movq    -40(%rbp), %rcx
        movl    -32(%rbp), %edx
        movl    -28(%rbp), %esi
        movq    -24(%rbp), %rax
        subq    $8, %rsp
        pushq   48(%rbp)
        pushq   40(%rbp)
        pushq   -8(%rbp)
        movl    24(%rbp), %edi
        pushq   %rdi
        pushq   16(%rbp)
        movq    %rax, %rdi
        call    dfs
        addq    $48, %rsp
        movl    -48(%rbp), %eax
        leal    1(%rax), %r9d
        movl    -44(%rbp), %r8d
        movq    -40(%rbp), %rcx
        movl    -32(%rbp), %edx
        movl    -28(%rbp), %esi
        movq    -24(%rbp), %rax
        subq    $8, %rsp
        pushq   48(%rbp)
        pushq   40(%rbp)
        pushq   -8(%rbp)
        movl    24(%rbp), %edi
        pushq   %rdi
        pushq   16(%rbp)
        movq    %rax, %rdi
        call    dfs
        addq    $48, %rsp
        movl    -44(%rbp), %eax
        leal    -1(%rax), %r10d
        movl    -48(%rbp), %r8d
        movq    -40(%rbp), %rcx
        movl    -32(%rbp), %edx
        movl    -28(%rbp), %esi
        movq    -24(%rbp), %rax
        subq    $8, %rsp
        pushq   48(%rbp)
        pushq   40(%rbp)
        pushq   -8(%rbp)
        movl    24(%rbp), %edi
        pushq   %rdi
        pushq   16(%rbp)
        movl    %r8d, %r9d
        movl    %r10d, %r8d
        movq    %rax, %rdi
        call    dfs
        addq    $48, %rsp
        movl    -44(%rbp), %eax
        leal    1(%rax), %r10d
        movl    -48(%rbp), %r8d
        movq    -40(%rbp), %rcx
        movl    -32(%rbp), %edx
        movl    -28(%rbp), %esi
        movq    -24(%rbp), %rax
        subq    $8, %rsp
        pushq   48(%rbp)
        pushq   40(%rbp)
        pushq   -8(%rbp)
        movl    24(%rbp), %edi
        pushq   %rdi
        pushq   16(%rbp)
        movl    %r8d, %r9d
        movl    %r10d, %r8d
        movq    %rax, %rdi
        call    dfs
        addq    $48, %rsp
.L19:
        movl    24(%rbp), %eax
        movslq  %eax, %rdx
        movq    16(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -48(%rbp), %eax
        cltq
        addq    %rdx, %rax
        movb    $0, (%rax)
.L21:
        nop
        leave
        ret
findWords:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $120, %rsp
        movq    %rdi, -88(%rbp)
        movl    %esi, -92(%rbp)
        movl    %edx, -96(%rbp)
        movq    %rcx, -104(%rbp)
        movl    %r8d, -108(%rbp)
        movq    %r9, -120(%rbp)
        movl    $128, -40(%rbp)
        movl    -40(%rbp), %eax
        cltq
        movl    $1, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -48(%rbp)
        movl    -108(%rbp), %eax
        cltq
        movl    $8, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -56(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L23
.L24:
        movl    -40(%rbp), %eax
        cltq
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -56(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movl    $1, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, (%rbx)
        addl    $1, -20(%rbp)
.L23:
        movl    -20(%rbp), %eax
        cmpl    -108(%rbp), %eax
        jl      .L24
        movl    -92(%rbp), %eax
        cltq
        movl    $8, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -64(%rbp)
        movl    $0, -24(%rbp)
        jmp     .L25
.L26:
        movl    -96(%rbp), %eax
        cltq
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -64(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movl    $1, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, (%rbx)
        addl    $1, -24(%rbp)
.L25:
        movl    -24(%rbp), %eax
        cmpl    -92(%rbp), %eax
        jl      .L26
        movl    $0, %eax
        call    trieCreate
        movq    %rax, -72(%rbp)
        movl    $0, -28(%rbp)
        jmp     .L27
.L28:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -104(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movq    -72(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    insert
        addl    $1, -28(%rbp)
.L27:
        movl    -28(%rbp), %eax
        cmpl    -108(%rbp), %eax
        jl      .L28
        movl    $0, -28(%rbp)
        jmp     .L29
.L32:
        movl    $0, -32(%rbp)
        jmp     .L30
.L31:
        movl    -32(%rbp), %r8d
        movl    -28(%rbp), %edi
        movq    -64(%rbp), %rcx
        movl    -96(%rbp), %edx
        movl    -92(%rbp), %esi
        movq    -88(%rbp), %rax
        subq    $8, %rsp
        pushq   -120(%rbp)
        pushq   -56(%rbp)
        pushq   -72(%rbp)
        pushq   $0
        pushq   -48(%rbp)
        movl    %r8d, %r9d
        movl    %edi, %r8d
        movq    %rax, %rdi
        call    dfs
        addq    $48, %rsp
        addl    $1, -32(%rbp)
.L30:
        movl    -32(%rbp), %eax
        cmpl    -96(%rbp), %eax
        jl      .L31
        addl    $1, -28(%rbp)
.L29:
        movl    -28(%rbp), %eax
        cmpl    -92(%rbp), %eax
        jl      .L32
        movq    -72(%rbp), %rax
        movq    %rax, %rdi
        call    trieFree
        movq    -48(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movl    $0, -36(%rbp)
        jmp     .L33
.L34:
        movl    -36(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
        addl    $1, -36(%rbp)
.L33:
        movl    -36(%rbp), %eax
        cmpl    -92(%rbp), %eax
        jl      .L34
        movq    -56(%rbp), %rax
        movq    -8(%rbp), %rbx
        leave
        ret
.LC0:
        .string "baabab"
.LC1:
        .string "abaaaa"
.LC2:
        .string "abaaab"
.LC3:
        .string "ababba"
.LC4:
        .string "aabbab"
.LC5:
        .string "aabbba"
.LC6:
        .string "aabaab"
.LC7:
        .string "bbaabaabaaaaabaababaaaaababb"
.LC8:
        .string "aabbaaabaaabaabaaaaaabbaaaba"
.LC9:
        .string "babaababbbbbbbaabaababaabaaa"
.LC10:
        .string "bbbaaabaabbaaababababbbbbaaa"
.LC11:
        .string "babbabbbbaabbabaaaaaabbbaaab"
.LC12:
        .string "bbbababbbbbbbababbabbbbbabaa"
.LC13:
        .string "babababbababaabbbbabbbbabbba"
.LC14:
        .string "abbbbbbaabaaabaaababaabbabba"
.LC15:
        .string "aabaabababbbbbbababbbababbaa"
.LC16:
        .string "aabbbbabbaababaaaabababbaaba"
.LC17:
        .string "ababaababaaabbabbaabbaabbaba"
.LC18:
        .string "abaabbbaaaaababbbaaaaabbbaab"
.LC19:
        .string "aabbabaabaabbabababaaabbbaab"
.LC20:
        .string "baaabaaaabbabaaabaabababaaaa"
.LC21:
        .string "aaabbabaaaababbabbaabbaabbaa"
.LC22:
        .string "aaabaaaaabaabbabaabbbbaabaaa"
.LC23:
        .string "abbaabbaaaabbaababababbaabbb"
.LC24:
        .string "baabaababbbbaaaabaaabbababbb"
.LC25:
        .string "aabaababbaababbaaabaabababab"
.LC26:
        .string "abbaaabbaabaabaabbbbaabbbbbb"
.LC27:
        .string "aaababaabbaaabbbaaabbabbabab"
.LC28:
        .string "bbababbbabbbbabbbbabbbbbabaa"
.LC29:
        .string "abbbaabbbaaababbbababbababba"
.LC30:
        .string "bbbbbbbabbbababbabaabababaab"
.LC31:
        .string "aaaababaabbbbabaaaaabaaaaabb"
.LC32:
        .string "bbaaabbbbabbaaabbaabbabbaaba"
.LC33:
        .string "aabaabbbbaabaabbabaabababaaa"
.LC34:
        .string "abbababbbaababaabbababababbb"
.LC35:
        .string "aabbbabbaaaababbbbabbababbbb"
.LC36:
        .string "babbbaabababbbbbbbbbaabbabaa"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $336, %rsp
        movq    $.LC0, -80(%rbp)
        movq    $.LC1, -72(%rbp)
        movq    $.LC2, -64(%rbp)
        movq    $.LC3, -56(%rbp)
        movq    $.LC4, -48(%rbp)
        movq    $.LC5, -40(%rbp)
        movq    $.LC6, -32(%rbp)
        movq    $.LC7, -320(%rbp)
        movq    $.LC8, -312(%rbp)
        movq    $.LC9, -304(%rbp)
        movq    $.LC10, -296(%rbp)
        movq    $.LC11, -288(%rbp)
        movq    $.LC12, -280(%rbp)
        movq    $.LC13, -272(%rbp)
        movq    $.LC14, -264(%rbp)
        movq    $.LC15, -256(%rbp)
        movq    $.LC16, -248(%rbp)
        movq    $.LC17, -240(%rbp)
        movq    $.LC18, -232(%rbp)
        movq    $.LC19, -224(%rbp)
        movq    $.LC20, -216(%rbp)
        movq    $.LC21, -208(%rbp)
        movq    $.LC22, -200(%rbp)
        movq    $.LC23, -192(%rbp)
        movq    $.LC24, -184(%rbp)
        movq    $.LC25, -176(%rbp)
        movq    $.LC26, -168(%rbp)
        movq    $.LC27, -160(%rbp)
        movq    $.LC28, -152(%rbp)
        movq    $.LC29, -144(%rbp)
        movq    $.LC30, -136(%rbp)
        movq    $.LC31, -128(%rbp)
        movq    $.LC32, -120(%rbp)
        movq    $.LC33, -112(%rbp)
        movq    $.LC34, -104(%rbp)
        movq    $.LC35, -96(%rbp)
        movq    $.LC36, -88(%rbp)
        movl    $0, -324(%rbp)
        leaq    -324(%rbp), %rcx
        leaq    -320(%rbp), %rdx
        leaq    -80(%rbp), %rax
        movq    %rcx, %r9
        movl    $30, %r8d
        movq    %rdx, %rcx
        movl    $6, %edx
        movl    $7, %esi
        movq    %rax, %rdi
        call    findWords
        movq    %rax, -16(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L37
.L38:
        addl    $1, -4(%rbp)
.L37:
        movl    -324(%rbp), %eax
        cmpl    %eax, -4(%rbp)
        jl      .L38
        movl    $0, %eax
        leave
        ret
