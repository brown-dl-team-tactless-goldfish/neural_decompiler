push:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L4
        movl    $16, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    -28(%rbp), %edx
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        movq    (%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, (%rax)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L1
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 8(%rax)
        jmp     .L1
.L4:
        nop
.L1:
        leave
        ret
pop:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L9
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L9
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    8(%rax), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        jne     .L5
        movq    -24(%rbp), %rax
        movq    $0, 8(%rax)
        jmp     .L5
.L9:
        nop
.L5:
        leave
        ret
top:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    $0, -4(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L11
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L11
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        movl    %eax, -4(%rbp)
.L11:
        movl    -4(%rbp), %eax
        popq    %rbp
        ret
destory:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L19
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L19
        movq    $0, -8(%rbp)
        jmp     .L17
.L18:
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    8(%rax), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
.L17:
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        jne     .L18
        movq    -24(%rbp), %rax
        movq    $0, 8(%rax)
        jmp     .L13
.L19:
        nop
.L13:
        leave
        ret
calculate:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    $0, -4(%rbp)
        movl    $0, -8(%rbp)
        movb    $43, -9(%rbp)
        movb    $0, -10(%rbp)
        movq    $0, -24(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, -32(%rbp)
        movzbl  -10(%rbp), %edx
        leaq    -32(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    push
        jmp     .L21
.L24:
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $40, %al
        jne     .L23
        cmpb    $45, -9(%rbp)
        sete    %al
        movb    %al, -10(%rbp)
        movzbl  -10(%rbp), %edx
        leaq    -32(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    push
.L23:
        addq    $1, -40(%rbp)
.L22:
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $32, %al
        je      .L24
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $40, %al
        je      .L24
        movl    $0, -8(%rbp)
        jmp     .L25
.L27:
        movl    -8(%rbp), %edx
        movl    %edx, %eax
        sall    $2, %eax
        addl    %edx, %eax
        addl    %eax, %eax
        movl    %eax, %edx
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        addl    %edx, %eax
        subl    $48, %eax
        movl    %eax, -8(%rbp)
        addq    $1, -40(%rbp)
.L25:
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $47, %al
        jle     .L26
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $57, %al
        jle     .L27
.L26:
        cmpb    $43, -9(%rbp)
        jne     .L28
        movl    -8(%rbp), %eax
        addl    %eax, -4(%rbp)
        jmp     .L30
.L28:
        cmpb    $45, -9(%rbp)
        jne     .L30
        movl    -8(%rbp), %eax
        subl    %eax, -4(%rbp)
        jmp     .L30
.L32:
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $41, %al
        jne     .L31
        leaq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    pop
        leaq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    top
        testl   %eax, %eax
        setne   %al
        movb    %al, -10(%rbp)
.L31:
        addq    $1, -40(%rbp)
.L30:
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $32, %al
        je      .L32
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $41, %al
        je      .L32
        cmpb    $0, -10(%rbp)
        je      .L33
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    $43, %al
        jne     .L34
        movl    $45, %eax
        jmp     .L35
.L34:
        movl    $43, %eax
.L35:
        movb    %al, -9(%rbp)
        jmp     .L36
.L33:
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        movb    %al, -9(%rbp)
.L36:
        addq    $1, -40(%rbp)
.L21:
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        testb   %al, %al
        jne     .L22
        leaq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    destory
        movl    -4(%rbp), %eax
        leave
        ret
.LC0:
        .string "2-4-(8+2-6+(8+4-(1)+8-10))"
.LC1:
        .string "1-(2-(3-(4-5)))"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    $.LC0, -8(%rbp)
        movq    $.LC1, -16(%rbp)
        movl    $0, %eax
        popq    %rbp
        ret
