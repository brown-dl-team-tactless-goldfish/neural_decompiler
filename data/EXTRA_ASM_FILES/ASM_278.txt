isBadVersion:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -4(%rbp)
        cmpl    $2, -4(%rbp)
        setg    %al
        popq    %rbp
        ret
firstBadVersion:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $24, %rsp
        movl    %edi, -20(%rbp)
        cmpl    $1, -20(%rbp)
        jg      .L4
        movl    -20(%rbp), %eax
        jmp     .L5
.L4:
        movl    $1, -4(%rbp)
        movl    -20(%rbp), %eax
        movl    %eax, -8(%rbp)
        jmp     .L6
.L8:
        movl    -8(%rbp), %eax
        subl    -4(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        movl    %eax, %edi
        call    isBadVersion
        testb   %al, %al
        je      .L7
        movl    -12(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L6
.L7:
        movl    -12(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -4(%rbp)
.L6:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L8
        movl    -4(%rbp), %eax
.L5:
        leave
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "firstBadVersion(3) == 3"
.LC2:
        .string "firstBadVersion(4) == 3"
.LC3:
        .string "firstBadVersion(5) == 3"
.LC4:
        .string "firstBadVersion(6) == 3"
.LC5:
        .string "firstBadVersion(7) == 3"
.LC6:
        .string "firstBadVersion(8) == 3"
.LC7:
        .string "firstBadVersion(9) == 3"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    $3, %edi
        call    firstBadVersion
        cmpl    $3, %eax
        je      .L10
        movl    $__PRETTY_FUNCTION__.4160, %ecx
        movl    $29, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L10:
        movl    $4, %edi
        call    firstBadVersion
        cmpl    $3, %eax
        je      .L11
        movl    $__PRETTY_FUNCTION__.4160, %ecx
        movl    $30, %edx
        movl    $.LC0, %esi
        movl    $.LC2, %edi
        call    __assert_fail
.L11:
        movl    $5, %edi
        call    firstBadVersion
        cmpl    $3, %eax
        je      .L12
        movl    $__PRETTY_FUNCTION__.4160, %ecx
        movl    $31, %edx
        movl    $.LC0, %esi
        movl    $.LC3, %edi
        call    __assert_fail
.L12:
        movl    $6, %edi
        call    firstBadVersion
        cmpl    $3, %eax
        je      .L13
        movl    $__PRETTY_FUNCTION__.4160, %ecx
        movl    $32, %edx
        movl    $.LC0, %esi
        movl    $.LC4, %edi
        call    __assert_fail
.L13:
        movl    $7, %edi
        call    firstBadVersion
        cmpl    $3, %eax
        je      .L14
        movl    $__PRETTY_FUNCTION__.4160, %ecx
        movl    $33, %edx
        movl    $.LC0, %esi
        movl    $.LC5, %edi
        call    __assert_fail
.L14:
        movl    $8, %edi
        call    firstBadVersion
        cmpl    $3, %eax
        je      .L15
        movl    $__PRETTY_FUNCTION__.4160, %ecx
        movl    $34, %edx
        movl    $.LC0, %esi
        movl    $.LC6, %edi
        call    __assert_fail
.L15:
        movl    $9, %edi
        call    firstBadVersion
        cmpl    $3, %eax
        je      .L16
        movl    $__PRETTY_FUNCTION__.4160, %ecx
        movl    $35, %edx
        movl    $.LC0, %esi
        movl    $.LC7, %edi
        call    __assert_fail
.L16:
        movl    $0, %eax
        popq    %rbp
        ret
__PRETTY_FUNCTION__.4160:
        .string "main"
