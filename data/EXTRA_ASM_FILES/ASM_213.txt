robNoCircle:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        cmpl    $0, -44(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movl    -44(%rbp), %eax
        addl    $2, %eax
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -16(%rbp)
        movq    -16(%rbp), %rax
        addq    $4, %rax
        movl    $0, (%rax)
        movl    (%rax), %edx
        movq    -16(%rbp), %rax
        movl    %edx, (%rax)
        movl    $2, -4(%rbp)
        jmp     .L4
.L7:
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -8(%rax), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -8(%rax), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        addl    %eax, %edx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -16(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L5
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -8(%rax), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -8(%rax), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rsi
        movq    -16(%rbp), %rax
        addq    %rsi, %rax
        addl    %ecx, %edx
        movl    %edx, (%rax)
        jmp     .L6
.L5:
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -16(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
.L6:
        addl    $1, -4(%rbp)
.L4:
        movl    -44(%rbp), %eax
        addl    $1, %eax
        cmpl    %eax, -4(%rbp)
        jle     .L7
        movl    -44(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -20(%rbp)
        movq    -16(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movl    -20(%rbp), %eax
.L3:
        leave
        ret
rob:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $24, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L9
        cmpl    $0, -28(%rbp)
        jne     .L10
.L9:
        movl    $0, %eax
        jmp     .L11
.L10:
        cmpl    $1, -28(%rbp)
        jne     .L12
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        jmp     .L11
.L12:
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    robNoCircle
        movl    %eax, %ebx
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        addq    $4, %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    robNoCircle
        cmpl    %eax, %ebx
        jle     .L13
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    robNoCircle
        jmp     .L15
.L13:
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        addq    $4, %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    robNoCircle
.L15:
        nop
.L11:
        addq    $24, %rsp
        popq    %rbx
        popq    %rbp
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "rob(nums, sizeof(nums) / sizeof(nums[0])) == 8"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movl    $1, -32(%rbp)
        movl    $2, -28(%rbp)
        movl    $3, -24(%rbp)
        movl    $4, -20(%rbp)
        movl    $5, -16(%rbp)
        leaq    -32(%rbp), %rax
        movl    $5, %esi
        movq    %rax, %rdi
        call    rob
        cmpl    $8, %eax
        je      .L17
        movl    $__PRETTY_FUNCTION__.4163, %ecx
        movl    $33, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L17:
        movl    $0, %eax
        leave
        ret
__PRETTY_FUNCTION__.4163:
        .string "main"
