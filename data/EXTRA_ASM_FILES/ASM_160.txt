getIntersectionNode:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movl    $0, -8(%rbp)
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        movq    -40(%rbp), %rax
        movq    %rax, -16(%rbp)
        movq    -48(%rbp), %rax
        movq    %rax, -24(%rbp)
        jmp     .L2
.L3:
        addl    $1, -4(%rbp)
        movq    -16(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -16(%rbp)
.L2:
        cmpq    $0, -16(%rbp)
        jne     .L3
        jmp     .L4
.L5:
        addl    $1, -8(%rbp)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
.L4:
        cmpq    $0, -24(%rbp)
        jne     .L5
        movl    -4(%rbp), %eax
        subl    -8(%rbp), %eax
        movl    %eax, -28(%rbp)
        movq    -40(%rbp), %rax
        movq    %rax, -16(%rbp)
        movq    -48(%rbp), %rax
        movq    %rax, -24(%rbp)
        cmpl    $0, -28(%rbp)
        jle     .L10
        jmp     .L7
.L8:
        movq    -16(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -16(%rbp)
.L7:
        movl    -28(%rbp), %eax
        leal    -1(%rax), %edx
        movl    %edx, -28(%rbp)
        testl   %eax, %eax
        jne     .L8
        jmp     .L12
.L11:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
.L10:
        movl    -28(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -28(%rbp)
        testl   %eax, %eax
        jne     .L11
        jmp     .L12
.L16:
        movq    -16(%rbp), %rax
        cmpq    -24(%rbp), %rax
        jne     .L13
        movq    -16(%rbp), %rax
        jmp     .L14
.L13:
        movq    -16(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -16(%rbp)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
.L12:
        cmpq    $0, -16(%rbp)
        je      .L15
        cmpq    $0, -24(%rbp)
        jne     .L16
.L15:
        movl    $0, %eax
.L14:
        popq    %rbp
        ret
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movl    $16, %esi
        movl    $5, %edi
        call    calloc
        movq    %rax, -40(%rbp)
        movl    $16, %esi
        movl    $3, %edi
        call    calloc
        movq    %rax, -48(%rbp)
        movl    $16, %esi
        movl    $3, %edi
        call    calloc
        movq    %rax, -56(%rbp)
        leaq    -40(%rbp), %rax
        movq    %rax, -8(%rbp)
        movl    $1, -12(%rbp)
        jmp     .L18
.L19:
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    -12(%rbp), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    (%rax), %rdx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        addq    $16, %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movq    %rax, -8(%rbp)
        addl    $1, -12(%rbp)
.L18:
        cmpl    $5, -12(%rbp)
        jle     .L19
        movq    -8(%rbp), %rax
        movq    $0, (%rax)
        leaq    -48(%rbp), %rax
        movq    %rax, -8(%rbp)
        movl    $1, -12(%rbp)
        jmp     .L20
.L21:
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    -12(%rbp), %edx
        addl    $5, %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    (%rax), %rdx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        addq    $16, %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movq    %rax, -8(%rbp)
        addl    $1, -12(%rbp)
.L20:
        cmpl    $3, -12(%rbp)
        jle     .L21
        movq    -40(%rbp), %rax
        leaq    32(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, (%rax)
        leaq    -56(%rbp), %rax
        movq    %rax, -8(%rbp)
        movl    $1, -12(%rbp)
        jmp     .L22
.L23:
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    -12(%rbp), %edx
        addl    $5, %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    (%rax), %rdx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        addq    $16, %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movq    %rax, -8(%rbp)
        addl    $1, -12(%rbp)
.L22:
        cmpl    $3, -12(%rbp)
        jle     .L23
        movq    -8(%rbp), %rax
        movq    $0, (%rax)
        movq    -40(%rbp), %rax
        movq    %rax, -24(%rbp)
        jmp     .L24
.L25:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
.L24:
        cmpq    $0, -24(%rbp)
        jne     .L25
        movq    -48(%rbp), %rax
        movq    %rax, -24(%rbp)
        jmp     .L26
.L27:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
.L26:
        cmpq    $0, -24(%rbp)
        jne     .L27
        movq    -56(%rbp), %rax
        movq    %rax, -24(%rbp)
        jmp     .L28
.L29:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -24(%rbp)
.L28:
        cmpq    $0, -24(%rbp)
        jne     .L29
        movq    -48(%rbp), %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    getIntersectionNode
        movq    %rax, -32(%rbp)
        movq    -48(%rbp), %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    getIntersectionNode
        movq    %rax, -32(%rbp)
        movl    $0, %eax
        leave
        ret
