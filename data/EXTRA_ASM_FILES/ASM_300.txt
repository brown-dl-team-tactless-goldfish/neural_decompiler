lengthOfLIS0:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        cmpq    $0, -40(%rbp)
        je      .L2
        cmpl    $0, -44(%rbp)
        jne     .L3
.L2:
        movl    $0, %eax
        jmp     .L4
.L3:
        movl    -44(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    $1, -12(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L5
.L10:
        movl    $1, -16(%rbp)
        movl    $0, -8(%rbp)
        jmp     .L6
.L8:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L7
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -16(%rbp)
        jg      .L7
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        addl    $1, %eax
        movl    %eax, -16(%rbp)
.L7:
        addl    $1, -8(%rbp)
.L6:
        movl    -8(%rbp), %eax
        cmpl    -4(%rbp), %eax
        jl      .L8
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -16(%rbp), %eax
        movl    %eax, (%rdx)
        movl    -16(%rbp), %eax
        cmpl    -12(%rbp), %eax
        jle     .L9
        movl    -16(%rbp), %eax
        movl    %eax, -12(%rbp)
.L9:
        addl    $1, -4(%rbp)
.L5:
        movl    -4(%rbp), %eax
        cmpl    -44(%rbp), %eax
        jl      .L10
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movl    -12(%rbp), %eax
.L4:
        leave
        ret
lengthOfLIS:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        cmpq    $0, -40(%rbp)
        je      .L12
        cmpl    $0, -44(%rbp)
        jne     .L13
.L12:
        movl    $0, %eax
        jmp     .L14
.L13:
        movl    -44(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movq    -40(%rbp), %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movl    $1, -4(%rbp)
        movl    $1, -8(%rbp)
        jmp     .L15
.L21:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L16
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movl    -4(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -4(%rbp)
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    (%rcx), %eax
        movl    %eax, (%rdx)
        jmp     .L17
.L16:
        movl    $0, -12(%rbp)
        movl    -4(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -16(%rbp)
        jmp     .L18
.L20:
        movl    -16(%rbp), %eax
        subl    -12(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movl    -12(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -28(%rbp)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jl      .L19
        movl    -28(%rbp), %eax
        movl    %eax, -16(%rbp)
        jmp     .L18
.L19:
        movl    -28(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -12(%rbp)
.L18:
        movl    -12(%rbp), %eax
        cmpl    -16(%rbp), %eax
        jl      .L20
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    -12(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
.L17:
        addl    $1, -8(%rbp)
.L15:
        movl    -8(%rbp), %eax
        cmpl    -44(%rbp), %eax
        jl      .L21
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movl    -4(%rbp), %eax
.L14:
        leave
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "lengthOfLIS(nums0, sizeof(nums0) / sizeof(nums0[0])) == 4"
.LC2:
        .string "lengthOfLIS(nums1, sizeof(nums1) / sizeof(nums1[0])) == 2"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movl    $10, -32(%rbp)
        movl    $9, -28(%rbp)
        movl    $2, -24(%rbp)
        movl    $5, -20(%rbp)
        movl    $3, -16(%rbp)
        movl    $7, -12(%rbp)
        movl    $101, -8(%rbp)
        movl    $18, -4(%rbp)
        movl    $1, -48(%rbp)
        movl    $0, -44(%rbp)
        movl    $1, -40(%rbp)
        movl    $1, -36(%rbp)
        leaq    -32(%rbp), %rax
        movl    $8, %esi
        movq    %rax, %rdi
        call    lengthOfLIS
        cmpl    $4, %eax
        je      .L23
        movl    $__PRETTY_FUNCTION__.4181, %ecx
        movl    $56, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L23:
        leaq    -48(%rbp), %rax
        movl    $4, %esi
        movq    %rax, %rdi
        call    lengthOfLIS
        cmpl    $2, %eax
        je      .L24
        movl    $__PRETTY_FUNCTION__.4181, %ecx
        movl    $57, %edx
        movl    $.LC0, %esi
        movl    $.LC2, %edi
        call    __assert_fail
.L24:
        movl    $0, %eax
        leave
        ret
__PRETTY_FUNCTION__.4181:
        .string "main"
