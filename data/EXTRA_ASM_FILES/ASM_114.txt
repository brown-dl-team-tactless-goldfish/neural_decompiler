flattenHelper:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %rdx, -56(%rbp)
        cmpq    $0, -40(%rbp)
        jne     .L2
        movq    -56(%rbp), %rax
        movq    $0, (%rax)
        movq    -56(%rbp), %rax
        movq    (%rax), %rdx
        movq    -48(%rbp), %rax
        movq    %rdx, (%rax)
        jmp     .L1
.L2:
        movq    $0, -32(%rbp)
        movq    -32(%rbp), %rax
        movq    %rax, -24(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, -16(%rbp)
        movq    -16(%rbp), %rax
        movq    %rax, -8(%rbp)
        movq    -40(%rbp), %rax
        movq    8(%rax), %rax
        leaq    -16(%rbp), %rdx
        leaq    -8(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    flattenHelper
        movq    -40(%rbp), %rax
        movq    16(%rax), %rax
        leaq    -32(%rbp), %rdx
        leaq    -24(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    flattenHelper
        movq    -40(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -16(%rbp), %rax
        testq   %rax, %rax
        je      .L4
        movq    -8(%rbp), %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, 16(%rax)
        movq    -16(%rbp), %rax
        movq    -24(%rbp), %rdx
        movq    %rdx, 16(%rax)
        jmp     .L5
.L4:
        movq    -24(%rbp), %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, 16(%rax)
.L5:
        movq    -48(%rbp), %rax
        movq    -40(%rbp), %rdx
        movq    %rdx, (%rax)
        movq    -32(%rbp), %rax
        testq   %rax, %rax
        je      .L6
        movq    -32(%rbp), %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, (%rax)
        jmp     .L1
.L6:
        movq    -16(%rbp), %rax
        testq   %rax, %rax
        je      .L8
        movq    -16(%rbp), %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, (%rax)
        jmp     .L1
.L8:
        movq    -56(%rbp), %rax
        movq    -40(%rbp), %rdx
        movq    %rdx, (%rax)
.L1:
        leave
        ret
flatten:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    $0, -16(%rbp)
        movq    -16(%rbp), %rax
        movq    %rax, -8(%rbp)
        leaq    -16(%rbp), %rdx
        leaq    -8(%rbp), %rcx
        movq    -24(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    flattenHelper
        nop
        leave
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "root->left == NULL"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    $24, %esi
        movl    $3, %edi
        call    calloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    $1, (%rax)
        movq    -8(%rbp), %rax
        leaq    24(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    $2, (%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -8(%rbp), %rdx
        addq    $48, %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    8(%rax), %rax
        movl    $3, (%rax)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    flatten
        jmp     .L11
.L13:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L12
        movl    $__PRETTY_FUNCTION__.4167, %ecx
        movl    $55, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L12:
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, -8(%rbp)
.L11:
        cmpq    $0, -8(%rbp)
        jne     .L13
        movl    $0, %eax
        leave
        ret
__PRETTY_FUNCTION__.4167:
        .string "main"
