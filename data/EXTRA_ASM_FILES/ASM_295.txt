swap:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -4(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movl    -4(%rbp), %edx
        movl    %edx, (%rax)
        nop
        popq    %rbp
        ret
addHeap:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    %rdx, -40(%rbp)
        movl    %ecx, -44(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %edx
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jne     .L3
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        addl    %eax, %eax
        movl    %eax, -8(%rbp)
        movl    -8(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L4
.L5:
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -16(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -4(%rbp)
.L4:
        movq    -40(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -4(%rbp)
        jl      .L5
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L6
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
.L6:
        movq    -24(%rbp), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, (%rax)
        movq    -40(%rbp), %rax
        movl    -8(%rbp), %edx
        movl    %edx, (%rax)
.L3:
        movq    -24(%rbp), %rax
        movq    (%rax), %rdx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        addq    %rax, %rdx
        movl    -44(%rbp), %eax
        movl    %eax, (%rdx)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
        nop
        leave
        ret
siftUpMax:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    -28(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -4(%rbp)
        jmp     .L8
.L10:
        movl    -4(%rbp), %eax
        subl    $1, %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, -8(%rbp)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jge     .L9
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    swap
.L9:
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
.L8:
        cmpl    $0, -4(%rbp)
        jg      .L10
        nop
        leave
        ret
siftDownMax:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    $0, -4(%rbp)
        movl    $1, -8(%rbp)
        jmp     .L12
.L16:
        movl    -8(%rbp), %eax
        addl    $1, %eax
        cmpl    %eax, -28(%rbp)
        jle     .L13
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jge     .L13
        addl    $1, -8(%rbp)
.L13:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jge     .L17
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    swap
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        movl    -4(%rbp), %eax
        addl    %eax, %eax
        addl    $1, %eax
        movl    %eax, -8(%rbp)
.L12:
        movl    -8(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L16
        jmp     .L15
.L17:
        nop
.L15:
        nop
        leave
        ret
siftUpMin:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    -28(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -4(%rbp)
        jmp     .L19
.L21:
        movl    -4(%rbp), %eax
        subl    $1, %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, -8(%rbp)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L20
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    swap
.L20:
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
.L19:
        cmpl    $0, -4(%rbp)
        jg      .L21
        nop
        leave
        ret
siftDownMin:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    $0, -4(%rbp)
        movl    $1, -8(%rbp)
        jmp     .L23
.L27:
        movl    -8(%rbp), %eax
        addl    $1, %eax
        cmpl    %eax, -28(%rbp)
        jle     .L24
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L24
        addl    $1, -8(%rbp)
.L24:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L28
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    swap
        movl    -8(%rbp), %eax
        movl    %eax, -4(%rbp)
        movl    -4(%rbp), %eax
        addl    %eax, %eax
        addl    $1, %eax
        movl    %eax, -8(%rbp)
.L23:
        movl    -8(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L27
        jmp     .L26
.L28:
        nop
.L26:
        nop
        leave
        ret
MedianFinderCreate:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    $40, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movl    $4, %edi
        call    malloc
        movq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, (%rax)
        movl    $4, %edi
        call    malloc
        movq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    $0, (%rax)
        movq    -8(%rbp), %rdx
        movq    (%rdx), %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -8(%rbp), %rax
        movl    $0, 24(%rax)
        movq    -8(%rbp), %rax
        movl    24(%rax), %edx
        movq    -8(%rbp), %rax
        movl    %edx, 28(%rax)
        movq    -8(%rbp), %rax
        movl    $1, 16(%rax)
        movq    -8(%rbp), %rax
        movl    16(%rax), %edx
        movq    -8(%rbp), %rax
        movl    %edx, 20(%rax)
        movq    -8(%rbp), %rax
        pxor    %xmm0, %xmm0
        movsd   %xmm0, 32(%rax)
        movq    -8(%rbp), %rax
        leave
        ret
addNum:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L43
        movq    -8(%rbp), %rax
        movl    24(%rax), %edx
        movq    -8(%rbp), %rax
        movl    28(%rax), %eax
        cmpl    %eax, %edx
        jne     .L34
        cvtsi2sd        -12(%rbp), %xmm0
        movq    -8(%rbp), %rax
        movsd   32(%rax), %xmm1
        comisd  %xmm1, %xmm0
        jbe     .L42
        movq    -8(%rbp), %rax
        leaq    20(%rax), %rdx
        movq    -8(%rbp), %rax
        leaq    28(%rax), %rsi
        movq    -8(%rbp), %rax
        leaq    8(%rax), %rdi
        movl    -12(%rbp), %eax
        movl    %eax, %ecx
        call    addHeap
        movq    -8(%rbp), %rax
        movl    28(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftUpMin
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %eax
        cvtsi2sd        %eax, %xmm0
        movq    -8(%rbp), %rax
        movsd   %xmm0, 32(%rax)
        jmp     .L31
.L42:
        movq    -8(%rbp), %rax
        leaq    16(%rax), %rdi
        movq    -8(%rbp), %rax
        leaq    24(%rax), %rsi
        movq    -8(%rbp), %rax
        movl    -12(%rbp), %edx
        movl    %edx, %ecx
        movq    %rdi, %rdx
        movq    %rax, %rdi
        call    addHeap
        movq    -8(%rbp), %rax
        movl    24(%rax), %edx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftUpMax
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        cvtsi2sd        %eax, %xmm0
        movq    -8(%rbp), %rax
        movsd   %xmm0, 32(%rax)
        jmp     .L31
.L34:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %eax
        cmpl    %eax, -12(%rbp)
        jle     .L38
        movq    -8(%rbp), %rax
        leaq    20(%rax), %rdx
        movq    -8(%rbp), %rax
        leaq    28(%rax), %rsi
        movq    -8(%rbp), %rax
        leaq    8(%rax), %rdi
        movl    -12(%rbp), %eax
        movl    %eax, %ecx
        call    addHeap
        movq    -8(%rbp), %rax
        movl    28(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftUpMin
        movq    -8(%rbp), %rax
        movl    24(%rax), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movl    28(%rax), %eax
        cmpl    %eax, %edx
        jge     .L40
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %edx
        movq    -8(%rbp), %rax
        leaq    16(%rax), %rdi
        movq    -8(%rbp), %rax
        leaq    24(%rax), %rsi
        movq    -8(%rbp), %rax
        movl    %edx, %ecx
        movq    %rdi, %rdx
        movq    %rax, %rdi
        call    addHeap
        movq    -8(%rbp), %rax
        movl    24(%rax), %edx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftUpMax
        movq    -8(%rbp), %rax
        movq    8(%rax), %rdx
        movq    -8(%rbp), %rax
        movl    28(%rax), %eax
        cltq
        salq    $2, %rax
        subq    $4, %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    swap
        movq    -8(%rbp), %rax
        movl    28(%rax), %eax
        leal    -1(%rax), %edx
        movq    -8(%rbp), %rax
        movl    %edx, 28(%rax)
        movq    -8(%rbp), %rax
        movl    28(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftDownMin
        jmp     .L40
.L38:
        movq    -8(%rbp), %rax
        leaq    16(%rax), %rdi
        movq    -8(%rbp), %rax
        leaq    24(%rax), %rsi
        movq    -8(%rbp), %rax
        movl    -12(%rbp), %edx
        movl    %edx, %ecx
        movq    %rdi, %rdx
        movq    %rax, %rdi
        call    addHeap
        movq    -8(%rbp), %rax
        movl    24(%rax), %edx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftUpMax
        movq    -8(%rbp), %rax
        movl    28(%rax), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movl    24(%rax), %eax
        cmpl    %eax, %edx
        jge     .L40
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        movq    -8(%rbp), %rdx
        addq    $20, %rdx
        movq    -8(%rbp), %rcx
        leaq    28(%rcx), %rsi
        movq    -8(%rbp), %rcx
        leaq    8(%rcx), %rdi
        movl    %eax, %ecx
        call    addHeap
        movq    -8(%rbp), %rax
        movl    28(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftUpMin
        movq    -8(%rbp), %rax
        movq    (%rax), %rdx
        movq    -8(%rbp), %rax
        movl    24(%rax), %eax
        cltq
        salq    $2, %rax
        subq    $4, %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    swap
        movq    -8(%rbp), %rax
        movl    24(%rax), %eax
        leal    -1(%rax), %edx
        movq    -8(%rbp), %rax
        movl    %edx, 24(%rax)
        movq    -8(%rbp), %rax
        movl    24(%rax), %edx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    siftDownMax
.L40:
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        cvtsi2sd        %eax, %xmm1
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    (%rax), %edx
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        subl    %eax, %edx
        movl    %edx, %eax
        cvtsi2sd        %eax, %xmm0
        movsd   .LC1(%rip), %xmm2
        divsd   %xmm2, %xmm0
        addsd   %xmm1, %xmm0
        movq    -8(%rbp), %rax
        movsd   %xmm0, 32(%rax)
        jmp     .L31
.L43:
        nop
.L31:
        leave
        ret
findMedian:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L45
        pxor    %xmm0, %xmm0
        jmp     .L46
.L45:
        movq    -8(%rbp), %rax
        movsd   32(%rax), %xmm0
.L46:
        popq    %rbp
        ret
MedianFinderFree:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L52
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L50
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
.L50:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L51
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    free
.L51:
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        jmp     .L47
.L52:
        nop
.L47:
        leave
        ret
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    $0, %eax
        call    MedianFinderCreate
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    $1, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $2, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $3, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $4, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $5, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $6, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $7, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $8, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $9, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movl    $10, %esi
        movq    %rax, %rdi
        call    addNum
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    MedianFinderFree
        movl    $0, %eax
        leave
        ret
.LC1:
        .long   0
        .long   1073741824
