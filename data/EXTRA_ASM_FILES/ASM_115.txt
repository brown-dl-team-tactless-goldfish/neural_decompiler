numDistinct:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %r15
        pushq   %r14
        pushq   %r13
        pushq   %r12
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -104(%rbp)
        movq    %rsi, -112(%rbp)
        cmpq    $0, -104(%rbp)
        je      .L2
        cmpq    $0, -112(%rbp)
        jne     .L3
.L2:
        movl    $0, %eax
        jmp     .L4
.L3:
        movq    -104(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -60(%rbp)
        movq    -112(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -64(%rbp)
        movl    -60(%rbp), %ebx
        movslq  %ebx, %rax
        subq    $1, %rax
        movq    %rax, -72(%rbp)
        movslq  %ebx, %rax
        movq    %rax, %r14
        movl    $0, %r15d
        movl    -60(%rbp), %eax
        movslq  %eax, %rdx
        subq    $1, %rdx
        movq    %rdx, -80(%rbp)
        cltq
        movq    %rax, %r12
        movl    $0, %r13d
        movl    -60(%rbp), %eax
        imull   -64(%rbp), %eax
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -88(%rbp)
        movq    -112(%rbp), %rax
        movzbl  (%rax), %edx
        movq    -104(%rbp), %rax
        movzbl  (%rax), %eax
        cmpb    %al, %dl
        sete    %al
        movzbl  %al, %edx
        movq    -88(%rbp), %rax
        movl    %edx, (%rax)
        movl    $1, -52(%rbp)
        jmp     .L5
.L6:
        movl    -52(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -88(%rbp), %rax
        movslq  %edx, %rdx
        movl    (%rax,%rdx,4), %edx
        movq    -112(%rbp), %rax
        movzbl  (%rax), %ecx
        movl    -52(%rbp), %eax
        movslq  %eax, %rsi
        movq    -104(%rbp), %rax
        addq    %rsi, %rax
        movzbl  (%rax), %eax
        cmpb    %al, %cl
        sete    %al
        movzbl  %al, %eax
        leal    (%rdx,%rax), %ecx
        movq    -88(%rbp), %rax
        movl    -52(%rbp), %edx
        movslq  %edx, %rdx
        movl    %ecx, (%rax,%rdx,4)
        addl    $1, -52(%rbp)
.L5:
        movl    -52(%rbp), %eax
        cmpl    -60(%rbp), %eax
        jl      .L6
        movl    $1, -56(%rbp)
        jmp     .L7
.L8:
        movl    -56(%rbp), %eax
        movslq  %eax, %rdx
        movslq  %ebx, %rax
        imulq   %rdx, %rax
        leaq    0(,%rax,4), %rdx
        movq    -88(%rbp), %rax
        addq    %rdx, %rax
        movl    $0, (%rax)
        addl    $1, -56(%rbp)
.L7:
        movl    -56(%rbp), %eax
        cmpl    -64(%rbp), %eax
        jl      .L8
        movl    $1, -56(%rbp)
        jmp     .L9
.L14:
        movl    $1, -52(%rbp)
        jmp     .L10
.L13:
        movl    -56(%rbp), %eax
        movslq  %eax, %rdx
        movq    -112(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %edx
        movl    -52(%rbp), %eax
        movslq  %eax, %rcx
        movq    -104(%rbp), %rax
        addq    %rcx, %rax
        movzbl  (%rax), %eax
        cmpb    %al, %dl
        jne     .L11
        movl    -56(%rbp), %eax
        movslq  %eax, %rdx
        movslq  %ebx, %rax
        imulq   %rdx, %rax
        leaq    0(,%rax,4), %rdx
        movq    -88(%rbp), %rax
        addq    %rax, %rdx
        movl    -52(%rbp), %eax
        subl    $1, %eax
        cltq
        movl    (%rdx,%rax,4), %ecx
        movl    -56(%rbp), %eax
        subl    $1, %eax
        movslq  %eax, %rdx
        movslq  %ebx, %rax
        imulq   %rdx, %rax
        leaq    0(,%rax,4), %rdx
        movq    -88(%rbp), %rax
        addq    %rax, %rdx
        movl    -52(%rbp), %eax
        subl    $1, %eax
        cltq
        movl    (%rdx,%rax,4), %eax
        movl    -56(%rbp), %edx
        movslq  %edx, %rsi
        movslq  %ebx, %rdx
        imulq   %rsi, %rdx
        leaq    0(,%rdx,4), %rsi
        movq    -88(%rbp), %rdx
        addq    %rsi, %rdx
        addl    %eax, %ecx
        movl    -52(%rbp), %eax
        cltq
        movl    %ecx, (%rdx,%rax,4)
        jmp     .L12
.L11:
        movl    -56(%rbp), %eax
        movslq  %eax, %rdx
        movslq  %ebx, %rax
        imulq   %rdx, %rax
        leaq    0(,%rax,4), %rdx
        movq    -88(%rbp), %rax
        addq    %rax, %rdx
        movl    -52(%rbp), %eax
        leal    -1(%rax), %esi
        movl    -56(%rbp), %eax
        movslq  %eax, %rcx
        movslq  %ebx, %rax
        imulq   %rcx, %rax
        leaq    0(,%rax,4), %rcx
        movq    -88(%rbp), %rax
        addq    %rax, %rcx
        movslq  %esi, %rax
        movl    (%rdx,%rax,4), %edx
        movl    -52(%rbp), %eax
        cltq
        movl    %edx, (%rcx,%rax,4)
.L12:
        addl    $1, -52(%rbp)
.L10:
        movl    -52(%rbp), %eax
        cmpl    -60(%rbp), %eax
        jl      .L13
        addl    $1, -56(%rbp)
.L9:
        movl    -56(%rbp), %eax
        cmpl    -64(%rbp), %eax
        jl      .L14
        movl    -64(%rbp), %eax
        subl    $1, %eax
        movslq  %eax, %rdx
        movslq  %ebx, %rax
        imulq   %rdx, %rax
        leaq    0(,%rax,4), %rdx
        movq    -88(%rbp), %rax
        addq    %rax, %rdx
        movl    -60(%rbp), %eax
        subl    $1, %eax
        cltq
        movl    (%rdx,%rax,4), %eax
        movl    %eax, -92(%rbp)
        movq    -88(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movl    -92(%rbp), %eax
.L4:
        addq    $72, %rsp
        popq    %rbx
        popq    %r12
        popq    %r13
        popq    %r14
        popq    %r15
        popq    %rbp
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "numDistinct(s, t) == 4"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    $1633772385, -7(%rbp)
        movw    $24931, -3(%rbp)
        movb    $0, -1(%rbp)
        movw    $24931, -10(%rbp)
        movb    $0, -8(%rbp)
        leaq    -10(%rbp), %rdx
        leaq    -7(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    numDistinct
        cmpl    $4, %eax
        je      .L16
        movl    $__PRETTY_FUNCTION__.4174, %ecx
        movl    $38, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L16:
        movl    $0, %eax
        leave
        ret
__PRETTY_FUNCTION__.4174:
        .string "main"
