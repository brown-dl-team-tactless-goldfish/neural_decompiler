searchMatrix:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    %ecx, -36(%rbp)
        movl    $0, -4(%rbp)
        movl    -32(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        movb    $0, -9(%rbp)
        jmp     .L2
.L6:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -8(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -36(%rbp)
        jne     .L3
        movb    $1, -9(%rbp)
        jmp     .L4
.L3:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -8(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -36(%rbp)
        jle     .L5
        addl    $1, -4(%rbp)
        jmp     .L2
.L5:
        subl    $1, -8(%rbp)
.L2:
        movl    -4(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jge     .L4
        cmpl    $0, -8(%rbp)
        jns     .L6
.L4:
        movzbl  -9(%rbp), %eax
        popq    %rbp
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "searchMatrix(matrix, rows, cols, 5) == true"
.LC2:
        .string "searchMatrix(matrix, rows, cols, 20) == false"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $40, %rsp
        movl    $5, -24(%rbp)
        movl    $5, -28(%rbp)
        movl    -24(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -40(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L9
.L10:
        movl    -28(%rbp), %eax
        cltq
        salq    $2, %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -40(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        addl    $1, -20(%rbp)
.L9:
        movl    -20(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jl      .L10
        movq    -40(%rbp), %rax
        movq    (%rax), %rax
        movl    $1, (%rax)
        movq    -40(%rbp), %rax
        movq    (%rax), %rax
        addq    $4, %rax
        movl    $4, (%rax)
        movq    -40(%rbp), %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movl    $7, (%rax)
        movq    -40(%rbp), %rax
        movq    (%rax), %rax
        addq    $12, %rax
        movl    $11, (%rax)
        movq    -40(%rbp), %rax
        movq    (%rax), %rax
        addq    $16, %rax
        movl    $15, (%rax)
        movq    -40(%rbp), %rax
        addq    $8, %rax
        movq    (%rax), %rax
        movl    $2, (%rax)
        movq    -40(%rbp), %rax
        addq    $8, %rax
        movq    (%rax), %rax
        addq    $4, %rax
        movl    $5, (%rax)
        movq    -40(%rbp), %rax
        addq    $8, %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movl    $8, (%rax)
        movq    -40(%rbp), %rax
        addq    $8, %rax
        movq    (%rax), %rax
        addq    $12, %rax
        movl    $12, (%rax)
        movq    -40(%rbp), %rax
        addq    $8, %rax
        movq    (%rax), %rax
        addq    $16, %rax
        movl    $19, (%rax)
        movq    -40(%rbp), %rax
        addq    $16, %rax
        movq    (%rax), %rax
        movl    $3, (%rax)
        movq    -40(%rbp), %rax
        addq    $16, %rax
        movq    (%rax), %rax
        addq    $4, %rax
        movl    $6, (%rax)
        movq    -40(%rbp), %rax
        addq    $16, %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movl    $9, (%rax)
        movq    -40(%rbp), %rax
        addq    $16, %rax
        movq    (%rax), %rax
        addq    $12, %rax
        movl    $16, (%rax)
        movq    -40(%rbp), %rax
        addq    $16, %rax
        movq    (%rax), %rax
        addq    $16, %rax
        movl    $22, (%rax)
        movq    -40(%rbp), %rax
        addq    $24, %rax
        movq    (%rax), %rax
        movl    $10, (%rax)
        movq    -40(%rbp), %rax
        addq    $24, %rax
        movq    (%rax), %rax
        addq    $4, %rax
        movl    $13, (%rax)
        movq    -40(%rbp), %rax
        addq    $24, %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movl    $14, (%rax)
        movq    -40(%rbp), %rax
        addq    $24, %rax
        movq    (%rax), %rax
        addq    $12, %rax
        movl    $17, (%rax)
        movq    -40(%rbp), %rax
        addq    $24, %rax
        movq    (%rax), %rax
        addq    $16, %rax
        movl    $24, (%rax)
        movq    -40(%rbp), %rax
        addq    $32, %rax
        movq    (%rax), %rax
        movl    $18, (%rax)
        movq    -40(%rbp), %rax
        addq    $32, %rax
        movq    (%rax), %rax
        addq    $4, %rax
        movl    $21, (%rax)
        movq    -40(%rbp), %rax
        addq    $32, %rax
        movq    (%rax), %rax
        addq    $8, %rax
        movl    $23, (%rax)
        movq    -40(%rbp), %rax
        addq    $32, %rax
        movq    (%rax), %rax
        addq    $12, %rax
        movl    $26, (%rax)
        movq    -40(%rbp), %rax
        addq    $32, %rax
        movq    (%rax), %rax
        addq    $16, %rax
        movl    $30, (%rax)
        movl    -28(%rbp), %edx
        movl    -24(%rbp), %esi
        movq    -40(%rbp), %rax
        movl    $5, %ecx
        movq    %rax, %rdi
        call    searchMatrix
        testb   %al, %al
        jne     .L11
        movl    $__PRETTY_FUNCTION__.4167, %ecx
        movl    $37, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L11:
        movl    -28(%rbp), %edx
        movl    -24(%rbp), %esi
        movq    -40(%rbp), %rax
        movl    $20, %ecx
        movq    %rax, %rdi
        call    searchMatrix
        xorl    $1, %eax
        testb   %al, %al
        jne     .L12
        movl    $__PRETTY_FUNCTION__.4167, %ecx
        movl    $38, %edx
        movl    $.LC0, %esi
        movl    $.LC2, %edi
        call    __assert_fail
.L12:
        movl    $0, -20(%rbp)
        jmp     .L13
.L14:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
        addl    $1, -20(%rbp)
.L13:
        movl    -20(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jl      .L14
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movl    $0, %eax
        addq    $40, %rsp
        popq    %rbx
        popq    %rbp
        ret
__PRETTY_FUNCTION__.4167:
        .string "main"
