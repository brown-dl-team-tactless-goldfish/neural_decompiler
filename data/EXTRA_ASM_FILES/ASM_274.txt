min:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -4(%rbp)
        movl    %esi, -8(%rbp)
        movl    -4(%rbp), %eax
        cmpl    %eax, -8(%rbp)
        cmovle  -8(%rbp), %eax
        popq    %rbp
        ret
hIndex:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L4
        cmpl    $0, -28(%rbp)
        jne     .L5
.L4:
        movl    $0, %eax
        jmp     .L6
.L5:
        movl    -28(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    quicksort
        movl    $0, -4(%rbp)
        movl    $0, -8(%rbp)
        jmp     .L7
.L11:
        movl    -28(%rbp), %eax
        subl    -8(%rbp), %eax
        movl    %eax, %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        movl    %edx, %esi
        movl    %eax, %edi
        call    min
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        cmpl    -4(%rbp), %eax
        jle     .L8
        movl    -12(%rbp), %eax
        movl    %eax, -4(%rbp)
.L8:
        movl    -28(%rbp), %eax
        subl    -8(%rbp), %eax
        movl    %eax, %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jl      .L12
        addl    $1, -8(%rbp)
.L7:
        movl    -8(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L11
        jmp     .L10
.L12:
        nop
.L10:
        movl    -4(%rbp), %eax
.L6:
        leave
        ret
quicksort:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    -28(%rbp), %eax
        cmpl    -32(%rbp), %eax
        jge     .L24
        movl    -28(%rbp), %eax
        movl    %eax, -4(%rbp)
        movl    -32(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -12(%rbp)
        jmp     .L16
.L19:
        subl    $1, -8(%rbp)
.L17:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jge     .L18
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -12(%rbp)
        jle     .L19
.L18:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        jmp     .L20
.L22:
        addl    $1, -4(%rbp)
.L20:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jge     .L21
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -12(%rbp)
        jge     .L22
.L21:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    -8(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
.L16:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jl      .L17
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -12(%rbp), %eax
        movl    %eax, (%rdx)
        movl    -4(%rbp), %edx
        movl    -28(%rbp), %ecx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    quicksort
        movl    -4(%rbp), %eax
        leal    1(%rax), %ecx
        movl    -32(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    quicksort
        jmp     .L13
.L24:
        nop
.L13:
        leave
        ret
hIndex0:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L26
        cmpl    $0, -28(%rbp)
        jne     .L27
.L26:
        movl    $0, %eax
        jmp     .L28
.L27:
        movl    -28(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    quicksort
        movl    $0, -4(%rbp)
        movl    -28(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L29
.L33:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -4(%rbp)
        jge     .L34
        addl    $1, -4(%rbp)
        subl    $1, -8(%rbp)
.L29:
        cmpl    $0, -8(%rbp)
        jns     .L33
        jmp     .L32
.L34:
        nop
.L32:
        movl    -4(%rbp), %eax
.L28:
        leave
        ret
.LC0:
        .string "/app/example.c"
.LC1:
        .string "hIndex(citations0, sizeof(citations0) / sizeof(citations0[0])) == 3"
.LC2:
        .string "hIndex(citations1, sizeof(citations1) / sizeof(citations1[0])) == 0"
.LC3:
        .string "hIndex(citations2, sizeof(citations2) / sizeof(citations2[0])) == 1"
.LC4:
        .string "hIndex(citations3, sizeof(citations3) / sizeof(citations3[0])) == 2"
.LC5:
        .string "hIndex(citations4, sizeof(citations4) / sizeof(citations4[0])) == 2"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movl    $3, -32(%rbp)
        movl    $0, -28(%rbp)
        movl    $6, -24(%rbp)
        movl    $1, -20(%rbp)
        movl    $5, -16(%rbp)
        movl    $0, -36(%rbp)
        movl    $1, -40(%rbp)
        movl    $1, -52(%rbp)
        movl    $2, -48(%rbp)
        movl    $2, -44(%rbp)
        movl    $2, -60(%rbp)
        movl    $2, -56(%rbp)
        leaq    -32(%rbp), %rax
        movl    $5, %esi
        movq    %rax, %rdi
        call    hIndex
        cmpl    $3, %eax
        je      .L36
        movl    $__PRETTY_FUNCTION__.4197, %ecx
        movl    $62, %edx
        movl    $.LC0, %esi
        movl    $.LC1, %edi
        call    __assert_fail
.L36:
        leaq    -36(%rbp), %rax
        movl    $1, %esi
        movq    %rax, %rdi
        call    hIndex
        testl   %eax, %eax
        je      .L37
        movl    $__PRETTY_FUNCTION__.4197, %ecx
        movl    $63, %edx
        movl    $.LC0, %esi
        movl    $.LC2, %edi
        call    __assert_fail
.L37:
        leaq    -40(%rbp), %rax
        movl    $1, %esi
        movq    %rax, %rdi
        call    hIndex
        cmpl    $1, %eax
        je      .L38
        movl    $__PRETTY_FUNCTION__.4197, %ecx
        movl    $64, %edx
        movl    $.LC0, %esi
        movl    $.LC3, %edi
        call    __assert_fail
.L38:
        leaq    -52(%rbp), %rax
        movl    $3, %esi
        movq    %rax, %rdi
        call    hIndex
        cmpl    $2, %eax
        je      .L39
        movl    $__PRETTY_FUNCTION__.4197, %ecx
        movl    $65, %edx
        movl    $.LC0, %esi
        movl    $.LC4, %edi
        call    __assert_fail
.L39:
        leaq    -60(%rbp), %rax
        movl    $2, %esi
        movq    %rax, %rdi
        call    hIndex
        cmpl    $2, %eax
        je      .L40
        movl    $__PRETTY_FUNCTION__.4197, %ecx
        movl    $66, %edx
        movl    $.LC0, %esi
        movl    $.LC5, %edi
        call    __assert_fail
.L40:
        movl    $0, %eax
        leave
        ret
__PRETTY_FUNCTION__.4197:
        .string "main"
