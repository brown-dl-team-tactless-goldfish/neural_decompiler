,code
0,"// C program to demonstrate printing of// our own name using printf()#include <stdio.h>  int main(){    // print name    printf(""Name : GeeksforGeeks"");    return 0;}"
1,"// C program to add two numbers#include <stdio.h>  int main(){    int A, B, sum = 0;      // Ask user to enter the two numbers    printf(""Enter two numbers A and B : \n"");      // Read two numbers from the user || A = 2, B = 3    scanf(""%d%d"", &A, &B);      // Calculate the addition of A and B    // using '+' operator    sum = A + B;      // Print the sum    printf(""Sum of A and B is: %d"", sum);      return 0;}"
2,"// C Program to check for prime number using Naive Approach#include <stdio.h>  // Function to check prime numbervoid checkPrime(int N){    // initially, flag is set to true or 1    int flag = 1;      // loop to iterate through 2 to N/2    for (int i = 2; i <= N / 2; i++) {          // if N is perfectly divisible by i        // flag is set to 0 i.e false        if (N % i == 0) {            flag = 0;            break;        }    }      if (flag) {        printf(""The number %d is a Prime Number\n"", N);    }    else {        printf(""The number %d is not a Prime Number\n"", N);    }      return;}  // driver codeint main(){    int N = 546;      checkPrime(N);      return 0;}"
3,"// C program to multiply two floating point numbers#include <stdio.h>  int main(){    float A, B, product = 0.0f;      // Ask user to enter the two numbers    printf(""Enter two floating numbers A and B : \n"");      // Read two numbers from the user || A = 2.12, B = 3.88    scanf(""%f%f"", &A, &B);      // Calculate the multiplication of A and B    // using '*' operator    product = A * B;      // Print the product    printf(""Product of A and B is: %f"", product);      return 0;}"
4,"// C program to print// ASCII Value of Character#include <stdio.h>  // Driver codeint main(){    char c = 'k';      // %d displays the integer value of     // a character     // %c displays the actual character    printf(""The ASCII value of %c is %d"",             c, c);    return 0;}"
5,"// C Program to convert// Fahrenheit to Celsuis#include <stdio.h> // Function to convert Degree// Fahrenheit to Degree Celsuisfloat fahrenheit_to_celsius(float f){  return ((f - 32.0) * 5.0 / 9.0);} // Driver codeint main(){  float f = 40;   // Passing parameter to function  printf(""Temperature in Degree Celsius : %0.2f"",          fahrenheit_to_celsius(f));  return 0;}"
6,"Data TypeMemory (bytes)RangeFormat Specifiershort int2-32,768 to 32,767%hd"
7,"// C program to demonstrate// addition of complex numbers#include <stdio.h> // define a structure for complex numbertypedef struct complexNumber {    int real;    int img;} complex; // complex add(complex x, complex y) function C Program to// Add Two Complex numbers. This function accepts two// complex type numbers as parameter as return addition of// them.complex add(complex x, complex y); // driver codeint main(){     // define three complex type numbers    complex a, b, sum;     // first complex number    a.real = 2;    a.img = 3;     // second complex number    b.real = 4;    b.img = 5;     // print first complex number    printf(""\n a = %d + %di"", a.real, a.img);     // print second complex number    printf(""\n b = %d + %di"", b.real, b.img);     // call add(a,b) function and    // pass complex numbers a & b    // as an parameter.    sum = add(a, b);     // print result    printf(""\n sum = %d + %di"", sum.real, sum.img);     return 0;} // complex add(complex x, complex y)// function definitioncomplex add(complex x, complex y){     // define a new complex number.    complex add;     // add real part of a&b    add.real = x.real + y.real;     // add Imaginary part of a&b    add.img = x.img + y.img;     // return add    return (add);}"
8,"// C program to display Prime numbers till N #include <stdbool.h>#include <stdio.h> // This function is to check// if a given number is primebool isPrime(int n){    // since 0 and 1 is not prime    // number return false.    if (n == 1 || n == 0)        return false;     // Run a loop from 2 to n-1    for (int i = 2; i < n; i++) {               // if the number is divisible by i, then n is not a        // prime number, otherwise n is prime number.        if (n % i == 0)            return false;    }    return true;} // Driver codeint main(){    int N = 10;     // check for the every number from 1 to N    for (int i = 1; i <= N; i++) {               // check if i (current number) is prime        if (isPrime(i)) {            printf(""%d "", i);        }    }    return 0;}"
9,"// C program to demonstrate the// area and perimeter of rectangle#include <stdio.h> int main(){     int l = 10, b = 10;    printf(""Area of rectangle is : %d"", l * b);    printf(""\nPerimeter of rectangle is : %d"", 2 * (l + b));    return 0;}"
10,"#include <stdio.h>   int main() {     int A;       printf(""Enter the number A: "");     scanf(""%d"", &A);       if (A > 0)         printf(""%d is positive."", A);     else if (A < 0)         printf(""%d is negative."", A);     else if (A == 0)         printf(""%d is zero."", A);       return 0; } "
11,"// C program for the above approach#include <stdio.h> // Function to check if a// number is even or oddvoid checkEvenOdd(int N){    // Find remainder    int r = N % 2;     // Condition for even    if (r == 0) {        printf(""Even"");    }     // Otherwise    else {        printf(""Odd"");    }} // Driver Codeint main(){    // Given number N    int N = 101;     // Function Call    checkEvenOdd(N);     return 0;}"
12,"// C Program to Check Vowel or // Consonant using switch case#include <stdio.h>  int isVowel(char ch){    int check = 0;    switch (ch)     {    case 'a':    case 'e':    case 'i':    case 'o':    case 'u':    case 'A':    case 'E':    case 'I':    case 'O':    case 'U':        check = 1;    }    return check;}  int main(){    // 1 means Vowel    printf(""a is %d"",           isVowel('a'));       // 0 means Consonant    printf(""x is %d"",           isVowel('x'));     return 0;}"
13,"#include <stdio.h>   int main() {     int A, B, C;       printf(""Enter the numbers A, B and C: "");     scanf(""%d %d %d"", &A, &B, &C);       if (A >= B && A >= C)         printf(""%d is the largest number."", A);       if (B >= A && B >= C)         printf(""%d is the largest number."", B);       if (C >= A && C >= B)         printf(""%d is the largest number."", C);       return 0; } "
14,"// C Program to demonstrate// Sum of Natural Numbers// using while loops #include <stdio.h>int main(){    int i, s = 0;    int n = 10;    i = 1;       // while loop executes    // the statements until the    // condition is false    while (i <= n) {               // adding natural numbers        // up to given number n        s += i;        i++;    }    // printing the result    printf(""Sum = %d"", s);    return 0;}"
15,"// C program to check if a given // year is leap year or not#include <stdio.h>#include <stdbool.h>  bool checkYear(int year){    // If a year is multiple of 400,     // then it is a leap year    if (year % 400 == 0)        return true;      // Else If a year is multiple of 100,    // then it is not a leap year    if (year % 100 == 0)        return false;      // Else If a year is multiple of 4,    // then it is a leap year    if (year % 4 == 0)        return true;    return false;}  // Driver codeint main(){    int year = 2000;      checkYear(year)? printf(""Leap Year""):                     printf(""Not a Leap Year"");    return 0;}"
16,"// C Program to Make a Simple Calculator// Using switch case#include <stdio.h>#include <stdlib.h> int main(){    char ch;    double a, b;    while (1) {        printf(""Enter an operator (+, -, *, /), if want to exit press x: "");        scanf("" %c"", &ch);        // to exit        if (ch == 'x')            exit(0);        printf(""Enter two first and second operand: "");        scanf(""%lf %lf"",&a,&b);        // Using switch case we will differentiate        // operations based on different operator        switch (ch) {        // For Addition        case '+':            printf(""%.1lf + %.1lf = %.1lf\n"", a, b, a + b);            break;        // For Subtraction        case '-':            printf(""%.1lf - %.1lf = %.1lf\n"", a, b, a - b);            break;        // For Multiplication        case '*':            printf(""%.1lf * %.1lf = %.1lf\n"", a, b, a * b);            break;        // For Division        case '/':            printf(""%.1lf / %.1lf = %.1lf\n"", a, b, a / b);            break;        // If operator doesn't match any case constant        default:            printf(""Error! please write a valid operator\n"");        }    }}"
17,"// C program to Demonstrate the// Multiplication table of a number#include <stdio.h>void print_table(int range, int num){    // Declaring a variable mul to store the  product.    int mul;     // For loop to calculate the Multiplication table.    for (int i = 1; i <= range; i++) {        // To store the product.        mul = num * i;         // Printing the Multiplication Table.        printf(""%d * %d = %d"", num, i, mul);         // Proceeding to the next line.        printf(""\n"");    }}// Driver codeint main(){     // The range of the    // Multiplication table    int range = 10;     // The number to calculate the    // Multiplication table    int num = 5;     // Calling the Function.    print_table(range, num);     return 0;}"
18,"// C program to find LCM // of two numbers #include <stdio.h>   // Recursive function to return // gcd of a and b int gcd(int a, int b) {     if (a == 0)        return b;     return gcd(b % a, a); }   // Function to return LCM of // two numbers int lcm(int a, int b) {     return (a / gcd(a, b)) * b;}   // Driver codeint main() {     int a = 15, b = 20;     printf(""LCM of %d and %d is %d "",             a, b, lcm(a, b));     return 0; } "
19,"// C program to check given number is// Armstrong number or not using Sum// of Digits#include <stdio.h> // Driver codeint main(){    int n = 153;    int temp = n;    int p = 0;     // Calculating the sum of individual digits    while (n > 0) {        int rem = n % 10;        p = (p) + (rem * rem * rem);        n = n / 10;    }     // Condition to check whether the    // value of P equals to user input    // or not.    if (temp == p) {        printf(""Yes. It is Armstrong No."");    }    else {        printf(""No. It is not an Armstrong No."");    }    return 0;}"
20,"// C Program to Display Armstrong // numbers between 1 to 1000#include <math.h>#include <stdio.h>  int main(){    int i, sum, num, count = 0;    printf(        ""All Armstrong number between 1 and 1000 are:\n"");      // This loop will run for 1 to 1000    for (i = 1; i <= 1000; i++) {        num = i;        // Count number of digits.        while (num != 0) {            num /= 10;            count++;        }        num = i;        sum = pow(num % 10, count)              + pow((num % 100 - num % 10) / 10, count)              + pow((num % 1000 - num % 100) / 100, count);        // Check for Armstrong Number        if (sum == i) {            printf(""%d "", i);        }        count = 0;    }}"
21,"// C program to demonstrate an armstrong number// between the given intervals  #include <stdio.h>  int main(){    int s = 1, e = 500, num, n, arm = 0, i, sum;        // iterating the for loop     // using the given intervals    for (i = s; i <= e; i++) {        num = i;        sum = i;                // finding the armstrong number        while (num != 0) {            n = num % 10;            arm = arm + (n * n * n);            num = num / 10;        }                // if number is equal to         // the arm then it is a        // armstrong number        if (sum == arm) {            printf(""%d\n"", i);        }        arm = 0;    }    return 0;}"
22,"// C program to implement// the above approach#include <stdio.h>  // Iterative function to // reverse digits of numint reverseDigits(int num){    int rev_num = 0;    while (num > 0)     {        rev_num = rev_num * 10 + num % 10;        num = num / 10;    }    return rev_num;}  // Driver codeint main(){    int num = 4562;    printf(""Reverse of no. is %d"",             reverseDigits(num));      getchar();    return 0;}"
23,"// C program to check whether// a number is palindrome or not#include <stdio.h> // Driver codeint main(){    // Define variables       // This is our given number    int original_number = 12321;       // This variable stored reversed digit    int reversed = 0;       int num = original_number;     // Execute a while loop to reverse    // digits of given number    while (num != 0)    {        int r = num % 10;        reversed = reversed * 10 + r;        num /= 10;    }     // Compare original_number with    // reversed number    if (original_number == reversed)    {        printf("" Given number %d is a palindrome number"",                 original_number);    }    else    {        printf("" Given number %d is not a palindrome number"",                 original_number);    }    return 0;}"
24,"// C Program to check for prime number using Naive Approach#include <stdio.h>  // Function to check prime numbervoid checkPrime(int N){    // initially, flag is set to true or 1    int flag = 1;      // loop to iterate through 2 to N/2    for (int i = 2; i <= N / 2; i++) {          // if N is perfectly divisible by i        // flag is set to 0 i.e false        if (N % i == 0) {            flag = 0;            break;        }    }      if (flag) {        printf(""The number %d is a Prime Number\n"", N);    }    else {        printf(""The number %d is not a Prime Number\n"", N);    }      return;}  // driver codeint main(){    int N = 546;      checkPrime(N);      return 0;}"
25,"// C Program to Display Prime // Numbers Between Intervals #include <stdio.h>  // Driver codeint main(){    // Declare the variables    int a, b, i, j, flag;      // Ask user to enter lower value     // of interval    printf(""Enter lower bound of the interval: "");      // Take input    scanf(""%d"", &a);       // Ask user to enter upper value     // of interval    printf(""Enter upper bound of the interval: "");      // Take input    scanf(""%d"", &b);       // Print display message    printf(""Prime numbers between %d and %d are: "",             a, b);      // Traverse each number in the interval    // with the help of for loop    for (i = a; i <= b; i++)     {        // Skip 0 and 1 as they are        // neither prime nor composite        if (i == 1 || i == 0)            continue;          // flag variable to tell        // if i is prime or not        flag = 1;          for (j = 2; j <= i / 2; ++j)         {            if (i % j == 0)             {                flag = 0;                break;            }        }          // flag = 1 means i is prime        // and flag = 0 means i is         // not prime        if (flag == 1)            printf(""%d "", i);    }      return 0;}"
26,"// C program to demonstrate whether// a number is Neon number or not#include <stdio.h>  int Check_Neon_Number(int num) {      // Calculating the square of the number    int square = num * num;      // Copying the square in a variable    // to extract the digit    int n = square;      // Declaring a variable to store the digits    int digit;      // Initializing a variable to    // calculate the sum of digits    int sum = 0;      // To calculate the sum of digits    while (n != 0) {          // Extracting the digit        digit = n % 10;        sum = sum + digit;        n = n / 10;    }      // Checking the condition of a Neon Number    if (sum == num)        return 1; // If condition is true.    else        return 0; // If condition is false.}  // Driver Codeint main(){    int num = 9;      // Calling the function    int ans = Check_Neon_Number(num);    if (ans == 1)          // The number is Neon        printf(""true"");    else          // The number is not Neon        printf(""false"");    return 0;}"
27,"// C implementation of Naive // method to print all divisors#include<stdio.h>  // Function to print the divisorsvoid printDivisors(int n){    for (int i = 1; i <= n; i++)        if (n % i == 0)            printf(""%d "", i);}  // Driver codeint main(){    printf(""The divisors of 100 are: "");    printDivisors(100);    return 0;}"
28,"// C Program to find the sum of// even-indices Fibonacci numbers#include <stdio.h> // Computes value of the first// fibonacci numbers and stores// the even-indexed sumint calculateEvenSum(int n){    // return 0 if n is equals or less than to 0    if (n <= 0)        return 0;     int fibo[2 * n + 1];    fibo[0] = 0, fibo[1] = 1;     // Initialize the result    int sum = 0;     // Adding the remaining terms    for (int i = 2; i <= 2 * n; i++) {        fibo[i] = fibo[i - 1] + fibo[i - 2];         // For even indices        if (i % 2 == 0)            sum += fibo[i];    }     // Return alternating sum    return sum;} // Driver Codeint main(){     // Get n    int n = 5;     // calculateEvenSum(n) function is computed and return    // the sum of even-indices Fibonacci numbers.    int sum = calculateEvenSum(n);     // display result    printf(""Even indexed Fibonacci Sum upto %d terms = %d"",           n, sum);     return 0;}"
29,"// C program to print a triangle#include <stdio.h>  // Driver codeint main(){    int n = 6;      // ith row has i elements    for (int i = 1; i <= n; i++) {        for (int j = 1; j <= i; j++) {            printf(""*"");        }        printf(""\n"");    }    return 0;}"
30,"// C program to illustrate the above// given pattern of numbers.#include <stdio.h> int main(){    int n = 5, i, j, num = 1, gap;     gap = n - 1;     for (j = 1; j <= n; j++) {        num = j;         for (i = 1; i <= gap; i++)            printf("" "");         gap--;         for (i = 1; i <= j; i++) {            printf(""%d"", num);            num++;        }        num--;        num--;        for (i = 1; i < j; i++) {            printf(""%d"", num);            num--;        }          printf("""");    }     return 0;}"
31,"// C program to print character pattern using character #include <stdio.h> int main(){    int i, j;     // input entering number of rows    int rows = 5;     // taking first character of alphabet    // which is useful to print pattern    char character = 'A';     // first for loop is used to identify number rows    for (i = 0; i < rows; i++) {         // second for loop is used to identify number        // of columns based on the rows        for (j = 0; j <= i; j++) {             // printing character to get the required            // pattern            printf(""%c "", character);        }        printf(""\n"");         // incrementing character value so that it        // will print the next character        character++;    }    return 0;}"
32,"// C program to print continuous// character pattern using// character#include <stdio.h>int main(){       int i, j;       // Number of rows    int rows = 3;       // Taking first character of alphabet    // which is useful to print pattern    char character = 'A';       // This loop is used to identify    // number rows    for (i = 0; i < rows; i++)    {        // This for loop is used to        // identify number of columns        // based on the rows        for (j = 0; j <= i; j++)        {            // Printing character to get            // the required pattern            printf(""%c "",character);                       // Incrementing character value so            // that it will print the next character            character++;        }        printf(""\n"");    }    return 0;}"
33,"// C Program to Demonstrate// a Hollow Star Pyramid#include <stdio.h> int main(){    int i, space, n = 5, j = 0;     // first for loop is used to    // iterate number of rows    for (i = 0; i < n - 1; i++) {         // second for loop is used to print spaces        for (space = 1; space < n - i; space++) {            printf("" "");        }        // third for loop is used        // to print the required        // pattern        for (j = 0; j <= 2 * i; j++) {            if (j == 0 || j == 2 * i)                printf(""*"");            else                printf("" "");        }        // print the new line after every row        printf(""\n"");    }    // used to print last row    for (i = 0; i < 2 * n - 1; i++) {        printf(""*"");    }    return 0;}"
34,"// C program to print an inverted hollow// star pyramid using for loop#include <stdio.h>void pattern_fun(int row){    // To iterate through the rows    for (int j = 1; j <= row; j++)    {        // To print the beginning spaces        for (int sp = 1; sp <= j - 1; sp++)        {            printf("" "");        }         // Iterating from jth column to        // last column (row*2 - (2*j - 1))        int last_col = (row * 2 - (2 * j - 1));         // To iterate through column        for (int k = 1; k <= last_col; k++)        {            // To Print all star for first            // row (j==1) jth column (k==1)            // and for last column            // (row*2 - (2*j - 1))            if (j == 1 || k == 1)                printf(""*"");            else if (k == last_col)                printf(""*"");            else                printf("" "");        }        // Proceeding to next row.        printf(""\n"");    }} // Driver codeint main(){    // Number of rows    int row = 7;       // Calling the function to    // print the pattern.    pattern_fun(row);    return 0;}"
35,"// C Program To Print Hollow Diamond// Pattern using for loop#include <stdio.h>int main(){     int n = 5, rows, columns;     // for loop is used to identify    // the number of rows and    // it is used to print upper triangle    for (rows = 1; rows <= n; rows++) {         // used for printing the spaces        for (columns = n; columns > rows; columns--) {            printf("" "");        }         // print star        printf(""*"");         // again print the spaces        for (columns = 1; columns < (rows - 1) * 2;             columns++) {            printf("" "");        }        if (rows == 1) {            printf(""\n"");        }        else {            printf(""*\n"");        }    }    // for loop is used to identify    // the number of rows and    // it is used to print lower triangle    for (rows = n - 1; rows >= 1; rows--) {         // used for printing the spaces        for (columns = n; columns > rows; columns--) {            printf("" "");        }         // print star        printf(""*"");        for (columns = 1; columns < (rows - 1) * 2;             columns++) {            printf("" "");        }        if (rows == 1) {            printf(""\n"");        }        else {            printf(""*\n"");        }    }    return 0;}"
36,"// C program to print full// diamond shape pyramid#include <stdio.h>  // Prints diamond patternvoid printDiamond(int n){    int space = n - 1;      // Run loop till the number     // of rows    for (int i = 0; i < n; i++)    {        // Loop for the initially space         // before the star printing        for (int j = 0; j < space; j++)            printf("" "");          // Print the i+1 stars        for (int j = 0; j <= i; j++)            printf(""* "");          printf(""\n"");        space--;    }      // Repeat again in the reverse order    space = 0;      // run a loop till number of rows    for (int i = n; i > 0; i--)     {        // Loop for the initially space         // before the star printing        for (int j = 0; j < space; j++)            printf("" "");          // Print the i stars        for (int j = 0; j < i; j++)            printf(""* "");          printf(""\n"");        space++;    }}  // Driver codeint main(){    printDiamond(8);    return 0;}"
37,"// C program to print Pascal’s // Triangle using 2D Arrays in// O(n^2) time and O(n^2) extra space// method.#include<stdio.h>void printPascal(int n){  // An auxiliary array to store  // generated pascal triangle values  int arr[n][n];      // Iterate through every line and   // print integer(s) in it  for (int line = 0; line < n; line++)  {    // Every line has number of integers    // equal to line number    for (int i = 0; i <= line; i++)    {      // First and last values in       // every row are 1      if (line == i || i == 0)        arr[line][i] = 1;              // Other values are sum of values       // just above and left of above      else        arr[line][i] = (arr[line - 1][i - 1] +                         arr[line - 1][i]);      printf(""%d "",               arr[line][i]);    }    printf(""\n"");  }}  // Driver codeint main(){  int n = 5;  printPascal(n);  return 0;}"
38,"// C program to Demonstrate Floyd's Triangle// Using for loop#include <stdio.h>void floyd(int n){    int i, j = 1;     // Condition printing the number of element    for (i = 1; i <= (n * (n + 1)) / 2; i++) {         printf(""%d "", i);         // condition for row of number of element printing        if (i == (j * (j + 1)) / 2) {            printf(""\n"");            j++;        }    }}int main() { floyd(6); }"
39,"// C program to demonstrate reversing// of floyd's triangle#include <stdio.h>void Reverse_Floyd(int row){    // Calculating the maximum value    int max_val = row * (row + 1) / 2;     // Initializing num with the max value    int num = max_val;     // The outer loop maintains,    // the number of rows.    for (int i = row; i >= 1; i--) {         // The inner loop maintains,        // the number of column.        for (int j = 1; j <= i; j++) {             // To print the numbers.            printf(""%d "", num);             // To keep decreasing the value            // of numbers.            num--;        }         // To proceed to next line.        printf(""\n"");    }}int main(){    int row = 5; // The number of Rows to be printed.     // Calling the Function.    Reverse_Floyd(row);       return 0;}"
40,"// C program to demonstrate whether// a number is prime or not using // for loop#include <stdio.h>  // defining the functionint primenumber(int number){    int i;        // condition for checking the    // given number is prime or    // not    for (i = 2; i <= number / 2; i++) {        if (number % i != 0)            continue;        else            return 1;    }    return 0;}  int main(){    int num = 7, res = 0;        // calling the function    res = primenumber(num);    if (res == 0)        printf(""%d is a prime number"", num);    else        printf(""%d is not a prime number"", num);}"
41,"// C Program to demonstrate Prime Numbers// Between Two Intervals Using for // loop in a function  #include <stdio.h>  // user-defined function to check prime numberint checkPrimeNumber(int number){    int i, f = 1;        // condition for finding the    // prime numbers between the    // given intervals    for (i = 2; i <= number / 2; ++i) {          if (number % i == 0) {            f = 0;            break;        }    }      return f;}  int main(){      int num1 = 2, num2 = 10, j, f;      printf(""Prime numbers between %d and %d are: "", num1,           num2);    for (j = num1; j < num2; ++j) {          // if flag is equal to 1 then        // it is a prime number        // calling the function        f = checkPrimeNumber(j);          if (f == 1) {                        // printing the result            printf(""%d "", j);        }    }      return 0;}"
42,"// C program to find roots of// a quadratic equation#include <math.h>#include <stdio.h>#include <stdlib.h> // Prints roots of quadratic// equation ax*2 + bx + xvoid findRoots(int a, int b, int c){    // If a is 0, then equation is    // not quadratic, but linear    if (a == 0)    {        printf(""Invalid"");        return;    }     int d = b * b - 4 * a * c;    double sqrt_val = sqrt(abs(d));     if (d > 0)    {        printf(""Roots are real and different "");        printf(""%f%f"",              (double)(-b + sqrt_val) /                      (2 * a),              (double)(-b - sqrt_val) /                      (2 * a));    }    else if (d == 0)    {        printf(""Roots are real and same "");        printf(""%f"",                -(double)b / (2 * a));    }    else // d < 0    {        printf(""Roots are complex "");        printf(""%f + i%f%f - i%f"",               -(double)b / (2 * a),               sqrt_val/(2 * a),               -(double)b / (2 * a),               sqrt_val/(2 * a));    }} // Driver codeint main(){    int a = 1, b = -7, c = 12;       // Function call    findRoots(a, b, c);    return 0;}"
43,"// C program to check whether a// number can be expressed as sum// of two prime numbers#include <stdio.h> // Function to check prime numberint isPrime(int n){    int i, isPrime = 1;     // 0 and 1 are not prime numbers    if (n == 0 || n == 1)    {        isPrime = 0;    }    else    {        for (i = 2; i <= n / 2; ++i)        {            if (n % i == 0)            {                isPrime = 0;                break;            }        }    }     return isPrime;} // Driver codeint main(){    int n = 7, i, flag = 0;     for (i = 2; i <= n / 2; ++i)    {        // condition for i to be a        // prime number        if (isPrime(i) == 1)        {            // condition for n-i to            // be a prime number            if (isPrime(n - i) == 1)            {                printf(""Yes\n"");                return 0;            }        }    }     printf(""No\n"");    return 0;}"
44,"// C program to find the sum of n// natural numbers using recursion#include <stdio.h> // Returns the sum of first n// natural numbersint recSum(int n){  // Base condition    if (n <= 1)        return n;     // Recursive call    return n + recSum(n - 1);} // Driver codeint main(){    int n = 10;    printf(""Sum = %d "", recSum(n));    return 0;}"
45,"// C program to find GCD of two numbers#include <math.h>#include <stdio.h>  // Function to return gcd of a and bint gcd(int a, int b){    // Find Minimum of a and b    int result = ((a < b) ? a : b);     while (result > 0) {        if (a % result == 0 && b % result == 0) {            break;        }        result--;    }    return result; // return gcd of a nd b}  // Driver program to test above functionint main(){    int a = 98, b = 56;    printf(""GCD of %d and %d is %d "", a, b, gcd(a, b));    return 0;}// This code is contributed by Suruchi Kumari"
46,       1               2       3       4
47,"// C program for the above approach#include <stdio.h>   int power(int x, int n){    // If x^0 return 1    if (n == 0)        return 1;       // If we need to find of 0^y    if (x == 0)        return 0;    // For all other cases    return x * power(x, n - 1);}   // Driver Codeint main(){    int x = 2;    int n = 3;       // Function call    printf(""%d\n"", power(x, n));}"
48,"// C program to find maximum in // arr[] of size n #include <stdio.h>   // C function to find maximum // in arr[] of size n int largest(int arr[], int n) {     int i;           // Initialize maximum element     int max = arr[0];       // Traverse array elements from     // second and compare every     // element with current max     for (i = 1; i < n; i++)         if (arr[i] > max)             max = arr[i];       return max; }   // Driver codeint main() {     int arr[] = {10, 324, 45, 90, 9808};     int n = sizeof(arr)/sizeof(arr[0]);     printf(""Largest in given array is %d"",             largest(arr, n));     return 0; } "
49,"// C program to demonstrate// average of array elements#include <stdio.h>  // Function that return average of given array.double average(int a[], int n){    // Find the sum of array element    int sum = 0;    for (int i = 0; i < n; i++)        sum += a[i];      return (double)sum / n;}  // Driver codeint main(){    // input array    int arr[] = { 1, 2, 3, 4, 5 };      // size of array    int n = sizeof(arr) / sizeof(arr[0]);      // average(arr, n) function is return the average of the    // array.    int avg = average(arr, n);      // display average of given array    printf("" Average = %d "", avg);    return 0;}"
50,"// C program to sort array elements in descending order  #include <stdio.h>  int main(){      int a[5] = { 45, 22, 100, 66, 37 };    int n = 5, i, j, t = 0;        // iterates the array elements    for (i = 0; i < n; i++) {                // iterates the array elements from index 1        for (j = i + 1; j < n; j++) {                        // comparing the array elements, to set array            // elements in descending order            if (a[i] < a[j]) {                t = a[i];                a[i] = a[j];                a[j] = t;            }        }    }    // printing the output    for (i = 0; i < n; i++) {        printf(""%d "", a[i]);    }    return 0;}"
51,"// C program to sort the array in an// ascending order using selection sort  #include <stdio.h>  void swap(int* xp, int* yp){    int temp = *xp;    *xp = *yp;    *yp = temp;}  // Function to perform Selection Sortvoid selectionSort(int arr[], int n){    int i, j, min_idx;      // One by one move boundary of unsorted subarray    for (i = 0; i < n - 1; i++) {          // Find the minimum element in unsorted array        min_idx = i;        for (j = i + 1; j < n; j++)            if (arr[j] < arr[min_idx])                min_idx = j;          // Swap the found minimum element        // with the first element        swap(&arr[min_idx], &arr[i]);    }}  // Function to print an array void printArray(int arr[], int size){    int i;    for (i = 0; i < size; i++)        printf(""%d "", arr[i]);    printf(""\n"");}  // Driver codeint main(){    int arr[] = { 0, 23, 14, 12, 9 };    int n = sizeof(arr) / sizeof(arr[0]);    printf(""Original array: \n"");    printArray(arr, n);      selectionSort(arr, n);    printf(""\nSorted array in Ascending order: \n"");    printArray(arr, n);      return 0;}"
52,"// C program to remove duplicates#include <stdio.h>  // Function to remove duplicate // elements This function returns // new size of modified array.int removeDuplicates(int arr[], int n){    // Return, if array is empty or     // contains a single element    if (n == 0 || n == 1)        return n;      int temp[n];      // Start traversing elements    int j = 0;      // If current element is not equal     // to next element then store that     // current element    for (int i = 0; i < n - 1; i++)        if (arr[i] != arr[i + 1])            temp[j++] = arr[i];      // Store the last element as whether     // it is unique or repeated, it hasn't     // stored previously    temp[j++] = arr[n - 1];      // Modify original array    for (int i = 0; i < j; i++)        arr[i] = temp[i];      return j;}  // Driver codeint main(){    int arr[] = {1, 2, 2, 3, 4,                  4, 4, 5, 5};    int n = sizeof(arr) / sizeof(arr[0]);      // removeDuplicates() returns new     // size of array.    n = removeDuplicates(arr, n);      // Print updated array    for (int i = 0; i < n; i++)        printf(""%d "", arr[i]);    return 0;}  // This code is contributed by Aditya Kumar (adityakumar129)"
53,"// C Program To Merge Two Arrays// using Quaint Methodology#include <stdio.h>int main(){    int arr1size = 5, arr2size = 5, arr_resultsize, i, j;     // elements of first Array    int a[5] = { 1, 2, 3, 4, 5 };     // elements of Second Array    int b[5] = { 6, 7, 8, 9, 10 };     // resultant Array Size Declaration    arr_resultsize = arr1size + arr2size;    int c[arr_resultsize];     // copying array 1 elements into an array    for (i = 0; i < arr1size; i++) {        c[i] = a[i];    }     // copying array 2 elements into an array    for (i = 0, j = arr1size;         j < arr_resultsize && i < arr2size; i++, j++) {        c[j] = b[i];    }     // Array Elements After Merging    for (i = 0; i < arr_resultsize; i++) {        printf(""%d "", c[i]);    }    return 0;}"
54,"// C Program to remove All Occurrences of// an element in an array using functions#include <stdio.h>  // function declarationint remove_element(int* array, int n, int val){    int i;        // iterates array elements    for (i = 0; i < n; i++)                // if the given array element is not equal to given        // value then print array element        if (array[i] != val)            printf(""%d "", array[i]);}  int main(){    int array[6] = { 1, 2, 1, 3, 1 }, size = 5, value = 1;    remove_element(array, size, value);}"
55,"// C Program to demonstrate scrunity of// 2 Common Array Elements Using Brute force#include <stdio.h> int main(){    int array1[] = { 8, 2, 3, 4, 5, 6, 7, 1 };    int array2[] = { 4, 5, 7, 11, 6, 1 };    int i, j, flag, x, k = 0;    int result[100];    printf(""Common elements are: "");       // To traverse in array1.    for (i = 0; i < sizeof(array1) / 4; i++) {               // To traverse in array2.        for (j = 0; j < sizeof(array2) / 4; j++) {                       // To match elements of array1 with elements of            // array2.            if (array1[i] == array2[j]) {                               flag = 0;                               // To traverse in result array.                for (x = 0; x < k; x++) {                                       // Check whether found element is                    // already present in result array or                    // not.                    if (result[x] == array1[i]) {                        flag++;                    }                }                               // If we found a new element which is common                // in both arrays then store it in result                // array and print it.                if (flag == 0) {                                       result[k] = array1[i];                    printf(""%d "", result[k]);                    k++;                }            }        }    }}"
56,"// C program to copy all the elements// of one array to another#include <stdio.h>  int main(){      int a[5] = { 3, 6, 9, 2, 5 }, n = 5;    int b[n], i;      // copying elements from one array to another    for (i = 0; i < n; i++) {        b[i] = a[i];    }    // displaying first array before    // copy the elements from    // one array to other    printf(""The first array is :"");    for (i = 0; i < n; i++) {        printf(""%d "", a[i]);    }    // displaying array after copy    // the elements from one    // array to other    printf(""\nThe second array is :"");    for (i = 0; i < n; i++) {        printf(""%d "", b[i]);    }    return 0;}"
57,"// C program to sort 2D array row-wise#include <stdio.h>  // This function sort 2D array row-wisevoid sortRowWise(int m[][4], int r, int c){    int t = 0;        // loop for rows of 2d array    for (int i = 0; i < r; i++) {                // loop for column of 2d array        for (int j = 0; j < c; j++) {                        // loop for comparison and swapping the elements            for (int k = 0; k < c - j - 1; k++) {                                if (m[i][k] > m[i][k + 1]) {                                        // swap the elements                    t = m[i][k];                    m[i][k] = m[i][k + 1];                    m[i][k + 1] = t;                }            }        }    }      // print the sorted matrix    printf(""\n Row-Wise Sorted 2D Array \n"");    for (int i = 0; i < r; i++) {        for (int j = 0; j < c; j++)            printf("" %d"", m[i][j]);        printf(""\n"");    }}  // Driver codeint main(){    // Input Array    int arr[][4] = { { 8, 5, 7, 2 },                     { 7, 3, 0, 1 },                     { 8, 5, 3, 2 },                     { 9, 4, 2, 1 } };      // print input array    printf(""\n Input Array \n"");    for (int i = 0; i < 4; i++) {        for (int j = 0; j < 4; j++) {            printf("" %d"", arr[i][j]);        }        printf(""\n"");    }      // sortRowWise(arr, 4, 4) accepts 2D-array, no of rows    // and columns as input and print a row-wise sorted 2D    // array    sortRowWise(arr, 4, 4);    return 0;}"
58,"// C Program to check if two matrices are equals or not#include <stdio.h>#define N 4 // Macros  // This function returns 1 if A[][] and B[][] are equal// otherwise it returns 0int areSame(int A[][N], int B[][N]){    int i, j;    for (i = 0; i < N; i++)        for (j = 0; j < N; j++)            if (A[i][j] != B[i][j])                return 0;    return 1;}  // driver codeint main(){      // create two matrices    int A[N][N] = { { 1, 2, 3, 4 },                    { 1, 2, 3, 4 },                    { 1, 2, 3, 4 },                    { 1, 2, 3, 4 } };      int B[N][N] = { { 1, 2, 3, 4 },                    { 1, 2, 3, 4 },                    { 1, 2, 3, 4 },                    { 1, 2, 3, 4 } };      // Display first matrix    printf(""\n First Matrix \n"");    for (int i = 0; i < N; i++) {        for (int j = 0; j < N; j++) {            printf("" %d"", A[i][j]);        }        printf(""\n"");    }      // Display second matrix    printf(""\n Second Matrix \n"");    for (int i = 0; i < N; i++) {        for (int j = 0; j < N; j++) {            printf("" %d"", B[i][j]);        }        printf(""\n"");    }      // check if Matrices are equals or not    // areSame(A, B) function accept two matrices as input    // and return 1 if matrices are equals otherwise return    // 0    if (areSame(A, B))        printf(""\n Matrices are equal"");    else        printf(""\n Matrices are not equal"");    return 0;}"
59,"// C Program to find// transpose of a matrix#include <stdio.h>#define N 4 // This function stores transpose of A[][] in B[][]void transpose(int A[][N], int B[][N]){    int i, j;    for (i = 0; i < N; i++)        for (j = 0; j < N; j++)            B[i][j] = A[j][i];} int main(){    int A[N][N] = { {1, 1, 1, 1},                    {2, 2, 2, 2},                    {3, 3, 3, 3},                    {4, 4, 4, 4}};     int B[N][N], i, j;     transpose(A, B);     printf(""Result matrix is \n"");    for (i = 0; i < N; i++)    {        for (j = 0; j < N; j++)        printf(""%d "", B[i][j]);        printf(""\n"");    }     return 0;}"
60,"// C program to find Determinant// of a matrix#include <stdio.h> // Dimension of input square matrix#define N 4 // Function to get cofactor of mat[p][q]// in temp[][]. n is current dimension// of mat[][]void getCofactor(int mat[N][N], int temp[N][N],                 int p, int q, int n){    int i = 0, j = 0;     // Looping for each element of the matrix    for (int row = 0; row < n; row++)    {        for (int col = 0; col < n; col++)        {            // Copying into temporary matrix            // only those element which are            // not in given row and column            if (row != p && col != q)            {                temp[i][j++] = mat[row][col];                 // Row is filled, so increase row                // index and reset col index                if (j == n - 1)                {                    j = 0;                    i++;                }            }        }    }} /* Recursive function for finding the   determinant of matrix. n is current   dimension of mat[][]. */int determinantOfMatrix(int mat[N][N], int n){    // Initialize result    int D = 0;     //  Base case : if matrix contains    // single element    if (n == 1)        return mat[0][0];     // To store cofactors    int temp[N][N];     // To store sign multiplier    int sign = 1;     // Iterate for each element of    // first row    for (int f = 0; f < n; f++)    {        // Getting Cofactor of mat[0][f]        getCofactor(mat, temp, 0, f, n);        D += sign * mat[0][f]             * determinantOfMatrix(temp, n - 1);         // Terms are to be added with alternate sign        sign = -sign;    }     return D;} // Function for displaying the matrixvoid display(int mat[N][N],             int row, int col){    for (int i = 0; i < row; i++)    {        for (int j = 0; j < col; j++)            printf(""  %d"", mat[i][j]);        printf(""n"");    }} // Driver codeint main(){    int mat[N][N] = {{1, 0, 2, -1},                     {3, 0, 0, 5},                     {2, 1, 4, -3},                      {1, 0, 5, 0}};     // Function call    printf(""Determinant of the matrix is : %d"",            determinantOfMatrix(mat, N));    return 0;}"
61,"// C program to find trace // and normal of given matrix#include <math.h>#include <stdio.h>  // Returns Normal of a matrix // of size n x nint findNormal(int mat[][3],                int n){    int sum = 0;        // Run nested loop to access     // elements of matrix    for (int i = 0; i < n; i++)        for (int j = 0; j < n; j++)            sum += mat[i][j] * mat[i][j];    return sqrt(sum);}  // Returns trace of a matrix of // size n x nint findTrace(int mat[][3], int n){    int sum = 0;        // Run a loop to access diagonal     // elements of matrix    for (int i = 0; i < n; i++)        sum += mat[i][i];    return sum;}  // Driven codeint main(){    int mat[3][3] = {{1, 2, 3},                      {4, 5, 6},                      {7, 8, 9}};    printf(""Normal of Matrix = %d"",             findNormal(mat, 3));    printf(""\nTrace of Matrix = %d"",             findTrace(mat, 3));    return 0;}"
62,"// C program to implement// the above approach#include <stdio.h>#define N 4  // This function adds A[][] and B[][], // and stores the result in C[][]void add(int A[][N], int B[][N],          int C[][N]){    int i, j;    for (i = 0; i < N; i++)        for (j = 0; j < N; j++)            C[i][j] = A[i][j] + B[i][j];}  // Driver codeint main(){    int A[N][N] = {{1, 1, 1, 1},                   {2, 2, 2, 2},                   {3, 3, 3, 3},                   {4, 4, 4, 4}};      int B[N][N] = {{1, 1, 1, 1},                   {2, 2, 2, 2},                   {3, 3, 3, 3},                   {4, 4, 4, 4}};      // To store result    int C[N][N];     int i, j;    add(A, B, C);      printf(""Result matrix is "");    for (i = 0; i < N; i++)    {        for (j = 0; j < N; j++)           printf(""%d "", C[i][j]);        printf("""");    }      return 0;}"
63,"// C program to multiply two square matrices.#include <stdio.h>#define N 4  // This function multiplies mat1[][] and mat2[][],// and stores the result in res[][]void multiply(int mat1[][N], int mat2[][N], int res[][N]){    int i, j, k;    for (i = 0; i < N; i++) {        for (j = 0; j < N; j++) {            res[i][j] = 0;            for (k = 0; k < N; k++)                res[i][j] += mat1[i][k] * mat2[k][j];        }    }}  int main(){    int mat1[N][N] = { { 1, 1, 1, 1 },                       { 2, 2, 2, 2 },                       { 3, 3, 3, 3 },                       { 4, 4, 4, 4 } };      int mat2[N][N] = { { 1, 1, 1, 1 },                       { 2, 2, 2, 2 },                       { 3, 3, 3, 3 },                       { 4, 4, 4, 4 } };      int res[N][N]; // To store result    int i, j;    multiply(mat1, mat2, res);      printf(""Result matrix is "");    for (i = 0; i < N; i++) {        for (j = 0; j < N; j++)            printf(""%d "", res[i][j]);        printf("""");    }      return 0;}"
64,"// C program to demonstrate the boundary// element of matrix#include <stdio.h> // This function is display the Boundary of matrixvoid printBoundary(int mat[][4], int m, int n){    printf(""\n Boundary of Matrix \n"");    for (int i = 0; i < m; i++) {        for (int j = 0; j < n; j++) {            if (i == 0 || j == 0 || i == n - 1                || j == n - 1)                printf("" %d"", mat[i][j]);            else                printf(""  "");        }        printf(""\n"");    }} // Driver codeint main(){    int mat[4][4] = { { 1, 2, 3, 4 },                      { 1, 2, 3, 4 },                      { 1, 2, 3, 4 },                      { 1, 2, 3, 4 } };     printf(""\n Input Matrix \n"");    for (int i = 0; i < 4; i++) {        for (int j = 0; j < 4; j++) {            printf("" %d"", mat[i][j]);        }        printf("" \n"");    }     // printBoundary(a, 4, 4) function accepts a matrix, no    // of rows and columns as input and display boundaries of    // matrix    printBoundary(mat, 4, 4);    return 0;}"
65,"// C program to demonstrate// rotation of a matrix elements#include <stdio.h>  #define R 4 // macros#define C 4 // macros  // function to rotate a matrix mat[][] of size m x n.// m = Row and n = Columnvoid rotatematrix(int m, int n, int mat[R][C]){    int row = 0, col = 0;    int prev, curr;    /*    row: Starting row index    m: ending row index    col: starting column index    n: ending column index    i: iterator    */      while (row < m && col < n) {          if (row + 1 == m || col + 1 == n)            break;          // Store the first element of next row and this        // element will replace the first element of current        // row        prev = mat[row + 1][col];          // Move elements of first row from remaining rows        for (int i = col; i < n; i++) {            curr = mat[row][i];            mat[row][i] = prev;            prev = curr;        }        row++;          // Move the elements of last column from the        // remaining columns        for (int i = row; i < m; i++) {            curr = mat[i][n - 1];            mat[i][n - 1] = prev;            prev = curr;        }        n--;          // Move the elements of last row from the remaining        // rows        if (row < m) {            for (int i = n - 1; i >= col; i--) {                curr = mat[m - 1][i];                mat[m - 1][i] = prev;                prev = curr;            }        }        m--;          // Move the elements of first column from the        // remaining rows        if (col < n) {            for (int i = m - 1; i >= row; i--) {                curr = mat[i][col];                mat[i][col] = prev;                prev = curr;            }        }        col++;    }}  // Driver codeint main(){    // create a matrix of size RxC    // R - Rows, C - Columns    int mat[R][C] = { { 1, 2, 3, 4 },                      { 5, 6, 7, 8 },                      { 9, 10, 11, 12 },                      { 13, 14, 15, 16 } };      // Print input matrix    printf(""\n Input Matrix \n"");    for (int i = 0; i < R; i++) {        for (int j = 0; j < C; j++) {            printf("" %d "", mat[i][j]);        }        printf(""\n"");    }      // This function is rotate the elements of matrix.    rotatematrix(R, C, mat);      // Print rotated matrix    printf(""\n Rotated Matrix \n"");    for (int i = 0; i < R; i++) {        for (int j = 0; j < C; j++) {            printf("" %d "", mat[i][j]);        }        printf(""\n"");    }      return 0;}"
66,"// C Program to demonstrate the// Sum of Diagonals of a Matrix#include <stdio.h>  int main(){      int i, j, m = 3, n = 3, a = 0, sum = 0;        // input matrix    int matrix[3][3]        = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };        // if both rows and columns are equal then it is    // possible to calculate diagonal sum    if (m == n) {                // printing the input matrix        printf(""The matrix is \n"");                // iterates number of rows        for (i = 0; i < m; ++i) {                        // iterates number of columns            for (j = 0; j < n; ++j) {                printf("" %d"", matrix[i][j]);            }            printf(""\n"");        }        for (i = 0; i < m; ++i) {                        // calculating the main diagonal sum            sum = sum + matrix[i][i];                        // calculating the off diagonal sum            a = a + matrix[i][m - i - 1];        }                // printing the result        printf(""\nMain diagonal elements sum is = %d\n"", sum);        printf(""Off-diagonal elements sum is = %d\n"", a);    }    else        // if both rows and columns are not equal then it is        // not possible to calculate the sum        printf(""not a square matrix\n"");    return 0;}"
67,"// C program interchange the elements// of first and last in a matrix// across rows.#include <stdio.h> #define n 3 // Function to swap the element// of first and last rowvoid interchangeFirstLast(int m[][n]){    int rows = n;     // Swapping of element between first    // and last rows    for (int i = 0; i < n; i++)    {        int t = m[0][i];        m[0][i] = m[rows - 1][i];        m[rows - 1][i] = t;    }} // Driver codeint main(){    // Input matrix    int m[n][n] = {{6, 3, 1},                   {4, 5, 2},                   {2, 4, 9}};     // Printing the input matrix    printf(""Input Matrix: \n"");    for (int i = 0; i < n; i++)    {        for (int j = 0; j < n; j++)        {            printf(""%d "", m[i][j]);        }        printf(""\n"");    }     // call interchangeFirstLast(m) function.    // This function swap the element of    // first and last row    interchangeFirstLast(m);     // Printing the original matrix    printf(""\nOutput Matrix: \n"");    for (int i = 0; i < n; i++)    {        for (int j = 0; j < n; j++)        {            printf(""%d "", m[i][j]);        }        printf(""\n"");    }}"
68,"// C program to swap the element of first and last column of// the matrix and display the result#include <stdio.h>#define n 3 // macros  void interchangeFirstLast(int mat[][n]){    // swap the elements between first and last columns    for (int i = 0; i < n; i++) {        int t = mat[i][0];        mat[i][0] = mat[i][n - 1];        mat[i][n - 1] = t;    }}  // Driver codeint main(){    // input matrix    int mat[n][n]        = { { 2, 4, 6 }, { 8, 2, 3 }, { 1, 9, 4 } };      // print input matrix    printf(""Input Matrix: \n"");    for (int i = 0; i < n; i++) {        for (int j = 0; j < n; j++) {            printf(""%d "", mat[i][j]);        }        printf(""\n"");    }      // call interchangeFirstLast(mat) function.    // This function swap the element of first and last    // columns.      interchangeFirstLast(mat);      // print output matrix    printf(""Output Matrix: \n"");    for (int i = 0; i < n; i++) {        for (int j = 0; j < n; j++) {            printf(""%d "", mat[i][j]);        }        printf(""\n"");    }}"
69,"#include <iostream>#include <string> using namespace std; int main() {    string str1 = ""Geeks"";    string str2 = ""ForGeeks"";    string result = str1 + str2;    cout << result << endl;    return 0;}"
70,"// C Program to Add 2 Binary Strings// and Print their Binary Sum#include <stdio.h>#include <string.h> // Function to add two Binary Stringsvoid sum(char b1[], char b2[], int l1, int l2){    int carry = 0, temp, num1, num2, i;    char result[100];     result[l1 + 1] = '\0';     // This loop will add Both Strings till    // second have characters in it.    while (l2 > 0) {        num1 = b1[l1 - 1] - '0';        num2 = b2[l2 - 1] - '0';        temp = num1 + num2 + carry;        if (temp >= 2) {            carry = 1;            temp = temp % 2;        }        result[l1] = temp + '0';        l1--;        l2--;    }     // This loop will add leftover    // characters of first Strings.    while (l1 - 1 >= 0) {        temp = b1[l1 - 1] + carry - '0';        if (temp >= 2) {            carry = 1;            temp = temp % 2;        }        result[l1] = temp + '0';        l1--;    }     // Add last carry to result string    if (carry) {        result[0] = '1';    }    else {        // if there is no carry then we will shift        // each character by one place in left side.        for (i = 0; i < strlen(result) - 1; i++) {            result[i] = result[i + 1];        }        result[strlen(result) - 1] = '\0';    }     // printing result    printf(""%s + %s = %s\n"", b1, b2, result);} // Driver codeint main(){    char b1[100] = ""11"", b2[100] = ""11"";    int l1, l2;     printf(""Enter binary number 1: "");    printf(""%s \n"", b1);    printf(""Enter binary number 2: "");    printf(""%s \n"", b2);    l1 = strlen(b1);    l2 = strlen(b2);     // calling function to add strings    if (l1 > l2) {        sum(b1, b2, l1, l2);    }    else {        sum(b2, b1, l2, l1);    }     return 0;}"
71,"// Iterative C program to reverse an array#include<stdio.h>  /* Function to reverse arr[] from start to end*/void rvereseArray(int arr[], int start, int end){    int temp;    while (start < end)    {        temp = arr[start];           arr[start] = arr[end];        arr[end] = temp;        start++;        end--;    }   }       /* Utility that prints out an array on a line */void printArray(int arr[], int size){  int i;  for (i=0; i < size; i++)    printf(""%d "", arr[i]);    printf("""");}   /* Driver function to test above functions */int main() {    int arr[] = {1, 2, 3, 4, 5, 6};    int n = sizeof(arr) / sizeof(arr[0]);     printArray(arr, n);    rvereseArray(arr, 0, n-1);    printf(""Reversed array is "");    printArray(arr, n);        return 0;}"
72,"// C program to reverse a string using recursion# include <stdio.h>  /* Function to print reverse of the passed string */void reverse(char *str){   if (*str)   {       reverse(str+1);       printf(""%c"", *str);   }}  /* Driver program to test above function */int main(){   char a[] = ""Geeks for Geeks"";   reverse(a);   return 0;}"
73,"// C program to find the length of string#include <stdio.h>#include <string.h>  int main(){    char Str[1000];    int i;      printf(""Enter the String: "");    scanf(""%s"", Str);      for (i = 0; Str[i] != '\0'; ++i);      printf(""Length of Str is %d"", i);      return 0;}"
74,"// A C Program to check if the given// string is a pangram or not#include <stdbool.h>#include <stdio.h>#include <string.h>  // Returns true if the string is pangram else falsebool checkPangram(char str[]){    // Create a hash table to mark the characters    // present in the string    bool mark[26];    for (int i = 0; i < 26; i++)        mark[i] = false;      // For indexing in mark[]    int index;      // Traverse all characters    size_t size = strlen(str);    for (int i = 0; i < size; i++) {          // If uppercase character, subtract 'A'        // to find index.        if ('A' <= str[i] && str[i] <= 'Z')            index = str[i] - 'A';          // If lowercase character, subtract 'a'        // to find index.        else if ('a' <= str[i] && str[i] <= 'z')            index = str[i] - 'a';          // If this character is other than english        // lowercase and uppercase characters.        else            continue;          mark[index] = true;    }      // Return false if any character is unmarked    for (int i = 0; i <= 25; i++)        if (mark[i] == false)            return (false);      // If all characters were present    return (true);}  // Driver Program to test above functionsint main(){    char str[]        = ""The quick brown fox jumps over the lazy dog"";    if (checkPangram(str) == true)        printf("" %s is a pangram"", str);    else        printf("" %s is not a pangram"", str);    return (0);}  // This code is contributed by Aditya kumar (adityakumar129)"
75,"// C Program to demonstrate Printing// of the first letter of each word#include <stdio.h>#include <string.h>  int main(){    char str[] = ""GeeksforGeeks, A computer science portal ""                 ""for geeks"";    int i, j = 0;      // Traversing the Character array    for (i = 0; i < strlen(str); i++) {          // To store first character of        // String if it is not a        // whitespace.        if (i == 0 && str[i] != ' ') {            printf(""%c "", str[i]);        }        // To check whether Character        // is first character of        // word and if yes store it.        else if (i > 0 && str[i - 1] == ' ') {            printf(""%c "", str[i]);        }    }    return 0;}"
76,TypesStarting ValueEnding ValueUppercase Alphabets6590Lowercase Alphabets97122
77,"// C Program to Remove leading zeros// using for loop#include <stdio.h>#include <string.h>int main(){    // input    char a[1000] = ""0001234"";    int i, c = -1;        // finding the all leading zeroes from the given string    // and removing it from the string    for (i = 0; i < strlen(a); i++) {        if (a[i] != '0') {            c = i;            break;        }    }    // printing the string again after removing the all    // zeros    for (i = c; i < strlen(a); i++) {        printf(""%c"", a[i]);    }    return 0;}"
78,"// C program to compare the two strings// without using strcmp() function#include <stdio.h> // Function that compares the two stringvoid compareStrings(char* x, char* y){    int flag = 0;     // Iterate a loop till the end    // of both the strings    while (*x != '\0' || *y != '\0') {        if (*x == *y) {            x++;            y++;        }         // If two characters are not same        // print the difference and exit        else if ((*x == '\0' && *y != '\0')                 || (*x != '\0' && *y == '\0')                 || *x != *y) {            flag = 1;            printf(""Unequal Strings\n"");            break;        }    }     // If two strings are exactly same    if (flag == 0) {        printf(""Equal Strings\n"");    }} // Driver Codeint main(void){    // Given strings s1 and s2    char s1[20] = ""python"";    char s2[20] = ""dsa"";     // Function Call    compareStrings(s1, s2);    return 0;}"
79,"// C program to demonstrate arranging// strings lexicographically#include <stdio.h>  void compareStrings(char* s1, char* s2){    int i;    // comparing each character    for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++) {        if (s1[i] > s2[i]) {            printf(""String 1 is lexicographically greater ""                   ""than string 2"");            return;        }        else if (s2[i] > s1[i]) {            printf(""String 2 is lexicographically greater ""                   ""than string 1"");            return;        }    }    // comparing length of two strings    if (s1[i] != '\0') {        printf(""String 1 is lexicographically greater than ""               ""string 2"");    }    else if (s2[i] != '\0') {        printf(""String 2 is lexicographically greater than ""               ""string 1"");    }    else {        printf(""Both strings are lexicographically equal"");    }}int main(){      // declaring two strings    char s1[20] = ""help"";    char s2[20] = ""held"";      // function call    compareStrings(s1, s2);    return 0;}"
80,"#include <iostream>#include <string> using namespace std; int main() {    string str1 = ""Geeks"";    string str2 = ""ForGeeks"";    string result = str1 + str2;    cout << result << endl;    return 0;}"
81,"// C program for splitting a string// using strtok()#include <stdio.h>#include <string.h>  int main(){    char str[] = ""Geeks-for-Geeks"";      // Returns first token    char* token = strtok(str, ""-"");      // Keep printing tokens while one of the    // delimiters present in str[].    while (token != NULL) {        printf(""%s"", token);        token = strtok(NULL, ""-"");    }      return 0;}"
82,"// C program to convert decimal// number to octal number#include <stdio.h>  // function to convert decimal to octalvoid decToOctal(int n){      // array to store octal number    int octalNum[100];      // counter for octal number array    int i = 0;    while (n != 0) {          // storing remainder in octal array        octalNum[i] = n % 8;        n = n / 8;        i++;    }      // printing octal number array in reverse order    for (int j = i - 1; j >= 0; j--)        printf(""%d"", octalNum[j]);}  // Driver Codeint main(){    int n = 33;      // Function Call    decToOctal(n);      return 0;}"
83,"// C program to convert binary to decimal#include <stdio.h>  // Function to convert binary to decimalint binaryToDecimal(int n){    int num = n;    int dec_value = 0;      // Initializing base value to 1, i.e 2^0    int base = 1;      int temp = num;    while (temp) {        int last_digit = temp % 10;        temp = temp / 10;          dec_value += last_digit * base;          base = base * 2;    }      return dec_value;}  // Driver program to test above functionint main(){    int num = 10101001;      printf(""%d"", binaryToDecimal(num));}"
84,"// C program for the above approach#include <stdio.h>#include <stdlib.h>  // Function to find the largest element// using dynamic memory allocationvoid findLargest(int* arr, int N){    int i;      // Traverse the array arr[]    for (i = 1; i < N; i++) {          // Update the largest element        if (*arr < *(arr + i)) {            *arr = *(arr + i);        }    }      // Print the largest number    printf(""%d "", *arr);}  // Driver Codeint main(){    int i, N = 4;      int* arr;      // Memory allocation to arr    arr = (int*)calloc(N, sizeof(int));      // Condition for no memory    // allocation    if (arr == NULL) {        printf(""No memory allocated"");        exit(0);    }      // Store the elements    *(arr + 0) = 14;    *(arr + 1) = 12;    *(arr + 2) = 19;    *(arr + 3) = 20;      // Function Call    findLargest(arr, N);    return 0;}"
85,"#include <stdio.h>   // Function to sort the numbers using pointers void sort(int n, int* ptr) {     int i, j, t;       // Sort the numbers using pointers     for (i = 0; i < n; i++) {           for (j = i + 1; j < n; j++) {               if (*(ptr + j) < *(ptr + i)) {                   t = *(ptr + i);                 *(ptr + i) = *(ptr + j);                 *(ptr + j) = t;             }         }     }       // print the numbers     for (i = 0; i < n; i++)         printf(""%d "", *(ptr + i)); }   // Driver code int main() {     int n = 5;     int arr[] = { 0, 23, 14, 12, 9 };       sort(n, arr);       return 0; } "
86,"// C program for the above approach#include <stdio.h>#include <stdlib.h>  // Node for linked liststruct Node {    int data;    struct Node* next;};  // Function to print given linked listvoid printList(struct Node* head){    struct Node* ptr = head;    while (ptr) {          printf(""%d -> "", ptr->data);        ptr = ptr->next;    }      printf(""NULL"");}  // Function to create a new nodevoid insert(struct Node** head_ref, int data){    // Allocate the memory for new Node    // in the heap and set its data    struct Node* newNode        = (struct Node*)malloc(            sizeof(struct Node));      newNode->data = data;      // Set the next node pointer of the    // new Node to point to the current    // node of the list    newNode->next = *head_ref;      // Change the pointer of head to point    // to the new Node    *head_ref = newNode;}  // Function to create a copy of a linked liststruct Node* copyList(struct Node* head){    if (head == NULL) {        return NULL;    }    else {          // Allocate the memory for new Node        // in the heap and set its data        struct Node* newNode            = (struct Node*)malloc(                sizeof(struct Node));          newNode->data = head->data;          // Recursively set the next pointer of        // the new Node by recurring for the        // remaining nodes        newNode->next = copyList(head->next);          return newNode;    }}  // Function to create the new linked liststruct Node* create(int arr[], int N){    // Pointer to point the head node    // of the singly linked list    struct Node* head_ref = NULL;      // Construct the linked list    for (int i = N - 1; i >= 0; i--) {          insert(&head_ref, arr[i]);    }      // Return the head pointer    return head_ref;}  // Function to create both the listsvoid printLists(struct Node* head_ref,                struct Node* dup){      printf(""Original list: "");      // Print the original linked list    printList(head_ref);      printf(""\nDuplicate list: "");      // Print the duplicate linked list    printList(dup);}  // Driver Codeint main(void){    // Given nodes value    int arr[] = { 1, 2, 3, 4, 5 };    int N = sizeof(arr) / sizeof(arr[0]);      // Head of the original Linked list    struct Node* head_ref = create(arr, N);      // Head of the duplicate Linked List    struct Node* dup = copyList(head_ref);      printLists(head_ref, dup);      return 0;}"
87,"// C Program to Store Information// of Students Using Structure  #include <stdio.h>#include <stdlib.h>#include <string.h>  // Create the student structurestruct Student {    char* name;    int roll_number;    int age;    double total_marks;};  // Driver codeint main(){    int i = 0, n = 5;      // Create the student's structure variable    // with n Student's records    struct Student student[n];      // Get the students data    student[0].roll_number = 1;    student[0].name = ""Geeks1"";    student[0].age = 12;    student[0].total_marks = 78.50;      student[1].roll_number = 5;    student[1].name = ""Geeks5"";    student[1].age = 10;    student[1].total_marks = 56.84;      student[2].roll_number = 2;    student[2].name = ""Geeks2"";    student[2].age = 11;    student[2].total_marks = 87.94;      student[3].roll_number = 4;    student[3].name = ""Geeks4"";    student[3].age = 12;    student[3].total_marks = 89.78;      student[4].roll_number = 3;    student[4].name = ""Geeks3"";    student[4].age = 13;    student[4].total_marks = 78.55;      // Print the Students information    printf(""Student Records:\n\n"");    for (i = 0; i < n; i++) {        printf(""\tName = %s\n"", student[i].name);        printf(""\tRoll Number = %d\n"", student[i].roll_number);        printf(""\tAge = %d\n"", student[i].age);        printf(""\tTotal Marks = %0.2f\n\n"", student[i].total_marks);    }      return 0;}"
88,"// C program to read Student records// like id, name and age,// and display them in sorted order by Name  #include <stdio.h>#include <stdlib.h>#include <string.h>  // struct person with 3 fieldsstruct Student {    char* name;    int id;    char age;};  // setting up rules for comparison// to sort the students based on namesint comparator(const void* p, const void* q){    return strcmp(((struct Student*)p)->name,                  ((struct Student*)q)->name);}  // Driver programint main(){    int i = 0, n = 5;      struct Student arr[n];      // Get the students data    arr[0].id = 1;    arr[0].name = ""bd"";    arr[0].age = 12;      arr[1].id = 2;    arr[1].name = ""ba"";    arr[1].age = 10;      arr[2].id = 3;    arr[2].name = ""bc"";    arr[2].age = 8;      arr[3].id = 4;    arr[3].name = ""aaz"";    arr[3].age = 9;      arr[4].id = 5;    arr[4].name = ""az"";    arr[4].age = 10;      // Print the Unsorted Structure    printf(""Unsorted Student Records:\n"");    for (i = 0; i < n; i++) {        printf(""Id = %d, Name = %s, Age = %d \n"",               arr[i].id, arr[i].name, arr[i].age);    }    // Sort the structure    // based on the specified comparator    qsort(arr, n, sizeof(struct Student), comparator);      // Print the Sorted Structure    printf(""\n\nStudent Records sorted by Name:\n"");    for (i = 0; i < n; i++) {        printf(""Id = %d, Name = %s, Age = %d \n"",               arr[i].id, arr[i].name, arr[i].age);    }      return 0;}"
89,"// C program for the above approach  #include ""stdio.h""  // Struct defined for the inch-feet systemstruct InchFeet {      // Variable to store the inch-feet    int feet;    float inch;};  // Function to find the sum of all N// set of Inch Feet distancesvoid findSum(struct InchFeet arr[], int N){      // Variable to store sum    int feet_sum = 0;    float inch_sum = 0.0;      int x;      // Traverse the InchFeet array    for (int i = 0; i < N; i++) {          // Find the total sum of        // feet and inch        feet_sum += arr[i].feet;        inch_sum += arr[i].inch;    }      // If inch sum is greater than 11    // convert it into feet    // as 1 feet = 12 inch    if (inch_sum >= 12) {          // Find integral part of inch_sum        x = (int)inch_sum;          // Delete the integral part x        inch_sum -= x;          // Add x%12 to inch_sum        inch_sum += x % 12;          // Add x/12 to feet_sum        feet_sum += x / 12;    }      // Print the corresponding sum of    // feet_sum and inch_sum    printf(""Feet Sum: %d"", feet_sum);    printf(""Inch Sum: %.2f"", inch_sum);}  // Driver Codeint main(){      // Given set of inch-feet    struct InchFeet arr[]        = { { 10, 3.7 },            { 10, 5.5 },            { 6, 8.0 } };      int N = sizeof(arr) / sizeof(arr[0]);      // Function Call    findSum(arr, N);      return 0;}"
90,"// C program to demonstrate// addition of complex numbers#include <stdio.h> // define a structure for complex numbertypedef struct complexNumber {    int real;    int img;} complex; // complex add(complex x, complex y) function C Program to// Add Two Complex numbers. This function accepts two// complex type numbers as parameter as return addition of// them.complex add(complex x, complex y); // driver codeint main(){     // define three complex type numbers    complex a, b, sum;     // first complex number    a.real = 2;    a.img = 3;     // second complex number    b.real = 4;    b.img = 5;     // print first complex number    printf(""\n a = %d + %di"", a.real, a.img);     // print second complex number    printf(""\n b = %d + %di"", b.real, b.img);     // call add(a,b) function and    // pass complex numbers a & b    // as an parameter.    sum = add(a, b);     // print result    printf(""\n sum = %d + %di"", sum.real, sum.img);     return 0;} // complex add(complex x, complex y)// function definitioncomplex add(complex x, complex y){     // define a new complex number.    complex add;     // add real part of a&b    add.real = x.real + y.real;     // add Imaginary part of a&b    add.img = x.img + y.img;     // return add    return (add);}"
91,"// C program to append the contents of// source file to the destination file// including header files#include <stdio.h> // Function that appends the contentsvoid appendFiles(char source[],                 char destination[]){    // declaring file pointers    FILE *fp1, *fp2;     // opening files    fp1 = fopen(source, ""a+"");    fp2 = fopen(destination, ""a+"");     // If file is not found then return.    if (!fp1 && !fp2) {        printf(""Unable to open/""               ""detect file(s)\n"");        return;    }     char buf[100];     // explicitly writing ""\n""    // to the destination file    // so to enhance readability.    fprintf(fp2, ""\n"");     // writing the contents of    // source file to destination file.    while (!feof(fp1)) {        fgets(buf, sizeof(buf), fp1);        fprintf(fp2, ""%s"", buf);    }     rewind(fp2);     // printing contents of    // destination file to stdout.    while (!feof(fp2)) {        fgets(buf, sizeof(buf), fp2);        printf(""%s"", buf);    }} // Driver Codeint main(){    char source[] = ""file1.txt"",         destination[] = ""file2.txt"";     // calling Function with file names.    appendFiles(source, destination);     return 0;}"
92,"// C program to read and print// all files in a zip file// uses library libzip#include <stdlib.h>#include <zip.h>  // this is run from the command line with the zip file// passed in example usage: ./program zipfile.zipint main(int argc, char* argv[]){    // if more or less than 2    // command line arguments,    // program ends    if (argc > 2 || argc < 2)        return -1;      // if the file provided can't    // be opened/read, program    // ends    if (!fopen(argv[1], ""r""))        return -2;      // stores error codes for libzip functions    int errorp = 0;      // initializes a pointer to a zip archive    zip_t* arch = NULL;      // sets that pointer to the    // zip file from argv[1]    arch = zip_open(argv[1], 0, &errorp);      // the zip_stat structure    // contains information such as    // file name, size, comp size      struct zip_stat* finfo = NULL;      // must be allocated enough space    // (not exact space here)    finfo = calloc(256, sizeof(int));      // ""initializes"" the structure    // according to documentation      zip_stat_init(finfo);      // initialize file descriptor for    // zip files inside archive    zip_file_t* fd = NULL;      // initialize string pointer for    // reading from fd    char* txt = NULL;      // count = index of file archive   0 =    // first file      int count = 0;      // we open the file at the count'th index inside the    // archive we loop and print every file and its    // contents, stopping when zip_stat_index did not return    // 0, which means the count index is more than # of    // files    while ((zip_stat_index(arch, count, 0, finfo)) == 0) {          // allocate room for the entire file contents        txt = calloc(finfo->size + 1, sizeof(char));        fd = zip_fopen_index(            arch, count, 0); // opens file at count index                             // reads from fd finfo->size                             // bytes into txt buffer        zip_fread(fd, txt, finfo->size);          printf(""file #%i: %s\n\n"", count + 1,               finfo->name); // prints filename        printf(""%s\n\n"",               txt); // prints entire file contents          // frees allocated buffer, will        // reallocate on next iteration of loop        free(txt);          // increase index by 1 and the loop will        // stop when files are not found        count++;    }    return 0;}"
93,"// C program to print the month by month // calendar for the given year   #include <stdio.h>   // Function that returns the index of the // day for date DD/MM/YYYY int dayNumber(int day, int month, int year) {       static int t[] = { 0, 3, 2, 5, 0, 3,                     5, 1, 4, 6, 2, 4 };     year -= month < 3;     return (year + year / 4             - year / 100             + year / 400             + t[month - 1] + day)         % 7; }   // Function that returns the name of the // month for the given month Number // January - 0, February - 1 and so on char* getMonthName(int monthNumber) {     char* month;       switch (monthNumber) {     case 0:         month = ""January"";         break;     case 1:         month = ""February"";         break;     case 2:         month = ""March"";         break;     case 3:         month = ""April"";         break;     case 4:         month = ""May"";         break;     case 5:         month = ""June"";         break;     case 6:         month = ""July"";         break;     case 7:         month = ""August"";         break;     case 8:         month = ""September"";         break;     case 9:         month = ""October"";         break;     case 10:         month = ""November"";         break;     case 11:         month = ""December"";         break;     }     return month; }   // Function to return the number of days // in a month int numberOfDays(int monthNumber, int year) {     // January     if (monthNumber == 0)         return (31);       // February     if (monthNumber == 1) {         // If the year is leap then Feb         // has 29 days         if (year % 400 == 0             || (year % 4 == 0                 && year % 100 != 0))             return (29);         else            return (28);     }       // March     if (monthNumber == 2)         return (31);       // April     if (monthNumber == 3)         return (30);       // May     if (monthNumber == 4)         return (31);       // June     if (monthNumber == 5)         return (30);       // July     if (monthNumber == 6)         return (31);       // August     if (monthNumber == 7)         return (31);       // September     if (monthNumber == 8)         return (30);       // October     if (monthNumber == 9)         return (31);       // November     if (monthNumber == 10)         return (30);       // December     if (monthNumber == 11)         return (31); }   // Function to print the calendar of // the given year void printCalendar(int year) {     printf(""     Calendar - %d\n\n"", year);     int days;       // Index of the day from 0 to 6     int current = dayNumber(1, 1, year);       // i for Iterate through months     // j for Iterate through days     // of the month - i     for (int i = 0; i < 12; i++) {         days = numberOfDays(i, year);           // Print the current month name         printf(""\n ------------%s-------------\n"",             getMonthName(i));           // Print the columns         printf("" Sun Mon Tue Wed Thu Fri Sat\n"");           // Print appropriate spaces         int k;         for (k = 0; k < current; k++)             printf(""     "");           for (int j = 1; j <= days; j++) {             printf(""%5d"", j);               if (++k > 6) {                 k = 0;                 printf(""\n"");             }         }           if (k)             printf(""\n"");           current = k;     }       return; }   // Driver Code int main() {     int year = 2016;       // Function Call     printCalendar(year);     return 0; } "
94,"// C program for above approach#include <stdio.h>#include <string.h> // Function to find the maximum// time possible by replacing// each '_' with any digitchar* maximumTime(char s[]){    // If the first character is '_'    if (s[0] == '_') {         // If s[1] is '_' or        // s[1] is less than 4        if ((s[1] == '_') || (s[1] >= '0' && s[1] < '4')) {             // Update s[0] as 2            s[0] = '2';        }        else { // Otherwise, update s[0] = 1            s[0] = '1';        }    }     // If s[1] is equal to '_'    if (s[1] == '_') {         // If s[0] is equal to '2'        if (s[0] == '2') {            s[1] = '3';        }      // otherwise        else {            s[1] = '9';        }    }     // If S[3] is equal to '_'     if (s[3] == '_') {         s[3] = '5';    }     // If s[4] is equal to '_'     if (s[4] == '_') {         s[4] = '9';    }     return s; // Return the modified string}int main(){    char S[] = ""0_:4_"";    printf(""%s"", maximumTime(S));    return 0;} // This code is contributed by Tapesh (tapeshdua420)"
95,"// C program to demonstrate// an invalid memory access error#include <stdio.h>int a[5];int main(){    int s = a[-11];    printf(""%d"", s);    return 0;}"
96,"// C program to demonstrate// a syntax error due to// missing semi colon#include <stdio.h> // Driver codeint main(){  // missing semicolon  printf(""Geeks for geeks!"")  return 0;}"
97,"// C program to demonstrate // unreachable code error#include <stdio.h>  // Driver codeint main() {    printf(""geeks for geeks"");     return 0;     printf(""gfg"");}"
98,"// C++ program to find quotient// and remainder of two numbers  #include <iostream>using namespace std;  int main() {  int A, B;      // Ask user to enter the two numbers  cout << ""Enter two numbers A and B: "";    // Read two numbers from the user || A = 17, B = 5  cin >> A >> B;      // Calculate the quotient of A and B using '/' operator  int quotient = A / B;      // Calculate the remainder of A and B using '%' operator  int remainder = A % B;      // Print the result  cout << ""Quotient when A / B is: "" << quotient << endl;  cout << ""Remainder when A / B is: "" << remainder;}  // This code is contributed by sarajadhav12052009"
99,"// C program to print initials// of a name# include <stdio.h> # include <string.h># include <ctype.h>  // Function declarationvoid getInitials(char* name);  // Driver codeint main(void){        // Declare an character array for     // entering names assuming the     // name doesn't exceed 31 characters    char name[50] = ""Geeks for Geeks"";          printf(""Your initials are: "");          // getInitials function prints     // the initials of the given name    getInitials(name);      }  void getInitials(char* name){         int i = 0;           if(strlen(name) > 0 &&         isalpha(name[0]))       printf(""%c "", toupper(name[0]));            while(name[i] != '\0')     {       if(isspace(name[i]) != 0)       {         while(isspace(name[i]) &&                i <= strlen(name))         {           i++ ;                      }         printf(""%c "", toupper(name[i]));       }       i++;     }  printf(""\n"");}"
