class Solution {
public:
   string shortestSuperstring(vector<string>& A) {
      initailize(A);
      const int finalMask = maskSize - 1;
      queue<State> q;
      for (int i = 0; i < n; i++)
         q.push(State{ 1 << i, i });

      while (!q.empty()) {
         auto[mask, last] = q.front(); q.pop();
         for (int i = 0; i < n; i++) {
            int newMask = mask | (1 << i);
            if (newMask == mask) continue;
            int newSave = dp[mask][last] + save[last][i];
            if (newSave <= dp[newMask][i]) continue;
            dp[newMask][i] = newSave;
            vvs[newMask][i] = vvs[mask][last] + sub[last][i];
            if (newMask != finalMask) q.push({ newMask, i });
         }
      }

      int bestSave = 0, bestI = 0;
      for (int i = 0; i < n; i++) {
         if (dp[finalMask][i] > bestSave) {
            bestI = i;
            bestSave = dp[finalMask][i];
         }
      }
      return vvs[finalMask][bestI];
   }

   struct State {
      int mask;
      int last;
   };

   void initailize(const vector<string>& A) {
      vs = move(A);
      n = vs.size();
      maskSize = 1 << n;
      save = vector<vector<int>>(n, vector<int>(n, 0));
      vvs = vector<vector<string>>(maskSize, vector<string>(n));
      dp = vector<vector<int>>(maskSize, vector<int>(n, -1));
      sub = vector<vector<string>>(n, vector<string>(n));

      for (int i = 0; i < n; i++) {
         for (int j = 0; j < i; j++) {
            getIntersaction(i, j);
            getIntersaction(j, i);
         }
      }

      for (int i = 0; i < n; i++) {
         dp[1 << i][i] = 0;
         vvs[1 << i][i] = vs[i];
      }
   }

   void getIntersaction(int i, int j) {
      const string& a = vs[i], b = vs[j];
      int k = a.size() > b.size() ? a.size() - b.size() + 1 : 1;
      for (; k < a.size(); k++) {
         if (b.find(a.substr(k)) == 0) {
            save[i][j] = a.size() - k;
            break;
         }
      }
      sub[i][j] = b.substr(save[i][j]);
   }

   int n;
   int maskSize;
   vector<vector<string>> vvs;
   vector<vector<int>> dp;
   vector<string> vs;
   vector<vector<int>> save;
   vector<vector<string>> sub;
};