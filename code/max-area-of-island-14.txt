int visited[51][51];
int dfs(int** grid, int row, int col, int i, int j)
{
    if (i >= row || i < 0 || j >= col || j < 0)
    {
        return 0;
    }
    if (grid[i][j] == 0 || visited[i][j] == 1)
    {
        return 0;
    }
    visited[i][j]=1;
    return 1+dfs(grid,row,col,i,j+1)+
    dfs(grid,row,col,i,j-1)+
    dfs(grid,row,col,i+1,j)+
    dfs(grid,row,col,i-1,j);
}

int maxAreaOfIsland(int** grid, int gridSize, int* gridColSize){

int i,j;
int temp,max=0;
memset(&visited[0][0],0,sizeof(visited));
for (i=0; i < gridSize; i++)
{
    for (j=0; j < *gridColSize; j++)
    {
        if (visited[i][j]==0&&grid[i][j]!=0)
        {
            temp=0;
            temp=dfs(grid,gridSize,*gridColSize,i,j);
            if (temp > max)
            {
                max=temp;
            }
        }
    }
}
return max;
}