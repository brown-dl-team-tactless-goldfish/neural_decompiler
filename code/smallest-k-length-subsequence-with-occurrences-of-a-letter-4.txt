class Solution {
public:
    string smallestSubsequence(string s, int k, char letter, int repetition) {
        const int S = s.size();
        int next_char[26][S];
        int count_char[S];
        for (int i = 0; i < 26; i++) {
            char c = 'a' + i;
            int index = -1;
            int count = 0;
            for (int j = S - 1; j >= 0; j--) {
                if (s[j] == c) {
                    index = j;
                    count += 1;
                }
                next_char[i][j] = index;
                if (c == letter) {
                    count_char[j] = count;
                }
            }
        }
        char ans[k + 1];
        ans[k] = 0;
        int cur = 0;
        int rem_rep = repetition;
        for (int i = 0; i < k; i++) {
            int rem_k = k - i;
            for (int j = 0; j < 26; j++) {
                char jc = 'a' + j;
                int n = next_char[j][cur];
                if (n != -1 && count_char[n] >= rem_rep && s.size() - n >= rem_k) {
                    if (jc != letter && rem_rep >= rem_k) {
                        continue;
                    }
                    ans[i] = jc;
                    cur = n + 1;
                    if (jc == letter) {
                        rem_rep--;
                    }
                    goto _break;
                }
            }
            _break:;
        }
        return string(ans);
    }
};