int subsetSum(int *nums, int numsSize, int K) {
    int i, k, *dp;
    dp = malloc((K + 1) * sizeof(int));
    memset(dp, 0, (K + 1) * sizeof(int));
    dp[0] = 1;
    for (i = 0; i < numsSize; i++)
        for (k = K - nums[i]; k >= 0; k--)
            dp[k + nums[i]] += dp[k];
    return dp[K];
}

int findTargetSumWays(int* nums, int numsSize, int s){
    int i, sum = 0;
    for (i = 0; i < numsSize; i++) sum += nums[i];
    if (sum < s) return 0;
    if (-sum > s) return 0;
    sum = sum + s;
    if (sum & 1) return 0;
    sum = sum >> 1;
    return subsetSum(nums, numsSize, sum);
}