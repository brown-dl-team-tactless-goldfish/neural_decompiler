bool equationsPossible(char ** equations, int equationsSize){
    // initialize an array to hold all the sets of equal letters. 
	// Initially each element is in its own set (size 1)
    int lettermap[26] = { 0 };
    for ( int i=1; i<26; i++ ) lettermap[i] = i; 
    
	// random variables to be used throughout
    int i1, i2;
	
	// begin by looping over the equations, skipping any with "!="
    for ( int i=0; i<equationsSize; i++ ){
        if ( equations[i][1] == '=' ){
		    // If we find an equation with "==", add the two elements to the same set
            i1 = equations[i][0] - 'a';
            i2 = equations[i][3] - 'a';
            
			// really important here to traverse as far in the set as we can go, 
			// otherwise we can have conflicts
            while(lettermap[i1] != i1) i1 = lettermap[i1];
            while(lettermap[i2] != i2) i2 = lettermap[i2];
			
			// add element to the set
            lettermap[i1] = i2;
        }
    }
    
	// Loop through the set of sets again, standardizing each set to a single value
	// If we imagine each set as a tree, this is like renaming each value to the root value
    for ( int i=0; i< 26; i++ ){
        i1 = i;
        while ( lettermap[i1] != i1 ) i1 = lettermap[i1];
        lettermap[i] = i1;
    }
    
	// Now we just loop over the equations with "!="
	// If any two values in a "!=" equation have the same value in lettermap,
	// then they belong to the same set and therefore we return false (not satisfiable)
    for ( int i=0; i<equationsSize; i++ ){
        if (equations[i][1] == '!'){
            i1 = equations[i][0] - 'a';
            i2 = equations[i][3] - 'a';
            if (lettermap[i1] == lettermap[i2]) return false;
        }
    }

    // otherwise return true
    return true;
}