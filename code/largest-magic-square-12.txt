class Solution {
public:
    int largestMagicSquare(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int ans=1;
        vector<vector<int>>rsum(n,vector<int>(m,0));
        vector<vector<int>>csum(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            rsum[i][0]=grid[i][0];
        }
        for(int i=0;i<m;i++){
            csum[0][i]=grid[0][i];
        }
        
        for(int i=0;i<n;i++){
            for(int j=1;j<m;j++){
                rsum[i][j]=rsum[i][j-1]+grid[i][j];
            }
        }
        
        for(int j=0;j<m;j++){
            for(int i=1;i<n;i++){
                csum[i][j]=csum[i-1][j]+grid[i][j];
            }
        }
        
        if(n<=m){
        
        for(int le=2;le<=min(n,m);le++){
            
            for(int i=0;i<=min(n,m)-le;i++){
                
                for(int j=0;j<=m-le;j++){
                    int len=le-1;
                    int tlx=i,tly=j;
                    
                    int trx=i, tryy=j+len;
                    
                    int blx=i+len, bly=j;
                    
                    int brx=i+len, bry=j+len;
                    
                    set<int>str, stc;
                    for(int k=i;k<=i+len;k++){
                        str.insert(rsum[k][j+len]- (j==0 ? 0:rsum[k][j-1]));
                    }
                    for(int k=j;k<=j+len;k++){
                        stc.insert(csum[i+len][k]- (i==0 ? 0:csum[i-1][k]));
                    }
                    int s1=0,s2=0;
                    for(int u=tlx,v=tly; u<=brx && v<=bry ; u++,v++) s1+=grid[u][v];
                    for(int u=trx,v=tryy; u<=blx && v>=bly ; u++,v--) s2+=grid[u][v];
                    
                    if(str.size()==1 && stc.size()==1 && *str.begin()==s1 && s1==s2 && *stc.begin()==s1){
                        ans=max(ans,le);
                    }
                }
            }
        }
        }
        else{
            for(int le=2;le<=min(n,m);le++){
            
            for(int i=0;i<=n-le;i++){
                
                for(int j=0;j<=min(n,m)-le;j++){
                    int len=le-1;
                    int tlx=i,tly=j;
                    
                    int trx=i, tryy=j+len;
                    
                    int blx=i+len, bly=j;
                    
                    int brx=i+len, bry=j+len;
                    
                    set<int>str, stc;
                    for(int k=i;k<=i+len;k++){
                        str.insert(rsum[k][j+len]- (j==0 ? 0:rsum[k][j-1]));
                    }
                    for(int k=j;k<=j+len;k++){
                        stc.insert(csum[i+len][k]- (i==0 ? 0:csum[i-1][k]));
                    }
                    int s1=0,s2=0;
                    for(int u=tlx,v=tly; u<=brx && v<=bry ; u++,v++) s1+=grid[u][v];
                    for(int u=trx,v=tryy; u<=blx && v>=bly ; u++,v--) s2+=grid[u][v];
                    
                    if(str.size()==1 && stc.size()==1 && *str.begin()==s1 && s1==s2 && *stc.begin()==s1){
                        ans=max(ans,le);
                    }
                }
            }
        }
        }
        return ans;
        
        
    }
};