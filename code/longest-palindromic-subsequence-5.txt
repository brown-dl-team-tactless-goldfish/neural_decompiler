int longestPalindromeSubseq(char * s){
    int n = strlen(s);
    int dp[n][n];
    memset(dp, 0, sizeof(dp)); // initialize dp table to 0
    
    // base case: a single character is a palindrome of length 1
    for (int i = 0; i < n; i++) {
        dp[i][i] = 1;
    }
    
    // fill the dp table diagonally
    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            if (s[i] == s[j]) {
                dp[i][j] = dp[i+1][j-1] + 2; // extend the palindrome by two characters
            } else {
                if (dp[i+1][j] > dp[i][j-1]) {
                    dp[i][j] = dp[i+1][j]; // choose the longer subsequence
                } else {
                    dp[i][j] = dp[i][j-1];
                }
            }
        }
    }
    
    return dp[0][n-1];
}