class Bitset {
public:
    int consider;
    vector<int> st;
    int cnt;
    Bitset(int size) {
        consider = 0;
        st = vector<int> (size);
        cnt = 0;
    }
    
    void fix(int idx) {
        if(consider == 0) {
            if(st[idx] == 0) ++cnt;
            st[idx] = 1;
        }
        else {
            if(st[idx] == 1) ++cnt;
            st[idx] = 0;
        }
    }
    
    void unfix(int idx) {
        if(consider == 0) {
            if(st[idx] == 1) --cnt;
            st[idx] = 0;
        }
        else {
            if(st[idx] == 0) --cnt;
            st[idx] = 1;
        }
    }
    
    void flip() {
        if(consider == 1) consider = 0;
        else consider = 1;
        cnt = (int) st.size() - cnt;
    }
    
    bool all() {
        if(cnt == (int) st.size()) return true;
        return false;
    }
    
    bool one() {
        return cnt > 0;
    }
    
    int count() {
        return cnt;
    }
    
    string toString() {
        string s;
        for(int i = 0; i < (int) st.size(); i++) {
            s.push_back((st[i] ^ consider) + '0');
        }
        return s;
    }
};

/**
 * Your Bitset object will be instantiated and called as such:
 * Bitset* obj = new Bitset(size);
 * obj->fix(idx);
 * obj->unfix(idx);
 * obj->flip();
 * bool param_4 = obj->all();
 * bool param_5 = obj->one();
 * int param_6 = obj->count();
 * string param_7 = obj->toString();
 */