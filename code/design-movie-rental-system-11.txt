#define F first
#define S second
const int N1=1e4+1,N2= 3e5+1;
class MovieRentingSystem {
public:  
    
    
    //se[movie] stores list of shops along with corresponding price at which this movie is available i.e unrented list of shops for this movie. 
   //This will be used for returning a list of shops that have an unrented copy of the given movie. se[movie] = { {price,shop},.......}
    
    //un_re[shop] stores list of movies along with price which is available to be rented from this shop. un_re[shop] = {{movie,price},.....}
    
    //mm is a map to store cost of a movie rented at a particular shop.
    
    //res stores list of rented movies
    
    multiset<pair<int,int>> se[N1],un_re[N2];
    multiset<vector<int>> res;
    map<pair<int,int>,int> mm;
    MovieRentingSystem(int n, vector<vector<int>>& ent) {
        
        //fill multiset "se","re" and map "mm" with initial data
        //fill data in corresponding multisets according to the ordering stated above : 
        for(auto &i:ent){
            
            //0->shop
            //1->movie
            //2->price
            
            se[i[1]].insert({i[2],i[0]});
            un_re[i[0]].insert({i[1],i[2]});
            mm[{i[0],i[1]}]=i[2];
        }
    }
    
    vector<int> search(int movie) {
        vector<int> res;
        int cnt=0;//Need to return only top 5 results
        auto it= se[movie].begin();
        //simply return top 5 results from se multiset
        while(it!=se[movie].end() and cnt<5){
            res.push_back((*it).S);
            cnt++;
            it++;
        }
        return res;
        
    }
    
    void rent(int shop, int movie) {
        // find the movie in un_re multiset and erase it from unrented list
        auto it=un_re[shop].lower_bound({movie,-1});
        int price=(*it).S;
        un_re[shop].erase(it);
        
        //we also need to remove this movie from se multiset because this movie is rented now.
        auto it1=se[movie].lower_bound({price,shop});
        
        se[movie].erase(it1);
        
        // insert this movie in rented list i.e res
        res.insert({price,shop,movie});
        
    }
    
    void drop(int shop, int movie) {
        //fetch out the cost from map "mm"
        int cost=mm[{shop,movie}];
        //Insert back this movie in unrented lists -> "un_re" and "se"
        un_re[shop].insert({movie,cost});
        se[movie].insert({cost,shop});
        //Erase from rented list i.e res
        auto it=res.lower_bound({cost,shop,movie});
        res.erase(it);
        
    }
    
    vector<vector<int>> report() {
        //Just return top 5 cheapest rented movies
        vector<vector<int>> ans;
        int cnt=0;
        auto it=res.begin();
        while(it!=res.end() and cnt<5){
            auto curr= (*it);
            ans.push_back({curr[1],curr[2]});
            it++;
            cnt++;
        }
        return ans;
        
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */