int cmp(int*a ,int*b){
    return *a>*b;
}
int binarySearch(int*arr,int low,int high,int val){
    if(low<=high){
        int mid=low+(high-low)/2;
        if(arr[mid]==val)return mid;
        if(val<arr[mid])return binarySearch(arr,low,mid-1,val);
        else return binarySearch(arr,mid+1,high,val);
    }
    return low;
}


int maximumPopulation(int** logs, int logsSize, int* logsColSize){
  
    int *arrB=(int*)malloc(sizeof(int)*(logsSize));
    int *arrD=(int*)malloc(sizeof(int)*(logsSize));
    for(int x=0;x<logsSize;x++){
        arrB[x]=logs[x][0];
        arrD[x]=logs[x][1]-1;
    }
    qsort(arrB,logsSize,sizeof(arrB[0]),cmp);
    qsort(arrD,logsSize,sizeof(arrD[0]),cmp); 
    int max=INT_MIN;
    int year=0;
    for(int x=0;x<logsSize;x++){
        int val=arrB[x];
        int upper_bound=binarySearch(arrB,0,logsSize-1,val);
        int lower_bound=binarySearch(arrD,0,logsSize-1,val);
        while(upper_bound<logsSize&&arrB[upper_bound]==val)upper_bound++;
        while(lower_bound>0&&arrD[lower_bound]==val&&arrD[lower_bound-1]==val)lower_bound--;
        if((upper_bound-lower_bound)>max){max=(upper_bound-lower_bound);year=val;}
    }
    return year;
    
}