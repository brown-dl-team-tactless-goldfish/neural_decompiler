class Solution {
public:
    int findValidSplit(vector<int>& nums) {
        init();
        const int n = nums.size();
        unordered_map<int,pair<int,int>> pos; //p, first i has p, last i has p
        for(int i=0;i<n;i++){
            for(auto p:factor(nums[i])){
                if(!pos.count(p)) pos[p].first = i;
                pos[p].second = i+1;
            }
        }
        vector<int> linePlus(n+1), lineMinus(n+1);
        for(auto [p, pr] : pos){
            linePlus[pr.first]++;
            lineMinus[pr.second]++;
        }
        int cnt = 0;
        for(int i=0;i<n;i++){
            cnt -= lineMinus[i];
            if(i!=0 && cnt == 0) return i-1;
            cnt += linePlus[i];
        }

        return -1;
    }

    void init(){
        for(int i=2;i<=1000;i++){
            bool isP = true;
            for(auto p:primes){
                if(p > sqrt(i+1)) break;
                if(i % p == 0) {
                    isP = false;
                    break;
                }
            }
            if(isP) primes.push_back(i);
        }
    }

    vector<int> factor(int x){
        vector<int> v;
        for(auto p:primes){
            if(p>sqrt(x+1)) break;
            if(x % p == 0){
                v.push_back(p);
                while(x%p == 0) x/=p;
            }
        }
        if(x>1) v.push_back(x);
        return v;
    }

    vector<int> primes;
};