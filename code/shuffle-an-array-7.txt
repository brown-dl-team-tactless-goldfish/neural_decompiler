typedef struct {
    int *originalNums;
    int* nums;
    int size;
} Solution;

Solution* solutionCreate(int* nums, int size) {
    Solution* result = (Solution*)malloc(sizeof(Solution));
    result->nums = (int *)malloc(sizeof(int) * size);
    result->originalNums = (int *)malloc(sizeof(int) * size);
    result->size = size;
    for (int i = 0; i < size; i++){result->nums[i] = nums[i]; result->originalNums[i] = nums[i];}
    //memcpy(result->nums, nums, sizeof(int) * size);
    //memcpy(result->originalNums, nums, sizeof(int) * size);
    return result;
}

/** Resets the array to its original configuration and return it. */
int* solutionReset(Solution* obj, int *returnSize) {
    //memcpy(obj->nums, obj->originalNums, sizeof(int) * obj->size);
    for (int i = 0; i < obj->size; i++){obj->nums[i] = obj->originalNums[i];}
    *returnSize = obj->size;
    return obj->nums;
}
void swap (int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 
/** Returns a random shuffling of the array. */
int* solutionShuffle(Solution* obj, int *returnSize) {
    int index;
    int tmp;
    srand(time(NULL));
    for (int i = obj->size-1; i > 0; i--){
        index = rand()%(i+1);
        swap(obj->nums+i, obj->nums+index);
    }
    *returnSize = obj->size;
    return obj->nums;
}

void solutionFree(Solution* obj) {
    free(obj->originalNums);
    free(obj->nums);
    free(obj);
}

/**
 * Your Solution struct will be instantiated and called as such:
 * struct Solution* obj = solutionCreate(nums, size);
 * int* param_1 = solutionReset(obj);
 * int* param_2 = solutionShuffle(obj);
 * solutionFree(obj);
 */