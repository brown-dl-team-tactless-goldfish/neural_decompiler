class RandomizedCollection {
    vector<int> pool;
    unordered_map<int, unordered_set<int>> hmap;

public:
    /** Initialize your data structure here. */
    RandomizedCollection() {
        srand((unsigned)time(NULL));
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        pool.push_back(val);
        hmap[val].insert(pool.size() - 1);
        if(hmap[val].size() > 1)
            return false;
        return true;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        if(hmap.count(val) == 0) return false;
        
        int delIndex = *hmap[val].begin();
        hmap[val].erase(delIndex);
        if(hmap[val].size() == 0)
            hmap.erase(val);
        
        int lastVal = pool.back();
        pool.pop_back();
        if(delIndex < pool.size()) {
            pool[delIndex] = lastVal;
            hmap[lastVal].erase(pool.size());
            hmap[lastVal].insert(delIndex);
        }
        
        return true;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return pool[rand()%pool.size()];
    }
};