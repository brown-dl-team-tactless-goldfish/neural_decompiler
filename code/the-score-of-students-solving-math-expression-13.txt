class Solution {
public:
    void getReal(int &real, string &s, vector <int> &a, vector <int> &nums, vector <char> &op) {
        int n = s.size();
        for (int i = 0; i < n; i += 2) nums[i / 2] = s[i] - '0';
        int cur = nums[0];
        for (int i = 1; i < n; i += 2) {
            op.push_back(s[i]);
            if (s[i] == '+')  {
                real += cur;
                cur = nums[i / 2 + 1];
            }
            else
                cur *= nums[i / 2 + 1];
        }
        real += cur; 
    }
    int scoreOfStudents(string s, vector<int>& a) {
        int real = 0;
        int n = s.size();
        int m = n / 2 + 1;
        vector <int> nums(m);
        vector <char> op;
        getReal(real, s, a, nums, op);
        vector <vector <unordered_set <int>>> dp(m, vector<unordered_set<int>>(m));
        for (int i = 0; i < m; i++)
            dp[i][i].insert(nums[i]);
        for (int i = 1; i < m; i++) {
            for (int j = i - 1; j >= 0; j--) {
                for (int k = j; k < i; k++) {
                    if (op[k] == '+') {
                        for (auto &x : dp[j][k])
                            for (auto &y : dp[k + 1][i])
                                if (x + y <= 1000) 
                                    dp[j][i].insert(x + y);
                    }
                    else {
                        for (auto &x : dp[j][k])
                            for (auto &y : dp[k + 1][i])
                                if (x * y <= 1000) 
                                    dp[j][i].insert(x * y);
                    }
                }
            }
        }
       
        int ret = 0;
        for (auto &x : a) {
            if (x == real) ret += 5;
            else if (dp[0][m - 1].find(x) != dp[0][m - 1].end())
                ret += 2;
        }
        return ret;
    }
};