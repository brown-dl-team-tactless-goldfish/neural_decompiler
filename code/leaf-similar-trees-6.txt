/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
//recurssive function to count leaves 
void leaf_extractor(struct TreeNode* root, int * root_leaves, int *len_array){
    //end of tree
    if(!root){return;}
    //temination condtions with leaves
    if(!root->left && !root->right){
        //collect the leaves
        root_leaves[(*len_array)++] = root->val;
    }
    else{
        leaf_extractor(root->left,root_leaves,len_array);
        leaf_extractor(root->right,root_leaves,len_array);
    }
}

bool leafSimilar(struct TreeNode* root1, struct TreeNode* root2){
    int len_root1 = 0, len_root2 = 0;
    //decale array to get all the values of the leaf for both trees
    int * root1_leaves = (int*)calloc(101,sizeof(int));   //constraints of 200 leaves
    int * root2_leaves = (int*)calloc(101,sizeof(int));   //constraints of 200 leaves

    //convert the leaf into array 
    leaf_extractor(root1,root1_leaves,&len_root1);
    leaf_extractor(root2,root2_leaves,&len_root2);

    //compare the length
    if(len_root1 != len_root2){
        free(root1_leaves);
        free(root2_leaves);
        return false;
    }
    //compare the elements 
    bool leave_same = true;
    for(int index = 0; index < len_root2; index++){
          if(root1_leaves[index] != root2_leaves[index]){leave_same = false;}
    }

    //clean
    free(root1_leaves);
    free(root2_leaves);
    return leave_same;
}