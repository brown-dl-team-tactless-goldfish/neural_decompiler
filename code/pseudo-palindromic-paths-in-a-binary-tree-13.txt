class Solution(object):
    def pseudoPalindromicPaths (self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        node_in_path = [0]*9
        out = self.dfs(root, node_in_path)
        return out
        
    
    def dfs(self, root, node_in_path):
        if root is None: return 0
        node_in_path[root.val-1] += 1
        if not root.left and not root.right:
            return int(sum([node%2 for node in node_in_path])<2)
        else:
            sum_ = 0
            for node in [root.left, root.right]:
                if node:
                    sum_ += self.dfs(node, node_in_path)
                    node_in_path[node.val-1] -= 1            
            
            return sum_