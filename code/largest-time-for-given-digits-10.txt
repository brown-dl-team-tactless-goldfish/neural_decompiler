class Solution {

public:
    string largestTimeFromDigits(vector<int>& arr) {
        string res = "+000",s="";
        for(int i=0; i<arr.size(); i++)
            s.push_back(arr[i]+'0');
        int c = 0;
        for(int i=0; i<24;i++)
        {
			//permutate by swapping adjacent digit
            swap(s[c],s[c==3?0:c+1]);
			//check valid permutation and store max result
            if (  ((s[0]=='2' && s[1] <='3') || s[0] <= '1' ) &&  s[2]<='5' && s > res  )
                res = s;   
            c++;
            //check boundary
            if (c==4) c=0;
			//for correct permutation we should reset in 11-th swapping 
            if (i==11) { swap(s[1],s[2]);}
        }
        return res.compare("+000")==0?"":res.insert(2,":");
    }
};