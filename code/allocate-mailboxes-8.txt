class Solution {
public:
    int distance(vector<int>& presum, vector<int>& houses, int begin, int end) {
        int mid = (begin + end) >> 1;
        int res = 0;
        res += houses[mid] * (mid - begin + 1) - (presum[mid+1] - presum[begin]);
        res += (presum[end+1] - presum[mid+1]) - houses[mid] * (end - mid);
        
        return res;
    }
    
    int minDistance(vector<int>& houses, int k) {
        int n = houses.size();
        sort(houses.begin(), houses.end());
        vector<int> presum;
        presum.push_back(0);
        for(int i=0; i<n; i++) {
            presum.push_back(presum.back() + houses[i]);
        }
        
        vector<vector<int>>dp(k, vector<int>(n+1, 100000000));
        for(int j=1; j<=n; j++) {
            dp[0][j] = distance(presum, houses, 0, j-1);
        }
        
        for(int i=1; i<k; i++) {
            for(int j=i+1; j<=n; j++) {
                for(int l=1; l<j; l++) {
                    dp[i][j] = min(dp[i][j], dp[i-1][l] + distance(presum, houses, l, j-1));
                }
            }
        }
                                   
        return dp[k-1][n];
    }
};