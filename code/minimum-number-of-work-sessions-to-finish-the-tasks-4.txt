class Solution {
private:
    bool dfs(vector<int>& tasks, int group, int sessionTime, int cur, vector<int>&section){
        if(cur == tasks.size()) 
            return true ;
        for(int i = 0; i < group; i++){
            if((section[i] + tasks[cur] )> sessionTime)
                continue ;
            section[i] += tasks[cur] ;
            if(dfs(tasks, group, sessionTime, cur+1, section))
                return true ;
            section[i] -= tasks[cur] ;
        }
        return false ;
    }
public:
    int minSessions(vector<int>& tasks, int sessionTime) {
        
        long long sum = 0 ;
        for(auto& t : tasks)
            sum += t ;
        if(sum <= sessionTime)
            return 1 ;
        sort(tasks.begin(), tasks.end(), greater()) ;

        int k = 0 ;
        for(auto it = tasks.begin(); it < tasks.end(); ++it ){
            if(*it == sessionTime){
                tasks.erase(it) ;
                k++ ;
            }
            else
                break ;
        }
        int left = 1 , right = tasks.size();
        while(left < right){            
            int mid = left + (right - left) / 2 ;
            vector<int>section(mid) ;
            if(dfs(tasks, mid, sessionTime , 0, section))
                right = mid ;
            else
                left = mid + 1 ;
        }
        return left + k ;
    }
};