class Solution {
    string s1;
    string s2;
    int l1;
    int l2;
    int dp[42][42][2001];
    
    //-999 999
    //diff > 0 s1 has to give character
    int recur(int i, int j, int diff) {
        
        if(i == l1 && j == l2) {
            if(diff == 0)
                return 1;
            return 0;
        }
        //cout<<dp[i][j][diff+1000];
        if(dp[i][j][diff+1000] != -1)
            return dp[i][j][diff+1000];
        
        if(diff > 0) {
            //
            if(i == l1)
                return 0;
            
            if(!isdigit(s1[i])) {
                return dp[i][j][diff+1000] = recur(i+1, j, diff-1);
            }
            int num = 0;
            int pos = i;
            while(pos < l1 && isdigit(s1[pos])) {
                num = num*10 + (s1[pos]-'0');
                if(recur(pos+1, j, diff-num)) {
                    return dp[i][j][diff+1000] = 1;
                }
                pos++;
            }
        } else if(diff < 0) {
            
            //
            if(j == l2)
                return 0;
            
            if(!isdigit(s2[j])) {
                return dp[i][j][diff+1000] = recur(i, j+1, diff+1);
            }
            int num = 0;
            int pos = j;
            while(pos < l2 && isdigit(s2[pos])) {
                num = num*10 + (s2[pos]-'0');
                if(recur(i, pos+1, diff+num)) {
                    return dp[i][j][diff+1000] = 1;
                }
                pos++;
            }
        } else {
            //
            
            if(i == l1 || j == l2)
                return 0;
            
            if(!isdigit(s1[i]) && !isdigit(s2[j])) {
                
                if(s1[i] != s2[j])
                    return dp[i][j][diff+1000] = 0;
                return dp[i][j][diff+1000] = recur(i+1, j+1, diff);
            }
            if(isdigit(s1[i])) {
                int num = 0;
                int pos = i;
                while(pos < l1 && isdigit(s1[pos])) {
                    num = num*10 + (s1[pos]-'0');
                    if(recur(pos+1, j, diff-num)) {
                        return dp[i][j][diff+1000] = 1;
                    }
                    pos++;
                }
            } else {
                int num = 0;
                int pos = j;
                while(pos < l2 && isdigit(s2[pos])) {
                    num = num*10 + (s2[pos]-'0');
                    if(recur(i, pos+1, diff+num)) {
                        return dp[i][j][diff+1000] = 1;
                    }
                    pos++;
                }
            }
        }
        return dp[i][j][diff+1000] = 0;
        
    }
public:
    bool possiblyEquals(string st1, string st2) {
        s1 = st1;
        s2 = st2;
        l1 = s1.length();
        l2 = s2.length();
        memset(dp, -1, sizeof(dp));
        return recur(0 , 0, 0);
    }
};