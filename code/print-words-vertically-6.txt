char **printVertically(char *s, int *returnSize) {
    // stack buf
    char b[200][1000];
    memset(b, 0, sizeof(b)*sizeof(char));

    int ch_len = strlen(s);

    // Split the space, find the maximum string
    int cnt = 0, split_cnt = 1;
    int max_len = 0;
    int i;
    for(i=0;i<ch_len;i++) {
        if(s[i] != ' ') {
            cnt++;
        }
        else {
            split_cnt++;
            if(max_len < cnt) {
                max_len = cnt;
            }
            cnt = 0;
        }
    }
    int *hash_start_i = (int *)malloc(split_cnt*sizeof(int));
    int *hash_ch_sz = (int *)malloc(split_cnt*sizeof(int));
    memset(hash_ch_sz, 0, split_cnt*sizeof(int));
    
    int k = 0;
    cnt = 0;
    for(i=0;i<ch_len;i++) {
        if(s[i] != ' ') {
            cnt++;
        }
        else {
            hash_ch_sz[k] = cnt;
            hash_start_i[k++] = i-1;
            cnt = 0;
        }
    }
    // last one
    hash_ch_sz[k] = cnt;
    hash_start_i[k++] = i-1;

    int temp = max_len;
    for(i=max_len-1;i>=0;i--) {
        for(int j=split_cnt-1;j>=0;j--) {
            // printf("debug: %d, %d\n", hash_ch_sz[j], hash_start_i[j]);
            if(temp - hash_ch_sz[j] > 0) {
                b[i][j] = ' ';
            }
            else {
                b[i][j] = s[hash_start_i[j]];
                hash_start_i[j]--;
                hash_ch_sz[j]--;
            }
        }
        temp--;
    }
    
    *returnSize = split_cnt;
    char **result = (char **)malloc((max_len+1) * sizeof(char *));
    
    for (i=0;i<max_len; i++){
        result[i] =(char *)malloc((split_cnt+1)*sizeof(char));
        strcpy(result[i], b[i]);
    }

    return result;
}
