int DepthOfTree(struct TreeNode* root){
    if(root == NULL)
        return 0;
    else 
        return 1 + fmax(DepthOfTree(root->left), DepthOfTree(root->right)); 
}

void process(float* dp, int pos, int* cn, struct TreeNode* root, int targetSum){    
    dp[pos] = root->val + dp[pos-1];    
    int remain = dp[pos] - targetSum;
    for(int i = pos-1; i >=0; i--){
        if(dp[i] == remain)
            *cn = *cn + 1;    
    }
    pos++;

    if(root->left){
        process(dp, pos, cn, root->left, targetSum); 
    }
    if(root->right){
        process(dp, pos, cn, root->right, targetSum);
    }
}

int pathSum(struct TreeNode* root, int targetSum){
    int depth = DepthOfTree(root);
    if(depth == 0){
        return 0;
    }
    float* dp = malloc((depth+1) * sizeof(float));
    dp[0] = 0;
    int* cn = calloc(1 , sizeof(int));
    
    process(dp, 1 ,cn, root, targetSum);
    
    return *cn;
}