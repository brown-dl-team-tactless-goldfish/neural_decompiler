class Solution {
public:
    vector<vector<int>> out;
    vector<vector<int>> graph;
    vector<bool> visit;
    vector<int> lowlinkValue;
    vector<int> idValue;
    int time = 0;
    void dfs(int vertex, int parent)
    {        
        idValue[vertex] = lowlinkValue[vertex] = time++;
        visit[vertex] = true;
        for(int dest : graph[vertex])
        {
            if(dest == parent) continue;
            if(visit[dest] == false)
            {
                dfs(dest, vertex);
                lowlinkValue[vertex] = std::min(lowlinkValue[vertex], lowlinkValue[dest]);
                if(idValue[vertex] < lowlinkValue[dest])
                {
                    out.push_back({vertex, dest});
                }
            }
            else
            {
                lowlinkValue[vertex] = std::min(lowlinkValue[vertex], idValue[dest]);
            }
        }       
    }
    
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        graph.resize(n);
        visit.resize(n, false);
        lowlinkValue.resize(n, 0);
        idValue.resize(n, 0);
        
        for(vector<int> v : connections)
        {
            graph[v[0]].push_back(v[1]);
            graph[v[1]].push_back(v[0]);
        }

        for(int i = 0; i < n; i++)
        {
            if(visit[i] == false)
                dfs(i, i);
        }
        return out;
    }
};