class Solution {
public:
    struct Node{
      int data, idx, arrIdx;
        Node(int val, int index, int arrayindex){
            data=val;
            idx=index;
            arrIdx=arrayindex;
        }
    };
    
    struct cmp{
      bool operator()(Node* &x, Node* &y){
          return x->data > y->data;
      }  
    };
    
    vector<int> smallestRange(vector<vector<int>>& nums) {
        int n = nums.size();
        vector<int> res = {-1000000, 1000000};
        priority_queue<Node*, vector<Node*>, cmp> pq;
        
        int curMax=INT_MIN;
        for(int i=0; i<n; ++i){
            Node *e = new Node(nums[i][0],0,i);
            pq.push(e);
            curMax = max(curMax, nums[i][0]);
        }
        
        int curdif = INT_MAX;
        while(1){
            Node *cur = pq.top();
            pq.pop();
            int data = cur->data;
            int idx = cur->idx;
            int arrIdx = cur->arrIdx;
            if(curMax-data < curdif){
                res={data,curMax};
                curdif = curMax-data;
            }
            idx++;
            if(idx >= nums[arrIdx].size()) break;
            Node *e = new Node(nums[arrIdx][idx],idx,arrIdx);
            pq.push(e);
            curMax = max(curMax, nums[arrIdx][idx]);
        }
        return res;
    }
};