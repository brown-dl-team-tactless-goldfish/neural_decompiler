

char *__multiply(char *num, int len, int mn_len, char n, int shift)
{
        char *mn = malloc(mn_len);
        int i;
        for (i = 0; i < mn_len; i++)
                mn[i] = '0';
        
        int _n1 = n - '0';
        int _n2;
        int carry = 0;
        int tmp;
        for (i = len - 1; i >= 0; i--) {
                _n2 = num[i] - '0';
                tmp = _n1 * _n2 + carry;
                mn[shift + len - 1 - i] = tmp % 10 + '0';
                carry = tmp / 10;
        }
        if (carry)
                mn[shift + len] = carry + '0';

        return mn;
}

char * multiply(char * num1, char * num2)
{
        int len1 = strlen(num1);
        int len2 = strlen(num2);
        
        if ((len1 == 1 && *num1 == '0') || (len2 == 1 && *num2 == '0'))
                return "0";
        
        char **mn = malloc(sizeof(char *) * len2); // medium nums
        int i, j;
        for (i = len2 - 1; i >= 0; i--) {
                char n = num2[i];
                mn[i] = __multiply(num1, len1, len1 + len2, n, len2 - 1 - i);
        }
        
        char sum[len1 + len2];
        int tmp;
        int carry = 0;
        for (i = 0; i < len1 + len2; i++) {
                tmp = carry;
                for (j = 0; j < len2; j++)
                        tmp += (mn[j][i] - '0');
                sum[i] = tmp % 10 + '0';
                carry = tmp / 10;
        }

        
        int sum_len;
        if (sum[len1 + len2 - 1] == '0')
                sum_len = len1 + len2 - 1;
        else
                sum_len = len1 + len2;
        
        char *_sum = malloc(sum_len + 1); // add one more for trailing '\0'
        for (i = 0; i < sum_len; i++) {
                _sum[i] = sum[sum_len - i - 1];
        }
        _sum[sum_len] = 0;
        return _sum;
}