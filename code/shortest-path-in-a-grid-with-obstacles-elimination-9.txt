class Solution {
public:
    int dir[5] = {0, 1, 0, -1, 0};
    int shortestPath(vector<vector<int>>& grid, int k) {
        int m = grid.size(), n = grid[0].size();
        queue<array<int, 3>> q;
        q.push({0, 0, k});
        for (int i = 0; !q.empty(); i++) {
            for (int j = 0, e = q.size(); j < e; j++) {
                auto [r, c, rk]  = q.front(); q.pop();
                if (r == m - 1 && c == n - 1) return i;
                for (int l = 0; l < 4; l++) {
                    int nr = r + dir[l], nc = c + dir[l + 1];
                    if (min(nr, nc) >= 0 && nr < m && nc < n && rk >= abs(grid[nr][nc])) {
                        q.push({nr, nc, rk - (grid[nr][nc] > 0)});
                        grid[nr][nc] = grid[nr][nc] ? rk : -rk - 1;
                    }
                }    
            }
        }
        return -1;
    }
};