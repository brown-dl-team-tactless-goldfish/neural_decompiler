class Solution {
    string ans;
    int N, K;
    void go(int i = 0, string&& path = {}) {
        if (!K)
            return;
        if (i == N) {
            if (!--K)
                ans = path; // ðŸŽ¯ K-th happy string
            return;
        }
        for (auto c: string{ "abc" })
            if (path.empty() || c != path.back())
                path.push_back(c),     // ðŸ‘€ âœ… path forward-tracking
                go(i + 1, move(path)), // ðŸš€ DFS explore path
                path.pop_back();       // ðŸ‘€ ðŸš« path back-tracking
    }
public:
    string getHappyString(int N_, int K_) {
        N = N_;
        K = K_;
        go();
        return ans;
    }
};