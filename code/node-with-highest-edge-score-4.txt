class Solution {
public:
    int edgeScore(vector<int>& edges) {
        unordered_map<int,long long> hm;
        // For every node add the value of the incoming edge
        int n = edges.size();
        for(int i=0;i<n;i++){
            hm[edges[i]] += (long long)i;
        }
        // Find maximum value in the hashmap 
        long long mx = INT_MIN;
        for(auto it:hm){
            mx = max(mx,it.second);
        }
        
        // If there are multiple nodes with same maximum value then find the lowest index
        int nd = INT_MAX;
        for(auto it:hm){
            if(it.second == mx)
                nd = min(nd,it.first);
        }
        return nd;
    }
};