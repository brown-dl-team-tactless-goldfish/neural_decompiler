struct pair {
    int start;
    int end;
};

int* partitionLabels(char* s, int* returnSize) {
    int slen = strlen(s);
    struct pair* arr = (struct pair*) malloc(26 * sizeof(struct pair));
    memset(arr, -1, 26 * sizeof(struct pair));
    for (int i = 0; i < slen; i++) {
        if (arr[s[i] - 'a'].start == -1) arr[s[i] - 'a'].start = i;
        arr[s[i] - 'a'].end = i;
    }
    int cnt = 0, idx = 0;
    for (int i = 1; i < slen; i++) {
        if (arr[s[i] - 'a'].start >= arr[s[i-1] - 'a'].start && arr[s[i] - 'a'].end <= arr[s[i-1] - 'a'].end) {
            arr[s[i] - 'a'].start = arr[s[i-1] - 'a'].start;
            arr[s[i] - 'a'].end = arr[s[i-1] - 'a'].end;
        } else if (arr[s[i] - 'a'].start >= arr[s[i-1] - 'a'].start && 
                   arr[s[i] - 'a'].start < arr[s[i-1] - 'a'].end && 
                   arr[s[i] - 'a'].end >= arr[s[i-1] - 'a'].end) {
            arr[s[i] - 'a'].start = arr[s[i-1] - 'a'].start;
        }
        if (arr[s[i] - 'a'].start > arr[s[i-1] - 'a'].end) cnt++;
    }
    *returnSize = cnt + 1;
    int* res = (int*) malloc((cnt + 1) * sizeof(int));
    for (int i = 1; i < slen; i++) {
        if (arr[s[i] - 'a'].start > arr[s[i-1] - 'a'].end) res[idx++] = arr[s[i-1] - 'a'].end - arr[s[i-1] - 'a'].start + 1;
    }
    res[idx] = arr[s[slen-1] - 'a'].end - arr[s[slen-1] - 'a'].start + 1;
    free(arr);
    return res;
}