#include <stdio.h>
#include <stdlib.h>

void initVowel(int *vowel);

void addVowel(int *vowel, char c);

int isVowel(char c);

int countVowelSubstrings(char *word);

int getVowelCount(int *vowels, char v);

void subVowel(int *vowel, char c);

void initVowel(int *vowel) {
    for (int i = 0; i < 5; ++i) {
        vowel[i] = 0;
    }
}

void addVowel(int *vowel, char c) {
    switch (c) {
        case 'a':
            vowel[0]++;
            break;
        case 'e':
            vowel[1]++;
            break;
        case 'i':
            vowel[2]++;
            break;
        case 'o':
            vowel[3]++;
            break;
        case 'u':
            vowel[4]++;
            break;
    }
}

void subVowel(int *vowel, char c) {
    switch (c) {
        case 'a':
            vowel[0]--;
            break;
        case 'e':
            vowel[1]--;
            break;
        case 'i':
            vowel[2]--;
            break;
        case 'o':
            vowel[3]--;
            break;
        case 'u':
            vowel[4]--;
            break;
    }
}

int isVowel(char c) {
    switch (c) {
        case 'a':
        case 'e':
        case 'i':
        case 'o':
        case 'u':
            return 1;
    }
    return 0;
}

int getVowelCount(int *vowels, char v) {
    switch (v) {
        case 'a':
            return vowels[0];
        case 'e':
            return vowels[1];
        case 'i':
            return vowels[2];
        case 'o':
            return vowels[3];
        case 'u':
            return vowels[4];
    }
    return 0;
}

int countVowelSubstrings(char *word) {
    int i = 0, j = 0, k = 0;
    int cnt = 0;
    int vowelCount = 0;
    int *vowels = (int *) malloc(5 * sizeof(int));
    while (word[i] != '\0') {
        if (isVowel(word[i])) {
            addVowel(vowels, word[i]);
            if (getVowelCount(vowels, word[i]) == 1) {
                vowelCount++;
            }
            for (; vowelCount == 5; ++k) {
                subVowel(vowels, word[k]);
                if (getVowelCount(vowels, word[k]) == 0) {
                    vowelCount--;
                }
            }
            cnt += (k - j);
        } else {
            initVowel(vowels);
            vowelCount = 0;
            j = k = i + 1;
        }
        i++;
    }
    return cnt;
}