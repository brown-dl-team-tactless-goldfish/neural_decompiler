
//the idea is bascially union find // first do union find for type 3 edges and keep  counter of extra edges 
//after that n using the previous union find array do union find fortyep 1 and type 2 respecitvely  and inceremnt the count of random  edges 

class Solution {
public:  
    int find(vector<int>&p,int a)
    {
      if(p[a]==-1)
      {
          return a; 
      }
       
      p[a]=find(p,p[a]); 
       
      return p[a];   
    }
    int unionn(vector<int>&p,int a,int b)
    {
        int  x,y;  
        x=find(p,a);  
        y=find(p,b); 
        
        if(x==y)
        {
            return 1; 
        }
        
        p[x]=y;  
        return 0;  
        
    }  
     int find2(vector<int>&p,int a)
    {
      if(p[a]==-1)
      {
          return a; 
      }
       
      p[a]=find(p,p[a]); 
       
      return p[a];   
    }
    
        int unionn2(vector<int>&p,int a,int b)
    {
        int  x,y;  
        x=find2(p,a);  
        y=find2(p,b); 
        
        if(x==y)
        {
            return 1; 
        }
        
        p[x]=y;  
        return 0;  
        
    } 
    
      int solve(int n, vector<vector<int>>& e,int x,vector<int>p)
    {
        
        map<int,bool>vis;  
        
        int i,j,k,l,ans=0; 
        
     
        for(i=0;i<e.size();i++)
        {
            if(e[i][0]==x)
            {  
               vis[e[i][1]]=true; 
               vis[e[i][2]]=true;   
               ans=ans+unionn2(p,e[i][1],e[i][2]);  
            }
            if(e[i][0]==3)
            {
                vis[e[i][1]]=true; 
               vis[e[i][2]]=true;   
            }
        }
        
        
        for(i=1;i<=n;i++)
        {
            if(vis[i]==false)
            {
                return -1;
            }
        }
        

        
        return ans;  
    }
    int maxNumEdgesToRemove(int n, vector<vector<int>>& e) {
       
       vector<int>p(n+1,-1); 
       int  i,j,k,l,ans;  
       ans=0;  
        
       for(i=0;i<e.size();i++)
       {
            if(e[i][0]==3)
            {
               ans+=unionn(p,e[i][1],e[i][2]);  
            }
           
       }
       
       int alice,bob;  
        
       alice=solve(n,e,1,p); 
        
        if(alice==-1)
        {
            return -1; 
        }
        
        bob=solve(n,e,2,p); 
        
        if(bob==-1)
        {
            return -1;
        }
        
         return ans+alice+bob; 
        
        
    } 
};