struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2)
{
	if (list1 == NULL && list2 == NULL) return NULL;

	if (list1 == NULL) return list2;
	if (list2 == NULL) return list1;

	struct ListNode* main = (struct ListNode*)malloc(sizeof(struct ListNode));
	main->val = -1;
	main->next = NULL;
	struct ListNode* travelResult = main;
	struct ListNode* travel1 = list1;
	struct ListNode* travel2 = list2;

	while (true)
	{
		if (travel1->val <= travel2->val)
		{
			//InsertAtEnd(travelResult, travel1->val);
			travelResult->next = travel1;
			travelResult = travelResult->next;
			travel1 = travel1->next;

			if (travel1 == NULL)
			{
				while (travel2 != NULL)
				{
					//InsertAtEnd(travelResult, travel2->val);
					travelResult->next = travel2;
					travelResult = travelResult->next;
					travel2 = travel2->next;
				}
				break;
			}
		}
		else
		{
			//InsertAtEnd(travelResult, travel2->val);
			travelResult->next = travel2;
			travelResult = travelResult->next;
			travel2 = travel2->next;

			if (travel2 == NULL)
			{
				while (travel1 != NULL)
				{
					//InsertAtEnd(travelResult, travel1->val);
					travelResult->next = travel1;
					travelResult = travelResult->next;
					travel1 = travel1->next;
				}
				break;
			}
		}
	}

	return main->next;
}

struct ListNode* sortList(struct ListNode* head) {

	if (head == NULL || head->next == NULL)
		return head;

	struct ListNode* slow = head;
	struct ListNode* fast = head->next;

	while (fast != NULL && fast->next != NULL)
	{
		slow = slow->next;
		fast = fast->next->next;
	}

	// breaks the LL into 2 parts by removing link
	fast = slow->next;
	slow->next = NULL;

	struct ListNode* firstHalf = sortList(head);
	struct ListNode* secondHalf = sortList(fast);
	return mergeTwoLists(firstHalf, secondHalf);
}
