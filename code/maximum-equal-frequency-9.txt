class Solution {
public:
    int maxEqualFreq(vector<int>& nums) {
        //最大频率比最小频率多一且只有一个最大频率
        //最小频率为1且只有一个 最大频率前一项为最小频率
        map< int ,int > count ; 
        map< int ,int > check ; 
        int ans =1 ;
        for( int i = 0 ; i<nums.size() ; i++ ) {
            int num = nums[i];
            check[num]++;
            int times = check[num];
            if( times-1 > 0 ){
                count[times-1]--;
                if( count[times-1] == 0 ) 
                    count.erase(times-1) ; 
            }
                
            count[times]++;
            auto be = count.begin();
            auto en = count.end();
            en--;
            if( be == en && (be->second ==1 || be->first == 1 )) 
                ans = max( ans , i+1) ; 
            
            if( en->second == 1 && en->first -be->first == 1 ){
                ans = max( ans , i+1 ) ; 
            }
           
            if( be->second ==1 && be->first == 1 && distance(be,en) == 1 ) {
                ans = max(ans , i+1);
            }
        }
        return ans ; 
    }
};