class Solution {
    vector<int> res;
    bitset<100001> vis;
    unordered_map<int, int> infected;
    map<int, vector<vector<int>>> sortedMeets;

public:
    void dfs(int currNode, unordered_map<int, vector<int>>& adjList)
    {
        vis[currNode] = 1;

        for (auto& adjNode : adjList[currNode])
        {
            if (!vis[adjNode])
            {
                infected[adjNode];
                dfs(adjNode, adjList);
            }
        }
    }

    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson)
    {
        infected[0];
        infected[firstPerson];

        for (int i = 0; i < meetings.size(); ++i)
            sortedMeets[meetings[i][2]].push_back({ meetings[i][0], meetings[i][1] });

        for (auto& [time, persons] : sortedMeets)
        {
            set<int> src;
            unordered_map<int, vector<int>> adjList;

            for (int i = 0; i < persons.size(); ++i)
            {
                if (infected.find(persons[i][0]) != infected.end()) src.insert(persons[i][0]);
                if (infected.find(persons[i][1]) != infected.end()) src.insert(persons[i][1]);

                adjList[persons[i][0]].push_back(persons[i][1]);
                adjList[persons[i][1]].push_back(persons[i][0]);
            }

            for (auto& node : src)
            {
                if (!vis[node])
                {
                    infected[node];
                    dfs(node, adjList);
                }
            }

            vis.reset();
        }

        for (auto& [x, y] : infected)
            res.push_back(x);

        return res;
    }
};