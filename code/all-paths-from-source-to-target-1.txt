
void to_n(int** graph, int* graphColSize, int now, int end, int** ans, int* returnSize, int* returnColumnSizes, int* road, int step){
    road[step] = now;
    step++;
    for (int i = 0 ; i < graphColSize[now] ; i++){
        if (graph[now][i] == end){
            ans[*returnSize] = malloc(sizeof(int)*(step+1));
            for (int i = 0 ; i < step ; i++){
                ans[*returnSize][i] = road[i];
            }
            ans[*returnSize][step] = end;
            returnColumnSizes[*returnSize] = step+1;
            *returnSize += 1;
        } else {
            to_n(graph, graphColSize, graph[now][i], end, ans, returnSize, returnColumnSizes, road, step);
        }
    }
    return;
}

int** allPathsSourceTarget(int** graph, int graphSize, int* graphColSize, int* returnSize, int** returnColumnSizes){
    int** ans = malloc(sizeof(int*)*10000);
    *returnColumnSizes = malloc(sizeof(int)*(10000));
    *returnSize = 0;
    int* road = malloc(sizeof(int)*(graphSize));
    to_n(graph, graphColSize, 0, graphSize-1, ans, returnSize, *returnColumnSizes, road, 0);
    free(road);
    ans = realloc(ans, sizeof(int*)*(*returnSize));
    *returnColumnSizes = realloc((*returnColumnSizes), sizeof(int)*(*returnSize));
    return ans;
}