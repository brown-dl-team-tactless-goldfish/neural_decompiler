class Solution {
public:
    int seg[200001<<2];
    int minMoves(vector<int>& nums, int limit) {
        int n=nums.size();
        for(int i=0;i<n/2;i++){
            int a=nums[i];
            int b=nums[n-1-i];
            if(a>b) swap(a,b);
            update(0,0,200000,2,a,2);
            update(0,0,200000,a+1,a+b-1,1);
            update(0,0,200000,a+b+1,b+limit,1);
            update(0,0,200000,b+limit+1,2*limit,2);
        }
        int res=INT_MAX;
        for(int i=2;i<=2*limit;i++){
            search(0,0,200000,i);
            res=min(res,t);
        }
        return res;
    }
    
    int t;
    void search(int idx, int left, int right, int sidx){
        if(left>right || sidx>right || sidx<left) return ;
        if(left==right){
            t=seg[idx];
            return ;
        }
        if(seg[idx]>0){
            seg[idx*2+1]+=seg[idx];
            seg[idx*2+2]+=seg[idx];
            seg[idx]=0;
        }
        int mid=(left+right)/2;
        search(idx*2+1,left,mid,sidx);
        search(idx*2+2,mid+1,right,sidx);
    }
    
    void update(int idx, int left, int right, int uleft, int uright, int val){
        if(left>right || uleft>right || uright<left) return ;
        if(uleft<=left && uright>=right){
            seg[idx]+=val;
            return ;
        }
        
        if(seg[idx]>0){
            seg[idx*2+1]+=seg[idx];
            seg[idx*2+2]+=seg[idx];
            seg[idx]=0;
        }
        int mid=(left+right)/2;
        update(idx*2+1,left,mid,uleft,uright,val);
        update(idx*2+2,mid+1,right,uleft,uright,val);
    }
};