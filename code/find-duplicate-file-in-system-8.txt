class Solution {
public:
    pair<string, string> content(string s){
        string cont = "", fname = "";

        int i = 0;
        for(int j = 0; j < s.length() && s[j] != '('; j++){
            i = j;
            fname += s[j];
        }
        
        for(int j = i+1; j < s.length(); j++){
            cont += s[j];
        }
        return {cont, fname};
    }
    void solve(string s, unordered_map<string, vector<string>> &mp){
        // unordered_map<string, vector<string>> mp;
        
        string tmp = "", t = "";
        string dir = "";
        int id = 0;
        
        for(int i = 0; i < s.length(); i++){
            id = i;
            char c = s[i];
            if(c == ' '){
                break;
            }
            dir += c;
        }
        dir += '/';
        // cout<<dir<<" ";
        
        vector<string> v;
        s += ' ';
        for(int i = id+1; i < s.length(); i++){
            if(s[i] == ' '){
                v.push_back(tmp);
                tmp = "";
            }else
                tmp += s[i];
        }
        cout<<endl;
        
        for(auto c:v){   
            pair<string, string> p = content(c);
            // cout<<1<<" ";   
            mp[p.first].push_back(dir+p.second);
        }
        cout<<endl;
        
    }
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        unordered_map<string, vector<string>> mp;
        vector<vector<string>> ans;
        
        for(auto it:paths)
            solve(it, mp);
        for(auto it = mp.begin(); it != mp.end(); it++){
            if(it->second.size() > 1){
                ans.push_back(it->second);
            }
        }
        return ans;
        
    }
};