class Solution {
public:
  vector<int>s, nums;
  bool flag;
  
  void dfs(int n){
    if(flag) return;
                  
    flag = true;
    for(int i = 1; i != nums.size(); i++)
      if(nums[i] == 0) {flag = false; break;}
    
    if(flag) return;              
                  
    int id = 1;
    while(s[id]) id++; 
      
    for(int j = nums.size() - 2; j ;j--)
      if(nums[j] == 0 && (j == 1 || (id+j < s.size() && s[id+j] == 0))){
        if(j == 1) nums[j] = s[id] = j;
        else nums[j] = s[id] = s[id+j] = j;
        
        dfs(j);
        if(flag) return;
        
        if(j == 1) nums[j] = s[id] = 0;
        else nums[j] = s[id] = s[id+j] = 0;  
      }     
  }
  
  vector<int> constructDistancedSequence(int n) {
    if(n == 1) return {1};
    s.resize(n*2-1, 0), nums.resize(n+1, 0);
    nums.back() = 1;
    s[0] = s[n] = n;
    flag = false;
    dfs(n);
    return s;
  }
};