class Solution {
public:
    bool isVowel(char c) {
        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
    }
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        int n = words.size();
        vector<int> prefix(n,0);
        for (int i = 0; i < words.size(); i++) {
            int sz = words[i].size();
            if (isVowel(words[i][0]) && isVowel(words[i][sz-1])) {
                prefix[i] = 1;
            } 
            prefix[i] += ((i-1 >= 0) ? prefix[i-1] : 0);
        }
        
        vector<int> result(queries.size(),0);
        int i = 0;
        for (auto &q :queries) {
            int s = q[0]; int e = q[1];
            int ans = prefix[e] - (((s-1) >= 0) ? prefix[s-1] : 0);
            result[i++] = ans;
        }
        return result;
        
    }
};



class Solution1 {
public:
    bool isVowel(char c) {
        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
    }
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        int n = words.size()+1; // adding senitel for easy computation
        vector<int> prefix(n,0);
        for (int i = 0; i < words.size(); i++) {
            int sz = words[i].size();
            if (isVowel(words[i][0]) && isVowel(words[i][sz-1])) {
                prefix[i+1] = 1;
            } 
            prefix[i+1] += prefix[i];
        }
        
        vector<int> result(queries.size(),0);
        int i = 0;
        for (auto &q :queries) {
            int ans = prefix[q[1]+1] - prefix[q[0]];
            result[i++] = ans;
        }
        return result;
        
    }
};