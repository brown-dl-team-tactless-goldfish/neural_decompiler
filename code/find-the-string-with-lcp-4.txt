class DSU{
   public:
    vector<int> parent,size; 
    DSU(int n)
    {
        parent.resize(n);
        size.resize(n,1);
        for(int i=0;i<n;i++)
            parent[i] = i;
    }
    int find(int n)
    {
        if(parent[n]!=n)
            return parent[n] = find(parent[n]);
        return n;
    }
    void Union(int x,int y)
    {
        int u = find(x);
        int v = find(y);
        if(u!=v)
        {
            if(size[u]>size[v])
            {
                parent[v] = u;
                size[u]+=size[v]; 
            }
            else
            {
                parent[u] = v;
                size[v]+=size[u];
            }
        }
    }
};

class Solution {
public:
    string findTheString(vector<vector<int>>& lcp) {
        int n = lcp.size();
        vector<int> dp(n,-1);
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
            {
                if(lcp[i][j]!=lcp[j][i] || lcp[i][j] > n - i || lcp[i][j] > n-j) return "";
                if(i==j && lcp[i][j]!= n-i) return "";
                if(i<n-1 && j<n-1 && lcp[i][j]!=0 && lcp[i][j]==lcp[i+1][j+1]) return "";
            }
        DSU d(n);
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j>=0;j--)
            {
                if(lcp[i][j]==1)
                {
                    int l =i,r=j;
                    d.Union(l,r);
                    while(l>0 && r>0 && lcp[l-1][r-1] == lcp[l][r]+1)
                    {
                        l--;
                        r--;
                        d.Union(l,r);
                    }
                }
                if(i>0 && j>0 && lcp[i-1][j-1] > lcp[i][j]+1)
                        return "";
                if(lcp[i][j]==0)
                {
                    if(d.find(i) == d.find(j))
                        return "";
                }
            }
        }
        map<int,char> mapping;
        char c = 'a';
        string ans(n,'#');
        for(int i=0;i<n;i++)
        {
            int p = d.find(i);
            if(mapping.find(p)==mapping.end())
                mapping[p] = c++;
            if(c == 'z'+2)
                return "";
            ans[i] = mapping[p];
        }
        return ans;
    }
};