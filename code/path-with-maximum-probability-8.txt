    vector<vector<pair<int, double>>> graph(n);
    
    for(int i=0; i<edges.size(); i++)
    {
        graph[edges[i][0]].push_back({edges[i][1], pro[i]});
        graph[edges[i][1]].push_back({edges[i][0], pro[i]});   
    }
    
    vector<int> visited(n, false);
    
    visited[start] = true;
    
    vector<double> dist(n, 0.0);
    
    dist[start] = 1.0;
    
    priority_queue<pair<double,int>> q;
    
    q.push({1.0,start});
    
    while(!q.empty())
    {
        auto it = q.top();
        q.pop();
        
        double prob = it.first;
        int source = it.second;
        
        for(auto &x: graph[source])
        {
            if(dist[x.first] < prob*x.second)
            {
                dist[x.first] = prob*x.second;
                
                q.push({dist[x.first],x.first});
                
                visited[x.first] = true;
            }
        }
    }
    
    return dist[end];
    
}