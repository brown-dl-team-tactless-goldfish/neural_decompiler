class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid.size() == 0) return 0;
        int r = grid.size();
        int c = grid[0].size();
        queue<pair<int,int>> q;
        if(grid[0][0] == 0) {
            q.push({0,1});
        }
        
        vector<vector<int>> dir{{0,1},{1,0},{1,1},{-1,-1},{-1,1},{0,-1},{-1,0},{1,-1}};
        
        while(!q.empty()) {
            auto cur = q.front();
            q.pop();
            int x = cur.first/1000;
            int y = cur.first%1000;
            int dist = cur.second;
            if(x == r - 1 && y == c - 1) return dist;
            if(grid[x][y] == 0) {
                for(int i = 0;i<8;i++) {
                    int n_x = x + dir[i][0];
                    int n_y = y + dir[i][1];
                    if(n_x>=0 && n_x<r && n_y >=0 && n_y <c && grid[n_x][n_y] == 0) {
                        q.push({n_x * 1000 + n_y, dist + 1});
                    }
                }
            }
            grid[x][y] = 1;
        }
        return -1;
    }
};