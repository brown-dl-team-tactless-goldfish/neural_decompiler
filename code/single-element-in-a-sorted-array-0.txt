int singleNonDuplicate(int* nums, int numsSize){
    if(numsSize == 1)
        return nums[0];
    
    if(nums[0] != nums[1])
        return nums[0];
    
    if(nums[numsSize-1] != nums[numsSize-2])
        return nums[numsSize-1];
    
    int left = 2, right = numsSize-3;
    int mid;
    bool ptrL, ptrR;
    while(left < right){
        mid = (left + right)/2;
        ptrL = (nums[mid] == nums[mid-1]) ? true : false;
        ptrR = (nums[mid] == nums[mid+1]) ? true : false;
        if((ptrL == false) && (ptrR == false))
            return nums[mid];
        
        if(mid %2 == 0){
            if(ptrL)
                right = mid - 2;
            else 
                left = mid + 2;
        }
        else{
            if(ptrR)
                right = mid - 1;
            else
                left = mid + 1;
        }
    }

    if(nums[left] != nums[left-1] || nums[left] != nums[left+1])
        return nums[left];
    else
        return nums[right];

}