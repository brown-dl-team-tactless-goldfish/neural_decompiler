class Solution {
public:
    int minimumVisitedCells(vector<vector<int>>& grid) {
        int ans = 1;
        queue<pair<int,int>> q;
        q.push({0,0});
        vector<vector<bool>> vis(grid.size(),vector<bool> (grid[0].size()));
        while(q.size()){
            int sz = q.size();
            ans++;
            while(sz--){
                auto [i,j] = q.front(); q.pop();
                if(i == grid.size()-1 and j == grid[0].size()-1) return ans-1;
                for(int col=j+1;col<=(grid[i][j]+j);col++){
                    if(col >= grid[0].size() or vis[i][col]) continue;
                    q.push({i,col}); vis[i][col] = true;
                    if(i == grid.size()-1 and col == grid[0].size()-1) return ans;
                }
                for(int row=i+1;row<=(grid[i][j]+i);row++){
                    if(row >= grid.size() or vis[row][j]) continue;
                    q.push({row,j}); vis[row][j] = true;
                    if(row == grid.size()-1 and j == grid[0].size()-1) return ans;
                }
            }
        }
        return -1;
    }
};