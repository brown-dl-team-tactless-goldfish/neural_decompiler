class Solution {
public:
    int countPyramids(vector<vector<int>>& g) {
        int n=g.size();
        int m=g[0].size();
        vector<vector<int>>dp(n,vector<int>(m));
        int ans=0;
         dp=g;
        for(int i=n-2;i>=0;i--)
        {
            for(int j=1;j<m-1;j++)
            {
               
              if(g[i][j]==1)
              {
                  dp[i][j]=min(dp[i+1][j-1],min(dp[i+1][j],dp[i+1][j+1]))+1;
              }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                ans+=max(0,dp[i][j]-1);
            }
        }
        dp=g;
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m-1;j++)
            {
                if(g[i][j])
                {
                    dp[i][j]=min(dp[i-1][j],min(dp[i-1][j-1],dp[i-1][j+1]))+1;
                }
            }
        }
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                ans+=max(0,dp[i][j]-1);
        return ans;
        
    }
};