class Solution {
public:
    long long makeSubKSumEqual(vector<int>& arr, int k) {
        int n = arr.size();

        int no_of_buckets = __gcd(k, n);
        unordered_map<int, vector<int>> buckets;

        for(int ind = 0; ind < n; ind++) {
            buckets[ind % no_of_buckets].push_back(arr[ind]);
        }
        
        long long result = 0;
        for(auto& bucket : buckets) {
            vector<int>& nums = bucket.second;
            int m = nums.size();
            
            for(auto x: nums) cout<<x<<" ";
            cout<<endl;
            
            sort(nums.begin(), nums.end());
            int median = nums[m / 2];

            for(auto& num : nums) {
                result += abs(median - num);
            }
        }

        return result;
    }
};