const int64_t p = 31;
const int64_t MOD = 1e9+9;
    
class Solution {
public:
    
    int distinctEchoSubstrings(string text) {
        int n = (int)text.length();
        vector<int64_t> pow(n);
        vector<int64_t> hash(n);
        pow[0] = 1;
        for (int i = 1; i < n; i++) {
            pow[i] = (pow[i-1] * p) % MOD;
        }
        hash[0] = text[0];
        for (int i = 1; i < n; i++) {
            hash[i] = (hash[i-1] + text[i]*pow[i]) % MOD;
        }
        
        unordered_set<int64_t> seen;
        // For each length
        for (int len = 2; len <= n; len += 2) {
            for (int l = 0; l <= n-len; l++) {
                int r = l + len - 1;
                int a = l, b = a + len/2 - 1;       // First half
                int x = a + len/2, y = r;           // Second half
                
                int64_t part1Hash = (hash[b] - (a-1 >= 0 ? hash[a-1] : 0) + MOD) % MOD;
                part1Hash = (part1Hash * pow[n-1-a]) % MOD;
                
                int64_t part2Hash = (hash[y] - hash[x-1] + MOD) % MOD;
                part2Hash = (part2Hash * pow[n-1-x]) % MOD;
                
                if (part1Hash == part2Hash) 
                    seen.insert(part1Hash);
            }
        }
        return (int)seen.size();
    }
};

/**

Fact 1: We have to check all even length substrings 2, 4, 6, 8, 10, 12...
Fact 2: For each length traverse the string using sliding window. 
So overall complexity is O(n^2). But....

Suppose len = 6. 
You got l = 0, r = 5
String = abcabc

Now question is how to check "abcabc" satisfy given conditon. It would take O(n) time if you manually check first half == second half.

So leverage rolling hash. At first find rolling hash of all prefix of text.
         
         L                   R
 0   1   2   3   4   5   6   7   8
 a   b   c   a   b   c   a   b   c
p^0 p^1 p^2 p^3 p^4 p^5 p^6 p^7 p^8
       |           |           |
       |           |           |
Divide by p^2 for first half
Divide by p^5 for second half

        p^0 p^1 p^2 p^0 p^1 p^2


**/