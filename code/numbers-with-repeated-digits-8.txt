class Solution {
public:

    int dp[10][1<<10][2][2];
    string no;
    int n;
    int kil(int idx, int digits, int isRepeated, int isSmall){
        if(idx == n){
            if(isRepeated)
                return 1;
            return 0;
        }

        if(dp[idx][digits][isRepeated][isSmall] != -1)
            return dp[idx][digits][isRepeated][isSmall];

        dp[idx][digits][isRepeated][isSmall] = 0;

        if(isSmall){
            for(int i=0;i<=9;i++){
                int ndigits = (digits | (1<<i));
                int repeat = ((digits & (1<<i)) || isRepeated);
                dp[idx][digits][isRepeated][isSmall] += kil(idx+1, ndigits, repeat, isSmall);
            }
        }else{
            int upper = no[idx]-'0';
            for(int i=upper;i>=0;i--){
                int ndigits = (digits | (1<<i));
                int repeat = ((digits & (1<<i)) || isRepeated);
                dp[idx][digits][isRepeated][isSmall] += kil(idx+1, ndigits, repeat, (i == upper) ? 0 : 1);
            }
        }
        return dp[idx][digits][isRepeated][isSmall];
    }
    int numDupDigitsAtMostN(int N) {
        while(N){
            no += N%10 + '0';
            N /= 10;
        }
        reverse(no.begin(), no.end());
        int ans  = 0;
        for(int len=2;len<=no.size();len++){
            memset(dp, -1, sizeof dp);
            n = len;
            if(len == no.size()){
                for(int i=no[0]-'0';i>0;i--){
                    int ndigits = (1<<i);
                    ans += kil(1, ndigits, 0, (i == no[0]-'0') ? 0 : 1);
                }
            }else{
                for(int i=9;i>0;i--){
                    int ndigits = (1<<i);
                    ans += kil(1, ndigits, 0, 1);
                }
            }
        }
        return ans;
    }
};
