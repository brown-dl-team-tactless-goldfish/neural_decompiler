class Solution {
public:
    int minMoves(vector<int>& nums, int k) {
        int n=nums.size();
        long long  radius=(k-1)/2;
        vector<int> onesind;
        
        for(int i=0;i<n;i++)
            if(nums[i])
                onesind.push_back(i);
        
        int m=onesind.size();
        long long presum[m+1];
        presum[0]=0;
        for(int i=0;i<m;i++)
            presum[i+1]=presum[i]+onesind[i];
        
        long long int mini=INT_MAX;
        
        if(k%2)
        {
            for(int i=0;i<m-k+1;i++)
            {
                long long blue=presum[i+radius]-presum[i];
                long long red=presum[i+2*radius+1]-presum[i+radius+1];
                cout<<red<<" "<<blue;
                mini=min(mini,red-blue-radius*(radius+1));
            }
        }
        else
        {
            for(int i=0;i<m-k+1;i++)
            {
                long long int blue=presum[i+radius]-presum[i];
                long long int red=presum[i+2*radius+2]-presum[radius+1+i];
                cout<<red<<" "<<blue;
                mini=min(mini,red-blue-onesind[i+radius]-radius*(radius+1)-(radius+1));
            }
        }
        return mini;
    }
};`