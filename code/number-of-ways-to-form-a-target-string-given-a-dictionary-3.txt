class Solution {
public:
    int dp[1001][1001];
    long long M = 1e9 + 7;
    vector<map<int, int> > chIdx;
    long long dfs(string &t, int i, int j) {
        if(i >= chIdx.size()) return j == t.size();
        if(j == t.size()) return 1;
        if(dp[i][j] >= 0) return dp[i][j];
        long long res = 0;
        if(chIdx[i][t[j]])
            res = dfs(t, i + 1, j + 1) * chIdx[i][t[j]];
        res += dfs(t, i + 1, j);
        res %= M;
        return dp[i][j] = res;
    }
    int numWays(vector<string>& words, string target) {
        memset(dp, -1, sizeof(dp));
        chIdx.resize((words[0].size()));
        for(auto &word : words) {
            for(int i = 0; i < word.size(); ++i) {
                ++chIdx[i][word[i]];
            }
        }
        return dfs(target, 0, 0);
    }
};