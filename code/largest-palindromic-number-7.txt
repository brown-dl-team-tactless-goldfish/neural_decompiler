class Solution {
public:
    string largestPalindromic(string num) {
        /* greedy - build a count of numbers, and chuck the largest pairs on the outside */
        map<char,int> freq_map;
        
        for (const auto& c : num)
        {
            freq_map[c]++;
        }
        
        /* find the largest loner */
        char largest_loner = 'a';
        for (auto it = freq_map.rbegin(); it != freq_map.rend(); it++)
        {
            if (it->second % 2 != 0)
            {
                largest_loner = it->first;
                it->second--;
                break;
            }
        }
        
        string ret = "";
        
        /* build palindrome */
        for (auto it = freq_map.rbegin(); it != freq_map.rend(); it++)
        {
            cout << it->first << ", " << it->second << endl;
            if (it->first == '0' && ret.size() == 0)
            {
                /* return the largest loner */
                if (largest_loner != 'a')
                    return string(1, largest_loner);
                else
                    return string(1, '0');
            }
            
            while(it->second / 2 > 0)
            {
                if (!ret.size())
                {
                    ret = string(2, it->first);
                }
                else
                {  
                    int midway = ret.size() / 2;
                    ret.insert(midway, string(2, it->first));
                }
                
                it->second -= 2;
            }
        }
        
        if (largest_loner != 'a')
            ret.insert(ret.size() / 2, string(1, largest_loner));
        
        return ret;
    }
};