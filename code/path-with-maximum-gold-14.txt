public class Solution {
    private int res = 0;
    
    public int GetMaximumGold(int[][] grid) {
        if (grid == null || grid.Length == 0)
            return res;
        
        for (int i = 0; i < grid.Length; i++)
            for (int j = 0; j < grid[0].Length; j++)
                if (grid[i][j] != 0)
                    DFS(grid, i, j, 0, new bool[grid.Length, grid[0].Length]);
        
        return res;
    }
    
    private void DFS(int[][] grid, int i, int j, int cur, bool[,] visited)
    {
        bool move = false;
        
        cur += grid[i][j];
        visited[i, j] = true;
        
        if (i - 1 > -1 && !visited[i - 1, j] && grid[i - 1][j] != 0)
        {
            DFS(grid, i - 1, j, cur, visited);
            move = true;
        }
        
        if (j - 1 > -1 && !visited[i, j - 1] && grid[i][j - 1] != 0)
        {
            DFS(grid, i, j - 1, cur, visited);
            move = true;
        }
        
        if (i + 1 < grid.Length && !visited[i + 1, j] && grid[i + 1][j] != 0)
        {
            DFS(grid, i + 1, j, cur, visited);
            move = true;
        }
        
        if (j + 1 < grid[0].Length && !visited[i, j + 1] && grid[i][j + 1] != 0)
        {
            DFS(grid, i, j + 1, cur, visited);
            move = true;
        }
        
        visited[i, j] = false;
        
        if (!move)
            res = Math.Max(res, cur);
    }
}