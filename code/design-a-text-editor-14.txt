class Node{
public:
    char ch;
    Node* next;
    Node* prev;
    Node(char c) {
        ch = c;
        next = prev = NULL;
    }
};


class TextEditor {
    Node *head, *cur, *tail;
    
	// To Print min(10, len)
    string getLast() {
        string res = "";
        int ct = 0;
        Node * temp = cur;
        while(ct < 10 && temp != head) {
            res += temp->ch;
            temp = temp->prev;
            ct++;
        }
        reverse(res.begin(), res.end());
        return res;
    }
    
public:
    TextEditor() {
        head = new Node('#');
        tail = new Node('#');
        cur = head;
        head->next = tail;
        tail->prev = head;
    }
    
    void addText(string text) {
        for(auto & c : text) {
            Node* nextNode = cur->next;
            cur->next = new Node(c);
            cur->next->prev = cur;
            cur->next->next = nextNode;
            nextNode->prev = cur->next;
            cur = cur->next;
        }
    }
    
    int deleteText(int k) {
        int ct = 0;
        Node* nextNode = cur->next;
        while(cur != head && k) {
            cur = cur->prev;
            ct++;
            k--;
        }
        cur->next = nextNode;
        nextNode->prev = cur;
        return ct;
    }
    
    string cursorLeft(int k) {
        while(cur != head && k) {
            cur = cur->prev;
            k--;
        }
        return getLast();
    }
    
    string cursorRight(int k) {
        while(cur->next != tail && k) {
            cur = cur->next;
            k--;
        }
        return getLast();
    }
};

/**
 * Your TextEditor object will be instantiated and called as such:
 * TextEditor* obj = new TextEditor();
 * obj->addText(text);
 * int param_2 = obj->deleteText(k);
 * string param_3 = obj->cursorLeft(k);
 * string param_4 = obj->cursorRight(k);
 */