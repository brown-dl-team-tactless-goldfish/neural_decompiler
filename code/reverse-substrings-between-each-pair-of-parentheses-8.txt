char * reverseParentheses(char * s){
    char stack[2001];
    int stkptr = 0;
    int parenMatch = 0;
    int i = 0;

    char* output = (char*)malloc(sizeof(char)*2000);
    for (int i = 0; i < 2000; i++) // does not set to 0 in C!
        output[i] = 0;
    
    while (*s != 0)
    {
        //printf("cur char %c, param %i\n", *s, parenMatch);
        if (parenMatch == 0 && *s != '(')
        {
            output[i] = *s;
            
            //printf("send to output %c\n", *s);
            i++;
        }
        else if (*s == '(')
        {
            stack[stkptr++] = *s;
            //printf("push %c\n ", *s);
            parenMatch++;
        }
        else if (parenMatch != 0 && *s != ')')
        {
            stack[stkptr++] = *s;
            //printf("push %c\n", stack[stkptr-1]);
        }
        else if (*s == ')')
        {
            int temp = i;
            stkptr--;
            //printf("temp %i\n", i);
            while (stack[stkptr] != '(')
            {
                //printf("popping %c\n", stack[stkptr]);
                output[temp++] = stack[stkptr--]; 
            }
            parenMatch--;
            //printf("%i, %i\n",parenMatch, stkptr);
            int j = 0;
            if (parenMatch != 0) // if there are still (, then put everything back into stack
            {
                for(j = i; j < temp; j++)
                {
                    //printf("restoring %c\n", output[j]);
                    stack[stkptr++] = output[j];
                }
            }
            else // if there aren't anymore param
            {
                i = temp;
            }
        }
        s++;
    }
    //printf("this is the answer %s", output);
    return output;
}