class Solution {
public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector <vector <int>> v(m, vector <int> (n, 0));
		
		//guards 1
        for(auto i:guards){
            v[i[0]][i[1]] = 1;
        }
		
		//walls 2
        for(auto i:walls){
            v[i[0]][i[1]] = 2;
        }
		
		//left to right
        
        for(int i=0; i<m; i++){
            int prev = v[i][0];
            for(int j=1; j<n; j++){
                int t = v[i][j];
                if(prev == 1 && (v[i][j] != 1 && v[i][j] != 2)){
                    v[i][j] = -1;
                }
                if(t == 2 || t == 1)
                prev = t;
            }
        }
        
		//right to left
	
        for(int i=0; i<m; i++){
            int prev = v[i][n-1];
            for(int j=n-2; j>=0; j--){
                int t = v[i][j];
                if(prev == 1 && (v[i][j] != 1 && v[i][j] != 2)){
                    v[i][j] = -1;
                }
                if(t == 2 || t == 1)
                prev = t;
            }
        }
		
		//top to bottom
        
        for(int i=0; i<n; i++){
            int prev = v[0][i];
            for(int j=1; j<m; j++){
                int t = v[j][i];
                if(prev == 1 && (v[j][i] != 1 && v[j][i] != 2)){
                    v[j][i] = -1;
                }
                if(t == 2 || t == 1)
                prev = t;
            }
        }
		
		//bottom to top
        
        for(int i=0; i<n; i++){
            int prev = v[m-1][i];
            for(int j=m-2; j>=0; j--){
                int t = v[j][i];
                if(prev == 1 && (v[j][i] != 1 && v[j][i] != 2)){
                    v[j][i] = -1;
                }
                if(t == 2 || t == 1)
                prev = t;
            }
        }
        
        int c = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(v[i][j] == 0)
                    c += 1;
            }
        }
        
        return c;
    }
};