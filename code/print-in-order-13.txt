typedef struct {
    volatile int turn;
} Foo;

Foo* fooCreate() {
    Foo* obj = (Foo*) malloc(sizeof(Foo));
    obj->turn = 1;
    return obj;
}

void first(Foo* obj) {
    printFirst();
    __atomic_fetch_add(&obj->turn, 1, __ATOMIC_SEQ_CST);
}

void second(Foo* obj) {
    while (obj->turn != 2)
        ;
    printSecond();
    __atomic_fetch_add(&obj->turn, 1, __ATOMIC_SEQ_CST);
}

void third(Foo* obj) {
    while (obj->turn != 3)
        ;
    printThird();
}

void fooFree(Foo* obj) {
    free(obj);
}