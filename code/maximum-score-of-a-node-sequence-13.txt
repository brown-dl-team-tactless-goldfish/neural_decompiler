#define Node pair<int, int>
#define makeNode(i, s) make_pair(s, i)
#define getNode() second
#define getScore() first

class Solution {
private:
    int INVALID = -1;
public:
    int maximumScore(vector<int>& scores, vector<vector<int>>& edges) {
        int k = 4;
        int n = scores.size();
        vector<vector<Node>> adjList(n);
        for(auto& edge: edges){
            int u = edge[0];
            int v = edge[1];
            adjList[u].push_back(makeNode(v, scores[v]));
            adjList[v].push_back(makeNode(u, scores[u]));
        }
        for(int i = 0; i < n; i++){
            sort(adjList[i].begin(), adjList[i].end(), greater<Node>());
        }
        vector<bool> vis(n, false);
        int ans = INVALID;
        for(auto& edge: edges){
            int u = edge[0];
            int v = edge[1];
            vis[u] = vis[v] = true;
            int score = scores[u] + scores[v];
            for(int i = 0; i < k-1 && i < adjList[u].size(); i++){
                if(vis[adjList[u][i].getNode()]){
                    continue;
                }
                vis[adjList[u][i].getNode()] = true;
                score += scores[adjList[u][i].getNode()];
                for(int j = 0; j < k-1 && j < adjList[v].size(); j++){
                    if(vis[adjList[v][j].getNode()]){
                        continue;
                    }
                    vis[adjList[v][j].getNode()] = true;
                    score += scores[adjList[v][j].getNode()];
                    ans = max(ans, score);
                    score -= scores[adjList[v][j].getNode()];
                    vis[adjList[v][j].getNode()] = false;
                }
                score -= scores[adjList[u][i].getNode()];
                vis[adjList[u][i].getNode()] = false;
            }
            vis[u] = vis[v] = false;
        }
        return ans;
    }
};