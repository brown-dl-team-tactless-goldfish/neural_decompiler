// Uncomment to improve debugability (decreasing performance)
//#define DEBUG

#ifdef DEBUG
# define ASSERT assert
# define PRINT  printf
#else
# define ASSERT
# define PRINT
#endif

static void bSearch(int** fruits, int fSize, int start, int* left, int* right)
{
    *left = 0;
    *right = fSize - 1;
    
    while (*left <= *right) {
        const int mid = (*left + *right)/2;
        
        if (fruits[mid][0] < start) {
            *left = mid + 1;
        } else if (fruits[mid][0] > start) {
            *right = mid - 1;
        } else {
            *left = mid;
            *right = mid;
            break;
        }
    }
}

static int findMaxRight(int** fruits, int fSize, int cur, int k)
{
    const int origLocation = cur;
    int maxLeft = cur - 1;
    int sumLeft = 0;
    int max = 0;
    int sumRight = 0;
    
    for (; maxLeft >= 0; maxLeft--) {
        if ((fruits[cur][0] - fruits[maxLeft][0]) <= k) {
            sumLeft += fruits[maxLeft][1];
        } else {
            maxLeft++;
            break;
        }
    }
    if (maxLeft == -1) { 
        maxLeft++;
    }
    
    PRINT("Max Left: %d %d\n", maxLeft, sumLeft);
    
    while (1) {
        sumRight += fruits[cur][1];
        
        if ((sumRight + sumLeft) > max) {
            max = sumRight + sumLeft;
        }
        
        if (cur == (fSize - 1)) {
            break;
        } else {
            cur++;
            k -= fruits[cur][0] - fruits[cur - 1][0];
            if (k < 0) {
                break;
            } else if (k > (fruits[cur][0] - fruits[origLocation][0])) {
                while (maxLeft < origLocation && (fruits[cur][0] - fruits[maxLeft][0]) > k) {
                    sumLeft -= fruits[maxLeft][1];
                    maxLeft++;
                }
            } else {
                sumLeft = 0;
            } 
        }
    }
    
    return max;
}

static int findMaxLeft(int** fruits, int fSize, int cur, int k)
{
    const int origLocation = cur;
    int maxRight = cur + 1;
    int sumRight = 0;
    int max = 0;
    int sumLeft = 0;
    
    for (; maxRight < fSize; maxRight++) {
        if ((fruits[maxRight][0] - fruits[cur][0]) <= k) {
            sumRight += fruits[maxRight][1];
        } else {
            maxRight--;
            break;
        }
    }
    if (maxRight == fSize) {
        maxRight--;
    }
    
    PRINT("Max Right: %d %d\n", maxRight, sumRight);
    
    while (1) {
        sumLeft += fruits[cur][1];
        
        if ((sumRight + sumLeft) > max) {
            max = sumRight + sumLeft;
        }
        
        if (cur == 0) {
            break;
        } else {
            cur--;
            k -= fruits[cur + 1][0] - fruits[cur][0];
            if (k < 0) {
                break;
            } else if (k > (fruits[origLocation][0] - fruits[cur][0])) {
                while (maxRight > origLocation && (fruits[maxRight][0] - fruits[cur][0]) > k) {
                    sumRight -= fruits[maxRight][1];
                    maxRight--;
                }
            } else {
                sumRight = 0;
            }
        }
    }
    
    return max;
}

int maxTotalFruits(int** fruits, int fruitsSize, int* fruitsColSize, int startPos, int k){
    int left = -1;
    int right = -1;
    
    bSearch(fruits, fruitsSize, startPos, &right, &left);
    PRINT("First Fruit: %d %d\n", left, right);
    
    if (right < fruitsSize) {
        const int newK = k - (fruits[right][0] - startPos);
        if (newK >= 0) {
            right = findMaxRight(fruits, fruitsSize, right, newK);
        } else {
            right = 0;
        }
    } else {
        right = 0;
    }

    if (left > -1) {
        const int newK = k - (startPos - fruits[left][0]);
        if (newK >= 0) {
            left = findMaxLeft(fruits, fruitsSize, left, newK);
        } else {
            left = 0;
        }
    } else {
        left = 0;
    }
        
    if (left > right) {
        return left;
    } else {
        return right;
    }
}