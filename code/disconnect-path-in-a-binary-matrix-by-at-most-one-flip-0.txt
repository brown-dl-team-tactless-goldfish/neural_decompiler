bool DFS1(int** grid, int m, int n, int** data, int d_idx , int x, int y){
    if(x == m-1 && y == n-1)
        return true ;
    data[d_idx][0] = x ;
    data[d_idx][1] = y ;
    if((y+1) < n && grid[x][y+1] == 1 && DFS1(grid, m, n, data, d_idx+1, x, y+1))
        return true ;
    if((x+1) < m && grid[x+1][y] == 1 && DFS1(grid, m, n, data, d_idx+1, x+1, y))
        return true ;
    return false ;
}

bool DFS2(int** grid, int m, int n, int** data, int d_idx , int x, int y){
    if(x == m-1 && y == n-1)
        return true ;
    data[d_idx][0] = x ;
    data[d_idx][1] = y ;
    if((x+1) < m && grid[x+1][y] == 1 && DFS2(grid, m, n, data, d_idx+1, x+1, y))
        return true ;
    
    if((y+1) < n && grid[x][y+1] == 1 && DFS2(grid, m, n, data, d_idx+1, x, y+1))
        return true ;

    return false ;
}


bool isPossibleToCutPath(int** grid, int gridSize, int* gridColSize){
    int m = gridSize ;
    int n = *gridColSize ;
    if(m == 1 && n <= 2)
        return false ;
    if(n == 1 && m <= 2)
        return false ;
    
    if(n == 1 || m == 1)
        return true ;
    
    if(grid[0][1] == 0 || grid[1][0] == 0)
        return true ;
    
    if(grid[m-1][n-2] == 0 || grid[m-2][n-1] == 0) 
        return true ;
    
    int N = m + n - 3 ;
    int** data1 = malloc(N * sizeof(int*)) ;
    int** data2 = malloc(N * sizeof(int*)) ;
    for(int i = 0; i < N; i++){
        data1[i] = malloc(2 * sizeof(int)) ;
        data2[i] = malloc(2 * sizeof(int)) ;
    }
    bool ans = false; 
    bool up = DFS1(grid, m, n, data1, 0, 0, 1) ;
    if(up == false){
        ans = true ;
        goto exit ;
    }
    
    bool down = DFS2(grid, m, n, data2, 0, 1, 0) ;
    if(down == false){
        ans = true ;
        goto exit ;
    }
    
    for(int i = 0; i < m+n-3; i++){
        if(data1[i][0] == data2[i][0] && data1[i][1] == data2[i][1]){
            ans = true ;
            break ;
        }
    }
    exit :
    for(int i = 0; i < N; i++){
        free(data1[i]) ;
        free(data2[i]) ;
    }
    free(data1) ;
    free(data2) ;
    return ans ;
}