class Solution {
public:
    vector<int> g[100005];
    vector<bool> hasApples;

    int dfs(int u, int par) {
        int totalTime = 0, childTime = 0;
        for(auto v: g[u]) {
            if(v == par) continue;
            childTime = dfs(v, u);
            if(childTime or hasApples[v]) totalTime += childTime + 2;
        }
        return totalTime;
    }

    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        hasApples = hasApple;
        for(auto x: edges) {
            g[x[0]].push_back(x[1]);
            g[x[1]].push_back(x[0]);
        }
        int ans = dfs(0, -1);
        return ans;
    }
};