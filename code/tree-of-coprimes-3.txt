int n;
vector<int> vis, ans;
vector<vector<int>> g;
vector<vector<pair<int, int>>> nodes;

void dfs(int u, int level, vector<int> &nums) {
    vis[u] = 1;
    int val = nums[u];
    nodes[val].push_back({u, level});
    
    for(auto v: g[u]) {
        if(!vis[v]) {
            // decide the answer for v from nodes
            int maxLevel = -1;
            
            for(int i=1; i<=50; i++) {
                if(__gcd(i, nums[v]) == 1 && !nodes[i].empty()) {
                    int ancesLev = nodes[i].back().second;
                    int ances = nodes[i].back().first;
                    if(ancesLev > maxLevel) {
                        ans[v] = ances;
                        maxLevel = ancesLev;
                    }
                }
            }
            dfs(v, level+1, nums);
        }
    }
    nodes[val].pop_back();
}

vector<int> getCoprimes(vector<int>& nums, vector<vector<int>>& edges) {
    n = nums.size();
    g.assign(n, vector<int>());
    nodes.assign(51, vector<pair<int, int>>());
    vis.assign(n, 0);
    ans.assign(n, -1);
    
    for(auto e: edges) {
        g[e[0]].push_back(e[1]);
        g[e[1]].push_back(e[0]);
    }

    ans[0] = -1;
    dfs(0, 0, nums);
    
    return ans;
}