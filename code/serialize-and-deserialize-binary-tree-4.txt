/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

#define NULL_BYTE 0xFFFF

int count(struct TreeNode* root)
{
    int result = 1;
    if ( root == NULL ) return result;
    else
    {
        result = result + count(root->left);
        result = result + count(root->right);
    }
    
    return result;
}

int traversal(struct TreeNode* root, int* result, int idx)
{
    if ( root == NULL )
    {
        result[idx] = NULL_BYTE;
        return idx + 1;
    }
    else
    {
        result[idx] = root->val;             
        idx++;
        idx = traversal(root->left, result, idx);
        idx = traversal(root->right, result, idx);
    }
    
    return idx;
}

void printf_all(char* result, int count)
{
    int i;
    for (i = 0; i < count; i++) 
        printf("%d ", (int)result[i]);
}

struct TreeNode* build_tree(int *data, int size, int *idx)
{
    struct TreeNode *new = NULL;
    
    if(data == NULL) return NULL;
    
    if(size == *(idx))
    {
        *idx = *idx + 1;
        return NULL;   
    }
    else
    {
        if (data[*idx] == NULL_BYTE)
        {
            *idx = *idx + 1;
            return NULL;
        }
        else
        {   
            new = malloc(sizeof(struct TreeNode));
            new->val = data[*idx];   
            *idx = *idx + 1;
            new->left = build_tree(data, size, idx);
            new->right = build_tree(data, size, idx);
        }
    }
    return new;
}

/** Encodes a tree to a single string. */
char* serialize(struct TreeNode* root) {
    int cnt;
    cnt = count(root);  
    int* result = malloc(sizeof(int*)*cnt+1); 
    memset(result, 0x00, sizeof(int*)*cnt+1);
    result[0] = cnt;
    traversal(root, result+1, 0);
    
    return (char*)result;
}

/** Decodes your encoded data to tree. */
struct TreeNode* deserialize(char* data) {
    int* int_data = (int*)data;
    int size = int_data[0];
    
    struct TreeNode *result = NULL;
    
    {
        int* idx = malloc(sizeof(int));
        *idx = 0;
        result = build_tree(int_data+1, size, idx);
    }
    
    return result;
}

// Your functions will be called as such:
// char* data = serialize(root);
// deserialize(data);