class Solution {
public:
    /*
    if a line segment is horizontal, we push (a, b, x, 0) to visited,
    representing the line from (a,b) to (a+x,b).
    
    if a line segment is vertical, we push (c, d, 0, y) to visited,
    representing the line from (c,d) to (c,d+y).
    
    we make sure that x and y are positive regardless of the direction of the line segment
    */
    
    /*
    A horizontal line segment (a,b,x,0) intersects a vertical line segment (c,d,0,y) if 
              (c,d+y)
                ^
                |
                |    
    (a,b) --------------> (a+x,b)
                |
                |
               (c,d)
    
    (1) a <= c <= a+x
    (2) d <= b <= d+y
    */

    /*
    A horizontal line segment (a,b,x,0) intersects another horizontal line segment 
    (c,d,t,0) if 
    
    (1) b==d; and either one of (2a), (2b), (2c) and (2d) are satisfied
    (2a) a <= c <= a+x
    (2b) c <= a <= c+t
    (2c) a <= c <= c+t <= a+x
    (2d) c <= a <= a+x <= c+t
    */
    
    /*
    A vertical line segment (a,b,0,y) intersects another vertical line segment 
    (c,d,0,t) if 
    
    (1) a==c; and either one of (2a), (2b), (2c) and (2d) are satisfied
    (2a) b <= d <= b+y
    (2b) d <= b <= d+t
    (2c) b <= d <= d+t <= b+y
    (2d) d <= b <= b+y <= d+t
    */
    
    std::vector<std::vector<int>> visited;
    
    int x=0, y=0; //current position (x,y)
    
    void print(std::vector<int> v){
        for (int x: v){
            std::cout<<x<<", ";
        }
        std::cout<<"\n";
    }
    
    bool isSelfCrossing(vector<int>& distance) {
        int len = distance.size();
        std::vector<int> curr, temp;
        
        if (len<=3) return false;
        
        for (int i=0; i<len; i++){
            if (i%4==0){
                visited.push_back(std::vector<int>{x, y, 0, distance[i]});
                y += distance[i];
            
            }else if (i%4==1){
                visited.push_back(std::vector<int>{x-distance[i], y, distance[i], 0});
                x -= distance[i];
                
            }else if (i%4==2){
                visited.push_back(std::vector<int>{x, y-distance[i], 0, distance[i]});
                y -= distance[i];
            
            }else if (i%4==3){
                visited.push_back(std::vector<int>{x, y, distance[i], 0});
                x += distance[i];
            }
             
            curr = visited.back();
            
            if (i>=3){
                //check if the current line segment intersects visited[i-3]
                temp = visited[i-3];
                //(1) curr is horizontal
                if (curr[3]==0){
                    if (curr[0]<=temp[0] && temp[0]<=curr[0]+curr[2] 
                        && temp[1]<=curr[1] && curr[1]<=temp[1]+temp[3])
                        return true;
                }
                //(2) curr is vertical
                if (curr[2]==0){
                    if (curr[1]<=temp[1] && temp[1]<=curr[1]+curr[3]
                        && temp[0]<=curr[0] && curr[0]<=temp[0]+temp[2])
                        return true;
                }
            }
            
            if (i>=4){
                //check if the current line segment intersects visited[i-4]
                temp = visited[i-4];
                //(1) curr is horizontal
                if (curr[3]==0){
                    if (curr[1]==temp[1] && curr[0]<=temp[0] && temp[0]<=curr[0]+curr[2])
                        return true;
                    if (curr[1]==temp[1] && temp[0]<=curr[0] && curr[0]<=temp[0]+temp[2])
                        return true;
                    
                    if (curr[1]==temp[1] && curr[0]<=temp[0] 
                        && temp[0]+temp[2]<=curr[0]+curr[2])
                        return true;
                    
                    if (curr[1]==temp[1] && temp[0]<=curr[0]
                        && curr[0]+curr[2]<=temp[0]+temp[2])
                        return true;
                }
                //(2) curr is vertical
                if (curr[2]==0){
                    if (curr[0]==temp[0] && curr[1]<=temp[1] && temp[1]<=curr[1]+curr[3])
                        return true;
                    
                    if (curr[0]==temp[0] && temp[1]<=curr[1] && curr[1]<=temp[1]+temp[3])
                        return true;
                    
                    if (curr[0]==temp[0] && curr[1]<=temp[1]
                        && temp[1]+temp[3]<=curr[1]+curr[3])
                        return true;
                    
                    if (curr[0]==temp[0] && temp[1]<=curr[1]
                        && curr[1]+curr[3]<=temp[1]+temp[3])
                        return true;
                }
            }
            
            if (i>=5){
                //check if the current line segment intersects visited[i-5]
                temp = visited[i-5];
                //(1) curr is horizontal
                if (curr[3]==0){
                    if (curr[0]<=temp[0] && temp[0]<=curr[0]+curr[2] 
                        && temp[1]<=curr[1] && curr[1]<=temp[1]+temp[3])
                        return true;
                }
                //(2) curr is vertical
                if (curr[2]==0){
                    if (curr[1]<=temp[1] && temp[1]<=curr[1]+curr[3]
                        && temp[0]<=curr[0] && curr[0]<=temp[0]+temp[2])
                        return true;
                }
            }
        }
        
        return false;
    }
};

