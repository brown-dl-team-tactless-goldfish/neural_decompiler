class Solution {
public:
    int memo[1001][1001];
    int MOD = 1e9 + 7, n;
    bool isPrime(char& c){
        return c == '2' || c == '3' || c == '5' || c == '7'; 
    }
    int beautifulPartitions(string s, int k, int len) {
        if(!isPrime(s[0]))
            return 0;
        memset(memo, -1, sizeof(memo));
        n = s.size();
        return dp(s, len, 0, k, len);
    }
    int dp(string& s, int idx, int cuts, int k, int len){
        if(idx > n)
            return 0;
        if(idx == n)
            return cuts == k - 1 && !isPrime(s.back());
        if(memo[idx][cuts] != -1)
            return memo[idx][cuts];
        int ans = dp(s, idx + 1, cuts, k, len) % MOD;
        ans %= MOD;
        if(isPrime(s[idx]) && !isPrime(s[idx - 1]))
            ans += dp(s, idx + len, cuts + 1, k, len) % MOD, ans %= MOD;
        return memo[idx][cuts] = ans;
    }
};