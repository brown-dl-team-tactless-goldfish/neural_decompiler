
bool matchSubseq(int len, char *word, int hash[26][len], int hash_cnt[26]) {
	int hash_idx[26];
	int s_ptr = 0;
	bool found;
	
	for (int i = 0; i < 26; i++)
		hash_idx[i] = 0;

	while (word[0] != '\0') {
		if (hash_idx[word[0] - 'a'] >= hash_cnt[word[0] - 'a'])
			return false;
		found = false;
		for (int i = hash_idx[word[0] - 'a']; i < hash_cnt[word[0] - 'a']; i++) {
			if (hash[word[0] - 'a'][i] >= s_ptr) {
				found = true;
				s_ptr = hash[word[0] - 'a'][i] + 1;
				hash_idx[word[0] - 'a']++;
				break;
			}
		}
		if (!found)
			return false;
		word++;
	}
	return true;
}


int numMatchingSubseq(char * s, char ** words, int wordsSize){
	int ret = 0, len = strlen(s);
	int hash[26][len];
	int hash_cnt[26];

	// Initialize Hash Table
	for (int i = 0; i < 26; i++) {
		hash_cnt[i] = 0;
		for (int j = 0; j < len; j++) {
			hash[i][j] = -1;
		}
	}
	for (int i = 0; i < len; i++) {
		hash[s[i] - 'a'][hash_cnt[s[i] - 'a']++] = i;
	}
	
	// Calculate number of matched subsequence
	for (int i = 0; i < wordsSize; i++)
		if (matchSubseq(len, words[i], hash, hash_cnt))
			ret++;

	return ret;
}
