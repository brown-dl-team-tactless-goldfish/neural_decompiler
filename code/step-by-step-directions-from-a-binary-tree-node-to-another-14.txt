/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode*find(TreeNode*root,int x,int y )
    {
        if(root==NULL)
        {
            return root;
        }
        if(root->val==x||root->val==y)
        {
            return root;
        }
        auto left=find(root->left,x,y);
        auto right=find(root->right,x,y);
        if(left!=NULL&&right!=NULL)
        {
            return root;
        }
        return left==NULL?right:left;
    }
    bool path(TreeNode*root,int val,string &s)
    {
         if(!root) return false;
        if(root->val == val) return true;
        s.push_back('L');
         if(path(root->left,val,s))
           {
               return true;
           }
          s.pop_back();
          s.push_back('R');
        if(path(root->right, val, s))
        {
           return true;
        }
        s.pop_back();
        return false;
    }
   string getDirections(TreeNode* root, int start, int end)
    {
        string s="";
        TreeNode* lca=find(root,start,end);
         string s1,s2;
         path(lca,start,s1);
         path(lca,end,s2);
        for(auto &it:s1)
        {
            it='U';
        }
        return s1+s2;
    }
};