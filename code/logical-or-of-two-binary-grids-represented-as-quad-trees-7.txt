class Solution {
public:
    Node* intersect(Node* quadTree1, Node* quadTree2) 
    {
        // if a is leaf+true, choose a.
        // if b is leaf+false, choose a.
        if (quadTree1->isLeaf && quadTree1->val == true ||
            quadTree2->isLeaf && quadTree2->val == false)
            return quadTree1;
        // if b is leaf+true, choose b.
        // if a is leaf+false, choose b;
        if (quadTree2->isLeaf && quadTree2->val == true ||
            quadTree1->isLeaf && quadTree1->val == false)
            return quadTree2;
        
        // intersect.
        Node* ret = new Node (false, false, 
                                intersect (quadTree1->topLeft, quadTree2->topLeft),
                                intersect (quadTree1->topRight, quadTree2->topRight),
                                intersect (quadTree1->bottomLeft, quadTree2->bottomLeft),
                                intersect (quadTree1->bottomRight, quadTree2->bottomRight));
        
        // merge if all children are leaves and have the same value.
        if (ret->topLeft->val == ret->topRight->val && ret->topLeft->val == ret->bottomLeft->val && 
            ret->topLeft->val == ret->bottomRight->val &&
            ret->topLeft->isLeaf && ret->topRight->isLeaf && ret->bottomLeft->isLeaf && ret->bottomRight->isLeaf)
        {
            ret->val = ret->topLeft->val;
            ret->isLeaf = true;
            ret->topLeft = ret->topRight = ret->bottomLeft = ret->bottomRight = NULL;
        }
        
        // done.
        return ret;
    }
};