/*
1. Fix a point in the matrix
2. find the number of rectangles of all ones that can be build in right direction like in array [1,1,1,0,1]
	if we fix the first point then we can get 3 rectangles in right direction with all one starting from this fixed point .
	This can be acheived by keeping a presum matrix (for the right direction).
3. similarly find the number of rectangles of all ones that can be build in bottom direction.
4. while doing this also find the rectangles or squares that can be build in diagonal direction
5. Move this fixed point and do these steps again.

NOTE:- For understanding keep in mind all these rectangles we are finding are starting from the fixed point.
	For better understanding Below is the implementation of this idea :-
	
*/
class Solution {
public:
    int numSubmat(vector<vector<int>>& mat) {
        int m=mat.size(),n=mat[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0 ; i<m ; i++)                            //calculate the presum matrix for right direction
            for(int j=n-1 ; j>=0 ; j--)
            {
                if(mat[i][j]==0) continue;
                dp[i][j] = (j!=n-1)?dp[i][j+1]+1:mat[i][j];
            }
        int ans=0;
        for(int i=0 ; i<m ; i++)
            for(int j=0 ; j<n ; j++)
            {
                int c=INT_MAX;
                for(int k=i ; k<m ; k++)
                {
                    c=min(c,dp[k][j]);            //find the number of rectangles in all three directions.
                    ans+=c;
                }
            }
        return ans;
    }
};