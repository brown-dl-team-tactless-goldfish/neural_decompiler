#define pdd pair<double, double>
class Solution {
public:
double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
    vector<pdd> v;
    double skillSum=0,n=quality.size(),ans;
    for(int i=0;i<n;i++) v.push_back({(double)wage[i]/(double)quality[i],(double)quality[i]});   //   {r,qi}
    sort(v.begin(),v.end());
    priority_queue<double> pq;
    for(int i=0;i<n;i++){
        skillSum+=v[i].second,pq.push(v[i].second); //  try taking this new worker
        if(pq.size()>=k){
            if(pq.size()==k){
                ans=v[i].first*skillSum;            //  my company is stable now 
                continue;
            }
            skillSum-=pq.top();pq.pop();            //  try removing the worker who's taking max salary
            ans=min(ans,skillSum*v[i].first);       //  if this new worker saves my money, hire him/her and remove the older worker
        }
    }
    return ans;
}
};