class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        int trend = nums.size()-1; //keep track of values along an ideal line of 'good pairs' descending by one at each index from the end.
        unordered_map<int, int> mp;
        long long c = 0;
        for(int i = nums.size()-1 ; i >= 0; i--){
            trend--;
            mp[nums[i] - trend]++; //deviation from ideal line
            c += nums.size() - i - mp[nums[i]  - trend]; //forms a 'good pair' with any other index-value deviating by same amount; other pairs are bad
        }
        return c;
    }
};