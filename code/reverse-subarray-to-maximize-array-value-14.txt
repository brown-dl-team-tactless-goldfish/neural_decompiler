class Solution { 
public:
    int maxValueAfterReverse(vector<int>& nums) {
        const int n = nums.size();
        int ans = 0;
        //calc base value
        int base = 0, max_delta = 0;
        for (int i = 0; i + 1 < n; i++){
            base += abs(nums[i] - nums[i + 1]);
        }
        //case 1. l == 0 || r == n - 1
        for (int l = 0; l + 1 < n; l++){
            int delta = abs(nums[n - 1] - nums[l]) - abs(nums[l + 1] - nums[l]);
            max_delta = max(max_delta, delta);
        }
        for (int l = 0; l + 1 < n; l++){
            int delta = abs(nums[l + 1] - nums[0]) - abs(nums[l + 1] - nums[l]);
            max_delta = max(max_delta, delta);
        }
        //case 2. l > 0 && r < n - 1
        for (int l = n - 2, minv = (1 << 30), maxv = - (1 << 30); l >= 1; l--){
            int r = l;
            int min_cand = nums[r] + nums[r + 1] + abs(nums[r] - nums[r + 1]);
            int max_cand = nums[r] + nums[r + 1] - abs(nums[r] - nums[r + 1]);
            minv = min(minv, min_cand);
            maxv = max(maxv, max_cand);
            max_delta = max(max_delta, nums[l - 1] + nums[l] - abs(nums[l - 1] - nums[l]) - minv);
            max_delta = max(max_delta, maxv - nums[l - 1] - nums[l] - abs(nums[l - 1] - nums[l]));
        }
        return base + max_delta;
    }
};