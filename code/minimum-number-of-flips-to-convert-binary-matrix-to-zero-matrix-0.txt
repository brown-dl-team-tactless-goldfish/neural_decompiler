typedef struct
{
    int **mat;
    int ans;
}data;

void    putin(data *a, int **mat, int ans, int matSize, int *matColSize)
{
    a->mat = (int**)malloc(matSize * sizeof(int*));
    for(int i = 0 ; i < matSize ; i++) a->mat[i] = (int*)malloc(*matColSize * sizeof(int));
    for(int i = 0 ; i < matSize ; i++) for(int j = 0 ; j < *matColSize ; j++) a->mat[i][j] = mat[i][j];
    a->ans = ans;
}

int     solved(int **mat, int matSize , int *matColSize)
{
    for(int i = 0 ; i < matSize ; i++) for(int j = 0 ; j < *matColSize ; j++) if (mat[i][j] != 0) return 0;
    return 1;
}

int     same(int **mat1, int **mat2, int matSize, int *matColSize)
{
    for(int i = 0 ; i < matSize ; i++) for(int j = 0 ; j < *matColSize ; j++) if (mat1[i][j] != mat2[i][j]) return 0;
    return 1;
}

void    flip(int **mat, int x, int y, int matSize, int *matColSize)
{
    mat[x][y] ^= 1;
    if (x > 0) mat[x - 1][y] ^= 1;
    if (y > 0) mat[x][y - 1] ^= 1;
    if (x < matSize - 1) mat[x + 1][y] ^= 1;
    if (y < *matColSize - 1) mat[x][y + 1] ^= 1;
}

int     **copymat(int **mat, int matSize, int *matColSize)
{
    int **new_mat = (int**)malloc(matSize * sizeof(int*));
    for(int j = 0 ; j < matSize ; j++) new_mat[j] = (int*)malloc(*matColSize * sizeof(int));
    for(int i = 0 ; i < matSize ; i++) for(int j = 0 ; j < *matColSize ; j++) new_mat[i][j] = mat[i][j];
    return new_mat;
}

void printmax(int **mat, int a, int *b)
{
    for(int i = 0 ; i < a ; i++)
    {
        for(int j = 0 ; j < *b ; j++) printf("%d ",mat[i][j]);
        printf("\n");
    }
    printf("\n");
}

int minFlips(int** mat, int matSize, int* matColSize)
{
    data    pos[512];
    int     now = 0;
    putin(pos + now++, mat, 0, matSize, matColSize);
    for (int i = 0 ; i < now ; i++)
    {
     //   printf("new\n");
      //  printf("%d %d\n",i,now);
        if (solved(pos[i].mat, matSize, matColSize) == 1) return (pos[i].ans);
        int **new_mat = copymat(pos[i].mat, matSize, matColSize);
    //                printmax(new_mat, matSize, matColSize);

        for(int x = 0 ; x < matSize ; x++) for(int y = 0 ; y < *matColSize ; y++)
        {
            flip(new_mat, x, y, matSize, matColSize);
            for(int j = 0 ; j < now ; j++)
            {
                if (same(new_mat, pos[j].mat, matSize, matColSize)) break;
                if (j == now - 1)
                {
       //             printmax(new_mat, matSize, matColSize);
                    putin(pos + now++, new_mat, pos[i].ans + 1, matSize, matColSize);
                }
                
            }
            flip(new_mat, x, y, matSize, matColSize);            
        }
    }
    //for(int i = 0 ; i < now ; i++) printmax(pos[i].mat, matSize, matColSize);
    return -1;
}