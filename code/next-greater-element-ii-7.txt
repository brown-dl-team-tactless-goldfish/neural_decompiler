/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int * nextGreaterElements(
	const int nums[const restrict], 	//in
	const int numsLen, 	//in
	int * const restrict pNextGreaterElesLen	//out
){
	assert(nums != NULL && numsLen > 0 && pNextGreaterElesLen != NULL);

	*pNextGreaterElesLen = numsLen;
	int * const restrict nextGreaterEles = 
		(int *)malloc(sizeof (int) * *pNextGreaterElesLen);
	if (NULL == nextGreaterEles){
		*pNextGreaterElesLen = -1;
		return NULL;
	}
	
	int monoStack[numsLen];
	int monoStackLen = 0;
	
	for (int i = 0; i < 2; i += 1){
		for (int j = numsLen - 1; j >= 0; j -= 1){
			while (monoStackLen > 0 && monoStack[monoStackLen - 1] <= nums[j]){
				monoStackLen -= 1;
			}
			
			if (monoStackLen > 0){
				nextGreaterEles[j] = monoStack[monoStackLen - 1];
			}else {
				nextGreaterEles[j] = -1;
			}
			
			monoStack[monoStackLen] = nums[j];
			monoStackLen += 1;
		}
	}
	
	return nextGreaterEles;
}