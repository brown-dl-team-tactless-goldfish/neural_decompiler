class Solution {
public:
        long long power(long long n)   // function to calculate 2^n 
        {
                long long ans=1;
                for(int i=1;i<=n;i++)
                        ans*=2;
                return ans;
        }
    long long xorAllNums(vector<int>& nums1, vector<int>& nums2) 
    {
        vector<long long> bits(32,0);                     // vector for storing each bit frequency 
         int n=nums1.size(),m=nums2.size();         // size of vectors nums1 and nums2
		 
         for(auto it:nums1)                         //for every number N in vector nums1
         {
                 for(int i=0;i<32;i++)             //for every bit B in number N
                 {
                         if(it>>i&1)                  //  if the bit is set  it will contribute m times i,.e size of nums2 
                         {
                                 bits[i]+=m;                 
                         }
                 }
         } 
		 
		 
            for(auto it:nums2)                       //for every number N in vector nums2
         {
                 for(int i=0;i<32;i++)              //for every bit B in number N
                 {
                         if(it>>i&1)
                         {                                    //  if the bit is set  it will contribute n times i,.e size of nums1
                                 bits[i]+=n;
                         }
                 }
         }
            
            long long ans=0;
            for(int i=0;i<32;i++)
            {
                    if(bits[i]&1)                              // if overall contribution of bit is odd it will count in final ans
                    {                                                 
                            ans+=power(i);             // calculating 2 raised to power i (bit value in decimal) 
                    }
            }
            return ans;                           
            
            
            
    }
};