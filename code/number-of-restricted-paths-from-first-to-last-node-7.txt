class Solution {
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        g.resize(n+1);
        for(auto& e:edges){
            g[e[0]].emplace_back(e[1], e[2]);
            g[e[1]].emplace_back(e[0], e[2]);
        }
        
        dis = vector(n+1, INT_MAX);
        numPath = vector(n+1, -1LL);
        numPath[n] = 1;
        
        priority_queue<pair<int,int>> q; //-dis, i
        q.push(pair{0, n});
        while(!q.empty()){
            auto [d, i] = q.top(); q.pop(); 
            d = -d;
            if(d >= dis[i]) continue;
            dis[i] = d;
            for(auto [j, dd] : g[i])
                q.push(pair(-d - dd, j));
        }               
        
        return dp(1);
    }
    
    int dp(int i){
        if(numPath[i] >=0) return numPath[i];
        auto sum = 0LL;
        for(auto [j, dd] : g[i])
            if(dis[i] > dis[j]) sum += dp(j);
        return numPath[i] = sum % mod;
    }

    vector<vector<pair<int,int>>> g;
    vector<int> dis;
    vector<long long> numPath;
    const long long mod = 1e9+7;
};