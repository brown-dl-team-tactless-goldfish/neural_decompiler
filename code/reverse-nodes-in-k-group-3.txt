/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* rev (struct ListNode* c)
{
    if (!c)
        return NULL;
    struct ListNode* p = NULL;
    struct ListNode* n;

    while (c)
    {
        n = c->next;
        c->next = p;
        p = c;
        c = n;
    }
    return (p);
}

struct ListNode* reverseKGroup(struct ListNode* head, int k)
{
    // previous
    struct ListNode* p;
    // current
    struct ListNode* c;
    // backup
    struct ListNode* b;
    // previous 2
    struct ListNode* p2;
    // current 2
    struct ListNode* c2;
    // sentinel
    struct ListNode* sen = (struct ListNode*) malloc (sizeof(struct ListNode));
    sen->next = head;
    p = sen;
    c = sen->next;
    int i = 0;
    bool rev_ll = 1;
    bool once = 1;

    while (c)
    {

        b = p;
        while (i < k)
        {
            p = c;
            c = c->next;
            i++;
            // If this segment has fewer than k nodes,
            // skip reversal and break.
            if (!c && i < k)
            {
                rev_ll = 0;
                break;
            }

        }
        i = 0;
        // when while loop exits, c would have the pointer 
        // to next segment

        if (rev_ll)
        {
            c2 = p->next;
            p->next = NULL;
            b->next = rev (b->next);
            p = b;
            while (p->next)
                p = p->next;
            p->next = c2;
        }
    }
    return (sen->next);
}