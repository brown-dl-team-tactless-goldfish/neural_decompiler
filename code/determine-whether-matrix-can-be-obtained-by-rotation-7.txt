
class Matrix {
    M;
    m;
    n;

    constructor(M) {
        if (M) this.set(M);
    }
    set(M) {
        this.M = M;
        this.m = M.length;
        this.n = M[0].length;
    }

    rotateRight90_rimRotate_array() {
        let { M, m, n } = this;

        function rotateRight90_theRimAt(r, c) {
            let left = [];
            for (let rr = m - 1 - r; rr >= r; rr--) left.push(M[rr][c]);
            let top = M[r].slice(c, n - c);
            let right = [];
            for (let rr = r; rr <= m - 1 - r; rr++) right.push(M[rr][n - 1 - c]);
            let bottom = M[m - 1 - r].slice(c, n - c).reverse();

            for (let cc = c, i = 0; cc <= n - 1 - c; cc++) M[r][cc] = left[i++];
            for (let rr = r, i = 0; rr <= m - 1 - r; rr++) M[rr][n - 1 - c] = top[i++];
            for (let cc = n - 1 - c, i = 0; cc >= c; cc--) M[m - 1 - r][cc] = right[i++];
            for (let rr = m - 1 - r, i = 0; rr >= r; rr--) M[rr][c] = bottom[i++];
        }

        // rotate ALL RIMS (outer to inner)) until reaching mid of rect
        let mhalf = Math.trunc(m / 2);
        let nhalf = Math.trunc(n / 2);
        for (let r = 0, c = 0; r <= mhalf && c <= nhalf; r++, c++) {
            rotateRight90_theRimAt(r, c);
        }
    }
    findRotationOfMisN(N) {
        let { M } = this;

        if (JSON.stringify(M) === JSON.stringify(N)) return true; // initial

        for (let turns = 1; turns <= 3; turns++) {
            this.rotateRight90_rimRotate_array();
            if (JSON.stringify(M) === JSON.stringify(N)) return true; // after 3 rotates
        }

        return false;
    }
}

var findRotation = function (M, N) {
    let m = new Matrix(M);
    return m.findRotationOfMisN(N);
};
