class Solution {
public:
    vector<int> cal(vector<int> &in, vector<vector<int> > &g) {
        queue<int> q;
        vector<int> order;
        for(int i = 0; i < in.size(); i++) {
            if(in[i] == 0) q.push(i);
        }
        while(!q.empty()) {
            int top = q.front();
            q.pop();
            order.push_back(top);
            for(auto nbr : g[top]) {
                in[nbr]--;
                if(in[nbr] == 0) {
                    q.push(nbr);
                }
            }
        }
        return order;
    }
    vector<int> sortItems(int n, int m, vector<int>& group, vector<vector<int>>& beforeItems) {
        for(int i = 0; i < n; i++) {
            if(group[i] == -1) {
                group[i] = m, m++;
            } 
        }
        vector<int> in1(m, 0), in2(n, 0);
        vector<vector<int> > g1(m), g2(n);
        unordered_map<int, vector<int>> grp;
        for(int i = 0; i < beforeItems.size(); i++) {
            for(auto p : beforeItems[i]) {
                if(group[i] != group[p]) {
                    in1[group[i]]++;
                    g1[group[p]].push_back(group[i]);
                } else {
                    in2[i]++;
                    g2[p].push_back(i);
                }
            }
        }
        vector<int> order1 = cal(in1, g1);
        vector<int> order2 = cal(in2, g2);
        if(order1.size() != m || order2.size() != n) return {};
        for(auto x : order2) {
            grp[group[x]].push_back(x);
        }
        vector<int> ans;
        for(auto g : order1) {
            for(auto node : grp[g]) {
                ans.push_back(node);
            }
        }
        return ans;
    }
};