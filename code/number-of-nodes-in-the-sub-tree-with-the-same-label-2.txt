class Solution {
public:
    vector<int> ans;
    int vis[100005];
    vector<int> adj[100005];
    
    vector<int> dfs(int node,string &labels){
        vis[node]=1;
        vector<int> temp(26,0);
        
        for (auto it: adj[node]){
            if (!vis[it]){
                vector<int> ele=dfs(it,labels);
                for (int i=0; i<26; i++){
                    temp[i]+=ele[i];
                }
            }
        }
        
        temp[labels[node]-'a']++;
        ans[node]=temp[labels[node]-'a'];
     return temp;
    }
    
    vector<int> countSubTrees(int n, vector<vector<int>>& v, string labels) {
        int i,j;
        ans.resize(n);
        for (i=0; i<v.size(); i++){
            adj[v[i][0]].push_back(v[i][1]);
            adj[v[i][1]].push_back(v[i][0]);
        }
        
        dfs(0,labels);
        
     return ans;
    }
};