vector<vector<int>> graph;
vector<bool> visited;

void dfs(vector<int>& indx,string& s, int i, vector<char>& letters)
{
    visited[i] = true;
    
    indx.push_back(i);
    
    letters.push_back(s[i]);
    
    for(auto& x: graph[i])
    {
        if(!visited[x])
        {
            dfs(indx,s,x,letters);
        }
    }
}

string smallestStringWithSwaps(string s, vector<vector<int>>& pairs)
{
    
    int n = s.size();
    
    graph.resize(n);
    
    visited.resize(n,false);
    
    for(auto &x: pairs)
    {
        graph[x[0]].push_back(x[1]);
        graph[x[1]].push_back(x[0]);
    }
    
    for(int i=0; i<n; i++)
    {
        vector<int> indx;
        vector<char> letters;
        
        if(!visited[i])
        {
            dfs(indx,s,i, letters);   
            
        }
        
        sort(indx.begin(),indx.end());
        sort(letters.begin(),letters.end());
        
        for(int j=0; j<indx.size(); j++)
        {
            s[indx[j]] = letters[j];
        }
        
        
    }
    
    return s;
    
    
}