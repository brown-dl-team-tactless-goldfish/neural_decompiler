// OJ: https://leetcode.com/contest/biweekly-contest-61/problems/maximum-earnings-from-taxi/
// Author: github.com/lzl124631x
// Time: O(NlogN)
// Space: O(N)
class Solution {
public:
    long long maxTaxiEarnings(int n, vector<vector<int>>& A) {
        sort(begin(A), end(A), [](auto &a, auto &b) { return a[0] > b[0]; }); // Sort the array in descending order of `start`
        map<int, long long> m{{INT_MAX,0}}; // `dp` value. A mapping from a `start` point to the maximum profit we can get in range `[start, Infinity)`
        long long ans = 0;
        for (auto &r : A) {
            int s = r[0], e = r[1], p = r[2];
            m[s] = max(ans, p + e - s + m.lower_bound(e)->second);
            ans = max(ans, m[s]);
        }
        return ans;
    }
};