class Solution {
public:
    int helper(int mask,vector<int> &roles)
    {
        int count=0;
        int n=roles.size();
        for(int i=0;i<n;i++)
        {
            if(mask&1)
            {
                roles[i]=1;
                count++;
            }
            else
            roles[i]=0;
            mask>>=1;
        }
        return count;
    }
    bool valid(vector<int> &roles,vector<vector<int> > &statements)
    {
        int n=roles.size();
        for(int i=0;i<n;i++)
        {
            if(roles[i]==0)
            continue;
            for(int j=0;j<n;j++)
            {
                if(statements[i][j]==2)
                continue;
                if(statements[i][j]!=roles[j])
                return false;
            }
        }
        return true;
    }
    int maximumGood(vector<vector<int>>& statements) {
        int n=statements[0].size();
        int combinations=1<<n;
        vector<int> roles(n);
        int ans=0;
        for(int i=1;i<=combinations;i++)
        {
            int currentGood=helper(i,roles);
            if(valid(roles,statements))
            {
                ans=max(ans,currentGood);
            }
        }
        return ans;
    }
};