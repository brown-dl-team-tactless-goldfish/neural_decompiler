int cmp(const void* a, const void* b){
    int* A = *(int**)a;
    int* B = *(int**)b;
    if(A[0] == B[0])
        return A[1] - B[1];
    return A[0] - B[0];
}
int bestTeamScore(int* scores, int scoresSize, int* ages, int agesSize){
    int n = scoresSize;
    int** data = malloc(n * sizeof(int*));
    for(int i = 0; i < n; i++){
        data[i] = malloc(2 * sizeof(int));
        data[i][0] = ages[i];
        data[i][1] = scores[i];
    }
    qsort(data, n, sizeof(int*), cmp);
    int* dp = malloc(n * sizeof(int));
    dp[0] = data[0][1] ;
    int ans = dp[0];
    for(int i = 1; i < n; i++){
        int preM = INT_MIN;
        dp[i] = data[i][1];
        for(int j = 0; j < i; j++){
             if(data[j][1] <= data[i][1])
                preM = fmax(preM, dp[j]);
        }
        if(preM != INT_MIN)
            dp[i] += preM;
        ans = fmax(ans, dp[i]);
    }
    //free memory
    free(dp);
    for(int i = 0; i < n; i++){
        free(data[i]);
    }
    free(data);
        
    return ans;
}