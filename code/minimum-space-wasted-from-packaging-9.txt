class Solution {
public:
    const long long INF = 1e18 + 7;
    const int mod = 1e9 + 7;
    int minWastedSpace(vector<int>& packages, vector<vector<int>>& boxes) {
        int n = packages.size();
        int m = boxes.size();
        sort(packages.begin(), packages.end());
        for (int i = 0; i < m; i++) {
            sort(boxes[i].begin(), boxes[i].end());
        }
        vector<long long> prefixSum(n);
        prefixSum[0] = packages[0];
        for (int i = 0; i < n - 1; i++) {
            prefixSum[i + 1] = prefixSum[i] + packages[i + 1];
        }
        
        long long sol = INF;
        for (int i = 0; i < m; i++) {
            int pos = 0;
            long long sum = 0;
            for (int j = 0; j < (int) boxes[i].size(); j++) {
                int low = pos;
                int high = n - 1;
                int p = -1;
                while (low <= high) {
                    int mid = (low + high) / 2;
                    if (packages[mid] <= boxes[i][j]) {
                        p = mid;
                        low = mid + 1;
                    } else {
                        high = mid - 1;
                    }
                }
                if (p != -1) {
                    long long s = prefixSum[p] - (pos == 0 ? 0 : prefixSum[pos - 1]);
                    sum += ((long long) (p - pos + 1) * boxes[i][j]) - s;
                    pos = p + 1;
                }
            }
            if (pos == n) {
                sol = min(sol, sum);
            }
        }
        if (sol == INF) {
            return -1;
        }
        sol %= mod;
        return sol;
        
    }
};