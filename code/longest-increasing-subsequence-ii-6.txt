vector<int> t;
int sum(int v, int tl, int tr, int l, int r) {
    if (l > r) 
        return 0;
    if (l == tl && r == tr) {
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return max(sum(v*2, tl, tm, l, min(r, tm)),sum(v*2+1, tm+1, tr, max(l, tm+1), r));
} 
void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) {
        t[v] =max(new_val,t[v]);
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = max(t[v*2], t[v*2+1]);
    }
}
class Solution {
public:
    
    int lengthOfLIS(vector<int>& nums, int k) {
        t.assign(4*(100000+2),0);
        
        for(int i:nums){
            int x=sum(1,0,100000,max(0,i-k),i-1);
            
            update(1,0,100000,i,x+1);
        }
        
        return t[1]; 
    }
};