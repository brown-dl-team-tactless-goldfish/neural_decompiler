class Solution {
public:
	int dfs(TreeNode* root, int& res){

		if(not root) return 0;
		if(not root->right && not root->left) return 0;
		int l=dfs(root->left,res);
		int r=dfs(root->right,res);
		if(root->right && root->left && root->val==root->left->val && root->val==root->right->val) {
			res=max(res,2+l+r);
			return 1+max(l,r);

	}
		else if(root->left  && root->val==root->left->val) {
			//cout<<root->val<<endl;
			res=max(res,1+l);
			return 1+l;}
		else if(root->right && root->val==root->right->val){
			//cout<<root->val<<endl;
			res=max(res,1+r);
			return 1+r;
		} 

		return 0;
	}

	int longestUnivaluePath(TreeNode* root) {
		int res=0;
		dfs(root,res);
		return res;
	}
};