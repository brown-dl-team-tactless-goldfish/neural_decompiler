long long maximumSubarraySum(int* nums, int numsSize, int k){
    int N = 1e5 + 1;
    int n = numsSize;
    long long max = 0;
    int* count = calloc(N, sizeof(int));
    int type = 0;
    long long  sum = 0;
    for(int i = 0; i < k ; i++){
        if( count[ nums[i] ] == 0)
            type++;
        sum += nums[ i ] ;
        count[ nums[i] ]++ ;
    }
    if(type == k)
        max = sum;
    for(int i = k; i < n; i++){
        count[ nums[i] ]++ ;         
        if( count[ nums[i] ] == 1)
            type++;
        
        count[ nums[i-k] ]-- ;
        if(count[ nums[i-k] ]== 0 )
           type--;
        sum = sum + nums[i] - nums[i-k];
        if(type == k)
           max = fmax(max, sum);
    }
    free(count) ;
    return max;
}