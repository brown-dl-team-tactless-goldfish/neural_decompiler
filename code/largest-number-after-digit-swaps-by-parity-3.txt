// separate odd and even digits respectively and sort them and re-combine them into a new num
void mysort(int* nums, int begin, int end)
{
    int l = begin, r = end;
    int v = nums[l + (r - l) / 2];
    
    if (l > r)
        return;
    
    while (l <= r)
    {
        while (nums[l] < v)
            l++;
        while (nums[r] > v)
            r--;
        if (l <= r)
        {
            int tmp = nums[r];
            nums[r] = nums[l];
            nums[l] = tmp;
            l++;
            r--;
        }
    }
    if (begin < r)
        mysort(nums, begin, r);
    if (l < end)
        mysort(nums, l, end);
}

int largestInteger(int num){
    int input = num;
    int t = 0, e = 0, o = 0;
    int ifEven[10] = {0};
    int even[10] = {0};
    int odd[10] = {0};
    int ans = 0;
    while (input)
    {
        int d = input % 10;
        if (d % 2 == 0)
        {
            even[e++] = d;
            ifEven[t++] = 1;
        }
        else
        {
            odd[o++] = d;
            ifEven[t++] = 0;
        }
        input = input / 10;
    }
    
    mysort(even, 0, e - 1);
    mysort(odd, 0, o - 1);

    for (int i=e-1, j=o-1, k=t-1; k>=0; k--)
    {
        int add;
        if (ifEven[k] == 1)
        {
            add = even[i--];
        }
        else
        {
            add = odd[j--];
        }
        ans = ans * 10 + add;
    }
    return ans;
}