typedef long long ll;

class compare {
public:
    bool operator()(const vector<int>& a, const vector<int>& b) {
        if(a[2] != b[2])
            return a[2] < b[2];
        if(a[3] != b[3])
            return a[3] < b[3];
        if(a[0] != b[0])
            return a[0] < b[0];
        return a[1] < b[1];
    }
};

class Solution {
public:
    priority_queue<vector<int>, vector<vector<int>>, compare> pq;
    int r,c, low, high,si,sj, k;
    vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k) {
        r = grid.size(); c = grid[0].size(); this->k = k;
        low = pricing[0]; high = pricing[1];
        si = start[0]; sj = start[1];
        queue<vector<int>> Q;
        Q.push({si, sj, 0});
        vector<vector<bool>> visited(r, vector<bool>(c, false));
        visited[si][sj] = true;
        while(!Q.empty()) {
            vector<int> u = Q.front();Q.pop();
            int ui = u[0], uj = u[1], d = u[2];
            if(grid[ui][uj] != 1 && grid[ui][uj] >= low && grid[ui][uj] <= high) {
                push(ui, uj, d, grid[ui][uj]);
            }
            for(vector<int>& dir : dirs) {
                int i = ui + dir[0];
                int j = uj + dir[1];
                if(i < 0 || i >= r || j < 0 || j >= c || visited[i][j])
                    continue;
                visited[i][j] = true;
                if(grid[i][j] == 0)
                    continue;
                Q.push({i, j, d+1});
            }
        }
        vector<vector<int>> output(pq.size());
        int i = pq.size()-1;
        while(i >=0 && !pq.empty()) {
            output[i--] = {pq.top()[0], pq.top()[1]};pq.pop();
        }
        return output;
    }
    
    void push(int i, int j, int d, int price) {
        vector<int> v = {i,j,d,price};
        // pq.push(v);
        if(pq.size() < k) {
            pq.push(v);
        }
        else if(pq.size() == k) {
            vector<int> u = pq.top();
            if(comp(v, u)) {
                pq.pop();
                pq.push(v);
            }
        }
    }
    
    bool comp(vector<int>& a, vector<int>& b) {
        if(a[2] != b[2])
            return a[2] < b[2];
        if(a[3] != b[3])
            return a[3] < b[3];
        if(a[0] != b[0])
            return a[0] < b[0];
        return a[1] < b[1];
    }  
};