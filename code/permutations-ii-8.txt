int genp(int *a, int len, int poffst, int **arr, int *aoff)
{
    int i = poffst;

    /* Finished generation of one sequence */
    if (poffst == len)
    {
        /* Copy permutation array */
        if (copy_arr(&arr[*aoff], a, len))
            return -1;

        /* Increment the array offset and return */
        (*aoff) += 1;
        return 0;
    }

    /* Loop generating the sequence for this offset location */
    while (i < len)
    {
        int j, k, f = 0;

        /* Pick a new value for the location. */
        swap_int(&a[poffst], &a[i]);

        /* Recursively generate permutations for the remaining 
           locations. If the generation fails then return */
        if (genp(a, len, poffst + 1, arr, aoff))
           return -1;

        /* Reverse the change at that index */
        swap_int(&a[poffst], &a[i]);

        /* Find the next value for the location, avoid picking
        duplicates by scanning the already picked values. */
        for (j = i + 1; j < len; ++j)
        {
            /* Scan the window */
            for (k = poffst; k < i + 1; ++k)
                if (a[j] == a[k])
                    break;
            /* If we have a unique value at offset j,  
               then break. */
            if (k == i + 1)
                break;
        }
        
        /* Assign the new offset */
        i = j;
    }

    /* Return success */
    return 0;
}