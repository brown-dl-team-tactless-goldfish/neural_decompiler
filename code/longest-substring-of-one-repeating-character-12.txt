class Solution {
public:
    vector<int> longestRepeating(string s, string qc, vector<int>& qi) {
        map<int, int> mp, len;
        int ind=0;
        mp[-1]=-1;
        mp[s.size()]=-1;
        len[s.size()+100000]=-1;
        while(ind<s.size())
        {
            int j=ind;
            while(j<s.size() && s[ind]==s[j])
                mp[ind]=j++;
            len[j-ind]++;
            ind=j;
        }

        vector<int> res;
        for(int i=0; i<qi.size(); i++)
        {
            auto it = mp.lower_bound(qi[i]);
            if(it->first>qi[i])
                it--;
            len[it->second - it->first + 1]--;
            if(len[it->second-it->first+1]<=0)
                len.erase(it->second-it->first+1);
            if(it->second>=qi[i]+1)
            {
                mp[qi[i]+1]=it->second;
                len[it->second-qi[i]]++;
            }
            if(it->first<=qi[i]-1)
            {
                mp[it->first]=qi[i]-1;
                len[qi[i]-it->first]++;
            }
            mp[qi[i]]=qi[i];
            len[1]++;
            s[qi[i]]=qc[i];
            if(qi[i]+1<s.size() && s[qi[i]]==s[qi[i]+1])
            {
                len[1]--;
                if(len[1]==0)
                    len.erase(1);
                len[mp[qi[i]+1]-qi[i]]--;
                if(len[mp[qi[i]+1]-qi[i]]<=0)
                    len.erase(mp[qi[i]+1]-qi[i]);
                mp[qi[i]]=mp[qi[i]+1];
                len[mp[qi[i]]-qi[i]+1]++;
                mp.erase(qi[i]+1);
            }
            it=mp.find(qi[i]);
            it--;
            if(it->first>=0 && s[it->first]==s[qi[i]])
            {
                len[mp[qi[i]]-qi[i]+1]--;
                len[mp[it->first]-it->first+1]--;
                if(len[mp[it->first]-it->first+1]<=0)
                    len.erase(mp[it->first]-it->first+1);
                if(len[mp[qi[i]]-qi[i]+1]<=0)
                    len.erase(mp[qi[i]]-qi[i]+1);
                mp[it->first]=mp[qi[i]];
                len[mp[it->first]-it->first+1]++;
                mp.erase(qi[i]);
            }
            
            auto it2 = len.lower_bound(s.size()+100000);
            it2--;
            res.push_back(it2->first);
        }
        return res;
    }
};