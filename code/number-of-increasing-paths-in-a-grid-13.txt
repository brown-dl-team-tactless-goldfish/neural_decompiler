class Solution {
    int M = 1e9 + 7;
    int dfs(int i, int j, vector<vector<int>>&grid, int n, int m, vector<vector<long long>>&dp){
        
        
        if(dp[i][j] != -1) return dp[i][j];

        long long path = 1;

        if(j+1 < m and grid[i][j+1] > grid[i][j]) path += dfs(i, j+1, grid, n, m, dp) % M;
        if(j-1 >= 0 and grid[i][j-1] > grid[i][j]) path += dfs(i, j-1, grid, n, m, dp) % M;
        if(i+1 < n and grid[i+1][j] > grid[i][j]) path += dfs(i+1, j, grid, n, m, dp) % M;
        if(i-1 >= 0 and grid[i-1][j] > grid[i][j]) path += dfs(i-1, j, grid, n, m, dp) % M;
        
        return dp[i][j] = path;
    }
public:
    int countPaths(vector<vector<int>>& grid){
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<long long>> dp(n , vector<long long>(m , -1));
        
        long long ans = 0;
        
        for(int i = 0 ;i < n;i++){
            for(int j = 0 ; j < m ; j++){
                ans += dfs(i, j, grid, n, m, dp);
                ans = ans % M;
            }  
        }
        return ans;
    }
};