
#define SElemType int
typedef struct{
    SElemType *top;
    SElemType *base;
	SElemType *min_top;
	SElemType *min_base;
	int stacksize;
} MinStack;

/** initialize your data structure here. */
MinStack* minStackCreate(int maxSize) {
    MinStack* stack = (MinStack*)malloc(sizeof(MinStack));
	if (!stack)
		return NULL;
	
	stack->base = (SElemType*)malloc(sizeof(SElemType) * maxSize);
	if (!stack->base){
		free(stack);
		return NULL;
	}	
	stack->min_base = (SElemType *)malloc(sizeof(SElemType) * maxSize);
	if (!stack->min_base){
		free(stack->min_base);
		free(stack);
		return NULL;
	}
	stack->top = stack->base;
	stack->min_top = stack->min_base;
	stack->stacksize = maxSize;
	
	return stack;
}

void minStackPush(MinStack* obj, int x) {
	*(obj->top++) = x;
	if (obj->min_top == obj->min_base) {
		*(obj->min_top++) = x;
	}
	else{
		if (*(obj->min_top-1) > x){
			*(obj->min_top++) = x;
		}
		else{
			*(obj->min_top) = *(obj->min_top - 1);
			obj->min_top ++;
		}
	}
}

void minStackPop(MinStack* obj) {
	obj->top --; 
	obj->min_top --;
	return;
}

int minStackTop(MinStack* obj) {
    return *(obj->top-1);
}

int minStackGetMin(MinStack* obj) {
    return *(obj->min_top-1);
}

void minStackFree(MinStack* obj) {
	return;
	if (obj)
		if (obj->base)
			free(obj->base);
		if (obj->min_base)
			free(obj->min_base);
		free(obj);
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * struct MinStack* obj = minStackCreate(maxSize);
 * minStackPush(obj, x);
 * minStackPop(obj);
 * int param_3 = minStackTop(obj);
 * int param_4 = minStackGetMin(obj);
 * minStackFree(obj);
 */
```