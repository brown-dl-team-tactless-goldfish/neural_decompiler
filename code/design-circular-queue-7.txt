typedef struct {
    int *q;  
    int head;
    int tail;
    int depth;
    bool empty;
    bool full;
} MyCircularQueue;

MyCircularQueue* myCircularQueueCreate(int k) {
    // ignore k
    MyCircularQueue* pt = (MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    pt->head = 0;
    pt->tail = 0;
    pt->depth = k;
    pt->q = (int*)malloc(sizeof(int) * k);
    pt->empty = true;
    pt->full = false;
    return pt;
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj);
bool myCircularQueueIsFull(MyCircularQueue* obj);

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if (myCircularQueueIsFull(obj))
        return false;
    obj->q[obj->head] = value;
    obj->head = (obj->head + 1) % obj->depth;
    obj->empty = false;
    if (obj->head == obj->tail)
        obj->full = true;
    return true;
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj))
        return false;
    obj->tail = (obj->tail + 1) % obj->depth;
    obj->full = false;
    if (obj->tail == obj->head)
        obj->empty = true;
    return true;
}

int myCircularQueueFront(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj))
        return -1;
    return obj->q[obj->tail];
}

int myCircularQueueRear(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj))
        return -1;
    /*
    With a remainder operator, the sign of the result is the same as the sign of the dividend (numerator) 
    while with a modulo operator the sign of the result is the same as the divisor (denominator).
    */
    // here (0 - 1) % 3 == -1 (if k == 3) underflow
    // 
    if (obj->head == 0)
        return obj->q[obj->depth - 1];
    return obj->q[(obj->head - 1) % obj->depth];
}

// 6 7 8
// head = 0
// tail = 1
// head = 1 4 7 8
// q[0] =  
// 
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    return obj->empty;
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
    return obj->full;
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->q);
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/