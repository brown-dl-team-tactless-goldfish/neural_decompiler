class Solution {
public:
     int minimumTime(vector<vector<int>>& g) {
        int n = g.size();
        int m = g[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        priority_queue< pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater< pair<int,pair<int,int>> > >pq;
        pq.push({0,{0,0}});
        vis[0][0] = 1;
        int dx[4]={1,-1,0,0};
        int dy[4]={0,0,-1,1};
         int ans = 1e7;
          bool entry = false;
        while(pq.size()){
            int t = pq.top().first;
            int x = pq.top().second.first;
            int y = pq.top().second.second;
            pq.pop();
            if(x == n-1 && y == m-1)
                ans=min(ans,t);
           
            for(int k=0;k<4;k++){
                int nx = dx[k]+x;
                int ny=dy[k]+y;
                if(nx<0||ny<0||nx>=n||ny>=m ||vis[nx][ny]==1)continue;
                if(t+1 >= g[nx][ny]){
                    pq.push({t+1,{nx,ny}});
                    vis[nx][ny]=1;
                    entry = true;
                }
                else {
                    int diff = g[nx][ny]-t;
                    if(diff%2==0){
                        pq.push({g[nx][ny]+1,{nx,ny}});
                    }
                    else 
                        pq.push({g[nx][ny],{nx,ny}});
                    vis[nx][ny]=1;
                }
            }
            if(entry == false)
                return -1;
           
        }
         return ans;
     }
        
};