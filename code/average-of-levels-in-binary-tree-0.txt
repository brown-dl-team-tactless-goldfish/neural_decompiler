int depth(struct TreeNode* root );

void BFS(struct TreeNode* root, int depth, long long** table){
    table[depth][0] += 1;
    table[depth][1] +=  root->val;
    
    if(root->left){
        BFS(root->left, depth + 1, table);
    }
    
    if(root->right){
        BFS(root->right, depth + 1, table);
    }
}

double* averageOfLevels(struct TreeNode* root, int* returnSize){
    int i;    
    int dep = depth(root);

    //table[i][0] -->count, table[i][1] -->sum
    long long** table = (long long**)malloc(dep * sizeof(long long*));
    for(i = 0; i < dep; i++){
        table[i] = calloc( 2 , sizeof(long long));
    }
    BFS(root, 0 , table);
    
    double* ans = (double*)malloc(dep * sizeof(double));
    for(i = 0; i < dep; i++){
        if(table[i][0] == 0)
            ans[i] = 0;
        else
            ans[i] = (double)table[i][1] / table[i][0];
    }
    
    * returnSize = dep;
    
    //freee memory
    for(i = 0; i < dep; i++){
        free(table[i]);
    }
    free(table);
    
    return ans;
}

int depth(struct TreeNode* root ){
    if(root == NULL)
        return 0;
    else 
        return 1 + fmax(depth(root->left), depth(root->right));
}