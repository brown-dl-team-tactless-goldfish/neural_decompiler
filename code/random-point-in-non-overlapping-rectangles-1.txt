class Solution {
    vector<vector<int>> rects;
    vector<int> areas; 
public:
    Solution(vector<vector<int>>& rects) {
        areas.reserve(rects.size());
        transform(rects.begin(), rects.end(), back_inserter(areas), [](auto const& r) { return (r[2]-r[0]+1)*(r[3]-r[1]+1);} );
        partial_sum(areas.begin(), areas.end(), areas.begin());
        double total = areas.back();
        transform(areas.begin(), areas.end(), areas.begin(), [&total](auto const& a) { return int(a/total*100);} );
        this->rects.swap(rects);
        srand(time(NULL));
    }
    
    vector<int> pick() {
        int i = lower_bound(areas.begin(), areas.end(), rand() % 100) - areas.begin();
        int x = rand() % (rects[i][2] - rects[i][0] + 1) + rects[i][0];
        int y = rand() % (rects[i][3] - rects[i][1] + 1) + rects[i][1];
        return {x, y};
    }
};