class Solution {
public:
    int n;
    int m;
     vector<bitset<501>> dp;
    int minimumTeachings(int n1, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        n = n1;
        m = languages.size();
        dp.resize(m + 1);
        for (int i =0; i < m; i++)
        {
            for (auto& l : languages[i])
            {
                dp[i + 1][l] = 1;
            }
        }
        
        vector<int> candicate(m + 1, 0);
        for (auto& v : friendships)
        {
            bitset<501> un = dp[v[0]] & dp[v[1]];
            if (un.count() == 0)
            {
                //nospeakfrieds.push_back(v);
                candicate[v[0]] = 1;
                candicate[v[1]] = 1;
            }
        }
        vector<int> ldp(n + 1, 0);
        int cnt = 0;
        for (int i = 1; i <= m; i++)
        {
            if (candicate[i] == 1)
            {
                cnt++;
                for (auto& l : languages[i-1])
                {
                    ldp[l]++;
                }
            }
        }
        int res = cnt;
        //cout << cnt << endl;
        for (int i = 1; i <= n; i++)
        {
            //cout << i << "," << ldp[i] << endl;
            res = min(res, cnt - ldp[i]);
        }
        return res;
    }
};