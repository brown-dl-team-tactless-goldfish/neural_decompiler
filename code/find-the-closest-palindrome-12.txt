public class Solution 
{
    public string NearestPalindromic(string n) 
    {
        int len = n.Length;
        if(len == 1) return (long.Parse(n)-1).ToString();
        var candidates = new List<string>() 
        { 
            ((long) Math.Pow(10, len -1) - 1).ToString(), 
            ((long) Math.Pow(10, len) + 1).ToString()
         };
        
        long half = long.Parse(n.Substring(0, (len+1)/2));
        var prefixes = new long[]{half-1, half, half+1};
        foreach(long i in prefixes)
        {
            var str = i.ToString();
            int l = len % 2 == 0 ? str.Length : str.Length - 1;
            var charArray = str.Substring(0, l).ToCharArray();
            Array.Reverse(charArray);
            candidates.Add(str + new string(charArray));
        }
        
        long diff = long.MaxValue, result = 0, num = long.Parse(n);
        foreach(var candidate in candidates)
        {
            if(candidate.Equals(n)) continue;
            long can = long.Parse(candidate);
             diff = Math.Abs(can-num);
            if(Math.Abs(can-num) < diff || (Math.Abs(can-num) == diff && can<result))
            {
                diff = Math.Abs(can-num);
                result = can;
            }
        }
        
        return result.ToString();
    }
}