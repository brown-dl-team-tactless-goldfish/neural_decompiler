l += obj -> size;
r += obj -> size;

int sum = 0;
while(l <= r){
    //pairs are of this type (even index,odd index) so if l is at odd index add it to final sum and move it ahead and if r is at even index do the same and move both l and r to their parent node. if l is at even index(or r at even) then the sibling(parent right child/ left child respectively) is included and it will be also added so we keep on moving till the parent which covers the range like this.
    if(l % 2){
        sum += obj -> tree[l++];
    }
    if(!(r % 2)){
        sum += obj -> tree[r--];
    }
    
    l /= 2;
    r /= 2;
}
return sum;