class Solution {
public:
    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        vector<string> res;
        vector<int> dists(friends.size(), INT_MAX);
        unordered_map<string, int> freqs;
        auto comp = [&](int p1, int p2){ return dists[p1] > dists[p2]; };
        
        dists[id] = 0;
        priority_queue<int, vector<int>, decltype(comp)> heap(comp);
        heap.push(id);
        
        while (!heap.empty())
        {
            int top = heap.top();
            heap.pop();
            for (int f : friends[top])
            {
                if (dists[f] > dists[top] + 1)
                {
                    dists[f] = dists[top] + 1;
                    heap.push(f);
                    if (dists[f] == level)
                    {
                        for (const auto& video : watchedVideos[f])
                        {
                            ++freqs[video];
                        }
                    }
                }
            }
        }
        
        for (const auto& pair : freqs)
        {
            res.push_back(pair.first);
        }
        
        sort(res.begin(), res.end(),
            [&](const auto& s1, const auto& s2)
             {
                 return freqs[s1] < freqs[s2] || (freqs[s1] == freqs[s2] && s1 < s2);
             });
        
        return res;
    }
};