class Solution {
public:
    int maximumWhiteTiles(vector<vector<int>>& tiles, int carpetLen) {
        int n = tiles.size();
        sort(tiles.begin(), tiles.end());

        map<int, int> mp;
        for (int i = 0; i < n; i++) mp[tiles[i][0]] = i;

        vector<int> prefix(n, 0);
        prefix[0] = tiles[0][1] - tiles[0][0] + 1;
        for (int i = 1; i < n; i++) prefix[i] = prefix[i - 1] + tiles[i][1] - tiles[i][0] + 1;

        int ans = 0;
        for (int i = 0; i < n; i++) {
            int end = tiles[i][0] + carpetLen - 1, cur = 0;
            auto it = mp.upper_bound(end);
            int pos = (--it)->second;

            if (tiles[pos][1] >= end) cur += (end - tiles[pos][0] + 1);
            else cur += (tiles[pos][1] - tiles[pos][0] + 1);
            if (pos > 0) cur += prefix[pos - 1];
            if (i > 0) cur -= prefix[i - 1];
            ans = max(ans, cur);
        }

        return ans;
    }
};