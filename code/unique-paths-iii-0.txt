int DFS(int** grid, int r, int c, int start_r, int start_c, int n){
    if(start_r < 0 || start_r == r || start_c < 0 || start_c == c)
        return 0;
    if(grid[start_r][start_c] == -1)
        return 0;
    if(grid[start_r][start_c] == 2)
       return (n == 0) ? 1 : 0; 
    
        
    grid[start_r][start_c] = -1 ;
    int ans = DFS(grid, r, c, start_r+1, start_c, n-1) + \
            DFS(grid, r, c, start_r-1, start_c, n-1) + \
            DFS(grid, r, c, start_r, start_c+1, n-1) + \
            DFS(grid, r, c, start_r, start_c-1, n-1) ;
    grid[start_r][start_c] =  0;
    return ans;
}
int uniquePathsIII(int** grid, int gridSize, int* gridColSize){
    int r = gridSize;
    int c = gridColSize[0];
    int start_r = -1, start_c = -1;
    int n = 1;   //end grid[i][j] == 2
    for(int i = 0; i < r; i++){
        for(int j = 0; j < c; j++){
            if(grid[i][j] == 0)
                n++;
            else if(grid[i][j] == 1){
                start_r = i;
                start_c = j;
             }
        }
    }
    return DFS(grid, r, c, start_r, start_c, n) ;
}