class Solution {
public:
    vector<int> LIS(vector<int> v){
        vector<int> seq;
        vector<int> dp;
        for (auto x:v){
            vector<int>::iterator index=lower_bound(seq.begin(),seq.end(),x);
            if (index-seq.begin()<seq.size()){
                *index=x;
            }
            else{
                seq.push_back(x);
            }
            dp.push_back(seq.size());
        }
        return dp;
    }
    int minimumMountainRemovals(vector<int>& nums) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int n=nums.size();
        vector<int> dp_left=LIS(nums);
        reverse(nums.begin(),nums.end());
        vector<int> dp_right=LIS(nums);
        int ans=0;
        for (int i=1;i<n-1;i++){
            if (dp_left[i]>1 && dp_right[n-i-1]>1){
                ans=max(ans,dp_left[i]+dp_right[n-i-1]-1);
            }
        }
        return n-ans;
    }
};