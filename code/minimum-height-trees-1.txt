int* findMinHeightTrees(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize){
    int ** connect = malloc(sizeof(int *) * n);
    int * index = malloc(sizeof(int) * n);
    for (int i = 0; i < n; i++){
        connect[i] = malloc(sizeof(int));
        index[i] = 0;
    }
    int p1, p2;
    for (int i = 0; i < edgesSize; i++){
        p1 = edges[i][0];
        p2 = edges[i][1];
        connect[p1] = realloc(connect[p1], sizeof(int) * (index[p1] + 1));
        connect[p2] = realloc(connect[p2], sizeof(int) * (index[p2] + 1));
        connect[p1][index[p1]] = p2;
        connect[p2][index[p2]] = p1;
        index[p1] += 1;
        index[p2] += 1;
    }
    int * queue = malloc(sizeof(int) * n);
    int start = 0, end = 0;
    for (int i = 0; i < n; i++){
        if (index[i] <= 1){
            queue[end] = i;
            end++;
        }
    }
    int cur;
    int num = n;
    while (num > 2){
        int flag = end;
        while (start < flag){
            cur = queue[start];
            start++;
            num--;
            for (int i = 0; i < index[cur]; i++){
                while (index[connect[cur][i]] < 1){
                    i++;
                }
                index[connect[cur][i]]--;
                if (index[connect[cur][i]] == 1){
                    queue[end] = connect[cur][i];
                    end++;
                }
            }
            index[cur]--;
        }
        for (int i = start; i < end; i++){
            queue[i - start] = queue[i];
        }
        end = end - start;
        start = 0;
    }
    int * result = malloc(sizeof(int) * 2);
    *returnSize = 0;
    int i = 0;
    while (start < end){
        result[i] = queue[start];
        start++;
        i++;
        *returnSize = *returnSize + 1;
    }
    return result;
}