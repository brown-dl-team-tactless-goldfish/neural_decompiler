

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
typedef struct
{
    int interval[2];
    int pos;
}node;
int cmpfunc(const void * A, const void * B)
{
    
    node a=*(node*)A;
    node b=*(node*)B;
    if(a.interval[0]==b.interval[0]) 
        return a.interval[1] - b.interval[1];
    else             
        return a.interval[0] - b.interval[0];
}
int* findRightInterval(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize){
    
    node *tmp=malloc(sizeof(node)*intervalsSize);
    int *ret=malloc(sizeof(int)*intervalsSize);
    if(intervalsSize==1)    
        ret[0] = -1;
    for(int i=0;i<intervalsSize;i++)
    {
        (&tmp[i])->interval[0]=intervals[i][0];
        tmp[i].interval[1]=intervals[i][1];
        tmp[i].pos=i;
    }
    qsort(tmp,intervalsSize,sizeof(node),cmpfunc);
    int i,j;

    for(i=0;i<intervalsSize-1;i++)
    {
        for(j=i+1;j<intervalsSize;j++)
        {
            if(tmp[i].interval[1]<=tmp[j].interval[0])
            {

                ret[tmp[i].pos]=tmp[j].pos;
                break;
            }
        }
        if(j==intervalsSize)
            ret[tmp[i].pos]=-1;
    }
    ret[tmp[intervalsSize-1].pos]=-1;
    *returnSize=intervalsSize;
    return ret;
}
