using LL = long long ;
class RangeFreqQuery {
    unordered_map<int, vector<int>>Map ;
    unordered_map<LL, int>Map2 ;
public:
    RangeFreqQuery(vector<int>& arr) {
        for(int i = 0; i < arr.size(); i++)
            Map[arr[i]].push_back(i) ;
    }
    int BF1(vector<int>data, int lower){
        int left = 0, right = data.size()-1 ;
        if(data[right] < lower)
            return -1 ;
        while(left < right){
            int mid = left + (right-left)/2 ;
            if(data[mid] >= lower)
                right = mid ;
            else
                left = mid + 1 ;
        }
        return left ;
    }
    
    int BF2(vector<int>data, int upper){
        int left = 0, right = data.size()-1 ;
        if(data[0] > upper)
            return -1 ;
        while(left < right){
            int mid = right - (right-left)/2 ;
            if(data[mid] > upper)
                right = mid - 1 ;
            else
                left = mid  ;
        }
        return left ;
    }
    
    int query(int left, int right, int value) {
        LL hash = (LL)left * 10000000000 + (LL)right *100000 + value ;
        if(Map2.find(hash)!= Map2.end())
            return Map2[hash] ;

        if(Map.find(value) == Map.end())
            return 0 ;
        int l = BF1(Map[value], left ) ;
        int r = BF2(Map[value], right) ;

        int ans = 0 ;
        if(l != -1 && r != -1)    
            ans =  r - l + 1 ;
        Map2[hash] = ans ;
        return ans ;
    }
};

/**
 * Your RangeFreqQuery object will be instantiated and called as such:
 * RangeFreqQuery* obj = new RangeFreqQuery(arr);
 * int param_1 = obj->query(left,right,value);
 */