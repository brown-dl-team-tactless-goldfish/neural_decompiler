class Solution {
public:
    string smallestSubsequence(string s, int k, char letter, int repetition) {
        int n = s.size();
        vector<int> suff(n);
        if (s.back() == letter) suff[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            if (s[i] == letter) suff[i] = suff[i + 1] + 1;
            else suff[i] = suff[i + 1];
        }
        string st;
        int lCount = 0;
        for (int i = 0; i < n; i++) {
            while (!st.empty()) {
                if (st.back() > s[i]) {
                    if (st.back() == letter) {
                        if (lCount - 1 + suff[i] >= repetition && (int) st.size() - 1 + n - i >= k) {
                            st.pop_back();
                            --lCount;
                        }
                        else break;
                    }
                    else if (lCount + suff[i] >= repetition && (int) st.size() - 1 + n - i >= k) {
                        st.pop_back();
                    }
                    else {
                        break;
                    }
                }
                else {
                    break;
                }
            }
            st.push_back(s[i]);
            if (s[i] == letter) ++lCount;
        }
        int len = (int) st.size();
        vector<bool> rm(len);
        for (int i = (int) st.size() - 1; i >= 0; i--) {
            if (st[i] != letter && len > k) {
                rm[i] = true;
                --len;
            }
            else if (st[i] == letter && len > k && lCount > repetition) {
                rm[i] = true;
                --len;
                --lCount;
            }
        }
        string sol;
        for (int i = 0; i < (int) st.size(); i++) {
            if (!rm[i]) {
                sol.push_back(st[i]);
            }
        }
        return sol;
    }
};