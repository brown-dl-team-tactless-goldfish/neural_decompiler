class Solution {
private:
    unordered_map<string,vector<TreeNode*>>map;
    vector<TreeNode*>res;
public:
    
    string helper(TreeNode* root)
    {
        if(!root)
        {
            return {};
        }
        
        string temp= '(' + helper(root->left) + to_string(root->val) + helper(root->right) + ')';
        
        map[temp].push_back(root);
        
        return temp;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        if(!root)
        {
            return {};
        }
        
        helper(root);
        
        for(auto&it: map)
        {
            if(it.second.size()>1)
            {
                res.push_back(it.second.front());
            }
        }
        
        return res;
    }
};