#define MaximumSpaceLimit 15

class Solution {
public:
    int idealArrays(int n, int maxValue) {
        int res = 0;
        int mod = 1e9 + 7;
        vector<vector<int>> C(n); 
        vector<vector<int>> dp(maxValue + 1, vector<int>(MaximumSpaceLimit, 0));
        
        // Build a pascal tree to calculate combinator
        for(int i = 0; i < n; i++)
            for(int j = 0; j <= i && j < MaximumSpaceLimit; j++)
                if(j == 0 || j == i) C[i].push_back(1);
                else C[i].push_back((C[i - 1][j] + C[i - 1][j - 1]) % mod);
        
        function<int(int, int)> dfs = [&](int curVal, int amount) {
            if(dp[curVal][amount]) return dp[curVal][amount];
            
            for(int nextVal = curVal ? curVal + curVal : 1; nextVal <= maxValue; nextVal += curVal ? curVal : 1) {
                dp[curVal][amount] += C[n - 1][amount];
                dp[curVal][amount] %= mod;
                
                if(amount < n - 1 && amount < MaximumSpaceLimit) {
                    dp[curVal][amount] += dfs(nextVal, amount + 1);
                    dp[curVal][amount] %= mod;
                }
            }
            
            return dp[curVal][amount];
        };
        
        return dfs(0, 0);
    }
};