bool is_op(char c) {
  return c == '+' || c == '*';
}

int priority(char op) {
  if (op == '+') return 1;
  if (op == '*') return 2;
  return -1;
}

class Solution {
 public:
  vector<string> braceExpansionII(string s) {
    auto modify = [&] () {
      int n = s.length();
      string res = "";
      for (int i = 0; i < n; i++) {
        if (s[i] == ',') {
          res += '+';
        } else if (s[i] == '{') {
          res += '(';
        } else if (s[i] == '}') {
          res += ')';
          if (i + 1 < n && (s[i + 1] == '{' || (s[i + 1] >= 'a' && s[i + 1] <= 'z'))) {
            res += '*';
          }
        } else {
          res += s[i];
          if (i + 1 < n && s[i + 1] == '{') {
            res += '*';
          } 
        } 
      } 
      return res;
    };
    s = modify();
    int n = s.length();
    stack <vector <string> > st;
    stack <char> op;
    auto process = [&] (char which) {
      vector <string> b = st.top(); st.pop();
      vector <string> a = st.top(); st.pop();
      if (which == '+') {
        set <string> cur;
        vector <string> res;
        for (string &str : a) cur.insert(str);
        for (string &str : b) cur.insert(str);
        for (string str : cur) {
          res.push_back(str);
        }
        st.push(res); 
      } else if (which == '*') {
        set <string> cur;
        vector <string> res;
        for (string &sa : a) {
          for (string &sb : b) {
            cur.insert(sa + sb);
          } 
        }
        for (string str : cur) {
          res.push_back(str);
        }
        st.push(res); 
      }
    };
    for (int i = 0; i < n; i++) {
      if (s[i] == '(') {
        op.push(s[i]);
      } else if (s[i] == ')') {
        while (op.top() != '(') {
          process(op.top());
          op.pop();
        }
        op.pop(); 
      } else if (is_op(s[i])) {
        char cur_op = s[i];
        while (!op.empty() && (priority(op.top()) >= priority(cur_op))) {
          process(op.top());
          op.pop();
        }
        op.push(cur_op);
      } else {
        string str = "";
        while (i < n && (s[i] >= 'a' && s[i] <= 'z')) {
          str += s[i];
          i++;
        } 
        --i;
        st.push(vector <string>(1, str));
      }
    } 
    while (!op.empty()) {
      process(op.top());
      op.pop();
    } 
    return st.top();
  } 
};