class Solution {
public:
    NestedInteger deserialize(string s) {
        if (!s.empty() && s[0] != '[') return stoi(s);
        
        NestedInteger result;
        stack<NestedInteger> st;
        bool hasNum = false;
        int num = 0, sign = 1;
        
        for (int i = 1; i < s.size(); i++) {
            char c = s[i];
            if (isdigit(c)) {
                num = num * 10 + c - '0';
                hasNum = true;
            }
            if (c == '-') {
                sign = -1;
            }
            if (c == '[') { // push current NestedInteger to stack and start a new one.
                st.push(result);
                result = NestedInteger();
            }
            if (c == ']') { // end current NestedInteger and pop a NestedInteger from stack to continue
                if (hasNum) {
                    result.add(NestedInteger(sign * num));
                }
                if (!st.empty()) {
                    st.top().add(result);
                    result = st.top();
                    st.pop();
                }
                hasNum = false; num = 0; sign = 1;
            }
            if (c == ',') { // append a new number to curr NestedInteger
                if (hasNum) {
                    result.add(NestedInteger(sign * num));
                }
                hasNum = false; num = 0; sign = 1;
            }
        }
        return result;
    }
};