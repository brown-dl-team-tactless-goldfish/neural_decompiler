/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int** ans;
int ansTop;
int* path;
int pathTop;

int* used;

int comp(const void* a, const void* b){
    return *(int*)a-*(int*)b;
}

 void backTracking(int* nums, int numsSize){
     if(pathTop == numsSize){
         int* tmp=malloc(sizeof(int)*pathTop);
         for(int i=0; i<pathTop; i++){
             tmp[i]=path[i];
         }
         ans[ansTop++]=tmp;
     }
     for(int i=0; i<numsSize; i++){
         if(used[i] || (i != 0 && nums[i] == nums[i-1] && used[i-1] == 0)){
             continue;
         }
         used[i]=1;
         path[pathTop++]=nums[i];
         backTracking(nums, numsSize);
         used[i]=0;
         pathTop--;
     }
     return;
 }

int** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    ans=malloc(sizeof(int*)*40000);
    path=malloc(sizeof(int)*numsSize);
    used=malloc(sizeof(int)*numsSize);

    for(int i=0; i<numsSize; i++){
        used[i]=0;
    }
    ansTop=pathTop=0;
    qsort(nums, numsSize, sizeof(int), comp);
    backTracking(nums, numsSize);

    *returnSize=ansTop;
    *returnColumnSizes=malloc(sizeof(int)*ansTop);
    for(int i=0; i<ansTop; i++){
        (*returnColumnSizes)[i]=numsSize;
    }

    return ans;


}