int minimumAverageDifference(int* nums, int numsSize){
    long long* average_hold = (long long*)calloc(numsSize,sizeof(long long));
    int lowest_return = INT_MAX;
    int return_ptr = 0;
    //calculate sum of array to meet timeing requirement of the question
    average_hold[0] = nums[0];
    for(int ptr = 1; ptr < numsSize; ptr++){
        average_hold[ptr] = average_hold[ptr - 1] + nums[ptr];
    }

    int left_sum = 0,right_sum = 0,average_val = 0;
    for(int avg_ptr = 0; avg_ptr < numsSize - 1; avg_ptr++){
        //average_hold[index] = abs( nums[avg_ptr] + ..../avg_ptr+1 (left) - nums[1 + avg_ptr] + ...../((avg_ptr+1) - numsSize) (right))
        average_val = abs(average_hold[avg_ptr]/(avg_ptr+1) - ((average_hold[numsSize-1] - average_hold[avg_ptr])/(numsSize-(avg_ptr+1)) ));
        //taking the lowest of the average_sum values 
        if(average_val < lowest_return){
            lowest_return = average_val; 
            return_ptr = avg_ptr;
        }
    }
    //calculating average sum to check last value is the minumum average
    average_val = average_hold[numsSize - 1]/ numsSize;
    if(average_val < lowest_return){
        return_ptr = numsSize-1;
    }    
    free(average_hold);
    return return_ptr;
}