void  dfs(int i, int j, int **grid, int row, int col, int val)
{    
    if (i < 0 || i > row-1 || j < 0 || j > col-1)
        return;
    if (grid[i][j] == 1 || grid[i][j] == val)
        return;
    
    grid[i][j] = val;
    dfs(i,j+1,grid,row,col,val);
    dfs(i+1,j,grid,row,col,val);
    dfs(i-1,j,grid,row,col,val);
    dfs(i,j-1,grid,row,col,val);
    return;
}
  
int closedIsland(int** grid, int gridSize, int* gridColSize){
    
    
    int i,j;
    int row = gridSize; int col  = *gridColSize;
    int comp=0;
    int out_comp=0;
    for (i=0; i < row; i++)
    {
        for (j=0; j < col; j++)
        {
            if (grid[i][j] == 0)
            {
                comp++;
                dfs(i,j,grid,row,col,2);
            }
        }
    }
    for (i=0; i < col; i++)
    {
        if (grid[0][i] == 2)
        {
           
            out_comp++;
            dfs(0,i,grid,row,col,3);
        }
    }
    for (i=0; i < row; i++)
    {
        if (grid[i][0] == 2)
        {
            out_comp++;
            dfs(i,0,grid,row,col,3);
        }
    }
    for (i=0; i < col; i++)
    {
        if (grid[row-1][i] == 2)
        {
            out_comp++;
            dfs(row-1,i,grid,row,col,3);
        }
    }
    for (i=0; i < row; i++)
    {
        if (grid[i][col-1] == 2)
        {
            out_comp++;
            dfs(i,col-1,grid,row,col,3);
        }
    }
    return comp-out_comp;
}