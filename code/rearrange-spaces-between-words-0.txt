char * reorderSpaces(char * text){
    int n = strlen(text) ;
    int totalCn = 0 ;
    int cn = 0 ;
    int words = 0;
    //find words and total space
    for(int i = 0; i < n; i++){
        if( text[i] == ' '){
            cn++;        
        }
        else{
            if(i == 0)
               words++; 
            if(cn == 0)
                continue;
            totalCn += cn ;
            cn = 0;
            words++;
        }
    }
    totalCn += cn;    
    int max = 1;   //space 
    int left = totalCn; //tail
    if(words > 1){
        max = totalCn / (words-1) ;
        left = totalCn % (words-1) ;
    }
    char* space = malloc( max );
    for(int i = 0; i < max; i++){
        space[i] = ' ' ;
    }
    int N = n + max * (words+1) + 1;
    char* ans = malloc(N) ;
    //ans[N-1] = '\0' ;
    int begin = 0 ;
    int pos = 0;
    int a_idx = 0;
    int w = 0 ;
    while(w < words){
        strncpy(&ans[a_idx], space, max);
        a_idx += max ;
        //find begin
        for(int i = pos; i < n; i++){
            if(text[i] != ' '){
                begin = i;
                break;
            }
        }
        //find end
        for(int i = begin; i < n; i++){
            if(text[i] == ' '){
                text[i] = '\0';
                pos = i+1 ;
                strncpy( &ans[a_idx], &text[begin], i-begin) ;
                a_idx += i-begin;
                w++ ;
                break;
            }
            else if(i == n-1){
                strncpy( &ans[a_idx], &text[begin], n-begin) ;
                a_idx += n-begin;
                pos = n;
                w++;
                break;
            }
        }
    }

    for(int i = 0; i < left; i++){
        ans[a_idx] = ' ';
        a_idx++ ;
    }
    ans[a_idx] = '\0' ;
    return &ans[max];
}