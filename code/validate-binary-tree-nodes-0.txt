bool validateBinaryTreeNodes(int n, int* leftChild, int leftChildSize, int* rightChild, int rightChildSize){
    //step 1 find root >>>
    bool* flag = calloc(n , sizeof(bool) ) ; //for find root, root not in leftChild and rightChild
    for(int i = 0; i < n; i++){
        if(leftChild[i] == -1)
            continue ;
        flag[leftChild[i]] = true ;
    }
    for(int i = 0; i < n; i++){
        if(rightChild[i] == -1)
            continue ;
        flag[rightChild[i]] = true ;
    }
    int root = -1 ;
    for(int i = 0; i < n; i++){
        if(flag[i] == false){
            if(root == -1)
                root = i ;
            else
                return false ;  //have more than one root 
        }
    }
    if(root == -1)
        return false ;
    //<<<< end 
    bool* visited = calloc(n , sizeof(bool) ) ;
    int* stack = malloc(2 * n * sizeof(int) ) ;  //space for error record
    int count = 0 ;
    stack[count] = root ;
    count++ ;
    int p = 0;
    int node = 0 ;

    while(p < count){
        node++ ;
        int left = leftChild[stack[p]] ;
        int right = rightChild[stack[p]] ;
        visited[stack[p]] = true ;
        p++;
        if(left != -1){
            if(visited[left] == true)
                return false ;
            stack[count] = left ;
            count++ ;
        }
        if(right != -1){
            if(visited[right] == true)
                return false ;
            stack[count] = right ;
            count++ ;
        }
    }
    free(flag) ;
    free(visited) ;
    if(node == n)
        return true ;
    return false ;
}