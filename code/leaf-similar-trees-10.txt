bool leafSimilar(struct TreeNode* root1, struct TreeNode* root2){
    struct TreeNode **stack1 = malloc(sizeof(struct TreeNode *) * 100);
    struct TreeNode **stack2 = malloc(sizeof(struct TreeNode *) * 100);
    int num1 = 0, num2 = 0;
    if (root1 == NULL && root2 == NULL)
        return true;
    struct TreeNode * tempHead1 = malloc(sizeof(struct TreeNode));
    tempHead1->right = root1;
    struct TreeNode * tempHead2 = malloc(sizeof(struct TreeNode));
    tempHead2->right = root2;
    stack1[0] = tempHead1;
    stack2[0] = tempHead2;
    int val1, val2;
    while (stack1[0] != NULL && stack2[0] != NULL){
        //printf("num1 = %d, num2 = %d\n", num1, num2);
        val1 = getLeaf(root1, stack1, &num1);
        val2 = getLeaf(root2, stack2, &num2);
        if (val1 != val2){
            return false;
        }
    }
    if (num1 != -1){
        val1 = getLeaf(root1, stack1, &num1);
        if (val1 == -9999)
            return true;
        else
            return false;
    }
    if (num2 != -1){
        val2 = getLeaf(root2, stack2, &num2);
        if (val2 == -9999)
            return true;
        else
            return false;
    }
    return true;
}

int getLeaf(struct TreeNode * root, struct TreeNode ** stack, int * num){
    struct TreeNode * temp = stack[*num];
    stack[*num] = NULL;
    *num = *num - 1;
    temp = temp->right;
    while (1){
        while (temp == NULL){
            if (*num == -1)
                return -9999;
            temp = stack[*num]->right;
            stack[*num] = NULL;
            *num = *num - 1;
        }
        if (temp->left == NULL && temp->right == NULL){
            return temp->val;
        }
        if (temp->left != NULL){
            *num = *num + 1;
            stack[*num] = temp;
            temp = temp->left;
            continue;
        }
        temp = temp->right;
    }
}