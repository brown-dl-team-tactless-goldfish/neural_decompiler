class Solution {
public:
    
    int maxx(int a , int b , int c )
    {
        int x = max(a , b) ; 
        int y = max(x , c) ; 
        return y ; 
    }
    
    int maxSumDivThree(vector<int>& nums) {

        int n = int(nums.size()) ;
        int dp[n][3] ;
        memset(dp , 0 , sizeof dp);
        if(n < 3) return 0; 
        dp[0][(nums[0]%3)] = nums[0]; 
        for(int i = 1 ; i < n ; ++i){
            int curr_rem = nums[i] % 3; 
            dp[i][curr_rem] = max(nums[i] , dp[i-1][curr_rem]); 
             
            int x = dp[i-1][0] + nums[i]; 
            int sum = x;
            x = x % 3; 
            dp[i][x] = maxx(dp[i][x], sum, dp[i-1][x]); 
            
            int y = dp[i-1][1] + nums[i] ; 
            sum = y; 
            y = y % 3; 
            dp[i][y] = maxx(dp[i][y] , sum, dp[i-1][y]); 
           
            int z = dp[i-1][2] + nums[i] ; 
            sum = z;
            z = z % 3; 
            dp[i][z] = maxx(dp[i][z] , sum,  dp[i-1][z]); 
            
            dp[i][0] = max(dp[i][0] , dp[i-1][0]) ; 
            dp[i][1] = max(dp[i][1] , dp[i-1][1]) ; 
            dp[i][2] = max(dp[i][2] , dp[i-1][2]) ; 

        }     
        
        int ans = dp[n-1][0] ; 
        return ans; 
    }
};