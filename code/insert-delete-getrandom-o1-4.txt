/**
use hash buckets to store relation between value and index
use array to store randomized set
**/

#define abs(x) (((x) < 0) ? -(x) : x)

typedef struct {
    int val;
    int idx;
    struct dNode *next;
} dNode;

typedef struct {
    int size;
    int capacity;
    int *set;
    dNode **dict;    
} RandomizedSet;


RandomizedSet* randomizedSetCreate() {
    srand(time(NULL));
    RandomizedSet *RS = (RandomizedSet *)malloc(sizeof(RandomizedSet));
    RS->size = 0;
    RS->capacity = 256;
    RS->set = (int *)malloc(sizeof(int) * 256);
    RS->dict = (dNode **)malloc(sizeof(dNode *) * 128);
    for(int i = 0;i < 128;i++)
        RS->dict[i] = NULL;
    return RS;
}

bool randomizedSetInsert(RandomizedSet* obj, int val) {
    int key = abs(val) % 128;
    dNode *temp = obj->dict[key];
    dNode *prev = temp; 
    while(1){
        if(temp == NULL){
            temp = (dNode *)malloc(sizeof(dNode));
            temp->val = val;
            temp->idx = obj->size;
            temp->next = NULL;
            if(prev == NULL)
                obj->dict[key] = temp;
            else   
                prev->next = temp;
            if(obj->capacity == 0){
                obj->set = (int *)realloc(obj->set, sizeof(int) * (obj->size + 256));
                obj->capacity = 256; 
            }
            obj->set[obj->size++] = val;
            obj->capacity--;
            return true;
        }
        else{
            if(temp->val == val)
                return false;
            else{
                prev = temp;
                temp = temp->next;
            }
        }
    }
}

bool randomizedSetRemove(RandomizedSet* obj, int val) {
    int key = abs(val) % 128;
    dNode *temp = obj->dict[key];
    dNode *prev = temp;
    int i = 0;
    while(1){
        if(temp == NULL)
            return false;
        else{
            if(temp->val == val){
                obj->set[temp->idx] = obj->set[--obj->size];
                obj->capacity++;
                randomizedSetChangeIdx(obj, obj->set[temp->idx], temp->idx);
                if(i < 1)
                    obj->dict[key] = temp->next;
                else
                    prev->next = temp->next; 
                free(temp);
                return true;
            }
            else{
                temp = temp->next;
                if(i < 1)
                    i++;
                else
                    prev = prev->next;
            }
        }
    }
}
//extra function to change the index of the value in the hash buckets
void randomizedSetChangeIdx(RandomizedSet* obj, int val, int idx){
    int key = abs(val) % 128;
    dNode *temp = obj->dict[key];
    while(temp != NULL){
        if(temp->val == val){
            temp->idx = idx;
            break;
        }
        else
            temp = temp->next;
    }
}

int randomizedSetGetRandom(RandomizedSet* obj) {
    return obj->set[rand() % obj->size];
}

void randomizedSetFree(RandomizedSet* obj) {
    dNode *temp;
    dNode *prev;
    for(int i = 0;i < 128;i++){
        temp = obj->dict[i];
        while(temp != NULL){
            prev = temp;
            temp = temp->next;
            free(prev);
        }
    }
    free(obj->set);
    free(obj->dict);
    free(obj);
}