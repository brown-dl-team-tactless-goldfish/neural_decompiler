bool arrayStringsAreEqual(char ** word1, int word1Size, char ** word2, int word2Size){
    bool retVal = false;

#if 1   // Time Complexity: O(n), Space Complexity: O(1).
    int c1 = 0;
    int c2 = 0;
    int idx1 = 0;
    int idx2 = 0;
    while ((idx1<word1Size) && (idx2<word2Size))
    {
        // compare characters between word1 and word2
        if (word1[idx1][c1] != word2[idx2][c2])
        {
            return retVal;
        }

        // word1 shift, if go to the end, change to next one.
        ++c1;
        if (word1[idx1][c1] == 0)
        {
            c1 = 0;
            ++idx1;
        }

        // word2 shift, if go to the end, change to next one.
        ++c2;
        if (word2[idx2][c2] == 0)
        {
            c2 = 0;
            ++idx2;
        }
    }

    if ((idx1 == word1Size) && (idx2 == word2Size))
    {
        retVal = true;
    }
#else   // Time Complexity: O(n) + O(n) + O(n) + O(n), Space Complexity: O(n) + O(n).
    int i, j;

    // calculate length of string1 that represent by array word1
    int len1 = 0;
    for (i=0; i<word1Size; ++i)
    {
        for (j=0; j<strlen(word1[i]); ++j)
        {
            ++len1;
        }
    }

    // calculate length of string2 that represent by array word2
    int len2 = 0;
    for (i=0; i<word2Size; ++i)
    {
        for (j=0; j<strlen(word2[i]); ++j)
        {
            ++len2;
        }
    }

    // if the length of string1 and string2 are different, return false.
    if (len1 != len2)
    {
        return retVal;
    }

    // malloc string1
    len1 = (len1 + 1) * sizeof(char);
    char* pStr1 = (char*)malloc(len1);
    if (pStr1 == NULL)
    {
        perror("malloc");
        return retVal;
    }
    memset(pStr1, 0, len1);

    // malloc string2
    len2 = (len2 + 1) * sizeof(char);
    char* pStr2 = (char*)malloc(len2);
    if (pStr2 == NULL)
    {
        perror("malloc");
        free(pStr1);
        pStr1 = NULL;
        return retVal;
    }
    memset(pStr2, 0, len2);

    // concatenate all word1 as String1
    j = 0;
    for (i=0; i<word1Size; ++i)
    {
        j += snprintf(pStr1+j, len1-j, "%s", word1[i]);
    }

    // concatenate all word2 as String2
    j = 0;
    for (i=0; i<word2Size; ++i)
    {
        j += snprintf(pStr2+j, len2-j, "%s", word2[i]);
    }

    // compare String1 and String2
    if (strcmp(pStr1, pStr2) == 0)
    {
        retVal = true;
    }

    // free memory usage
    free(pStr1);
    pStr1 = NULL;
    free(pStr2);
    pStr2 = NULL;
#endif

    return retVal;
}