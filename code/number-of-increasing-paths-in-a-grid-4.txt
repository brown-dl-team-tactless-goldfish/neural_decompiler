public class Solution
{
    public int CountPaths(int[][] grid)
    {
        int[][] dp = new int[grid.Length][];
        for (int r = 0; r < dp.Length; r++)
            dp[r] = new int[grid[r].Length];

        int totalPaths = 0;
        for (int r = 0; r < grid.Length; r++)
        {
            for (int c = 0; c < grid[r].Length; c++)
            {
                if (dp[r][c] == 0)
                {
                    dp[r][c] = DFS(r, c, grid, dp) % 1000000007;
                }
                totalPaths = (totalPaths+dp[r][c]) % 1000000007;
            }
        }
        return totalPaths;
    }
    public int DFS(int r, int c, int[][] grid, int[][] dp)
    {
        if (dp[r][c] != 0)
        {
            return dp[r][c];
        }
        int pathsAvailable = 1;
        //up
        if (r - 1 >= 0 && grid[r - 1][c] > grid[r][c])
        {
            pathsAvailable += DFS(r - 1, c, grid, dp);
        }
        //right
        if (c + 1 < grid[r].Length && grid[r][c + 1] > grid[r][c])
        {
            pathsAvailable += DFS(r, c + 1, grid, dp);
        }
        //down
        if (r + 1 < grid.Length && grid[r + 1][c] > grid[r][c])
        {
            pathsAvailable += DFS(r + 1, c, grid, dp);
        }
        //left
        if (c - 1 >= 0 && grid[r][c - 1] > grid[r][c])
        {
            pathsAvailable += DFS(r, c - 1, grid, dp);
        }
        dp[r][c] = pathsAvailable % 1000000007;
        return dp[r][c];
    }
}