    struct ListNode *slow = source;
    struct ListNode *fast = source->next;
    while(fast && fast->next){
        slow = slow->next;
        fast = fast->next->next;
    }
    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

struct ListNode *MergeSort(struct ListNode *a, struct ListNode *b){
    if(a == NULL) return b;
    if(b == NULL) return a;
    struct ListNode *result = NULL;
    if(a->val < b->val){
        result = a;
        result->next = MergeSort(a->next, b);
    }
    else{
        result = b;
        result->next = MergeSort(a,b->next);
    }
    return result;
}

void sort(struct ListNode **head_ref){
    struct ListNode *head = *head_ref;
    struct ListNode *a, *b;
    if(head == NULL || head->next == NULL) return head;
    splitList(head, &a, &b);
    sort(&a);
    sort(&b);
    *head_ref = MergeSort(a,b);
    
}

struct ListNode* sortList(struct ListNode* head){
    sort(&head);
    return head;
}