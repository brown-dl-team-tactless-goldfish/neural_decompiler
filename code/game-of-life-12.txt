#define DEAD_CELL  0
#define ALIVE_CELL 1
#define CASE_ONE_TO_ZERO    2    // previous is one
#define CASE_ZERO_TO_ONE    3    // previous is zero
const int eight_dir[8][2] = {
    {-1,-1},
    {-1, 0},
    {-1, 1},
    { 0, 1},
    { 1, 1},
    { 1, 0},
    { 1,-1},
    { 0,-1},
};
int Conway_cell_logic(int **board, int r, int c, int m, int n) {
    int eight_count = 0;
    for(int i=0;i<8;i++) {
        int nr = r + eight_dir[i][0];
        int nc = c + eight_dir[i][1];
        if(nr < 0 || nc < 0 || nr > (m-1) || nc > (n-1)) continue;

        if(board[nr][nc] == CASE_ONE_TO_ZERO || board[nr][nc] == ALIVE_CELL) {
            eight_count++;
        }
    }
    
    int result = board[r][c];
    if(eight_count < 2) {
        // 1 -> 0
        if(board[r][c] == ALIVE_CELL) {
            result = CASE_ONE_TO_ZERO;
        }
    }
    else if(eight_count == 3) {
        // 0 -> 1
        if(board[r][c] == DEAD_CELL) {
            // Alive the dead cell
            result = CASE_ZERO_TO_ONE;
        }
    }
    else if(eight_count > 3) {
        // 1 -> 0
        if(board[r][c] == ALIVE_CELL) {
            result = CASE_ONE_TO_ZERO;
        }
    }

    return result;
}

void gameOfLife(int **board, int boardSize, int *boardColSize) {
    for(int i=0;i<boardSize;i++) {
        for(int j=0;j<*boardColSize;j++) {
            // iterate the board[i][j]
            board[i][j] = Conway_cell_logic(board, i, j, boardSize, *boardColSize);
        }
    }

    // update the board[i][j] to 0 or 1
    for(int i=0;i<boardSize;i++) {
        for(int j=0;j<*boardColSize;j++) {
            if(CASE_ONE_TO_ZERO == board[i][j]) {
                board[i][j] = 0;
            }
            else if(CASE_ZERO_TO_ONE == board[i][j]) {
                board[i][j] = 1;
            }
        }
    }
}
