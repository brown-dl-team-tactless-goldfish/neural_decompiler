char * originalDigits(char * s){
    int char_rep[26];
    int temp_var = 0;
    int array[10] = {0,0,0,0,0,0,0,0,0,0};
    for(temp_var = 0; temp_var < 26; temp_var++){
        char_rep[temp_var] = 0;
    }
    int length = strlen(s);
    char *return_array;
    for(temp_var = 0; temp_var < length; temp_var++){
        char_rep[s[temp_var]-'a']++;
    }
    array[0] = char_rep['z'-'a'];
    char_rep['z'-'a'] -= array[0];
    char_rep['e'-'a'] -= array[0];
    char_rep['r'-'a'] -= array[0];
    char_rep['o'-'a'] -= array[0];
    array[2] = char_rep['w'-'a'];
    char_rep['t'-'a'] -= array[2];
    char_rep['w'-'a'] -= array[2];
    char_rep['o'-'a'] -= array[2];
    array[4] = char_rep['u'-'a'];
    char_rep['f'-'a'] -= array[4];
    char_rep['o'-'a'] -= array[4];
    char_rep['u'-'a'] -= array[4];
    char_rep['r'-'a'] -= array[4];
    array[1] = char_rep['o'-'a'];
    char_rep['o'-'a'] -= array[1];
    char_rep['n'-'a'] -= array[1];
    char_rep['e'-'a'] -= array[1];
    array[5] = char_rep['f'-'a'];
    char_rep['f'-'a'] -= array[5];
    char_rep['i'-'a'] -= array[5];
    char_rep['v'-'a'] -= array[5];
    char_rep['e'-'a'] -= array[5];
    array[6] = char_rep['x'-'a'];
    char_rep['s'-'a'] -= array[6];
    char_rep['i'-'a'] -= array[6];
    char_rep['x'-'a'] -= array[6];
    array[7] = char_rep['s'-'a'];
    char_rep['s'-'a'] -= array[7];
    char_rep['e'-'a'] -= array[7];
    char_rep['v'-'a'] -= array[7];
    char_rep['e'-'a'] -= array[7];
    char_rep['n'-'a'] -= array[7];
    array[9] = (char_rep['n'-'a'] >> 1);
    char_rep['n'-'a'] -= array[9];
    char_rep['i'-'a'] -= array[9];
    char_rep['n'-'a'] -= array[9];
    char_rep['e'-'a'] -= array[9];
    array[8] = char_rep['h'-'a'];
    char_rep['e'-'a'] -= array[8];
    char_rep['i'-'a'] -= array[8];
    char_rep['g'-'a'] -= array[8];
    char_rep['h'-'a'] -= array[8];
    char_rep['t'-'a'] -= array[8];
    array[3] = char_rep['h'-'a'];
    int result_count = 0;
    for(temp_var = 0; temp_var < 10; temp_var++){
       // printf("Element = %d count = %d", temp_var, array[temp_var]);
        result_count += array[temp_var];
    }
    return_array = malloc(sizeof(char)*(result_count+1));
    int cur_loc = 0;
    for(temp_var = 0; temp_var < 10; temp_var++){
        if(array[temp_var]){
            while(array[temp_var]){
                return_array[cur_loc] = temp_var + '0';
                array[temp_var]--;
                cur_loc++;
            }
        }
    }
    return_array[result_count] = '\0';
    return return_array;
}