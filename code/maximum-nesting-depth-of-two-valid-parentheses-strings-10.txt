class Solution {
public:
    vector<int> maxDepthAfterSplit(string seq) {
        // First find the max level of the string.
        // The min value of max nesting depth is max_level / 2.
        // So we mark all indices with level <= max_level / 2 as 0.
        // Notice for '()', '(' and ')' are on the same level.
        int size = seq.size(), maxLevel = 1;
        vector<int> levels(size, 1);
        
        for (int i = 1; i < size; ++i)
        {
            char c = seq[i];
            if (c == '(' && seq[i - 1] == '(')
            {
                levels[i] = levels[i - 1] + 1;
            }
            else if (c == '(' || seq[i - 1] == '(')
            {
                levels[i] = levels[i - 1];
            }
            else
            {
                levels[i] = levels[i - 1] - 1;
            }
            
            maxLevel = levels[i] > maxLevel ? levels[i] : maxLevel;
        }
        
        for (int i = 0; i < size; ++i)
        {
            levels[i] = levels[i] <= maxLevel / 2 ? 0 : 1;
        }
        
        return levels;
    }
};