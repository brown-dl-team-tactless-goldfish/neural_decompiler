typedef struct Stack {
    int dataArray[10000];
    int top;
} MinStack;

void minStackGetMinForPush(MinStack*);
int min = 0; // For Minimum Element in the Stack
/** initialize your data structure here. */

MinStack* minStackCreate() {
    static MinStack stack;
    stack.top=-1;
    return &stack;
}

void minStackPush(MinStack* obj, int x) {
    if(obj->top == 10000){
       return;
    }
    else{
        obj->top++;
        obj->dataArray[obj->top] = x;
        minStackGetMinForPush(obj);
    }
}

void minStackPop(MinStack* obj) {
    if(obj->top == -1){
        return;
    } 
    else{
        obj->top--;
    }
    
    if(obj->top == -1){
        return;
    }
    int minTemp = obj->dataArray[obj->top];
    for(int i=0;i<obj->top;i++){
        if(minTemp>obj->dataArray[i]){
           minTemp = obj->dataArray[i];
        }
    }
    min = minTemp;
}

int minStackTop(MinStack* obj) {
    return obj->dataArray[obj->top];
}

int minStackGetMin(MinStack* obj) {
    return min;
}

void minStackGetMinForPush(MinStack* obj){
    // if(obj->top == -1){
    //     return;
    // }
    
    if(obj->top==0){
        min = obj->dataArray[obj->top];
    }
    
    else if(obj->top>0){
        if(min > obj->dataArray[obj->top]){
            min = obj->dataArray[obj->top];
        }
    }
}

void minStackFree(MinStack* obj) {
    obj->top = -1;
}