string repeatLimitedString(string s, int r) {
        priority_queue<pair<char, int>> pq;
        unordered_map<char,int> cnt;
        for (auto c : s) cnt[c]++;
        for (auto it = cnt.begin(); it != cnt.end(); it++) {
            pq.push(*it);
        }
        string res="";
        
        auto use_most = [&](char ch, int f){
            if (r >= f) {
                res += string(f, ch);
            }
            else {
                res += string(r, ch);
                pq.push({ch, f - r});
            }
        };
        
        auto use_least = [&](char ch, int f){
            res += ch;
            if(--f > 0) {
                pq.push({ch, f});
            }
        };
        
        while(!pq.empty()) {
            auto cur = pq.top(); pq.pop();
            //top is same as the last char, pop next char
            if (cur.first == res.back()) {
                if (pq.empty()) break;
                auto [ch, f] = pq.top(); pq.pop();
                
                use_least(ch, f);
                pq.push(cur);
            }
            else {
                auto [ch, f] = cur;
                use_most(ch, f);
            }
        }
        return res;
    }