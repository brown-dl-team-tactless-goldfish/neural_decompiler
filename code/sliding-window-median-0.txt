int cmpfunc(const void* a, const void* b){
    if(*(int*)a  >= *(int*)b)
        return 1;
    else
        return -1;
}
void delete(int* arr, int n, int val){
    int left = 0, right = n-1;
    int mid;
    if(arr[n-1] == val)
        return;
    while(1){
        mid = left + (right-left)/2;
        if(arr[mid] == val){
            for(int i = mid; i < n-1; i++){
                arr[i] = arr[i+1];
            }
            break;
        }
        if(arr[mid] > val)
            right = mid - 1;
        else
            left = mid + 1;
    }
}
void insert(int* arr, int n, int val){
    if(val >= arr[n-2]){
        arr[n-1] = val;
        return ;
    }
        
    int left = 0, right = n-2;
    int mid;
    
    while(left < right){
        mid = left + (right - left)/2;
        if(arr[mid] <= val)
            left = mid +1;
        else
            right = mid;
    }
    for(int i = n-1; i > left; i--){
        arr[i] = arr[i-1];
    }
    arr[left] = val;
}
double* medianSlidingWindow(int* nums, int numsSize, int k, int* returnSize){
    int n = numsSize; 
    double* ans = malloc((n-k + 1) * sizeof(double));
    *returnSize = n-k + 1;
    if(k == 1){
        for(int i = 0; i < n; i++){
            ans[i] = nums[i];
        }
        return ans;
    }
    
    int* array = malloc(k * sizeof(int));
    memcpy(array, nums, k*sizeof(int));
    qsort(array, k, sizeof(int), cmpfunc);
    for(int i = 0; i < n-k; i++){
        if(k%2)
            ans[i] = array[k/2];
        else
            ans[i] = ((double)array[k/2] + array[k/2 - 1])/2;
        if(nums[i] == nums[i+k])
            continue;
        
        //delete
        delete(array, k, nums[i]);
        //insert
        insert(array, k, nums[i+k]);   
    }
    
    if(k%2)
        ans[n-k] = array[k/2];
    else
        ans[n-k] = ((double)array[k/2] + array[k/2 - 1])/2;
    return ans;
}