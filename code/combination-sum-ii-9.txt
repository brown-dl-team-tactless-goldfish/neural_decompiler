 public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> temp=new ArrayList<>();
        helper(candidates,target,res,temp,0,candidates.length);
        return res;
    }
    public void helper(int[] arr,int target,List<List<Integer>> res, List<Integer> temp,int start,int n){
        if(target==0){
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i=start;i<n;i++){
            if(arr[i]>target){
                break;
            }
            if(i>start && arr[i]==arr[i-1]){
                continue;
            }
            temp.add(arr[i]);
        
            helper(arr,target-arr[i],res,temp,i+1,n);
            temp.remove(temp.size()-1);
      
        }
    }