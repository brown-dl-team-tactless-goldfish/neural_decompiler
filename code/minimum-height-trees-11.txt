class Solution {
public:
	vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
		unordered_map<int, unordered_set<int>> m;
		for(auto& x:edges)
		{
			m[x[0]].insert(x[1]);
			m[x[1]].insert(x[0]);
		}

		queue<int> q;
		unordered_set<int> table;
		vector<int> visited(n);
		for(int i=0;i<n;i++)
		{
			table.insert(i);
			if(m[i].size()==1)
			{
				q.push(i);
				visited[i]=1;
			}
		}


		while(table.size()>2)
		{
			int len=q.size();
			while(len>0)
			{
				len--;
				int cur=q.front();
				q.pop();


				table.erase(cur);
				for(auto& x:m[cur])
				{
					m[x].erase(cur);
					if(m[x].size()==1)
					{
						q.push(x);
					}    
				}
			}
		}
		vector<int> ans(table.begin(),table.end());
		return ans;
	}
};