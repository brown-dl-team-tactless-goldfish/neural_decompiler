
struct Node{

   Node* links[2];
   
   bool containKey(int num){
       return (links[num]!=NULL);
   }
    
    void put(int num, Node* node){
        links[num] = node;
    }
    
    Node* get(int num){
        return links[num];
    }
}; 

class Trie{

 private: Node* root;

 public:
    
    Trie(){
       root = new Node();     
    }
    
    public:
    void insert(int num){
        Node* node = root;
        
        for(int i=31; i>=0; i--){
            int bit = (num >>i) & 1;
            if(!node->containKey(bit)){
                node->put(bit, new Node());
            }
            node = node->get(bit);
        }
    }
    
    public:
    int findMaxXor(int num){
        Node* node = root;
        int maxVal = 0;
       for(int i=31; i>=0; i--){
            int bit =(num>>i) & 1;
           if(node->containKey(!bit)){
               maxVal = maxVal | (1<< i);
               node = node -> get(!bit);
           }else {
                node = node -> get(bit);
           }
       }
     return maxVal;   
    }
    
    
};
class Solution {
public:
    Trie trie;
    
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
       
          sort(nums.begin() , nums.end());
        
          vector<pair<int, pair<int,int>>> oQ;
          int q = queries.size();
          
        int ii=0;
        for(auto it: queries){
            oQ.push_back({it[1],{it[0],ii++}});
        }
          
         
        sort(oQ.begin(), oQ.end());
        
        vector<int> result(q,0);
         int idx=0;
         int n= nums.size();
        
        for(int i=0; i<q; i++){
            int mi = oQ[i].first;
            int xi = oQ[i].second.first;
            int qIdx= oQ[i].second.second;
            while(idx <n and nums[idx] <= mi){
                trie.insert(nums[idx]);
                idx++;
            }
            if(idx==0) result[qIdx] =-1;
            else result[qIdx] = trie.findMaxXor(xi);
        }
                          
                          
       
        return result;
    }
};