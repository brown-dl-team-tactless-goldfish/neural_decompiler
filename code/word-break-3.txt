int * get_lens(char ** d, int n)
{
        int * rv = malloc(sizeof(*rv) * n); assert(rv);
        for (int i = 0; i < n; ++i)
                rv[i] = strlen(d[i]);
        return rv;
}

bool wordBreak(char* s, char** wordDict, int wordDictSize) {
        int * wordLens = get_lens(wordDict, wordDictSize);
        int slen = strlen(s);
        
        bool * arr = malloc(sizeof(*arr) * slen);

        for (int i = 0; i < slen; ++i) {
                arr[i] = false; /* Initialize it to false */
                for (int k = 0; k < wordDictSize; ++k) {
                        int lens = wordLens[k];
                        if (lens > i+1) continue;
                        
                        if (i+1 - lens != 0 && arr[i-lens] == false) continue;

			if (0 == strncmp(&(s[i+1-lens]), wordDict[k], lens)) {
                                arr[i] = true;
                                break;
                        }
                }
        }
        
        bool rv = arr[slen-1];
        free(wordLens);
        free(arr);
        return rv;
}