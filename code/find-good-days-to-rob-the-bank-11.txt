class Solution {
public:
    vector<int> goodDaysToRobBank(vector<int>& s, int time) {
        int n = size(s);
        if(!time){ //if time = 0 , just fill the array 0 to n-1 and return
            vector<int> ans(n);
            iota(ans.begin(),ans.end(),0);
            return ans;
        }

        vector<int> ans{};
        vector<int> leftIncrement(n,0);//to store how many decreasing elements present in left side of current element
        vector<int> rightIncrement(n,0);to store how many increasing elements present in right side of current element
        
        for(int i=1;i<n;++i)
            if(s[i] <= s[i-1]) leftIncrement[i] = leftIncrement[i-1]+1;
            else leftIncrement[i] = 0;

        for(int i=n-2;i>=0;--i)
            if(s[i] <= s[i+1]) rightIncrement[i] = rightIncrement[i+1]+1;
            else rightIncrement[i] = 0;

        for(int i=0;i<n;i++)
            if(leftIncrement[i]>=time and rightIncrement[i]>=time) ans.emplace_back(i);
        
        return ans;
    }
};