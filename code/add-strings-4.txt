char* addStrings(char* num1, char* num2) {

    int len1 = strlen(num1);
    int olen1=len1;
    int len2 = strlen(num2);
    int olen2=len2;
    int maxlen = len1 > len2 ? len1 : len2;
    if (len1 == len2 && (num1[0] + num2[0] > '0' + '0' + 9))
		++maxlen;
    char* result = (char*)malloc((maxlen+1) * sizeof(char)); // allocate space for result and carry

    int resultmax =maxlen;
    int maxlenflag = 0;
    int carry=0;
    
    while(len1>0 && len2 >0)
    {
        if((num1[len1]-'0'+num2[len2]-'0'+carry)>=10)
        {
          result[--maxlen] =(char) ((num1[--len1]-'0'+num2[--len2]-'0'+carry)%10+'0');
        }
        else
        {
          result[--maxlen] =(char) ((num1[--len1]-'0'+num2[--len2]-'0')%10+'0');
        }

        if((num1[len1]-'0'+num2[len2]-'0'+carry)>=10)
        {
          carry = 1;
        }
        else
        {
          carry =0;
        }
    }

    while(len1>0)
    {
      if(carry==1)
      {
        result[--maxlen] = (char) ((num1[--len1]-'0'+carry)%10+'0');
      }
      else
      {
        result[--maxlen] = (char) ((num1[--len1]-'0')%10+'0');
      }

      if((num1[len1]-'0'+carry)>=10)
      {
          carry = 1;
      }
      else
      {
        carry =0;
      }
    }
    while(len2>0)
    {
      if(carry == 1)
      {
        result[--maxlen] = (char) ((num2[--len2]-'0'+carry)%10+'0');
      }
      else
      {
        result[--maxlen] = (char) ((num2[--len2]-'0')%10+'0');
      }
      if((num2[len2]-'0'+carry)>=10)
      {
          carry = 1;
      }
      else
      {
        carry =0;
      }
    }


    if(maxlen>0)
    {
      result[--maxlen]=(char)(carry+'0');
      maxlenflag =1;
    }

    char* newresult = (char*)malloc((resultmax+2)*sizeof(char));
    if(((num2[len2]-'0'+carry)>=10||(num1[len1]-'0'+carry)>=10||((num1[len1]-'0'+num2[len2]-'0'+carry)>=10)&&(olen1==olen2) ) && (maxlenflag == 0))
    {
    
      for (int i = 0; i < resultmax; i++) 
      {
        newresult[i+1] = result[i];
      }
      newresult[0] = (char)(1+'0');
      newresult[resultmax+1]='\0';//string end
      return newresult;
    }
    else
    {
      result[resultmax]='\0';//string end
    }

    return result;
}