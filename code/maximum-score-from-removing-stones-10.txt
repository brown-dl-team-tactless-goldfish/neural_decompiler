class Solution {
public:
    int maximumScore(int a, int b, int c) {
        // To get maximum score, we need to remove all stones from minimum piles, saying a, and try as much as possible,
        // to make b and c's stones close to each other.
        // There are 3 scenarios (assume a <= b <= c):
        // 1) if a == c - b, we can remove all stones, hence (a + b + c) / 2 moves.
        // 2) if a < c - b, there are c - b - a stones left, the stones are moved for a + b times.
        // 3) if a > c - b, if a is even number, we can remove all stones hence (a + b + c) / 2 moves, OR
        //    if a is odd number, there is 1 stone left, hence (a + b + c) / 2 moves as well.
        // Scenario 1) and 3) can be merged.
        vector<int> stones{a, b, c};
        sort(stones.begin(), stones.end());
        return stones[0] < stones[2] - stones[1] ? stones[0] + stones[1] : (a + b + c) / 2;
    }
};