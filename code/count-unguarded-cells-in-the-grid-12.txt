class Solution {
private:
    int move(vector<vector<int>> &grid, vector<vector<bool>> &visited, int i, int j, string dir) {
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid.at(i).size()) return 0;

        // see a wall, go back
        if(grid.at(i).at(j) == 2) return 0;

        // see a guard, go back
        if(grid.at(i).at(j) == 1) return 0;

        // used to make sure we're not over-counting already visited cells
        int num = visited.at(i).at(j) == false ? 1 : 0;

        // cell is now visited
        visited.at(i).at(j) = true;

        if(dir == "up")    return num + move(grid, visited, i - 1, j, dir);
        if(dir == "down")  return num + move(grid, visited, i + 1, j, dir);
        if(dir == "left")  return num + move(grid, visited, i, j - 1, dir);
        if(dir == "right") return num + move(grid, visited, i, j + 1, dir);

        return 0; 
    }

public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>> grid(m, vector<int>(n, 0));

        vector<vector<bool>> visited(m, vector<bool>(n, false));
        
        // come across a guard
        for(vector<int> &coords : guards) 
            grid.at(coords.at(0)).at(coords.at(1)) = 1;

        // come across a wall
        for(vector<int> &coords : walls) 
            grid.at(coords.at(0)).at(coords.at(1)) = 2;

        // we do not count the guard nor the wall cells in our grid
        int totalCells = m * n - (guards.size() + walls.size());

        // traversing grid based on simulation
        for(int i = 0; i < grid.size(); i++)
            for(int j = 0; j < grid.at(i).size(); j++)
                if(grid.at(i).at(j) == 1) { 
                    totalCells -= move(grid, visited, i - 1, j, "up");
                    totalCells -= move(grid, visited, i + 1, j, "down");
                    totalCells -= move(grid, visited, i, j - 1, "left");
                    totalCells -= move(grid, visited, i, j + 1, "right");
                }
        


        return totalCells;
    }
};