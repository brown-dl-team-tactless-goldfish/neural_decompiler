class Solution {
public:
    vector<int> p;
    int find(int x) {
        if(p[x] == x)  return p[x] = x;
        return p[x] = find(p[x]);
    }
    void combine(int a, int b) {
        a = find(a); b = find(b);
        p[a] = b;
    }
    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& qs) {
        p.resize(n + 1);
        sort(edgeList.begin(), edgeList.end(), [](auto &a, auto &b){
            return a[2] < b[2];
        });
        vector<pair<int, int> > ind(n + 1);
        for(int i = 1; i <= n;++i) {
            p[i] = i;
        }
        for(int i = 0; i < qs.size(); ++i) {
            qs[i].push_back(i);
        }
        sort(qs.begin(), qs.end(), [](auto &a, auto &b){
            return a[2] < b[2];
        });
        vector<bool> ans(qs.size());
        int i = 0, j = 0;
        for(int i = 0; i < qs.size(); ++i) {
            auto &q = qs[i];
            int u = q[0], v = q[1], dis = q[2], idx = q[3];
            while(j < edgeList.size() && edgeList[j][2] < dis){
                combine(edgeList[j][0], edgeList[j][1]);
                ++j;
            }
            ans[idx] = find(u) == find(v);
        }
        return ans;
    }
};