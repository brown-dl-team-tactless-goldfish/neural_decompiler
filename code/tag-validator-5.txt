    bool isValid(string code) {
        int size = code.size();
        if (code[0] != '<' || code.back() != '>') {
            return false;
        }
        int i = 0;
        stack<string> tagStack;
        while (i < size) {
            if (code[i] != '<') {
                i++;
                continue;
            }
            int nextIndex = i + 1;
            if (code[nextIndex] == '/') {
                string endStr = "";
                i = nextIndex + 1;
                if (validTag(code, i, endStr)) {
                    if (tagStack.size() > 0 && endStr == tagStack.top()) {
                        tagStack.pop();
                        i++;
                        // all content and tag should be inside a pair of tag
                        // prevent <A></A><B></B> from happening
                        if (tagStack.size() == 0 && i != size) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else if (code[nextIndex] == '!') {
                // content must be inside of the tag
                if (tagStack.size() == 0) {
                    return false;
                }
                i = nextIndex + 1;
                int tagIndex = code.find("[CDATA[", i);
                if (tagIndex == string::npos || tagIndex != i) {
                    return false;
                }
                i += 7;
                tagIndex = code.find("]]>", i);
                if (tagIndex == string::npos) {
                    return false;
                }
                i = tagIndex + 3;
            } else {
                string startStr = "";
                i++;
                if (validTag(code, i, startStr)) {
                    tagStack.push(startStr);
                    i++;
                } else {
                    return false;
                }
            }
        }
        return tagStack.size() == 0;
    }
    
    bool validTag(string& code, int& index, string& tagStr) {
        while (code[index] != '>') {
            if (code[index] == '\0') {
                return false;
            }
            if (code[index] < 'A' || code[index] > 'Z') {
                return false;
            } 
            if (tagStr.size() >= 9) {
                return false;
            }
            tagStr += code[index++];
        }
        if (tagStr.size() == 0) {
            return false;
        }
        return true;
    }