#define N 10

typedef struct Trie{
    struct Trie* children[N];
    int val;
    bool is_leaf;
}Trie;

Trie* trieCreate() {
    Trie* node = malloc(sizeof(Trie));
    for(int i = 0; i < N; i++){
        node->children[i] = NULL;
    }
    node->is_leaf = false;
    return node;
}

void trieInsert(Trie* obj, int val) {
    Trie* tmp = obj;
    int data[5] = {0, 0 ,0 , 0, 0};
    int idx = 0;
    int k = val;
    while(k){
        data[idx] = k%10;
        idx++;
        k /= 10;
    }

    for(int i = idx-1; i >=0; i--){
        int p = data[i];
        if(tmp->children[p] == NULL){
            tmp->children[p] = trieCreate();
        }
        tmp = tmp->children[p];
    }  
    tmp->is_leaf = true;
    tmp->val = val;
}

void process(int* ans, int* a_id, Trie* node){
    if(node->is_leaf){
        ans[*a_id] = node->val;
        *a_id = *a_id + 1;
    }
    for(int i = 0; i < 10; i++){
        if(node->children[i] != NULL)
            process(ans, a_id, node->children[i] );
    }
}

int* lexicalOrder(int n, int* returnSize){
    *returnSize = 0;
    int* ans = malloc(n * sizeof(int)) ;
    Trie* root = trieCreate();
    for(int i = 1; i <= n; i++){
        trieInsert(root, i);
    }
    process(ans, returnSize, root);
    return ans;
}