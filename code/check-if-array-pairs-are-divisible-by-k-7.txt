class Solution {
public:
    bool canArrange(vector<int>& arr, int k) {
        unordered_map<int, int> mp;

        // while finding remainder it is better to do  (x%k + k) % k, to account for negative remainders

        // we want to find whether it is possible to form pairs such that every pair is divisible by K

        // so first store the count of remainder

        // for any number that gives a remainder rem , any number which gives a remainder k - rem can be paired up with it

        // so in order to form pairs number giving remainder rem and numbers giving remainder k - rem should be equal in number, only then all can be paired up


        for (int x : arr) mp[(x % k + k ) % k]++;

        for (int x : arr) {

            int rem = (x % k  + k ) % k;
            if (rem == 0) {
                if (mp[rem] % 2 == 1) return false;
            }

            else if (mp[rem] != mp[k - rem]) return false;
        }

        return true;
    }
};