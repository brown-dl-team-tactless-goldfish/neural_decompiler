void dfs(char** board, int rSize, int cSize, int r, int c) {
    if (r < 0 || c < 0|| r > rSize - 1 || c > cSize - 1 || board[r][c] == 'X' || board[r][c] == 'T') return;
    board[r][c] = 'T';
    dfs(board, rSize, cSize, r + 1, c);
    dfs(board, rSize, cSize, r - 1, c);
    dfs(board, rSize, cSize, r, c + 1);
    dfs(board, rSize, cSize, r, c - 1);
}

void solve(char** board, int boardSize, int* boardColSize) {
    int rSize = boardSize, cSize = boardColSize[0];
    for (int i = 0; i < cSize; i++) {
        if (board[0][i] == 'O') dfs(board, rSize, cSize, 0, i);
        if (board[rSize - 1][i] == 'O') dfs(board, rSize, cSize, rSize - 1, i);
    }
    for (int i = 0; i < rSize; i++) {
        if (board[i][0] == 'O') dfs(board, rSize, cSize, i, 0);
        if (board[i][cSize - 1] == 'O') dfs(board, rSize, cSize, i, cSize - 1);
    }
    for (int i = 0; i < rSize; i++) {
        for (int j = 0; j < cSize; j++) {
            if (board[i][j] == 'O') board[i][j] = 'X';
            if (board[i][j] == 'T') board[i][j] = 'O';
        }
    }
}