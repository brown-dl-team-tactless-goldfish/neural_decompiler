class Solution {
public:
    vector<int> v;
    
    int dp[1001][1025];
    vector<int> nums;
    map<int,int> mp;
    int mod = 1e9+7;
    int n;
    int rec(int level,int mask){
        if(level == n){
            return 1;
        }
        if(dp[level][mask] != -1) return dp[level][mask];
        int ans = rec(level+1,mask)%mod;
                int temp = mask;
        if(mp.find(nums[level]) == mp.end()){

        bool ok = true;
        for(int i=0;i<10;i++){
            if(nums[level]%v[i] == 0 && (mask&(1<<i))) ok = false;
            if(nums[level]%v[i] == 0) mask|=(1<<i);
        }
        if(ok) {
            ans+=(rec(level+1,mask))%mod;
            ans%=mod;
        }
        }
        return dp[level][temp] = ans;
    }
    
    int squareFreeSubsets(vector<int>& _nums) {
        nums = _nums;
        n = nums.size();
        mp[4] = 1;
        mp[9] = 1;
        mp[16] = 1;
        mp[25] = 1;
        mp[8] = 1;
        mp[27] = 1;
        mp[12] = 1;
        mp[20] = 1;
        mp[24] = 1;
        mp[28] =  1;
        mp[18] = 1;
        
        memset(dp,-1,sizeof(dp));
        v = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
        return (rec(0,0)-1+mod)%mod;
    }
};