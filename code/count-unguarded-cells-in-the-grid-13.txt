class Solution {
public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>> v(m,vector<int>(n,-1));
        
        int n1=walls.size();
        
        for(int i=0;i<n1;i++)
        {
            v[walls[i][0]][walls[i][1]]=2;
        }
        
        //***************************************
        
        n1=guards.size();
        
        for(int i=0;i<n1;i++)
        {
            int x=guards[i][0];
            int y=guards[i][1];
            
            v[x][y]=0;
        }
        
        for(int i=0;i<n1;i++)
        {
            int x=guards[i][0];
            int y=guards[i][1];
            
            
            int p=y+1;
            while(p<n)
            {
                if(v[x][p]==0 || v[x][p]==2)
                {
                    break;
                }
                v[x][p]=1;
                p++;
            }
            p=y-1;
            while(p>=0)
            {
                if(v[x][p]==0 || v[x][p]==2)
                {
                    break;
                }
                v[x][p]=1;
                p--;
            }
            int q=x+1;
            while(q<m)
            {
                if(v[q][y]==0 || v[q][y]==2)
                {
                    break;
                }
                v[q][y]=1;
                q++;
            }
            q=x-1;
            while(q>=0)
            {
                if(v[q][y]==0 || v[q][y]==2)
                {
                    break;
                }
                v[q][y]=1;
                q--;
            }
            
        }
        int res=0;
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                // cout<<v[i][j]<<" ";
                if(v[i][j]==-1) res++;
            }
            // cout<<endl;
        }
        
        return res;
    }
};