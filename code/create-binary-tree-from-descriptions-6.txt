		/**
		 * Definition for a binary tree node.
		 * struct TreeNode {
		 *     int val;
		 *     TreeNode *left;
		 *     TreeNode *right;
		 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
		 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
		 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
		 * };
		 */
		class Solution {
		public:
			TreeNode* createBinaryTree(vector<vector<int>>& d) {

				map<int,TreeNode*> m;
				int n = d.size();
				TreeNode* head = NULL;
				int res = 0;
				map<int,bool> b;

				for(int i=0; i<n; i++){
					int p = d[i][0];
					int c = d[i][1];
					int l = d[i][2];

					if(m.find(p)==m.end()){
						TreeNode* a = new TreeNode(p);
						m[p] = a;
					}
					if(m.find(c)==m.end()){
						TreeNode* a = new TreeNode(c);
						m[c] = a;
					}

					if(l==1){
						m[p]->left = m[c];
					}else{
						m[p]->right = m[c];
					}

					b[c] = true;


				}

				for(int i=0; i<n; i++){
					int c = d[i][0];
					if(b[c]!=true){
						head = m[c];
						break;
					}

				}
				return head;

			}
		};