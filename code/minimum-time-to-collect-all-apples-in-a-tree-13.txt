public class Solution 
{
    public int MinTime(int n, int[][] edges, IList<bool> hasApple)
    {
        var graph = new Dictionary<int, HashSet<int>>();
        for(int i = 0; i < n; i++)
            graph[i] = new HashSet<int>();
        foreach(var edge in edges)
        {
            int u = edge[0], v = edge[1];
            graph[u].Add(v);
            graph[v].Add(u);
        }
        
        return DFS(graph, 0, hasApple, new bool[n])[1];
    }
    
    private int[] DFS(Dictionary<int, HashSet<int>> graph, int current, IList<bool> hasApple, bool[] visited)
    {
        int[] result = new int[2];
        if(hasApple[current]) result[0] = 1;
        visited[current] = true;
        foreach(var next in graph[current])
        {
            if(!visited[next])
            {
                var nextResult = DFS(graph, next, hasApple, visited);
                if(nextResult[0] == 1)
                {
                    result[0] = 1;
                    result[1] += nextResult[1] + 2;
                }
            }
        }
        
        return result;
    }
}