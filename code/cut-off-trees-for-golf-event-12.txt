public class Solution {
    public int CutOffTree(IList<IList<int>> forest) {
        
        List<int[]> treeList = new List<int[]>();
        for(int i = 0; i < forest.Count; i++)
        {
            for(int j = 0; j < forest[i].Count; j++)
            {
                if(forest[i][j] > 1)
                    treeList.Add(new int[3]{i, j, forest[i][j]});
            }
        }
        
        treeList.Sort((a,b) => a[2] - b[2]);
        
        int res = 0, currX = 0, currY = 0;
        foreach(var tree in treeList)
        {
            int step = bfs(forest, currX, currY, tree[0], tree[1]);
            if(step == -1)
                return -1;
            
            res += step;
            currX = tree[0];
            currY = tree[1];
        }
        
        return res;
    }
    
    private int bfs(IList<IList<int>> forest, int currX, int currY, int targetX, int targetY)
    {
        int m = forest.Count, n = forest[0].Count;
        bool[,] visited = new bool[m,n];
        int[,] dirs = new int[,]{{-1,0}, {0,1}, {1,0}, {0,-1}};
        Queue<(int,int)> queue = new Queue<(int,int)>();
        queue.Enqueue((currX, currY));
        visited[currX,currY] = true;
        int step = 0;
        
        while(queue.Count > 0)
        {
            int size = queue.Count;
            for(int i = 0; i < size; i++)
            {
                var curr = queue.Dequeue();
                if(curr.Item1 == targetX && curr.Item2 == targetY)
                    return step;
                
                for(int d = 0; d < 4; d++)
                {
                    int nextX = curr.Item1 + dirs[d,0];
                    int nextY = curr.Item2 + dirs[d,1];
                    if(nextX >= 0 && nextX < m && nextY >= 0 && nextY < n && !visited[nextX,nextY] && forest[nextX][nextY] > 0)
                    {
                        queue.Enqueue((nextX,nextY));
                        visited[nextX,nextY] = true;
                    }
                }
            }
            step++;
        }
        return -1;
    }
}