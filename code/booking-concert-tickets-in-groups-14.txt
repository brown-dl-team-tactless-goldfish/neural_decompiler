#define ll long long
class BookMyShow {
    vector<ll> dp,fen;
    vector<int> nums; int n,m,st; 
   void fenupdate(int i,int x){  // O(Log(N))
        while(i<=n){
            fen[i] = fen[i] + x;
            i = i + (i&-i);
        }
    }
    ll fensum(int i){  // O(Log(N))
        ll s = 0;
        while(i>0){
            s+=fen[i]; i = i-(i&-i);
        }
        return s;
    }
    void update(int l,int h,int n,int i,int val){ // O(Log(N))
        if(l<=h){
            if(l==h){
                if(i==l) dp[n] = val;
                return;
            }
            int mid = (l+h)/2;
            if(i>mid) update(mid+1,h,2*n+2,i,val);
            else update(l,mid,2*n+1,i,val);
            dp[n] = max(dp[2*n+1],dp[2*n+2]);
        }
    }
    int query(int l,int h,int n,int i,int j){   // O(Log(N))
        if(l<=h){
            if(l>j || h<i) return -1;
            else if(l>=i && h<=j) return dp[n];
            int mid = (l+h)/2;
            return max(query(l,mid,2*n+1,i,j),query(mid+1,h,2*n+2,i,j));
        }
        else return -1;
    }
    int find(int x,int val){  // O(Log(N)*Log(N))
        int l = 0, h = x,re = -1;
        while(l<=h){
            int m = (l+h)/2;
            int k = query(0,n-1,0,0,m);
            if(k>=val){ 
               re = m; h=m-1;
            }
            else l = m+1;
        }
        return re;
    }
public:
    BookMyShow(int n, int m) {
        this->n = n; this->m = m; st = 0;
        dp = vector<ll>(4*n+1,0);
        nums = vector<int>(n+1,0);
        fen =  vector<ll>(n+2,0);
        for(int i = 0; i<n;++i){
            nums[i] = 0; 
            update(0,n-1,0,i,m);
            fenupdate(i+1,m);
        }
    }
    
    vector<int> gather(int k, int maxRow) {  // O(Log(N)*Log(N))
        int in = find(maxRow,k);
        if(in==-1) return {};
        int ans = nums[in];
        nums[in]+=k; 
        update(0,n-1,0,in,m-nums[in]);
        fenupdate(in+1,-k);
        return {in,ans};
    }
    
    bool scatter(int k, int maxRow) {   
        if(fensum(maxRow+1)<k) return 0;
        for(int i = st; i<n && k;++i){
            if(nums[i]==m) {st = i+1; continue;}
            int j = nums[i];
            nums[i] = min(m,nums[i]+k);
            update(0,n-1,0,i,m-nums[i]);
            fenupdate(i+1,j-nums[i]);
            if(nums[i]==m) st = i+1;
            k = k - min(k,m-j);
        }
        return 1;
    }
};