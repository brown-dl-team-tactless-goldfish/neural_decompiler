class Solution {
public:
    void Build(){
        char c = 'A';
        int row = 0;
        int count = 0;
        for(int i = 0; i<26; ++i){
            char cc = c+i;
            pair<int, int> loc = {row, count};
            m.insert({cc, loc});
            ++count;
            if(count == 6){
                count = 0;
                row++;
            }
        }
    }

    int dis(char a, char b){
        pair<int, int> f = m[a];
        pair<int, int> s = m[b];
        return abs(f.first - s.first) + abs(f.second - s.second);
    }
    
    int solve(string word, int ind, char f, char s){
        
        if(ind == word.size())
            return 0;
        
        int key = ind;
        key = key * 26 + f;
        key = key * 26 + s;
        if(out.count(key))
            return out[key];
        
        if(s == '0'){
            out[key] = min(solve(word, ind+1, word[ind], s) + dis(f, word[ind]), solve(word, ind+1, f, word[ind]));
        }
        else{
            out[key] = min(solve(word, ind+1, word[ind], s) + dis(f, word[ind]), 
                       solve(word, ind+1, f, word[ind]) + dis(s, word[ind]) );
        }
        return out[key];
    }
    
    int minimumDistance(string word) {
        Build();
        return solve(word, 1, word[0], '0');
    }
    
    map<char, pair<int, int>> m;
    unordered_map<int, int> out;
};