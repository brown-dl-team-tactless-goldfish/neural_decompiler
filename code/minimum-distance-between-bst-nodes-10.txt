    if(root == NULL) return;
    
    inorder(root->left, nums, len);
    nums[*(len)] = root->val; // make the current item in nums the current root's values
    *(len) += 1; // increment length
    inorder(root->right, nums, len);
    
    return;
}


int minDiffInBST(struct TreeNode* root){
    if(root == NULL) return 0;
        
    int min; // initialize variable that stores min value
    
    if(root -> left == NULL){
        min = root->right->val - root->val; // if the root has no left child make initial difference right child - root
    }else{
        min = root->val - root->left->val; // if the root has left child make the inital difference root - left child
    }

    int len = 0; // initialize length counter and aarray where you will store nums
    int nums[100]; // size is 100, given by problem
    
    inorder(root, nums, &len); // do an in order traversal - this inputs values into the array sorted,
    
    for(int i = 1; i < len; i++){
        if(nums[i] - nums[i-1] < min){
            min = nums[i] - nums[i- 1]; // get the difference between adjacent array entries and check if they are lower
        }
    }
    
    return min;
}```