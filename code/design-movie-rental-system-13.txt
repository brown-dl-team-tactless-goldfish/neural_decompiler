class MovieRentingSystem {
public:
    #define pii pair<int,int>
    unordered_map<int, set<pii>> unrented; 
    set<vector<int>> allRented; 
    unordered_map<int, unordered_map<int,int>> prices ;
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
          for(auto x:entries){
              unrented[x[1]].insert({x[2], x[0]}); 
              prices[x[1]][x[0]] = x[2]; 
          }
    }
    
    vector<int> search(int movie) {
        vector<int> res; 
        int count = 0; 
        for(auto x:unrented[movie]){
            count ++; 
            res.push_back(x.second); 
            if(count == 5) break ;
        }
        return res;  
    }
    
    void rent(int shop, int movie) {
        unrented[movie].erase({prices[movie][shop], shop}); 
        allRented.insert({prices[movie][shop], shop, movie}); 
    }
    
    void drop(int shop, int movie) {
        unrented[movie].insert({prices[movie][shop], shop});
        allRented.erase({prices[movie][shop], shop, movie}); 
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> res; 
        int count = 0; 
        for(auto x:allRented){
            count ++; 
            res.push_back({x[1], x[2]}); 
            if(count == 5) break; 
        }
        return res ; 
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */