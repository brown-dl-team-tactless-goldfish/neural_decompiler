/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int getVal(int *a, int *p){
    int i = *p;
    while (i >= 0){
        if (a[i] > 0){
            if (a[i] > 1){
                a[i]--;
                *p = i+1;
                return i;
            }
            else{
                *p = i;
                return i;
            }
        }
        i--;
    }
    return 0;
}

void mapToZero(int *a, int val){
    a[val]--;
}

int* replaceElements(int* arr, int arrSize, int* returnSize){
    int i = 0;
    int map[100001];
    int p = 100000, max;
    int *r = (int *)malloc(arrSize*sizeof(int));
    for (; i<100001; i++){
        map[i] = 0;
    }
    for (i=0; i<arrSize; i++){
        map[arr[i]]++;
    }
    max = getVal(map, &p);
    p--;
    for (i=0; i<arrSize-1; i++){
        if (arr[i] != max){
            r[i] = max;
            mapToZero(map, arr[i]);
        }
        else{
            max = getVal(map, &p);
            p--;
            r[i] = max;
        }
    }
    r[arrSize-1] = -1;
    *returnSize = arrSize;
    return r;
}