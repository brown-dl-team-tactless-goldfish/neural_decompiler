typedef struct{
    int rating;
    int rightHigher;
    int rightLower;
    int leftHigher;
    int leftLower;
} Rating;

void merge(Rating *R, int left, int middle, int right){
    Rating *Left, *Right;
    int i, j, k, n1, n2;
    
    n1 = middle-left+1;
    n2 = right-middle;
    Left = (Rating*)malloc(sizeof(Rating)*n1);
    Right = (Rating*)malloc(sizeof(Rating)*n2);
    for(i=0;i<n1;i++)
        Left[i] = R[left+i];
    for(j=0;j<n2;j++)
        Right[j] = R[middle+1+j];
    
    for(i=0,j=0,k=0;k<n1+n2;k++){
        if(i==n1){
            while(j<n2){
                R[left+k] = Right[j];
                R[left+k].leftLower += n1;
                j++;
                k++;
            }
            break;
        }
        if(j==n2){
            while(i<n1){
                R[left+k] = Left[i];
                R[left+k].rightLower += n2;
                i++;
                k++;
            }
            break;
        }
        if(Left[i].rating < Right[j].rating){
            R[left+k] = Left[i];
            R[left+k].rightHigher += n2-j;
            R[left+k].rightLower += j;
            i++;
        }
        else{
            R[left+k] = Right[j];
            R[left+k].leftLower += i;
            R[left+k].leftHigher += n1-i;
            j++;
        }
    }
}

void mergesort(Rating *R, int left, int right){
    int middle;
    if(left<right){
        middle = (left+right)/2;
        mergesort(R, left, middle);
        mergesort(R, middle+1, right);
        merge(R, left, middle, right);
    }
}

int numTeams(int* rating, int ratingSize){
    int i, sum;
    Rating *R;
    
    R = (Rating*)calloc(ratingSize, sizeof(Rating));
    for(i=0;i<ratingSize;i++)
        R[i].rating = rating[i];
    
    mergesort(R, 0, ratingSize-1);
    
    for(i=0, sum=0;i<ratingSize;i++)
        sum += R[i].rightHigher*R[i].leftLower + R[i].rightLower*R[i].leftHigher;
    
    return sum;
}

