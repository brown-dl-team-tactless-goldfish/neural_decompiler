public class Solution {
    
    int maxProfit;
    int minRotationForMaxProfit;
    int boardingCost;
    int runningCost;
    
    public int MinOperationsMaxProfit(int[] customers, int boardingCost, int runningCost) 
    {
        this.boardingCost = boardingCost;
        this.runningCost = runningCost;
        this.maxProfit = -1;
        this.minRotationForMaxProfit = -1;
        int waitingClients = 0, rotation = 0, boardedCustomers = 0;
        
        foreach(int customer in customers)
        {
            waitingClients+=customer;
            calculateProfit(ref boardedCustomers, ref rotation, ref waitingClients);
        }
        while(waitingClients>0)
        {
            calculateProfit(ref boardedCustomers, ref rotation, ref waitingClients);
        }
        return minRotationForMaxProfit;
    }
    
    private void calculateProfit(ref int boardedCustomers, ref int rotation, ref int waitingClients)
	{
        int board = Math.Min(4,waitingClients);
        waitingClients-= board;
        boardedCustomers += board;
        rotation++;
        int profit = (boardedCustomers * boardingCost) - (rotation * runningCost);
        if(maxProfit<profit)
        {
            maxProfit = profit;
            minRotationForMaxProfit = rotation;
        }
    }
}