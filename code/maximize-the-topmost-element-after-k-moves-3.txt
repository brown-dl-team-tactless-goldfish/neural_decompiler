class Solution {
public:
    int maximumTop(vector<int>& nums, int k) {
        
        int size = nums.size();
        
        // if k==0 then return first element if size > 0 
        if(k==0) return size>0 ? nums[0] : -1;
        
        // if k==1 then return second element if size > 1
        if(k==1) return size==1 ? -1 : nums[1];
        
        // if size==1 return first element for even k 
        if(size==1) return (k%2)==0 ? nums[0] : -1;
        
        // if k==size then get max element from first k-1 elements
        if(k==size) return *max_element(nums.begin(),nums.begin()+k-1);

        // if k<size then it depends on odd and even k
        // even k => get max element from first k-1 elements and k th element
        // odd k => get max element from first k elements and k th element
        else if(k<size)
        {
            int maxElement =  (k%2)==0 ? *max_element(nums.begin(),nums.begin()+k-1) : *max_element(nums.begin(),nums.begin()+k);
            return max(nums[k],maxElement); 
        }            
        // if k>size return overall max element
        else return *max_element(nums.begin(),nums.end());
    }
};