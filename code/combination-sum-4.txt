/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
void findSums(int* c, int n, int cidx, int target, int** returnColumnSizes, int **res, int *residx, int *buffer, int bidx) {
    if (!target) {
        int *temp = calloc(bidx, sizeof(int));
        memcpy(temp, buffer, bidx*sizeof(int));
        (*returnColumnSizes)[*residx] = bidx;
        res[*residx] = temp;
        (*residx) += 1;
        return;
    }
    if (target <= 0) return;
    for (int i = cidx; i < n; i++) {
        buffer[bidx] = c[i];
        findSums(c, n, i, target-c[i], returnColumnSizes, res, residx, buffer, bidx+1);
    }
}
int** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {
    int **res = calloc(200, sizeof(int*));
    int buffer[1000];
    *returnColumnSizes = (int*) calloc(1000, sizeof(int));
    *returnSize = 0;
    findSums(candidates, candidatesSize, 0, target, returnColumnSizes, res, returnSize, buffer, 0);
    *returnColumnSizes = realloc(*returnColumnSizes, *returnSize*sizeof(int));
    return res;
}