    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        auto dis1 = bfs(edges, node1), dis2 = bfs(edges, node2);
        int minDis = 1e9, res = -1;
        for(int i=0;i<edges.size();i++){
            int dis = max(dis1[i], dis2[i]);
            if(dis1[i] > -1 && dis2[i] > -1 && dis < minDis){
                minDis = dis;
                res = i;
            }
        }
        return res;
    }
    
    vector<int> bfs(vector<int>& edges, int start){
        vector<int> dis(edges.size(), -1);
        queue<pair<int,int>> q;
        q.emplace(start, 0);
        while(!q.empty()){
            auto [i, step] = q.front(); q.pop();
            dis[i] = step;
            if(int j = edges[i]; j>=0 && dis[j] == -1) 
                q.emplace(j, step+1);
        }
        return dis;
    }