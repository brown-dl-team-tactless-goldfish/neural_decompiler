class Solution {
public:
    long long minCost(vector<int>& b1, vector<int>& b2) {
        long long ans = 0;
        sort(b1.begin(), b1.end());
        sort(b2.begin(), b2.end());
        int mb = min(b1[0], b2[0]);
        unordered_map<int, int> f1, f2;
        for(auto& b : b1) ++f1[b];
        for(auto& b : b2) ++f2[b];
        int i = 0, n = b1.size(), j = n-1;
        
        while(i < n || 0 <= j){
            if(i < n && f1[b1[i]] <= f2[b1[i]]) ++i;
            else if(0 <= j && f1[b2[j]] >= f2[b2[j]]) --j;
            else if(i == n || j < 0 || (f1[b1[i]] - f2[b1[i]])%2 == 1 || (f1[b2[j]] - f2[b2[j]])%2 == 1) return -1;
            else{
                ans += min({b1[i], b2[j], 2*mb});
                --f1[b1[i]];
                ++f2[b1[i]];
                ++f1[b2[j]];
                --f2[b2[j]];
                ++i;
                --j;
            }
        }
        return ans;
    }
};