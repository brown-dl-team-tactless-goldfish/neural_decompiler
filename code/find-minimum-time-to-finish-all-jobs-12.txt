class Solution {
public:
    int minimumTimeRequired(vector<int>& jobs, int k) {
        int n = jobs.size(), m = 1 << n;
        int dp[k + 1][m + 1];
        for (int i = 0; i <= k; i++) {
            for (int j = 0; j < m; j++) dp[i][j] = INT_MAX;
        }
        dp[0][0] = 0;
        for (int i = 0; i < (1 << n); i++) {
            int mask = 1, c = 0;
            dp[1][i] = 0;
            while(mask < m) {
                if (mask & i) {
                    dp[1][i] += jobs[c];
                }
                c++;
                mask = mask << 1;
            }
        }
        for (int i = 2; i <= k; i++) {
            for (int j = 0; j < m; j++) {
                for (int mask = j; mask; mask = (mask - 1) & j) {
                    if ((mask & j) == mask) {
                        int x = j - mask;
                        int z = max(dp[i - 1][x], dp[1][mask]);
                        dp[i][j] = min(z, dp[i][j]);
                    }
                }
            }
        }
        return dp[k][m - 1];
    }
};