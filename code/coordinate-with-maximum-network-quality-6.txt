  public int[] BestCoordinate(int[][] towers, int radius)
        {
            if (towers.Length == 0) return new int[0];
            var res = new Dictionary<double, List<int[]>>();

            var max = 0;

            foreach (var tower in towers)
            {
                var quality = 0.0;
                foreach (var i in towers)
                { 
                    var d = GetDistance(tower, i);
                    if(radius >= d) quality += CountQ(i[2], d);
                }

                if(res.ContainsKey((int)quality)) res[(int)quality].Add(new []{ tower[0], tower[1] });
                else res.Add((int)quality, new List<int[]>(){ new[] { tower[0], tower[1] } });
                max = Math.Max(max, (int)quality);
            } 

            return res[max].OrderBy(_ => _[0]).ThenBy(_ => _[1]).First();
        }

        private double GetDistance(int[] p1, int[] p2) => Math.Sqrt(Math.Pow(p1[0] - p2[0], 2) + Math.Pow(p1[1] - p2[1], 2));

        private int CountQ(int q, double d) => (int)(q * 1.0/ (1 + d));