    int shortestBridge(vector<vector<int>>& grid) {
        // paint the outline of one of the islands to 2
        vector<vector<int>> islands = grid;
        for (int r = 0; r < islands.size(); r++) {
            bool foundIsland = false;
            for (int c = 0; c < islands[0].size(); c++) {
                if (islands[r][c] == 1) {
                    drawIslandOutline(islands, r, c);
                    foundIsland = true;
                    break;
                }
            }
            if (foundIsland) {
                break;
            }
        }
        // expand the island outline layer by layer until reach the other island
        int color = 2;
        int paintColor = 3;
        while (true) {
            for (int r = 0; r < islands.size(); r++) {
                for (int c = 0; c < islands[0].size(); c++) {
                    if (islands[r][c] == color) {
                        if (paintCell(islands, r - 1, c, paintColor) || paintCell(islands, r + 1, c, paintColor) || paintCell(islands, r, c - 1, paintColor) || paintCell(islands, r, c + 1, paintColor)) {
                            // the first layer of the island is 2, as the problem said the minimum distance is at least one, so it will take at least 2 layers of paint to reach the other island, and the result is the layer of color subtract 2
                            return paintColor - 2;
                        }
                    }
                }
            }
            color = paintColor;
            paintColor++;
        }
    }
    
    void drawIslandOutline(vector<vector<int>>& islands, int r, int c) {
        if (r < 0 || r >= islands.size()) {
            return;
        }
        if (c < 0 || c >= islands[0].size()) {
            return;
        }
        if (islands[r][c] != 1) {
            return;
        }
        islands[r][c] = -1;
        paintCell(islands, r - 1, c, 2);
        paintCell(islands, r + 1, c, 2);
        paintCell(islands, r, c - 1, 2);
        paintCell(islands, r, c + 1, 2);
        drawIslandOutline(islands, r - 1, c);
        drawIslandOutline(islands, r + 1, c);
        drawIslandOutline(islands, r, c - 1);
        drawIslandOutline(islands, r, c + 1);
    }
    
    bool paintCell(vector<vector<int>>& islands, int r, int c, int color) {
        if (r < 0 || r >= islands.size()) {
            return false;
        }
        if (c < 0 || c >= islands[0].size()) {
            return false;
        }
        if (islands[r][c] == 0) {
            islands[r][c] = color;
            return false;
        }
        if (islands[r][c] == 1) {
            return true;
        }
        return false;
    }