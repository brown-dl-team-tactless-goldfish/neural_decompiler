 vector<vector<pair<int,int>>> graph;

 vector<int> visited;

 int res;

int maximalPathQuality(vector<int>& values, vector<vector<int>>& edges, int maxTime) {
    
    int n = values.size();
    
    graph.resize(n);
    
    visited.resize(n,0);
    
     res = values[0];
   
    for(auto &x: edges)
    {
        graph[x[0]].push_back({x[1],x[2]});
        
        graph[x[1]].push_back({x[0],x[2]});
    }
    
   
    dfs( values,0, 0, 0, maxTime);
    return res;
}

void dfs(vector<int>& values,int node, int score, int time, int& maxTime)
{
    if(time > maxTime)
        return;
    
    if(visited[node] == 0)
        score += values[node];
    
    visited[node]++;
	
  
    if(node == 0)
        res = max(res, score);
    
    for(auto it : graph[node])
    {
        int neigh = it.first;
        int newTime = time + it.second;
        
        dfs(values, neigh, score, newTime, maxTime);
    }
    
    visited[node]--;
}