// Time: O(V+E)
// Space: O(V+E) under normal constraints and O(V^2) in case of a dense graph

class Solution {
private:
    class CompFunc
    {
    public:
        bool operator() (pair<int,double> a, pair<int,double> b)
        {
            return a.second < b.second;
        }
    };

public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end)
    {
        unordered_map<int, unordered_map<int,double>> adjacencyList;
        for (int i = 0; i < edges.size(); i++) {
            for (int j = 0; j < 2; j++) {
                int u = edges[i][0];
                int v = edges[i][1];
                adjacencyList[u].insert(make_pair(v,succProb[i]));
                adjacencyList[v].insert(make_pair(u,succProb[i]));
            }
        }
        
        unordered_map<int, double> vertexProb;
        for ( int i = 0; i < n; i++) {
            vertexProb[i] = 0.0;
        }
        vertexProb[start] = 1.0;
        
        unordered_set<int> visited;
        priority_queue<pair<int,double>, vector<pair<int,double>>, CompFunc> toVisit;
        toVisit.push({start, vertexProb[start]});
        
        while (!toVisit.empty()) {
            int cur = toVisit.top().first;
            toVisit.pop();
            visited.insert(cur);
            
            for ( auto vp : adjacencyList[cur]) {
                int v = vp.first;
                double prob = vp.second;
                if ( visited.find(v) != visited.end()) {
                    continue;
                }
                
                double newProb = vertexProb[cur] * prob * 1.000;
                if ( newProb > vertexProb[v] ) {
                    vertexProb[v] = newProb;
                    toVisit.push({v,newProb});
                }
            }
        }
        
        return vertexProb[end];
    }
};