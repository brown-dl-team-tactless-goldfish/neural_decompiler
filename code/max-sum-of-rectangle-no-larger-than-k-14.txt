class Solution {
public:
   int fun(vector<int> arr, int K)
   {
        int N=arr.size();
        set<int> cum_set;
        cum_set.insert(0);

        int max_sum = INT_MIN, cSum = 0;

        for (int i = 0; i < N; i++) {
            cSum += arr[i];
            set<int>::iterator sit= cum_set.lower_bound(cSum - K);
            if (sit != cum_set.end())
                max_sum = max(max_sum, cSum - *sit);
            cum_set.insert(cSum);
        }
        return max_sum;
    }
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        int r=matrix.size();
        int c=matrix[0].size();
        
        vector<vector<int>> pre(r+1,vector<int>(c+1,0));
        
       for(int j=1;j<c+1;j++){
           for(int i=1;i<r+1;i++){
               pre[i][j]+=pre[i-1][j]+matrix[i-1][j-1];
           }
       }
        int ans=INT_MIN;
        for(int i=1;i<r+1;i++){
            for(int j=1;j<=r+1-i;j++){
                int cr=1;
                vector<int> v;
                while(cr<c+1){
                    v.push_back(pre[j+i-1][cr]-pre[j-1][cr]);
                   
                    cr++;
                }
                ans=max(ans,fun(v,k));
            }
        }
        return ans;
    }
};