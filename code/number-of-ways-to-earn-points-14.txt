    int waysToReachTarget(int T, vector<vector<int>>& types) {
        int n = types.size();
        vector<vector<int>> dp(n + 1, vector<int>(T + 1));
        
        for (int i = 0; i <= n; i++) dp[i][0] = 1;
        
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int target = 1; target <= T; target++) {
                int take = 0; 
        
                for (int i = 1; i <= types[ind][0]; i++) {
                    int sum = target - (i * types[ind][1]);
                    if (sum >= 0) 
                        take += dp[ind + 1][sum];

                    take %= mod;
                }

                int notTake = dp[ind + 1][target];

                dp[ind][target] = (take + notTake) % mod;
            }
        }
        
        
        return dp[0][T];
    }