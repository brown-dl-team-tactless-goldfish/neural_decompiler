public class Solution {
    public int[][] MatrixBlockSum(int[][] mat, int K) {
        
        int rows = mat.Length, cols = mat[0].Length;
        
        int[][] sum = new int[rows][];        
        for(int r = 0; r < rows; r++)
        {
            sum[r] = new int[cols];            
            for(int c = 0; c < cols; c++)
            {                
                int leftSum = c > 0 ? sum[r][c-1] : 0;
                int topSum = r > 0 ? sum[r-1][c] : 0;
                int excludeSum = (r > 0 && c > 0) ? sum[r-1][c-1] : 0;
                sum[r][c] = leftSum + topSum - excludeSum + mat[r][c];
            }            
        } 
        
        int[][] res = new int[rows][];
        for(int r = 0; r < rows; r++)
        {
            res[r] = new int[cols];
            for(int c = 0; c < cols; c++)
            {
                int x1 = c-K-1, x2 = Math.Min(cols-1, c+K);
                int y1 = r-K-1, y2 = Math.Min(rows-1, r+K);
                
                int leftMinus = x1 >= 0 ? sum[y2][x1] : 0;
                int topMinus = y1 >= 0 ? sum[y1][x2] : 0;
                int diagPlus = leftMinus > 0 && topMinus > 0 ? sum[y1][x1] : 0;
                
                res[r][c] = sum[y2][x2] - leftMinus - topMinus + diagPlus;
            }
        }
        
        return res;
    }
}