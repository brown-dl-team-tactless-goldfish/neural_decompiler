
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}


void permute_help(int **result, int *i_result, int *nums, int numsSize, int l, int r) {
    if(l == r) {
        // for(int i=0;i<numsSize;i++) {
        //     printf("%d, ", nums[i]);
        // }
        // printf("\n");
        memcpy(result[(*i_result)++], nums, numsSize*sizeof(int));
    }
    else {
        for(int i=l;i<=r;i++) {
            swap(&nums[l], &nums[i]);
            permute_help(result, i_result, nums, numsSize, l+1, r);
            swap(&nums[l], &nums[i]);
        }
    }    
}


int **permute(int *nums, int numsSize, int *returnSize, int **returnColumnSizes) {
    int permute_size = 1;
    for(int i=numsSize;i>=1;i--) {
        permute_size *= i;
    }
    int **result = malloc(sizeof(int *)*permute_size);
    for(int i=0;i<(permute_size);i++) {
        result[i] = malloc(sizeof(int)*numsSize);
    }

    int *return_col = malloc(sizeof(int)*permute_size);
    for(int i=0;i<permute_size;i++) return_col[i] = numsSize;
    *returnColumnSizes = return_col;

    int i_result = 0;
    permute_help(result, &i_result, nums, numsSize, 0, numsSize-1);
    *returnSize = i_result;

    return result;
}
