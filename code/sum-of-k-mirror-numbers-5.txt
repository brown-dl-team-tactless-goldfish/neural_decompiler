class Solution {
public:
    string next(string str, int k){
        int n = str.size();
        int m = n/2;
        for(int i=m; i<n; ++i){
            if(str[i]-'0'+1 < k){
                if(n%2==1 && i==m)  str[i]++;
                else                str[i]++, str[n-i-1]++;
                break;
            }
            else{
                if(n%2==1 && i==m)  str[i] = '0';
                else                str[i]=str[n-i-1]='0';
            }
        }
        int zero = 0;
        for(int i : str){
            if(i=='0')  zero++;
        }
        if(zero == n){
            str.pop_back();
            str.insert(str.begin(), '1');
            str.push_back('1');
        }
        return str;
    }
    bool mirror(long long val){
        string str = to_string(val);
        string str2 = str;
        reverse(str.begin(), str.end());
        return str == str2;
    }
    long long convert(string str, int k){
        long long ret = 0;
        for(auto c : str){
            ret = ret*k + c-'0';
        }
        return ret;
    }
    long long kMirror(int k, int n) {
        string str = "1";
        long long sum = 1;
        for(int i=1; i<n; ++i){
            str = next(str, k);
            long long val = convert(str, k);
            while(!mirror(val)){
                str = next(str, k);
                val = convert(str, k);
            }
            sum += val;
        }
        return sum;
    }
};
