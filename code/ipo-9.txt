using PII = pair<int, int> ;  //capital, profit
class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        vector<PII>shares ;
        int n = profits.size() ;
        for(int i = 0; i < n; i++){
            shares.push_back({capital[i], profits[i]} ) ;
        }
        sort(shares.begin(), shares.end()) ;
        priority_queue<int> pq ; // profits's maxHead
        int count = 0 ;
        int idx = 0 ;
        int W = w ;
        while(count < k){
            while(idx < n && shares[idx].first <= W){
                pq.push(shares[idx].second) ;
                idx++ ;
            }
            if(pq.empty())
                break ;
            W += pq.top() ;
            pq.pop() ;
            count++ ;
        }
        return W ;
    }
};