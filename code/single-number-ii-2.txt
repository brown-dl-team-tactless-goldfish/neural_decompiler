//Zhaoqin Li
typedef struct timesTable{
    int number;
    int times;
}table_t;

table_t** table_init(int tableSize){
    int i;
    table_t** table = (table_t**)malloc(sizeof(table_t*)*tableSize);
    for(i=0; i<tableSize; i++){
        table[i] = NULL;
    }
    return table;
}

bool table_insert(table_t** table, int tableSize, int number){
    int i,key;
    unsigned un_num;
    un_num = (unsigned)number;
    for(i=0; i<tableSize; i++){
        key = (un_num+i) % tableSize;
        if(table[key] == NULL){
            table[key] = (table_t*)malloc(sizeof(table_t));
            table[key]->number = number;
            table[key]->times = 1;
            return true;
        }else if (table[key] != NULL && table[key]->number == number){
            table[key]->times++;
            return true;
        }//else if (table[key] != NULL && table[key]->number != number){
            //continue;
        //}
    }
    return false; 
}

void hashTable_print(table_t** table, int table_size){
    int i;
    for (i=0; i < table_size; i++){
        if (table[i] == NULL){
            printf("\t%d\t---\n",i);
        }else{
            printf("\t%d\tnumber: %d\ttimes: %d\n",i,table[i]->number, table[i]->times);
        }
    }
}

void tableFree(table_t** table, int tableSize){
    int i;
    for(i=0; i<tableSize; i++){
        free(table[i]);
    }
    free(table);
}

int singleNumber(int* nums, int numsSize){
    int i,j,val;
    int tableSize = numsSize / 3 + 1;
    table_t** nums_table = table_init(tableSize);
    for(i=0; i<numsSize; i++){
        table_insert(nums_table, tableSize, nums[i]);
    }
    for(j=0; j<tableSize; j++){
        if(nums_table[j] != NULL && nums_table[j]->times == 1){
            val = nums_table[j]->number;
            break;
        }
    }
    
    //hashTable_print(nums_table, tableSize);
    tableFree(nums_table, tableSize);
    return val;
}