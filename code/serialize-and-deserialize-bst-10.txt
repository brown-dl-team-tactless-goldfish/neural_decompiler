string serialize(TreeNode* root) {
    string res;
    vector<TreeNode*> q{root};
    while (!q.empty()) {
        vector<TreeNode*> q1;
        for (auto n : q) {
            res += (n == nullptr ? "" : to_string(n->val)) + ",";
            if (n != nullptr) {
                q1.push_back(n->left);
                q1.push_back(n->right);                    
            }
        }
        swap(q, q1);
    }
    while (!res.empty() && res.back() == ',')
        res.pop_back();
    return res;
}
TreeNode* readNode(string& data, int &i) {
   string val;
   while (i < data.size() && data[i] != ',')
        val += data[i++];
    ++i;
    return val.empty() ? nullptr : new TreeNode(stoi(val));
}
TreeNode* deserialize(string data) {
    TreeNode tmp;
    data = "," + data;
    vector<TreeNode*> q{&tmp};
    int i = 0;
    while (!q.empty()) {
        vector<TreeNode*> q1;
        for (auto n : q) {
            if (n != nullptr) {
                q1.push_back(n->left = readNode(data, i));
                q1.push_back(n->right = readNode(data, i));                
            }
        }
        swap(q, q1);
    }
    return tmp.right;
}