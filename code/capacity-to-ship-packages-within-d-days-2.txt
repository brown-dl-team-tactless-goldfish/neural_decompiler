struct BinarySearchVars {
	int lower_bound;
	int upper_bound;
};

struct BinarySearchVars find_bounds(int* weights, int weightsSize)
{
	struct BinarySearchVars bin_search = {weights[0], weights[0]};

	for (int i = 1; i < weightsSize; ++i) {
		if (bin_search.lower_bound < weights[i]) {
			bin_search.lower_bound = weights[i];
		}

		bin_search.upper_bound += weights[i];
	}

	return bin_search;
}

int shipWithinDays(int* weights, int weightsSize, int days)
{
	struct BinarySearchVars bin_search = find_bounds(weights, weightsSize);

	while (bin_search.lower_bound < bin_search.upper_bound) {
		int middle = (bin_search.lower_bound + bin_search.upper_bound) / 2;

		// Check if it is possible to ship all the packages within days days using the middle value as the weight capacity of the ship
		bool can_ship = true;
		int load = 0;
		int day = 0;
		for (int i = 0; i < weightsSize; ++i) {
			if (weights[i] > middle) {
				can_ship = false;
				break;
			}

			if (load + weights[i] > middle) {
				load = 0;
				++day;
			}

			load += weights[i];
		}

		++day; // Last day

		if (day > days) can_ship = false;

		// Update the lower or upper bound of the search interval based on the value of can_ship
		if (can_ship) {
			bin_search.upper_bound = middle;
		} else {
			bin_search.lower_bound = middle + 1;
		}
	}

	// Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within lower_bound days
	return bin_search.lower_bound;
}