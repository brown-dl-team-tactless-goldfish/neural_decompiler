public class Solution
{
    public int MaxHeight(int[][] cuboids)
    {
        for (int i = 0; i < cuboids.Length; i++)
        {
            Array.Sort(cuboids[i]);
        }
		//Sorted by Height, Width, Length
        Array.Sort(cuboids, (x, y) => (x[2] == y[2] && x[1] == y[1]) ? x[0].CompareTo(y[0]) : (x[2] == y[2] ? x[1].CompareTo(y[1]) : x[2].CompareTo(y[2])));

        var dp = new int[cuboids.Length];
        for (int i = 0; i < cuboids.Length; i++)
        {
            dp[i] = cuboids[i][2];
            for (int j = 0; j < i; j++)
            {
				//For each j < i, check if we can place box i below box j.
                if (cuboids[i][1] >= cuboids[j][1] && cuboids[i][0] >= cuboids[j][0])
                    dp[i] = Math.Max(dp[i], dp[j] + cuboids[i][2]);
            }
        }
        return dp.Max();
    }
}