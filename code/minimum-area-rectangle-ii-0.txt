class Solution
{
    public double MinAreaFreeRect(int[][] points)
    {
        if (points.Length < 4) return 0.0;
        double result = double.MaxValue;
        var dict = new Dictionary<string, List<int[]>>();
        for (int i = 0; i < points.Length - 1; i++)
        {
            for (int j = i + 1; j < points.Length; j++)
            {
                int[] p1 = points[j], p2 = points[i];
                double dis = Distance(p1, p2), centerX = (double)(p1[0] + p2[0]) / 2, centerY = (double)(p1[1] + p2[1]) / 2;
                var key = dis + ":" + centerX + ":" + centerY;
                if (!dict.ContainsKey(key)) dict[key] = new List<int[]>();
                dict[key].Add(new int[] { i, j });
            }
        }

        foreach (List<int[]> list in dict.Values)
        {
            for (int i = 0; i < list.Count - 1; i++)                                                                                              
            {
                for (int j = i + 1; j < list.Count; j++)
                {
                    int p1 = list[i][0], p2 = list[j][0], p3 = list[j][1];
                    result = Math.Min(result, Distance(points[p1], points[p2]) * Distance(points[p1], points[p3]));
                }
            }
        }

        return result == double.MaxValue ? 0.0 : result;
    }

    private double Distance(int[] p1, int[] p2)
    {
        return Math.Sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));
    }
}