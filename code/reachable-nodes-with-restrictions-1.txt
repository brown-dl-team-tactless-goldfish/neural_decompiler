int reachableNodes(int n, int** edges, int edgesSize, int* edgesColSize, int* restricted, int restrictedSize)
{
    int count = 1;
    int **nodes = calloc(n, sizeof(int *));
    int *size = calloc(n, sizeof(int));
    int top = -1;
    int *stack = calloc(n, sizeof(int));
    bool *rstrict = calloc(n, sizeof(bool));
    
    for(int i=0; i<restrictedSize; i++)
        rstrict[restricted[i]] = true;

    for(int i=0; i<edgesSize; i++) {
        int n1 = edges[i][0];
        int n2 = edges[i][1]; 
        
        if(rstrict[n1] || rstrict[n2])
            continue;
        
        size[n1]++;
        nodes[n1] = realloc(nodes[n1], size[n1] * sizeof(int));
        nodes[n1][size[n1] - 1] = n2;
        
        size[n2]++;
        nodes[n2] = realloc(nodes[n2], size[n2] * sizeof(int));
        nodes[n2][size[n2] - 1] = n1;
    }
    
    free(rstrict);
    
    stack[++top] = 0;
    while(top > -1) {
        int n = stack[top];
        if(size[n] == 0) {
            top--;
            continue;
        }

        int nn = nodes[n][size[n]-- - 1];
        if(top > 0 && nn == stack[top - 1])
            continue;
        
        count++;
        stack[++top] = nn;
    }
    
    free(stack);
    free(size);
    
    for(int i=0; i<n; i++)
        free(nodes[i]);
    
    free(nodes);
    return count;
}