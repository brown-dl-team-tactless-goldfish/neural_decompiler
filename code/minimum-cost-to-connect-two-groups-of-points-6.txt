class Solution {
public:
    vector<vector<int>> dp;
    int go(vector<vector<int>> &cost, int mask_a, int mask_b)
    {
        if (mask_a == 0 and mask_b == 0)
        {
            return 0;
        }

        if (dp[mask_a][mask_b] != -1)
            return dp[mask_a][mask_b];

        int ans = 1e9;
        if (mask_a != 0) {
			// last set bit in a
            int last_a = mask_a & - mask_a;
            int i = log2(last_a);
            for (int j = 0; j < cost[0].size(); j++) {
                if ((mask_a & last_a) != 0 or (mask_b & (1 << j)) != 0) {
                    int new_mask_a = mask_a & (((1 << 30) - 1) ^ last_a);
                    int new_mask_b = mask_b & (((1 << 30) - 1) ^ (1 << j));
                    ans = min(ans, cost[i][j] + go(cost, new_mask_a, new_mask_b));
                }
            }
        }
        if (mask_b != 0) {
			// last set bit in mask_b
            int last_b = mask_b & - mask_b;
            int j = log2(last_b);
            for (int i = 0; i < cost.size(); i++) {
                if ((mask_b & last_b) != 0 or (mask_a & (1 << i)) != 0) {
                    int new_mask_a = mask_a & (((1 << 30) - 1) ^ (1<<i));
                    int new_mask_b = mask_b & (((1 << 30) - 1) ^ (1 << j));
                    ans = min(ans, cost[i][j] + go(cost, new_mask_a, new_mask_b));
                }
            }
        }
        return dp[mask_a][mask_b] = ans;
    }
    int connectTwoGroups(vector<vector<int>>& cost) {
        int n = cost.size();
        int m = cost[0].size();
        dp = vector<vector<int>> (1<<n, vector<int> (1<<m, -1));
        
        return go(cost, (1<<n) - 1, (1<<m) - 1);
    }
};