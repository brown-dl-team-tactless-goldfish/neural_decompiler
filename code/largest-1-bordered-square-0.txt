class Solution {
public:
    int largest1BorderedSquare(vector<vector<int>>& grid) {
        
        int r = grid.size();
        int c = grid[0].size();
        
        // Horizontal and Vertical Array to track sum of contigious Column and Row elements respectively
        int hdp[r][c];
        int vdp[r][c];
        
        int maxSquareL = 0;
        int squareL = 0;
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                // grid[i][j] == 1 then add previous column in hdp and previous row in vdp else set 0
                if(grid[i][j]==1)
                {
                    hdp[i][j] = j>0?(1+hdp[i][j-1]):1;
                    vdp[i][j] = i>0?(1+vdp[i-1][j]):1;                    
                }
                else
                {
                    hdp[i][j] = 0;
                    vdp[i][j] = 0;                    
                }
                
                // Find minL between hdp and vdp
                int minL = min(hdp[i][j],vdp[i][j]);
                
                // If minL > maxSquareLength then loop until find a valid square length and if find one then break
                if(minL>maxSquareL)
                {
                    while(minL>maxSquareL)
                    {
                        if(hdp[i+1-minL][j]>=minL && vdp[i][j+1-minL]>=minL)
                        {
                            squareL = minL;
                            break;
                        }
                        minL--;
                    }                    
                }
                else
                    squareL = grid[i][j];
                
                if(maxSquareL<squareL)maxSquareL=squareL;
            }            
        }
        
        return maxSquareL * maxSquareL;
    }
};