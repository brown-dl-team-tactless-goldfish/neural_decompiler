class Solution {
private:
    unordered_set<string> have;
    unordered_map<string, bool> canMake;
    unordered_map<string, int> rcp2idx;
    vector<string> ans;
    
    bool exist(const string& igrd, const vector<vector<string>>& ingredients) {
        if (have.count(igrd) > 0) return true;
        if (rcp2idx.count(igrd) == 0) return false;
        if (canMake.count(igrd) > 0) return canMake[igrd];
        
        canMake[igrd] = false;
        int i = rcp2idx[igrd];
        for (const string& igrdNext : ingredients[i]) {
            if (!exist(igrdNext, ingredients)) {
                return false;
            }
        }
        canMake[igrd] = true;
        ans.push_back(igrd);
        return true;
    }
    
public:
    vector<string> findAllRecipes(vector<string>& recipes, vector<vector<string>>& ingredients, vector<string>& supplies) {
        for (string& s : supplies) have.insert(s);
        for (int i = 0; i < recipes.size(); i++) rcp2idx[recipes[i]] = i;
        for (string& rcp : recipes) exist(rcp, ingredients);
        return ans;
    }
};