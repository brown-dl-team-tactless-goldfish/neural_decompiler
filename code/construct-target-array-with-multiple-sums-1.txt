int comp(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

bool isPossible(int* target, int targetSize){
    qsort(target, targetSize, sizeof(int), comp);
    
    int end = targetSize-1;
    long long oldsum = 0;
    
    if (target[end] == 1){
        return true;
    }
    if (targetSize == 1){
        return target[0] == 1 ? true : false;
    }
    if (targetSize == 2){
        int new;
        while (target[1] != 1){
            if (target[0] == 1){
                return true;
            }
            if (target[1] == target[0]){
                return false;
            }
            new = target[1] % target[0];

            if (new == 0){
                return false;
            } else if (new < target[0]){
                target[1] = target[0];
                target[0] = new;
            }
        }
        return true;
    }
    
    
    for (int i = 0 ; i <= end ; i++){
        oldsum += target[i];
    }
    
    int new;
    while (target[end] != 1){
        oldsum -= target[end];
        
        if (target[end] <= oldsum){
            return false;
        }
        new = target[end] % oldsum;
        oldsum += new; 
        if (new == 0){
            return false;
        } else if (new == 1){
            end--;
            if (end < 0){
                return true;
            }
        } else {
            int i;
            for (i = end ; i > 0 ; i--){
                if (new < target[i-1]){
                    target[i] = target[i-1];
                } else {
                    target[i] = new;
                    break;
                }
            }
            if (i == 0){
                target[i] = new;
            }
        }
    }
    return true;
}