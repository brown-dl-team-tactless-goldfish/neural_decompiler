// return the row of given label in a tree
int find_row(int label) {
  int row = 1;

  while ((1 << row) <= label)
    row++;

  return row;
}

// return the index of label in a
// array representation of the tree
int find_label_index(int label) {
  int row = find_row(label);

  if (row % 2 == 0)
    return 3 * (1 << (row - 1)) - label - 1;

  return label;
}

// return the label in index position
int find_label(int index) {
  // same as find_label_index, but we
  // send index as argument instead label
  return find_label_index(index);
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int *pathInZigZagTree(int label, int *returnSize) {
  // return array size is same as label row number
  int row = find_row(label);
  *returnSize = row;
  int *result = malloc(row * sizeof (int));

  result[--row] = label;
  int parent = find_label_index(label);

  while (parent != 1) {
    parent /= 2;
    result[--row] = find_label(parent);
  }

  return result;
}