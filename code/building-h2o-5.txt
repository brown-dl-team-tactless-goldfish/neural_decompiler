typedef struct {
    // User defined data may be declared here.
    pthread_mutex_t lock;
    pthread_cond_t oc,hc;
    int h,o;
} H2O;

H2O* h2oCreate() {
    H2O* obj = (H2O*) malloc(sizeof(H2O));
    
    obj->h=0;
    obj->o=0;
    pthread_mutex_init(&obj->lock,NULL);
    pthread_cond_init(&obj->oc,NULL);
    pthread_cond_init(&obj->hc,NULL);
    
    return obj;
}

void hydrogen(H2O* obj) {
    
    // releaseHydrogen() outputs "H". Do not change or remove this line.
    pthread_mutex_lock(&obj->lock);
    if(obj->o>=1 && obj->h>=1)
    {
        (obj->h)--;
        (obj->o)--;
        pthread_cond_signal(&obj->oc);
        pthread_cond_signal(&obj->hc);
    }
    else
    {
        (obj->h)++;
        pthread_cond_wait(&obj->hc,&obj->lock);
    }
    releaseHydrogen();
    pthread_mutex_unlock(&obj->lock);
}

void oxygen(H2O* obj) {
    
    // releaseOxygen() outputs "O". Do not change or remove this line.
    pthread_mutex_lock(&obj->lock);
    if(obj->o>=0 && obj->h>=2)
    {
        (obj->h)-=2;
        pthread_cond_signal(&obj->hc);
        pthread_cond_signal(&obj->hc);
    }
    else
    {
        (obj->o)++;
        pthread_cond_wait(&obj->oc,&obj->lock);
    }
    releaseOxygen();
    pthread_mutex_unlock(&obj->lock);
}

void h2oFree(H2O* obj) {
    // User defined data may be cleaned up here.
    free(obj);
}