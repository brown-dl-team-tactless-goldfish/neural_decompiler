typedef struct {
    int n;
    pthread_mutex_t zeroLock;
    pthread_mutex_t evenLock;
    pthread_mutex_t oddLock;
    
} ZeroEvenOdd;

ZeroEvenOdd* zeroEvenOddCreate(int n) {
    ZeroEvenOdd* obj = (ZeroEvenOdd*) malloc(sizeof(ZeroEvenOdd));
    obj->n = n;
    pthread_mutex_init(&obj->zeroLock, NULL);
    pthread_mutex_init(&obj->evenLock, NULL);
    pthread_mutex_init(&obj->oddLock, NULL);
    pthread_mutex_lock(&obj->evenLock);
    pthread_mutex_lock(&obj->oddLock);
    return obj;
}

// You may call global function `void printNumber(int x)`
// to output "x", where x is an integer.

void zero(ZeroEvenOdd* obj) {
    for (int i = 1; i <= obj->n; i++){
        pthread_mutex_lock(&obj->zeroLock);
        printNumber(0);    
        if( i % 2 == 0){
            pthread_mutex_unlock(&obj->evenLock);
        }else{
            pthread_mutex_unlock(&obj->oddLock);
        }
    }
}

void even(ZeroEvenOdd* obj) {
    for (int i = 2; i <= obj->n; i+=2){
        pthread_mutex_lock(&obj->evenLock);
        printNumber(i);
        pthread_mutex_unlock(&obj->zeroLock);
    }
}

void odd(ZeroEvenOdd* obj) {
    for (int i = 1; i <= obj->n; i+=2){
        pthread_mutex_lock(&obj->oddLock);
        printNumber(i);
        pthread_mutex_unlock(&obj->zeroLock); 
    }
}

void zeroEvenOddFree(ZeroEvenOdd* obj) {
    pthread_mutex_destroy(&obj->zeroLock);
    pthread_mutex_destroy(&obj->evenLock);
    pthread_mutex_destroy(&obj->oddLock);
}