#define MAX_RETURN 4001
#define CHAR_TO_INT(x) ((x<= 0)? 0: ((x) - '0'))
#define INT_TO_CHAR(x) ((x) + '0')

int add_numbers(char* first, char* second) {
   int int_num1, int_num2;
    
    int_num1 = CHAR_TO_INT(*first);
    int_num2 = CHAR_TO_INT(*second);
    
    return int_num1 + int_num2;
}
    
int multiply_chars(char* first, char* second) {
    int int_num1, int_num2;
    
    int_num1 = CHAR_TO_INT(*first);
    int_num2 = CHAR_TO_INT(*second);
    
    return int_num1 * int_num2;
}

int increase(char* result, int result_index, int increment) {
    int tmp = 0;
    char tmp1 = 0;
    char tmp2 = 0;
    int curr_inc = increment;
    int i = 0;
    
    for (i = result_index ; i >= 0; i--) {
        tmp = CHAR_TO_INT(result[i]) + curr_inc;
        
        //printf("%d\n", tmp);
        result[i] = INT_TO_CHAR(tmp%10);
        
        if (tmp >= 10) {
            curr_inc = tmp / 10;
        } else {
            curr_inc = 0;
            break;
        }
    }
    
    if (curr_inc > 0 && i < 0) {
        tmp1 = result[0];
        for (int j = 0; result[j] != 0; j++) {
            tmp2 = result[j + 1];
            result[j + 1] = tmp1;
            tmp1 = tmp2;
            //result[j] = tmp;
            
        }
        result[0] = INT_TO_CHAR(curr_inc);
        return 1;
    }
    return 0;
}

char * multiply(char * num1, char * num2){
    
    char* result;
    char *curr_num1;
    char *curr_num2;
   
    int result_ind;
    int num1_ind;
    int int_num1;
    int int_num2;
    int multiply;
    int result_tmp;

    
    result_ind = 0;
    num1_ind = 0;
    
    result = calloc(MAX_RETURN, sizeof(char));
    
    if (num1[0] == '0' || num2[0] == '0') {
        result[0] = '0';
        return result;
    }
    

    
    for (curr_num1 = num1; *curr_num1 != 0; curr_num1++) {
        result_ind = num1_ind;
        for (curr_num2 = num2; *curr_num2 != 0; curr_num2++) {
            
            multiply = multiply_chars(curr_num1, curr_num2);
            
            if (result_ind == 0) {
                if (multiply >= 10) {
                    result[result_ind] = INT_TO_CHAR(multiply/10);
                    result_ind++;
                    num1_ind++;
                }
                result[result_ind] = INT_TO_CHAR(multiply%10);
                
            } else {
                //result_tmp = CHAR_TO_INT(result[result_ind]) + (multiply % 10);
                
                //if (multiply >= 10) {
                if (increase(result, result_ind, multiply) == 1) {
                    result_ind++;
                    num1_ind++;
                }
                //}
                
            
                //result[result_ind] = INT_TO_CHAR(result_tmp % 10);
            }
            //printf("%d\n", CHAR_TO_INT(result[result_ind]));
            //printf("%d\n", result_ind);
            result_ind++;
        }
        num1_ind++;
    }

    result[result_ind] = 0;
    
    return result;
}