class Solution {
public:
    int n,m;
    int dx[4] = {1,0,-1,0};
    int dy[4] = {0,1,0,-1};
    int dp[1001][1001];
    long long mod = 1000000007;
    long long dfs(vector<vector<int>>&grid,int i,int j,int val){
        if(i>=n || i<0 || j>=m || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        //vis[i][j] = 1;
        long long c = 0;
        for(int z=0;z<4;z++){
            int x = i+dx[z];
            int y = j+dy[z];
            if(x>=n || x<0 || y>=m || y<0 || grid[x][y]<=val) continue;
            c = (c%mod+(long long)1+dfs(grid,x,y,grid[x][y])%mod)%mod;
        }
        //vis[i][j] = 0;
        return dp[i][j] = c%mod;
    }
    int countPaths(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        memset(dp,-1,sizeof(dp));
        long long c = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                //vector<vector<int>>vis(n,vector<int>(m,0));
                c = (c%mod+(long long)1+dfs(grid,i,j,grid[i][j])%mod)%mod;
            }
        }
        return c%mod;
    }
};