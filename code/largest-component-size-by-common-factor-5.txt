vector<int> factors = {
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
    103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,
    199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313
};
void uf_union(vector<int>& uf, int p1, int p2) {
  auto pp1 = uf_find(uf, p1), pp2 = uf_find(uf, p2);
  if (pp1 != pp2) uf[pp1] += uf[pp2], uf[pp2] = pp1;
}
int uf_find(vector<int>& uf, int p) {
  if (uf[p] <= 0) return p;
  return uf[p] = uf_find(uf, uf[p]);
}
int largestComponentSize(vector<int>& A) {
  unordered_map<int, int> primes;
  vector<int> uf(factors.size(), 0);
  for (auto a : A) {
    auto last_f = -1;
    for (auto i = 0; i < factors.size() && factors[i] <= a; ++i) {
      if (a % factors[i] == 0) {
        while (a % factors[i] == 0) a /= factors[i];
        if (last_f >= 0) uf_union(uf, i, last_f);
        last_f = i;
      }
    }
    if (a > 1) {
      auto it = primes.find(a);
      if (it != primes.end()) {
        if (last_f != -1 && it->second != -1) uf_union(uf, last_f, it->second);
        else if (last_f != -1 || it->second != -1) uf[uf_find(uf, max(last_f, it->second))] -= 1;
      }
      if (it == primes.end() || last_f >= 0) primes[a] = last_f;
    }
    if (last_f >= 0) uf[uf_find(uf, last_f)] -= 1;
  }
  return -*min_element(begin(uf), end(uf));
}