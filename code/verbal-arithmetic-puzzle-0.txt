public class Solution 
{
    string[] words;
    string result;
    public bool IsSolvable(string[] words, string result) 
    {
        HashSet<char> all = new HashSet<char>();
        var starts = new bool[128];
        this.words = words;
        this.result = result;
        foreach(var word in words) 
        {
            starts[word[0]]= true;
            foreach(char c in word) 
                all.Add(c);
        }
        
        starts[result[0]]= true;
        foreach(char c in result) 
            all.Add(c);
        
        var arr = all.ToArray();
        Array.Sort(arr);
        return dfs(arr, starts, new int[128], new bool[10], 0);
    }
    
    private bool dfs(char[] arr, bool[] starts, int[] map, bool[] used, int startI) 
    {
        if(startI == arr.Length) 
            return calculate(map);
        for(int i = 0; i < 10; i++) 
        {
            if(used[i]) continue;
            if(i == 0 && starts[arr[startI]]) continue;
            map[arr[startI]] = i;
            used[i] = true;
            if(dfs(arr, starts, map, used, startI+1)) return true;
            used[i] = false;
            map[arr[startI]] = 0;
        }

        return false;
    }
    
    private bool calculate(int[] map) 
    {
        var res = CalculateValue(map, result);
        int sum = 0;
        foreach(var word in words)
        {
            sum += CalculateValue(map, word);
            if(sum > res) return false;
        }
        
        return res == sum;
    }
    
    private int CalculateValue(int[] map, string word)
    {
        int num = 0;
        foreach(char c in word) 
            num = num*10 + map[c];
        return num;
    }
}