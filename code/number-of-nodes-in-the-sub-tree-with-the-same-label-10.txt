class Solution {
private:
    vector<int> ans;
    vector<bool> visited;
    vector<vector<int>> G;
    
    void dfs(vector<int>& count, const string& labels, int cur) {
        visited[cur] = true;
        char c = labels[cur];
        for (int &child : G[cur]) {
            if (!visited[child]) {
                vector<int> temp(26, 0);
                dfs(temp, labels, child);
                for (int i=0; i<26; i++)
                    count[i] += temp[i];
            }
        }
        count[c-'a']++;
        ans[cur] = count[c-'a'];
    }
public:
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        ans.resize(n);
        visited.resize(n, false);
        G.resize(n);
        for (auto &e : edges) {
            G[e[0]].push_back(e[1]);
            G[e[1]].push_back(e[0]);
        }
        vector<int> count(26, 0);
        dfs(count, labels, 0);
        return ans;
    }
};