class Solution {
public:
    int maxTrailingZeros(vector<vector<int>>& grid) {
        const int m = grid.size(), n = grid[0].size();
        
        // horizontal_prefix_fives[i][j]: number of the factor 5 for grid[i][0...j].
        // horizontal_suffix_fives[i][j]: number of the factor 5 for grid[i][j...n-1].
        vector<vector<int>> horizontal_prefix_fives(m, vector<int>(n, 0)), horizontal_suffix_fives(m, vector<int>(n, 0));
        // horizontal_prefix_twos[i][j]: number of the factor 2 for grid[i][0...j].
        // horizontal_suffix_twos[i][j]: number of the factor 2 for grid[i][j...n-1].
        vector<vector<int>> horizontal_prefix_twos(m, vector<int>(n, 0)), horizontal_suffix_twos(m, vector<int>(n, 0));    
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                horizontal_prefix_fives[i][j] = (j > 0 ? horizontal_prefix_fives[i][j - 1] : 0) + GetFactorNum(grid[i][j], 5);
                horizontal_prefix_twos[i][j] = (j > 0 ? horizontal_prefix_twos[i][j - 1] : 0) + GetFactorNum(grid[i][j], 2);
            }
            for (int j = n - 1; j >= 0; --j) {
                horizontal_suffix_fives[i][j] = (j < n - 1 ? horizontal_suffix_fives[i][j + 1] : 0) + GetFactorNum(grid[i][j], 5);
                horizontal_suffix_twos[i][j] = (j < n - 1 ? horizontal_suffix_twos[i][j + 1] : 0) + GetFactorNum(grid[i][j], 2);
            }
        }
        int max_val = 0;
        // vertical_prefix_fives[j]: number of the factor 5 for grid[0...i][j].
        // vertical_prefix_twos: number of the factor 2 for grid[0...i][j].
        vector<int> vertical_prefix_fives(n), vertical_prefix_twos(n);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                max_val = std::max(max_val, 
                                   std::max(std::min(horizontal_prefix_fives[i][j] + vertical_prefix_fives[j], horizontal_prefix_twos[i][j] + vertical_prefix_twos[j]), 
                                            std::min(horizontal_suffix_fives[i][j] + vertical_prefix_fives[j],  horizontal_suffix_twos[i][j] + vertical_prefix_twos[j])));
                vertical_prefix_fives[j] += GetFactorNum(grid[i][j], 5);
                vertical_prefix_twos[j] += GetFactorNum(grid[i][j], 2);
            }
        }
        
        vector<int> veritical_suffix_fives(n), vertical_suffix_twos(n);
        for (int i = m - 1; i >= 0; --i) {
            for (int j = 0; j < n; ++j) {
                max_val = std::max(max_val,
                                   std::max(std::min(horizontal_prefix_fives[i][j] + veritical_suffix_fives[j], horizontal_prefix_twos[i][j] + vertical_suffix_twos[j]),
                                            std::min(horizontal_suffix_fives[i][j] + veritical_suffix_fives[j],  horizontal_suffix_twos[i][j] + vertical_suffix_twos[j])));
                veritical_suffix_fives[j] += GetFactorNum(grid[i][j], 5);
                vertical_suffix_twos[j] += GetFactorNum(grid[i][j], 2);
            }
        }   
    
        return max_val;
    }
    
private:
    int GetFactorNum(int val, int factor) {
        int count = 0;
        while (val > 0 && val % factor == 0) {
            val /= factor;
            count++;
        }
        return count;
    }
};