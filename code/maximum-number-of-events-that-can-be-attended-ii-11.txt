class Solution {
public:
    int maxValue(vector<vector<int>>& events, int k) {
        int n = events.size();
        
        sort(begin(events), end(events), [](auto &v1, auto &v2) {
           return v1[1] < v2[1]; 
        });
        
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
        for (int i = 1; i <= n; ++i)
        {
            auto &e = events[i - 1];
            int start = e[0], end = e[1], val = e[2];
            int pre = i - 1;
            
            /* please note that i-th events is `events[i - 1]`,
             * where 1 <= i <= n, hence `pre - 1` is used.
             */
            while (pre >= 1 && !(events[pre - 1][1] < start))
                --pre;
            
            for (int j = 0; j <= k; ++j)
                dp[i][j] = max(dp[i - 1][j], (j >= 1) ? (dp[pre][j - 1] + val) : 0);
        }
        return dp[n][k];
    }
};
