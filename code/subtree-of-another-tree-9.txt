/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Notice that we also return false
    // when any one is NULL.
    // This is because we want that the subtrees be exactly similar therefore they 
    // should become null at the same time.
    
    
    
    /* Here ddfs is the main function while dfs is the helper function */
    bool ddfs(TreeNode*root, TreeNode*r){
        if(!root && !r)return true;
        if(root && !r)return false;
        if(!root && r)return false;
        
        bool ans = false;
        
        if(root->val == r->val){
            ans = dfs(root, r);
            if(ans)return true;
        }
        
        // Check if the subRoot is the subtree of either the left or the right part
        return ddfs(root->left, r) || ddfs(root->right, r);
        
    }
    bool dfs(TreeNode*r1, TreeNode*r2){
        if(r1 && !r2)return false;
        if(!r1 && r2)return false;
        if(!r1 && !r2)return true;
        
        // if values's dont' match that means that the current root can't be included in the answer.
        if(r1->val != r2->val){
            return false;
        }
        bool ans = dfs(r1->left, r2->left) && dfs(r1->right, r2->right);
        return ans;
    }
    
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        return ddfs(root, subRoot);
    }
};