char * trimFront(char * s) {
    int n = strlen(s);
    int index = 0;
    for (int i = 0; i < n; i++) {
        if (s[i] == ' ') {
            index++;
        } else {
            s = s + index;
            return s;
        }
    }
    
    return s;
    
}

char * trimBack(char * s) {
    int n = strlen(s);
    int index = 0;
    int i = n - 1;
    for (int i = n - 1; n > 0; i--) {
        if (s[i] == ' ') {
            index++;
        } else {
            s[n - index] ='\0';
            return s;
        }
    }
    
    return s;
    
}

char * trimInside(char * s) {
    int n = strlen(s);
    int j = 0;
    int flag = 0;
    int i = 0;
    
    while (s[j] != '\0') {
        if (s[j] != ' ') {
            flag = 0;
            s[i] = s[j];
            i++;
            j++;
            
        } else {
            if (flag == 0) {
                flag = 1;
                s[i] = s[j];
                i++;
            }
             j++;
        }
    }
    s[i] = '\0';
    return s;
}

char * reverse(char * s, int begin, int end) {    
    end = end - 1;
    while(begin < end) {
        char temp = s[end];
        s[end] = s[begin];
        s[begin] = temp;
        end--;
        begin++;
    }
    return s;
    
}

char * reverseEachWord(char * s) {
    int index = 0;
    int begin = 0;
    int length = 0;
    while(s[index] != '\0') {
        if (s[index] != ' ') {
            length++;
        } else {
            s = reverse(s, begin, begin + length);
            begin = index + 1;
            length = 0;
        }
        
        index++;
        
    }
    
    return reverse(s, begin, begin + length);
    
}



char * reverseWords(char * s){
    if (s == NULL || !strlen(s)) {
        return s;
    } 
    
    char * v = trimFront(s);
    char * b = trimBack(v);
    char * x = trimInside(b);
    char * d = reverse(x, 0, strlen(x));
    char * res = reverseEachWord(d);
    
    
    return res;

}