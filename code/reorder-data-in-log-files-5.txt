int cmp(char *str1, char *str2)
{
    int str1_len = strlen(str1);
    int str2_len = strlen(str2);
    int i = 0;
    int j = 0;
    
    while (i < str1_len)
    {
        if (str1[i] == ' ') {
            i = i + 1;
            break;
        }
        i++;
    }
    
    while (j < str2_len)
    {
        if (str2[j] == ' ') {
            j = j + 1;
            break;
        }
        j++;
    }
    
    // swap digit and letter
    if (str1[i] <= 0x39 && str2[j] > 0x39) {
        return 1;
    }
    else if (str1[i] <= 0x39 && str2[j] <= 0x39) {
        return 0;
    }
    else if (str1[i] > 0x39 && str2[j] <= 0x39) {
        return 0;
    }
    
    // handle letter
    while (i < str1_len && j < str2_len)
    {
        if (str1[i] > str2[j])
        {
            return 1;
        } 
        else if (str1[i] == str2[j])
        {
            i++;
            j++;
        }
        else
        {
            return 0;
        }
    }
    
    if (i < str1_len)
        return 1;
    
    
    // sort them lexicographically by their identifiers.
    i = 0;
    j = 0;
    while (str1[i] != ' ' && str2[j] != ' ')
    {
        if (str1[i] > str2[j])
        {
            return 1;
        } 
        else if (str1[i] == str2[j])
        {
            i++;
            j++;
        }
        else
        {
            return 0;
        }
    }
    return 0;
}


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** reorderLogFiles(char ** logs, int logsSize, int* returnSize){
    char *swap = NULL;
    for (int i = 0; i < logsSize-1 ; i++){
        for (int j = 0; j < (logsSize- 1 - i) ; j++){
            if (cmp(logs[j], logs[j+1]))
            {
                swap = logs[j];
                logs[j] = logs[j+1];
                logs[j+1] = swap;
            }
        }
    }
    
    *returnSize = logsSize;
    return logs;
}