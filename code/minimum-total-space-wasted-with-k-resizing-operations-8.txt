class Solution {
public:
    long long dp[201][202];
    long long dfs(vector<int>& nums, int i, int k) {
        long long mx = 0;
        long long sum = 0;
        if(k == 0) {
            return i == nums.size() ? 0 : INT_MAX;
        }
        if(dp[i][k] >= 0) return dp[i][k];
        long long res = INT_MAX;
        for(int j = i; j < nums.size(); j++) {
            mx = max((long long)nums[j], mx);
            sum += nums[j];
            res = min(res, mx * (j - i + 1) - sum + dfs(nums, j + 1, k - 1));
        }
        return dp[i][k] = res;
    }
    int minSpaceWastedKResizing(vector<int>& nums, int k) {
        memset(dp, -1, sizeof(dp));
        return dfs(nums, 0, k + 1);
    }
};