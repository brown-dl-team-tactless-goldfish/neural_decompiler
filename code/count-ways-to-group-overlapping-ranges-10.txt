class Solution {
private:
    const int MOD = 1e9 + 7;
    static bool cmp(vector<int>& range1, vector<int>& range2){
        return range1[0] < range2[0];
    }
public:
    int countWays(vector<vector<int>>& ranges) {
        //sort ranges based on the start of each range
        sort(begin(ranges), end(ranges), cmp);
        
        //merge ranges
        vector<vector<int>> newRanges;
        newRanges.push_back(ranges[0]);
        
        for (int i = 1; i < ranges.size(); i++)
            if (newRanges[newRanges.size() - 1][1] >= ranges[i][0])
                newRanges[newRanges.size() - 1][1] = max(newRanges[newRanges.size() - 1][1],ranges[i][1]);
            else
                newRanges.push_back(ranges[i]);
        
        
        long long res = 1;
        
        //ranges has two choices: it can either go into the first group or the second group
        //so we do pow(2,newRanges.size()) to get all combination
        for (int i = 0; i < newRanges.size(); i++)
            //use MOD to avoid overflow
            res = (res * 2) % MOD;
        
        
        return res;
    }
};