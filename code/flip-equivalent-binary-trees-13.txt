public class Solution {
    public bool FlipEquiv(TreeNode root1, TreeNode root2) 
    {
             if (root1 == null && root2 == null)
                return true;
            else if (root1 == null && root2 != null ||
                     root1 != null && root2 == null ||
                     root1.val != root2.val)
                return false;

            Queue<TreeNode> queue1 = new Queue<TreeNode>(),
                            queue2 = new Queue<TreeNode>();

            queue1.Enqueue(root1);
            queue2.Enqueue(root2);

            while (queue1.Count != 0 && queue2.Count != 0)
            {
                if (queue1.Count != queue2.Count)
                    return false;

                int count = queue1.Count;
                Dictionary<int, int> dict = new Dictionary<int, int>();

                while (count > 0)
                {
                    TreeNode node1 = queue1.Dequeue();

                    if (node1.left != null)
                    {
                        dict.Add(node1.left.val, node1.val);

                        queue1.Enqueue(node1.left);
                    }

                    if (node1.right != null)
                    {
                        dict.Add(node1.right.val, node1.val);

                        queue1.Enqueue(node1.right);
                    }

                    count--;
                }

                count = queue2.Count;

                while (count > 0)
                {
                    TreeNode node2 = queue2.Dequeue();

                    if (node2.left != null)
                    {
                        if (!dict.ContainsKey(node2.left.val) || dict[node2.left.val] != node2.val)
                            return false;

                        queue2.Enqueue(node2.left);
                    }

                    if (node2.right != null)
                    {
                        if (!dict.ContainsKey(node2.right.val) || dict[node2.right.val] != node2.val)
                            return false;

                        queue2.Enqueue(node2.right);
                    }

                    count--;
                }
            }

            if (queue1.Count != 0 || queue2.Count != 0)
                return false;

            return true;
    }
}