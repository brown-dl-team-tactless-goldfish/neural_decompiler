public class Solution {
      string _s1;
        string _s2;
        int[][][] _memo;
        public bool PossiblyEquals(string s1, string s2)
        {
            // abc,3a
            // a3,3a
            _s1 = s1;
            _s2 = s2;
            _memo = new int[s1.Length+1][][]; //Need extra 1, as index can exceed by 1 in recursion and not reach stopping conditions

            for(int ii=0;ii<s1.Length+1;ii++)
            {
                _memo[ii] = new int[s2.Length+1][];
                for (int jj = 0; jj < s2.Length+1; jj++)
                    _memo[ii][jj] = new int[2000]; //To store values -999 to 999
            }


            return Compare(0, 0, 0);
        }


        //s1 = l2e
        //s2 = 22
        private bool Compare(int i1, int i2, int diff) //diff cant be more than 1000, range is  -999 - 900 or 2000 entries
        {
            bool res = false;
            int count = 0;
            int tmp = 0;
            if (i1 >= _s1.Length && i2 >= _s2.Length && diff==0) return true;
            if (_memo[i1][i2][1000 + diff] != 0) return _memo[i1][i2][1000 + diff] == 1 ? true : false;
            if (i1 < _s1.Length)
            {
                if (isDigit(_s1[i1]))
                {
                    count = 0;
                    tmp = 0;
                    while (i1 + count < _s1.Length && isDigit(_s1[i1 + count]))
                    {
                        tmp = tmp * 10 + (_s1[i1 + count] - '0');//tmp = 1
                        count++;
                        res = Compare(i1 + count, i2, diff + tmp); 
                        if (res) break; //We found a true condition no need to continue
                    }
                }
                else
                {
                    if(diff < 0) //i2 numbers are remaining
                        res = Compare(i1 + 1, i2, diff + 1); 
                    else if(diff == 0 && i2 < _s2.Length) 
                        if (_s1[i1] == _s2[i2])
                            res = Compare(i1 + 1, i2 + 1, diff);
                }
            }


            if (i2 < _s2.Length && !res)
            {
                if (isDigit(_s2[i2]))
                {
                    count = 0;
                    tmp = 0;
                    while (i2 + count < _s2.Length && isDigit(_s2[i2 + count]))
                    {
                        tmp = tmp * 10 + (_s2[i2 + count] - '0');
                        count++;
                        res = Compare(i1, i2+count, diff - tmp); 
                        if (res) break; //We found a true condition no need to continue
                    }
                }
                else
                {
                    if (diff > 0) //Remaining items in i2
                        res =  Compare(i1, i2+1, diff - 1);
                }
            }

            _memo[i1][i2][1000 + diff] = res == true ? 1 : -1; //1000+(-999) = 1, and 1000+ (999) = 1999
            return res;
        }

        private bool isDigit(char c)
        {
            return ((c - '0') >= 0 && (c - '0') <= 9);
        }
}