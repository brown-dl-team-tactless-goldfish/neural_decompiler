typedef struct Node Node;

struct Node {
    unsigned int mask;
    int count;
    Node * left, * right;
};

static Node *
insert_node(Node * node, unsigned int mask)
{
    if (!node)
    {
        Node * new_node = malloc(sizeof(Node));
        new_node->mask = mask;
        new_node->count = 1;
        new_node->left = NULL;
        new_node->right = NULL;
        return new_node;
    }
    
    if (mask > node->mask)
        node->right = insert_node(node->right, mask);
    else if (mask < node->mask)
        node->left = insert_node(node->left, mask);
    else
        ++(node->count);
    
    return node;
}

static Node *
search(Node * node, unsigned int mask)
{
    if (!node)
        return NULL;
    
    if (mask > node->mask)
        return search(node->right, mask);
    else if (mask < node->mask)
        return search(node->left, mask);
    else
        return node;
}

static void
delete_tree(Node * node)
{
    if (!node)
        return;
    
    delete_tree(node->left);
    delete_tree(node->right);
    free(node);
}

int * 
findNumOfValidWords(char ** words, int wordsSize, char ** puzzles, int puzzlesSize, int * returnSize)
{
    int i, j, count, * result;
    unsigned int bit, mask, sub_mask;
    Node * word_tree = NULL;
    
    result = malloc(puzzlesSize * sizeof(int));
    
    for (i = 0; i < wordsSize; ++i)
    {
        mask = 0;
        count = 0;
        
        for (j = 0; j < strlen(words[i]); ++j)
        {
            bit = 1U << (unsigned)(words[i][j] - 97);
            
            if (bit & mask)
                continue;
            
            ++count;
            
            if (count > 7)
                break;
            
            mask |= bit;
        }
        
        if (count <= 7)
            word_tree = insert_node(word_tree, mask);
    }
    
    for (i = 0; i < puzzlesSize; ++i)
    {
        count = 0;
        bit = 1U << (unsigned)(puzzles[i][0] - 97);
        
        Node * word_node = search(word_tree, bit);
        
        if (word_node)
            count = word_node->count;
        
        mask = 0;
        
        for (j = 1; j < 7; ++j)
            mask |= 1U << (unsigned)(puzzles[i][j] - 97);
        
        for (sub_mask = mask; sub_mask; sub_mask = (sub_mask - 1) & mask)
        {
            word_node = search(word_tree, sub_mask | bit);
            if (word_node)
                count += word_node->count;
        }
        
        result[i] = count;
    }
    
    delete_tree(word_tree);
    *returnSize = puzzlesSize;
    return result;
}