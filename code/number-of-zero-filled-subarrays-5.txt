#define IDENTIFIER 0
long long zeroFilledSubarray(int* nums, int numsSize){
long long return_subarrya_count =0;
long long zero_subarray_len = 0;
//we need to count the contigeous 0 formation in input array 
for(int idx =0; idx < numsSize; idx++){
    if(nums[idx] == IDENTIFIER){zero_subarray_len++;}
    else{
        //if the zero_subarray_len is 0 then we will proceed to next value
        if(zero_subarray_len == 0){continue;}
        //considering we have the zero_subarray_len more than 0
        else{
            //we need to count the sum of numbers till the length of the zero subarray
            //since the minimum sub array lenght is 1 we can implement a loop in which
            //we can count from 1 to the lenght of the subarray to get the max possible
            //subarrays provided we know the maximum lenght of the sub array 
            for(int cnt = 1; cnt <= zero_subarray_len; cnt++){return_subarrya_count += cnt;}
            zero_subarray_len = 0;
        }
    }
}
//we will do count again on the zero_subarray_len if the last value is missed 
for(int cnt = 1; cnt <= zero_subarray_len; cnt++){return_subarrya_count += cnt;}
return return_subarrya_count;
}