
class Solution {
public:
int dp[18][19683];

bool check(int used,int i){
    if(i==0) return (used%10)!=2;
    return check(used/10,i-1);
}

int bitPos(int used,int pos){
    if(!used) return 0;
    return (pow(3,pos)*(used%10)+bitPos(used/10,pos+1));
}

int help(vector<int> &ar,int k,int pos,int used){
    int n=ar.size(),ans=0;
    if(pos>=n) return 0;
    if(dp[pos][bitPos(used,0)]!=-1) return dp[pos][bitPos(used,0)];
    for(int i=0;i<k;i++){
        // if ith bit of 'used' is 2 then ignore
        // if ith bit of 'used' is 1 or 0 then try using this slot
        if(check(used,i)){
            int newUsed=used+pow(10,i);
            ans=max(ans,(ar[pos]&(i+1))+help(ar,k,pos+1,newUsed));
        }
    }
    return dp[pos][bitPos(used,0)]=ans;
}

int maximumANDSum(vector<int>& ar, int k){
    memset(dp,-1,sizeof(dp));
    return help(ar,k,0,0);
}
};