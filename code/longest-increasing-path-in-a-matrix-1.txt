int max (int a, int b, int c, int d){
    if (a < b){
        a = b;
    }
    if (a < c){
        a = c;
    }
    if (a < d){
        a = d;
    }
    return a;
}

int check(int** matrix, int matrixSize, int* matrixColSize, int** list, int i, int j) {
    if (list[i][j] != 0){
        return list[i][j];
    }
    int up,down,left,right;
    if (i+1 < matrixSize && matrix[i+1][j] > matrix[i][j]) {
        down = 1 + check(matrix, matrixSize, matrixColSize, list, i+1, j);
    } else {
        down = 1;
    }
    if (i-1 >= 0 && matrix[i-1][j] > matrix[i][j]) {
        up = 1 + check(matrix, matrixSize, matrixColSize, list, i-1, j);
    } else {
        up = 1;
    }
    if (j+1 < *matrixColSize && matrix[i][j+1] > matrix[i][j]) {
        left = 1 + check(matrix, matrixSize, matrixColSize, list, i, j+1);
    } else {
        left = 1;
    }
    if (j-1 >= 0 && matrix[i][j-1] > matrix[i][j]) {
        right = 1 + check(matrix, matrixSize, matrixColSize, list, i, j-1);
    } else {
        right = 1;
    }
    list[i][j] = max(up,down,left,right);
    return list[i][j];
}

int longestIncreasingPath(int** matrix, int matrixSize, int* matrixColSize){
    int** list = malloc(sizeof(int*)*matrixSize);
    for (int i = 0 ; i < matrixSize ; i++){
        list[i] = calloc((*matrixColSize),sizeof(int));
    }
    int ans = 0;
    for (int i = 0 ; i < matrixSize ; i++){
        for (int j = 0 ; j < *matrixColSize ; j++){
            if (list[i][j] == 0 && ans < check(matrix, matrixSize, matrixColSize, list, i, j)){
                ans = list[i][j];
            }
        }
    }
    for (int i = 0 ; i < matrixSize ; i++){
        free(list[i]);
    }
    free(list);
    return ans;
}