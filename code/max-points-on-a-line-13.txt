int maxPoints(struct Point* points, int pointsSize) {

	int i,j,k,dX,dY;
	int cntOnX,cntOnY,curSlope;

	// arrays of unique Slopes
	int slopesX[128];
	int slopesY[128];
	int cntSlopes[128];
	int cntUS; // count Unique Slopes

	int resMax=0;
	int curMax;
	
	long long A,B;

	
	if(pointsSize<=2) return pointsSize;

/*  Did not show reduced runtime    
	long long x1,y1,x2,y2;

	if(pointsSize==3)
	{
		dX=points[0].x;	dY=points[0].y;
		for(j=0;j<pointsSize;j++) {	points[j].x-=dX; points[j].y-=dY; }
		x1=points[1].x;	y1=points[1].y;
		x2=points[2].x;	y2=points[2].y;
		if(x1*y2==x2*y1) return 3;
		return 2;
	}
*/ 
	for(i=0;i<pointsSize;i++)
	{
		// shift all points of 2D plane in parallel so that current point gets into the plane's origin (0,0)
		// TODO: possible int overflow
		
		dX=points[i].x;	dY=points[i].y;
		for(j=0;j<pointsSize;j++) { points[j].x-=dX; points[j].y-=dY; }

		curMax=0; cntUS=0; cntOnX=1; cntOnY=1;
		
		// check Slopes relative to current point
		for(j=0;j<pointsSize;j++)
		{
			if(j==i) continue;
        
#define pX points[j].x 
#define pY points[j].y
            
#define CheckEqualSlopes \
{\
	A=(long long)slopesX[k] * (long long)pY;\
	B=(long long)slopesY[k] * (long long)pX;\
	if(A==B) { cntSlopes[k]++; if(cntSlopes[k]>curMax) curMax=cntSlopes[k]; break; }\
}

			if(pX||pY)
			{
				if(!pY) { cntOnX++; continue; }
				if(!pX) { cntOnY++; continue; }

				// check if current Slope is unique

				for(k=0;k<cntUS;k++)
				{
					// Variant 1
					// no need to compare Slopes from the opposite half-planes
					// reduces the number of comparisons approximately by 1/3 
					// though increases total entries into the loop
					if(slopesX[k]>0 && pX>0) CheckEqualSlopes // Right half-plane
					if(slopesX[k]<0 && pX<0) CheckEqualSlopes // Left half-plane
					
					// Variant 2
					//CheckEqualSlopes
				}

				if(k==cntUS) // passed all Slopes, did not find current Slope, add new Slope
				{
					slopesX[cntUS]=pX;
					slopesY[cntUS]=pY;
					cntSlopes[cntUS]=2;
					cntUS++;
				}
			}
			else // Skip Duplicates
			{
				cntOnX++; cntOnY++; curMax++;
			}
		}
        
		if(!curMax) curMax=2; // there were no Duplicates in (0,0) and all Slopes were unique

		if(cntOnX>curMax) curMax=cntOnX;
		if(cntOnY>curMax) curMax=cntOnY;

		if(curMax>resMax) resMax=curMax;
	}

	return resMax;    
}
