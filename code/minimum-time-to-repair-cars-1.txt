class Solution 
{
    long long int feasible(vector<int> &ranks, int cars, long long time)
    {
        long long c = 0;
        for (int i = 0; i < ranks.size(); ++i)
            c += floor(sqrt(1.0 * time / ranks[i]));
        return c;
    }
public:
    long long repairCars(vector<int>& ranks, int cars) 
    {
        int n = ranks.size(), x = (cars/n > 0) ? cars/n : 1;
        long long beg = 1 * pow(x, 2), end = 100 * pow(x, 2);
        while (beg < end)
        {
            long long mid = beg + (end - beg) / 2, c;
            c = feasible(ranks, cars, mid);
            if (c >= cars)
                end = mid;
            else
                beg = mid + 1;
        }
        return beg;
    }
    
};