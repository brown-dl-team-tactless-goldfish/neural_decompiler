    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int K) {
        std::vector<std::pair<int, int>> qw(quality.size());
        std::transform(quality.begin(), quality.end(), wage.begin(), qw.begin(), [](const auto& q, const auto& w){ return std::make_pair(q, w); });
        std::sort(qw.begin(), qw.end(), [](const auto& p1, const auto& p2) { return (double)p1.second / p1.first < (double)p2.second / p2.first; });
        std::vector<std::pair<int, int>> heap(qw.begin(), qw.begin()+K);
        int sum = std::accumulate(heap.begin(), heap.end(), std::make_pair(0, 0), [](const auto& p1, const auto& p2) { return std::make_pair(p1.first+p2.first, 0); }).first;
        double ret = sum * ((double)heap.back().second / heap.back().first);
        std::make_heap(heap.begin(), heap.end(), [](const auto& p1, const auto& p2) { return p1.first < p2.first; });
        for (auto it = qw.begin()+K; it != qw.end(); ++it)
        {
            sum += (*it).first - heap.front().first;
            ret = std::min(ret, sum * (double)(it->second) / it->first);
            std::pop_heap(heap.begin(), heap.end());
            heap.back() = *it;
            std::push_heap(heap.begin(), heap.end());
        }
        return ret;
    }