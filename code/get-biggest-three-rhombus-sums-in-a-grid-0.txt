int minVal(int a, int b, int c){
    return fmin( fmin(a, b), c );
}

int Sum(int** grid, int r, int c, int n){
    if(n == 0)
        return grid[r][c];
    int ans = 0;
    int R = r;
    int C = c;
    ans += grid[R][C];
    for(int i = 1; i <= n; i++){
        ans += grid[R+i][C-i];
        ans += grid[R+i][C+i];
    }
    R = r + 2 * n;
    C = c;
    ans += grid[R][C];
    for(int i = 1; i < n; i++){
        ans += grid[R-i][C-i];
        ans += grid[R-i][C+i];
    }

    return ans;
}

int* getBiggestThree(int** grid, int gridSize, int* gridColSize, int* returnSize){
    int m = gridSize;
    int n = *gridColSize;
    int* ans = calloc(3 , sizeof(int));

    for(int i = 0;  i < m; i++){
        for(int j = 0; j < n; j++){
            int radis = minVal(j, n- 1- j, (m -1 -i)/2);
            for(int k = 0; k <=radis; k++ ){
                int a = Sum(grid, i, j, k);
                if(a > ans[0]){
                    ans[2] = ans[1];
                    ans[1] = ans[0];
                    ans[0] = a;
                }
                else if(a != ans[0] && a > ans[1]){
                    ans[2] = ans[1];
                    ans[1] = a;  
                }
                else if(a != ans[0] && a != ans[1] && a > ans[2])
                    ans[2] = a;
            }           
        }
    }

    if(ans[1] == 0)
        *returnSize = 1;
    else if(ans[2] == 0)
        *returnSize = 2;
    else
        *returnSize = 3;
        
    return ans;
}   