/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int parent [100001];
    
    
    TreeNode* createBinaryTree(vector<vector<int>>& desc) {
        unordered_map<int , TreeNode * > mp;
        
        for(int i=0; i<= 100000; i++){
            parent[i] = - 1;
            
        }
        
        for(auto a : desc){
            int par = a[0];
            int child =a[1];
            int lr = a[2];
            TreeNode * t;
            if(mp.find(par) != mp.end()){
                 t = mp[par];
                TreeNode *c;
                if(mp.find(child) != mp.end() ){
                     c = mp[child];
                }
                else{
                    c = new TreeNode(child);
                }
                
                if(lr){
                    t->left = c;
                }
                else{
                    t->right =c;
                }
                mp[child] = c;
            }
            else{
                t = new TreeNode(par);
                TreeNode *c;
                if(mp.find(child) != mp.end() ){
                     c = mp[child];
                }
                else{
                    c = new TreeNode(child);
                }
                
                if(lr){
                    t->left = c;
                }
                else{
                    t->right =c;
                }
                mp[child] = c;
            }
            mp[par] = t;
            parent[child] = par;
        }
        
        int par = 0;
       for(auto e: desc){
           if(parent[e[0]] == -1 ){
               par = e[0];
               break; 
           }
       }
        
        dfs(mp[par] , mp);
        return mp[par];
        
    }
    
    void dfs(TreeNode *root , unordered_map<int , TreeNode * > &mp){
        if(root==NULL){
            return;
        }
        if(root->left){
            root->left = mp[root->left->val];
        }
        if(root->right){
            root->right = mp[root->right->val];
        }
        dfs(root->left ,mp);
        dfs(root->right , mp);
        
        mp[root->val] = root;
    }
    
    
};