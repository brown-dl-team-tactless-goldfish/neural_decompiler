/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
 void merge(int *a,int lb,int mid,int ub)
{
    
   int i,j,k;
   int n1 = mid-lb+1;
   int n2 = ub-mid;
   int L[n1];
   int R[n2];
    for(i =0;i<n1;i++)
    {
        L[i] = a[lb+i];
    }
    for(j =0;j<n2;j++)
    {
        R[j] = a[mid+1+j];
    }
    i =0;
    j=0;
    k =lb;
    while(i<n1 && j<n2)
    {
        if(L[i]<=R[j])
        {
            a[k] = L[i];
            i++;
        }
        else{
            a[k] = R[j];
            j++;
        }
        k++;
    }
    while (i<n1)
    {
        a[k] = L[i];
        i++;
        k++;
    }
    
    while(j<n2)
    {
        a[k] = R[j];
            j++;
            k++;
    }
}
 void mergesort(int *a,int lb,int ub)
{
    int mid;
    if(lb<ub)
    {
        mid = (lb+ub)/2; 
        //breaking array into half and calling function recursively for left and right sub arraay
        mergesort(a,lb,mid);    
        mergesort(a,mid+1,ub);
        // merge funcion once all subarrays length becomes one
        merge(a,lb,mid,ub);
    }
}
int* sortArray(int* nums, int numsSize, int* returnSize){
    mergesort(nums,0,numsSize-1);
    *returnSize = numsSize;
    return nums;
}