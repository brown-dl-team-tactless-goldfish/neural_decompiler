void maxDay(char * day1, char * day2, int* month,  int *day){
    int m1 = (day1[0]-'0') * 10 + (day1[1] -'0');
    int d1 = (day1[3]-'0') * 10 + (day1[4] -'0');
    int m2 = (day2[0]-'0') * 10 + (day2[1] -'0');
    int d2 = (day2[3]-'0') * 10 + (day2[4] -'0');
    if(m1 > m2){
        *month = m1,
        *day = d1;
    }
    else if(m1 < m2){
        *month = m2,
        *day = d2;
    }
    else{
        if(d1 >= d2){
            *month = m1,
            *day = d1;
        }
        else{
            *month = m2,
            *day = d2;
        }          
    }
}

void minDay(char * day1, char * day2, int* month,  int *day){
    int m1 = (day1[0]-'0') * 10 + (day1[1] -'0');
    int d1 = (day1[3]-'0') * 10 + (day1[4] -'0');
    int m2 = (day2[0]-'0') * 10 + (day2[1] -'0');
    int d2 = (day2[3]-'0') * 10 + (day2[4] -'0');
    if(m1 < m2){
        *month = m1,
        *day = d1;
    }
    else if(m1 > m2){
        *month = m2,
        *day = d2;
    }
    else{
        if(d1 <= d2){
            *month = m1,
            *day = d1;
        }
        else{
            *month = m2,
            *day = d2;
        }          
    }
}
int countDaysTogether(char * arriveAlice, char * leaveAlice, char * arriveBob, char * leaveBob){
    int b_m, b_d, e_m, e_d;
    int days[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    maxDay(arriveAlice, arriveBob, &b_m, &b_d);
    minDay(leaveAlice, leaveBob, &e_m, &e_d);
    if(b_m == e_m){
        if(b_d > e_d)
            return 0;
        else 
            return e_d - b_d + 1;
    }
    else if(b_m > e_m)
        return 0;
    else{
        int ans = 0;
        ans += days[b_m] - b_d + 1;
        for(int i = b_m + 1; i < e_m; i++){
            ans += days[i];
        }
        ans += e_d;
        return ans;
    }
}