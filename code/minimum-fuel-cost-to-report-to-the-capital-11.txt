#define ll long long 
class Solution {
    private:
    pair<ll,pair<ll,ll>> dfs(vector<vector<int>>&adjList, int node, int &seats,int parent)
    {  
        
        // traverse  over neighbor nodes
        ll total_fuel=0;
        ll n_person=1;
       
        for(auto adjNode: adjList[node])
        {    if(adjNode==parent) continue;
            pair<ll,pair<ll,ll>> p=dfs(adjList,adjNode,seats,node);
            total_fuel+=p.first+(p.second.first);
            n_person+=p.second.second;
           
        }
        
          ll n_cars=ceil(n_person/float(seats));

        return {total_fuel,{n_cars,n_person}};
    }
public:
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        // create an adjacency list
        int n=roads.size()+1;
        vector<vector<int>>adjList(n,vector<int>());

        for(auto it: roads)
        {  
            int u=it[0];
            int v=it[1];
            adjList[u].push_back(v);
            adjList[v].push_back(u);
        }

     // to track visited city
     /// because for 'n' cities you have exactly 'n-1' roads so there is no chance to have a cycle
      return dfs(adjList,0,seats,-1).first;
    }
};