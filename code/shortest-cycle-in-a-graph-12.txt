int findShortestCycle(int n, vector<vector<int>>& edges) {
        
        vector<set<int>>g(n) ;
        
        for( auto i : edges )
        {
            g[i[0]].insert(i[1]) ;
            g[i[1]].insert(i[0]) ;
        }
        
        int ans = INT_MAX ;
        
        for( auto e : edges )
        {
            g[e[0]].erase(e[1]) ;
            g[e[1]].erase(e[0]) ;
            
            vector<int>dis( n , 100000 ) ;
            queue<int>q ;
            
            q.push(e[0]) ;
            vector<bool>vis( n , false ) ;
            vis[e[0]] = true ;
            dis[e[0]] = 0 ;
            
            while(!q.empty())
            {
                auto it = q.front() ;
                q.pop() ;
                
                for( auto c : g[it] )
                {
                    if(!vis[c] && dis[it] + 1 < dis[c] )
                    {
                        dis[c] = dis[it] + 1 ;
                        vis[c] = true ;
                        q.push(c) ;
                    }
                }
            }
            
            ans = min( ans ,  dis[e[0]] + dis[e[1]] + 1 ) ;
            
        }
        
        if( ans >= 100000 ) return -1 ;
        
        return ans ;
    }