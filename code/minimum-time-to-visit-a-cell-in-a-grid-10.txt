vector<int> row = {-1, 0, 1, 0};
vector<int> col = {0, 1, 0, -1};

bool isVisited(int r, int c, vector<vector<int>> &visited) {
  if (visited[r][c] == 1)
    return true;
  return false;
}
int tm = 0 ;
void help(vector<vector<int>> &grid, int i, int j, vector<vector<int>> &visited,
          bool &flag, int &time) {

 // cout<<i<<" "<<j<<endl;
  visited[i][j] = 1;
  if(time < grid[i][j]){
    return;
  }

  // cout << grid[i][j] << endl;
  int n = grid.size();
  int m = grid[0].size();

  if (i == n - 1 && j == m - 1) {
    // cout<< " base case"<<endl;
    flag = true;
    tm =  max(tm,time);
    return;
  }


  for (int k = 0; k < 4; k++) {
    int r = i + row[k];
    int c = j + col[k];
  
    if (r >= 0 && r < n && c >= 0 && c < m ) {
        
      if (!isVisited(r, c, visited)) {
          time ++;
        // cout<<"Time : "<<time<<endl;
        help(grid,r,c,visited,flag,time);
        visited[r][c] = 0;
        time--;
      }
    }  
  }
}