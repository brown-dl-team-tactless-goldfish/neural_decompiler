class MajorityChecker {
public:
    unordered_map<int,map<int,int>> m;
    unordered_map<int,map<int,int,greater<int>>> m_r;
    unordered_map<int,int> count;
    multimap<int,int> c_r;
    vector<int> arr;
    MajorityChecker(vector<int>& a) {
        arr = a;
        for(int i = 0;i<arr.size();i++){
            int e = arr[i];
            int c = count[e]++;
            m[e][i] = c;
            m_r[e][i] = c;
        }
        for(auto x: count){
            c_r.emplace(x.second, x.first);
        }
    }
    
    int query(int left, int right, int threshold) {
        auto tmp = c_r.lower_bound(threshold);
        while(tmp!=c_r.end()){
            int e = tmp->second;
            auto ptr = m[e].lower_bound(left);
            auto ptr1 = m_r[e].lower_bound(right);
            if(ptr1!=m_r[e].end()&&ptr!=m[e].end()&&ptr1->second - ptr->second + 1 >= threshold){
                return e;
            }
            tmp++;
        }
        return -1;
    }
};

/**
 * Your MajorityChecker object will be instantiated and called as such:
 * MajorityChecker* obj = new MajorityChecker(arr);
 * int param_1 = obj->query(left,right,threshold);
 */