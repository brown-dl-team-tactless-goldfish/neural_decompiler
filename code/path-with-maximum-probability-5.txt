class Solution {
public:
    double maxProbability(
        int n,
        vector<vector<int>>& edges,
        vector<double>& succProb,
        int start,
        int end
    ) {
        vector<vector<pair<int, double>>> graph(n);
        int m = edges.size();
        for (int i = 0; i < m; ++i) {
            int a = edges[i][0];
            int b = edges[i][1];
            double c = succProb[i];
            graph[a].push_back({b, c});
            graph[b].push_back({a, c});
        }
        vector<double> prob(n, 0.0);
        prob[start] = 1.0;
        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start});
        while (pq.empty() == 0) {
            auto [p, v] = pq.top();
            pq.pop();
            if (v == end)
                break;
            if (p < prob[v])
                continue;
            for (auto [u, w]: graph[v]) {
                if (p*w <= prob[u])
                    continue;
                prob[u] = p*w;
                pq.push({p*w, u});
            }
        }
        return prob[end];
    }
};