void swap(int *arr, int from, int to)
{
    int tmp = arr[from];
    arr[from] = arr[to];
    arr[to] = tmp;
    
    return;
}


void permuteRec(int *nums, int from, int to, int ***resArr, int *returnSize, int numsSize)
{
    if (nums == NULL) {
        return;
    }
    
    int i;
    
    if (from == to) {
        int *arr = malloc(sizeof(int) * numsSize);
        memcpy(arr, nums, sizeof(int) * numsSize);
        (*resArr)[*returnSize] = arr;
        (*returnSize)++;
        return;
    } else {
        for (i = from; i <= to; i++) {
            swap(nums, from, i);
            permuteRec(nums, from + 1, to, resArr, returnSize, numsSize);
            swap(nums, from, i);
        }
        
    }
    
    return;
}


int** permute(int* nums, int numsSize, int* returnSize) {
    if (nums == NULL || numsSize < 1) {
        *returnSize = 0;
        return NULL;
    }
    
    int count = 1, i;
    for (i = 1; i <= numsSize; i++) {
        count *= i;
    }
    
    *returnSize = 0;
    int **resArr = malloc(sizeof(int *) * count);
    permuteRec(nums, 0, numsSize - 1, &resArr, returnSize, numsSize);
    
    return resArr;
}