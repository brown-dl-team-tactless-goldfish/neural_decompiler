/*
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#define F first
#define S second

class Solution {
public:
    bool check(TreeNode* root,int minl,int maxr)
    {
        if(!root)
            return true;
        if(root->val >minl and root->val<maxr)
        {
            return check(root->left,minl,root->val) and check(root->right,root->val,maxr);
        }
        return false;
    }
    TreeNode* canMerge(vector<TreeNode*>& trees) {
        unordered_map<int,TreeNode*> par;//to map values of node to it's parent node
        unordered_map<TreeNode*,pair<int,int>> range;//range to store min and max values in BST rooted at a node "TreeNode"
        TreeNode* root=NULL;//root of final BST after n-1 merges
        int merges=0;//count of merge operation
        //Build par and range maps
        for(auto &node:trees){
            range[node].F= (node->left!=NULL ? node->left->val:node->val);
            range[node].S= (node->right!=NULL ? node->right->val:node->val);
            if(node->left!=NULL){
                par[node->left->val]=node;
            }
            if(node->right!=NULL){
                par[node->right->val]=node;
            }
        }
        for(auto &node:trees){
            
            //node->current_node
            
            if(par.find(node->val)!=par.end()){
                //It means this node may become made a child of another node. So try to make it child if satisfies the condition of BST
                TreeNode* parent=par[node->val];//parent of the current node
                
                //if the value of current node is less than value of parent node,it must be placed as left chid 
                if(node->val < parent->val){
                    //Now we need to check that max value in substree of current node should be less than value of parent node
                    if(range[node].S< parent->val){
                        parent->left= node;
                        //Now update min value for parent node
                        range[parent].F = range[node].F;
                        //increment the no of merges 
                        merges++;
                    }
                    else
                        return NULL;
                }
                //Similarily, if the value of current node is greater than value of parent node,it must be placed as right chid 
                else if(node->val > parent->val){
                    //Also the min value in substree of current node should also be greater than value of parent node -> conditions of BST :)
                    if(range[node].F > parent->val){
                        parent->right=node;
                        //Update max value in subtree of parent node
                        range[parent].S= range[node].S;
                        //Increment the no of merges
                        merges++;
                    }
                    else
                        return NULL;
                }
                else{
                    return NULL;
                }
            }
            else{
                //It means the current node can be a potential candidate for root node of final BST
                if(root==NULL){
                    root=node;
                }
                //If multiple candidates available for root node of final BST just return NULL. We can't form a valid BST
                else{
                    return NULL;
                }
            }
        }
        //Check whether the tree formed is BST or not
        if(!check(root,INT_MIN,INT_MAX)){
            return NULL;
        }
        //If the tree formed is BST,then check whether the no of merges is n-1 i.e  it is possible to form a valid BST after performing strictly n-1 operations, 
        
        return (merges == (int)trees.size()-1 ? root:NULL);
    }
};