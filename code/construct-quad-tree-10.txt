class Solution {
public:
    // function that finds if grid that starts at r and c with size s contains all same element or not .
    bool issame(int r,int c,int s,vector<vector<int>>& g){
        if(s == 1) return 1;
        bool ans = g[r][c];
        for(int i=r;i<r+s;i++){
            for(int j=c;j<c+s;j++){
                if(ans != g[i][j]) return 0;
            }
        }
        return 1;
    }

    Node* get(int r,int c,vector<vector<int>>& g, int s){
        // 2 case if all inside r-c contains same value
        // first we divide s into s/2
        if(s == 1) return new Node(g[r][c],1);
        // now if s > 1 it means if 2
        // first we check for all values are same or not
        bool isall = g[r][c], flag = issame(r,c,s,g);
        if(flag) return new Node(isall,1);
        // for top left
        Node* root = new Node(1,0);
        // this is for top left [r,c] - [r+(s/2),c+(s/2)]
        isall = g[r][c], flag = issame(r,c,s/2,g);
        root->topLeft = (!flag) ? get(r,c,g,s/2) : new Node(isall,1);
        // for top right [r,c+(s/2)] - 
        isall = g[r][c+(s/2)], flag = issame(r,c+(s/2),s/2,g);
        root->topRight = (!flag) ? get(r,c+(s/2),g,s/2) : new Node(isall,1);
        // for bottom left
        isall = g[r+(s/2)][c], flag = issame(r+(s/2),c,s/2,g);
        root->bottomLeft = (!flag) ? get(r+(s/2),c,g,s/2) : new Node(isall,1);
        // for bottom right
        isall = g[r+(s/2)][c+(s/2)], flag = issame(r+(s/2),c+(s/2),s/2,g);
        root->bottomRight = (!flag) ? get(r+(s/2),c+(s/2),g,s/2) : new Node(isall,1);
        return root;
    }

    Node* construct(vector<vector<int>>& grid) {
        return get(0,0,grid,grid.size());
    }
};