#define NODE_VAL_RANGE      6001
struct TreeNode* newNode(int val) {
    struct TreeNode *res = malloc(sizeof(struct TreeNode));
    res->val = val;
    res->left = res->right = NULL;
    return res;
}

struct TreeNode* buildTreeUtil(int* pstOrder, int *pIdx, int pStart, int pEnd, int *iMap) {
    // base case: no more elements in preorder for this subtree
    if(pStart > pEnd) return NULL;
    
    // start element of preorder will be the root of this subTree
    struct TreeNode *root = newNode(pstOrder[(*pIdx)--]);
    int idx = iMap[root->val + 3000];
    // recursively build left and right subtrees with range divided at
    // index postion of root in inorderMap
    root->right = buildTreeUtil(pstOrder, pIdx, idx + 1, pEnd, iMap);
    root->left = buildTreeUtil(pstOrder, pIdx, pStart, idx - 1, iMap);
    return root;
}

struct TreeNode* buildTree(int* inorder, int inorderSize, int* postorder, int postorderSize){
    if(!postorder || !inorder) return NULL;
    
    int inMap[NODE_VAL_RANGE], pIdx = postorderSize - 1;
    memset(inMap, -1, NODE_VAL_RANGE);
    
    // Storing the node value to index in inorderMap.
    // If the node val range is huge use hash map instead
    for(int i = 0; i < inorderSize; i++)
        inMap[inorder[i] + 3000] = i;
        
    return buildTreeUtil(postorder, &pIdx, 0, postorderSize - 1, inMap);
}