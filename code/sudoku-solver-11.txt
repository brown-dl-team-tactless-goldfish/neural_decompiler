#define UNASSIGNED "."

bool findUnassigned(char **board, int *row, int *col);

bool UsedInRow(char **board, int row, int num);

bool UsedInCol(char **board, int col, int num);

bool UsedInBox(char **board, int boxStartRow, int boxStartCol, int num);

bool IsSafe(char **board, int row, int col, int num);

bool findUnassigned(char **board, int *row, int *col){
    for (int i = 0; i < 9; i++){
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == '.') {
                *row = i;
                *col = j;
                return true;                
            }
        }
    }
    return false;
}

bool UsedInRow(char **board, int row, int num) {
    for (int i = 0; i < 9; i++) {
        if (board[row][i] - '0' == num) {
            return true;
        }
    }
    return false;
}

bool UsedInCol(char **board, int col, int num) {
    for (int i = 0; i < 9; i++) {
        if (board[i][col] - '0' == num)
            return true;
    }
    return false;
}

bool UsedInBox(char **board, int boxStartRow, int boxStartCol, int num) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[boxStartRow+i][boxStartCol+j] - '0' == num)
                return true;
        }
    }
    return false;
}


bool IsSafe(char **board, int row, int col, int num) {
    if ((board[row][col] == '.') 
        && (!UsedInRow(board,  row, num)) 
        && (!UsedInCol(board, col, num))
        && (!UsedInBox(board, row - row%3, col - col%3, num))) {
        return true;
    }
    return false;
}

int helper(char** board){
    int row, col, num;
    
    if (!findUnassigned(board, &row, &col))
        return true;
    
    
    for (num = 1; num <= 9; num++) {
        if (IsSafe(board, row, col, num)) {
            board[row][col] = num+'0';
            if (helper(board))
                return true;
            
            board[row][col] = '.';
        }
    }
//    printf("backtracking \n");
    return false;
}

void solveSudoku(char** board, int boardSize, int* boardColSize){
    helper(board);
}
