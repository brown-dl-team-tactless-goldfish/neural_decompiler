class Solution {
public:
    bool price(string &token, double &n) {
        if(token.empty()) return false;
        if(token[0] != '$') return false;
        bool dot = false;
        for(int i = 1; i < token.size(); i++) {
            if(token[i] == '.') {
                if(dot) return false;
                else dot = true;
                continue;
            }
            if(token[i] < '0' || token[i] > '9') return false;
        }
        
        std::stringstream ss(token.substr(1));
        ss >> n;
        if (ss.fail()) {
            return false;
        }
        
        return true;
    }
    
    double getnewprice(double n, int discount) {
        return n - n*discount/100.00;
    }
    string discountPrices(string sentence, int discount) {
        stringstream ss(sentence);
        string ret, token;
        while(getline(ss, token, ' ')) {
            double n;
            if(price(token, n)) {
                double newp = getnewprice(n, discount);
                std::ostringstream out;
                out.precision(2);
                out << std::fixed << newp;
                if(!ret.empty()) ret += " ";
                ret += "$" + out.str();
            } else {
                if(!ret.empty()) ret += " ";
                ret += token;
            }
        }
        return ret;
    }
};