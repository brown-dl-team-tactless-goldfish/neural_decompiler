bool solve(vector<int>& greater, vector<int>& lesser, int i, int n, bool even){
        if(i == n-1) return true;
        if(i == -1) return false;
        int nxt;
        if(even)
            nxt = lesser[i];
        else
            nxt = greater[i];
        return solve(greater, lesser, nxt, n, !even);   
    }
    int oddEvenJumps(vector<int>& A) {
        int n = A.size();
        vector<int> greater(n, -1), lesser(n, -1);
        map<int, vector<int>> s1, s2;
        for(int i=n-1; i>=0; i--){     //stores the least element greater than or equal to the current element
            int num = A[i];
            auto it = s1.lower_bound(num);
            if(it == s1.end()){
                s1[num].push_back(i);
                continue;
            }
            greater[i] = (*it).second.back();
            s1[num].push_back(i);
        }
        for(int& i: A)
            i *= -1;
        for(int i=n-1; i>=0; i--){   //stores the maximum element which is lesser than or equal to the current number
            int num = A[i];
            auto it = s2.lower_bound(num);
            if(it == s2.end()){
                s2[num].push_back(i);
                continue;
            }
            lesser[i] = (*it).second.back();
            s2[num].push_back(i);
        }
        int ans = 0;
        for(int i=0; i<n; i++){
            if(solve(greater, lesser, i, n, false))
                ans++;
        }
        return ans;
    }
	```