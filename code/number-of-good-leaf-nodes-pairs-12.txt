/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int ret = 0 ;
    int distance ;
    vector<int> dfs(TreeNode* root){
        vector<int>hight(distance) ;
        if(root == NULL)
            return hight ;
        if(root->left == NULL && root->right == NULL){
            hight[1] = 1 ;
            return hight ;
        }
        auto leftHight = dfs(root->left) ;
        auto rightHight = dfs(root->right) ;
        for(int l = 1; l < distance; l++){
            for(int r = 1; r+l <= distance; r++){
                ret += leftHight[l] * rightHight[r] ;
            }
        }
        
        for(int i = 1; i < distance - 1; i++){
            hight[i+1] = leftHight[i] + rightHight[i] ;
        }
        return hight ;
    }
public:
    int countPairs(TreeNode* root, int distance) {
        if(distance == 1)
            return 0 ;
        this->distance = distance ;
        dfs(root) ;
        return ret ;
    }
};