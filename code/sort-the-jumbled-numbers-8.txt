class Solution {
public:
    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {
        auto func = [&mapping](int a) -> int {
            if(!a)
                return mapping[0];
            int res = 0;
            int mult = 1;
            while(a) {
                int last = a%10;
                a = a/10;
                res = mult*mapping[last]+res;
                mult = 10*mult;
            }
            return res;
        };
        std::stable_sort(nums.begin(), nums.end(), [func](int a, int b) {
            int c = func(a);
            int d = func(b);
            return c < d;
        });
        return nums;
    }