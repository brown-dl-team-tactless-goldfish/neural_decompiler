class Solution {
public:
    int mx;
    int res;
    int n;
    void solve(vector<int>& nums, int i, int oR){
        //base case
        if(i==n){
            if(oR == mx) res++;
            return;
        }
        //recursive case
        solve(nums, i+1, oR|nums[i]);
        solve(nums, i+1, oR);
        return;
    }
    int countMaxOrSubsets(vector<int>& nums) {
        // int n=nums.size();
        // int a=0,mx=0;
        // for(int &x:nums) mx|=x;
        // // //subset generation using bitmask
        // int res = 0;
        // int s_ct=(1<<n);//no of subsets
        // for(int i=0;i<s_ct;i++){
        //     int oR=0;
        //     for(int j=0;j<n;j++){
        //         if(i&(1<<j))//means bit is set
        //             oR|=nums[j];
        //     }
        //     if(mx == oR) res++;   
        // }
        // return res;
        mx = 0;
        res = 0;
        n = nums.size();
        for(int &x:nums) mx|=x;
        solve(nums, 0, 0);
        return res;
    }
};