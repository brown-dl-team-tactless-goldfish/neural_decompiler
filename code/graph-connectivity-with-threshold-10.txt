class Solution {
public:
    vector<int> parent;
    vector<int> rank;
    
    int find(int x){
        if(parent[x]==x) return x;
        return parent[x] = find(parent[x]);
    }
    
    void unionDSU(int a, int b){
        int x=find(a), y=find(b);
        if(x==y) return;
        if(rank[x]>rank[y]) parent[y]=x;
        else if(rank[y]>rank[x]) parent[x]=y;
        else{
            parent[x]=y;
            rank[y]++;
        }
    }
    
    vector<bool> areConnected(int n, int threshold, vector<vector<int>>& queries) {
        parent.resize(n+1);
        for(int i=0; i<=n; ++i) parent[i]=i;
        rank.resize(n+1,1);
        for(int i=0; i<=n; ++i){
            for(int j=1; j<=sqrt(i); ++j){
                if(i%j==0){ 
                    if(j>threshold) unionDSU(i,j);
                    if((i/j)>threshold) unionDSU(i,i/j);
                }
            }
        }
        
        vector<bool> ans;
        for(int i=0; i<queries.size(); ++i){
            if(find(queries[i][0]) == find(queries[i][1])) ans.push_back(true);
            else ans.push_back(false);
        }
        return ans;
    }
};