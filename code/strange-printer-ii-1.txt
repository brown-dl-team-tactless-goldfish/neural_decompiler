class Solution {
    bool solve(vector<vector<int>> &targetGrid, map<int, vector<int>> &dp) {
        if (dp.size() == 0) return true;
        vector<int> good;
        for (auto it = dp.begin(); it != dp.end(); ++it) {
            bool tmp = false;
            for (int i = it->second[0]; i <= it->second[2]; ++i) {
                for (int j = it->second[1]; j <= it->second[3]; ++j) {
                    if (targetGrid[i][j] != it->first && targetGrid[i][j] != -1) {
                        tmp = true;
                        break;
                    }
                }
                if (tmp) break;
            }
            if (!tmp) {
                for (int i = it->second[0]; i <= it->second[2]; ++i) {
                    for (int j = it->second[1]; j <= it->second[3]; ++j) {
                        targetGrid[i][j] = -1;
                    }
                }
                good.push_back(it->first);
            }
        }
        if (good.size() == 0) return false;
        for (int i = 0; i < good.size(); ++i) {
            dp.erase(good[i]);
        }
        return solve(targetGrid, dp);
    }

public:
    bool isPrintable(vector<vector<int>> &targetGrid) {
        map<int, vector<int>> dp;
        int n = targetGrid.size(), m = targetGrid[0].size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                int c = targetGrid[i][j];
                if (dp.find(c) != dp.end()) {
                    dp[c][0] = min(dp[c][0], i);
                    dp[c][1] = min(dp[c][1], j);
                    dp[c][2] = max(dp[c][2], i);
                    dp[c][3] = max(dp[c][3], j);
                } else {
                    dp[c] = {i, j, i, j};
                }
            }
        }
        return solve(targetGrid, dp);
    }
};