class Solution {
public:
    bool checkEights(int r, int c, int ir, int ic) {
        if (ir == r - 1 && ic == c - 2)
            return true;
        if (ir == r - 2 && ic == c - 1)
            return true;
        if (ir == r - 2 && ic == c + 1)
            return true;
        if (ir == r - 1 && ic == c + 2)
            return true;
        if (ir == r + 1 && ic == c - 2)
            return true;
        if (ir == r + 2 && ic == c - 1)
            return true;
        if (ir == r + 2 && ic == c + 1)
            return true;
        if (ir == r + 1 && ic == c + 2)
            return true;
        return false;
    }
    bool checkValidGrid(vector<vector<int>>& grid) {
        // check 8 directions
        int row = grid.size();
        int col = grid[0].size();
        map<int, pair<int, int>> coords;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                coords.insert({grid[i][j], make_pair(i, j)});
            }
        }
    
        int r = 0;
        int c = 0;
        for (map<int, pair<int, int>>::iterator i = coords.begin(); i != coords.end(); i++)
        {
            int ir = i->second.first;
            int ic = i->second.second;
            if (i == coords.begin()) {
                if (!(ir == 0 && ic == 0)) {
                    return false;
                }
            }
            if (r == 0 && c == 0) {
                r = ir;
                c = ic;
                continue;
            }
            if (checkEights(r, c, ir, ic)) {
                r = ir;
                c = ic;
            } else {
                return false;
            }
            
        }
        return true;
    }
};