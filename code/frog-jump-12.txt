class Solution {
public:
    unordered_set<int> set;
    int last;
    unordered_map<string, bool> memo;
    
    bool canCross(vector<int>& stones) {
        for (auto s: stones){
            set.insert(s);
        }
        last = stones.back();
        return dp(1, 1);
    }
    
    string getKey(int a, int b){
        return to_string(a) + "#" + to_string(b);
    }
    
    bool dp(int stone, int steps){
        if (stone == last) return true;
        if (stone > last or steps == 0) return false;
        if (!set.count(stone)) return false;
        string p = getKey(stone, steps);
        if (!memo.count(p)){
            memo[p] = dp(stone + steps + 1, steps + 1) or
                dp(stone + steps - 1, steps - 1) or
                dp(stone + steps, steps);
        }
        return memo[p];
    }
};