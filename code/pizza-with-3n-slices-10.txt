class Solution {
public:
    int maxSizeSlices(vector<int>& s) {
        int len = s.size();
        int dp[502][502] = {};
        for(int i = len-1;i>=0;i--){
            for(int cnt = 0;cnt+i<len;cnt++){
                int j = i + cnt;
                dp[i][j] = -1e5;
                if(j-i<2||(j-i+1)%3!=0)
                    continue;
                for(int k = i+1;k<j;k++){
                    dp[i][j] = max(dp[i][j],s[k]+dp[i+1][k-1]+dp[k+1][j-1]);
                }
                for(int k = i+1;k<j;k++)
                    dp[i][j] = max(dp[i][j],dp[i][k]+dp[k+1][j]);
            }
        }
        int ans = dp[0][len-1];
        for(int i = 0;i<len;i++){
            for(int j = i+1;j<len;j++){
               if((j-i-1)%3==0&&(len-j-1)%3==0)
               for(int k = 0;k<i;k++){
                    int x = 0;
                    if(k-1>=0)
                        x += dp[0][k-1];
                    x += dp[k+1][i-1];
                    x += dp[i+1][j-1];
                   if(j+1<len)
                    x += dp[j+1][len-1];
                   ans = max(ans,x+s[k]);
               }
               if((i)%3==0&&(len-j-1)%3==0)
               for(int k = i+1;k<j;k++){
                    int x = 0;
                    if(i-1>=0)
                        x += dp[0][i-1];
                    x += dp[i+1][k-1];
                    x += dp[k+1][j-1];
                   if(j+1<len)
                    x += dp[j+1][len-1];
                   ans = max(ans,x+s[k]);
               }
               if((j-i-1)%3==0&&(i)%3==0)
               for(int k = j+1;k<len;k++){
                    int x = 0;
                    if(i-1>=0)
                        x += dp[0][i-1];
                    x += dp[i+1][j-1];
                   if(j+1<len)
                    x += dp[j+1][k-1];
                   if(k+1<len)
                    x += dp[k+1][len-1];
                   ans = max(ans,x+s[k]);
                }
            }
        }
        return ans;
    }
};