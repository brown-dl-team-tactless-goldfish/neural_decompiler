class Solution {
public:
    double minAreaFreeRect(vector<vector<int>>& points) {
        int n = points.size();
        unordered_map<long int, vector<pair<int, int>>> m;
        for (int i = 0; i < n-1; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                long int tmp = (points[i][0] + points[j][0]) * 80001.0 + (points[i][1] + points[j][1]);
                m[tmp].push_back(pair(i, j));
            }
        }
        double ret = 2e9;
        for (auto it = m.begin(); it != m.end(); it++)
        {
            if (it->second.size() == 1) continue;
            for (int i = 0; i < it->second.size()-1; i++)
            {
                for (int j = i + 1; j < it->second.size(); j++)
                {
                    int dx1 = points[it->second[i].first][0] - points[it->second[j].first][0];
                    int dy1 = points[it->second[i].first][1] - points[it->second[j].first][1];
                    int dx2 = points[it->second[i].first][0] - points[it->second[j].second][0];
                    int dy2 = points[it->second[i].first][1] - points[it->second[j].second][1];
                    if (dx1 * dx2 + dy1 * dy2 != 0) continue;
                    ret = min(ret, sqrt(dx1 * dx1 + dy1 * dy1) * sqrt(dx2 * dx2 + dy2 * dy2));
                }
            }
        }
        return ret == 2e9 ? 0 : ret;
    }
};