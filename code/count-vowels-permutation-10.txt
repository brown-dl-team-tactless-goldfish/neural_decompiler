class Solution {
    int mod = 1e9 + 7;
    long long dfs(int n, vector<vector<int>> &dp, int idx, int alphabet)
    {
        if(idx == n)
            return 1;
        if(dp[idx][alphabet] != -1)
            return dp[idx][alphabet];
        int ans = 0;
        if(alphabet == 0)
        {
            ans = dfs(n, dp, idx+1, 1)%mod;
        }
        else if(alphabet == 1)
        {
            ans = (dfs(n, dp, idx+1, 0)%mod + dfs(n, dp, idx+1, 2)%mod)%mod;   
        }
        else if(alphabet == 2)
        {
            for(int i = 0; i < 5; i++)
            {
                if(i == alphabet) continue;
                ans = (ans%mod + dfs(n, dp, idx+1, i)%mod)%mod;   
            }
        }
        else if(alphabet == 3)
        {
            ans = (dfs(n, dp, idx+1, 2)%mod + dfs(n, dp, idx+1, 4)%mod)%mod;
        }
        else if(alphabet == 4)
        {
            ans = dfs(n, dp, idx+1, 0)%mod;
        }
        return dp[idx][alphabet] = ans;
    }
public:
    int countVowelPermutation(int n) {
        vector<vector<int>> dp(n+1, vector<int> (6,-1));
        long long val = (dfs(n, dp, 1, 0)%mod + dfs(n, dp, 1, 1)%mod + dfs(n, dp, 1, 2)%mod + dfs(n, dp, 1, 3)%mod + dfs(n, dp, 1, 4)%mod)%mod;
        return val; 
    }
};