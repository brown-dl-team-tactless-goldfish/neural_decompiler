class Solution {
public:
    int maximumWhiteTiles(vector<vector<int>>& tiles, int carpetLen) {
        sort(tiles.begin(),tiles.end());
        vector<int> sums(tiles.size());
        int total = 0;
        for(int i = 0;i<tiles.size();i++) {
            auto& x = tiles[i];
            sums[i] = total; 
            total += x[1] - x[0] + 1; 
        }
        int ret = 0; 
        for(int i = 0;i<tiles.size();i++) {
            auto& x = tiles[i];
            int end = x[0] + carpetLen - 1; 
            auto ptr = upper_bound(tiles.begin()+i,tiles.end(), end , [](int a, auto& e) {
                return a < e[0]; 
            });
            int j = ptr - tiles.begin() - 1; 
            auto t = sums[j] - sums[i];
            t += min(end, tiles[j][1]) - tiles[j][0] + 1; 
            ret = max(ret, t);
        }
        return ret; 
    }
};