class Solution {
public:
    int minJumps(vector<int>& arr) 
    {
        if(arr.size() == 1)
            return 0;
        
        unordered_map<int, vector<int>> index;
        vector<int> visited(arr.size(), false);
        
        for(int i = 0 ; i < arr.size() ; i++)
            index[arr[i]].push_back(i);
        
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int c = 0;
        
        while(!q.empty())
        {
            c++;
            int l = q.size();
            
            while(l--)
            {
                int v = q.front();
                q.pop();
                if(v == arr.size() - 1)
                    return c;
                
                if(v + 1 < arr.size() and !visited[v + 1])
                {                    
                    q.push(v + 1);
                    visited[v + 1] = true;
                 
                    if(v + 1 == arr.size() - 1)
                        return c;
                }
                if(v - 1 >= 0 and !visited[v - 1])
                {
                    q.push(v - 1);
                    visited[v - 1] = true;
                }
                 
                for(auto &u : index[arr[v]])
                {
                    if(!visited[u])
                    {
                        q.push(u);
                        visited[u] = true;
                        if(u == arr.size() - 1)
                            return c;
                    }
                }
                index[arr[v]].clear();
            }
        }
        return c;
    }
};