int cmp(const void *a, const void *b)
{
    int **a1 = (int **)a;
    int **b1 = (int **)b;
    
    return ((a1[0][0] - a1[0][1]) - (b1[0][0] - b1[0][1]));
}

int cmp1(const void *a, const void *b)
{
    int **a1 = (int **)a;
    int **b1 = (int **)b;
    
    return ((a1[0][1] - a1[0][0]) - (b1[0][1] - b1[0][0]));
}

int twoCitySchedCost(int** costs, int costsSize, int* costsColSize){
    int **a = (int **)malloc(sizeof(int *) * costsSize);
    int **b = (int **)malloc(sizeof(int *) * costsSize);
    for (int i=0; i<costsSize; i++) {
        a[i] = (int *)malloc(sizeof(int) * 2);
        b[i] = (int *)malloc(sizeof(int) * 2);
        memset(a[i], 0, sizeof(int) * 2);
        memset(b[i], 0, sizeof(int) * 2);
    }
    
    int a_pos = 0, b_pos = 0;
    for (int i=0; i<costsSize; i++) {
        if (costs[i][0] < costs[i][1]) {
            a[a_pos][0] = costs[i][0];
            a[a_pos][1] = costs[i][1];
            a_pos++;
        } else {
            b[b_pos][0] = costs[i][0];
            b[b_pos][1] = costs[i][1];
            b_pos++;
        }
    }
    int total = 0;
    if (a_pos == b_pos) {
        for (int i=0; i<a_pos; i++) {
            total += a[i][0];
        }
        for (int i=0; i<b_pos; i++) {
            total += b[i][1];
        }
        return total;
    }
    total = 0;
    if (a_pos < b_pos) {
        qsort(b, b_pos, sizeof(b[0]), cmp);
        for (int i=0; i<(b_pos-a_pos)/2; i++) {
            total += b[i][0];
        }
        for (int i=(b_pos-a_pos)/2; i<b_pos; i++) {
            total += b[i][1];
        }
        for (int i=0; i<a_pos; i++) {
            total += a[i][0];
        }
        return total;
    }
    total = 0;
    if (a_pos > b_pos) {
        qsort(a, a_pos, sizeof(a[0]), cmp1);
        for (int i=0; i<(a_pos-b_pos)/2; i++) {
            total += a[i][1];
        }
        for (int i=(a_pos-b_pos)/2; i<a_pos; i++) {
            total += a[i][0];
        }
        for (int i=0; i<b_pos; i++) {
            total += b[i][1];
        }
        return total;
    }
    return total;
}