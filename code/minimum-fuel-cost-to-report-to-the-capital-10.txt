class Solution {
public:
    long long res = 0;
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        unordered_map<int, unordered_set<int>> map;
        for(auto& ele: roads){
            map[ele[0]].insert(ele[1]);
            map[ele[1]].insert(ele[0]);
        }   

        count_num_nodes(map, 0, -1, seats);

        return res;
    }

    long long count_num_nodes(unordered_map<int, unordered_set<int>>& map, int cur_id, int parent_id, int seats){
        if(map[cur_id].size() == 1 && cur_id != 0){
            res++;
            return 1;
        }

        long long num = 1;
        for(int child_id: map[cur_id]){
            if(child_id != parent_id){
                long long temp = count_num_nodes(map, child_id, cur_id, seats);
                num += temp;
            }
        }

        if(cur_id!=0){
            res += ((num%seats == 0)?((long long)num/seats):(num/seats+1));
        }

        return num;

    }

};