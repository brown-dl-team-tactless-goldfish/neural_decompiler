struct list{
    int start;
    int end;
    int point;
};

int max (int a, int b){
    return a > b ? a : b;
}

int next (int now, int finishtime, struct list* book, int startTimeSize){
    for (int i = now+1 ; i < startTimeSize ; i++){
        if (finishtime <= book[i].start){
            return i;
        }
    }
    return startTimeSize;
}

int comp(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

int jobScheduling(int* startTime, int startTimeSize, int* endTime, int endTimeSize, int* profit, int profitSize){
    int start[50001];
    start[startTimeSize] = 0;
    struct list* book = malloc(sizeof(struct list)*startTimeSize);
    for (int i = 0 ; i < startTimeSize ; i++){
        book[i].start = startTime[i];
        book[i].end = endTime[i];
        book[i].point = profit[i];
    } 
    qsort(book, startTimeSize, sizeof(struct list), comp);
    for (int i = startTimeSize-1 ; i >= 0 ; i--){
        start[i] = max(book[i].point + start[next(i, book[i].end, book, startTimeSize)], start[i+1]);
    }
    free(book); 
    return start[0];
}