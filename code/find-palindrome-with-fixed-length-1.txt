using LL = long long ;
class Solution {
public:
    LL flip(LL val){
        LL ret = 0 ;
        while(val){
            ret = ret*10 + val%10 ;
            val /= 10 ;
        }
        return ret ;
    }
    
    LL getKth(int digit, int k){
        LL ret ;
        if(k > 9*pow(10, digit-1))
            return -1 ;
        return pow(10, digit-1) + k - 1;
    }
    vector<long long> kthPalindrome(vector<int>& queries, int intLength) {
        vector<LL>ret ;
        for(int k : queries){
            if(intLength % 2 == 0)
            {
                int d = intLength/2 ;
                LL a = getKth(d, k) ;
                if(a == -1)
                {
                    ret.push_back(-1) ;
                    continue ;
                }
                LL b = flip(a) ;
                ret.push_back( a*pow(10, d) + b) ;
            }
            else
            {
                int d = intLength/2 ;
                LL a = getKth(d+1, k) ;
                if(a == -1)
                {
                    ret.push_back(-1) ;
                    continue ;
                }
                LL c = a%10 ;
                a /= 10 ;
                LL b = flip(a) ;
                ret.push_back( a*pow(10, d+1) + c*pow(10, d) + b ) ;
            }
        }
        return ret ;
    }
};