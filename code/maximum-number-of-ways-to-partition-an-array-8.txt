class Solution {
public:
    int waysToPartition(vector<int>& nums, int k) {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);
        int n=nums.size(), ans;
        long tot=0, sum=0, d;
        unordered_map<long,int> dif, dif1;//dif: (0,1), ... (0,i-1)  | dif1: (0,i), ... (0,n-1)
        for(int i=0; i<n; ++i) {
            tot+=nums[i];
        }
        for(int i=0; i<n-1; ++i) {
            sum+=nums[i];
            ++dif[sum+sum-tot];
        }
        //i=n-1
        ans=max(dif[0], dif[k-nums[n-1]]);
        sum=tot-nums[n-1];
        for(int i=n-2; i>0; --i) {            
            d=sum+sum-tot;            
            --dif[d];  
            ++dif1[d];
            d=k-nums[i];
            if(d!=0) {
                ans=max(ans, dif[d]+dif1[-d]);
            }
            sum-=nums[i];
        }
        //i=0
        ++dif1[sum+sum-tot];
        ans=max(ans, dif1[sum-k]);
        return ans;
    }
};