typedef struct node {
    int t;
    struct node *next;
};

typedef struct {
    struct node *head, *tail;
    int count;
} RecentCounter;

RecentCounter* recentCounterCreate() {
    RecentCounter *obj = malloc(sizeof(*obj));
    obj->head = NULL;
    obj->tail = NULL;
    obj->count = 0;
    return obj;
}

int recentCounterPing(RecentCounter* obj, int t) {
    struct node *p = obj->head, *pn;
    while (p && t - p->t > 3000) {
        pn = p->next;
        free(p);
        p = pn;
        obj->count--;
    }
    obj->head = p;
    
    struct node *n = malloc(sizeof(*n));
    n->t = t;
    n->next = NULL;
    if (p) {
        obj->tail->next = n;
    } else {
        obj->head = n;
    }
    obj->tail = n;
    obj->count++;
    
    return obj->count;
}

void recentCounterFree(RecentCounter* obj) {
    struct node *p = obj->head, *pn;
    while (p) {
        pn = p->next;
        free(p);
        p = pn;
    }
    free(obj);
}