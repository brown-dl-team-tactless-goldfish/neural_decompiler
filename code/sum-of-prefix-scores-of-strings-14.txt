unordered_map<string, int> memo;

class TrieNode {
    public:
        TrieNode() {
            prefixCount = 0;
            for(int i = 0; i < 26; i++) {
                children[i] = NULL;
            }
        }
        int prefixCount;
        TrieNode *children[26]; // using vector here gives TLE...
};

class Trie {
    public:
        TrieNode *root;
        
        Trie() {
            root = new TrieNode();
        }
        
        void addWord(string &word) {
            TrieNode *cur = root;
            int n = word.size();
            for(int i = 0; i < n; i++) {
                char c = word[i];
                int idx = c - 'a';
                if(cur->children[idx] == NULL) {
                    cur->children[idx] = new TrieNode();
                }
                cur = cur->children[idx];
                cur->prefixCount++;
            }
        }

        int getPrefixScore(string &word) {
            if(memo[word] > 0) {
                return memo[word];
            }
            int ans = 0;
            TrieNode *cur = root;
            int n = word.size();
            for(int i = 0; i < n; i++) {
                char c = word[i];
                int idx = c - 'a';
                cur = cur->children[idx];
                ans += cur->prefixCount;
            }
            return memo[word] = ans;
        }
};

class Solution {
public:
    vector<int> sumPrefixScores(vector<string>& words) {
        Trie *trie = new Trie();
        int n = words.size();
        for(int i = 0; i < n; i++) {
            trie->addWord(words[i]);
        }

        vector<int> ans;
        for(int i = 0; i < n; i++) {
            ans.push_back(trie->getPrefixScore(words[i]));
        }

        return ans;
    }
};