void moveTo(int si, int sj, int di, int dj, string &ans) {
      // find manhatten length we talked about earlier 
	  int x = di - si;
      int y = dj - sj;
	  
      while(x < 0) {
            ans.push_back('L');
            x += 1;
      }
      while(y > 0) {
            ans.push_back('D');
            y -= 1;
      }
      while(y < 0) {
            ans.push_back('U');
            y += 1;
      }
      while(x > 0) {
            ans.push_back('R');
            x -= 1;
      }
}

string alphabetBoardPath(string target) {
      map<char, pair<int, int>> mp;
      int cnt = 0, i = 0;
	  
	  // store the positions in map
      while (cnt < 26){
            for(int j=0; j<5 && cnt<26; j++) {
                  char c = 'a' + cnt;
                  mp[c] = {j, i};
                  cnt += 1;
            }
            i += 1;
      }
      
      string ans = "";
      int si = 0, sj = 0;
	  
	  // si , sj - source index 
	  // di, dj - destination index 

      for(auto c: target) {
            int di = mp[c].first;
            int dj = mp[c].second;
            
			// move to destination 
            moveTo(si, sj, di, dj, ans);
			
			// we are at destination 
            ans.push_back('!');
			
			// new source is destination itself 
            si = di;
            sj = dj;            
      }

      return ans;
}