int maxSumSubmatrix(int** matrix, int matrixSize, int* matrixColSize, int k){
    int curMax = INT_MIN;
    int ncol = matrixColSize[0];
    int nrow = matrixSize;
    int *rowsums = malloc(nrow * sizeof(int));
    int *cumsums = malloc((nrow+1) * sizeof(int));
    int cursum, target;
    bool found;
    
    for (int leftcol=0; leftcol<ncol; leftcol++){
        memset(rowsums, 0, nrow*sizeof(*rowsums));
        
        for (int rightcol=leftcol; rightcol<ncol; rightcol++){
            memset(cumsums, 0, (nrow+1)*sizeof(*cumsums));
            cursum = 0;
            
            for (int iter=0; iter<nrow; iter++){
                rowsums[iter] += matrix[iter][rightcol];
                
                cursum += rowsums[iter];
                found = false;
                target = INT_MAX;
                for ( int fi=0; fi<=(iter+1); fi++){
                    if (cumsums[fi] < target && cumsums[fi] >= cursum-k){
                        target = cumsums[fi];
                        found = true;
                    }
                }
                
                if (found && (cursum-target) > curMax) curMax = cursum-target;
                
                cumsums[iter+1] = cursum;
            }
        }
    }
    
    return(curMax);
}