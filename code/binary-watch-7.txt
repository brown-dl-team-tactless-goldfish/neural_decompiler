/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
void watchDFS(char **watchArr, int*returnSize, int num, int time[], int timeindex, int hr, int min){
    
    if(hr>11 || min >59)
        return;
    
    if(0 == num){
        watchArr[*returnSize] = (char *)calloc(6 ,sizeof(char));
        sprintf(watchArr[*returnSize], "%d:%02d", hr, min);
        (*returnSize)++;
        return;
    }
    
    for(int curindex = timeindex; curindex < 10; curindex++){
        int newhr = curindex < 6 ? hr : time[curindex] + hr;
        int newmin = curindex < 6 ? time[curindex] + min : min;
        watchDFS(watchArr, returnSize, num - 1, time, curindex + 1, newhr, newmin);        
    }
    
}

char** readBinaryWatch(int num, int* returnSize) {
    
    int time[10] = {1,2,4,8,16,32,1,2,4,8};
    char ** watchArr = (char **)calloc(720, sizeof(char *)); //at most 12*60 
    int timeindex = 0, hr = 0, min = 0;
    * returnSize = 0;
    watchDFS(watchArr, returnSize, num, time, timeindex, hr, min);
    
    return watchArr;
    
}