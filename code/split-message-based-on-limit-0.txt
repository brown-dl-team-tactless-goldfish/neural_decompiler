class Solution {
public:
    int getLength(int n) {
        return to_string(n).size();
    }
    
    int getPossibleB(const string &message, int &limit) {
        int n = message.size();
        for (int b = 1; b <= 4; ++b) {
            bool isPossible = true;
            int a = 1;
            for (int j = 0; j < n; ) {
                if (getLength(a) > b) {
                    isPossible = false;
                    break;
                }
                int suffix = 1 + getLength(a) + 1 + b + 1; 
                int rem = limit - suffix;
                j += rem;
                ++a;
            }
            if (isPossible) return a - 1;
        }
        return -1;
    }
    
    vector<string> getSplitString(const string &message, int &limit, int &b) {
        int n = message.size();
        int a = 1;
        vector<string> res;
        string bstring = to_string(b);
        for (int j = 0; j < n; ) {
            string suffix = '<' + to_string(a) + '/' + bstring + '>';
            int rem = limit - suffix.size();
            ++a;
            res.push_back(message.substr(j, rem) + suffix);
            j += rem;
        }
        return res;
    }
    
    vector<string> splitMessage(string message, int limit) {
        int b = getPossibleB(message, limit);
        if (b == -1) return {};
        return getSplitString(message, limit, b);
    }
};