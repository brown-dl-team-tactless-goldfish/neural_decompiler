int cmpfunc (const int* a, const int* b)
{
    return (*a > *b);
}

int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {
    // qsort the two arraies
    qsort(nums1, nums1Size, sizeof(int), cmpfunc);
    qsort(nums2, nums2Size, sizeof(int), cmpfunc);
    // Malloc the ans arrary 
    int* ans = malloc(sizeof(int));
    int ansCount = 0;
    // Define the which arrary to start first
    int pingPong = nums1[0] <= nums2[0];
    
    int i = 0; 
    int j = 0;
    
    while(i < nums1Size && j < nums2Size)
    {
        if (pingPong)
        {
            // Find next element in nums1 until is bigger than current nums2 element
            while(nums1[i] <= nums2[j] && i < nums1Size)
            {
                if (nums1[i] == nums2[j])
                {
                    ans = realloc(ans, sizeof(int)*(ansCount+1));
                    ans[ansCount++] = nums2[j];  
                    j++;
                }
                i++;
            }
            // Alternating the array 
            pingPong = !pingPong;
        }
        else
        {
            while(nums1[i] >= nums2[j] && j < nums2Size)
            {
                if (nums1[i] == nums2[j])
                {
                    ans = realloc(ans, sizeof(int)*(ansCount+1));
                    ans[ansCount++] = nums1[i];
                    i++;
                }
                j++;
            }
            pingPong = !pingPong;
        }
    }
    *returnSize = ansCount;
    return ans;
}