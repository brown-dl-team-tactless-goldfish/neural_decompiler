

int takeCharacters(string s, int k) {
        int a = 0, b = 0, c = 0;

        // make a check for base case i.e, if we don't have enough characters to match k length
        for(auto it: s){
            if(it == 'a'){
                a++;
            }
            else if(it == 'b'){
              b++;
            }
            else{
                c++;
            }
        }
        // return -1 if not enough count of at least one variable
        if(a < k || b < k || c < k){
            return -1;
        }

        
        //Now comes the logic instead of finding the strings from both ends having at least k a,b,c
        // we find the substring which have atmost [character occurences - k] a,b,c
        // Now we have to slide this string window to get the max length of such a string
        // total length - length of this window will be our answer 

        //we calculate the length the total count of a,b,c in the string s
        // then we subtract this respective count with k i.e, our windowCountA = a-k, windowCountB = b-k, windowCountC = c-k
        // then we try to find a window which have atmost windowCountA a's, windowCountB b's and windowCountC c's
        
        int n = s.length();
        a = a-k;
        b = b-k;
        c = c-k;
        int i=0,j=0;
        int mx = 0;
        int windowCountA=0,windowCountB=0,windowCountC=0;
        while(j<n){
            if(s[j] == 'a'){
                windowCountA++;
            }
            else if(s[j] == 'b'){
              windowCountB++;
            }
            else{
                windowCountC++;
            }

            // if any character exceeds the maximum limit we reduce the window size until the count is under limit
            while(a < windowCountA || b < windowCountB || c < windowCountC){
                if(s[i] == 'a'){
                    windowCountA--;
                }
                else if(s[i] == 'b'){
                  windowCountB--;
                }
                else{
                    windowCountC--;
                }
                i++;
            }
            mx = max(mx,j-i+1);
            j++;
        }
        return n - mx;
    }