struct hash_pair {
    template <class T1, class T2>
    size_t operator()(const pair<T1, T2>& p) const
    {
        auto hash1 = hash<T1>{}(p.first);
        auto hash2 = hash<T2>{}(p.second);
 
        if (hash1 != hash2) {
            return hash1 ^ hash2;             
        }
         
        // If hash1 == hash2, their XOR is zero.
          return hash1;
    }
};
class MovieRentingSystem {
public:
    // this contain movie and it's prices with shopid
    map<int,set<pair<int,int>>> m; // for every movie this is for search
    // this contain price then shopid then movie
    set<pair<int,pair<int,int>>> s; // for report of rented movies as we will remove end movies if we get size more than 5
    unordered_map<pair<int,int>,int,hash_pair> um;
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        for(auto v: entries){
            int sh = v[0] , mo = v[1] , pr = v[2];
            m[mo].insert({pr,sh});
            um[{mo,sh}] = pr;
        }
    }
    
    vector<int> search(int mo) {
        vector<int> ans;
        for(auto x: m[mo]){
            ans.push_back(x.second);
            if(ans.size()==5) break;
        }
        return ans;
    }
    
    void rent(int shop, int movie){
        int pr = um[{movie,shop}];
        m[movie].erase({pr,shop});
        s.insert({pr,{shop,movie}}); // pr, sh , mo
        // m[movie].erase(it);
    }
    
    void drop(int shop, int movie){
        int pr = um[{movie,shop}];
        m[movie].insert({pr,shop});
        s.erase({pr,{shop,movie}});
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> ans2;
        for(auto x: s){
            int pr = x.first , sh = x.second.first, mo = x.second.second;
            // cout<<pr<<" "<<sh<<" "<<mo<<endl;
            vector<int> t = {sh,mo};
            ans2.push_back(t);
            // cout<<ans2.size()<<endl;
            if(ans2.size() == 5) break;
        }
        return ans2;
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */