/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int dfs(struct TreeNode* root){
    if(!root) return 0;
    return dfs(root->left)+dfs(root->right)+1;
}
struct TreeNode* createnode(int val){
    struct TreeNode *node=(struct TreeNode*)calloc(1,sizeof(struct TreeNode));
    node->val=val;
    node->left=NULL;
    node->right=NULL;
    return node;
}
void inorder(struct TreeNode* root,struct TreeNode** arr,int* idx){
    if(!root) return;
    inorder(root->left,arr,idx);
    arr[(*idx)++]=root;
    inorder(root->right,arr,idx);
}
struct TreeNode * BST(struct TreeNode **arr,int start,int end){
    if(start>end) return NULL;
    int mid=(start+end)/2 ;
    struct TreeNode *root=arr[mid];
    root->left=BST(arr,start,mid-1);
    root->right=BST(arr,mid+1,end); 
    return root;
}
struct TreeNode* balanceBST(struct TreeNode* root){
    if(root->right==root->left || !root) return root;
    int num = dfs(root->right) + dfs(root->left) + 1;
   
    struct TreeNode **arr=(struct TreeNode**)calloc(num,sizeof(struct TreeNode*));
    int idx=0;
    inorder(root,arr,&idx);
    
    root=BST(arr,0,num-1);
    return root;
}
// [9,2,14,1,3,11,15,null,null,null,7,null,12,null,17]