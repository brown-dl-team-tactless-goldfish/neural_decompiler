class Solution {
    private:
        bool isVowel(char ch) {
            return ch == 'a' || ch == 'A' || 
                   ch == 'e' || ch == 'E' || 
                   ch == 'i' || ch == 'I' || 
                   ch == 'o' || ch == 'O' || 
                   ch == 'u' || ch == 'U';
        }
    
        int isMatch(string s1, string s2) {
            const char d = 'A' - 'a';
            int p = 0;
            if (s1.size() != s2.size()) return 3;
            for (int i = 0; i < s1.size(); ++i) {
                if (s1[i] == s2[i]) {
                    p = max(p, 0);
                    continue;
                }
                
                if (s1[i] + 'A' - 'a' == s2[i] || 
                    s1[i] == s2[i] + 'A' - 'a') {
                    p = max(p, 1);
                    continue;
                }
                
                if (isVowel(s1[i]) && isVowel(s2[i])) {
                    p = max(p, 2);
                    continue;
                }
                return 3;
            }
            return p;
        }
    
        string lower(string s) {
            for (auto& c : s) {
                if (isVowel(c)) {
                    c = 'a';
                } else {
                    c = tolower(c);
                }
            }
            return s;
        }
public:
    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries) {
        vector<string> ret;
        unordered_map<string, vector<string>> m;
        for (auto &s : wordlist) {
            m[lower(s)].push_back(s);
        }
        for (auto &s : queries) {
            string add = "";
            int p = 3, tmp;
            for (auto &w : m[lower(s)]) {
                tmp = isMatch(w, s);
                if (tmp == 0) {
                    add = w;
                    p = 0;
                    break;
                }
                if (tmp < p) {
                    add = w;
                    p = tmp;
                }
            }
            ret.push_back(add);
        }
        return ret;
    }
};