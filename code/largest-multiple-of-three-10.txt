class Solution {
public:
	string max_string(string& a, string& b)
	{
		if(a.size() > b.size())
			return a;
		else if(a.size() < b.size())
			return b;
		else
			return max(a, b);
	}

	#define to_char(n) ((char)('0' + (n)))

    string largestMultipleOfThree(vector<int>& digits) 
    {
        vector<string> largest(3);
        vector<string> tmp(3);

        string res;
        int idx = 0;
        for(int i = 0; i < digits.size(); i++) {
        	int r = digits[i] % 3;
        	if(r == 0)
        	    res += to_char(digits[i]);
        	else
        		swap(digits[i], digits[idx++]);
        }

        sort(digits.begin(), digits.begin() + idx);
        for(int i = 0; i < idx; i++)
        {
        	int r = digits[i] % 3;

        	for(int j = 0; j < 3; j++)
        	{
        		int idx = (j * (!largest[j].empty()) + r) % 3;
        		string t = largest[j * (!largest[j].empty())] + to_char(digits[i]);
        		tmp[idx] = max_string(t, largest[idx]);
        	}
        		
        	for(int j = 0; j < 3; j++)
        		largest[j] = max_string(largest[j], tmp[j]);

        }
        
        res += largest[0];
       	sort(res.begin(), res.end(), greater<char>());
       	if(res.empty() || res.front() != '0')
       		return res;
       	else
       		return "0";
    }      
};