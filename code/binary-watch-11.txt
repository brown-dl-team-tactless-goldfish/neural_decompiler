/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

char** result;
int pos;

char* to_str (int h, int m)
{
    char* tim = (char*) malloc (sizeof(char) * 6);
    int i = 1;
    memset (tim, 0, 6);

    if (h < 10)
        tim[0] = h + '0';
    else
    {
        tim[0] = '0' + h/10;
        tim[1] = h % 10 + '0';
        i = 2;
    }
    tim[i] = ':';
    i++;

    tim[i] = m /10 + '0';
    i++;
    tim[i] = m % 10 + '0';
    i++;
    tim[i] = '\0';
    return tim;
}

int get_bitcount (int n, int threshold)
{
    int c;
    for (c = 0; n ; c++)
    {
        n &= n - 1;
        if (c > threshold)
            return c;
    }
    return c;
}

char ** readBinaryWatch(int turnedOn, int* returnSize)
{
    int m;
    pos = 0;
    result = (char**) malloc (sizeof(char*) * 1024);
    for (int h = 0; h < 12; h++)
    {
        m = 0;
        if (get_bitcount (h, turnedOn) > turnedOn)
            continue;
        for (int m = 0; m < 60; m++)
        {
            if (get_bitcount((h << 6) + m, turnedOn) == turnedOn)
            {
                result[pos] = to_str (h, m);
                pos++;
            }
        }
    }
    *returnSize = pos;
    return result;
}