class Solution {
public:
    int largest1BorderedSquare(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<pair<int, int>>> dp(m, vector<pair<int, int>>(n, make_pair(0, 0)));
        int maxi = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0)    continue;
                int r = 0, c = 0;
                maxi = 1;
                for (int k = i; k < m && grid[k][j] == 1; k++)  r++;
                for (int k = j; k < n && grid[i][k] == 1; k++)  c++;
                dp[i][j] = make_pair(r, c);
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0)    continue;
                int r = dp[i][j].first, c = dp[i][j].second, x = min(r, c), mini = INT_MAX;
                while (x > 0) {
                    int I = i + x - 1, J = j + x - 1;
                    mini = min(mini, dp[i][J].first);
                    mini = min(mini, dp[I][j].second);
                    mini = min(mini, x);
                    if (j + mini - 1 == J && i + mini - 1 == I && mini > 1) break;
                    else mini = INT_MAX;
                    --x;
                }
                if (mini <= min(r, c))  maxi = max(maxi, mini);
            }
        }
        
        return pow(maxi, 2);
    }
};