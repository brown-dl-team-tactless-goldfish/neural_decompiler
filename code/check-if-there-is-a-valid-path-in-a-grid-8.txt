class Solution {
public:
    bool getNextStep(vector<vector<int>>& grid, vector<vector<bool>>& visited, int r, int c, int direction){
        // direction: 1 => up, 2 => right, 3 => down, 4 => left
        if(r<0 || r>=grid.size() || c<0 || c>=grid[0].size() || visited[r][c])
            return false;
        // 
        if(direction ==1 && (grid[r][c] == 1 || grid[r][c] == 5 || grid[r][c] == 6 ))
            return false;
        else if(direction == 2 && (grid[r][c] == 2 || grid[r][c] == 4 || grid[r][c] == 6))
            return false;
        else if(direction == 3 && (grid[r][c] == 1 || grid[r][c] == 3 || grid[r][c] == 4))
            return false;
        else if(direction == 4 && (grid[r][c] == 2 || grid[r][c] == 3 || grid[r][c] == 5))
            return false;
        
        if(r == grid.size()-1 && c == grid[0].size()-1)
            return true;
        visited[r][c] = 1;
        switch(grid[r][c]){
            case 1:
                if(direction == 2){
                    return getNextStep(grid,visited, r, c+1, 2);
                }
                else if(direction == 4){
                    return getNextStep(grid,visited,r,c-1,4);
                }
                return false;
            case 2:
                if(direction == 1){
                    return getNextStep(grid,visited, r-1, c, 1);
                }
                else if(direction == 3){
                    return getNextStep(grid,visited,r+1, c, 3);
                }
                return false;
            case 3:
                if(direction == 1){
                    return getNextStep(grid,visited, r, c-1, 4);
                }
                else if(direction == 2){
                    return getNextStep(grid,visited,r+1,c,3);
                }
                return false;
            case 4:
                if(direction == 1){
                    return getNextStep(grid,visited,r,c+1,2);
                }
                else if(direction == 4){
                    return getNextStep(grid,visited,r+1,c,3);
                }
                return false;
            case 5:
                if(direction == 2){
                    return getNextStep(grid,visited,r-1,c,1);
                }
                else if(direction == 3){
                    return getNextStep(grid,visited,r,c-1,4);
                }
                return false;
            case 6:
                if(direction == 3){
                    return getNextStep(grid,visited,r,c+1,2);
                }
                else if(direction == 4){
                    return getNextStep(grid,visited, r-1, c, 1);
                }
                return false;
        }
        return false;
    }
    bool hasValidPath(vector<vector<int>>& grid) {
        if(grid[0][0] == 5)
            return false;
        vector<vector<bool>> visited(grid.size(),vector<bool>(grid[0].size(),false));
        if(grid[0][0] == 1 || grid[0][0] == 3)
            return getNextStep(grid, visited, 0, 0, 2);
        else if(grid[0][0] == 4){
            bool ans1 = getNextStep(grid, visited, 0, 0, 1);
            if(ans1)
                return true;
            visited.assign(grid.size(),vector<bool>(grid[0].size(),false));
            return getNextStep(grid, visited, 0, 0, 4);
        }
        else 
            return getNextStep(grid, visited, 0, 0, 3);
        
    }
};