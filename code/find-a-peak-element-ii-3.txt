int m, n;

int find(vector<int>& mat)
{
    int maxi = INT_MIN, indx;
    
    for(int i=0; i<n; i++)
    {
        if(mat[i] >  maxi)
        {
            indx = i;
            
            maxi = mat[i];
        }
    }
    
    return indx;
}
vector<int> findPeakGrid(vector<vector<int>>& mat)
{
    m = mat.size(), n = mat[0].size();
    
    int left = 0, right = m-1;
    
    while(left <= right)
    {
       int mid = left + (right-left) / 2;
        
        int c = find(mat[mid]);
        
        if(mid == 0)
        {
            if(mat[mid][c] > mat[mid+1][c])
            {
                return {mid, c};
            }
        }
        
        if(mid == m-1)
        {
            if(mat[mid][c] > mat[mid-1][c])
            {
                return {mid, c};
            }
        }
        
        if(mat[mid][c]>mat[mid+1][c] && mat[mid][c]>mat[mid-1][c])
        {
            return {mid, c};
        }
        
        if(mat[mid][c] < mat[mid+1][c])
        {
            left = mid+1;
        }
        
        else
        {
            right = mid-1;
        }
    }
    
    return {-1, -1};
    
}