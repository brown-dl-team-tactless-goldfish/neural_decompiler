/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct TreeNode *createnode(int val){
    struct TreeNode *root = (struct TreeNode*)calloc(1,sizeof(struct TreeNode));
    root->val=val;
    return root;    
}

struct TreeNode *dfs(int* index,int level,char *traversal,int len){
    if(len==*index){
        printf("out of string range!!\n");
        return NULL;
    }
    int curr_level;
    for(curr_level=0;*index+curr_level<len && traversal[*index+curr_level]=='-';curr_level++);
    if(level!=curr_level){
        printf("level is not same!! ------ level : %d | curr_level :%d\n",level,curr_level);
        return NULL;
    }

    (*index)+=curr_level;
    int val_len;
    int val=0;
    for(val_len=0;*index+val_len<len && isdigit(traversal[*index+val_len]);val_len++){
        val=val*10+traversal[*index+val_len]-'0';
    }
    printf("val : %d ------ level : %d\n",val,level);
    (*index)+=val_len;
    struct TreeNode *root=createnode(val);
    root->left=dfs(index,level+1,traversal,len);
    root->right=dfs(index,level+1,traversal,len);
    return root;
}
struct TreeNode* recoverFromPreorder(char * traversal){
    struct TreeNode *root = NULL;
    int len=strlen(traversal);
    if(len==0) return root;
    int index=0;
    return dfs(&index,0,traversal,len);;
}