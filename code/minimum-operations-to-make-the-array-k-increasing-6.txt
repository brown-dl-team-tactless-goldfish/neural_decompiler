public class Solution {
    public int KIncreasing(int[] arr, int k) {
        int r = 0;
        for (int i = 0; i < k; ++i) {
            r += LongestIncreasingSubsequence(arr, i, k);
        }
        
        return r;
    }
    
    public int LongestIncreasingSubsequence(int[] a, int s, int k) {
        List<int> sq = new List<int>() { a[s] };
        int tot = 1;
        for (int i = s + k; i < a.Length; i += k) {
            if (sq[sq.Count - 1] <= a[i]) {
                sq.Add(a[i]);
            } else {
                int j = FindNextLargest(sq, a[i]);
                sq[j] = a[i];
            }
            tot++;
        }

        return tot - sq.Count;
    }
    
    public int FindNextLargest(List<int> ls, int cur) {
        int l = 0, r = ls.Count - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (ls[m] < cur) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        
        return ls[l] == cur ? l + 1 : l;
    }
}