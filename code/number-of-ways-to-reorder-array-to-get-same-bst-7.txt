int dp[2001][2001];
bool f=false;
class Solution 
{
    public:
    struct node
    {
        node* left;
        node* right;
        int val;
        node():left(NULL),right(NULL),val(0){};
        node(int val):left(NULL),right(NULL),val(val){};
    };
    typedef struct node node;
    int c[1001][2];
    long m=1000000007;
    node* insert(node* root,int val)
    {
        if(root==NULL)
        {
            return new node(val);
        }
        if(root->val<val)
        {
            root->right=insert(root->right,val);
        }
        else
        {
            root->left=insert(root->left,val);
        }
        return root;
    }
    int children(node* root)
    {
        if(root==NULL)
        {
            return 0;
        }
        int l=children(root->left);
        int r=children(root->right);
        c[root->val][0]=l;
        c[root->val][1]=r;
        return l+r+1;
    }
    long dfs(node* root)
    {
        if(root==NULL)
        {
            return 1;
        }
        if(root->left==NULL&&root->right==NULL)
        {
            return 1;
        }
        long l=dfs(root->left);
        long r=dfs(root->right);
        return (((dp[c[root->val][0]+c[root->val][1]][c[root->val][0]]*l)%m)*r)%m;
    }
    int numOfWays(vector<int>& nums) 
    {
        if(!f)
        {
            dp[0][0]=1;
            for(int i=0;i<1000;i++)
            {
                for(int j=0;j<=i;j++)
                {
                    dp[i+1][j]=(dp[i+1][j]+dp[i][j])%m;
                    dp[i+1][j+1]=(dp[i+1][j+1]+dp[i][j])%m;
                }
            }
            f=true;
        }
        memset(c,0,sizeof(c));
        node* root=new node(nums[0]);
        for(int i=1;i<nums.size();i++)
        {
            root=insert(root,nums[i]);
        }
        children(root);
        return (int)dfs(root)-1;
    }
};