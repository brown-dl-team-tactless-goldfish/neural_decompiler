        public int MostBooked(int n, int[][] meetings)
        {
            int res = 0;
            int[] arr = new int[n];
            meetings = meetings.OrderBy(x => x[0]).ToArray();//sort by start time
            //pq of room, store {index, endTime}, return min startTime with min index
            PriorityQueue<int[], int[]> pq = new PriorityQueue<int[], int[]>(
                Comparer<int[]>.Create((a, b) =>
                {
                    if (a[1] != b[1])
                        return a[1] - b[1];
                    else
                        return a[0] - b[0];
                }));

            for(int i = 0; i < n; i++)
            {
                int[] curr = new int[] { i, 0 };//init pq, all element from 0
                pq.Enqueue(curr, curr);
            }

            foreach(var m in meetings)
            {
                //if any element's entTime < curr meeting's startTime, update it
                while (pq.Peek()[1]< m[0])
                {
                    var curr = pq.Dequeue();
                    curr[1] = m[0];
                    pq.Enqueue(curr, curr);
                }

                var top = pq.Dequeue();
                arr[top[0]]++;
                top[1] += m[1] - m[0];
                pq.Enqueue(top, top);
            }

            int max = -1;
            for(int i = 0; i < n; i++)
            {
                if (arr[i] > max)
                {
                    max = arr[i];
                    res = i;
                }
            }
            return res;
        }
