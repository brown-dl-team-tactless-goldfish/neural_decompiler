class Solution {
public:
    int longestAwesome(string s) {
        unordered_map<int,int>mp;  //mask->index
        int mask=0,ans=0;
        //string of is if length 0
        mp[0]=-1;
        for(int i=0;i<s.size();i++){
            mask^=(1<<(s[i]-'0'));
           
           //if mask already exist
           if(mp.count(mask)){
               //if mask is present then calculate the maximum
               ans=max(ans,i-mp[mask]);
           }else{
               mp[mask]=i;   //if msk does not exist then store its index
           }

           //for odd length the mask can differ by at most one bit
           for(int j=0;j<10;j++){
               if(mp.count(mask^(1<<j))){
                   ans=max(ans,i-mp[mask^(1<<j)]);
               }
           }
        }
        return ans;
    }
};