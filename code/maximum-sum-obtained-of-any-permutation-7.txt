class Solution {
public:
    int maxSumRangeQuery(vector<int>& nums, vector<vector<int>>& requests) {
        int n=nums.size();
        vector<int>dp(n+1,0);
        
        for(int i=0;i<requests.size();i++)
        {
            int a=requests[i][0];
            int b=requests[i][1];
            dp[a]++;
            dp[b+1]--;
        }
        
        unordered_map<int,int>mp;
        int run=0;
        for(int i=0;i<=n;i++)
        {
            run+=dp[i];
            mp[run]++;
        }
        mp.erase(0);
        
        sort(nums.begin(),nums.end());
        reverse(nums.begin(),nums.end());
        
        vector<vector<int>>v;
        for(auto it:mp)
        {
            v.push_back({it.first,it.second});
        }
        // fre,numberofele
        
        sort(v.begin(),v.end());
        reverse(v.begin(),v.end());
        
        long long int ans=0;
        int j=0;
        for(int i=0;i<v.size();i++)
        {
            int numberofele=v[i][1];
            int fre=v[i][0];
           // cout<<numberofele<<" "<<fre<<"   ";
            for(int u=0;u<numberofele;u++,j++)
            {
                ans+=nums[j]*fre;
                ans= ans%(int)(1e9+7);
               // cout<<nums[i]*fre<<" ";
            }
        }
        //cout<<endl;
        return ans;
        
    }
};