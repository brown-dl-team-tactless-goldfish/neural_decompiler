class Solution {
public:
	bool canBeValid(std::string const& s, std::string const& locked) {
		if (std::size(s) % 2 != 0) { return false; }

		auto validate = []<typename Iterator1, typename Iterator2, typename T>(Iterator1 first1, Iterator1 last1, Iterator2 first2, T close, T state) {
			return std::transform_reduce(first1, last1, first2, true,
				std::logical_and<>(),
				[=, count = 0](auto c, auto l) mutable { return (count += c != close || l == state ? 1 : -1) >= 0; });
		};

		return validate(std::cbegin(s), std::cend(s), std::cbegin(locked), ')', '0')
			&& validate(std::crbegin(s), std::crend(s), std::crbegin(locked), '(', '0');
	}
};