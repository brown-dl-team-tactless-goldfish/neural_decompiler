class AuthenticationManager {
public:
    map<string,int>mp;
    int ttl = 0;
    AuthenticationManager(int timeToLive) {
        ttl = timeToLive;
    }
    
    void generate(string tokenId, int currentTime) {
        //cout<<"Generate : "<<tokenId<<" at "<< currentTime<<endl;
        mp[tokenId]=currentTime+ttl;
    }
    
    void renew(string tokenId, int currentTime) {
        //cout<<"Renew : "<<tokenId<<" at "<< currentTime<<endl;
        if(mp[tokenId]>currentTime && mp.find(tokenId)!=mp.end()){
            //cout<<"\t\t"<<tokenId<<" regenrated."<<endl;
            mp[tokenId]=currentTime+ttl;
        }
    }
    
    int countUnexpiredTokens(int currentTime) {
        //cout<<"Count : "<< currentTime<<endl;
        int c = 0;
        for(auto token:mp){
            //cout<<"\t\t"<<token.first<<" "<<endl;
            if(token.second<=currentTime) continue;
            else ++c;
        }
        return c;
    }
};

/**
 * Your AuthenticationManager object will be instantiated and called as such:
 * AuthenticationManager* obj = new AuthenticationManager(timeToLive);
 * obj->generate(tokenId,currentTime);
 * obj->renew(tokenId,currentTime);
 * int param_3 = obj->countUnexpiredTokens(currentTime);
 */