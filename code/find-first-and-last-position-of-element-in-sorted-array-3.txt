

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    
    int i, mid;
    int frst=-1,last=-1;
    int flag = 0;
    int* result = malloc(sizeof(int)*2);
    (* returnSize) = 2;
    if(numsSize%2 > 0){
        mid = (numsSize-1)/2;
    }
    else
        mid = numsSize /2;
    
    if(numsSize==0 || numsSize==1){
        result[0] = frst;
        result[1] = last;
        if(numsSize>0)
            if(nums[0]==target){
                result[0] = 0;
                result[1]=0;
            }
            
        return result;
    }
    
    if (nums[mid] == target || numsSize==2){
        
            if(numsSize==2){
                printf("Being in size=2");
                if(nums[0]==nums[1])
                {
                    if(nums[0]==target)
                    {
                        frst=0;
                        last=1;
                    }
                }
                else if(nums[1]==target){
                    frst = mid;
                    last=mid;
                }
                else if(nums[0]==target){
                    printf("Not here ????");
                    last = 0;
                    frst=0;
                }
            }
            else {
                 for(i=mid; i>=0;i--){
                    if(nums[i]!=target){
                        frst = i+1;
                        flag=1;
                        break;}
                     if(nums[0]==target && i==0){
                         frst = i;
                         
                     }
                 }
                    
                 for(i=mid; i<numsSize; i++){
                    if(nums[i]!=target){
                        last = i-1;
                        flag=1;
                         break;}
                     if(nums[i]==target && i == numsSize-1)
                         last=i;
                  }

            }
        
    }
    else if (nums[mid]<target){
        for(i=mid+1; i<numsSize;i++){
            if(nums[i] == target){
                frst = i;
                last = i;
                if((i+1)<(numsSize))
                    for(int j = i+1;j<numsSize;j++)
                        if(nums[j]==target)
                            last=j;
                flag =1;
            }
            if(flag==1)
                break;
        } 
    }
    //nums[mid]>target
    else {
        for(i=mid-1;i>=0;i--){
            if(nums[i]==target){
                last=i;
                frst = i;
                if((i-1)>=0){
                    for(int j=i-1;j>=0;j--)
                        if(nums[j]==target)
                            frst=j;
                flag=1;
                }
            }
            if(flag==1)
                break;
        }
        
    }
    
    result[0] = frst;
    result[1] =last;
    return result;

}