class Solution {
public:
    int build(int n,int i,int j,vector<int> &v,vector<int> &tree){
        if(i==j){
            tree[n] = v[i];
            return tree[n];
        }
        int mid = (j-i)/2+i;
        int left = build(n*2+1,i,mid,v,tree);
        int right = build(n*2+2,mid+1,j,v,tree);
        return tree[n] = left+right;
    }
    int query(int l,int r,int n,vector<int> &tree,int i,int j){
        if(r<i||l>j)return 0;
        if(l<=i&&r>=j)return tree[n];
        int mid = (j-i)/2+i;
        int left = query(l,r,2*n+1,tree,i,mid);
        int right = query(l,r,2*n+2,tree,mid+1,j);
        return left+right;
    }
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        vector<int> v;
        for(auto &i: words){
            v.push_back((i[i.length()-1]=='a'||i[i.length()-1]=='o'||i[i.length()-1]=='i'||i[i.length()-1]=='e'||i[i.length()-1]=='u')&&(i[0]=='a'||i[0]=='e'||i[0]=='o'||i[0]=='i'||i[0]=='u'));
        }
        // for(auto &i: v)cout<<i<<" ";
        int n = v.size();
        vector<int> tree(n*4,0);
        
        build(0,0,n-1,v,tree);
        v.clear();
        for(auto &i: queries){
            v.push_back(query(i[0],i[1],0,tree,0,n-1));
        }return v;
    }
};