// time complexity O((number of unique color) * n) <= O(26 * n) = O(n)
// space complexity O(3*n + m) 

class Solution {
public:
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        int n = colors.size();
       
        vector<int> out1(n, 0);
        vector<int> out2(n, 0);
        vector<vector<int>> adj(n, vector<int>());
        for(vector<int>& edge : edges) {
            out1[edge[0]]++;
            adj[edge[1]].push_back(edge[0]);
        }
        
        int res = 0;
        vector<int> dp(n, 0);
        vector<int> seen(26, 0);
        for(char c : colors) {
            if(seen[c-'a']) continue;
            seen[c-'a'] = 1;
            
            queue<int> q;
            for(int i=0;i<n;++i) {
                dp[i] = -1;
                out2[i] = out1[i];
                if(out2[i] == 0) {
                    dp[i] = (c-'a' == colors[i]-'a');
                    q.push(i);
                }
            }
            
            for(int i=0;i<n;++i) {
                if(q.empty()) return -1;
                
                int u = q.front();
                q.pop();
                res = max(res, dp[u]);
                
                for(int v : adj[u]) {
                    dp[v] = max(dp[v], (c-'a' == colors[v]-'a')+dp[u]);
                    out2[v]--;
                    if(out2[v] == 0) {
                        q.push(v);
                    }
                }
            }
        }

        return res;
    }
};

// Fast I/O; 4 ms
static bool     _foo = ios::sync_with_stdio(false);
static ostream* _bar = cin.tie(NULL);