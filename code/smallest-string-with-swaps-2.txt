class unionFind {
public:
    unionFind(int n) {
        root.resize(n, 0);
        rank.resize(n, 1);
        for (int i = 0; i < n; ++i) {
            root[i] = i;
        }
    }

    int find(int x) {
        if (x == root[x]) {
            return x;
        }
        return root[x] = find(root[x]);
    }

    void unify(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            if (rank[rootX] < rank[rootY]) {
                root[rootX] = rootY;
            } else if (rank[rootY] < rank[rootX]) {
                root[rootY] = rootX;
            } else {
                root[rootY] = rootX;
                ++rank[rootX];
            }
        }
    }

    void getGroups(unordered_map<int, pair<priority_queue<int, vector<int>, greater<int>>, priority_queue<char, vector<char>, greater<char>>>>& groups, string& s) {
        for (int i = 0; i < root.size(); ++i) {
            groups[find(i)].first.push(i);
            groups[find(i)].second.push(s[i]);
        }
    }

private:
    vector<int> root;
    vector<int> rank;
};


class Solution {
public:
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        unionFind uf(s.size());
        for (int i = 0; i < pairs.size(); ++i) {
            uf.unify(pairs[i][0], pairs[i][1]);
        }

        unordered_map<int, pair<priority_queue<int, vector<int>, greater<int>>, priority_queue<char, vector<char>, greater<char>>>> groups;
        uf.getGroups(groups, s);

        string answer(s.size(), ' ');
        for (auto g : groups) {
            while (!g.second.first.empty()) {
                int idx = g.second.first.top();
                char c = g.second.second.top();
                g.second.first.pop();
                g.second.second.pop();
                answer[idx] = c;
            }
        }

        return answer;
    }
};