class Solution {
public:
    int numPoints(vector<vector<int>>& points, int r) {
       
        int n = points.size();
        vector<vector<long double> > dist(n, vector<long double>(n));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i==j) {
                    dist[i][j] = 0.0;
                    continue;
                }
                dist[i][j] = dist[j][i] = sqrt((points[i][0]-points[j][0])*(points[i][0]-points[j][0]) + (points[i][1]-points[j][1])*(points[i][1]-points[j][1]));
            }
        }
        int ans=1;
        for(int i=0;i<n;i++){
            vector<pair<long double, bool> > angles;
            for(int j=0;j<n;j++){
                if(i==j || dist[i][j]>2.0*r) continue;
                long double  A = atan2((points[j][1]-points[i][1]),(points[j][0]-points[i][0]));
                long double  B = acos(dist[i][j]/(2.0*r));
                angles.push_back(make_pair(A-B, false));
                angles.push_back(make_pair(A+B, true));
            }
        
            sort(angles.begin(), angles.end());
            int cnt=1;
            for(auto it:angles){
                if(it.second==false) cnt++;
                else cnt--;
                ans=max(ans, cnt);
            }
        }
        return ans;
    }
};