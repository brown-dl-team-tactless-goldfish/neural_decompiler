long long maxPoints(vector<vector<int>>& points) {
        int r = points.size();
        int c = points[0].size();
        
        vector<long long> dp(c,0);
        vector<long long> dpPrev(c,0);
   
        for (int i = 0; i < c; i++) {
            dpPrev[i] = points[0][i];
        }
        
        vector<long long> leftMax(c,0);
        vector<long long> rightMax(c,0);
            
        for (int i = 1; i < r; i++) {
            // figure out the left Max from the current index
            // leftMost index has no neighbor so it is only max
            leftMax[0] = dpPrev[0];
            for (int j = 1; j < c; j++) {
                // current max till j-1 is reduced by 1 and previous same column max
                // one of these 2 will be maxium
                leftMax[j] = max(leftMax[j-1]-1, dpPrev[j]);
            }
            
            // right most number has no member hence it is the max
            rightMax[c-1] = dpPrev[c-1];
            for (int j = c-2; j >= 0; j--) {
                // current max from right -1 as we are shifting to left or max you are getting from 
                // same column from previous iteration.
                rightMax[j] = max(rightMax[j+1]-1, dpPrev[j]);
            }
            
            for (int j = 0; j < c; j++) {
                // so far any point result will be current sum and max of left Max and right Max
                dp[j] = points[i][j] + max(leftMax[j],rightMax[j]);
            }
            swap(dpPrev,dp);
        }
        return *max_element(dpPrev.begin(),dpPrev.end());
    }
	```