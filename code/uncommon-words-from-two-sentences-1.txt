typedef struct {
    char string[32];
    int count;
    UT_hash_handle hh;
} WordHash;

char ** uncommonFromSentences(char * s1, char * s2, int* returnSize){
    WordHash* h = NULL;
    WordHash* m = NULL;
    char* s;
    int len = 0, startIdx = 0, idx = 0, cnt = 0;
    for(int i = 0; i < 2; i++)
    {
        s = (i == 0)?s1 : s2;
        len = strlen(s);
        startIdx = 0; 
        idx = 0;
        do
        {
            if(s[idx] == ' ' || idx == (len - 1)){
                cnt = idx - startIdx;
                if(idx == (len - 1)) cnt++;
                char* c = (char*)calloc(cnt+1, sizeof(char));
                strncpy(c, &s[startIdx], cnt);
                c[cnt] = '\0';
                HASH_FIND_STR(h, c, m);
                if(!m){
                    m = (WordHash*)calloc(1, sizeof(WordHash));
                    strncpy(m->string, c, cnt);
                    HASH_ADD_STR(h, string, m);
                }
                m->count++;
                startIdx = idx + 1;
            }
            idx++;
        } while(idx < len);
        cnt = len - startIdx;
    }
    char** ans = (char**)calloc(100, sizeof(char*));
    int ansIdx= 0;
    for(m = h; m != NULL; m = m->hh.next){
        if(m->count == 1){
            ans[ansIdx] = (char*)calloc(strlen(m->string)+1, sizeof(char));
            strcpy(ans[ansIdx++], m->string);
        }
    }
    *returnSize = ansIdx;
    return ans;
}