class Solution {
public:
    vector<int> findPosition(int curr, int n) {
        int r = n - (curr - 1) / n - 1;
        int c = (curr - 1) % n;
        if(r%2 == n%2) return {r, n - 1 - c};
        else return {r, c};
    }
    int snakesAndLadders(vector<vector<int>>& a) {
        int n = a.size(), ans = 0, sz, i, x, k, r, c;
        queue<pair<int, int>> q;
        vector<vector<int>> vis(n, vector<int> (n,0));
        q.push({1, ans});
        vis[n-1][0] = 1;
        while(q.size()) {
            sz = q.size();
            for(i=0; i<sz; i++) {
                x = q.front().first;  
                ans = q.front().second;
                q.pop();
                if(x == n*n) return ans;
                for(k=1; k<=6; k++) {
                    if(k+x > n*n) break;
                    vector<int> pos = findPosition(k+x, n);
                    r = pos[0];
                    c = pos[1];
                    if(vis[r][c] == 1) continue;
                    vis[r][c] = 1;
                    if(a[r][c] == -1) q.push({k+x, ans+1});
                    else q.push({a[r][c], ans+1});
                }
            }
        }
        return -1;
    }
};