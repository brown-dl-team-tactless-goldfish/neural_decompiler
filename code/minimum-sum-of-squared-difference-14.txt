class Solution {
public:
    long long minSumSquareDiff(vector<int>& nums1, vector<int>& nums2, int k1, int k2) {
        
        long long res = 0;
        
        int total = k1 + k2;
        
        unordered_map<int, int> freq;
        
        for (int i = 0, size = nums1.size(); i < size; ++i)
        {
            if (nums1[i] != nums2[i])
                ++freq[std::abs(nums1[i] - nums2[i])];
        }
        
        priority_queue<std::pair<int, int>> pq;
        for (auto it : freq)
        {
            pq.push({it.first, it.second});
        }
        
        int diff = 0;
        
        while (!pq.empty() && total > 0)
        {
            auto [k, v] = pq.top();
            pq.pop();
            
            if (pq.empty())
            {
                diff = k * v;
                
                if (total >= diff)
                {
                    total -= diff;
                }
                else
                {
                    int x = total / v;
                    int y = total % v;
                    
                    pq.push({ k-x-1, y });
                    pq.push({ k-x, v-y });
                    
                    total = 0;
                }
            }
            else
            {
                auto [kk, vv] = pq.top();
                pq.pop();
                
                diff = (k - kk) * v;
                if (total >= diff)
                {
                    pq.push({kk, v+vv});
                    total -= diff;
                }
                else
                {
                    int x = total / v;
                    int y = total % v;
                    
                    pq.push({ k-x-1, y});
                    pq.push({ k-x, v-y});
                    pq.push({kk, vv});
                    
                    total = 0;
                }
            }
        }
        
        while (!pq.empty())
        {
            auto [k, v] = pq.top();
            pq.pop();
            res += static_cast<long long>(k) * k * v;
        }
        
        return res;
    }
};