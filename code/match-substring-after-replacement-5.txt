class Solution {
    unordered_map<char, unordered_set<char>>Map ;
    bool transform(string s, int cur, string sub){
        for(int i = 0; i < sub.size(); i++){
            if(s[cur + i] == sub[i])
                continue ;
            char key = sub[i] ;
            char target = s[cur + i] ;
            if(Map[key].count(target) == 0)
                return false ;
        }
        return true ;
    }
public:
    bool matchReplacement(string s, string sub, vector<vector<char>>& mappings) {
        for(auto& m : mappings){
            Map[m[0]].insert(m[1]) ;
        }
        for(int i = 0 ; i <= s.size() - sub.size(); i++){
            if(transform(s, i, sub))
                return true ;
        }
        return false ;
    }
};