class Solution {
public:
    int minimumVisitedCells(vector<vector<int>>& grid) {
        
        int m = grid.size(), n = grid[0].size();
        
        vector<vector<int>> visited(m+1, vector<int>(n+1, 0));
        
        queue<vector<int>> nodeQ;
        nodeQ.push({0,0});
        
        int level = 0;
        
        while(!nodeQ.empty()) {
            auto size = nodeQ.size();
            level++;
            while(size--) {
                auto node = nodeQ.front();
                nodeQ.pop();
                int xi = node[0], yi = node[1];
                int value = grid[xi][yi];
                if(xi == m-1 && yi == n-1) {
                    return level;
                }
                for(int i=value; i>0; i--) {
                    int x_d = xi+i;
                    int y_r = yi+i;
                    if(x_d < m && !visited[x_d][yi]) {
                        visited[x_d][yi] = true;
                        nodeQ.push({x_d,yi});
                    }
                    if(y_r < n && !visited[xi][y_r]) {
                        visited[xi][y_r] = true;
                        nodeQ.push({xi, y_r});
                    }
                }
            }
        }
        
        return -1;
    }
};