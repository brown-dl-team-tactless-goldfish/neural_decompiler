int minMutation(char * start, char * end, char ** bank, int bankSize){
    int** table = malloc(bankSize * sizeof(int*));
    for(int i = 0; i < bankSize; i++){
        table[i] = malloc(bankSize * sizeof(int));
    }
    int last = -1;
    int pos;
    for(int i = 0; i < bankSize ; i++){
        table[i][0] = 0;
        if(strcmp(end, bank[i]) == 0)
            last = i;
        for(int j = 0; j < bankSize; j++){
            int d = 0;
            if(i == j)
                continue;
            for(int k = 0; k < 8; k++){
                if(bank[i][k] != bank[j][k])
                    d++;
                if(d > 1)
                    break;
            }
            if(d == 1){                 
                table[i][0]++;
                pos = table[i][0];   
                table[i][pos] = j; 
            }
        }
    }

    int* stack1 = malloc(10 * sizeof(int));
    int* stack2 = malloc(10 * sizeof(int));
    int idx1 = 0, idx2 = 0;
    for(int i = 0; i < bankSize; i++){
        int d = 0;
        for(int j = 0; j < 8; j++){
            if(start[j] != bank[i][j])
                d++;
            if(d > 1)
                break;
        }
        if(d == 1){
            if(i == last)
                return 1;
            stack1[idx1] = i;
            idx1++;
        }
    }
    if(idx1 == 0)
        return -1;
    int level = 1;
    bool* visit = calloc(bankSize, sizeof(int));
    bool flag = true;
    int cn = idx1 ;
    int p;
    while(idx1 > 0 || idx2 > 0){
        if(idx1 > 0){
            for(int i = 0; i < idx1; i++){
                p = stack1[i];
                visit[p] = true;
                for(int j = 1; j <= table[p][0]; j++){
                    int z = table[p][j]; 
                    if(z == last)
                        return level + 1;
                    if(visit[z] == false){
                        stack2[idx2] = z;
                        idx2++;
                    }
                }
            }
            idx1 = 0;            
        }
        else{
            for(int i = 0; i < idx2; i++){
                p = stack2[i];
                visit[p] = true;
                for(int j = 1; j <= table[p][0]; j++){
                    int z = table[p][j]; 
                    if(z == last)
                        return level+1;
                    if(visit[z] == false){
                        stack1[idx1] = z;
                        idx1++;
                    }
                }
            }
            idx2 = 0;
        }
        level++;
    }
    
    return -1;

}