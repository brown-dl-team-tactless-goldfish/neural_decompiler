static char *S;  static int L;

bool check(int l, int r){
    while (l < r)
        if(S[l++] != S[r--])  return false;
    return true;
}

void parti(char ***ans, int *size, int **Csize, int pos){  //position, also the start in this step
    int t = (*Csize)[*size];
    
    for(int i = L-1; i >= pos; i--){
        if(S[i] == S[pos] && check(pos, i)){
            int len = i-pos+1;
            ans[*size][(*Csize)[*size]] = (char*)malloc((len+1)*sizeof(char));
            memcpy(ans[*size][(*Csize)[*size]], S+pos, len);
            ans[*size][(*Csize)[*size]++][len] = '\0';
            
            if(i == L-1){    //in the end
                (*size)++;
                ans[*size] = (char**)malloc(16*sizeof(char*));  //S.length max is 16
                memcpy(ans[*size], ans[(*size)-1], 8*t);        //in 64-bit implementation is 8*t
            }
            else
                parti(ans, size, Csize, i+1);
            (*Csize)[*size] = t;
        }
    }
}

char *** partition(char * s, int* rSize, int** rCSize){
    char ***ans = (char***)malloc(400000 * sizeof(char**));
    ans[0] = (char**)malloc(16 * sizeof(char*));
    *rCSize = (int*)malloc(400000 * sizeof(int)); 
    
    (*rSize) = (*rCSize)[0] = 0;
    S = s;  L = strlen(s);
    parti(ans, rSize, rCSize, 0);
    return ans;
}