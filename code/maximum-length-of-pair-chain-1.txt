//run time: 19ms
int partition(int** array,int low,int high)
{
    int temp_1=array[low][1];
    int temp_2=array[low][0];
    while(low<high)
    {
        while(low<high&&array[high][1]>=temp_1)
        {high--;}
        if(low<high) 
        {
            array[low][0]=array[high][0];
            array[low][1]=array[high][1];
            low++;
        }
        while(low<high&&array[low][1]<temp_1)
        {low++;}
        if(low<high)
        {
            array[high][0]=array[low][0];
            array[high][1]=array[low][1];
            high--;
        }
    }
    array[low][1]=temp_1;
    array[low][0]=temp_2;
    return low;
}
void quick_sort(int** array,int s,int t)
{   
    int i=0;
    if(s<t)
    {
        i=partition(array,s,t);
        quick_sort(array,s,i-1);
        quick_sort(array,i+1,t);
    }
}
int findLongestChain(int** pairs, int pairsRowSize, int pairsColSize) {
    quick_sort(pairs,0,pairsRowSize-1);
    int ret=1;
    int k=0;
    for(int i=1;i<pairsRowSize;i++){
        if(pairs[i][0]>pairs[k][1]){
            ret++;
            k=i;
        }
    }
    return ret;
}
//run time: 43ms
/*int partition(int** array,int low,int high)
{
    int temp_1=array[low][0];
    int temp_2=array[low][1];
    while(low<high)
    {
        while(low<high&&array[high][0]>=temp_1)
        {high--;}
        if(low<high) 
        {
            array[low][0]=array[high][0];
            array[low][1]=array[high][1];
            low++;
        }
        while(low<high&&array[low][0]<temp_1)
        {low++;}
        if(low<high)
        {
            array[high][0]=array[low][0];
            array[high][1]=array[low][1];
            high--;
        }
    }
    array[low][0]=temp_1;
    array[low][1]=temp_2;
    return low;
}
void quick_sort(int** array,int s,int t)
{   
    int i=0;
    if(s<t)
    {
        i=partition(array,s,t);
        quick_sort(array,s,i-1);
        quick_sort(array,i+1,t);
    }
}
int findLongestChain(int** pairs, int pairsRowSize, int pairsColSize) {
    quick_sort(pairs,0,pairsRowSize-1);
    int *array=(int*)calloc(pairsRowSize,sizeof(int));
    int last=0;
    int count=0;
    int max[1][2]={0};
    array[pairsRowSize-1]=1;
    max[0][0]=1;
    max[0][1]=pairsRowSize-1;
    for(int i=pairsRowSize-2;i>-1;i--){
        if(pairs[i][1]<pairs[max[0][1]][0]){
            max[0][0]++;
            max[0][1]=i;
            array[i]=max[0][0];
            continue;
        }
        for(int j=i+1;j<pairsRowSize;j++){
            if(pairs[i][1]<pairs[j][0]){
                array[i]=array[j]+1;
                if(array[i]>max[0][0]){
                    max[0][0]=array[i];
                    max[0][1]=i;
                    break;
                }
            }
        }
    }
    return max[0][0];
}*/