public int MinOperationsToFlip(string expression)
{
	Stack<(char op, int cost)> stack = new Stack<(char, int)>();

	foreach (char c in expression)
	{
		if (c == '(' || c == '&' || c == '|')
		{
			stack.Push((c, 0));
			continue;
		}

		(char op, int cost) current;
		if (c == ')')
		{
			current = stack.Pop();
			stack.Pop();
		}

		else
		{
			// 0 or 1
			current = ((c, 1));
		}

		while (stack.Count > 0 && (stack.Peek().op == '&' || stack.Peek().op == '|'))
		{
			(char op, _) = stack.Pop();
			var second = stack.Pop();
			var next = ((op, current.op, second.op)) switch
			{
				('&', '1', '1') => ('1', Math.Min(current.cost, second.cost)),
				('&', '1', '0') => ('0', 1),
				('&', '0', '1') => ('0', 1),
				('&', '0', '0') => ('0', 1 + Math.Min(current.cost, second.cost)),

				('|', '1', '1') => ('1', 1 + Math.Min(current.cost, second.cost)),
				('|', '1', '0') => ('1', 1),
				('|', '0', '1') => ('1', 1),
				('|', '0', '0') => ('0', Math.Min(current.cost, second.cost)),

					_ => ('0', 0)
			};

			current = next;
		}

		stack.Push(current);               
	}

	int result = stack.Pop().cost;
	return result;
}

