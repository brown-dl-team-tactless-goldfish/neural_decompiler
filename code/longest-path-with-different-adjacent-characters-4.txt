class Solution {
public:
    vector<int> g[100005];
    int dfs(int u, string& s, int& longestPath) {
        int lc = 0, slc = 0;
        for (int v: g[u]) {
            int lcc = dfs(v, s, longestPath);
            if(s[u] == s[v]) {
                continue;
            }
            if(lcc > lc) {
                slc = lc;
                lc = lcc;
            }
            else if(lcc > slc) {
                slc = lcc;
            }
        }
        longestPath = max(longestPath, lc + slc + 1);
        return lc + 1;
    }

    int longestPath(vector<int>& parent, string s) {
        for(int i=1; i<parent.size(); i++) {
            g[parent[i]].push_back(i);
        }
        int longestPath = 1;
        dfs(0, s, longestPath);
        return longestPath;
    }
};