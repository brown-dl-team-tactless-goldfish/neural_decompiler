class Trie {
private:
    vector<Trie *> children;
    int endVal;
public:
    Trie () : children(26, NULL) {
        endVal = 0;
    }
    
    void insert(string &s, int val) {
        Trie *curr = this;
        for (char &c : s) {
            int v = c - 'a';
            if (curr->children[v] == NULL) curr->children[v] = new Trie();
            curr = curr->children[v];
        }
        curr->endVal = val;
    }
    
    int searchHelper(Trie *curr) {
        int res = curr->endVal;
        
        for (int i = 0; i < 26; i++) {
            if (curr->children[i] == NULL) continue;
            res += searchHelper(curr->children[i]);
        }
        
        return res;
    }
    
    // search the current string, then DFS to get total sum;
    int searchVal(string &s) {
        Trie *curr = this;
        
        for (char &c : s) {
            int v = c - 'a';
            if (curr->children[v] == NULL) return 0;
            curr = curr->children[v];
        }
        return searchHelper(curr);
    }
};

class MapSum {
private:
    Trie trie;
public:
    MapSum() {
        
    }
    
    void insert(string key, int val) {
        trie.insert(key, val);
    }
    
    int sum(string prefix) {
        return trie.searchVal(prefix);
    }
};