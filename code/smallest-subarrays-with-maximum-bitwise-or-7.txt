class Solution {
public:
vector<int> smallestSubarrays(vector<int>& nums) {
    
    int n = nums.size();
    cout<<n<<endl;
    vector<int> res(n,0);
    
	//cntBit - Store total number of bits in the window
	//setBit - Store whether a bit is set or not in the window
    vector<int> cntBit(40,0);
    vector<int> setBit(40,0);
    
	//maxOr - Calculate the max prefix bitwise or
    vector<int> maxOr(n,0);
    
    for(int i=n-1;i>=0;i--){
        
        maxOr[i] = nums[i];
        if(i<n-1)
            maxOr[i] |= maxOr[i+1];
        
    }
    
    int end = 0;
    for(int i=0;i<n-1;i++){
        
        int j = 0;
        
        
                        
        int tmp = maxOr[i];
		
		cntBit,setBit - store bits for the maxOr
        vector<int> cntBitt(40,0);
        vector<int> setBitt(40,0);
        while(tmp){
            cntBitt[j]+=(tmp%2);
            setBitt[j] = cntBitt[j] == 0 ? 0: 1;
            j++;
            tmp = tmp/2;
        }
        
        while(end<n and setBit != setBitt){
            
           
            tmp = nums[end];
            j = 0;
            while(tmp){
                cntBit[j]+=(tmp%2);
                setBit[j] = cntBit[j] == 0 ? 0: 1;
                j++;
                tmp = tmp/2;
            }
            end++;
            
            
        }
        
        while(end<=i)
            end++;
        
       
        tmp = nums[i];
        j = 0;
        while(tmp){
            cntBit[j]-=(tmp%2);
                setBit[j] = cntBit[j] == 0 ? 0: 1;
                j++;
                tmp = tmp/2;
        }
        
        res[i]=end-i+1;
        
    }
    for(int i=0;i<n;i++)
        res[i]--;
    res[n-1] = 1;
    
    return res;
}