		const int tbl[] = { 1, 2, 2, 3, 5, 5, 7, 7, 11, 11 };
		if (N <= 9)
			return tbl[N];
		int layer = 2;
		int result_max = 99;
		for (; layer <= 9 && result_max <= N; ++layer)
			result_max = result_max * 10 + 9;

		for (; layer <= 9; ++layer, result_max = result_max * 10 + 9) {
			vector<int> result(layer / 2 + layer % 2);
			result.front() = 1;
			while (1) {
				int sum = 0, val = 0;
				for (auto IT : result) {
					val = val * 10 + IT;
					sum += IT;
				}
				for (auto IT = result.rbegin() + (layer % 2); IT < result.rend(); ++IT) {
					val = val * 10 + *IT;
					sum += *IT;
				}
				if (val == result_max)
					break;
				if (sum % 3 != 0 && val >= N) {
					// test value
					int stop_val = (int)sqrt(val);
					for (int i = 0;; ++i) {
						int divid = i * 2 + 7;
						if (divid > stop_val)
							return val;
						if (val % divid == 0)
							break;
					}
				}
				// left part
				for (auto IT = result.rbegin(); IT < result.rend(); ++IT) {
					const int tbl[] = { 1, 3, 3, 7, 7, 7, 7, 9, 9, 10 };
					*IT = (IT == result.rend() - 1) ? tbl[*IT] : *IT + 1;
					if (*IT < 10)
						break;
					*IT = 0;
				}
			}
		}
		return 0;
