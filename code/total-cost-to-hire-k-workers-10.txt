class Solution {
public:
    long long totalCost(vector<int>& nums, int k, int c) {
       long long ans = 0;
        int n = nums.size();
        priority_queue<int , vector<int> , greater<int>> p1, p2;
        int start = 0, end = n - 1;
        if(2* c >= n){
            while(start < end){
                p1.push(nums[start++]);
                p2.push(nums[end--]);
            }
            if(n % 2 != 0) p1.push(nums[start++]);
        }
        else
        for(int i =0 ; i < c ; i++){
            p1.push(nums[i]);
            if(p1.size() + p2.size() == n)
                break;
            p2.push(nums[n - i - 1]);
            start++;
            end--;
        }
        for(int i = 0; i < k; i++){
            int a =p1.top() , b = p2.top();
            if(a > b){
                ans += b;
                p2.pop();
                if(start <= end){
                    p2.push(nums[end--]);
                }
            }else{
                ans += a;
                p1.pop();
                if(start <= end){
                    p1.push(nums[start++]);
                }
            }
        }
        return ans;
    }
};