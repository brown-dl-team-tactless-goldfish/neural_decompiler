class Solution {
public:
    
    bool partition(vector<int>& nums, int pos,
                   int k, int K, int sum, int T,
                   unordered_set<int> visited) {
        if (k == K-1)
            return true;
        
        if (sum == T) {
            return partition(nums, 0, k+1, K, 0, T, visited);
        }
        
        for (int i = pos; i < nums.size(); ++i) {
            if (!visited.count(i) && nums[i] <= T - sum) {
                visited.insert(i);
                if (partition(nums, i+1, k, K, sum + nums[i], T, visited))
                    return true;
                visited.erase(i);
            }
        }
        return false;
    }
    
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = 0;
        int N = nums.size();    
    
        if (k == 0 && N == 0)
            return true;
        if (k == 0 || N == 0)
            return false;
        
        for (auto n : nums)
            sum += n;
        
        if (sum%k)
            return false;
        unordered_set<int> visited;
        return (partition(nums, 0, 0, k, 0, sum/k, visited));    
    }
};