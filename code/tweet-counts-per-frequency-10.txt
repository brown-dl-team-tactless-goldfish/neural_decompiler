class TweetCounts {
public:
    TweetCounts() {
        
    }
    
    void recordTweet(string tweetName, int time) {
        um[tweetName].push_back(time);
        sort(um[tweetName].begin(),um[tweetName].end());
    }
    
    vector<int> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime) {
        auto vec=um[tweetName];
        int interval;
        if(freq=="minute") interval=60;
        else if(freq=="hour") interval=3600;
        else interval=3600*24;
        vector<int> res((endTime-startTime+interval)/interval);
        for(auto v:vec){
            if(v-startTime<0) continue;
            if(v-endTime>0) break;
            res[(v-startTime)/interval]++;
        }
        return res;
    }
    
    unordered_map<string,vector<int>> um;
};

/**
 * Your TweetCounts object will be instantiated and called as such:
 * TweetCounts* obj = new TweetCounts();
 * obj->recordTweet(tweetName,time);
 * vector<int> param_2 = obj->getTweetCountsPerFrequency(freq,tweetName,startTime,endTime);
 */