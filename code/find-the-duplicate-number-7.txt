

int findDuplicate(int* nums, int numsSize) {
    int found_dup = 0;
    int n_found_dup = -1;
    int mid_count = 0;
    int lo = 1;
    int hi = numsSize - 1;
    int mid = lo;
    while (hi > lo) {
        mid = lo + (hi - lo) / 2;
        for (int i = 0; i < numsSize; i++) {
            mid_count += (nums[i] <= mid);
        }
        // mid_count should either be mid or something larger;
        // if smaller left is midcount; if larger then right is midcount
        // found_dup and n_found_dup are 0 and 1 or 1 and 0 respectively
        found_dup = -(mid_count > mid);
        n_found_dup = -(1 + found_dup);
        
        // Use negative since -1 => 11111... and -0 => 0000...
        hi = (mid & found_dup) | (hi & n_found_dup);
        lo = ((mid + (hi - lo == 1)) & n_found_dup) | (lo & found_dup);
        mid_count = 0;
    }
    
    return lo;
}