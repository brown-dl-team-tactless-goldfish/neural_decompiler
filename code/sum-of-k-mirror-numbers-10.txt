inline int64_t Reverse(int64_t i, int k) {
    int64_t result = 0;
    while (i > 0) {
        result *= k;
        result += i % k;
        i /= k;
    }
    return result;
}

struct Enumerator {
    Enumerator(int k_) : curr(1), k(k_), power(k_), n(1) {}
    
    inline int64_t Next() {
        int64_t result = curr;
        if (n % 2 == 0) {
            result *= power;
            result += Reverse(curr, k);
        } else {
            result *= power / k;
            result += Reverse(curr / k, k);
        }
        if (++curr == power) {
            if (n++ % 2 == 0) {
                power *= k;
            }
            curr = power / k;
        }
        return result;
    }
    
    int64_t curr;
    int64_t k;
    int64_t power;
    int n;
};

class Solution {
public:
    long long kMirror(int k, int n) {
        if (n == 0) {
            return 0;
        }
        Enumerator ek(k);
        Enumerator e10(10);
        int64_t a = ek.Next(), b = e10.Next();
        int64_t result = 0;
        while (n > 0) {
            if (a < b) {
                a = ek.Next();
            } else if (a > b) {
                b = e10.Next();
            } else {
                result += a;
                --n;
                a = ek.Next();
                b = e10.Next();
            }
        }
        return result;
    }
};