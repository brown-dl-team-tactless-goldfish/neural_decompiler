#define fastio ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
class TrieNode
{
  public:
    bool isWord;
    vector<TrieNode*> next;
    TrieNode()
    {
        isWord = false;
        next.resize(26,NULL);
    }
};
class Solution {
public:
    TrieNode* root = new TrieNode();

    void build(string &s)
    {
        TrieNode* p = root;
        for(char ch : s)
        {
            if(p->next[ch-'a']==NULL)
                p->next[ch-'a']=new TrieNode();
            p = p->next[ch-'a'];
        }
        p->isWord = true;
    }
    
    void dfsWithPrefix(TrieNode* curr , string &word , vector<string>&result)
    {
        if(result.size()==3)
            return;
        if(curr->isWord)
            result.push_back(word);
        for (char c = 'a'; c <= 'z'; c++)
            if (curr->next[c - 'a'])
            {
                word.push_back(c);
                dfsWithPrefix(curr->next[c - 'a'], word, result);
                word.pop_back();
            }
    }
    
    void findWordsStartingWithPrefix(string &prefix,vector<string>&result)
    {
        TrieNode* p = root;
        for(char ch : prefix)
        {
            if(p->next[ch-'a']==NULL)
               return;
            p = p->next[ch-'a'];
        }
        
        dfsWithPrefix(p,prefix,result);
    }
    
    vector<vector<string>> suggestedProducts(vector<string>& products, string searchWord) {
        fastio
        for(string word : products)
            build(word);
        vector<vector<string>>ans;
        string prefix="";
        for(char ch : searchWord)
        {
            prefix.push_back(ch);
            vector<string>result;
            findWordsStartingWithPrefix(prefix,result);
            ans.push_back(result);
        }
        return ans;
    }
};