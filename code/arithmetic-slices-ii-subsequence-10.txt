    public class Solution
    {
        public int NumberOfArithmeticSlices(int[] nums)
        {
            if (nums.Length <= 2)
            {
                return 0;
            }

            checked
            {

                Dictionary<long, Dictionary<int, int>>[] dp = new Dictionary<long, Dictionary<int, int>>[nums.Length];
                dp[0] = new Dictionary<long, Dictionary<int, int>>() {{0, new Dictionary<int, int>(){{1,1}}}};
                dp[1] = new Dictionary<long, Dictionary<int, int>>() {{(long)nums[1] - (long)nums[0], new Dictionary<int, int>(){{2,1}}}};

                int res = 0;

                for (int i = 2; i < nums.Length; i++)
                {
                    var curr = nums[i];
                    dp[i] = new Dictionary<long, Dictionary<int, int>>();

                    for (int j = 0; j < i; j++)
                    {
                        long diff = ((long)curr) - ((long)nums[j]);

                        if (j == 0)
                        {
                            dp[i].Add(diff, new Dictionary<int, int>(){{2,1}});
                            continue;
                        }

                        if (!dp[i].ContainsKey(diff))
                        {
                            dp[i].Add(diff, new Dictionary<int, int>());
                        }

                        if (dp[i][diff].ContainsKey(2))
                        {
                            dp[i][diff][2]++;
                        }
                        else
                        {
                            dp[i][diff][2] = 1;
                        }

                        if (dp[j].ContainsKey(diff))
                        {
                            var slices = dp[j][diff];
                            foreach (var pair in slices)
                            {
                                int slicesLength = pair.Key;
                                int slicesLengthCount = pair.Value;

                                int combinedSlice = slicesLength + 1;

                                if (dp[i][diff].ContainsKey(combinedSlice))
                                {
                                    dp[i][diff][combinedSlice] += slicesLengthCount;
                                }
                                else
                                {
                                    dp[i][diff][combinedSlice] = slicesLengthCount;
                                }

                                if (combinedSlice >= 3)
                                {
                                    res += slicesLengthCount;
                                }
                            }
                        }
                        
                    }
                }
                return res;
            }
        }
    }