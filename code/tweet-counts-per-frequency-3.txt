class TweetCounts {
private:
    unordered_map<string, map<int, int>>NameToTimeCount ;  //{ID, time to count}
    unordered_map<string, int>freqMap{{"minute", 60},{"hour", 60*60},{"day",24*60*60}};    
public:
    TweetCounts() {
    }
    
    void recordTweet(string tweetName, int time) {
        NameToTimeCount[tweetName][time]++ ;
    }
    
    vector<int> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime) {
        if(startTime > endTime)
            return {} ;
        int interval = freqMap[freq] ;
        int n = (endTime - startTime)/interval + 1 ;
        vector<int>ret(n) ;
        auto left = NameToTimeCount[tweetName].lower_bound(startTime) ;
        auto right = NameToTimeCount[tweetName].upper_bound(endTime) ;
        while(left != right){
            ret[(left->first - startTime)/interval] += left->second ;
            left++ ;
        }
        return ret ;
    }
};

/**
 * Your TweetCounts object will be instantiated and called as such:
 * TweetCounts* obj = new TweetCounts();
 * obj->recordTweet(tweetName,time);
 * vector<int> param_2 = obj->getTweetCountsPerFrequency(freq,tweetName,startTime,endTime);
 */