 public bool JudgePoint24(int[] nums) {
        //at the beginning
        //there are 12 pairs of nums; 4 operations; //some operations depends on the order; while other don't
        //once we combined one pair to 1 num, there there only 6 pairs left;
        //combine one more time two pairs left;
        //total number of operations is 12 * 4 * 6 *4 * 2 * 4 = 9216 operations;
        
        List<double> initlist = new List<double>();
        for(int i = 0; i < 4; i++)
            initlist.Add((double)nums[i]);
        
        return canmake(initlist);
    }
    public bool canmake(List<double> list) {
        if (list.Count==1) return Math.Abs(list[0]-24.0) < 0.0001;
        for(int  i = 0 ; i < list.Count; i++)
        {
            for(int j = i+1; j < list.Count; j++)
            {
                List<double> results = new List<double>();
                results.Add(list[i]+list[j]);
                results.Add(list[i]-list[j]);
                results.Add(list[j]-list[i]);
                results.Add(list[i]*list[j]);
                results.Add(list[i]/list[j]);
                results.Add(list[j]/list[i]);
                
                List<double> restnumbers = new List<double>();
                for(int k = 0; k < list.Count; k++)
                {
                    if (k!=i && k!=j)
                        restnumbers.Add(list[k]);
                }
                //group the results and restnumbers together
                foreach(double d in results)
                {
                    restnumbers.Add(d);
                    if(canmake(restnumbers)) return true;
                    restnumbers.RemoveAt(restnumbers.Count-1);
                }
            }
        }
        return false;
        
    }