
double knightProbability(int N, int K, int r, int c){
    if(N<=0 || K<0 || r<0 || r>=N || c<0 || c>=N) return 0;
    if(K==0) return 1;
    int rr[] = {1,1,2,2,-1,-1,-2,-2};
    int cc[] = {2,-2,1,-1,2,-2,1,-1};
    int i,j,l,p;
    
    double valid = 0;
    double total = (double) pow(8,K);
    double *** dp = malloc(sizeof(double**)*N);
    for(i=0;i<N;i++){
        dp[i] = malloc(sizeof(double*)*N);
        for(j=0;j<N;j++){
            dp[i][j] = calloc(K+1, sizeof(double));
        }
    }
    dp[r][c][0] = 1;
    for(i=1;i<=K;i++){
        for(j=0;j<N;j++){
            for(l=0; l<N; l++){
                for(p=0;p<8;p++){
                    int nr = j+rr[p];
                    int nc = l+cc[p];
                    if(nr>=0 && nr<N && nc>=0 && nc<N){
                        dp[j][l][i] += dp[nr][nc][i-1];
                    }
                }
                if(i==K){
                    valid += dp[j][l][i];
                }
            }
        }
    }
    for(i=0;i<N;i++){
        for(j=0;j<N;j++){
            free(dp[i][j]);
        }
        free(dp[i]);
    }
    free(dp);
    return valid / total;
}