#include <search.h>

struct point {  int x, y; };

struct el {
    struct point    p;
    char            key[8];     /* NUL-terminated to use as key */
};

#define DEBUG 0
#define MAX_COORD 40000

static void
point2key (const struct point p, char key[8])
{
    int val;
    
    val = p.x * (MAX_COORD + 1) + p.y;
    key[0] = 0x80 | (val >> 28);
    key[1] = 0x80 | (val >> 21);
    key[2] = 0x80 | (val >> 14);
    key[3] = 0x80 | (val >>  7);
    key[4] = 0x80 | (val >>  0);
    key[5] = 0x00;
}

static int
point_exists (struct point p)
{
    char key[8];
    
    point2key(p, key);
    return hsearch((ENTRY) { .key = key }, FIND) != NULL;
}

/* Assume all mallocs succeed */
int minAreaRect(int** points, int pointsSize, int* pointsColSize){
    struct el *els;
    int i, j, area, min_area = INT_MAX;
    
    els = malloc(pointsSize * sizeof(els[0]));
    hcreate(pointsSize);
    
    for (i = 0; i < pointsSize; ++i)
    {
        els[i].p.x = points[i][0];
        els[i].p.y = points[i][1];
        point2key(els[i].p, els[i].key);
        hsearch((ENTRY) { .data = &els[i], .key = els[i].key, }, ENTER);
    }
    
    for (i = 0; i < pointsSize; ++i)
        for (j = i + 1; j < pointsSize; ++j)
        {
            if (DEBUG)
                printf("examine diagonal [%d,%d] - [%d,%d]\n",
                    els[i].p.x, els[i].p.y, els[j].p.x, els[j].p.y);
            const struct point a = { els[i].p.x, els[j].p.y, },
                               b = { els[j].p.x, els[i].p.y, };
            if (els[i].p.x == els[j].p.x || els[i].p.y == els[j].p.y)
            {
                if (DEBUG)
                    printf("skip points [%d,%d] and [%d,%d]\n",
                        a.x, a.y, b.x, b.y);
                continue;
            }
            if (point_exists(a) && point_exists(b))
            {
                area = abs((els[i].p.y - els[j].p.y)
                         * (els[i].p.x - els[j].p.x));
                if (DEBUG)
                    printf("%d, %d: found points [%d,%d] and [%d,%d], area: %d\n",
                        i, j, a.x, a.y, b.x, b.y, area);
                if (area < min_area)
                    min_area = area;
            }
            else if (DEBUG)
                printf("points [%d,%d] and [%d,%d] don't exist\n",
                    a.x, a.y, b.x, b.y);
        }
    
    hdestroy();
    free(els);
    
    return min_area < INT_MAX ? min_area : 0;
}