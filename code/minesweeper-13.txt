public class Solution {
    
    int[][] directions = new int[][] {
        new int[2] {-1, -1},
        new int[2] {-1, 0},new int[2] {-1, 1},new int[2] {0, 1},new int[2] {1, 1},
        new int[2] {1, 0},new int[2] {1, -1},new int[2] {0, -1},
    };
    public char[][] UpdateBoard(char[][] board, int[] click) {
        
        dfs(board, click[0], click[1]);
        return board;
    }
    
    private void dfs(char[][] board, int r, int c )
    {        
        if(r < 0 || r >= board.Length || c < 0 || c >= board[0].Length || board[r][c] == 'B')
            return;
        
        if(board[r][c] == 'M')
        {
            board[r][c] = 'X';
            return;
        }
        int mineCount = GetMineCount(board, r, c);
        if(mineCount > 0)
        {
            board[r][c] = (char)('0' + mineCount);
            return;
        }
        if(mineCount == 0)
        {
            board[r][c] = 'B';
            foreach(var dir in directions){
                dfs(board, r + dir[0], c + dir[1]);
            }
        }
            
    }
    
    private int GetMineCount(char[][] board, int r, int c)
    {
        int count = 0;
        foreach(var dir in directions)
        {
            int row = r + dir[0];
            int col = c + dir[1];
            if(row >= 0 && row < board.Length && col >= 0 && col < board[0].Length && board[row][col] == 'M')
                count++;
        }
        return count;
    }
}