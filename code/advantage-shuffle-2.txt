typedef struct
{
    int indice;
    int value;
} Node;

int CmpIntArray(const void *a, const void *b)
{
    return *(int *)a - *(int *)b;
}

int CmpNodeArray(const void *a, const void *b)
{
    return (*(Node *)a).value - (*(Node *)b).value;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int *advantageCount(int *A, int ASize, int *B, int BSize, int *returnSize)
{
    if (A == NULL || B == NULL || returnSize == NULL)
    {
        return NULL;
    }
    if (ASize == 0 || BSize == 0) {
        *returnSize = 0;
        return NULL;
    }
    int start, end, cursor;
    Node BMap[BSize];

    for (int i = 0; i < BSize; i++)
    {
        BMap[i].indice = i;
        BMap[i].value = B[i];
    }

    qsort(A, ASize, sizeof(int), CmpIntArray);
    qsort(BMap, BSize, sizeof(Node), CmpNodeArray);

    int *result = (int *)malloc(BSize * sizeof(int));
    if (result == NULL)
    {
        return NULL;
    }
    start  = 0;
    end    = BSize - 1;
    cursor = end;
    
    while(start <=end) {
        if (A[end] > BMap[cursor].value)
        {
            result[BMap[cursor].indice] = A[end--];
        }
        else
        {
            result[BMap[cursor].indice] = A[start++];
        }
        cursor--;
    }

    *returnSize = BSize;
    return result;
}