class Solution {
public:
    int maxAreaRectangle(vector<int> &arr){
        
        vector<int>left , right ;
        int ans = 0 , n = arr.size() ;
        stack<int> st ;
        
        //Find next smaller element on left 
        for(int i = 0 ; i < n ; ++i ){
            while(st.size() and arr[st.top()] >= arr[i]) st.pop() ;
            if(st.empty()) left.push_back(-1) ;
            else left.push_back(st.top()) ;
            st.push(i) ;
        }
        
        while(st.size()) st.pop() ;
        
        //Find next smaller element on right 
        for(int i = n - 1 ; i >= 0  ; --i ){
            while(st.size() and arr[st.top()] >= arr[i]) st.pop() ;
            if(st.empty()) right.push_back(n) ;
            else right.push_back(st.top()) ;
            st.push(i) ;
        }
        reverse(begin(right),end(right)) ;
        
        //Find Area = Width * Height
        for(int i = 0 ; i < n ; ++ i) ans = max(ans , (right[i] - left[i] - 1) * arr[i] ) ;
        
        return ans ;
    }
    
    int largestSubmatrix(vector<vector<int>>& grid ) {
        
        int r = grid.size() , c = grid[0].size() ;
        vector<vector<int>> mat(r,vector<int>(c,0) ) ; 
        int ans = 0 ;
        
		// Build Histogram -> adding from top to bottom 
        for(int j = 0 ; j < c ; ++j ){
            for(int i = 0 ; i < r ; ++i ){
                if(i==0) mat[i][j] = grid[i][j] ;
                else mat[i][j] = mat[i-1][j] + grid[i][j] ;
                
                if(grid[i][j] == 0) mat[i][j] = 0 ;
            }
        }
        
		// Sort each row to get maximum area possible
        for(int i = 0 ; i < r ; ++i ){
            sort(begin(mat[i]),end(mat[i])) ;
            ans = max(ans,maxAreaRectangle(mat[i])) ;
        }
        
        return ans ;
        
    }
};