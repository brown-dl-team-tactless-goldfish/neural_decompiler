class Solution {
public:
    int findNeedPos(int s, int e, int k, int i, vector<vector<int>> &dp) 
    {
        
        while (s < e) { 
            int m = (s + e) / 2;
            if (dp[m][k-1] > dp[i-(m+1)][k])
                e = m;
            else if (dp[m][k-1] == dp[i-(m+1)][k])
                return m;
            else
                s = m + 1;
        } 
        return s;
    }

    int superEggDrop(int K, int N) {

        vector<vector<int>> dp(N+1, vector<int>(K+1, 0));

        for (int i = 1; i <= N; i++) {
            dp[i][1] = i;
        }        
        for (int i = 1; i <= K; i++) {
            dp[1][i] = 1;
            dp[0][i] = 1;
        }        

        for (int i = 2; i <= N; i++) {
            for (int k = 2; k <= K; k++) {
                int minimal = INT32_MAX;
                pr(i,k);
                // need to find a j that dp[j][k-1] > dp[i-(j+1)[k]
                int j = findNeedPos(1, i-2, k, i, dp) ;
                minimal = max(dp[j][k-1], dp[i-(j+1)][k]) + 1;
                pr(i, k);
                pr(i, minimal);
                dp[i][k] =  minimal;
            }
        }
#if 0
        for(int i =1; i <= N; i++) {
            for(int j =1; j <= K; j++) 
            {
                cout << dp[i][j] << "  " ;
            }
            cout << endl;
        }
#endif

        return dp[N][K];
    }
};