/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

typedef struct {
    int depth;
    struct TreeNode  *parent;
} search_result_t;

int search(struct TreeNode *node, int val, int depth, struct TreeNode *parent,
           search_result_t *result);


bool isCousins(struct TreeNode* root, int x, int y) {
    search_result_t  xinfo, yinfo;
    
    if (x + y <= 5) {
        return false;
    }
    
    search(root, x, 0, NULL, &xinfo);
    search(root, y, 0, NULL, &yinfo);
    
    return ((xinfo.parent != NULL && yinfo.parent != NULL) && (xinfo.depth == yinfo.depth)
            && (xinfo.parent->val != yinfo.parent->val));
}

int
search(struct TreeNode *node, int val, int depth, struct TreeNode *parent,  search_result_t *result)
{
    if (node == NULL) {
        return 0;
    }
    
    if (node->val == val) {
        result->depth = depth;
        result->parent = parent;
        
        return 1;
    }
    
    return search(node->left, val, depth + 1, node, result) 
           || search(node->right, val, depth + 1, node, result);
}