    int longestSubarray(vector<int>& nums, int limit) {
        // we use slide window to find the maximum length of the subarray
        // left and right are the indexes of the nums, initially they are all 0
        // we slide right index to the right, if the max value minus min value is larger than limit in the range of [left, right]
        // we slide left to right, until and difference between max value and min value in the range of [left, right] is less than or equal to limit
        // we can compare the length with the result, to see whether it's longer
        // we use two monotonic queues to keep max and min values in the range of [left, right]
        int res = 0;
        int left = 0;
        deque<int> maxQ;
        deque<int> minQ;
        for (int right = 0; right < nums.size(); right++) {
            while (maxQ.size() > 0 && nums[maxQ.back()] < nums[right]) {
                maxQ.pop_back();
            }
            maxQ.push_back(right);
            while (minQ.size() > 0 && nums[minQ.back()] > nums[right]) {
                minQ.pop_back();
            }
            minQ.push_back(right);
            while (nums[maxQ.front()] - nums[minQ.front()] > limit) {
                if (maxQ.front() == left) {
                    maxQ.pop_front();
                }
                if (minQ.front() == left) {
                    minQ.pop_front();
                }
                left++;
            }
            res = max(res, right - left + 1);
        }
        return res;
    }