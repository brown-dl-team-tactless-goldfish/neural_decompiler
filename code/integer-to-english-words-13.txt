class Solution {
public:
    unordered_map<long,string> m;
    
    void initMap() {
        m[1] = "One";
        m[2] = "Two";
        m[3] = "Three";
        m[4] = "Four";
        m[5] = "Five";
        m[6] = "Six";
        m[7] = "Seven";
        m[8] = "Eight";
        m[9] = "Nine";
        m[10] = "Ten";
        m[11] = "Eleven";
        m[12] = "Twelve";
        m[13] = "Thirteen";
        m[14] = "Fourteen";
        m[15] = "Fifteen";
        m[16] = "Sixteen";
        m[17] = "Seventeen";
        m[18] = "Eighteen";
        m[19] = "Nineteen";
        m[20] = "Twenty";
        m[30] = "Thirty";
        m[40] = "Forty";
        m[50] = "Fifty";
        m[60] = "Sixty";
        m[70] = "Seventy";
        m[80] = "Eighty";
        m[90] = "Ninety";
        m[100] = "Hundred";
        m[1000] = "Thousand";
        m[1000000] = "Million";
        m[1000000000] = "Billion";
    }
    
    string normal3(string n, int& i) {
        string ans = "";
        int j = 0;
        while(j<3 && i>=0) {
            if(j%3 == 0) {
                ans =  m[n[i] - '0'] + ans;
            } else if(j%3 == 1) {
                ans =  m[(n[i] - '0') * 10] + ans;
            } else {
                ans =  m[n[i] - '0'] +  (n[i] == '0' ? "":m[100]) + ans;
            }
            i--;
            j++;
        }
        return ans;
    }
    
    string special3(string n, int &i) {
        string ans = "";
        int j = 0;
        while(j<3 && i>=0) {
            if(j%3 == 1) {
                ans =  m[(n[i] - '0') * 10 + (n[i+1] - '0')] +  ans;
            } else if(j%3 == 2) {
                ans =  m[n[i] - '0'] +  (n[i] == '0' ? "":m[100]) + ans;
            }
            i--;
            j++;
        }
        return ans;
    }
    
    string numberToWords(int num) {
        if(num == 0)return "Zero";
        initMap();
        string ans = "";
        long long mul = 1;
        string n = to_string(num);
        int i = n.length() - 1;
        while(i >= 0) {
            string cur = "";
            if((i-1>=0 && n[i-1] != '1') || i==0) {
                cur = normal3(n,i);
            } else {
                cur = special3(n,i);
            }
            
            if(mul > 1) {
                cur += (cur==""?"":m[mul]); 
            }
            ans = cur + ans;
            mul *= 1000;
        }
        return process(ans);
    }
    
    string process(string s) {
        string res = "";
        res += s[0];
        for(int i = 1;i<s.length();i++) {
            char c = s[i];
            if(isupper(c)) {
                res += " ";
                res += c;
            } else {
                res += c;
            }
        }
        return res;
    }
};