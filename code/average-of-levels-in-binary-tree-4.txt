/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int height(struct TreeNode* root) {
    if (root == NULL)
        return 0;
    else {
        int lheight = height(root->left);
        int rheight = height(root->right);
 
        if (lheight > rheight)
            return (lheight + 1);
        else
            return (rheight + 1);
    }
}

long long sumCurrentLevel(struct TreeNode* root, int level, int *count) {
    if (root == NULL)
        return 0;

    long long sum = 0;
    if (level == 1) {
        sum = root->val;
        (*count)++;
    }
    else if (level > 1) {
        sum += sumCurrentLevel(root->left, level - 1, count);
        sum += sumCurrentLevel(root->right, level - 1, count);
    }

    return sum;
}

double* averageOfLevels(struct TreeNode* root, int* returnSize){
    int i, h = height(root), count;
    double *ans = (double*)malloc(sizeof(double) * h);
    long long sum;

    *returnSize = h;

    for (i = 1; i <= h; i++) {
        count = 0;
        sum = sumCurrentLevel(root, i, &count);
            //printf("sum : %d count : %d\n", sum, count);
        ans[i - 1] = ((double)sum / (double)count);
    }

    return ans;
}