//2D array sorting
int cmpfunc(const void* a, const void*b){
    int* arr1 = *(int**)a;
    int* arr2 = *(int**)b;
    return arr1[1] - arr2[1];
}

//find first item >= val
int BinarySearch(int* nums, int n, int val){
    int left = 0, right = n-1;
    int mid;
    if(val <= nums[0])
        return 0;
    while(left < right){
        mid = left + (right - left)/2;
        if(nums[mid] == val)
            return mid;
        if(nums[mid] > val)
            right = mid;
        else
            left = mid + 1;
    }
    
    return left;
}

//find val if exist in nums[i][1]
int BSF(int** nums, int n, int val){
    int left = 0, right = n -1;
    if(val < nums[0][1] || val > nums[n-1][1])
        return -1; 
    int mid;
    while(left < right){
        mid = left + (right - left)/2;
        if(nums[mid][1] == val)
            return nums[mid][0];
        if((nums[mid][1] > val))
            right = mid -1;
        else
            left = mid + 1;
    }
    if(nums[left][1] == val)
        return nums[left][0];
    return -1;
}

int minOperations(int* target, int targetSize, int* arr, int arrSize){
    int t = targetSize, a = arrSize;
    int** copyTarget = malloc( t * sizeof(int*));
    for(int i = 0; i < t; i++){
        copyTarget[i] = malloc(2 * sizeof(int));
        copyTarget[i][0] = i;
        copyTarget[i][1] = target[i];
    }    
    qsort(copyTarget, t, sizeof(int*), cmpfunc);
    int idx = 0;
    //arr save the position relatie to target
    for(int i = 0; i < a; i++){
        int pos = BSF(copyTarget, t, arr[i]);
        if(pos != -1){
            arr[idx] = pos;
            idx++;
        }
    }
    if(idx == 0)
        return t;
    //find arr: the longest strictly increasing subsequence
    int* stack = malloc(idx * sizeof(int));
    stack[0] = arr[0];
    int s_id = 1;
    for(int i = 1; i < idx; i++){
        if(arr[i] > stack[s_id-1]){            
            stack[s_id] = arr[i];
            s_id++;
        }
        else{
            int z = BinarySearch(stack, s_id, arr[i]);
            stack[z] = arr[i];
        }
    }
    
    return t - s_id ;
}