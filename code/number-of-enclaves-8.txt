void numEnclaves_Recursion(int** grid, int gridSize, int* gridColSize, int i, int j){    
    grid[i][j] = 2;
    
    if(i>0 && grid[i-1][j]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, i-1, j);
    if(i<gridSize-1 && grid[i+1][j]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, i+1, j);
    if(j>0 && grid[i][j-1]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, i, j-1);
    if(j<*gridColSize-1 && grid[i][j+1]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, i, j+1);
}

int numEnclaves(int** grid, int gridSize, int* gridColSize){
    if((gridSize==0)||(* gridColSize==0)) return 0;
        
    int i, j;    
    for(i=0;i<gridSize;i++){
        if(grid[i][0]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, i, 0);
        if(grid[i][* gridColSize-1]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, i, * gridColSize-1);
    }
     for(j=0;j<* gridColSize;j++){
        if(grid[0][j]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, 0, j);
        if(grid[gridSize-1][j]==1) numEnclaves_Recursion(grid, gridSize, gridColSize, gridSize-1, j);
    }  
    	
    int result = 0;
    for(i=0;i<gridSize;i++){
        for(j=0;j<* gridColSize;j++){
            if(grid[i][j]==1) result+= 1;            
        }        
    }
    return result;    
}
