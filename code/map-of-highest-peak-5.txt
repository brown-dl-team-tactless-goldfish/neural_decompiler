int rowDelta[] = { 0, +1, 0, -1 };
int colDelta[] = { +1, 0, -1, 0 };

class Solution
{
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater)
    {
        int R = isWater.size();
        int C = isWater[0].size();
                
        queue<pair<int, int>> q;
        
        for (int r = 0; r < R; ++r)
            for (int c = 0; c < C; ++c)
                if (isWater[r][c] == 1)
                    isWater[r][c] = 0,
                    q.push({ r, c });   // add as a starting point
                else
                    isWater[r][c] = -1; // mark unvisited
        
        while (q.size() > 0)
        {
            int r = q.front().first;
            int c = q.front().second;
            q.pop();
            
            for (int d = 0; d < 4; ++d)
            {
                int nr = r + rowDelta[d];
                int nc = c + colDelta[d];
                
                if (nr < 0 ||
                    nr == R ||
                    nc < 0 ||
                    nc == C ||
                    isWater[nr][nc] != -1)
                        continue;
                
                isWater[nr][nc] = isWater[r][c] + 1;
                q.push({ nr, nc });
            }
        }
        
        return isWater;
    }
};