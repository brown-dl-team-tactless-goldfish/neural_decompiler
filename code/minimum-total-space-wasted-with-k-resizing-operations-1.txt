class Solution {
public:
    int minSpaceWastedKResizing(vector<int>& nums, int k) {
        size_t size{nums.size()};
        std::vector<std::vector<int>> dp(k+1, std::vector<int>(size+1, 99999999)), maxDiff(size, std::vector<int>(size, 0));
        int max_{-1}, prevMax{-1}, sum{0};
        for (int i{0}; i < size-1; ++i) {
            max_ = nums[i];
            prevMax = max_;
            sum = 0;
            for (int j{i+1}; j < size; ++j) {
                max_ = std::max(max_, nums[j]);
                if (prevMax == max_) {
                    sum += max_ - nums[j];
                } else {
                    sum += (j - i) * (max_ - prevMax);
                }
                maxDiff[i][j] = sum;
                prevMax = max_;
            }
        }
        
        if (k == size-1) return 0;
        
        for (int i{1}; i <= size; ++i) {
            dp[0][i] = maxDiff[0][i-1];
        }
        
        for (int i{1}; i <= k; ++i) {
            for (int j{1}; j <= size; ++j) {
                for(int n{1}; n <= j; ++n) {
                    dp[i][j] = std::min(dp[i][j], dp[i-1][n-1] + maxDiff[n-1][j-1]);
                }
            } 
        }
        
        return dp[k][size];
    }
};