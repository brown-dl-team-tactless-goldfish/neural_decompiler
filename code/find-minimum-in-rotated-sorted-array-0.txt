int findMin(int* nums, int numsSize){
    int r = numsSize-1, l=0, mid = r/2;
    if (numsSize == 1) // only one element
        return nums[0];
    
    while (l <= r)
    {
        mid = l+(r-l)/2;
        if (mid == 0) // if mid is the first - must be that there are only two elements
            return nums[0] < nums[1] ? nums[0]:nums[1];
        
        if (nums[l] < nums[r]) // got a part that is not rotated
            return nums[l];
            
        else if (nums[mid] < nums[mid-1]) // the element in the left is larger - we got to the minimum
            return nums[mid];

        else if (nums[mid] > nums[r]) // mid is larger than right - min is in right side
            l = mid+1;
        
        else if (nums[mid] < nums[l]) // mid is smaller than left - min is in left side
            r = mid-1;
    }
    return nums[0];
}