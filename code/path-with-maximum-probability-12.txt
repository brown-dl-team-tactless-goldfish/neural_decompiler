class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        using ip = pair<int, double>;
        vector<vector<ip>> adj(n);
        for (int i = 0; i < edges.size(); i++) {
            adj[edges[i][0]].push_back({edges[i][1], succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        queue<ip> pq;
        vector<double> dist(n, 0.0);
        dist[start] = 1.0;
        pq.push({1.0, start});
        while (!pq.empty()) {
            auto [cprob, node] = std::move(pq.front());
            pq.pop();
            for (auto& [next, prob] : adj[node]) {
                if (dist[next] < dist[node] * prob) {
                    dist[next] = dist[node] * prob;
                    pq.push({dist[next], next});
                }
            }
        }
        return dist[end];
    }
};