class Solution {
public:
    int findSubstringInWraproundString(string s) {
        int n = s.size() ;
        vector<int>alpha(26) ;
        int maxLength = 1 ;
        for(int i = 0; i < n; i++){
            if(i > 0 && (s[i-1] -'a' + 1) % 26 == (s[i] -'a') )
                maxLength++ ;
            else
                maxLength = 1 ;
            alpha[s[i] -'a'] = max(alpha[s[i] -'a'], maxLength) ;
        }
        
        return accumulate(alpha.begin(), alpha.end(), 0) ;
    }
};