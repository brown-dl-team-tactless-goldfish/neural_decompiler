class Solution {
private:
     int getMaxLevel(unordered_map<int, vector<int>>& mp, int root) {       
        unordered_set<int> st;
        queue<int> q;
        q.push(root);
        st.insert(root);
        
        int level = 0;
        while (!q.empty()) {
            int k = q.size();
            while (k > 0) {
                int node = q.front();
                q.pop();
                vector<int> children = mp[node];
                for (const int& child: children) {
                    if (st.find(child) == st.end()) {
                        q.push(child);
                        st.insert(child);
                    }
                }    
                --k;
            }
            ++level;
        }
        
        return level - 1;
    }       
public:
    int amountOfTime(TreeNode* root, int start) {
        if (root->left == nullptr && root->right == nullptr) {
            return 0;
        }
        
        unordered_map<int, vector<int>> mp;

        queue<TreeNode*> q;
        q.push(root);
  
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if (node->left!= nullptr) {
                mp[node->val].push_back(node->left->val);
                mp[node->left->val].push_back(node->val);
                q.push(node->left);
            }
            if (node->right!= nullptr) {
                mp[node->val].push_back(node->right->val);
                mp[node->right->val].push_back(node->val);
                q.push(node->right);
            }            
        }
        
        return getMaxLevel(mp, start);
    }
};