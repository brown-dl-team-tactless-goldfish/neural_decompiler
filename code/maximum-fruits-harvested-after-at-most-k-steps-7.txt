class Solution {
public:
  int maxTotalFruits(vector<vector<int>>& f, int sP, int k) {
    int ans = 0, n = f.size(), l, r, dis, dif = 0;
    int id = upper_bound(f.begin(), f.end(), sP-1, [](int val, const vector<int> &a){return val < a[0];}) - f.begin();
    vector<pair<int,int>>left = {{0,0}}, right = {{0,0}};
    
    if(id != n && f[id][0] == sP) dif = right[0].second = left[0].second = f[id][1], l = id - 1, r = id + 1;
    else l = id - 1, r = id;
    
    while(r < n)
      if( (dis = f[r][0] - sP) <= k) right.push_back({dis, right.back().second + f[r++][1]});
      else break;  
    
    while(l >= 0)
      if( (dis = sP - f[l][0]) <= k) left.push_back({dis, left.back().second + f[l--][1]});
      else break;  

    for(r = 0, l = left.size()-1; r != right.size(); r++){         //to right
      int rest = (k - right[r].first)>>1;
      while(left[l].first > rest) l--;
      ans = max(ans, right[r].second + left[l].second);
    }
    
    for(l = 0, r = right.size()-1; l != left.size(); l++){         //to left
      int rest = (k - left[l].first)>>1;
      while(right[r].first > rest) r--;
      ans = max(ans, right[r].second + left[l].second);
    }
    
    return ans - dif;
  }
};