class Solution {
public:
    int diagonalPrime(vector<vector<int>>& nums) {
        int maxPrime = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            if(isPrime(nums[i][i]))
                maxPrime = max(maxPrime, nums[i][i]);
            if(i != n - 1 - i && isPrime(nums[i][n - 1 - i]))
                maxPrime = max(maxPrime, nums[i][n - 1 - i]);
        }
        return maxPrime;
    }
    
    bool isPrime(int x) {
        if(x < 2)
            return false;
        if(x == 2 || x == 3)
            return true;
        if(x % 2 == 0 || x % 3 == 0)
            return false;
        int divisor = 5;
        while(divisor * divisor <= x) {
            if(x % divisor == 0 || x % (divisor + 2) == 0)
                return false;
            divisor += 6;
        }
        return true;
    }
};
