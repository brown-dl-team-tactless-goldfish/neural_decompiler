class Solution {
public:
    int m=1e9+7,ub;
    int dp[10001][2][2];
    int countHousePlacements(int n) {
        memset(dp,-1,sizeof(dp));
        ub=n;
        return helper(1,false,false);
    }
   long helper(int idx,int up,int low ){
        if(idx==ub+1)
            return 1;
        if(dp[idx][up][low]!=-1)
            return dp[idx][up][low];
        long ans=0;
        if(up==false && low==false){
           ans= helper(idx+1,true,true)+ helper(idx+1,true,false)+ helper(idx+1,false,true)+helper(idx+1,false,false);
        }
        else if(up && !low){
           ans= helper(idx+1,false,true)+ helper(idx+1,false,false);
        }
        else if(!up && low){
           ans= helper(idx+1,true,false)+helper(idx+1,false,false);            
        }
        else
           ans+= helper(idx+1,false,false);            
        ans%=m;
        dp[idx][up][low]=ans;
       return ans;
    }
};