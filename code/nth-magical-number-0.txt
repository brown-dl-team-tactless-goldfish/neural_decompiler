uint64_t max(uint64_t a, uint64_t b, uint64_t c)
{
    return a > b ? (c > a ? c : a) : (c > b ? c : b);
}

int gcd(int a, int b)
{
     return b == 0 ? a : gcd(b, a % b);
}

int nthMagicalNumber(int N, int A, int B){
    uint64_t upper = (A > B) ? (uint64_t)N * B : (uint64_t)N * A;
    uint64_t lower = 2;
    uint64_t lcm = A * B / gcd(A, B);

    uint64_t mid = (upper + lower) / 2;
    while (upper > lower)
    {
        int k = mid / A + mid / B - mid / lcm;
        if (k > N)
        {
            upper = mid;
            mid = (upper + lower) / 2;
        }
        if (k < N)
        {
            lower = mid;
            mid = (upper + lower + 1) / 2;
        }
        if (k == N)
            break;
    }

    return max(mid - mid % A, mid - mid % B, mid - mid % lcm) % 1000000007;
}