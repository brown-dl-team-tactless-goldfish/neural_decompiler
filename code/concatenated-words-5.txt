class Solution
{
private:

    struct trie
    {
        trie* children[26] = {};
        bool eow = false;
        ~trie()
        {
            for (auto t : children) delete t;
        }
    };

    bool addToTrie(trie* root, const string& w)
    {
        auto l = w.size();
        stack<short> stack;

        auto el = root;
        for (auto i = 0; i < l; ++i)
        {
            auto idx = w[i] - 'a';
            if (el->children[idx] == NULL)
            {
                el->children[idx] = new trie();
            }

            el = el->children[idx];

            if (el->eow) // check if w can be represented by existing words in the trie.
            {
                auto start = i + 1;
                auto el2 = el;
                stack.push(i + 1);

                while (true)
                {
                    for (auto j = start; j < l; ++j)
                    {
                        el2 = el2->children[w[j] - 'a'];
                        if (el2 == NULL) break;
                        if (el2->eow && stack.size() < 5) stack.push(j + 1); // limiting the recursion depth.
                    }

                    if (el2 != NULL && el2->eow) return true; // this word can be comprised entirely.
                    if (stack.empty()) break;

                    start = stack.top();
                    el2 = root;
                    stack.pop();
                }
            }
        }

        el->eow = true;
        return false; // brand new word was added to the tree (cannot be comprised).
    }

public:

    vector<string> findAllConcatenatedWordsInADict(vector<string>& words)
    {
        sort(words.begin(), words.end(), [](string& a, string& b)
        {
            auto as = a.size();
            auto bs = b.size();
            return (as != bs ? as < bs : a < b); // the stable sort seems to improve the runtime.
        });

        trie root;
        vector<string> res;

        for (auto w : words)
        {
            if (addToTrie(&root, w))
            {
                res.push_back(w);
            }
        }

        return res;
    }
};