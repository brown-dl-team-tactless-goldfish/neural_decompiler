public class Solution {
    public int BalancedString(string s) {
        Dictionary<char,int> map = new Dictionary<char,int>();
        map.Add('Q',0);
        map.Add('W',0);
        map.Add('E',0);
        map.Add('R',0);
        foreach(char c in s)
        {
            ++map[c];
        }
        int needed = s.Length / 4;
        int left = 0;
        int right = 0;
        int res = s.Length;
        while(right <= s.Length)//for the corner case "WQWRQQQW" which the last element will influence the whole process
        {
            if(map['Q'] > needed || map['W'] > needed || map['E'] > needed || map['R'] > needed)
            {
                if(right >= s.Length)
                {
                    return res;
                }
                --map[s[right]];
                ++right;
            }
            else
            {
                res = Math.Min(res,right - left);
                if(res == 0){return res;}
                ++map[s[left]];
                ++left;
            }
        }
        return res;
    }
}