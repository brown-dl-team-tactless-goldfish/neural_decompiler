class Solution {
    class SegTree {
        vector<int> st;
        int siz;

        void upd(int i, int k) {
            i += siz;
            st[i]+= k;
            i /= 2;
            while (i > 0) {
                st[i] = st[i * 2] + st[i * 2 + 1];
                i /= 2;
            }
        }
        int qry(int l, int r) {
            l += siz;
            r += siz;
            int ans = 0;
            while (l <= r) {
                if (l % 2 == 1) ans += st[l++];
                if (r % 2 == 0) ans += st[r--];
                l /= 2;
                r /= 2;
            }
            return ans;
        }

       public:
        SegTree(int n) {
            n++;
            siz = 1 << int(ceil(log2(n)));
            st.resize(siz * 2, 0);
        }
        int query(int i) {  // elements shifted from 0 to i -> prefix sum from 0 to i
            return qry(0, i);
        }
        void update(int i) {  // shift ith element to first position -> add 1 to 0 to i
            upd(0, 1);
            upd(i + 1, -1);
        }
    };

   public:
    string minInteger(string s, int k) {
        int n = s.size();
        vector<vector<int>> pos(10);
        for (int i = 0; i < n; i++)
            pos[s[i] - '0'].push_back(i);
        for (int dig = 0; dig < 10; dig++)
            reverse(pos[dig].begin(), pos[dig].end());
        SegTree st(n);
        string ans;
        int i = 0;
        while (k > 0 && i < n) {
            for (int dig = 0; dig < 10; dig++) {
                if (pos[dig].empty()) continue;
                int p = pos[dig].back();
                int actual = p + st.query(p);
                if (actual <= i + k) {
                    pos[dig].pop_back();
                    ans += to_string(dig);
                    st.update(p);
                    k -= actual - i;
                    break;
                }
            }
            i++;
        }
        vector<pair<int, int>> v;
        for (int dig = 0; dig < 10; dig++) {
            while (pos[dig].size()) {
                v.push_back({pos[dig].back(), dig});
                pos[dig].pop_back();
            }
        }
        sort(v.begin(), v.end());
        for (auto &[p, d] : v)
            ans += to_string(d);

        return ans;
    }
};