class Solution {
    
    int dfs(int target, int n, int k, int (&memo)[1000][31]){
        if (target > n*k or target < n or n < 0) return 0;
        if (target == 0 and n == 0) return 1;
        
        int ans = 0, mod = pow(10,9)+7;
        
        if (memo[target][n] != -1) return memo[target][n];
        
        for (int i = k; i >0; i += -1){
            target += -i;
            ans += dfs(target, n-1, k, memo);
            ans = ans%mod;
            target +=  i;
        }
        
        memo[target][n] = ans%mod;
        return memo[target][n];
    }
    
public:
    int numRollsToTarget(int n, int k, int target) {
        int memo[1000][31];
        for (int r = 0; r < 1000; r += 1)
            for (int c = 0; c < 31; c += 1)
                memo[r][c] = -1;
        
        return dfs(target, n, k, memo);
    }
};