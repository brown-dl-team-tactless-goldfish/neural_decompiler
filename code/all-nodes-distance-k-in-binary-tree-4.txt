/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    class Node{
        TreeNode node;
        int level;
        public Node(TreeNode node,int level){
            this.node=node;
            this.level=level;
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> list=new ArrayList<>();
        if(root==null)
            return list;
        HashMap<TreeNode,TreeNode> parentHashMap=getParent(root);
        HashSet<TreeNode> hashSet=new HashSet<>();
       
        Queue<Node> q=new LinkedList<>();
        q.add(new Node(target,0));
        while(!q.isEmpty()){
            Node temp=q.poll();
            int level=temp.level;
           
            if(!hashSet.contains(temp.node)){
                 if(level==K){
                list.add(temp.node.val);
            }
                if(temp.node.left!=null){
                    q.add(new Node(temp.node.left,level+1));
                }
                if(temp.node.right!=null){
                    q.add(new Node(temp.node.right,level+1));
                }
                TreeNode parent=parentHashMap.get(temp.node);
                if(parent!=null){
                    q.add(new Node(parent,level+1));
                }
                hashSet.add(temp.node);
            }
        }
        return list;
    }
    public  HashMap<TreeNode,TreeNode> getParent(TreeNode root){
        HashMap<TreeNode,TreeNode> hashMap=new HashMap<>();
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        hashMap.put(root,null);
        while(!q.isEmpty()){
            TreeNode parent=q.poll();
            if(parent.left!=null){
                hashMap.put(parent.left,parent);
                q.add(parent.left);
            }
            if(parent.right!=null){
                hashMap.put(parent.right,parent);
                q.add(parent.right);
            }
        }
        return hashMap;
    }
}