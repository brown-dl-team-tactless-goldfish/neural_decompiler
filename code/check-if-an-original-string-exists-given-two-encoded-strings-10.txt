class Solution {
public:
    bool possiblyEquals(string s1, string s2) {
        int m = s1.size(), n = s2.size(); 
        
        auto gg = [](string s) {
            vector<int> ans = {stoi(s)}; 
            if (s.size() >= 2) ans.push_back(stoi(s.substr(0, 1)) + stoi(s.substr(1))); 
            if (s.size() == 3) {
                ans.push_back(stoi(s.substr(0, 2)) + s[2] - '0'); 
                ans.push_back(s[0] - '0' + s[1] - '0' + s[2] - '0'); 
            }
            return ans; 
        }; 
        
        int memo[41][41][2000] = {0}; 
        
        function<int(int, int, int)> fn = [&](int i, int j, int diff) {
            if (!memo[i][j][1000+diff]) {
                memo[i][j][1000+diff] = 1; 
                if (i == m && j == n) {
                    if (diff == 0) memo[i][j][1000+diff] = 2; 
                } else if (i < m && isdigit(s1[i])) {
                    int ii = i; 
                    for (; ii < m && isdigit(s1[ii]); ++ii); 
                    for (auto& x : gg(s1.substr(i, ii-i))) 
                        if (fn(ii, j, diff-x) == 2) {
                            memo[i][j][1000+diff] = 2; 
                            break; 
                        }
                } else if (j < n && isdigit(s2[j])) {
                    int jj = j; 
                    for (; jj < n && isdigit(s2[jj]); ++jj); 
                    for (auto& x : gg(s2.substr(j, jj-j))) 
                        if (fn(i, jj, diff+x) == 2) {
                            memo[i][j][1000+diff] = 2; 
                            break; 
                        }
                } else if (diff == 0) {
                    if (i < m && j < n && s1[i] == s2[j]) memo[i][j][1000+diff] = fn(i+1, j+1, 0); 
                } else if (diff > 0) {
                    if (i < m) memo[i][j][1000+diff] = fn(i+1, j, diff-1); 
                } else {
                    if (j < n) memo[i][j][1000+diff] = fn(i, j+1, diff+1); 
                }
            }
            return memo[i][j][1000+diff]; 
        }; 
        
        return fn(0, 0, 0) == 2; 
    }
};