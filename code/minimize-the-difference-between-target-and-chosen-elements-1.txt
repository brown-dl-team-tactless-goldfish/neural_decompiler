#define N 5000
#define ARR_SIZE (N >> 5)+1
int bitmap_col_sum[ARR_SIZE];
int bitmap_tmp[ARR_SIZE];
int bitmap_update[ARR_SIZE];
bool get(int *bitmap, int x) { return bitmap[x >> 5] & (UINT32_C(1) << (x & 31)); }
void bit_or(int *bitmap,int *bitmap_tmp)
{
    for(int i=0;i<ARR_SIZE;i++) bitmap[i]|=bitmap_tmp[i];
}
void bit_equal(int *bitmap,int *bitmap_tmp)
{
    for(int i=0;i<ARR_SIZE;i++) bitmap[i]=bitmap_tmp[i];
}
void bit_add(int *bitmap, int x)
{
    int tmp[ARR_SIZE];
    memset(tmp,0,sizeof(tmp));
    int div=x/32, rem=x%32;
    for(int i=ARR_SIZE-1;i>=0;i--)
    {
        if(bitmap[i])
        {
            if(rem==0)
            {
                tmp[i+div]|=(unsigned int)bitmap[i];
            }
            else
            {
                tmp[i+div+1]|=(unsigned int)bitmap[i]>>(32-rem);
                tmp[i+div]|=(unsigned int)bitmap[i]<<rem;
            }
        }
    }
    bit_equal(bitmap,tmp);
}
int minimizeTheDifference(int** mat, int matSize, int* matColSize, int target){
    memset(bitmap_update,0,sizeof(bitmap_update));
    bitmap_update[0]=1;
    for(int i=0;i<matSize;i++)
    {
        memset(bitmap_col_sum,0,sizeof(bitmap_col_sum));
        for(int j=0;j<*matColSize;j++)
        {
            bit_equal(bitmap_tmp,bitmap_update);
            bit_add(bitmap_tmp,*(*(mat+i)+j));
            bit_or(bitmap_col_sum,bitmap_tmp);
        }
        bit_equal(bitmap_update,bitmap_col_sum);
    }
    int target_high=target,target_low=target-1;
    while(1)
    {
        if(get(bitmap_update,target_high))return target_high-target;
        if(target_low>=0)
        {
            if(get(bitmap_update,target_low))return target-target_low;
            target_low--;
        }
        target_high++;
    }
    return 0;
}