class Solution {
public:
    vector<vector<int>> adj;
    vector<bool> visit;
//dfs
    int dfs(int i) {
        int num=1;
        visit[i] = 1;
        for (int j : adj[i]) {
            if (!visit[j]) {
                num+=dfs(j);
            }
        }
        return num;
    }
//bfs
    int bfs(int i) {
        int num=1;
        visit[i] = 1;
        queue<int> q;
        q.push(i);
        while( !q.empty()){
            int x = q.front(); 
            q.pop();
            for (int j : adj[x]) {
                if (!visit[j]) {
                    num++;
                    visit[j]=1;
                    q.push(j);
                }
            }
        }
        return num;
    }

    void ini(int n, vector<vector<int>>& edges){
        adj.resize(n);
        for (vector<int>& c : edges) {
            adj[c[0]].push_back(c[1]);
            adj[c[1]].push_back(c[0]);
        }
        visit.resize(n);
    }

    long long countPairs(int n, vector<vector<int>>& edges) {
  
        ini(n, edges);
        vector<int> numVertex;
        int numComponents=0;

        for (int i = 0; i < n; i++) {
            if (!visit[i]) {
                numComponents++;
                numVertex.push_back(bfs(i));
            }
        }

        long long sum=0;
        long long restVertex=n;
        for (int v: numVertex){
            sum+=v*(restVertex-v);
            restVertex-=v;
        }                
        return sum; 
    }
};