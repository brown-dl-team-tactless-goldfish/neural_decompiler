class Solution {
public:
    int minimumScore(string s, string t) {
        // initialize the length of strings `s` and `t`
        int ss = s.size(), st = t.size();

        // `k` keeps track of the last matched character in t from the right
        int k = st - 1;

        // initialize the dp array with all elements as -1
        vector<int> dp(st, -1);

        // iterate from the end of `s` and match characters from the end of `t`
        for (int i = ss - 1; i >= 0 && k >= 0; --i) {
            // if the character at `i` in `s` matches the character at `k` in `t`, 
            // update the `dp` array with the index `i`
            if (s[i] == t[k]) {
                dp[k--] = i;
            }
        }

        // `res` stores the minimum score, initially set to `k + 1`
        int res = k + 1;

        // iterate over `s` and `t` from the start
        for (int i = 0, j = 0; i < ss && j < st && res > 0; ++i) {
            // if the character at `i` in `s` matches the character at `j` in `t`, 
            // increment `j`
            if (s[i] == t[j]) {
                // for each matched character, update `k` to the next character in `t` 
                // that is yet to be matched
                for (; k < t.size() && dp[k] <= i; ++k);
                // update `res` with the minimum value of `res` and `k - (j + 1)`
                res = min(res, k - (++j));
            }
        }

        // return the minimum score
        return res;
    }

};