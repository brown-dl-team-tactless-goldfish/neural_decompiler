class Solution {
public:
    int maxSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> pref(m, vector<int>(n, 0));
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(j == 0){
                    pref[i][j] = grid[i][j];
                }
                else{
                    pref[i][j] = pref[i][j - 1] + grid[i][j];
                }
            }
        }
        
        int maxi = INT_MIN;
        int upi = 0, upj = 2;
        int doi = 2;
        
        while(doi < m){
            int prev1 = 0;
            int prev2 = 0;
            while(upj < n){
                int curr = pref[upi][upj] - prev1 + pref[doi][upj] - prev2 + grid[doi - 1][upj - 1];
                maxi = max(maxi, curr);
                prev1 = pref[upi][upj - 2];
                prev2 = pref[doi][upj - 2];
                upj++;
            }
            upi++;
            doi++;
            upj = 2;
        }
        return maxi;
    }
};