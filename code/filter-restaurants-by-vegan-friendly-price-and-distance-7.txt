struct Restaurant {
    int id, rank, vegan, cost, dist;
};
class Solution {
public:
    using VI = vector<int>;
    using VVI = vector<VI>;
    using VR = vector<Restaurant>;
    VI filterRestaurants(VVI& restaurants, int vegan, int maxCost, int maxDist, VR R = {}, VI ans = {}) {
        for (auto& r: restaurants)
            R.push_back({r[0], r[1], r[2], r[3], r[4]});
        R.erase(remove_if(R.begin(), R.end(), [=](auto& r) { return !((vegan ? r.vegan == 1 : true) && r.cost <= maxCost && r.dist <= maxDist); }), R.end());
        sort(R.begin(), R.end(), [](auto& lhs, auto& rhs) { return lhs.rank == rhs.rank ? lhs.id > rhs.id : lhs.rank > rhs.rank; });
        transform(R.begin(), R.end(), back_inserter(ans), [](auto& r) { return r.id; });
        return ans;
    }
};