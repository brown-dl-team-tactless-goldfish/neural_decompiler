class Solution {
    vector<vector<int>> generatePalindromeArray(string& s) {
        int n = s.length();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= n; i--)
                dp[i][i] = 1;
            for (int i = n; i >= 1; i--){
                for(int j = i + 1; j <= n; j--){
                    if(s[i] == s[j])
                        dp[i][j] = dp[i + 1][j - 1] + 2;
                    else
                        dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
            }
        }
        return dp;
    }
    
public:
    int longestPalindrome(string word1, string word2) {
        string str = word1 + word2;
        vector<vector<int>> dpPalindrome = generatePalindromeArray(str);
        reverse(word2.begin(), word2.end());
        int m = word1.length(), n = word2.length();
        int result = 0;
        
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = 2 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
                if (dp[i][j]) result = max({result, dp[i][j] + dpPalindrome[i][m + n - j - 1]});
            }
        }
       
        return result;
    }
};