class Solution {
public:
    long long numberOfWays(string s) {
        int n = s.length(); 
        int cnt0[n] , cnt1[n]; 
        memset(cnt0, 0, sizeof cnt0); 
        memset(cnt1, 0, sizeof cnt1); 
        if(n <= 2) return 0; 
        if(s[0] == '0') cnt0[0] = 1;
        else cnt1[0] = 1; 
        for(int i = 1 ; i < n ; ++i){
            if(s[i] == '0'){
                cnt0[i]+= cnt0[i-1] + 1;
                cnt1[i] = cnt1[i-1];
            }
            else if(s[i] == '1'){
                cnt1[i]+= cnt1[i-1] + 1; 
                cnt0[i] = cnt0[i-1];
            }
        }
        
        long long cnt01[n] , cnt10[n]; 
        memset(cnt01, 0 , sizeof cnt01); 
        memset(cnt10, 0 , sizeof cnt10);
        for(int i = 1 ; i < n ; ++i){
            if(s[i] == '0'){
                cnt01[i] = cnt01[i-1];
                cnt10[i] = cnt10[i-1] + cnt1[i-1]; 
            } 
            else if(s[i] == '1'){
                cnt10[i] = cnt10[i-1]; 
                cnt01[i] = cnt01[i-1] + cnt0[i-1]; 
            }
        }
        
        long long cnt010[n] , cnt101[n]; 
        memset(cnt010 , 0 , sizeof cnt010); 
        memset(cnt101 , 0 , sizeof cnt101); 
        for(int i = 2 ; i < n ; ++i){
            if(s[i] == '0'){
                cnt010[i] = cnt01[i-1];
            }
            else if(s[i] == '1'){
                cnt101[i] = cnt10[i-1];
            }
        } 
        
        long long sum = 0 ; 
        for(int i = 0 ; i < n ; ++i){
            sum = sum + cnt101[i] + cnt010[i]; 
        }
        
        
        return sum;
    } 
};