class disjointset{
    public:
    vector<int>p;
    disjointset(int n){
        p.resize(n+1);
        for(int i=0; i<=n; i++){
            p[i]=i;
        }
    }
    int findp(int u){
        if(u==p[u]){
            return u;
        }
        return p[u]=findp(p[u]);
    }
    void un(int u, int v){
        p[findp(u)]=p[findp(v)];
    }
};
class Solution {
public:
    vector<bool> areConnected(int n, int threshold, vector<vector<int>>& queries) {
        disjointset d(n+1);
        vector<bool>ans;
        for(int i=threshold+1; i<=n; i++){
            for(int j=i; j<=n; j+=i){
                d.un(i, j);
            }
        }
        for(int i=0; i<queries.size(); i++){
            if(d.findp(queries[i][0])==d.findp(queries[i][1])){
                ans.push_back(true);
            }
            else{
                ans.push_back(false);
            }
        }
        return ans;
    }
};