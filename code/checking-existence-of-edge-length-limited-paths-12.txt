class Solution {
public:
    bool static cmp(vector<int>&a,vector<int>&b)
    {
        return a[2]<b[2];
    }
    vector<int>parent;
    int find(int x)
    {
        if(parent[x]!=x)
            parent[x]=find(parent[x]);
        return parent[x];
    }
    vector<bool> distanceLimitedPathsExist(int n,vector<vector<int>>&edges,vector<vector<int>>&queries) 
    {
        int i=0;
        for(auto &q:queries)
            q.push_back(i++);
        
        sort(edges.begin(),edges.end(),cmp);
        sort(queries.begin(),queries.end(),cmp);
        
        parent.resize(n);
        for(int i=0;i<n;i++)
            parent[i]=i;
        int e=0;
        
        vector<bool>res(queries.size());
        for(auto &q:queries)
        {
            while(e<edges.size() && edges[e][2]<q[2])
            {
                int px=find(edges[e][0]),py=find(edges[e][1]);
                if(px!=py)
                {
                    parent[py]=px;
                }
                e++;
            }
            res[q[3]]=(find(q[0])==find(q[1]));
        }
        return res;
    }
};