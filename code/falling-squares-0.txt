class Solution {
public:
    vector<int> fallingSquares(vector<vector<int>>& positions) {
        vector<int> ret;
        map<int, int> m;
        m[0] = m[int(1e9)] = 0;
        int maxh = 0;
        for (const auto& v : positions) {
            int l = v[0], h = v[1];
            int r = l + h;
            //... a <= l < b ... c < r <= d ...
            auto b = m.upper_bound(l);
            int H = h;
            if (b == m.end()) {
                m[l] = H;
                m[r] = 0;
            } else {
                auto a = prev(b);
                auto d = m.lower_bound(r);
                auto c = prev(d);
                for (auto it = a; it != d; ++it) {
                    H = max(H, it->second + h);
                }
                int hc = c->second;
                m.erase(b, d);
                m[l] = H;
                m[r] = d->first == r ? d->second : hc;
            }
            maxh = max(maxh, H);
            ret.push_back(maxh);
        }
        return ret;
    }
};