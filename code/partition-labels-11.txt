class Solution:
    def partitionLabels(self, S: str) -> List[int]:
        print("S = ", S)

        self.res = []

        def helper(curS):
            print("curS = ", curS)
            tmpN = len(curS)
            print("tmpN = ", tmpN)

            if (tmpN == 0):
                return
            elif (tmpN == 1):
                self.res.append(tmpN)
                return
            else:
                c = curS[0]
                print("c = ", c)
                idx_right = curS.rindex(c)
                print("idx_right = ", idx_right)
                if (idx_right == 0):
                    self.res.append(1)
                    helper(curS[1:])
                else:
                    while (1):
                        tmpS = curS[:idx_right+1]
                        print("tmpS = ", tmpS)

                        tmpSet = set(tmpS)
                        print("tmpSet = ", tmpSet)
                        flag_can_break = True
                        for tmpC in tmpSet:
                            print("tmpC = ", tmpC)
                            tmpC_r_idx = curS.rindex(tmpC)
                            if (tmpC_r_idx > idx_right):
                                flag_can_break = False
                                idx_right = tmpC_r_idx
                                break

                        if (flag_can_break == True):
                            break
                    print("idx_right = ", idx_right)
                    self.res.append(idx_right+1)
                    helper(curS[idx_right+1:])
        helper(S)
        print("self.res = ", self.res)
        return self.res