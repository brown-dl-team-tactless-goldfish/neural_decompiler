/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** findAndReplacePattern(char ** words, int wordsSize, char * pattern, int* returnSize){

    
    int size = 0;    
    int pLength = 0;
    for(pLength; pLength < 50; pLength++){
        if(pattern[pLength]=='\0'){
            break;
        }
    }
    
    
    char ** output = (char **)malloc(sizeof(char *)*wordsSize);
    
    for(int i = 0; i < wordsSize; i++){ //iterate over all the possible words
        
        char map[26] = {0}; //init the empty map
        
        int ok = 1;
        for(int id = 0; id < pLength; id++){
            
            if(map[pattern[id]-97]==0){     //new letter
                //check if the letter already exist
                for(int e = 0; e<26; e++){
                    if(map[e]==words[i][id]){
                        ok = 0;
                        break;
                    }
                    if(ok==0){
                        break;
                    }
                }
                //if does not already exist insert it
                map[pattern[id]-97] = words[i][id]; //insert the letter in the map
            }else{
                if(!(map[pattern[id]-97]==words[i][id])){ //different letter
                    ok = 0;
                    break;
                }
            }
        }
        
        //insert the word in the output list and increment the counter
        if(ok){
            output[size] = words[i];
            size++;
        }
    }
    
    *returnSize = size;
    return output;
}