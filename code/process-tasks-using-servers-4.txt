struct serverData {
    int weight;
    int index;
    int finishTime;
    serverData(int weight, int index, int finishTime) : weight(weight), index(index), finishTime(finishTime) {}
};

class cmp {
public:
    bool operator()(serverData &s1, serverData &s2) {
        if (s1.weight > s2.weight) {
            return true;
        } else if (s1.weight < s2.weight) {
            return false;
        }

        // s1.weight == s2.weight is true
        return s1.index > s2.index;
    }
};

class cmp2 {
public:
    bool operator()(serverData &s1, serverData &s2) {
        if (s1.finishTime > s2.finishTime) {
            return true;
        } else if (s1.finishTime < s2.finishTime) {
            return false;
        }

        // s1.finishTime == s2.finishTime is true.
        if (s1.weight > s2.weight) {
            return true;
        } else if (s1.weight < s2.weight) {
            return false;
        }

        // s1.weight == s2.weight is true
        return s1.index > s2.index;
    }
};

class Solution {
public:
    vector<int> assignTasks(vector<int> &servers, vector<int> &tasks) {
        priority_queue<serverData, vector<serverData>, cmp> freeServers;
        for (int i = 0; i < servers.size(); ++i) {
            freeServers.push(serverData(servers[i], i, 0));
        }

        priority_queue<serverData, vector<serverData>, cmp2> busyServers;
        vector<int> answer(tasks.size());
        for (int j = 0; j < tasks.size(); ++j) {
            while (!busyServers.empty() && j >= busyServers.top().finishTime) {
                serverData server = busyServers.top();
                busyServers.pop();

                freeServers.push(server);
            }

            if (!freeServers.empty()) {
                serverData freeServer = freeServers.top();
                freeServers.pop();

                answer[j] = freeServer.index;
                freeServer.finishTime = j + tasks[j];
                busyServers.push(freeServer);
            } else {
                serverData busyServer = busyServers.top();
                busyServers.pop();

                answer[j] = busyServer.index;
                busyServer.finishTime += tasks[j];
                busyServers.push(busyServer);
            }
        }

        return answer;
    }
};