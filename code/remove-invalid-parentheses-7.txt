class Solution {
public:
    /* 
    dont use stack for the isValid function, increment count when c == '(', and decrement it for ')', if cnt < 0 at any point, means closing brackets are       more
    */
    bool isValid(string s) {
        int cnt = 0;
        for(char c : s) {
            if(c == '(') cnt++;
            else if(c == ')') {
                cnt--;
                if(cnt < 0) return false;
            }
        }
        return cnt == 0;
    }
    
    vector<string> removeInvalidParentheses(string s) {
        vector<string> ans;
        unordered_set<string> vis; 
        queue<string> q; 
        bool found = false;
        
        q.push(s); vis.insert(s);
        
        while(!q.empty()) {
            string u = q.front(); q.pop();
            
            if(isValid(u)) {
                ans.push_back(u);
                found = true;
                /* if we find that the string has become valid, we won't explore any furthur levels, as we want the minimum number of deletions
                */
            }
            if(found) continue; // if found = true, means the level in which a valid string has been found, we wont move to the next level
            
            for(int i = 0; i < u.length(); i++) {
                if(u[i] == '(' || u[i] == ')') {
                    string v = u.substr(0, i) + u.substr(i + 1);
                    if(!vis.count(v)) {
                        q.push(v);
                        vis.insert(v);
                    }
                }
            }
        }
        return ans;
    }
};