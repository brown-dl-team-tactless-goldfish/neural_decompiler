class DinnerPlates {
public:
    vector<vector<int>> stks;
    int cap = 0;
    set<int> avail;
    DinnerPlates(int capacity) {
        cap = capacity;
    }
    
    void push(int val) {
        if(!avail.empty()) {
            int idx = *begin(avail);
            stks[idx].push_back(val);
            if(stks[idx].size() == cap) avail.erase(idx);
        } else {
            stks.push_back({val});
            if(cap > 1) avail.insert(stks.size()-1);
        }
    }
    
    int pop() {
        int idx = stks.size()-1, res = -1;
        while(idx >= 0) {
            if(stks[idx].size() == 0) {
                stks.pop_back();
                avail.erase(idx);
            } else {
                res = stks[idx].back();
                stks[idx].pop_back();
                avail.insert(idx);
                break;
            }
            idx--;
        }
        return res;
    }
    
    int popAtStack(int idx) {
        if(idx >= stks.size() || stks[idx].size() == 0) return -1;
        int res = stks[idx].back();
        stks[idx].pop_back();
        avail.insert(idx);
        return res;
    }
};

/**
 * Your DinnerPlates object will be instantiated and called as such:
 * DinnerPlates* obj = new DinnerPlates(capacity);
 * obj->push(val);
 * int param_2 = obj->pop();
 * int param_3 = obj->popAtStack(index);
 */