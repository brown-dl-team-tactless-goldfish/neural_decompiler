class Solution 
{
    public:
    long d=1000000007;
    long powmod(long a,long b)
    {
		// get (a^b) mod d
        long result=1,base=a;
        while(b)
        {
            if(b&1) result=(result*base)%d;
            b>>=1;
            base=(base*base)%d;
        }
        return result;
    }
    int numberOfGoodSubsets(vector<int>& nums) 
    {
        long result=0,n=nums.size(),dp[1024]={0};
        int a[31]={0},total[31]={0,0,1,2,0,4,3,8,0,0,5,16,0,32,9,6,0,64,0,128,0,10,17,256,0,0,33,0,0,512,7};
        dp[0]=1;
        for(int i=0;i<n;i++) a[nums[i]]++;
        
        for(int i=2;i<=30;i++)
        {
            if(!total[i]||!a[i]) continue;
            for(int j=1023;j>-1;j--)
                if(dp[j]&&(total[i]&j)==0)
                    dp[total[i]|j]=(dp[total[i]|j]+dp[j]*a[i])%d;
        }
        for(int i=1;i<1024;i++) result=(result+dp[i])%d;
        return (result*(powmod(2,a[1])))%d;
    }
};