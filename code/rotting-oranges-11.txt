class Solution {
public:
    queue<pair<int, int>> q;
    int rtn_no = 0;
    int rote(vector<vector<int>>& grid, int i, int j, int n, int m) {
        int rott = 0;
        if(j - 1 >= 0 && grid[i][j - 1] == 1) 
            {grid[i][j - 1] = 2; rott++; q.push({i, j - 1}); rtn_no++;}
        if(i - 1 >= 0 && grid[i - 1][j] == 1) 
            {grid[i - 1][j] = 2; rott++; q.push({i - 1, j}); rtn_no++;}
        if(j + 1 < m && grid[i][j + 1] == 1) 
            {grid[i][j + 1] = 2; rott++; q.push({i, j + 1}); rtn_no++;}
        if(i + 1 < n && grid[i + 1][j] == 1) 
            {grid[i+1][j] = 2; rott++; q.push({i + 1, j}); rtn_no++;}
        return rott;
    }
    
    int orangesRotting(vector<vector<int>>& grid) {
        
        int r_ch = 0; //rotten check
        int ttl = 0;
        int n = grid.size(), m = grid[0].size();
        for(int i = 0; i < n; i++) 
            for(int j = 0; j < m; j++) 
                if(grid[i][j] == 2) {
                    r_ch++;
                    q.push({i, j});
                } else if(grid[i][j] == 1) ttl++;
        pair<int, int> item;
        int curr_rotten = 0;
        int ans = 0;
        while(r_ch--) {
            item = q.front();
            q.pop();
            
            curr_rotten += rote(grid, item.first, item.second, n, m);
      
            if(! r_ch) {
                r_ch = curr_rotten;
                if(curr_rotten) ans++;                    
                curr_rotten = 0;
            }
        }
        return rtn_no - ttl ? -1 : ans;
    }
};