class Solution {
    static bool sortfreq(const pair<int,string> &a,const pair<int,string> &b){
        return a.first==b.first? a.second<b.second: a.first<b.first;
    }
    
    unordered_map<string,int> bfs(vector<vector<int>>& friends, int level,int id,vector<vector<string>>& watchedVideos){
        queue<int> q;q.push(id);
        unordered_map<int,bool> vis;
        vis[id] = true;int c = 0;
        while(q.size()){
            int sz = q.size();
            while(sz--){
                if(c==level) {
                    unordered_map<string,int> mp;
                    while(q.size()){
                        int x = q.front();q.pop();
                        for(auto it:watchedVideos[x])mp[it]++;
                    }return mp;
                }
                int x = q.front(); q.pop();
                for(auto frnd:friends[x])if(vis.find(frnd)==vis.end()) q.push(frnd),vis[frnd]=true;
            }c++;
        }return {};
        
    }
public:
    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        unordered_map<string,int> frndList = bfs(friends,level,id,watchedVideos);
		vector<pair<int,string>> sortans; vector<string> ans;
        for(auto it:frndList) sortans.push_back({it.second,it.first});
        sort(sortans.begin(),sortans.end(),sortfreq);
        for(auto it:sortans) ans.push_back(it.second);
        return ans;
    }
};