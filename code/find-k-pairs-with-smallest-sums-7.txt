class triple{
public:
	int val, idx, jdx;
};

class cmp{
	public :
	bool operator()(triple a, triple b){
		return a.val > b.val;
	}
};

bool compare(int a, int b) {
	return a > b;
}




class Solution {
public:
	vector<vector<int>> kSmallestPairs(vector<int>& a, vector<int>& b, int c) {
		int n = a.size();
		int m = b.size();

		long long p = m * (long long)n;
		if(p < c) c = p; 
		vector<vector<int>> ans;

		set<pair<int,int>> st;
		priority_queue<triple,vector<triple> ,cmp> pq;

		pq.push({a[0] + b[0] , 0 , 0});
		st.insert({0,0});

		while(ans.size() < c){

			triple t = pq.top(); pq.pop();
			int val = t.val , idx = t.idx , jdx = t.jdx;
			ans.push_back({a[idx],b[jdx]});

			if(idx < n-1 and st.count({idx+1,jdx}) == 0){
				pq.push({a[idx+1] + b[jdx],idx+1,jdx});
				st.insert({idx+1,jdx});
			}

			if(jdx < m-1  and st.count({idx,jdx+1}) == 0){
				pq.push({a[idx] + b[jdx+1],idx, jdx+1});
				st.insert({idx,jdx+1});
			}
		}

		return ans;
	}
};