class Solution {
public:    
    int minimumBuckets(string hamsters) {                
        string h = hamsters; //minify.        
        int c = 0; //count placed buckets.
        int n = hamsters.length();
        int i = n-1; //iterate.
        char curr = h[i];
        bool left = false; bool right = false; //indicators left & right.
        
        //special cases.     
        if (n == 1) if (h[0] == 'H') return -1; else return 0;
        if (n == 2 && h[0] != h[1]) return 1;

        if (h[n-1] == h[n-2] && h[n-2] == 'H') return -1;
        
        //regular cases.
        while (i-- > 0){                         
            if (curr == 'H'){
                left = (h[i] == '.');
                if (left) {
                    if (!right) {                                    
                        //cout<<"test: "<<i<<" "<<h[i]<<"\n";
                        h[i] = 'B';
                        c++;                    
                    }
                }                 
                else {
                    //if right is already set, else...
                    if (!right){
                        if (h[i] == 'H' && h[i+2] == '.'){
                            h[i+2] = 'B';
                            c++;                           
                        }
                        else {
                            return -1;
                        }
                    }                                      
                }                
            }            
            right = (h[i+1] == 'B'); //what is i+1 now, will be i+2 next loop around!            
            curr = h[i];            
        }        
        //deal with first indexes.
        if (curr == 'H'){
            if (h[1] == curr) return -1; //only react on 'H', as empties would be redundant for a "min" request.            
            else if (h[1] == '.') c++;            
        }
        return c;
    }
};