class Solution {
public:
    int dp[2010][2010];
    int ans=0;
    int find(string &s,int l,int r,int n,int m)
    {
        if(l>r)
        {
            return 0;
        }
        if(l==r)
        {
            return 1;
        }
        if(dp[l][r]!=-1)
        {
            return dp[l][r];
        }
        if(s[l]==s[r])
        {
            dp[l][r]=2+find(s,l+1,r-1,n,m);
            if(l<n&&r>=n)
            {
                ans=max(ans,dp[l][r]);
            }
        }
        else
        {
         dp[l][r]=max(find(s,l+1,r,n,m),find(s,l,r-1,n,m));
        }
        return dp[l][r];
    }
    int longestPalindrome(string s1, string s2) 
    {
        int n=s1.size();
        int m=s2.size();
        string s=s1+s2;
        ans=0;
        memset(dp,-1,sizeof(dp));
        find(s,0,s.size()-1,n,m);
        return ans;
    }
};