class Solution {
public:
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        const int n = classes.size();
        auto ratios = [&](int i, int delta = 0){return double(classes[i][0] + delta)/(classes[i][1] + delta);};
        priority_queue<pair<double, int> > pq;
        
        for(int i = 0; i < n; i++) 
            if(classes[i][0] != classes[i][1]) // nothing can be improved for the class with 100% passing ratio, so we skip
                pq.emplace(ratios(i, 1) - ratios(i, 0), i); // cur.first:  potential gain/difference after add 1 brillian student
        
        
        while(extraStudents-- && !pq.empty()){
            auto [ratio, i] = pq.top(); pq.pop();
            ++classes[i][0]; 
            ++classes[i][1];
            pq.emplace(ratios(i, 1) - ratios(i, 0), i);
        }
        
        double total_ratios = 0.0;
        for(int i = 0; i < n; i++)  total_ratios += ratios(i);
        return total_ratios / n;
    }
};