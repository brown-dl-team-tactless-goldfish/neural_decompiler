#include <stdint.h>
#include <stdbool.h>
#include <math.h>
#include <bits.h>




int knightDialer( int N ) {
    long int nNewJump[10] = { 0,0,0,0,0,0,0,0,0,0 };
    long int oldJump[10] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    long long int numbers = 0;
    int row0[] = { 2, 4, 6 };
    int row1[] = { 2, 6, 8 };
    int row2[] = { 2, 7, 9 };
    int row3[] = { 2, 8, 4 };
    int row4[] = { 3, 3, 9, 0 };
    int row5[] = { 0 };
    int row6[] = { 3, 7, 0, 1 };
    int row7[] = { 2, 2, 6 };
    int row8[] = { 2, 1, 3 };
    int row9[] = { 2, 4, 2 };
    int ** dial = malloc( 10 * sizeof( int* ) );

    dial[0] = row0;
    dial[1] = row1;
    dial[2] = row2;
    dial[3] = row3;
    dial[4] = row4;
    dial[5] = row5;
    dial[6] = row6;
    dial[7] = row7;
    dial[8] = row8;
    dial[9] = row9;

    if ( N == 1 ) return 10;
    for ( int i = 1; i < N; i++ )
    {
        numbers = 0;

        for ( int j = 0; j < 10; j++ )
        {
            for ( int l = 1; l < dial[j][0] + 1; l++ )
            {
                if ( j == 5 ) continue;
                nNewJump[dial[j][l]] += oldJump[j];
                nNewJump[dial[j][l]] %= 1000000007LL;
            }  
        }

        memcpy( oldJump, nNewJump, sizeof( long int ) * 10 );
        for ( int j = 0; j < 10; j++ )
        {
            numbers += nNewJump[j];
            nNewJump[j] = 0;
        }
    }
    free( dial );

    return numbers % 1000000007LL;
}

/*


10 + 9^(N-1)*/