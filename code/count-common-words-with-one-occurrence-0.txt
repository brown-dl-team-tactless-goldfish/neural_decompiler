// RS Hash Function
unsigned int RSHash(char *str)
{
    unsigned int b = 378551;
    unsigned int a = 63689;
    unsigned int hash = 0;

    while (*str)
    {
        hash = hash * a + (*str++);
        a *= b;
    }

    return (hash & 0x7FFFFFFF);
}

int countWords(char ** words1, int words1Size, char ** words2, int words2Size){
    int N = fmax(words1Size, words2Size) * 5 ;
    int w1 = words1Size, w2 = words2Size ;
    int** hash = calloc( N , sizeof(int*) ) ;
    for(int i = 0; i < w1; i++){
        unsigned int val = RSHash(words1[i]) ;
        unsigned int d = val;
        while(1){
            if(hash[d % N] == NULL){
                hash[d % N] = malloc(3* sizeof(int));
                hash[d % N][0] = val;
                hash[d % N][1] = 1;
                hash[d % N][2] = 0;
                break;
            }
            else if( hash[d % N][0] == val){
                hash[d % N][1]++;
                break;
            }
            else
                d++;
        }
    }
    int ans = 0; 
    for(int i = 0; i < w2; i++){
        unsigned int val = RSHash(words2[i]) ;
        unsigned int d = val;
        while(1){
            if(hash[d % N] == NULL){
                break;
            }
            else if( hash[d % N][0] == val ){
                if( hash[d % N][1] == 1 ){
                    hash[d % N][2]++;
                    if(hash[d % N][2] == 1)
                        ans++;
                    else if(hash[d % N][2] == 2)
                        ans--;
                }
                break;
            }
            else
                d++;
        }
    }
    for(int i = 0; i < N; i++){
        if(hash[i])
            free(hash[i]) ;
    }
    free(hash);
    return ans;
}