int** levelOrder(struct Node* root, int* returnSize, int** returnColumnSizes) {
    int** arr = malloc(sizeof(int* [10000])); // height of tree can be max 10000, ie rows=10000
    int *c = *returnColumnSizes = malloc(sizeof(int [10000])); // each of these rows will have a columSize
    struct Node* n[10000] = {root}; //init the queue with root node
    int f=0, b=1, i, k, lb; // f is front, b is back
    for(k=0; root && (f < b); k++, i=0) {
        lb = b;     // save the last parent
        c[k] = b-f; // since we already queued the children, we know how many are there in level k
        arr[k] = c[k] ? malloc(sizeof(int[b-f])) : NULL;// each arr[k], is allocated memory of size b-f
        for(;f<lb; i++) {
            // n[f] is dequeued node from queue
            for(int j=0; j< n[f]->numChildren; j++){
                if(n[f]->children[j])
                    n[b++] = n[f]->children[j];// queue all the kids of this node
            }
            arr[k][i] = n[f++]->val;  //save dequeued node val to array
        }
    }
    *returnSize = k;
    return arr;
}