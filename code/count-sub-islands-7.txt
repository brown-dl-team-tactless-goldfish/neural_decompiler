class Solution {
    int m, n;
    
    bool dfs(const vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i, int j) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] == 0) return true;
        if (grid2[i][j] == 1 && grid1[i][j] == 0) return false;
        grid2[i][j] = 0;
        
        auto a = dfs(grid1, grid2, i+1, j);
        auto b = dfs(grid1, grid2, i-1, j);
        auto c = dfs(grid1, grid2, i, j+1);
        auto d = dfs(grid1, grid2, i, j-1);
        
        return a && b && c && d;
    }
    
public:
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int count = 0;
        m = grid1.size();
        n = grid1[0].size();
        
        for (int i = 0; i < m; ++i)
            for (int j = 0; j < n; ++j)
                if (grid2[i][j] == 1 && dfs(grid1, grid2, i, j))
                    ++count;
        
        return count;
    }
};