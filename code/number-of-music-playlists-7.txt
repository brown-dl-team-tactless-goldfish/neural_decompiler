static const int MOD = 1000000007;

class Solution {
public:
    int numMusicPlaylists(int N, int L, int K) {
        int sgn = 1;
        int64_t result = 0;
        for (int i = 0; i <= N && N - i >= K; ++i) {
            result += sgn * C(N, N - i) * F(N - i, L, K);
            sgn = -sgn;
        }
        return (result % MOD + MOD) % MOD;
    }
    int64_t F(int N, int L, int K) {
        if (N < K)
            return 0;
        return fact(N) * pow(N - K, L - K) % MOD * inv(fact(N-K), MOD) % MOD;
    }
    int64_t C(int n, int k) {
        return fact(n) * inv(fact(k) * fact(n-k) % MOD, MOD) % MOD;
    }
    int64_t fact(int n) {
        static vector<int64_t> s_cache = {1, 1};
        while (n >= s_cache.size()) {
            s_cache.push_back(s_cache.back() * s_cache.size() % MOD);
        }
        return s_cache[n];
    }
    int64_t pow(int base, int p) {
        int64_t r = 1, tmp = base;
        for (int i = 1; i <= p; i <<= 1) {
            if (p & i)
                r = r * tmp % MOD;
            tmp = tmp * tmp % MOD;
        }
        return r;
    }
    int64_t inv(int64_t x, int64_t mod) {
        int64_t a = mod, b = 1, c = 0;
        int64_t d = x, e = 0, f = 1;
        while (d != 0) {
            int64_t g = a % d,
                    h = b - a / d * e,
                    i = c - a / d * f;
            a = d, b = e, c = f;
            d = g, e = h, f = i;
        }
        return ((c % mod) + mod) % mod;
    }
};