    int ans = 0;
    
    int check(vector<int> &r, vector<int> &temp){
        int c = 0;
        for(int i = 0; i<r.size(); i++){
            c += (r[i]==temp[i]);
        }
        return c;
    }
    
    void dfs(vector<vector<int>> &mat, vector<int> &r, vector<int> &temp, int c, int i){
        if(c==0){
            ans = max(ans, check(r, temp));
            return;
        }
        if(i==mat[0].size())return;
        for(int j = 0; j<mat.size(); j++){
            temp[j] += mat[j][i];
        }
        dfs(mat, r, temp, c-1, i+1);
        for(int j = 0; j<mat.size(); j++){
            temp[j] =temp[j]-mat[j][i];
        }
        dfs(mat, r, temp, c, i+1);
    }
    
    int maximumRows(vector<vector<int>>& mat, int cols) {
        vector<int> r(mat.size(), 0);
        for(int i = 0; i<mat.size(); i++){
            for(int j = 0; j<mat[0].size(); j++){
                if(mat[i][j])r[i]++;
            }
        }
        vector<int> temp(mat.size(), 0);
        dfs(mat, r, temp, cols, 0);
        return ans;
    }
	
	Time Complexity: O(2^(n)*mn)