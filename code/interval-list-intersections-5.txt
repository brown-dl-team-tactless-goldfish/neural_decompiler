int** intervalIntersection(int** firstList, int firstListSize, int* firstListColSize, int** secondList, int secondListSize, int* secondListColSize, int* returnSize, int** returnColumnSizes){
    if(firstListSize == 0 || secondListSize == 0){
        *returnSize = 0;
        *returnColumnSizes = NULL;
        return NULL;
    }
    int **ans = calloc(firstListSize + secondListSize, sizeof(int*));
    *returnColumnSizes = calloc(firstListSize + secondListSize, sizeof(int));
    int i = 0, j = 0, k = 0;
    while(i < firstListSize && j < secondListSize){
        if(secondList[j][0] > firstList[i][1] || secondList[j][1] < firstList[i][0]){} // no intersection
        else{
            ans[k] = (int*) calloc(2, sizeof(int));
            (*returnColumnSizes)[k] = 2;
            ans[k][0] = fmax(firstList[i][0], secondList[j][0]);
            ans[k++][1] = fmin(firstList[i][1], secondList[j][1]);
        }
        // keep the interval with bigger end time   
        if (firstList[i][1] > secondList[j][1]) j++;
        else i++;
    }
    *returnSize = k;
    return ans;
}