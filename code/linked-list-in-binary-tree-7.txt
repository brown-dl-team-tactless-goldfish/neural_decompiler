/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
bool solveHelper(TreeNode* root, ListNode* head, ListNode* currhead) {
    if(currhead == nullptr) return true;
    if(root == nullptr) return false;
    
    if(root->val == currhead->val) {
        currhead = currhead->next;
    } else {
        currhead = head;
    }
    ListNode* matched = currhead;
    bool l = solveHelper(root->left, head, currhead);
    if(l) return true;
    currhead = matched;
    bool r = solveHelper(root->right, head, currhead);
    return r;
}

    bool isSubPath(ListNode* head, TreeNode* root) {
        if(root == nullptr) {
        return false;
    }
    bool a =  solveHelper(root, head, head);
    if(a) return true;
    bool b =  isSubPath(head, root->left);
    if(b) return true;
    bool c =  isSubPath(head, root->right);
    if(c) return true;
    return false;
    }
};