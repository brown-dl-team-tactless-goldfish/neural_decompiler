class FrontMiddleBackQueue {
public:
    FrontMiddleBackQueue(): l{std::list<int>()}, mid{l.end()} {}
    
    void pushFront(int val) {
        l.emplace_front(val);
        if(l.size() == 1) mid = l.begin();
        else if(!(l.size()&1)) --mid;
    }
    
    void pushMiddle(int val) {
        if(l.empty()) pushFront(val);
        else {
            if(l.size()&1) mid = l.insert(mid, val);
            else mid = l.insert(++mid, val);
        }
    }
    
    void pushBack(int val) {
        l.emplace_back(val);
        if(l.size() == 1) mid = l.begin();
        else if(l.size()&1) ++mid;
    }
    
    int popFront() {
        if(l.empty()) return -1;
        int tmp{l.front()};
        
        if(l.size() == 1) mid = l.erase(mid);
        else {
            if(!(l.size()&1)) ++mid;
            l.pop_front();
        }
        
        return tmp;
    }
    
    int popMiddle() {
        if(l.empty()) return -1;
        int tmp{*mid};
        if(l.size() == 1) mid = l.erase(mid);
        else {
            mid = l.erase(mid);
            if(!(l.size()&1)) --mid;
        }
        
        return tmp;
    }
    
    int popBack() {
        if(l.empty()) return -1;
        int tmp{l.back()};
        
        if(l.size() == 1) mid = l.erase(mid);
        else {
            if(l.size()&1) --mid;
            l.pop_back();
        }
        
        return tmp;
    }

    std::list<int> l;
    std::list<int>::iterator mid;
};