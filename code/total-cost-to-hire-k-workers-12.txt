class Solution {
public:
    long long totalCost(vector<int>& costs, int k, int candidates) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int l = 0, r = costs.size()-1;
        while(l < candidates) pq.push({costs[l], l++});
        while(l <= r && r + candidates >= costs.size()) pq.push({costs[r], r--});
        long long res = 0;
        while(k-- > 0) {
            auto [c, idx] = pq.top();
            pq.pop();
            res += c;
            if(l <= r) {
                if(idx < l) pq.push({costs[l], l++});
                else pq.push({costs[r], r--});
            }
        }
        return res;
    }
};