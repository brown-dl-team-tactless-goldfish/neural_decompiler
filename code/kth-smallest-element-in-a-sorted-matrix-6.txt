int kthSmallest(int** matrix, int matrixSize, int* matrixColSize, int k){
    //next r or d
    int n_th = 0;
    int min_num = matrix[0][0];//min
    int min_num_row = 0;
    int clear_row = -1;
    const int N = matrixSize;
    int min_col[N];//each row leftmost(have not push)
    
    for(int i = 0; i < matrixSize; i++)min_col[i] = 0;
    
    while(n_th < k){
        min_num = INT_MAX;
        for(int row = clear_row +1; row < matrixSize; row++)//clear_row: 該列已全部印出
        {
            //min_col[row]: 在每一列中最小的(除去已經印出的數字)
            if(matrix[row][min_col[row]] < min_num){ 
                min_num = matrix[row][min_col[row]];
                min_num_row = row;
              }
            
            if(min_col[row] == 0) //不用在往下找，下面都更大
            {
                break;
            }
            //                             clear_row++
        //ex: [ X, 5, .],   [ X, X, 9],    [ X, X, X],   [ X, X, X],   [ X, X, X],
            //[10, ., .],   [10, ., .],    [10, ., .],   [ X,11, .],   [ X, X,13],
            //[. , ., .]    [. , ., .]     [. , ., .]    [12, ., .]    [12, ., .]
        }
        
        printf("%d ",min_num);
        min_col[min_num_row]++;
        n_th++;
        if(min_col[min_num_row] == matrixSize ) clear_row = min_num_row;
        
    }

    return min_num;
}