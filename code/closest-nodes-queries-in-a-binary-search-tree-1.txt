/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>>ret ;
        vector<int>sortArr ;
        inorder(root, sortArr) ;
        for(auto& q : queries)
        {
            auto iter = lower_bound(sortArr.begin(), sortArr.end(), q) ;
            if(iter != sortArr.end() && *iter == q)
                ret.push_back({q, q}) ;
            else{
                if(iter == sortArr.begin())
                    ret.push_back({-1, *iter}) ;   
                else if(iter == sortArr.end())
                    ret.push_back({*prev(iter) , -1}) ;
                else
                   ret.push_back({*prev(iter) , *iter}) ; 
            }
        }
        return ret ;
    }
private:
    void inorder(TreeNode* root, vector<int>&sortArr){
        if(!root)
            return ;
        inorder(root->left, sortArr) ;
        sortArr.push_back(root->val) ;
        inorder(root->right, sortArr) ;
    }
};