/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool odd(vector<int>& f) {
        for(int i : f) {
            if(i % 2 == 0) {
                return false;
            }
        }
        return true;
    }
    bool even(vector<int>& f) {
        for(int i : f) {
            if(i & 1) {
                return false;
            }
        }
        return true;
    }
    bool increasing(vector<int>& f) {
        int n = f.size();
        for(int i = 0; i < n - 1; i++) {
            if(f[i] >= f[i + 1])
                return false;
        }
        return true;
    }
    bool decreasing(vector<int>& f) {
        int n = f.size();
        for(int i = 0; i < n - 1; i++) {
            if(f[i] <= f[i + 1]) {
                return false;
            }
        }
        return true;
    }
    bool isEvenOddTree(TreeNode* root) {
        vector<pair<TreeNode*, int>> que;
        que.emplace_back(root, 0);
        int color = 0;
        vector<int> f;
        for(int i = 0; i < (int) que.size(); i++) {
            int c = que[i].second;
            TreeNode* temp = que[i].first;
            if(color != c) {
                if(color == 0) {
                    if(!odd(f)) {
                        return false;
                    }
                    if(!increasing(f)) {
                        return false;
                    }
                }
                if(color == 1) {
                    if(!even(f)) {
                        return false;
                    }
                    if(!decreasing(f)) {
                        return false;
                    }
                }
                color = c;
                f.clear();
            }
            f.push_back(temp->val);
            if(temp->left != nullptr) {
                que.emplace_back(temp->left, c ^ 1);
            }
            if(temp->right != nullptr) {
                que.emplace_back(temp->right, c ^ 1);
            }
        }
        if(color == 0) {
            if(!odd(f)) {
                return false;
            }
            if(!increasing(f)) {
                return false;
                }
        }
        if(color == 1) {
            if(!even(f)) {
                return false;
            }
            if(!decreasing(f)) {
                    return false;
                }
        }
        return true;
    }
};