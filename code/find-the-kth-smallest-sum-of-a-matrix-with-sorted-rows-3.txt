public class Solution
{
    public int KthSmallest(int[][] mat, int k)
    {
        var pq = new SortedSet<(int Value, int[] Indexes)>(new Mycomparer());
        int sum = 0;
        for (int i = 0; i < mat.Length; i++)
        {
            sum += mat[i][0];
        }
        pq.Add((sum, new int[mat.Length]));
        int count = 0;
        while (pq.Count > 0)
        {
            var cur = pq.Min;
            pq.Remove(cur);
            count++;
            if (count == k) return cur.Value;
            var indexes = cur.Indexes;
            for (int i = 0; i < mat.Length; i++)
            {
                int nextValue = cur.Value;
                var nextIndexes = new int[mat.Length];
                Array.Copy(cur.Indexes, nextIndexes, cur.Indexes.Length);
                if (nextIndexes[i] == mat[0].Length - 1) continue;
                nextValue -= mat[i][nextIndexes[i]];
                nextIndexes[i]++;
                nextValue += mat[i][nextIndexes[i]];
                pq.Add((nextValue, nextIndexes));

            }
        }

        return -1;
    }
}

public class Mycomparer : IComparer<(int Value, int[] Indexes)>
{
    public int Compare((int Value, int[] Indexes) x, (int Value, int[] Indexes) y)
    {
        if (x.Value == y.Value)
            return GetHashCode(x.Indexes).CompareTo(GetHashCode(y.Indexes));
        return x.Value.CompareTo(y.Value);
    }

    private long GetHashCode(int[] arr)
    {
        long res = 0;
        long ten = 1;
        for (int i = arr.Length - 1; i >=0; i--)
        {
            res += arr[i] * ten;
            ten *= 10;
        }
        return res;
    }
}
