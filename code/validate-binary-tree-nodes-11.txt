class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        
        
        if (n == 1)
            return true;
        
        unordered_map<int, vector<int>> childToParent;
        
		// 1. Find the parent of each node.
        for (int i = 0; i < n; i++)
        {
            int left  = leftChild[i];
            int right = rightChild[i];
            
            if (left  != -1) childToParent[left].push_back(i);
            if (right != -1) childToParent[right].push_back(i);
        }
        
        for (const auto & item : childToParent)
        {
            if (item.second.size() > 1)
                return false;
        }
        
		// 2. A valid tree must have nodes with only one parent and exactly one node with no parent.
        int count = 0;
        for (int i = 0; i < n; i++)
        {
            if (!childToParent.count(i) && ( leftChild[i] != -1 || rightChild[i] != -1) )
                count++;
        }
        
        if (count != 1)
            return false;
        
        return true;
    }
};