class Solution {
private:
    int helper(string s, int i, int j){
        int count = 0 ;
        while(i < j){
            if(s[i] != s[j])
                count++ ;
            i++ ;
            j-- ;
        }
        return count ;
    }
public:
//dp[i][k] : the minimal number of characters that you need to change to divide the string. 
    int palindromePartition(string s, int k) {
        int n = s.size() ;
        vector<vector<int>>dp(n+1, vector<int>(k+1, INT_MAX/2)) ;
        dp[0][0] = 0 ;
        dp[1][1] = 0 ;
        for(int i = 1; i < n; i++){
            for(int j = 1; j <= min(k, i+1); j++){
                for(int p = j-1; p <= i; p++){
                    dp[i+1][j] = min(dp[i+1][j], dp[p][j-1] + helper(s, p, i)) ;
                    if(dp[i+1][j] == 0)
                        break ;
                }
            }
        }
        
        return dp[n][k] ;
    }
};