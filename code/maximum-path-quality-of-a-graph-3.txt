using PII = pair<int, int> ;
class Solution {
    int n ;
    vector<int>visited ;
    vector<vector<PII>>graph ;
    int ret = 0 ;
    int maxTime ;
    vector<int> values ;
    void dfs(int cur, int value, int CurTime){
        if(cur == 0)
            ret = max(ret, value) ;
        
        for(auto [nxt, time] : graph[cur]){
            if(time + CurTime > maxTime)
                continue ;
            visited[nxt]++ ;
            int newValue = value + (visited[nxt] == 1 ? values[nxt] : 0) ;
            dfs(nxt, newValue, time + CurTime) ;
            visited[nxt]-- ;
        }
    }
public:
    int maximalPathQuality(vector<int>& values, vector<vector<int>>& edges, int maxTime) {
        this->n = values.size() ;  
        this->maxTime = maxTime ;
        this->values = values ;
        visited.resize(n) ;
        graph.resize(n) ;
                
        for(auto& edge : edges){
            int u = edge[0] ;
            int v = edge[1] ;
            int t = edge[2] ;
            graph[u].push_back({v, t}) ;
            graph[v].push_back({u, t}) ;
        } 
        visited[0]++ ;
        dfs(0, values[0], 0) ;
        visited[0]-- ;
        return ret ;
    }
};