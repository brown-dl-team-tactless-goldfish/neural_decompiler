int bfs(int** grid ,int i, int j,int max_height, int max_width)
{
    int sum = 0;
    
	// check grid limits - if its out of limit or its water add 1 wall
    if(i < 0 || i > (max_height - 1) || j < 0 || j > (max_width - 1) || grid[i][j] == 0)
        return 1;

	// if node was visited return 0
    if(grid[i][j] == 2)
        return 0;
   
   // mark as visited
    grid[i][j]  = 2;
    
	// check surrounding nodes
    sum += bfs(grid,i+1,j,max_height,max_width);
    sum += bfs(grid,i-1,j,max_height,max_width);
    sum += bfs(grid,i,j+1,max_height,max_width);
    sum += bfs(grid,i,j-1,max_height,max_width);
    
    return sum;
    
    
}

int islandPerimeter(int** grid, int gridSize, int* gridColSize){
 
 // find first island node then bfs
    for(size_t i = 0 ; i < gridSize; i++)
    {
        for(size_t j = 0 ; j < *gridColSize;j++)
        {
            if(grid[i][j] == 1)
            {
                return bfs(grid,i,j,gridSize,*gridColSize);
            }
        }
    }
    
    return 0;

}