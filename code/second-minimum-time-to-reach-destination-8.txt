class Solution {
public:
    int secondMinimum(int n, vector<vector<int>>& edges, int time, int change) {
        vector<vector<int>> g(n + 1);
        
        for (auto &e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        
        vector<int> visited_at(n + 1, -1);
        vector<int> visited_cnt(n + 1);
        deque<pair<int, int>> q({{0, 1}});
        int first = -1;
        
        while (!q.empty()) {
            auto [t, u] = q.front(); q.pop_front();
            if (visited_at[u] == t || visited_cnt[u] > 1) {
                continue;
            }
            visited_at[u] = t;
            visited_cnt[u]++;
            if (u == n) {
                if (first == -1) {
                    first = t;
                } else {
                    return t;
                }
            }
            bool is_green = (t / change) % 2 == 0;
            int move_at = is_green ? t : change * (t / change + 1);
            for (auto v : g[u]) {
                q.push_back({move_at + time, v});
            }
        }
        
        return -1;
    }
};