class Solution {
    int get(const vector<int> &s, const int from, const int to) {
        return s[to + 1] - s[from];
    }
    
    void better(int &x, int y) {
        if (x < 0 || x > y) x = y;
    }
public:
    int minDistance(vector<int>& houses, int k) {
        sort(houses.begin(), houses.end());
        const int n = houses.size();
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, -1));
        dp[0][0] = 0;
        vector<int> s(n + 1);
        for (int i = 1; i <= n; ++i) {
            s[i] = s[i - 1] + houses[i - 1];
            for (int j = 0; j < i; ++j) {
                for (int p = 0; p < k; ++p) {
                    if (dp[j][p] < 0) continue;
                    // house number j..i - 1
                    const int ind = j + (i - j) / 2;
                    int may = dp[j][p] + houses[ind] * (ind - j + 1) - get(s, j, ind);
                    if (ind + 1 <= i - 1) {
                        may += get(s, ind + 1, i - 1) - houses[ind] * (i - 1 - ind);
                    }
                    better(dp[i][p + 1], may); 
                }
            }
            
        }
        return dp[n][k];
        
        
    }
};