class Solution {
public:
    vector<vector<int>> dir {{1, 0},{-1, 0},{0, 1},{0, -1},{1, 1},{-1, 1},{1, -1},{-1, -1},{0, 0}};
    vector<int> gridIllumination(int N, vector<vector<int>>& lamps, vector<vector<int>>& queries) {
        unordered_map<long int, bool> lamp;
        unordered_map<int, int> row, col, diag, antiDiag;
        for (int i = 0; i < lamps.size(); i++) {
            int x = lamps[i][0], y = lamps[i][1];
            if (lamp[x * (long)N + y])
                continue;
            lamp[x * (long)N + y] = true;
            row[x]++;
            col[y]++;
            diag[x + y]++;
            antiDiag[x - y]++;
        }
        vector<int> ans(queries.size());
        for (int i = 0; i < queries.size(); i++) {
            int x = queries[i][0], y = queries[i][1];
            ans[i] = (row[x] or col[y] or diag[x + y] or antiDiag[x - y]) ? 1: 0;
            for (int d = 0; d < dir.size(); d++) {
                int r = x + dir[d][0];
                int c = y + dir[d][1];
                if (r >= 0 and c >= 0 and r < N and c < N and lamp[r * (long)N + c]) {
                    row[r]--;
                    col[c]--;
                    diag[r + c]--;
                    antiDiag[r - c]--;
                    lamp[r * (long)N + c] = !lamp[r * (long)N + c];
                }
            }
        }
        return ans;
    }
};