class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        
        vector<vector<int>> graph(n);  
        for(int i=0;i<n;i++){
            int R = stones[i][0], C = stones[i][1];
            for(int j=i+1;j<n;j++){
                int r = stones[j][0], c = stones[j][1];
                if(R == r or C == c){
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                } 
            }
        }
        
        //ans for a component = totalNodes - 1
        int ans = 0;
        vector<bool> seen(n, false);
        for(int i=0;i<n;i++){
            if(!seen[i]) ans += (dfs(i, seen, graph)-1);
        }
        
        return ans;
    }
    
    int dfs(int source, vector<bool> &seen, vector<vector<int>> &graph){
        seen[source] = true;
        
        int ans = 0;
        for(auto nbr: graph[source]){
            if(!seen[nbr]) ans += dfs(nbr, seen, graph);
        }
        
        return ans+1;
    }
    
};