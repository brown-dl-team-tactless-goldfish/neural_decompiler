class Solution {
public:
    long long maxPower(vector<int>& stations, int r, int k) {
        long long left = 1;
        long long right = 0;

        for(int ele: stations) {
            right += ele;
        }
        right += k+1;

        long long pre_sum = 0;
        vector<long long> cur_powers;
        for(int i=0;i<stations.size();i++) {
            pre_sum += stations[i];
            if(i>=r+1) {
                pre_sum -= stations[i-r-1];
            }
            cur_powers.push_back(pre_sum);
        }


        long long suffix_sum = 0;
        for(int i=stations.size()-1;i>=0;i--) {
            if(i+r+1<stations.size()) {
                suffix_sum -= stations[i+r+1];
            }

            cur_powers[i] += suffix_sum;
            suffix_sum += stations[i];
        }


        std::function<bool(long long, int)> check_func = [&](long long mid, int k) {
            long long pre_sum = 0;
            vector<long long> tmp(cur_powers.size(), 0);
            long long cur = 0;
            long long total_add = 0;

            for(int i=0;i<cur_powers.size();i++) {
                if(i-r-1>=0) {
                    cur -= tmp[i-r-1];
                }

                if(cur_powers[i] + cur < mid) {
                    long long add = mid-cur_powers[i]-cur;
                    if(i+r<cur_powers.size()) {
                        tmp[i+r] = add;
                    }else {
                        tmp[tmp.size()-1] = add;
                    }

                    cur += add;
                    total_add+=add;
                }

                if(total_add>k) {
                    return false;
                }
            }
             return true;    
        };

        while(left < right) {
            long long mid = (left+right)/2;
            bool check_flag = check_func(mid, k);
            if(check_flag) {
                left = mid+1;
            }else {
                right = mid;
            }
        }


        return left-1;
    }

    
};