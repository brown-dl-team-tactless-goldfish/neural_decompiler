class Solution {
public:
int n,m;
   bool valid(int i,int j)
   {
       if(i<0 || j<0 || i>=n || j>=m) return false;
       return true;
   }
    bool dfs(int i,int j,vector<vector<int>>& grid)
    {
        if (i==n-1 && j==m-1) return true;
        grid[i][j]=0;
        int dirx[]={0,1};
        int diry[]={1,0};
        for (int ind=0;ind<2;ind++)
        {
            int newi=i+dirx[ind];
            int newj=j+diry[ind];
            if (valid(newi,newj) && grid[newi][newj])
            {
                if (dfs(newi,newj,grid)) return true;
            }
        }
        return false;
    }
    bool isPossibleToCutPath(vector<vector<int>>& grid)
    {
        n=grid.size();
        m=grid[0].size();
       if (!dfs(0,0,grid)) return true;
       if (!dfs(0,0,grid)) return true;
       return false; 
    }
};