class Solution {
    stack<string> stk;  // Using Tag end stack to handle nested Tags (consider the issue of unbalanced when tags are nested)
    size_t pos;
    
    bool isTagValid(string &code)
    {  // Validate Tag and push the Tag end sequence
        if ( code[pos] != '<') return false;
        int tag_close = code.find('>',pos);
        if (tag_close == string::npos) return false;
		// A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]
        if (tag_close-pos-1 == 0 || tag_close-pos-1 > 9) return false;   // Not empty or greater than 9
        for (auto c : code.substr(pos+1,tag_close-pos-1))                      // Capital chars
            if (!isupper(c)) return false;
        string closing_tag = "</" + code.substr(pos+1,tag_close-pos); // Push tag end
        stk.push(closing_tag);
        pos = tag_close+1;
        return true;
    }

public:
    Solution() : pos(0) {}
	
    bool isValid(string code) {
        if (!isTagValid(code)) return false;    // Check and push the opening tag (No charsallowed before the first tag)
        while(!stk.empty())
        {
            size_t p = code.find('<',pos);  // There are 3 valid cases of "<..."
            if (p == string::npos) return false;
            if (code[p+1] == '/')    // Check if valid tag end, pop it from the stack & update position
            {
                string closing_tag = stk.top();
                stk.pop();
                if (code.length()-p< closing_tag.length()) return false;
                if (code.substr(p,closing_tag.length()) != closing_tag) return false;
                pos = p+closing_tag.length();
                continue;
            }
            if (code[p+1] == '!')    // Check if valid data tag, matching end & update position
            {
                if (code.length()-p< 9) return false;
                if (code.substr(p,9) != "<![CDATA[") return false;
                p = code.find("]]>",p+9);
                if (p == string::npos) return false;
                pos = p+3;
                continue;
            }
            pos = p;
            if (!isTagValid(code)) return false;  // Check if valid and push nested tag end
        }
        if (pos != code.length()) return false;  // No charsallowed after the end of the first(last tag end)
        return true;
    }
};

/*
"<DIV>This is the first line <![CDATA[<div>]]></DIV>"
"<TRUE><![CDATA[wahaha]]]><![CDATA[]> wahaha]]></TRUE>"
"<A><A>/A></A></A>"
"<A><A>456</A>  <A> 123  !!  <![CDATA[]]>  123 </A>   <A>123</A></A>"
"<DIV><></></DIV>"
"<AAAAAAAAAA></AAAAAAAAAA>"
*/