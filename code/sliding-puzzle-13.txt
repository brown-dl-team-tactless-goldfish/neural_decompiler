class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        vector<vector<int> > target{{1,2,3},{4,5,0}} ; 
        int moves = 0 ; 
        
        int n = board.size(), m = board[0].size() ; 
        
        queue<pair<int,vector<vector<int>> >> que ; 
        
        int dr[] = {0,1,0,-1} ;
        int dc[] = {1,0,-1,0} ; 
        
        que.push({moves,board}) ; 
        map<vector<vector<int> >, bool> mp ; 
        
        while(que.empty() == false){
            vector<vector<int> > curNode = que.front().second ;
            int mv = que.front().first; 
            que.pop() ; 
            
            if(curNode == target){
               return mv ; 
            }
            if(mp[curNode]){
                continue ; 
            }else{
                mp[curNode] = true ; 
                
                pair<int,int> zeroPos = findPos(curNode) ; 
                int r = zeroPos.first, c = zeroPos.second ; 
                
                for(int i = 0 ; i < 4 ; i++){
                    if((r + dr[i] >= 0 and r + dr[i] < n) and (c + dc[i] >= 0 and c + dc[i] < m)){
                        swap(curNode[r][c],curNode[r+dr[i]][c+dc[i]]) ;
                        if(mp[curNode] == false){
                            que.push({mv + 1,curNode}) ;             
                        }
                        swap(curNode[r][c],curNode[r+dr[i]][c+dc[i]]) ;
                    }
                }        
            }
        }
        return -1 ;
    }
    
    
    pair<int,int> findPos(vector<vector<int>> &curNode){
        for(int i = 0 ; i < 2 ; i++){
            for(int j = 0 ; j < 3 ; j++){
                if(curNode[i][j] == 0){
                    return {i,j} ; 
                }
            }
        }
        return {-1,-1} ; 
    }
};