int helper(vector<vector<int>>& dp, int n, const vector<int>& nums1, const vector<int>& nums2, int i, int mask)
{
    if (dp[i][mask] != INT_MAX)
        return dp[i][mask];
    int res = INT_MAX;
    for (int j = 0; j < n; ++j)
    {
        if (((mask >> j) & 1) == 0)
        {
            // Then nums2[j] has not been used
            int rest = i == n - 1? 0: helper(dp, n, nums1, nums2, i + 1, mask|(1 << j));
            res = min(res, (nums1[i] ^ nums2[j]) + rest);
        }
    }
    dp[i][mask] = res;
    return res;
}

int minimumXORSum(vector<int>& nums1, vector<int>& nums2) {
    int n = nums1.size();
    vector<vector<int>> dp(n, vector<int>(1 << n, INT_MAX));
    return helper(dp, n, nums1, nums2, 0, 0);
}