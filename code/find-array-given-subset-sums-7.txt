class Solution {
private:
    vector<int> ans;
public:
    void findX(vector<int>& array){
        int n = array.size();
        if(n <= 1 || n&1){
            return;
        }
        if(n == 2){
            ans.push_back(array[0] + array[1]);
            return;
        }
        int p = 1, x, v;
        bool subhaszero = false;
        while(p < n){
            x = array[p] - array[0];
            vector<int> subarray, otherarray;
            queue<int> q;
            unordered_map<int, int> freq;
            for(auto s: array){
                q.push(s);
                freq[s]++;
            }
            while(!q.empty()){
                v = q.front();
                q.pop();
                if(freq[v]){
                    freq[v]--;
                    v += x;
                    if(freq[v]){
                        freq[v]--;
                        subarray.push_back(v-x);
                        subhaszero |= (v==x);
                        otherarray.push_back(v);
                    }
                    else{
                        break;
                    }
                }
            }
            if(subarray.size() == (n>>1)){
                if(subhaszero){
                    ans.push_back(x);
                    findX(subarray);
                }
                else{
                    ans.push_back(-x);
                    findX(otherarray);
                }
                return;
            }
            p++;
            while(p < n && array[p] == array[p-1]){
                p++;
            }
        }
        return;
    }
    vector<int> recoverArray(int n, vector<int>& sums) {
        ans.clear();
        sort(sums.begin(), sums.end());
        findX(sums);
        return (ans.size() == n ? ans : vector<int>());
    }
};