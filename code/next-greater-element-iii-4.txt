void reverse(char str*, int length) 
{ 
    int start = 0; 
    int end = length - 1; 
    while (start < end) 
    { 
        char tmp = *(str + start);
        *(str + start) = *(str + end);
        *(str + end) = tmp;
        start++; 
        end--; 
    } 
} 
  
char* itoa(int num, char* str, int base) 
{ 
    int i = 0; 
    bool isNegative = false; 
  
    if (num == 0) { 
        str[i++] = '0'; 
        str[i] = '\0'; 
        return str; 
    } 
  
    if (num < 0 && base == 10) { 
        isNegative = true; 
        num = -num; 
    } 
  
   while (num != 0) { 
        int rem = num % base; 
        str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0'; 
        num = num/base; 
    } 
  
    if (isNegative) 
        str[i++] = '-'; 
  
    str[i] = '\0'; 
    reverse(str, i); 
  
    return str; 
} 

int atoi_n(char *str) 
{ 
    long res = 0;  
    for (int i = 0; str[i] != '\0'; ++i) {
        res = res*10 + str[i] - '0'; 
        if(res > INT_MAX || res < INT_MIN) return -1;
    }
    return res; 
} 

int nextGreaterElement(int n) {
	if(n < 10)	return -1;
    char nums[100];
    itoa(n, nums, 10);
    int len = strlen(nums);
    
    int i = len - 2;
    while (i >= 0 && nums[i + 1] <= nums[i]) {
        i--;
    }
    if(i < 0) return -1;
    int j = len - 1;
    while (j >= 0 && nums[j] <= nums[i]) {
        j--;
    }
    char tmp = nums[i];
    nums[i] = nums[j];
    nums[j] = tmp;
    
    int start = i + 1;
    int end = len - 1;
    while(start < end){
        char tmp = nums[start];
        nums[start] = nums[end];
        nums[end] = tmp;
        start++;
        end--;
    }
    
    long ret =  atoi_n(nums);
    return (int)ret;
}