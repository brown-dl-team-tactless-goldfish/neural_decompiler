//firstly disable all '1's, then enable '1' s from right to left to test the longest length
class Solution {
public:
    int longestSubsequence(string s, int k) {
        vector<int> ones;
        for (int i = 0; i < s.size(); ++i) 
		  if (s[i] == '1') ones.push_back(i);

        int slen=s.size(),r = s.size() - ones.size();
        for (char& c : s) if (c == '1') c = 0, slen--;

        for (int i = ones.size() - 1; i >= 0; --i) {
            if (strToInt(s) <= k)  r = max(r, slen);  else break;
            s[ones[i]] = '1';
            slen++;
            if (strToInt(s) <= k) r = max(r, slen);   else break;
        }

        return r;
    }

    long long strToInt(string& s) {
        long long r = 0;
        for (auto& c : s) {
            if (c != 0) {
                r = r * 2 + c - '0';
				if(r>1e10)return 1e10;
            }
        }
        return r;
    }
};