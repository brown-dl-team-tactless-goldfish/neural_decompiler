#define ROW_BIT_SHIFT   20
#define ROW_MASK        0x3FF00000

#define COL_BIT_SHIFT   10
#define COL_MASK        0xFF300

#define VAL_MASK        0x3FF

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

void CheckLeftRightMost(struct TreeNode* pstRoot, short sIndex, short* psLeftIndex, short* psRightIndex)
{
    if(sIndex < *psLeftIndex)
    {
        *psLeftIndex = sIndex;
    }
    else if(sIndex > *psRightIndex)
    {
        *psRightIndex = sIndex;
    }

    if(pstRoot->left) CheckLeftRightMost(pstRoot->left, sIndex-1, psLeftIndex, psRightIndex);
    if(pstRoot->right) CheckLeftRightMost(pstRoot->right, sIndex+1, psLeftIndex, psRightIndex);
}

void WriteColumnSizes(struct TreeNode* pstRoot, short sIndex, int** ppnReturnColumnSizes)
{
    (*ppnReturnColumnSizes)[sIndex]++;

    if(pstRoot->left) WriteColumnSizes(pstRoot->left, sIndex-1, ppnReturnColumnSizes);
    if(pstRoot->right) WriteColumnSizes(pstRoot->right, sIndex+1, ppnReturnColumnSizes);
}

void WriteValues(struct TreeNode* pstRoot, short sRow, short sCol, int** ppnReturnColumnSizes, int** ppnRet)
{
    ppnRet[sCol][(*ppnReturnColumnSizes)[sCol]++] = (sRow << ROW_BIT_SHIFT) | (sCol << COL_BIT_SHIFT) | pstRoot->val;

    if(pstRoot->left) WriteValues(pstRoot->left, sRow+1, sCol-1, ppnReturnColumnSizes, ppnRet);
    if(pstRoot->right) WriteValues(pstRoot->right, sRow+1, sCol+1, ppnReturnColumnSizes, ppnRet);
}

int* CompareNumber(int* pFirst, int* pSecond)
{
    return *pFirst - *pSecond;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** verticalTraversal(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    // find leftmost & rightmost
    short sLeftIndex = 0, sRightIndex = 0;
    CheckLeftRightMost(root, 0, &sLeftIndex, &sRightIndex);
    sRightIndex -= sLeftIndex;

    // trace tree and calculate **returnColumnSizes
    *returnSize = sRightIndex + 1;
    *returnColumnSizes = (int*) calloc(*returnSize, sizeof(int));
    WriteColumnSizes(root, -sLeftIndex, returnColumnSizes);

    // allocate ppnRet
    int** ppnRet = (int**) malloc((*returnSize)*sizeof(int*));
    for(short i=0; i<=sRightIndex; i++)
    {
        ppnRet[i] = (int*) malloc((*returnColumnSizes)[i]*sizeof(int));
        (*returnColumnSizes)[i] = 0;
    }

    // trace tree and write ppnRet
    WriteValues(root, 0, -sLeftIndex, returnColumnSizes, ppnRet);

    // sort and filter out mask
    for(short i=0; i<=sRightIndex; i++)
    {
        qsort(ppnRet[i], (*returnColumnSizes)[i], sizeof(int), CompareNumber);

        for(short j=0; j<(*returnColumnSizes)[i]; j++) ppnRet[i][j] &= VAL_MASK;
    }

    return ppnRet;
}