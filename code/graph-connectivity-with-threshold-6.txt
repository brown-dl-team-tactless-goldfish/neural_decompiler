    public class Solution
    {

        private class Unions
        {
            private readonly int[] _parents;
            private readonly int[] _ranks;

            public Unions(int n)
            {
                _parents = new int[n];
                _ranks = new int[n];
                for (int i = 0; i < n; i++)
                {
                    _parents[i] = i;
                }
            }

            public int Find(int x)
            {
                if (x != _parents[x])
                {
                    x = Find(_parents[x]);
                }
                return _parents[x];
            }

            public bool Union(int x, int y)
            {
                int px = Find(x);
                int py = Find(y);
                if (px == py)
                {
                    return false;
                }
                if (_ranks[px] > _ranks[py])
                {
                    _parents[py] = px;
                    _ranks[px]++;
                }
                else
                {
                    _parents[px] = py;
                    _ranks[py]++;
                }
                return true;
            }
        }

        private IList<bool> Helper(int n, int t, int[][] queries)
        {
            Unions dsu = new Unions(n);
            for (int least = t + 1; least <= n; least++)
            {
                for (int greatest = 2 * least; greatest <= n; greatest += least)
                {
                    var last = greatest - 1;
                    var prev = greatest - least - 1;
                    dsu.Union(last, prev);
                }
            }

            IList<bool> res = new List<bool>();
            for (int i = 0; i < queries.Length; i++)
            {
                res.Add(dsu.Find(queries[i][0] - 1) == dsu.Find(queries[i][1] - 1));
            }
            return res;
        }

        public IList<bool> AreConnected(int n, int threshold, int[][] queries)
        {
            return Helper(n, threshold, queries);
        }
    }