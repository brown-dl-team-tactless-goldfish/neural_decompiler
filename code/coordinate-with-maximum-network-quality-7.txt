public class Solution
    {
        private long Check(int[][] towers, long radius, int x, int y)
        {
            long res = 0;
            checked
            {
                foreach (var tower in towers)
                {
                    var dx = tower[0] - x;
                    var dy = tower[1] - y;

                    var d2 = dx * dx + dy * dy;
                    var d = Math.Sqrt(d2);

                    if (d2 > radius * radius)
                    {
                        continue;
                    }

                    res += (long)Math.Floor(tower[2] / (1 + d));
                }
            }

            return res;
        }
        

        public int[] BestCoordinate(int[][] towers, int radius)
        {
            int minX = int.MaxValue;
            int maxX = int.MinValue;

            int minY = int.MaxValue;
            int maxY = int.MinValue;

            foreach (var tower in towers)
            {
                minX = Math.Min(minX, tower[0]);
                maxX = Math.Max(maxX, tower[0]);

                minY = Math.Min(minY, tower[1]);
                maxY = Math.Max(maxY, tower[1]);
            }

            long max = int.MinValue;
            int[] res = new int[]{0,0};

            for (int x = minX; x <= maxX; x++)
            {
                for (int y = minY; y <= maxY; y++)
                {
                    var cand = Check(towers, radius, x, y);
                    if (cand > max)
                    {
                        max = cand;
                        res = new[] {x, y};
                    }
                    else if(cand == max)
                    {
                        if (res[0] > x)
                        {
                            res[0] = x;
                            res[1] = y;
                        }
                        else if(res[0] == x)
                        {
                            res[1] = Math.Min(res[1], y);
                        }
                    }
                }
            }

            return res;
        }
    }