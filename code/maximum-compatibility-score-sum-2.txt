class Solution {
public:
  int ans, size;
  vector<int> rep;
  
  void helper(int ts, int id, vector<vector<int>>& dp){
    if(id == size) {ans = max(ans, ts); return;}
    
    for(int i = 0; i != size; i++){
      if(rep[i]) continue;
      
      rep[i] = 1;
      ts += dp[id][i];
      helper(ts, id + 1, dp);
      ts -= dp[id][i];
      rep[i] = 0;
    }
  }
  
  
  int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
    int m = students.size(), n = students[0].size(); 
    vector<vector<int>> dp(m, vector<int>(m));
    
    for(int i = 0; i != m; i++)           //i - stu, j - men
      for(int j = 0; j != m; j++){
        int c = 0;
        for(int w = 0; w != n; w++)
          if(students[i][w] == mentors[j][w]) c++;
          
        dp[i][j] = c;
      }
      
    ans = 0, size = m;
    rep.resize(m,0);
    helper(0, 0, dp);
    
    return ans;
  }
};