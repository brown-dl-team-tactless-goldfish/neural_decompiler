public class Solution {
    
    private Random random;
    private Dictionary<int,int> dic;
    private int rows = 0;
    private int cols = 0;
    private int size = 0; // number of unflipped 0's
    
    public Solution(int m, int n) {
        
        random = new Random();
        dic = new Dictionary<int,int>();
        rows = m;
        cols = n;
        size = m * n;
    }
    
    public int[] Flip() {
        
        // generate a random index between [0, size), where will perform the flip
        int randomIdx = random.Next(0, size);
        size--;
        
        // flip the element at randomIdx if it was not filpped. Otherwise, flip the element at dic[randomIdx]
        int actualIdx = dic.GetValueOrDefault(randomIdx, randomIdx);
       
        // swap the flipped/processed element with the last unprocessed element (at size-1)
        dic[randomIdx] = dic.GetValueOrDefault(size, size);
            
        // get the row and col indexes
        return new int[]{actualIdx / cols, actualIdx % cols};     
    }
    
    public void Reset() {
        
        dic.Clear();
        size = rows * cols;
    }
}