class Solution {
public:
    vector<vector<int>> rotateGrid(vector<vector<int>>& grid, int k) {
        int currRows=grid.size();
        int currCols=grid[0].size();
        int i=0;
        int j=0;
        int lastCol=currCols-1;
        int lastRow=currRows-1;
        
        while(currRows>0 && currCols>0){
            rotate(currRows,currCols,grid,k,i,j,lastRow,lastCol);
            i++;
            j++;
            lastRow--;
            lastCol--;
        }
        return grid;
    }
	//rotates the outer boundary of the given matrix k times 
    void rotate(int& currRows,int& currCols,vector<vector<int>>& grid,int times,int row,int col,int lastRow,int lastCol)
    {
        //optimize k as rotating the elements x times is same as x%(total Elements) times
        times = times% ((2* currRows)+ (2* (currCols-2)));
        for(int l=0;l<times;l++)
        {
        
        int first=grid[row][col];
        //top row
        for(int k=col;k<lastCol;k++)
        {
            grid[row][k]=grid[row][k+1];
        }
        
        
        //last vertical
        for(int k=row;k<lastRow;k++)
        {
            grid[k][lastCol]=grid[k+1][lastCol];
        }
        
        //bottom line
        for(int k=lastCol;k>col;k--)
        {
            grid[lastRow][k]=grid[lastRow][k-1];
        }
        
        //first line
        for(int k=lastRow;k>row;k--)
        {
            grid[k][col]=grid[k-1][col];
        }
        grid[row+1][col]=first;
        
        }
        currRows-=2;
        currCols-=2;
    }
};