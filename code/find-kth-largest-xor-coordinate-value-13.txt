class Solution {
public:
   void fill_mat( vector<vector<int>>&matrix ,vector<vector<int>>&xor_matrix, int m, int n ) {
       for(int i=0;i<m;i++) {
           for(int j=0;j<n;j++) {
               if(i==0 && j==0) 
                   xor_matrix[i][j] = matrix[i][j];
               else if(j==0) 
                   xor_matrix[i][j] = matrix[i][j] ^ xor_matrix[i-1][j];
               else if(i==0) 
                   xor_matrix[i][j] = matrix[i][j] ^  xor_matrix[i][j-1];
               else 
                   xor_matrix[i][j] = matrix[i][j] ^ xor_matrix[i-1][j] ^ xor_matrix[i][j-1] ^ xor_matrix[i-1][j-1];
           }
       }
   }
    
    int kthLargestValue(vector<vector<int>>& matrix, int k) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> xor_matrix(m,vector<int>(n,0));     
        fill_mat(matrix,xor_matrix,m,n);
        
        vector<int>arr(m*n);
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++) 
                arr.push_back(xor_matrix[i][j]);
        
        sort(arr.rbegin(),arr.rend());
        return arr[k-1];
    }