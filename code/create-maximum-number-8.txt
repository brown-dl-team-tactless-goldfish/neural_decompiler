class Solution {
public:
    vector<int> getMaxArray(vector<int>& nums, int k){
        vector<int> ans;
        int len = nums.size();
        for(int i = 0, j = 0; i < len; ++i){
            while(j > 0 && len - i + j > k && ans[j - 1] < nums[i]){
                ans.pop_back();
                --j;
            }
            if(j < k){
                ans.push_back(nums[i]);
                ++j;
            }
        }
        return ans;
    }
    bool greater(vector<int>& nums1, int i, vector<int>& nums2, int j){
        int len1 = nums1.size();
        int len2 = nums2.size();
        while(i < len1 && j < len2 && nums1[i] == nums2[j]){
            ++i;
            ++j;
        }
        if(j == len2 || (i < len1 && nums1[i] > nums2[j])){
            return true;
        }
        return false;
    }
    vector<int> merge(vector<int>& nums1, vector<int>& nums2){
        int len1 = nums1.size();
        int len2 = nums2.size();
        vector<int> ans;
        //for_each(nums1.begin(), nums1.end(), [](int x){cout<<x<<" ";}), cout<<endl;
        //for_each(nums2.begin(), nums2.end(), [](int x){cout<<x<<" ";}), cout<<endl;
        for(int i = 0, j = 0, m = 0;i < len1 || j < len2;){
            ans.push_back((greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++]));
        }
        //for_each(ans.begin(), ans.end(), [](int x){cout<<x<<" ";}), cout<<endl;
        return ans;
    }
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        int len1 = nums1.size();
        int len2 = nums2.size();
        if(len1 < len2){
            return maxNumber(nums2, nums1, k);
        }
        vector<int> ans;
        for(int i = max(0, k - len1); i <= min(k, len2); ++i){
            vector<int> c2 = getMaxArray(nums2, i);
            vector<int> c1 = getMaxArray(nums1, k - i);
            vector<int> c = merge(c1, c2);
            if(ans.empty() || greater(c, 0, ans, 0)){
                ans = c;
            }
        }
        return ans;
    }
};