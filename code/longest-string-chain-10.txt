int longestStrChain(vector<string>& words) 
{
	vector<vector<int>> wordFreqs(words.size(), vector<int>(26));

	for(int i = 0; i < words.size(); ++i)
	{
		for(auto c : words[i])
		{
			++wordFreqs[i][c - 'a'];
		}
	}

	vector<vector<int>> graph(words.size());

	for(int i = 0; i < wordFreqs.size(); ++i)
	{
		for(int j = 0; j < wordFreqs.size(); ++j)
		{
			if(i == j)
			{
				continue;
			}
			else if(isPredecessor(wordFreqs[i], wordFreqs[j]))
			{
				graph[i].push_back(j);
			}
		}
	}

	int maxDepth = 0;

	for(int u = 0; u < graph.size(); ++u)
	{
		dfs(graph, maxDepth, u, 1);
	}

	return maxDepth;
}

bool isPredecessor(const vector<int>& preFreqs, const vector<int>& nextFreqs)
{
	int diff = 0;

	for(int i = 0; i < preFreqs.size(); ++i)
	{
		if(preFreqs[i] > nextFreqs[i])
		{
			return false;
		}

		diff += nextFreqs[i] - preFreqs[i];
	}

	return diff == 1;
}

void dfs(const vector<vector<int>>& graph, int& maxDepth, int u, int depth)
{
	maxDepth = max(maxDepth, depth);

	for(auto v : graph[u])
	{
		dfs(graph, maxDepth, v, depth + 1);
	}
}