// RS Hash Function
unsigned int RSHash(char *str)
{
    unsigned int b = 378551;
    unsigned int a = 63689;
    unsigned int hash = 0;

    while (*str)
    {
        hash = hash * a + (*str++);
        a *= b;
    }

    return (hash & 0x7FFFFFFF);
}
int cmp(const void* a, const void* b){
    return *(unsigned int*)a - *(unsigned int*)b;
}
bool wordPattern(char * pattern, char * s){
    int* hash = calloc( 26 , sizeof(int));
    int idx = 0;
    int n = strlen(s);
    int p_n = strlen(pattern);
    int begin = 0;
    for(int i = 0; i < n ;i++){
        if(s[i] == ' ' ){
            s[i] = '\0';
            unsigned int val = RSHash(&s[begin]);
            begin = i + 1;
            if(hash[pattern[idx] - 'a'] == 0){
                hash[pattern[idx] - 'a'] = val;
            }
            else if(hash[pattern[idx] - 'a'] != val)
                return false;
            idx++;
            if(idx == p_n)
                return false;
        }
        else if(i == n-1){
            unsigned int val = RSHash(&s[begin]);
            begin = i + 1;
            if(hash[pattern[idx] - 'a'] == 0){
                hash[pattern[idx] - 'a'] = val;
            }
            else if(hash[pattern[idx] - 'a'] != val)
                return false;
            idx++ ;  
            if(idx < p_n)
                return false;
        }
    }
    qsort(hash, 26, sizeof(unsigned int), cmp);
    for(int i = 0; i < 26; i++){
        if(hash[i] != 0){
            if(hash[i] == hash[i-1])
                return false;
        }
    }
    free(hash);
    return true;
}