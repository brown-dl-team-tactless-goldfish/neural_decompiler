const int dirs[] = {0, -1, 0, 1, 0};

// function declaration
int dfs(int**, int, int, int, int, int, int, int);


int uniquePathsIII(int** grid, int gridSize, int* gridColSize){
  const int m = gridSize, n = *gridColSize;
  int sx = -1, sy = -1, tx = -1, ty = -1, k = 0;
  for (int y = 0; y < m; ++y)
    for (int x = 0; x < n; ++x)
      if (grid[y][x] == 1) sx = x, sy = y;
      else if (grid[y][x] == 2) tx = x, ty = y;
      else if (grid[y][x] == 0) ++k;

  return dfs(grid, m, n, sx, sy, tx, ty, k + 2);
}

int dfs(int** grid, int m, int n, int x, int y, int tx, int ty, int k) {
  if (x < 0 || y < 0 || x == n || y == m || grid[y][x] == -1)
    return 0;
  
  if (x == tx && y == ty && k == 1)
    return 1;

  grid[y][x] = -1; // mark as visited;
  int ans = 0;
  for (int i = 0; i < 4; ++i)
    ans += dfs(grid, m, n, x + dirs[i], y + dirs[i + 1], tx, ty, k - 1);

  grid[y][x] = 0; // backtracking 
  return ans;
}
