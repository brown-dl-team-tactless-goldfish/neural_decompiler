class Solution {
    int r , c , kp;
    int mod = 1000000007;
public:
    
    int p(int x , int y , int sum , vector<vector<vector<int>>>& dp , vector<vector<int>>& grid) {
        sum += grid[x][y];
        sum %= kp;
        if(x == r - 1 && y == c - 1) {
            if(sum % kp == 0)
                return 1;
            return 0;
        }
        
        if(dp[x][y][sum] != -1)
            return dp[x][y][sum];
        
        int tot = 0;
        
        if(x + 1 < r) {
            tot += p(x + 1 , y , sum , dp , grid);
            tot %= mod;
        }
        
        if(y + 1 < c) {
            tot += p(x , y + 1 , sum , dp , grid);
            tot %= mod;
        }
        
        return dp[x][y][sum] = tot % mod;
    }
    
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        r = grid.size();
        c = grid[0].size();
        kp = k;
        vector<vector<vector<int>>> dp(r , vector<vector<int>>(c , vector<int>(k , -1)));
        return p(0 , 0 , 0 , dp , grid);
        
    }
};