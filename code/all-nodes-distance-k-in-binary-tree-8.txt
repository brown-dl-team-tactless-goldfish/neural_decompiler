/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    unordered_map<TreeNode*, TreeNode*> parents;
    vector<int> ans;
    void dfs(TreeNode* target, int k, vector<int> &visited)
    {
        if(k == 0)   
        {
            ans.push_back(target->val);
                return;
        }
        if(target->left != NULL && visited[target->left->val] != 1)
        {
            k--;
            visited[target->left->val]++;
            dfs(target->left, k, visited);
            k++;
        }
        if(target->right != NULL && visited[target->right->val] != 1)
        {
            k--;
            visited[target->right->val]++;
            dfs(target->right, k, visited);
            k++;
        }
        if(parents[target] && visited[parents[target]->val] != 1)
        {
            --k;
            visited[parents[target]->val]++;
            dfs(parents[target], k, visited);
            ++k;
        }
        return;
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            int n = q.size();
            for(int i = 0; i < n; i++)
            {
                auto it = q.front();
                q.pop();
                if(it->left != NULL)
                {
                    q.push(it->left);
                    parents[it->left] = it;
                }
                if(it->right != NULL)
                {
                    q.push(it->right);
                    parents[it->right] = it;
                }
            }
        }
        vector<int> visited(5001, 0);
        visited[target->val]++;
        dfs(target, k, visited);
        return ans;
    }
};