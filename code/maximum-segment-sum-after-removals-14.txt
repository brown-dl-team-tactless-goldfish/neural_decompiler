#define v vector
#define ll long long

class UnionFind {
private:
    v<int> root;
    v<int> rank;
    v<ll> val;
    int size;

public:
    UnionFind(int sz) {
        for(int i = 0; i < sz; i++) root.push_back(i);
        rank.resize(sz, 1);
        val.resize(sz, 0);
        size = sz;
    }
    
    void init(int index, int value) {
        val[index] = value;
    }
    
    int find(int x) {
        if(x == root[x]) return x;
        return x = find(root[x]);
    }
    
    void set(int x, int y) {
        if(x < 0 || x >= size) return;
        if(y < 0 || y >= size) return;
        
        int rootX = find(x);
        int rootY = find(y);
        if(!val[rootX] || !val[rootY]) return;
        
        if(rank[rootX] > rank[rootY]) {
            root[rootY] = rootX;
            val[rootX] += val[rootY];
        } else if(rank[rootX] < rank[rootY]) {
            root[rootX] = rootY;
            val[rootY] += val[rootX];
        } else {
            root[rootY] = rootX;
            rank[rootX]++;
            val[rootX] += val[rootY];
        }
    }
    
    ll get(int x) {
        int rootX = find(x);
        return val[rootX];
    }
};

class Solution {
public:
    v<ll> maximumSegmentSum(v<int>& nums, v<int>& removeQueries) {
        int sz = nums.size();
        UnionFind uf(sz);
        v<ll> res(sz);
        ll maxCur = 0;
        
        for(int i = sz - 1; i >= 0; i--) {
            res[i] = maxCur;
            
            int query = removeQueries[i];
            uf.init(query, nums[query]);
            
            uf.set(query, query - 1);
            uf.set(query, query + 1);
            maxCur = max(maxCur, uf.get(query));
        }
        
        return res;
    }
};