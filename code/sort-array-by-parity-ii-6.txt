/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int* sortArrayByParityII(int* nums, int numsSize, int* returnSize){
int *ans = (int*)malloc(sizeof(int)*numsSize);
    *returnSize=numsSize;
    int *odd = (int*)malloc(sizeof(int)*numsSize/2);
    int *even = (int*)malloc(sizeof(int)*numsSize/2);
    int j=0,k=0;
    for(int i=0;i<numsSize;i++)
    {
        if(nums[i]%2==0)
        {
            even[j]=nums[i];
            j++;
        }
        else
        {
            odd[k]=nums[i];
            k++;
        }
    }
    j=0,k=0;
    for(int i=0;i<numsSize;i++)
    {
        if(i%2==0)
        {
            ans[i]=even[j];
            j++;
        }
        else
        {
            ans[i]=odd[k];
            k++;
        }
    }
    return ans;
}



// By Swapping
// -----------

// int* sortArrayByParityII(int* nums, int numsSize, int* returnSize){
// int n = numsSize;
// 	int i = 0, j = n-1;
// 	while(i<n) {
// 		while(i<n && nums[i]%2==0) i+=2;
// 		if(i==n) break;
// 		while(j>=0 && nums[j]%2==1) j-=2;
// 		swap(nums[i], nums[j]);
// 	}
// 	return nums;
//     }
