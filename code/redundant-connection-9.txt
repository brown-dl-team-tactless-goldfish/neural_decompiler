class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size() + 1;
        vector<int> adj[n];
        vector<int> seen(n, 0);
        for (auto it : edges) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
            if (dfs(it[0],-1,adj, seen)) {
                return it;
            }
        }
        return {};
    }
    private:
    bool dfs(int cur,int parent,vector<int> adj[],vector<int> &vis)
    {
        vis[cur] = 1;
        for(auto it:adj[cur])
        {
            if(!vis[it])
            {
                if(dfs(it,cur,adj,vis)) return true;
            }
            else if(it != parent)
            {
                return true;
            }
        }
        vis[cur] = 0;
        return false;
    }
};