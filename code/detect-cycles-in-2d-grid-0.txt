static bool dfsCycle(char** grid, int gridSize, int* gridColSize, bool** visited, int i, int j, int prev, char key);
static void freeVisited(bool** visited, int gridSize);

bool containsCycle(char** grid, int gridSize, int* gridColSize){
    bool** visited = malloc(gridSize * sizeof(bool*));
    for (int i = 0; i < gridSize; i++) {
        visited[i] = malloc(*gridColSize * sizeof(bool));
        for (int j = 0; j < *gridColSize; j++) visited[i][j] = false;
    }
    
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < *gridColSize; j++) {
            if (!visited[i][j]) {
                if (dfsCycle(grid, gridSize, gridColSize, visited, i, j, 0, '0')) {
                    freeVisited(visited, gridSize);
                    return true;  
                } 
            }
        }
    }
    
    freeVisited(visited, gridSize);
    return false;
}

static bool dfsCycle(char** grid, int gridSize, int* gridColSize, bool** visited, int i, int j, int prev, char key) {
    if (i < 0 || i >= gridSize || j < 0 || j >= *gridColSize) return false;
    if (prev != 0 && grid[i][j] != key) return false;
    if (prev != 0 && visited[i][j]) return true;

    visited[i][j] = true;
    if (prev != 1) if (dfsCycle(grid, gridSize, gridColSize, visited, i - 1, j, 3, grid[i][j])) return true;
    if (prev != 2) if (dfsCycle(grid, gridSize, gridColSize, visited, i, j + 1, 4, grid[i][j])) return true;
    if (prev != 3) if (dfsCycle(grid, gridSize, gridColSize, visited, i + 1, j, 1, grid[i][j])) return true;
    if (prev != 4) if (dfsCycle(grid, gridSize, gridColSize, visited, i, j - 1, 2, grid[i][j])) return true;
    return false;
}

static void freeVisited(bool** visited, int gridSize) {
    for (int i = 0; i < gridSize; i++) {
        free(visited[i]);
    }
    free(visited);
}