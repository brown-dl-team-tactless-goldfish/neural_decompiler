class Solution {
public:
    int getTrailing(int num) {
        if (num == 0) {
            return 0;
        }
        auto s = to_string(num);
        int ans = 0;
        while (s.back() == '0') {
            ans++;
            s.pop_back();
        }
        return ans;
    }
    
    int maxTrailingZeros(vector<vector<int>>& grid) {
        
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<long long>> gv = vector(m, vector(n, 0ll));
        vector<vector<long long>> gh = vector(m, vector(n, 0ll));
        
        gv[0][0] = grid[0][0];
        gh[0][0] = grid[0][0];
        
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                gv[0][j] = grid[0][j];
                gv[i][j] = grid[i][j] * gv[i - 1][j];
            }
        }
        
        for (int i = 0; i < m; i++) {
            gh[i][0] = grid[i][0];
            for (int j = 1; j < n; j++) {
                gh[i][j] = grid[i][j] * gh[i][j - 1];
            }
        }
        
        
        int ans = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans = max(ans, getTrailing(gv[i][j]) + getTrailing(j ? gh[i][j - 1] : 0));
                
                ans = max(ans, getTrailing(gv[i][j]) + getTrailing(gh[i][n - 1] / gh[i][j]));
                
                ans = max(ans, getTrailing(gh[i][j]) + getTrailing(gv[m - 1][j] / (gv[i][j] )));
                
                ans = max(ans, getTrailing(gh[i][n - 1] / (j ? gh[i][j - 1] : 1)) + getTrailing(gv[m - 1][j] / gv[i][j]));
            }
        }
        
        return ans;
    }
};