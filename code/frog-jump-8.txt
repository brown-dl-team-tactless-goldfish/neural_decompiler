class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s=0;
        int e=nums.size()-1;
        
        while(s<=e){
            int mid=s+(e-s)/2;
            
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid] > target){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return -1;
    }
    
    bool f(int ind, int lastInd, int n, vector<int>& arr, vector<vector<int>>& dp){
        if(ind == n-1) return true;
        if(dp[ind][lastInd] != -1) return dp[ind][lastInd];
        int lastJump = arr[ind]-arr[lastInd];
        int x = search(arr, arr[ind]+lastJump);
        int y=-1;
        if(lastJump-1 > 0) y = search(arr, arr[ind]+lastJump-1);
        int z = search(arr, arr[ind]+lastJump+1);
        
        if(x==-1 && y==-1 && z==-1) return false;
        
        bool a=0, b=0, c=0;
        if(x != -1){
            a = f(x, ind, n, arr, dp);
        }
        if(y!=-1){
            b = f(y, ind, n, arr, dp);
        }
        if(z!=-1){
            c = f(z, ind, n, arr, dp);
        }
        
        return dp[ind][lastInd]  = a|(b|c);
    }
    
    bool canCross(vector<int>& arr) {
        int n = arr.size();
        
        if(arr[1] != 1) return false;
        
        vector<vector<int>> dp(n, vector<int>(n, -1));
        
        return f(1, 0, n, arr, dp);
    }
};