int mergeSort(int* nums, int numsSize) {
    int middle;
    int pointer_2;
    int pointer_1;
    
    if(numsSize == 1) {
        return 0;
    }
    
    /* If .5, rounds it to the lower value */
    middle = round(numsSize / 2);  
    mergeSort(nums, middle);
    mergeSort(&nums[middle], numsSize - middle);
    
    int temp[numsSize];
    int temp_index = 0;
    pointer_1 = 0;
    pointer_2 = middle;
    
    while (pointer_2 < numsSize || pointer_1 < middle) {        
        if(pointer_1 >= middle) {
            temp[temp_index] = nums[pointer_2];
            pointer_2++;
        } else if(pointer_2 >= numsSize) {
            temp[temp_index] = nums[pointer_1];
            pointer_1++;
        } else if(nums[pointer_1] > nums[pointer_2]) {
            temp[temp_index] = nums[pointer_2];
            pointer_2++;
        } else if (nums[pointer_2] > nums[pointer_1]) {
            temp[temp_index] = nums[pointer_1];
            pointer_1++;
        } else if(nums[pointer_2] == nums[pointer_1]) {
            temp[temp_index] = nums[pointer_1];
            temp_index++;
            temp[temp_index] = nums[pointer_1];
            pointer_1++;
            pointer_2++;
        }
        temp_index++;
    }

    for(int i = 0; i < numsSize; i++) {
        nums[i] = temp[i];
    }
    
    return 0;
}


int numSubseq(int* nums, int numsSize, int target){
    int numberSequences = 0;
    int window_p1 = 0;
    int window_p2 = 0;
    int sizeCleaned = 0;
    
    //Sort all elements
    mergeSort(nums, numsSize);
    
    long powerOfTwoFiltered[numsSize];
	result = 0;
    //The number of possible subsequences given two pointers
    // equals 2^(p2 - p1)
    // powerOfTwoFiltered = 
    // [
    //      Distance between two pointers => Number of subsequences
    //      1 => 2¹
    //      2 => 2²
    //      ...
    // ]
    powerOfTwoFiltered[0] = 1;
    
    for(int i = 1; i < numsSize; i++) {
        //Modulo it right there to avoid overflowing the long value
        powerOfTwoFiltered[i] = powerOfTwoFiltered[i - 1] * 2 % 1000000007;
    }
    
    int left = 0;
	right = numsSize - 1;
    while(left <= right)
    {
        if(nums[left] + nums[right] > target)
            right--;
        else
        {
            result += powerOfTwoFiltered[right - left];
            left++;
        }
    }
    
    return (int)(result % 1000000007);
}