class Solution {
public:
    static bool mycompare(pair<int, int> &p1, pair<int, int> &p2){
      return p1.first > p2.first; 
    }
    int minimumOperations(vector<int>& nums) {
            int n = nums.size();
            if(n == 1)
              return 0;
            if(n == 2)
               return nums[0] == nums[1] ? 1 : 0;
            unordered_map<int, int> mp1, mp2;
            for(int i = 0; i<n; i+=2){
                    mp1[nums[i]]++;
            }
            for(int i=1; i<n; i+=2){
                    mp2[nums[i]]++;
            }
            vector<pair<int, int>> v1, v2;
            for(auto &it : mp1)
                    v1.push_back({it.second, it.first});
            for(auto &it : mp2)
                    v2.push_back({it.second, it.first});
            sort(v1.begin(), v1.end(), mycompare);
            sort(v2.begin(), v2.end(), mycompare);
            
            if(v1[0].second != v2[0].second)
                    return (n - v1[0].first - v2[0].first);
            else
            {
                    int ans = n;
                    if(v1.size() == 1 && v2.size() == 1)
                            return ans - max(v1[0].first, v2[0].first);
                    else if(v1.size() == 1)
                            return ans - v1[0].first - v2[1].first;
                    else if(v2.size() == 1)
                            return ans - v1[1].first - v2[0].first;
                    else
                            return ans - max(v1[0].first+v2[1].first, v1[1].first+v2[0].first);
            }
            return 0;
    }
};