class Solution {
public:
    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {
        unordered_map<size_t, size_t> word_counts{};
        for (const auto& i : words) {
            size_t letters = 0;
            
            for (auto c : i) {
                letters |= 1ull << (c - 'a');
            }
            auto n_letters = __builtin_popcountll(letters);
            if (n_letters > 7) continue;
            
            ++word_counts[letters];
        }
        

        vector<int> result{};
        result.reserve(puzzles.size());
        for (const auto& i : puzzles) {
            size_t letters = 0;
            for (auto c : i) {
                letters |= 1ull << (c - 'a');
            }
            
            int curr = 0;
            for (size_t j = 0; j < (1ull << 6); ++j) {
                auto cand = letters;
                for (size_t k = 0; k < 6; ++k) {
                    if (j & (1ull << k)) {
                        auto mask = 1ull << (i[k + 1] - 'a');
                        // Assuming all letters are unique in puzzles.
                        cand ^= mask;
                    }
                }
                curr += word_counts[cand];
            }
            result.push_back(curr);
        }

        return result;
    }
};