class Solution {
public:
    bool isVisited[100000];
    vector<int> AdjLst[100000];
    void dfs(int idx)
    {
        for(auto x : AdjLst[idx])
            if(!isVisited[x])
            {
                isVisited[x]=true;
                dfs(x);
            }
        return;
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(n-1 > connections.size())return -1;
        int ans = 0;
//         Connections must be complete
        for(int i = 0 ; i < n ; i++)
        isVisited[i] = false;
        for(auto x : connections)
        {
            AdjLst[x[0]].push_back(x[1]);
            AdjLst[x[1]].push_back(x[0]);
        }
        for(int i = 0 ; i < n ; i++)
        {
            if(isVisited[i])continue;
            else
            {
                dfs(i);
                ans++;
            }
        }
        return ans-1;
    }
};
