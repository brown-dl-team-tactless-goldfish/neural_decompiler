class Solution {
public:
    int longestPalindrome(string word1, string word2) {
        string s=word1+word2;
        int n=s.length();
        /*
        vector<vector<bool>>ispal(n,vector<bool>(n,false));
       //ispal[i][j] is true if string i->j is palindrome, else false
        for(int i=n-1;i>=0;i--){
            for(int j=i;j<n;j++){
                if(s[i]==s[j]){
                    if(i+1>=j || ispal[i+1][j-1]==true)
                        ispal[i][j]=true;
                }
            }
        }*/
        
        vector<vector<int>>pal(n,vector<int>(n,0));
       //pal[i][j]=longest palindromic subsequence between i and j
        for(int i=n-1;i>=0;i--){
            for(int j=i;j<n;j++){
                if(s[i]==s[j]){
                    if(i+1>=j)
                        pal[i][j]=j-i+1;
                    else
                        pal[i][j]=2+pal[i+1][j-1];
                        
                }
                else
                    pal[i][j]=max(pal[i+1][j],pal[i][j-1]);
            }
        }
        int ans=0;
        for(int i=0;i<word1.length();i++){
            for(int j=0;j<word2.length();j++){
                if(word1[i]==word2[j])
                    ans=max(ans,2+pal[i+1][word1.length()+j-1]);
            }
        }
        return ans;
        
    }

};