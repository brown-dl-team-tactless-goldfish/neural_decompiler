/*
reccurence relation:
Directions = [
  [-2, -1],
  [-2, 1],
  [-1, 2],
  [1, 2],
  [2, 1],
  [2, -1],
  [1, -2],
  [-1, -2]
];

0 <= r < N, 0 <= c < N, k === 0
probability(r, c, k) = 1

0 <= r < N, 0 <= c < N, k > 1
probability(r, c, k) = Σ(x, y)∈Directions probability(r + x, c + y, k - 1) / 8

r < 0 || r > N, c < 0 || c > N
probability(r, c, k) = 0

 */
#define DIRECTIONS 8

int directions[8][2] = {
    {-2, -1},
    {-2, 1},
    {-1, 2},
    {1, 2},
    {2, 1},
    {2, -1},
    {1, -2},
    {-1, -2}
};


double knightProbability(int N, int K, int r, int c){
    

  double prevdp[N][N], currdp[N][N];
  double res = 0;
  int row, col, k, step, i, j; 
  int prevRow;
  int prevCol;  
    

  for (row = 0; row < N; row++) {
      for (col = 0; col < N; col++) {
           prevdp[row][col] = 0;
           currdp[row][col] = 0;
      }
  }
    
  prevdp[r][c] = 1;
    
   for (step = 1; step <= K; step++) {
    for (row = 0; row < N; row++) {
      for (col = 0; col < N; col++) {
        for (i = 0; i < DIRECTIONS; i++) {
          
          prevRow = row + directions[i][0];
          prevCol = col + directions[i][1];
          if (prevRow >= 0 && prevRow < N && prevCol >= 0 && prevCol < N) {
                currdp[row][col] += prevdp[prevRow][prevCol] / 8;
          }
        }
      }
    }
      for (row = 0; row < N; row++) {
        for (col = 0; col < N; col++) {
           prevdp[row][col] = currdp[row][col];
           currdp[row][col] = 0;
        }
      }
  } 
    
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            res += prevdp[i][j];
        }
    }
    
    return res;
   
}