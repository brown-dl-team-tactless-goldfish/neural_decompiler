class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, unordered_map<string, double>> mp;
        vector<double> result;
        
		// Populating mp. Straightforward....
        for (int i = 0; i < equations.size(); i++) {
            mp[equations[i][0]][equations[i][1]] = values[i];
            mp[equations[i][1]][equations[i][0]] = 1 / values[i];
        }
        
		// key part (BFS)
        for(auto [a, val]: mp) {
            queue<string> q;
            for (auto [b, val]: mp[a]) q.push(b);
            
            while(!q.empty()) {
                string b = q.front();
                q.pop();
                
                for (auto [c, val] : mp[b]) {
                    if (mp[a].count(c) == 0) {
                        mp[a][c] = mp[a][b] * mp[b][c];
                        mp[c][a] = 1 / mp[a][c];
						q.push(c);
                    }
                }
            }
        }
        
		// Querying. Straighforward...
        for(vector<string> q: queries) {
            if(mp[q[0]].count(q[1])) result.push_back(mp[q[0]][q[1]]);
            else result.push_back(-1.0);
        }
        
        return result;
    }
};