public class Solution {
    private Dictionary<(int, int), int> dict = new Dictionary<(int, int), int>(); // (target, k) as the key
    
    public int LeastOpsExpressTarget(int x, int target) {
        // get the biggest ai*x^i, i
        int T = GetMaxTopRight(x, target);
        return DFS(x, target, T)-1;// by default, we have the first sign as +, so here we need to get rid of it.
    }
    
    public int GetMaxTopRight(int x, int target) {
        int res = x;
        int count = 0;
        while (res < target) {
            res *= x;
            count++;
        }
        
        return count+1;
    }
    
    public int DFS(int x, int target, int k) {
        if (k == 0) return target * 2;
        
        if (dict.ContainsKey((target, k))) {
            return dict[(target, k)];
        }
        
        int a = target / (int)Math.Pow(x, k);
        
        // pick a
        int ans1 = a * k + DFS(x, target-a*(int)Math.Pow(x, k), k-1); 
        // pick a+1   
        int ans2 = (a+1) * k + DFS(x, Math.Abs(target-(a+1)*(int)Math.Pow(x, k)), k-1);
        
        dict[(target, k)] = Math.Min(ans1, ans2);
        return dict[(target, k)];
    }
}