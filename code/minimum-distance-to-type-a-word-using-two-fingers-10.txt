class Solution {
public:
    int minimumDistance(string word) {
     
        memo = vector<vector<vector<int>>>(word.size(), vector<vector<int>>(26 + 1, vector<int>(26 + 1, -1)));
        
        return minDistance(word, 0, make_pair<int, int>(-1,-1), make_pair<int,int>(-1,-1));
    }
    
    // Min(word[i:], pos1, pos2)
    // base i == n -> 0
    // otherwise Min(cost(pos1) + Min(word[i+1:], pos1 + move, pos2), cost(pos2) + Min(word[i+1:], pos1, pos2 + move))
    
    int cost_to_move(const pair<int, int>& a, const pair<int, int>& b) {
        if (b.first == -1) {
            return 0;
        }
        
        return abs(a.first - b.first) + abs(a.second - b.second);
    }
    
    pair<int,int> positionOf(char c) {
        
        if (c >= 'A' && c <= 'F') {
            return make_pair<int, int>(0, c - 'A');
        }
        
        if (c >= 'G' && c <= 'L') {
            return make_pair<int, int>(1, c - 'G');
        }
        
        if (c >= 'M' && c <= 'R') {
            return make_pair<int, int>(2, c - 'M');
        }
        
        if (c >= 'S' && c <= 'X') {
            return make_pair<int, int>(3, c - 'S');
        }
        
        return make_pair<int, int>(4, c - 'Y');
    }
    
    int minDistance(const string& word, int idx, pair<int,int> pos1, pair<int,int> pos2) {
        
        if (idx >= word.size()) {
            return 0;
        }
        
        int p1 = pos1.first == -1 ? 26 : pos1.first * 6 + pos1.second;
        int p2 = pos2.first == -1 ? 26 : pos2.first * 6 + pos2.second;
        if (memo[idx][p1][p2] != -1) {
            return memo[idx][p1][p2];
        }
        
        pair<int,int> target_position = positionOf(word[idx]);
        int cost1 = cost_to_move(target_position, pos1);
        int cost2 = cost_to_move(target_position, pos2);
        
        int result =  min(cost1 + minDistance(word, idx + 1, target_position, pos2),
                         cost2 + minDistance(word, idx + 1, pos1, target_position));        
        
        memo[idx][p1][p2] = result;
        
        return result;
    }
    
    vector<vector<vector<int>>> memo;
};