class Solution {
public:
    bool valid(int mid,vector<int>& candies,long long k)
    {
        // it will containg the count that will tell we can assign or not assign candies to children 
        long sum = 0;
        for(auto it : candies)
        {
            sum += (it/mid);
            
            // if any time our sum is reches to k childrens it means we can assign so return true
            if(sum>=k)
                return true;
        }
        return false;
    }
    
    int maximumCandies(vector<int>& candies, long long k) 
    {
        // initializing two pointers onr for min one for max
        // our answer lies between both of them it is final
        long left  = 1;
        long right = *max_element(begin(candies), end(candies));
        
        // applyting the binary search for searching that element
        while(left<=right)
        {
            // deriving mid value
            long mid = left+(right-left)/2;
            
            // if we can assign mid candies to k childrens successfully 
            // then can check for next bigger value
            if(valid(mid,candies,k))
            {
                left = mid+1;
            }
            
            // if we can not assign mid candies to k childrens successfully
            // then can check for lesser value
            else
            {
                right = mid-1;
            }
        }
        return right;
    }
};