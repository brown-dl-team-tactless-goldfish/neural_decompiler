int max(int a, int b ,int c){
    if (b > a){
        a = b;
    }
    if (c > a){
        return c;
    }
    return a;
}

void makelist(int pilesSize, int* pilesColSize, int number, int k, int** list_of_piles, int* take_max){
    if (pilesSize == number){
        return;
    }  
    int* thistime = calloc(k,sizeof(int));
    makelist(pilesSize, pilesColSize, number+1, k, list_of_piles, thistime);
    int can_take_total = pilesColSize[number] < k ? pilesColSize[number] : k;
    int i = 0;;
    for (; i < can_take_total ; i++){
        for (int j = 0 ; j + i + 1 < k && thistime[j] != 0; j++){
            if (list_of_piles[number][i] + thistime[j] > take_max[i+1+j]){
                take_max[i+1+j] = list_of_piles[number][i] + thistime[j];
            }   
        } 
        take_max[i] = max(list_of_piles[number][i], thistime[i], take_max[i]);
    }
    while (i < k){
        take_max[i] = take_max[i] > thistime[i] ? take_max[i] : thistime[i];
        i++;
    }
    free(thistime);
    return;
}


int maxValueOfCoins(int** piles, int pilesSize, int* pilesColSize, int k){
    int** list_of_piles = malloc(sizeof(int*)*pilesSize);
    int* take_max = calloc(k,sizeof(int));
    for (int i = 0 ; i < pilesSize ; i++){
        list_of_piles[i] = malloc(sizeof(int)*pilesColSize[i]);
        list_of_piles[i][0] = piles[i][0];
        for (int j = 1 ; j < pilesColSize[i] ; j++){
            list_of_piles[i][j] = list_of_piles[i][j-1] + piles[i][j];
        }
    }
    makelist(pilesSize, pilesColSize, 0, k, list_of_piles, take_max);
    int ans = take_max[k-1];
    free(take_max);
    return ans;
}