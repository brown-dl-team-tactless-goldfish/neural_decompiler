class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        vector<int> arr;
        for(int i = 0; i < k; i++){
            arr.push_back(nums[i]);
        }
        
        sort(arr.begin(),arr.end());
        
        vector<double> ans;
        if(k&1){
            ans.push_back(arr[k/2]);
        }
        else{
            ans.push_back(((double)arr[k/2]+(double)arr[(k/2)-1])/2.0);
        }
        int n = nums.size();
        int lo = 0;
        for(int i = k; i < n; i++){
            // remove nums[lo] and add nums[i]
            
            // remove nums[lo]
            int ind = lower_bound(arr.begin(),arr.end(),nums[lo])-arr.begin();
            while(ind+1 < k){
                arr[ind] = arr[ind+1];
                ind++;
            }
            
            // insert nums[i]
            ind = lower_bound(arr.begin(),arr.end(),nums[i])-arr.begin();
            int j = k-1;
            while(j > ind){
                arr[j] = arr[j-1];
                j--;
            }
            arr[j] = nums[i];
             if(k&1){
                ans.push_back(arr[k/2]);
            }
            else{
                ans.push_back(((double)arr[k/2]+(double)arr[(k/2)-1])/2.0);
            }
            
            lo++;
            
        }
        
        return ans;
    }
};