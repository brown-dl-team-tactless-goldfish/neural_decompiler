 void reverse(char s[])
 {
     int i, j;
     char c;
 
     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 } 

void itoa(int n, char s[])
 {
     int i, sign;
 
     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
     } while ((n /= 10) > 0);     /* delete it */
     if (sign < 0)
         s[i++] = '-';
     s[i] = '\0';
     reverse(s);
 }

int compress(char* chars, int charsSize){
    int position = 0, i = 0, counter = 1, newCounter = 0, ans = 0, j;
    char *new = (char*)malloc(sizeof(char)*(charsSize+1));
    if (new == NULL) {printf ("null"); return 0;}
    
    if (charsSize == 1) return 1;
    if (charsSize == 0) return 0;
    
    while (i < charsSize){
        j = i+1;
        counter = 1;
        
        while (j < charsSize && chars[j] == chars[i]) {j++; counter++;}
        new[newCounter] = chars[i]; newCounter++; ans++;
        if (counter > 1){
            if (counter < 10){
                new[newCounter] = '0' + counter;
                newCounter++;
                ans++;
            }
            else{
                new[newCounter] = '\0';
                char s[charsSize];
                itoa (counter, s);
                strcat (new, s);
                newCounter += strlen(s);
                ans += strlen(s);
            }
        }
        i = j;
    }
    new[newCounter] = '\0';
    memcpy(chars, new, sizeof(chars[0])*newCounter);
    return ans;
}