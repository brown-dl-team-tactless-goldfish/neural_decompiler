/*
 * Function for calculating the longest continuous alphabetical string in a string
 */
int longestContinuousSubstring(char * s){
    int current_len = 1, max_len = 1;

    // looping over string of length n, till i = n - 2 
    // (nth position doesn't exist so no need to compare it with n - 1th position)
    for (int i = 0, s_len = strlen(s); i < s_len - 1; i++)
    {
        // only iterate if letters are alphabeticaly continuous
        if (s[i + 1] == s[i] + 1)
        {
            current_len++;

            // update the maximum length
            max_len = fmax(max_len, current_len);
        }

        // reset if the string is no longer continuous
        else
        {
            current_len = 1;
        }

    }

    return max_len;
}
