class TopVotedCandidate {
public:
    TopVotedCandidate(vector<int>& persons, vector<int>& times) {
        auto cmp = [](const auto& a, const auto& b){return a.first == b.first ? a.second > b.second : a.first > b.first;};
        std::map<std::pair<int,int>, int, decltype(cmp)> m(cmp);
        // {(votes, timestamp), person};
        std::unordered_map<int,std::pair<int,int>> lastKey;
        int size{(int)persons.size()};
        for(int i{0}; i < size; ++i) {
            auto [a, b]{lastKey[persons[i]]};
            if(m.count({a,b})) m.erase({a,b});
            m[std::pair(a+1,times[i])] = persons[i];
            lastKey[persons[i]] = {a+1, times[i]};
            top.emplace_back(times[i], m.begin()->second);
        }
    }
    
    int q(int t) {
        auto it{--std::upper_bound(top.begin(), top.end(), t, [](const int a, const std::pair<int,int>& b) {return a < b.first;})};
        return it->second;
    }
    
    std::vector<std::pair<int,int>> top;
};