/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        vector<int>nums1 ;
        vector<int>nums2 ;
        string path1 , path2 ;
        dfs(root, nums1, path1, startValue) ;
        dfs(root, nums2, path2, destValue) ;
        int k = 0 ;
        while(k < nums1.size() && k < nums2.size() && nums1[k] == nums2[k])
            k++ ;
        
        for(int i = k; i < path1.size(); i++)
            path1[i] = 'U' ;
        
        return path1.substr(k) + path2.substr(k) ;
    }
    
private:      
    bool dfs(TreeNode* root, vector<int>&nums, string& path, int target){
        if(root == NULL)
            return false ;
        if(root->val == target)
            return true ;
        
        if(root->left){
            nums.push_back(root->left->val) ;
            path.push_back('L') ;
            if(dfs(root->left, nums, path, target))
                return true ;
            nums.pop_back() ;
            path.pop_back() ;
        }
        if(root->right){
            nums.push_back(root->right->val) ;
            path.push_back('R') ;
            if(dfs(root->right, nums, path, target))
                return true ;
            nums.pop_back() ;
            path.pop_back() ;
        }
        return false ;
    }
};