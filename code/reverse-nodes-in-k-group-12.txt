/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */



struct ListNode* reverseKGroup(struct ListNode* head, int k){
    
    struct ListNode *prev = NULL;
    struct ListNode *next;
    struct ListNode *curr;
    struct ListNode *ans=NULL;
    struct ListNode *link = NULL;
    struct ListNode *last_head;
        
    int rem=0;
    int count = 0;
    int temp = 0;
    
    curr = head;
    while(curr!=NULL) {
        curr = curr->next;
        count++;
    }
    
    //base case
    if(count < k || head == NULL)
        return head;
    

    curr = head;
    //run till rem times & add rest to end

    while(curr != NULL && k <= count) {
        temp = k;

        last_head = curr;
        prev = NULL;
        while(curr != NULL && temp > 0) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            temp--;
        }
        
        curr = next;
        
        if(ans == NULL)
            ans = prev;
        
        else 
            link->next = prev;

        
        link = last_head;
        count = count - k;
    }
    
    link->next = curr;
    
    return ans;
}