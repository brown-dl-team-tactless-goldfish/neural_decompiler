class Solution {
public:
    using Cand = unordered_map<string, int>;
    int maxFreq(string s, int T, int min, int _, Cand cand = {}) {
        int i = 0, j = 0, cnt = 0, ans = 0, m[123] = {}, N = s.size();
        auto dec = [&]() { if (--m[s[i++]] == 0) --cnt; };
        auto inc = [&]() { if (++m[s[j++]] == 1) ++cnt; };
        auto alt = [&]() { if (cnt <= T) ans = max(ans, ++cand[s.substr(i, j - i)]); };
        while (j <= N) {
            if (j - i >  min) dec(); // decrement the size of the sliding window (ie. the substring from i..j)
            if (j - i == min) alt(); // alterantive candidate answer (ie. max occurrences of the substring from i..j)
            if (j - i <= min) inc(); // increment the size of the sliding window (ie. the substring from i..j)
        }
        return ans;
    }
};