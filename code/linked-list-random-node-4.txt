/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct {
    struct ListNode *headList;
    int size;
} Solution;

Solution* solutionCreate(struct ListNode *head) {
    Solution *obj = malloc(sizeof(Solution));
    obj->headList = head;
    obj->size = 0;
    struct ListNode *currNode = head;
    while (currNode != NULL) {
        obj->size += 1;
        currNode = currNode->next;
    }
    return obj;
}

int solutionGetRandom(Solution *obj) {
    int position = rand() % obj->size;
    struct ListNode *currNode = obj->headList;
    for (int i = 0; i < position; i++) {
        currNode = currNode->next;
    }
    return currNode->val;
}

void solutionFree(Solution *obj) {
    struct ListNode *currNode = obj->headList;
    while (currNode != NULL) {
        obj->headList = currNode->next;
        free(currNode);
        currNode = obj->headList;
    }
    free(obj);
}

/**
 * Your Solution struct will be instantiated and called as such:
 * Solution* obj = solutionCreate(head);
 * int param_1 = solutionGetRandom(obj);
 
 * solutionFree(obj);
*/