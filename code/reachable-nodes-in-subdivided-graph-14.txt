class Solution {
public:
    int reachableNodes(vector<vector<int>>& arr, int m, int n) {
        vector<int> dp(n,INT_MAX); dp[0] = 0;
        vector<vector<vector<int>>> nums(n);
        for(int i = 0; i<arr.size();++i){
            nums[arr[i][0]].push_back({arr[i][1],arr[i][2]});
            nums[arr[i][1]].push_back({arr[i][0],arr[i][2]});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>> q;
        q.push({0,0});
        int re = 0;
        while(!q.empty()){
            auto[d,u] = q.top(); q.pop();
            for(int i = 0; i<nums[u].size();++i){
                int k = nums[u][i][1],v=nums[u][i][0];
                int dis = dp[u]+k+1;
                if(dis<=m && dp[v]>dis){
                    dp[v] = dis; q.push({dis,v});
                }
            }
        }
        for(int i = 0; i<arr.size();++i){
            int u=arr[i][0],v=arr[i][1];
            int a = min(dp[u],dp[v]),b = max(dp[u],dp[v]);
            if(a==INT_MAX) continue;
            if(b==INT_MAX) re+=min(arr[i][2],m-a);
            else {
                re += min(arr[i][2],m-dp[v]+m-dp[u]);
            }
        }
        for(int i = 0;i<n;++i) if(dp[i]<=m) re++;
        return re;
    }
};