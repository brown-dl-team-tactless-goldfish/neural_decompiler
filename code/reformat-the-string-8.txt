inline void rf(int **c, char *s, int *o, int *b) {
    *c && (s[(*o)++] = *c - b, !--**c && (*c = NULL));
}

inline void nf(int *b, int *d, int e, int **c) {
    while ((!b[++*d] && *d <= e) || (*d <= e && (*c = &b[*d]), 0));    
}

char * reformat(char * s){
    int n[64] = { 0 }, nc = 0, a[128] = { 0 }, ac = 0, o = 0, i = '0' - 1, j = 'a' - 1;
    for (char *p = s - 1 ; *++p ; isalpha(*p) ? (a[*p]++, ac++) : (n[*p]++, nc++));
    if (nc != ac && abs(nc - ac) != 1)
        return "";
    for (int **c1, **c2, *b1, *b2, *k = NULL, *l = NULL ; i <= '9' && j <= 'z' ;) {
        if (k && l) {
            ac > nc ? c1 = &l, c2 = &k, b1 = a, b2 = n : (c1 = &k, c2 = &l, b1 = n, b2 = a); 
            rf(c1, s, &o, b1);
            rf(c2, s, &o, b2);
        } else {
            !k ? nf(n, &i, '9', &k) : 0;
            !l ? nf(a, &j, 'z', &l) : 0;
            !l || !k ? rf(l ? &l : &k, s, &o, l ? a : n) : 0;
        }
    }
    return s;
}