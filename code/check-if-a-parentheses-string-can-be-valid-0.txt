public class Solution {
    public bool CanBeValid(string s, string locked) {
        
        if(string.IsNullOrEmpty(s))
            throw new ArgumentException("Invalid Input.");
        
        if(s.Length % 2 != 0)
            return false;
        
        int wild = 0, balance = 0;
        for(int i = 0; i < s.Length; i++)
        {
            if(locked[i] == '0')
                wild++;
            else if(s[i] == '(')
                balance++;
            else
            {
                balance--;
                if(balance < 0)
                {
                    if(wild > 0)
                    {
                        balance++;
                        wild--;
                    }
                    else
                        return false;
                }
            }
        }
        
        wild = 0;
        balance = 0;
        for(int i = s.Length - 1; i >= 0; i--)
        {
            if(locked[i] == '0')
                wild++;
            else if(s[i] == ')')
                balance++;
            else
            {
                balance--;
                if(balance < 0)
                {
                    if(wild > 0)
                    {
                        balance++;
                        wild--;
                    }
                    else
                        return false;
                }
            }    
        }
        
        return true;
    }
}