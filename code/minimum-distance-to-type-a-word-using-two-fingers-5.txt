class Solution {
    int dist(int x, int y) {
        return abs(x/6 - y/6) + abs(x%6 - y%6);
    }
public:
    int minimumDistance(string word) {
        // dp(i, j, k): The optimal distance to type the letters from 0...k and the two fingers are rested at i and j.
        // dp(i, j, k) = min{dp(word[k-1], j, k-1)+dist(i, word[k-1]), dp(i, word[k-1], k-1)+dist(j, word[k-1])}
        int n = word.size();
        vector<vector<int>> dp(26, vector<int>(26));
        for (int k = 1; k <= n; ++k) {
            for (int i = 0; i < 26; ++i) {
                for (int j = 0; j < 26; ++j) {
                    int c = word[k-1] - 'A';
                    dp[i][j] = min(dp[c][j] + dist(c, i), dp[i][c] + dist(c, j));
                }
            }
        }
        
        int res = numeric_limits<int>::max();
        for (int i = 0; i < 26; ++i) {
            res = min(res, dp[i][word.back() - 'A']);
            res = min(res, dp[word.back() - 'A'][i]);
        }
        
        return res;
    }
};