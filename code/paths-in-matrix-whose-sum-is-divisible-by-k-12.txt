class Solution {
public:
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<vector<long long>>> dp(m, vector<vector<long long>>(n, vector<long long>(k, 0)));
        
        dp[0][0][grid[0][0]%k] = 1;
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {

                long long cur_val = grid[i][j];
                for(int p=0;p<k;p++) {
                    long long tmp_p = p-cur_val;
                    tmp_p %= k;
                    if(tmp_p < 0) {
                        tmp_p += k;
                    }
                    if(i-1>=0) {
                        dp[i][j][p] += dp[i-1][j][(int)tmp_p];
                    }

                    if(j-1>=0) {
                        dp[i][j][p] += dp[i][j-1][(int)tmp_p];
                    }

                    dp[i][j][p] %= int(1e9+7);
                }
            }
        }

        return (int)dp[m-1][n-1][0];
    }
};