 class Solution {
    const int INF = 1234567890;
public:
    int connectTwoGroups(vector<vector<int>>& cost) {
        const int m = cost.size(), n = cost[0].size();
        vector<int> best(n, INF);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                best[i] = min(best[i], cost[j][i]);
            }
        }
        vector<int> dp(1 << n, INF);
        dp[0] = 0;
        for (const auto& c : cost) {
            for (int i = dp.size() - 1; i >= 0; --i) {
                const int temp = dp[i];
                dp[i] = INF;
                if (temp >= INF) {
                    continue;
                }
                for (int j = 0; j < n; ++j) {
                    const int s = i | (1 << j);
                    dp[s] = min(dp[s], temp + c[j]);
                }
                
            }
        }
        int r = INF;
        for (int i = 0; i < dp.size(); ++i) {
            if (dp[i] == INF) {
                continue;
            }
            int c = dp[i];
            for (int j = 0; c < r && j < n; ++j) {
                if ((i & (1 << j)) == 0) {
                    c += best[j];
                }
               
            }
            r = min(r, c);
        }
        return r;
    }
};