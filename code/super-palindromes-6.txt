using LL = long long ;
class Solution {
private:
    string reversed(string s){
        return {s.rbegin(), s.rend()} ;
    }
    //include num
    LL nextPalindrome(LL num){
        string s = to_string(num) ;
        int n = s.size() ;
        string half = s.substr(0, (n+1)/2) ;
        string reverseHalf = reversed(s.substr(0, n/2)) ;
        LL ret = stoll(half + reverseHalf) ;
        if(ret >= num)
            return ret ;
        half = to_string(stoll(half) + 1) ;
        reverseHalf = reversed(half.substr(0, n/2)) ;
        ret = stoll(half + reverseHalf) ;
        return ret ;
    }
    
    bool isPalindrome(LL num){
        string s = to_string(num) ;
        int n = s.size() ;
        for(int i = 0; i < n/2; i++){
            if(s[i] != s[n-1-i])
                return false ;
        }
        return true ;
    }
public:
    int superpalindromesInRange(string left, string right) {
        int ret = 0 ;
        LL L = stoll(left), R = stoll(right) ;
        for(LL i = sqrt(L); i*i <= R;){
            LL nxt = nextPalindrome(i) ;
            LL squared = nxt * nxt;
            if(squared <= R && isPalindrome(squared))
                ret++ ;
            i = nxt + 1 ;
        }
        return ret ;
    }
};