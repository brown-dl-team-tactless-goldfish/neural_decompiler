class Solution {
    void helper(unordered_map<int, int>&factor, int& val){
        int d = val ;
        for(int i = 2 ;  i<= sqrt(val) ; i++){
            while(d % i == 0){
                factor[i]++ ;
                d /= i ;
            }
            if(d == 1)
                break ;
        }
        if(d > 1)
            factor[d]++ ;
    }
    
public:
    int findValidSplit(vector<int>& nums) {
        int n = nums.size() ;
        unordered_map<int, int>factor ; // {factor, count}
        for(auto& n : nums)
            helper(factor, n) ;
        
        unordered_map<int, int>cur ;
        
        for(int i = 0; i < n-1; i++){
            vector<int>remove ;
            helper(cur, nums[i]) ;
            bool flag = true ;
            for(auto& c : cur){
                if(c.second < factor[c.first]){
                    flag = false ;
                    break ;
                }
                if(c.second == factor[c.first])
                    remove.push_back(c.first) ;
            }
            if(flag == true)
                return i ;
            
            for(int k = 0; k < remove.size(); k++)
                cur.erase(remove[k]) ;
                        
        }
        return -1 ;
    }
};