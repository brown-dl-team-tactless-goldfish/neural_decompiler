char ** commonChars(char ** A, int ASize, int* returnSize){
        //TRICK: create a hash table for each array element to store alphabet data;
        int hash[100][26] = {{0}}; 
        char **ret = (char **) malloc(sizeof(char*) * 100);
        int index = 0;

        //TRICK: Fill up the hash table with corresponding alphabet index;
        for (int i = 0; i < ASize; i++) {
                for (int j = 0; j < strlen(A[i]); j++)
                        hash[i][A[i][j] - 'a']++;
        }

        //TRICK: For every alphabet in each array, find the minimum value. that is the number of times
        // this alphabet was repeated in all arrays.
        for (int k = 0; k < 26; k++) {
                int min = INT_MAX;

                for (int l = 0; l < ASize; l++) {
                        int val = hash[l][k];

                        if (!val) {
                                min = 0;
                                break;
                        }
                        
                        if (min > val)
                                min = val;
                }
                //TRICK: fill the array to be returned with the alphabets retrieved from val;
                for (int m = 0; m < min; m++) {
                        *(ret + index) = malloc(sizeof(char) * 2);
                        ret[index][0] = 'a' + k;
                        ret[index][1] = '\0';
                        index++;
                }
        }

        *returnSize = index;
        return ret;
}