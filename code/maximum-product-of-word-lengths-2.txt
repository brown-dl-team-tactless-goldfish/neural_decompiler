#if 0

int cmpfunc(int** a, int** b)
{
    return (*b)[0] - (*a)[0];
}

int maxProduct(char ** words, int wordsSize){
    int i,j,len;
    int** buffer = (int**)calloc(wordsSize,sizeof(int*));
    int max = 0;
    
    for(i=0;i<wordsSize;i++)
    {
        len = strlen(words[i]);

        buffer[i] = (int*)calloc(2,sizeof(int));
        buffer[i][0] = len;
        for(j=0;j<len;j++)
        {
            buffer[i][1] |= (1<<(words[i][j] - 'a'));
        }
    }
    
    qsort(buffer,wordsSize,sizeof(int*),cmpfunc);
    
    for(i=0;i<wordsSize-1;i++)
    {
        for(j=i+1;j<wordsSize;j++)
        {
            if((buffer[i][1] & buffer[j][1]) == 0)
            {
                if((buffer[i][0] * buffer[j][0]) > max)
                {
                    max = buffer[i][0] * buffer[j][0];
                    break;
                }
            }
        }
    }
    
	for(i=0;i<wordsSize;i++)
    {
	    free(buffer[i]);
	}
	free(buffer);
    return max;
}

#else

int maxProduct(char ** words, int wordsSize){
    int i,j,len;
    int* buffer = (int*)calloc(wordsSize,sizeof(int));
    int* length = (int*)calloc(wordsSize,sizeof(int));
    int max = 0;
    
    for(i=0;i<wordsSize;i++)
    {
        len = strlen(words[i]);
        length[i] = len;
        for(j=0;j<len;j++)
        {
            buffer[i] |= (1<<(words[i][j] - 'a'));
        }
    }
    
    for(i=0;i<wordsSize-1;i++)
    {
        for(j=i+1;j<wordsSize;j++)
        {
            if((buffer[i] & buffer[j]) == 0)
            {
                if((length[i] * length[j]) > max)
                {
                    max = length[i] * length[j];
                }
            }
        }
    }
    
    free(length);
    free(buffer);
    return max;
}

#endif