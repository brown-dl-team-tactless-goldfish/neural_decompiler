bool equalFrequency(char *word){
    /* 
     * Contains the frequency of each character that 
     * is present in `word`. 26 places for each 
     * english letter.
    */
    int char_counter[26] = {0}; 

    // Checks if equal frequency is possible.
    int possible = 1; 
    
    // Count the occurrence of each character.
    for (char *p = word; *p; p++) {
        char_counter[*p - 'a']++;
    }

    /*
     * For every `i` that `char_counter[i] != 0`
     * subtract 1 from `char_counter[i]` and scan 
     * the new `char_counter` array to check if all
     * the values are equal to each other. If at 
     * least one value is different from the others,
     * then bring `char_counter[i]` back to each 
     * initial value (`count_char[i]++`) and check 
     * for the next `char_counter[i]` that is nonzero.
    */
    for (int i=0; i<26; ++i) {
        if (char_counter[i] != 0) {
            char_counter[i]--;
        }
        else {
            // Increase i until a value of char_counter is nonzero
            continue;
        }

        /* 
         * Nonzero number to compare all the others with.
         * `check number` is the first nonzero number 
         * of `char_counter`. For each value of i `check_number` 
         * has a constant value.
         */
        int check_number = 0;

        for (int k = 0; k < 26; ++k) {
            if (char_counter[k] != 0) {
                check_number = char_counter[k];
                break;
            }
        }

        /* 
         * In case `char_counter` contains only zeros 
         * (after subtraction) then equal frequency
         * is not possible.
        */
        if (check_number == 0) return false;

        // Check if all nonzero numbers are equal to each other
        for (int j = 0; j < 26; ++j) {
            if (char_counter[j] != 0 && (char_counter[j] != check_number)) {
                    possible = 0;
                    break;
            }
        }

        /*
         * In case scanning has been finished and
         * the value of `possible` is still 1 then
         * equal frequency is possible.
        */
        if (possible) {
            return true;
        }

        /* Take `char_counter` and `possible` back 
         * to their initial state.
        */
        char_counter[i]++;
        possible = 1;
    }    

    return false;
}
