constexpr double eps = 1e-6;

// Four directions.
constexpr int dx[] = {-1, 0, 1, 0};
constexpr int dy[] = {0, 1, 0, -1};

class Solution {
public:
    double getMinDistSum(vector<vector<int>>& positions) {
        // Staring at the cencroid.
        double x = 0, y = 0;
        for (const auto& p : positions) {
            x += p[0];
            y += p[1];
        }
        
        double d = getTotalDist(x, y, positions);
        double step = 100;
        // Keep stepping until we reach the target precision.
        while (step > eps) {
            bool improved = false;
            for ( int i = 0; i < 4; ++i ) {
                const double nx = x + step*dx[i];
                const double ny = y + step*dy[i];
                double t = getTotalDist(nx, ny, positions);
                if (t < d) {
                    d = t;
                    x = nx;
                    y = ny;

                    improved = true;
                    break;
                }
            }
            // Step too large, adjust step size.
            if (!improved) step /= 2;
        }
        return d;
    }
    
private:
    double getTotalDist(double x, double y, const vector<vector<int>>& points) {
        double dist = 0;
        for (const auto& p : points) {
            double dx = p[0]-x;
            double dy = p[1]-y;
            dist += sqrt(dx*dx + dy*dy);
        }
        return dist;
    }
};