class ThroneInheritance {
    string _king;
    unordered_map<string, vector<string>> mp; // parent -> children
    unordered_map<string, bool> alive; 
public:
    ThroneInheritance(string kingName) {
        _king = kingName;
        alive[kingName] = true;
    }
    
    void birth(string parentName, string childName) {
        mp[parentName].push_back(childName);
        alive[childName] = true;
    }
    
    void death(string name) {
        alive[name] = false;
    }
    
    vector<string> getInheritanceOrder() {
        vector<string> ans;
        
        stack<string> st;
        st.push(_king);
        
        while(!st.empty()) {
            auto parent = st.top();
            st.pop();
            if(alive[parent]) ans.push_back(parent);
            for(auto it = mp[parent].rbegin(); it != mp[parent].rend(); ++it) {
                st.push(*it);
            }
        }
        
        return ans;
    }
};

/**
 * Your ThroneInheritance object will be instantiated and called as such:
 * ThroneInheritance* obj = new ThroneInheritance(kingName);
 * obj->birth(parentName,childName);
 * obj->death(name);
 * vector<string> param_3 = obj->getInheritanceOrder();
 */