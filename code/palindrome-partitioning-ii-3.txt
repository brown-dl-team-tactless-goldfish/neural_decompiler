class Solution {
public:
    map<int,int> dp;
    int solve(vector<vector<bool>> &pal, int r, int c){
        if(r == pal.size() || c == pal.size()) return 0;
        int ans = 2008;
        if(dp.find(r) != dp.end()) return dp[r];
        for(int i = r; i <pal.size(); i++){
            // cut this part if this is palindrome
            // as we have min 1 char as palindrome
            if(pal[r][i]) ans = min(ans , solve(pal,i+1,c+1));
        }
        return dp[r] = ans + 1;
    }

    int minCut(string s) {
        if(s.length() == 1) return 0;
        // we need bool value if s[i,j] is palindrome or not
        vector<vector<bool>> pal(s.length(),vector<bool>(s.length(),0));
        for(int i=0;i<s.length();i++) pal[i][i] = 1;
        for(int i=1;i<s.length();i++){
            int r = 0;
            int c = i;
            while(r < s.length() && c < s.length()){
                if(s[r] == s[c]){
                    // we see if dp[r+1][c-1] == 1 and s[r] == s[c] then this is palindrome
                    bool d = 0;
                    if(r+1 > c-1) d = 1;
                    else d = pal[r+1][c-1];
                    pal[r][c] = d;
                }
                r++;
                c++;
            }
        }
        // now we are solving in different ways to cut this string so that we can get optimized answer
        return solve(pal,0,0)-1;
    }
};