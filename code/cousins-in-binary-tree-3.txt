/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

// return parent's depth of node [val=n], return parent's value via parameter
int getParent(struct TreeNode* root, int n, int* parentVal){
    // can't find node [val=n]
    if(root==NULL) return -1;
    
    // root is the parent of node [val=n]
    if(root->left!=NULL && root->left->val==n || root->right!=NULL && root->right->val==n){
        *parentVal = root->val;
        return 0;
    }
    
    // can't find node [val=n] in root's subtree
    if(getParent(root->left, n, parentVal) == -1 && getParent(root->right, n, parentVal) == -1) return -1;
    
    // otherwise, node [val=n] exists in one of root's subtree
    return 2 + getParent(root->left, n, parentVal) + getParent(root->right, n, parentVal);
}

bool isCousins(struct TreeNode* root, int x, int y){
    int parentx;
    int parenty;
    int depthx = getParent(root, x, &parentx);
    int depthy = getParent(root, y, &parenty);
    return depthx == depthy && parentx != parenty;
}