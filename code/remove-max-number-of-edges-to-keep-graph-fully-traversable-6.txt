class DSU
{
    public:
    vector<int>parent;
    int size=1;
    DSU(int n)
    {
        parent.resize(n+1);
        for(int i=1;i<=n;i++)
            parent[i]=i;
    }
    int find(int x)
    {
        if(parent[x]!=x)
            parent[x]=find(parent[x]);
        return parent[x];
    }
    void join(int x,int y)
    {
        parent[y]=x;
        size++;
    }
};
class Solution {
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) 
    {
        int used=0,e=edges.size();
        DSU both=DSU(n);
        for(int type=3;type>=1;type--)
        {
            DSU one=both;
            auto &curr=type==3?both:one;
            for(auto &e:edges)
            {
                if(e[0]==type)
                {
                    int px=curr.find(e[1]);
                    int py=curr.find(e[2]);
                    if(px!=py)
                    {
                        used++;
                        curr.join(px,py);
                    }
                }
            }
            if(type!=3 && curr.size!=n)
                return -1;
        }
        return e-used;
    }
};