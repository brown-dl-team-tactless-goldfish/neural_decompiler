public class Solution
{
    public Node Intersect(Node quadTree1, Node quadTree2)
    {
        if (quadTree1.isLeaf)
        {
            return quadTree1.val ? quadTree1 : quadTree2;
        }

        if (quadTree2.isLeaf)
        {
            return quadTree2.val ? quadTree2 : quadTree1;
        }

        var children = new[]
        {
            Intersect(quadTree1.topLeft, quadTree2.topLeft),
            Intersect(quadTree1.topRight, quadTree2.topRight),
            Intersect(quadTree1.bottomLeft, quadTree2.bottomLeft),
            Intersect(quadTree1.bottomRight, quadTree2.bottomRight),
        };

        var val = children.First().val;
        var isLeaf = children.All(child => child.isLeaf && child.val == val);

        return new Node(val, isLeaf)
        {
            topLeft = isLeaf ? null : children[0],
            topRight = isLeaf ? null : children[1],
            bottomLeft = isLeaf ? null : children[2],
            bottomRight = isLeaf ? null : children[3],
        };
    }
}