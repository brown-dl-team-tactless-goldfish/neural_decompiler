public class Solution 
{
    int[] dx = new int[]{-1, 1, 0, 0};
    int[] dy = new int[]{ 0, 0, -1, 1};
    
    public int GetMaximumGold(int[][] grid)
    {
        int max = 0, r = grid.Length, c = grid[0].Length;
        for (int i = 0; i < r; i++)
            for (int j = 0; j < c; j++)
                if (grid[i][j] != 0)
                    max = Math.Max(max, DFS(grid, new bool[r, c], i, j, 0));
        
        return max;
    }

    private int DFS(int[][] g, bool[,] visited, int x, int y, int sum)
    {
        sum += g[x][y];        
        visited[x, y] = true;
        int max = sum, r = g.Length, c = g[0].Length;
        for (int k = 0; k < dx.Length; k++)
        {
            int nx = x + dx[k], ny = y + dy[k];
            if (nx >= 0 && nx < r && ny >= 0 && ny < c && g[nx][ny] != 0 && !visited[nx, ny])
                max = Math.Max(max, DFS(g, visited, nx, ny, sum));
        }

        visited[x, y] = false;
        return max;
    }
}