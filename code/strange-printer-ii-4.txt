class Solution {
public:
    bool isPrintable(vector<vector<int>>& g) {
      map<int ,int >col ;
        int n=0 ; 
        for(auto it : g)
        {
            for(auto itr : it)
            {
                col[itr]++ ; 
                n = max(n , itr) ; 
            }
        }
    int c = col.size()  ; 
        vector<int> maxx(n+1, -1 ) , maxy(n+1 , -1 ) , minx(n+1 , 1e9) , miny(n+1 , 1e9 ) ; 
    
     for(int i =0 ; i<g.size(); i++)
     {
         for(int j= 0; j<g[0].size(); j++ )
         {
            
             maxx[g[i][j]] = max( maxx[g[i][j]] , i ) ; 
             maxy[g[i][j]] = max( maxy[g[i][j]] , j ) ; 
             minx[g[i][j]] = min( minx[g[i][j]] , i ) ; 
             miny[g[i][j]] = min(miny[g[i][j]] , j ) ;
         }
     } 
        map<int ,vector<int>> adj ;
        map<int ,int > indegree; 
        for(int k =1; k<=n; k++ )
        {
            if(col[k])
            for(int i = minx[k]; i<=maxx[k]; i++ )
            {
                for(int j = miny[k]; j<=maxy[k] ;j++ )
                {
                    if(g[i][j]!=k)
                    {
                        adj[k].push_back(g[i][j]) ; 
                        indegree[g[i][j]]++; 
                    }
                }
            }
        }
        queue<int> q; 
        
        for(int i =1; i<=n; i++ )
        {
            if(indegree[i]==0 && col[i])
            {
                q.push(i); 
                cout << i << endl; 
            }
        }
        int sum= 0; 
        while(!q.empty())
        {
            int node = q.front() ; 
            q.pop() ; 
            sum++; 
            for(auto it : adj[node])
            {
                indegree[it]-- ; 
                if(indegree[it]==0)
                {
                    q.push(it) ; 
                }
            }
        }
        
        // cout << sum << endl ;
        return sum==c; 
    }
};