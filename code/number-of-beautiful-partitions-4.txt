class Solution {
public:
    int m = 1e9+7;
    bool isPrime(char n){
        return (n=='2' || n=='3' || n=='5' || n=='7');
    }
    int dp[1001][1001];
    int f(string &s, int k, int minLen, int i){
        if(!k) return i<=s.size();
        if(i>=s.size()) return 0;
        if(dp[i][k]!=-1) return dp[i][k];
        int res = f(s, k, minLen, i+1);
        if(!isPrime(s[i-1]) && isPrime(s[i])){
            res = (res + f(s, k-1, minLen, i+minLen))%m;
        }
        
        return dp[i][k] = res;
    }
    int beautifulPartitions(string s, int k, int minLen) {
        if(isPrime(s.back()) || !isPrime(s[0])) return 0;
        memset(dp, -1, sizeof(dp));
        return f(s, k-1, minLen, minLen);
    }
};