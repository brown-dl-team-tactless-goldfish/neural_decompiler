/**
 * @brief Method to find minimum number of perfect squares those add up to given integer n
 * 
 * @param n Input Ingeter n 
 * @return number of perfect squares which add up to n
 * 
 * @note:   This method uses two theorems: Legendre's 4 squares and Legendre's 3 square theorem.
 * According to Legendre's theorem, a number can have only upto 4 perfect squares those add up to number.
 * You can never have more than 4 perfect squares those add up to number n.
 * 
 * Legendre's 4 square Theorem:
 *      This theorem states that, any natural number n, can be represented as a sum of 4 perfect square numbers.
 *      e.g. n = a^2 + b^2 + c^2 + d^2
 * 
 * Legendre's 3 square Theorem:
 *      This theorem states that, any natural number n, cab be represented as a sum of 3 perfect square numbers,
 *      as long as this number n is not of the form 4^k(8*m + 7) where k and m are non-negative integers.
 *      e.g. n = a^2 + b^2 + c^2 .... for all n != 4^k(8*m + 7)
 * 
 * Perfect Square theorem 1:
 *      A square root of a perfect square is always perfect square. e.g. √16 = 4 is perfect square of 2
 *      Thus if we find a number n such that it is a perfect square, then there is only 1 such number, so return 1.
 * 
 * Perfect Square theorem 2:
 *      A square root of muliplication of two perfect square numbers always yields multiplication of perfect squares.
 *      e.g. √a*a * b*b = a*b
 * 
 * 
 */
int numSquares(int n) {
    while (n % 4 == 0)              // Legendre's 3 square theorem, calculate 4^k, keep dividing n by 4, until remainder is not 0
        n /= 4;
    if (n % 8 == 7)                 // Legendre's 3 square theorem, if n mod 8 yeilds remainder 7, then n is of form 4^k(8*m + 7)
        return 4;                   // thus we definitely will have more than 3 perfect squares, return 4
    for (int a=0; a*a<=n; ++a) {    // iterate over n in brute force manner 
        int b = sqrt(n - a*a);      // check if number - perfect square yeilds a perfect square for us
        if (a*a + b*b == n)         
            return 1 + !!a;         // if a == 0, return 1, otherwise return 2
    }
    return 3;                       // we know a number cannot have 1,2 or 4 perfect squares, so it must be 3, just return it
}
