/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

typedef unsigned long long ull;

ull tree_sum(struct TreeNode* root) {
    if (root == NULL) {
        return 0;
    }
    ull sum = root->val;
    if (root->right) {
        sum += tree_sum(root->right);
    }
    if (root->left) {
        sum += tree_sum(root->left);
    }
    return sum;
}

ull helper(struct TreeNode* root, ull total_sum, ull *max_prod) {
    if (root->left == NULL && root->right == NULL) {
        if ((total_sum - root->val) * root->val > *max_prod) {
            *max_prod = (total_sum - root->val) * root->val;
        }
        return root->val;
    }
    ull left_sum = 0;
    if (root->left) {
        left_sum = helper(root->left, total_sum, max_prod);
        if ((total_sum - left_sum) * left_sum  > *max_prod) {
            *max_prod = (total_sum - left_sum) * left_sum;
        }
    }
    ull right_sum = 0;
    if (root->right) {
        right_sum = helper(root->right, total_sum, max_prod);
        if ((total_sum - right_sum) * right_sum  > *max_prod) {
            *max_prod = (total_sum - right_sum) * right_sum;
        }
    }
    printf("node: %d\t left sum: %llu\t right sum: %llu\n", root->val, left_sum, right_sum);
    return left_sum + right_sum + root->val;
}

int maxProduct(struct TreeNode* root){
    ull total_sum = tree_sum(root);
    printf("total sum: %d\n", total_sum);
    ull max_prod = 0;
    helper(root, total_sum, &max_prod);
    return max_prod % 1000000007;
}