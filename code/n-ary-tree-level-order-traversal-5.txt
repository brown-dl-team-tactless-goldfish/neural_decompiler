/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     int numChildren;
 *     struct Node** children;
 * };
 */

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** levelOrder(struct Node* root, int* returnSize, int** returnColumnSizes) {
  struct Node* queue[10001];
  int leveSizes[10001] = {};
  
  int curLevelSize = 0, front_ptr = 0, back_ptr = 1;
  if (root) {
    queue[0] = root;
    curLevelSize = 1;
  }
  
  int** result = (int**) malloc(10000 * sizeof(int*));
  *returnSize = 0;
  
  while (curLevelSize) {
    int* level = (int*) malloc(curLevelSize * sizeof(int));
    leveSizes[*returnSize] = curLevelSize;
    int size, i;
    for (size = curLevelSize, i = 0, curLevelSize = 0; size; size--, i++, front_ptr++) {
      struct Node* node = queue[front_ptr];
      level[i] = node->val;
      for (int j = 0; j < node->numChildren; j++, back_ptr++, curLevelSize++) {
        queue[back_ptr] = node->children[j];
      }
    }
    result[(*returnSize)++] = level;
  }
  
  *returnColumnSizes = (int*) malloc(*returnSize * sizeof(int));
  for (int r = 0; r < *returnSize; r++) {
    (*returnColumnSizes)[r] = leveSizes[r];
  }
  
  return result;
}