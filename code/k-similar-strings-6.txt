public class Solution {
public int KSimilarity(string A, string B) {
        var queue = new LinkedList<string>();
        
        var visited = new HashSet<string>();
    
        queue.AddLast(A);
        
        int k = 0;
        
        while (queue.Count != 0) {
            int size = queue.Count;
            for (int z = 0; z < size; z++) {
                var s = queue.First.Value;
                queue.RemoveFirst();
                if (visited.Contains(s)) continue;
                visited.Add(s);
                
                int i = 0;
                
                while (s[i] == B[i]) {
                    i++;
                    if (i == A.Length) return k;
                }                
                
                for (int j = i + 1; j < s.Length; j++) {
                    if (s[j] != B[j] && B[i] == s[j]) {                                       var S = new StringBuilder(s);
                        var tmp = S[j];
                        S[j] = S[i];
                        S[i] = tmp;
                        queue.AddLast(S.ToString());
                    }
                }
            }
            k++;
        }
        
        return -1;
    }
};