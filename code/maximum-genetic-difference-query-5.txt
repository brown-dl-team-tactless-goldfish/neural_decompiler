class Solution {
public:
    struct trieNode {
        bool isEnd;
        vector<int> cnt;
        vector<trieNode*> next;
        trieNode () : isEnd(false), cnt(vector<int>(2, 0)), next(vector<trieNode*>(2, nullptr)) {};
    };
    
    trieNode* root;
    
    void insert(int val) {
        if (root == nullptr) root = new trieNode();
        trieNode* curr = root;
        for (int i = 19; i >= 0; --i) {
            int nextVal = ((val & (1 << i)) >> i);
            if (curr->next[nextVal] == nullptr)
                curr->next[nextVal] = new trieNode();
            curr->cnt[nextVal]++;
            curr = curr->next[nextVal];
        }
        curr->isEnd = true;
    }
    
    void remove (int val) {
        trieNode* curr = root;
        for (int i = 19; i >= 0; --i) {
            int nextVal = ((val & (1 << i)) >> i);
            curr->cnt[nextVal]--;
            if (curr->cnt[nextVal] == 0) {
                curr->next[nextVal] = nullptr;
                break;
            }
            curr = curr->next[nextVal];
        }
    }
    
    int maxXorValue (int val) {
        
        int maxVal = 0;
        trieNode* curr = root;
        
        for (int i = 19; i >= 0; --i) {
            int nextVal = ((val & (1 << i)) >> i);
            if (curr->next[1 - nextVal]) {
                maxVal |= (1 << i);
                curr = curr->next[1 - nextVal];
            } else {
                curr = curr->next[nextVal];
            }
        }
        
        return maxVal;
    }
    
public:
    
    void maxGeneticDifference_(int idx, vector<vector<int>>& conn, vector<int>& res, vector<vector<pair<int, int>>>& qVec) {
        
        insert(idx);
        
        for (int i = 0; i < qVec[idx].size(); ++i) {
            res[qVec[idx][i].second] = maxXorValue(qVec[idx][i].first);
        }
        
        for (int i = 0; i < conn[idx].size(); ++i) {
            maxGeneticDifference_(conn[idx][i], conn, res, qVec);
        }
        
        remove(idx);
    }
    
    vector<int> maxGeneticDifference(vector<int>& parents, vector<vector<int>>& queries) {
        vector<vector<int>> conn(parents.size());
        int rootNode;
        
        for (int i = 0; i < parents.size(); ++i) {
            if (parents[i] == -1) {
                rootNode = i;
                continue;
            }
            conn[parents[i]].push_back(i);
        }
        
        vector<vector<pair<int, int>>> qVec(parents.size());
        for (int i = 0; i < queries.size(); ++i) {
            qVec[queries[i][0]].push_back(make_pair(queries[i][1], i));
        }
        
        vector<int> res(queries.size(), 0);
        
        maxGeneticDifference_(rootNode, conn, res, qVec);
        
        return res;
    }
};