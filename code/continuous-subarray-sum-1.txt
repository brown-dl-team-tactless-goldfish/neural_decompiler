    int id;
    int val;
    UT_hash_handle hh;
};

struct hashEntry *hash = NULL;

void addEntry(int id, int val)
{
    struct hashEntry *s;

    HASH_FIND_INT(hash, &id, s);
    if (s == NULL)
    {
        s = (struct hashEntry *)malloc(sizeof *s);
        s->id = id;
        HASH_ADD_INT(hash, id, s);
    }

    s->val = val;
}

struct hashEntry *findEntry( int id)
{
    struct hashEntry *s;

    HASH_FIND_INT(hash, &id, s);
    return s;
}

void deleteEntry(struct hashEntry *s)
{
    HASH_DEL(hash, s);
    free(s);
}

void delete_all()
{
    struct hashEntry *cur, *tmp;
    HASH_ITER(hh, hash, cur, tmp)
    {
        HASH_DEL(hash, cur);
        free(cur);
    }
}

bool checkSubarraySum(int* nums, int numsSize, int k){
    int sum = 0;
    int n;
    struct hashEntry* h = NULL;

    delete_all();
    addEntry(0, -1);
    
    for(int i = 0; i<numsSize; i++)
    {
        n = nums[i];
        if (k!=0)
        {
            sum = (sum+n) %k;
        }
        else
            sum += n;
        h = findEntry(sum);
        if (h == NULL)
            addEntry(sum, i);
        else
        {
            if (i - h->val >=2)
            return true;
        }
    }
    
    return false;
}