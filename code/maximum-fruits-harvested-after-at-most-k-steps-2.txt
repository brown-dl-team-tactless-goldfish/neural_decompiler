class Solution {
public:
//     already sorted
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
       int n = fruits.size();
       vector<int> pref(n), loc(n);
       for(int i = 0; i < n; i++) loc[i] = fruits[i][0];
       pref[0] = fruits[0][1];
       for(int i = 1; i < n; i++) pref[i] += (pref[i - 1] + fruits[i][1]);
        int minm = min(startPos, fruits[0][0]), maxm = fruits[n - 1][0], ans = 0;
//        first left then right
        for(int i = 0; i <= k; i++){
            int l = startPos - i;
            int r = startPos;
            r = max(r, startPos + (k - 2 * i));
            int idxl = lower_bound(loc.begin(), loc.end(), l) - loc.begin();
            int idxr = lower_bound(loc.begin(), loc.end(), r) - loc.begin();
            if(idxr >= n || loc[idxr] > r){
                idxr -= 1;
            }
            if(idxl == 0 && idxr != -1) ans = max(ans, pref[idxr]);
            else if(idxr != -1) ans = max(ans, pref[idxr] - pref[idxl - 1]);
        }
//         first left then right
            for(int i = 0; i <= k; i++){
            int r = startPos + i;
            int l = startPos;
            l = min(r, startPos - (k - 2 * i));
            int idxl = lower_bound(loc.begin(), loc.end(), l) - loc.begin();
            int idxr = lower_bound(loc.begin(), loc.end(), r) - loc.begin();
            if(idxr >= n || loc[idxr] > r){
                idxr -= 1;
            }
            if(idxl == 0 && idxr != -1) ans = max(ans, pref[idxr]);
            else if(idxr != -1) ans = max(ans, pref[idxr] - pref[idxl - 1]);
        }
        return ans;
    } 
};