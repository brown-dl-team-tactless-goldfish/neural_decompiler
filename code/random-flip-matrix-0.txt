Solution(int n_rows, int n_cols) 
{
    flg = false;
    
    r = n_rows;
    c = n_cols;
    
    mat.resize(r);
    
    for(size_t i = 0; i < mat.size(); i++)
    {
        mat[i].resize(c);
    }
    
    for(size_t i = 0; i < r; i++)
    {
        for(size_t j = 0; j < c; j++)
        {
            mat[i][j] = 0;
        }
    }

    rng = std::mt19937(dev());
    dist1 = 
        std::uniform_int_distribution<std::mt19937::result_type>
        (0, n_rows-1);
    dist2 = 
        std::uniform_int_distribution<std::mt19937::result_type>
        (0, n_cols-1);
}

std::vector<int> flip() 
{   
    while(true)
    {
        std::vector<int> res;
        
        int x = dist1(rng);
        int y = dist2(rng);
    
        res.push_back(x);
        res.push_back(y);
    
        if(mat[x][y] == 0)
        {
            mat[x][y] = 1;
            MAP[{x,y}] = 1;
            flg = true;
            return res;
        }
    }
}

void reset() 
{
    if(flg)
    {
        for(const auto &el: MAP)
        {
            mat[el.first.first][el.first.second] = 0;
        }
    }
    
    MAP.clear();
    
    flg = false;
}

private:

std::vector<std::vector<int>> mat;
int r;
int c;
std::uniform_int_distribution<std::mt19937::result_type> dist1;
std::uniform_int_distribution<std::mt19937::result_type> dist2;
std::random_device dev;
std::mt19937 rng;
bool flg;
std::map<std::pair<int,int>, int> MAP;