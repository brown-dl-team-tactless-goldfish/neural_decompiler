/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int ans=0;
bool serach(TreeNode*root,int val,vector<TreeNode*>&v)
{
    if(root==NULL)
    {
        return false;
    }
    if(root->val==val)
    {
        v.push_back(root);
        return true;
    }
    if(serach(root->left,val,v)||serach(root->right,val,v))
    {
        v.push_back(root);
        return true;
    }
    return false;
}
void find(TreeNode*root,TreeNode*blocker,int level)
{
    if(root==NULL||root==blocker)
    {
        return ;
    }
    ans=max(ans,level);
    find(root->left,blocker,level+1);
    find(root->right,blocker,level+1);
}
    int amountOfTime(TreeNode* root, int start) {
        ans=0;
    vector<TreeNode*>v;
    serach(root,start,v);
    if(v.size()==0)
    {
        return 0;
    }
    for(int i=0;i<v.size();i++)
    {
        find(v[i],i==0?NULL:v[i-1],i);
    }
    return ans;
    }
};