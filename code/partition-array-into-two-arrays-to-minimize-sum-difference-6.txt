#define MAX_SN 7000
int sumArray(int *v, int size){
    int sum=0;
    for(int i=0; i<size; ++i) sum+=v[i];
    return sum;
}
int min(int a, int b){return a<b?a:b;}
int cmp_int(const void*a, const void*b){return *(const int*)a-*(const int*)b;}


void listSubsets(int subsets[16][MAX_SN], int SubsetsSizes[16], int *nums,int n, int partialSum,int subsetSize){
    if(n==0){
        subsets[subsetSize][SubsetsSizes[subsetSize]++]=partialSum;
        return;
    }

    listSubsets(subsets, SubsetsSizes, nums+1, n-1, partialSum, subsetSize);
    listSubsets(subsets, SubsetsSizes, nums+1, n-1, partialSum+nums[0], subsetSize+1);
    
}

void MIM(int subsets[16][MAX_SN], int SubsetsSizes[16], int *nums,int n,int partialSum,int subsetSize,int *sol, int total, int N,int memoization[16][11939]){
    
    if(n==0){
        if(memoization[subsetSize][abs(partialSum+11939)%11939]) return;
        memoization[subsetSize][abs(partialSum+11939)%11939]=1;
        int l,r,m,temp, complementSize;
        complementSize=N/2 - subsetSize;
        l=0;
        r=SubsetsSizes[complementSize]-1;
        temp=abs(total-2*(subsets[complementSize][r]+partialSum));
        if(r==0 || abs(total-2*(subsets[complementSize][r-1]+partialSum))>temp) {
            *sol=min(*sol,temp);
            return;
        }
        temp=abs(total-2*(subsets[complementSize][l]+partialSum));
        if( abs(total-2*(subsets[complementSize][l+1]+partialSum))>temp) {
            *sol=min(*sol,temp);
            return;
        }
        while(r-l>3){
            
            m=l+(r-l)/2;
            temp=abs(total-2*(subsets[complementSize][m]+partialSum));
            if(abs(total-2*(subsets[complementSize][m+1]+partialSum))>temp) r=m;
            else if(abs(total-2*(subsets[complementSize][m+1]+partialSum))<temp) l=m;
            else r--;
        
        }
     
        for(int i=l; i<=r; ++i){
            temp=abs(total-2*(subsets[complementSize][i]+partialSum));
            *sol=min(*sol,temp);
        }
        
    }
    else{
        MIM(subsets, SubsetsSizes, nums+1, n-1, partialSum, subsetSize, sol, total, N, memoization);
        MIM(subsets, SubsetsSizes, nums+1, n-1, partialSum+nums[0], subsetSize+1, sol, total, N, memoization);
    }
    
}

int minimumDifference(int* nums, int n){
    int total=sumArray(nums,n);// so absolute difference = abs(total-2halfSum)
    int sol=INT_MAX;//we consider here the case the vector is already partitioned correctly
    int subsets[16][MAX_SN];
    int SubsetsSizes[16]={0};
    int memoization[16][11939];
    for(int i=0; i<16; ++i)
        for(int j=0; j<11939; ++j) memoization[i][j]=0;
    listSubsets(subsets, SubsetsSizes, nums, n/2, 0, 0);
    
    for(int i=0; i<=n/2; ++i){
        qsort(subsets[i],SubsetsSizes[i],sizeof(subsets[i][0]),cmp_int);
    }
    
    MIM(subsets, SubsetsSizes, nums+n/2, n/2, 0, 0, &sol, total, n, memoization);
    
    return sol;

}