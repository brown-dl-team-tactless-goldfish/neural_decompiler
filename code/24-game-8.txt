class Solution {
public:
    vector<double> operations(double a, double b)
    {
        vector<double> out;
        out.push_back(a*b);
        out.push_back(a+b);
        if(a != 0) out.push_back(b/a);
        if(b != 0) out.push_back(a/b);
        out.push_back(a-b);
        out.push_back(b-a);
        return out;
    }
    
    bool dfs(vector<double> nums)
    {
        int n = nums.size();
        if(n == 2)
        {
            vector<double> v = operations((double)nums[0], (double)nums[1]);
            for(double i : v) 
                if(abs(i - 24) < 0.001) 
                    return true;
            return false;
        }
        if(n == 3)
        {
            double a = nums[0], b= nums[1], c = nums[2];
            vector<double> v1 = operations(a, b);
            vector<double> v2 = operations(a, c);
            vector<double> v3 = operations(b, c);
            for(double i : v1) if(dfs({i, c})) return true;
            for(double i : v2) if(dfs({i, b})) return true;
            for(double i : v3) if(dfs({i, a})) return true;
            return false;
        }
        if(n == 4)
        {
            double a = nums[0], b= nums[1], c = nums[2], d = nums[3];
            vector<double> v1 = operations(a, b);
            vector<double> v2 = operations(a, c);
            vector<double> v3 = operations(a, d);
            vector<double> v4 = operations(b, c);
            vector<double> v5 = operations(b, d);
            vector<double> v6 = operations(c, d);
            for(double i : v1) if(dfs({i, c, d})) return true;
            for(double i : v2) if(dfs({i, b, d})) return true;
            for(double i : v3) if(dfs({i, b, c})) return true;
            for(double i : v4) if(dfs({i, a, d})) return true;
            for(double i : v5) if(dfs({i, a, c})) return true;
            for(double i : v6) if(dfs({i, a, b})) return true;
            return false;
        }
        return false;
    }
    
    bool judgePoint24(vector<int>& nums) {
        vector<double> copy(nums.size());
        for(int i = 0; i < nums.size(); i++) copy[i] = nums[i]; 
        return dfs(copy);
    }
};