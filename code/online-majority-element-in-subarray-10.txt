class MajorityChecker {
public:
    unordered_map<int, vector<int>> mp;
    vector<int> data;
    MajorityChecker(vector<int>& arr) {
        data = arr;
        for (int i = 0; i < arr.size(); ++i) {
            mp[arr[i]].push_back(i);
        }    
    }
    
    int get_occurence(vector<int>& vec, int left, int right) {
        int nums = lower_bound(vec.begin(), vec.end(), right + 1) - lower_bound(vec.begin(), vec.end(), left);
        return nums;
    }
    
    int query(int left, int right, int threshold) {
        // srand((unsigned)time(NULL));
        for (int i = 0; i < 20; ++i) {
            int idx = rand() % (right - left + 1) + left;
            int val = data[idx];
            int nums = get_occurence(mp[val], left, right);
            if (nums >= threshold) {
                return val;
            } 
        }
        return -1;
    }
    
};