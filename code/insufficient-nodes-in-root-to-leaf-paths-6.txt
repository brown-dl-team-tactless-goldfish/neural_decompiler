/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sufficientSubset(TreeNode* root, int limit) {
        return dfs(root, 0, limit);
    }
    
    TreeNode* dfs(TreeNode* root, int sum, int limit) {
        if (!root) {
            return nullptr;
        }
        
        if (!root->left && !root->right) {
            if (root->val + sum < limit) {
                return nullptr;
            } else {
                return root;
            }
        }
        
        root->left = dfs(root->left, sum + root->val, limit);
        root->right = dfs(root->right, sum + root->val, limit);
        
        if (!root->left && !root->right) {
            return nullptr;
        }

        return root;
    }
};