    public class Solution
    {
        private class Fleet
        {
            public double Position; //position where current fleet start travelling
            public double Time; //whole time this fleet travelled before join to next fleet. or infinite time if no other fleet to join
            public int Speed; //speed of fleet

            public Fleet(double position, double t, int speed)
            {
                Position = position;
                Time = t;
                Speed = speed;
            }

            public Fleet()
            {
            }
        }

        public double[] GetCollisionTimes(int[][] cars)
        {
            int n = cars.Length;
            Stack<Fleet> stackFleet = new Stack<Fleet>();
            double[] res = new double[n];

            for (int i = n - 1; i >= 0; --i)
            {
                double sumTime = 0;
                double sumPos = cars[i][0];
                Fleet p = new Fleet();

                //initial position and speed of single car
                p.Position = cars[i][0];
                p.Speed = cars[i][1];


                while (stackFleet.Count > 0)
                {
                    if (p.Speed > stackFleet.Peek().Speed)
                    {
                        //try reach next fleet
                        double t = (stackFleet.Peek().Position - sumPos) / (p.Speed - stackFleet.Peek().Speed);

                        //if can join to next fleet
                        if (t <= stackFleet.Peek().Time)
                        {
                            //this car was alone from its original position and while joined next fleet
                            p.Time = sumTime + t;

                            res[i] = p.Time;

                            //update fleet we joine to. set position where we joined and remove time we spent to reach this fleet 
                            stackFleet.Peek().Position += stackFleet.Peek().Speed * t;
                            stackFleet.Peek().Time -= t;

                            //push current car as single-car fleet
                            stackFleet.Push(p);

                            break;
                        }
                    }

                    //simply go with constant speed whole time of current fleet that we can't join
                    sumTime += stackFleet.Peek().Time;
                    sumPos += p.Speed * stackFleet.Peek().Time;
                    stackFleet.Pop();
                }

                if (stackFleet.Count == 0)
                {
                    //if can't join any fleet
                    //go with constant speed infinitely
                    p.Position = cars[i][0];
                    p.Time = double.PositiveInfinity;
                    stackFleet.Push(p);
                    res[i] = -1;
                }
            }

            return res;
        }
    }