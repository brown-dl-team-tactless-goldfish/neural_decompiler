class Solution {
public:
    int dp[1001][1001];
    int di[4] = {-1, 1, 0 ,0}, dj[4] = {0 ,0, -1, 1};
    const int M = 1e9+7;

    bool valid(int x, int y, vector<vector<int>> &grid) {
        return x >= grid.size() || y >= grid[0].size() || x <0 || y < 0 ;
    }

    int dfs(int x,int y,  vector<vector<int>> &grid) {
        
        if(dp[x][y]) return dp[x][y];

        int ans = 1;
        for(int i=0; i < 4; ++i) {
            int xx = x + di[i], yy = y + dj[i];
            if(!valid(xx, yy, grid) && grid[xx][yy] > grid[x][y])
                ans = (ans + dfs(xx, yy, grid)) %M;
        }
        return dp[x][y] = ans;
    }

    int countPaths(vector<vector<int>>& grid) {
        memset(dp, 0, sizeof dp);
        int r= grid.size(), c = grid[0].size();

        int ans = 0;
        for(int i=0; i<r; ++i) {
            for(int j =0; j< c; ++j) {
                ans = (ans + dfs(i, j, grid))%M;
            }
        }
        return ans;

    }
};