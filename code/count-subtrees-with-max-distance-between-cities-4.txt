class Solution {
    bool dfs(int x, int& s, const vector<vector<int>>& con, int may, int &len, int& p) {
        if ((s & (1 << x)) == 0) {
            return false;
        }
        s ^= 1 << x;
        if (len < may) {
            len = may;
            p = x;
        }
        if (s == 0) {
            return true;
        }
        bool r = false;
        ++may;
        for (int y : con[x]) {
            r = dfs(y, s, con, may, len, p) || r;
        }
        return r;
    }
    
    void dfs(int x, int s, const vector<vector<int>>& con, vector<int> &r) {
        if (x == con.size()) {
            x = -1;
            for (int i = 0; i < con.size() && x < 0; ++i) {
                if (s & (1 << i)) {
                    x = i;
                }
            }
            if (x < 0) return;
            int len = 0, t = s;
            if (!dfs(x, t, con, 0, len, x)) return;
            dfs(x, s, con, 0, len, x);
            if (len) {
                ++r[len - 1];
            }
            return;
        }
        dfs(x + 1, s | (1 << x), con, r);
        dfs(x + 1, s, con, r);
    }
    
public:
    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {
        vector<vector<int>> d(n, vector<int>(n, -1));
        vector<vector<int>> con(n);
        for (auto& e : edges) {
            --e[0];
            --e[1];
            con[e[0]].push_back(e[1]);
            con[e[1]].push_back(e[0]);
        }
        vector<int> r(n - 1);
        dfs(0, 0, con, r);
        return r;
    }
};