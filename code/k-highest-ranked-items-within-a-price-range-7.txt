bool cmp(vector<int> &a,vector<int> &b){
    if(a[0]!=b[0]){
        return a[0]<b[0];
    }
    else if(a[1]!=b[1]){
        return a[1]<b[1];
    }
    else if(a[2]!=b[2]){
        return a[2]<b[2];
    }
    else return a[3]<b[3];
}

class Solution {
public:
    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k) {
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dist(m,vector<int>(n,INT_MAX));
        vector<vector<int>> vis(m,vector<int>(n,0));
        
        queue<pair<int,int>> q;
        
        q.push({start[0],start[1]});
        vis[start[0]][start[1]] = 1;
        dist[start[0]][start[1]] = 0;
        
        while(!q.empty()){
            int size = q.size();
            for(int i = 0;i<size;i++){
                int r = q.front().first;
                int c = q.front().second;
                q.pop();
                for(int p = 0;p<4;p++){
                    int nr = r + dir[p][0];
                    int nc = c + dir[p][1];
                    if(nr>=0 && nr<m && nc>=0 && nc<n && !vis[nr][nc] && grid[nr][nc]!=0){
                        vis[nr][nc] = 1;
                        dist[nr][nc] = dist[r][c]+1;
                        q.push({nr,nc});
                    }
                }
            }
        }
        
        vector<vector<int>> v;
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(grid[i][j]>=pricing[0] && grid[i][j]<=pricing[1] && dist[i][j]!=INT_MAX){
                    v.push_back({dist[i][j],grid[i][j],i,j});
                }
            }
        }
        sort(v.begin(),v.end(),cmp);
        vector<vector<int>> ans;
        int sz = v.size();
        for(int i = 0;i<min(k,sz);i++){
            ans.push_back({v[i][2],v[i][3]});
        }
        return ans;
    }
};