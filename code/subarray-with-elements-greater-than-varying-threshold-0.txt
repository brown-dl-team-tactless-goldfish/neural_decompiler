class Solution {
public:
    int validSubarraySize(vector<int>& nums, int threshold) {
        int n = nums.size();
        vector<int> range(n);
        stack<int> s, t;
        for (int i = n - 1; i >= 0; i--)
        {
            while (!s.empty() && nums[s.top()] >= nums[i])
                s.pop();
            if (s.empty())
                range[i] = n;
            else
                range[i] = s.top();
            s.push(i);
        }
        for (int i = 0; i < n; i++)
        {
            while (!t.empty() && nums[t.top()] >= nums[i])
                t.pop();
            if (t.empty())
                range[i] -= 0;
            else
                range[i] -= (t.top() + 1);
            t.push(i);
        }
        for (int i = 0; i < n; i++)
        {
            double c = (double)threshold / nums[i];
            if (range[i] > c)
                return range[i];
        }
        return -1;
    }
};