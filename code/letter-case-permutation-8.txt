/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int numOfletter(char *str){
    
    int numlen = 0;
    int i = 0 ;
    if(str == NULL )
        return 0;
    
    for(i = 0 ; i< strlen(str); i++){
        if((str[i]>='a' && str[i]<='z')||(str[i]>='A' && str[i]<='Z')){
            ++numlen;   
        }    
    }
    return numlen;     
}

void LetterDFS(char* stringIn, char **arrOut, int *letterNUms ,int index){
    
    if((index) == strlen(stringIn)){
        arrOut[*letterNUms] = (char *)realloc(arrOut[*letterNUms], strlen(stringIn)*sizeof(char)+1);
        strcpy(arrOut[*letterNUms], stringIn);
        (*letterNUms)++;
        return;
    }
    
    LetterDFS(stringIn, arrOut, letterNUms ,index+1);
    
    if(stringIn[index] >= 'A' && stringIn[index] <= 'Z'){
        
        stringIn[index] += 32;
        LetterDFS(stringIn, arrOut, letterNUms ,index+1);
    }
    else if(stringIn[index] >= 'a' && stringIn[index] <= 'z'){
        stringIn[index] -= 32;
        LetterDFS(stringIn, arrOut, letterNUms ,index+1);
    }
}

char** letterCasePermutation(char* S, int* returnSize) {
    
    if(S == NULL)
        return NULL;
    int letterNUms = 0;
    int strletternum = numOfletter(S);
    char **arrOut =  (char **)calloc(pow(2,strletternum), sizeof(int *));
    LetterDFS(S, arrOut, &letterNUms, 0);
    * returnSize = letterNUms;
    return arrOut;
    
}