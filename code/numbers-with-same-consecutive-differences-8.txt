    public int[] NumsSameConsecDiff(int N, int K) 
    {
        var allChars = Enumerable.Range(0, 10)
            .Select(x => (char)(x + '0'));
        var mapping = allChars
            .ToDictionary(x => x, x => 
                          new[] { (char)(x - K), (char)(x + K)}
                          .Where(char.IsDigit)
                          .ToList());
        
        HashSet<string> validNumbers = new HashSet<string>();
        
        //K = 9, N = 1 allows all digits, even if some can't make a transition.
		//Also the only one that allows '0' as a prefix.
        var validChars = N == 1 ? allChars : allChars.Except(new[] {'0'});
        var bfs = new Queue<string>(validChars.Select(c => c.ToString()));
        
        while(bfs.Any())
        {
            var current = bfs.Dequeue();
            
            if(current.Length >= N)
            {
                if(current.Length == N)
                {
                    validNumbers.Add(current);                    
                }
                continue;
            }
            foreach(var c in mapping[current.Last()])
            {
                bfs.Enqueue(current + c);
            }
        }
        
        return validNumbers.Select(x => Convert.ToInt32(x)).ToArray();
    }