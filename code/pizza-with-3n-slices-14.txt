int rob(vector<int>& arr, int idx, int dp[501][170], int n){
        if(idx>=arr.size() or n == 0) return 0;
        if(dp[idx][n] != -1) return dp[idx][n];
        return dp[idx][n] = max(arr[idx]+rob(arr,idx+2,dp,n-1),rob(arr,idx+1,dp,n));
    }
    int maxSizeSlices(vector<int>& slices) {
        int dp1[501][170];
        int dp2[501][170];
        memset(dp1,-1,sizeof dp1);
        memset(dp2,-1,sizeof dp2);
        int n = slices.size()/3;
        vector<int> a(slices.begin()+1,slices.end());
        vector<int> b(slices.begin(),slices.end()-1);
        return max(rob(a,0,dp1,n),rob(b,0,dp2,n));
    }