void swap(int *first, int *second) {
    int tmp = *first;
    *first = *second;
    *second = tmp;
}

void reverse(int *start, int *end) {
    while (start < end) {
        swap(start, end);
        start++;
        end--;
    }
}

void nextPermutation(int* nums, int numsSize){
    if (numsSize < 2)
        return nums;
    
    int *end = nums + numsSize - 1;
    
    // 1. find largest k s.t nums[k] < nums[k + 1]
    int k = numsSize - 2;
    while (k >= 0) {
        if (nums[k] < nums[k + 1])
            break;
        k--;
    }
    
    if (k == -1) {
		// no k found, just reverse whole array and done
        reverse(nums, end);
        return nums;
    }
    
    // 2. find largest l s.t nums[k] < nums[l] and l > k
    int l = numsSize - 1;
    while (l > k) {
        if (nums[l] > nums[k])
            break;
        l--;
    }
    
    // 3. swap nums[k] and nums[l]
    swap(nums + k, nums + l);
    
    // 4. reverse nums[k + 1:]
    reverse(nums + k + 1, end);
    
    return nums;
}