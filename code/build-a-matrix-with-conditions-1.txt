public class Solution {
    
    private static int[] TopoSort(int[][] edges, int height) {
        Dictionary<int, HashSet<int>> graph = Enumerable
            .Range(1, height)
            .ToDictionary(index => index, index => new HashSet<int>());
        
        foreach (var edge in edges)
            graph[edge[1]].Add(edge[0]);
        
        int[] result = new int[height + 1];
               
        HashSet<int> tier = new();
        
        for (int level = 0; graph.Count > 0; ) {
            tier.Clear();
            bool found = false;
            
            foreach (var pair in graph) {
                if (pair.Value.Count <= 0) {
                    result[pair.Key] = level++;
                    
                    tier.Add(pair.Key);
                    
                    found = true;
                }
            }
            
            if (!found)
                return null;
            
            foreach (var key in tier) 
                graph.Remove(key);
            
            foreach (var value in graph.Values)
                value.ExceptWith(tier);
        } 
                
        return result;
    }
    
    public int[][] BuildMatrix(int k, int[][] rowConditions, int[][] colConditions) {
        var R = TopoSort(rowConditions, k);
        var C = TopoSort(colConditions, k);
        
        if (R is null || C is null)
            return new int[0][] {};
        
        int[][] result = Enumerable
            .Range(0, k)
            .Select(_ => new int[k])
            .ToArray();
        
        for (int i = 1; i <= k; ++i)
            result[R[i]][C[i]] = i;
        
        return result;
    }
    
}