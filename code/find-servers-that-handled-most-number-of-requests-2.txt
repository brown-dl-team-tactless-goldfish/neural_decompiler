using PII = pair<int, int> ;  //{endtime, id}
class Solution {
public:
    vector<int> busiestServers(int k, vector<int>& arrival, vector<int>& load) {
        vector<int>count(k) ;
        set<int>canUseServer ;
        priority_queue<PII, vector<PII>, greater<PII>>busyPQ ;
        for(int i = 0; i < k; i++)
            canUseServer.insert(i) ;    
        for(int i = 0; i < arrival.size(); i++)
        {
            int start =  arrival[i] ;
            int end = start + load[i] ;
            while(!busyPQ.empty() && busyPQ.top().first <= start)
            {
                int id = busyPQ.top().second ;
                busyPQ.pop() ;
                canUseServer.insert(id) ;
            }
            if(canUseServer.empty())
                continue ;
            
            auto it = canUseServer.lower_bound(i%k) ;
            
            if(it == canUseServer.end())
                it = canUseServer.begin() ;
            
            int id = *it ;
            canUseServer.erase(id) ;
            count[id]++ ;
            busyPQ.push({end, id}) ;
        }
        vector<int>ret ;
        auto it = max_element(count.begin(), count.end()) ;
        int maxCount = *it;
        
        for(auto iter = it ; iter != count.end(); iter++){
            if(*iter == maxCount)
                ret.push_back(iter - count.begin()) ;
        }
        return ret ;
    }
};