class Solution {
public:
	long long numberOfWays(string s) {
		long long ans = solve(s, 0); // for 1 as middle element we need to make prefix and surfix array for 0
		ans += solve(s, 1); // same for 0
		return ans;
	}

	long long solve(string s, int c) {
		long long ans = 0;
		long long n = s.size();
		vector<long long>l(n, 0), r(n, 0);

		int cnt = 0;
		for (int i = 0; i < n; i++) {
			l[i] = cnt;
			if (s[i] == c +  '0') {
				cnt++;
			}
		}
		cnt = 0;
		for (int i = n - 1; i >= 0; i--) {
			r[i] = cnt;
			if (s[i] == c + '0') {
				cnt++;
			}
		}
		int x = (c == 0) ? 1 : 0;
		for (int i = 1; i < n - 1; i++) {
			if (s[i] == x + '0') {
				ans += l[i] * r[i];
			}
		}

		return ans;
	}

};