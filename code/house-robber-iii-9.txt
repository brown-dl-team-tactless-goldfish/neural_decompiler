public:
    int rob(TreeNode* root) {
        recur_not_steal(root);
        recur_steal(root);
        
        return ans;
    }
    
    int recur_not_steal(TreeNode* curr){
        if(!curr) return 0;
        
        if(not_steal.find(curr) == not_steal.end()){
            not_steal[curr] = max(recur_steal(curr -> left), recur_not_steal(curr -> left)) + max(recur_steal(curr -> right), recur_not_steal(curr -> right));
        }
        
        ans = max(ans, not_steal[curr]);
        return not_steal[curr];
    }
    
    
    int recur_steal(TreeNode* curr){
        if(!curr) return 0;
        
        if(steal.find(curr) == steal.end()){
            steal[curr] = recur_not_steal(curr -> left) + recur_not_steal(curr -> right) + curr -> val;
        }
        
        ans = max(ans, steal[curr]);
        return steal[curr];
    }
    
    
    unordered_map<TreeNode*, int> not_steal;
    unordered_map<TreeNode*, int> steal;
    int ans = 0;