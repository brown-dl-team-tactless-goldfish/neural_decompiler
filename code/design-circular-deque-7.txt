
struct node {
    
    int val;
    struct node *next;
    struct node *prev;
};

typedef struct {
  int count;
  int cap;
  struct node *front;
  struct node *rear;
    
} MyCircularDeque;


MyCircularDeque* myCircularDequeCreate(int k) {
    
    
    MyCircularDeque * dq = malloc(sizeof(MyCircularDeque));
    dq->count = 0;
    dq->cap = k;
    dq->front = NULL;
    dq->rear = NULL;
    return dq;
    
}

bool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {
    
    struct node *temp;
    
    if(obj->count == obj->cap)
        return false;
    
    if(obj->front == NULL) {
        
        temp = malloc(sizeof(struct node));
        temp->val = value;
        temp->prev = NULL;
        temp->next = NULL;
        obj->front = temp;
        obj->rear = temp;
        obj->count++;
    }
    
    else {
        
        temp = malloc(sizeof(struct node));
        temp->val = value;
        obj->front->prev = temp;
        temp->next = obj->front;
        obj->front = temp;
        obj->count++;
        
    }
    
    return true;
}

bool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {
  
    struct node *temp;
    if(obj->count == obj->cap)
        return false;
    
    if(obj->front == NULL) {
        
        temp = malloc(sizeof(struct node));
        temp->val = value;
        temp->prev = NULL;
        temp->next = NULL;
        obj->front = temp;
        obj->rear = temp;
        obj->count++;
    }
    
    else {
        
        temp = malloc(sizeof(struct node));
        temp->val = value;
        temp->prev = NULL;
        temp->next = NULL;
        obj->rear->next = temp;
        temp->prev = obj->rear;
        obj->rear = temp;
        obj->count++;
    }
    
    return true;
}


bool myCircularDequeDeleteFront(MyCircularDeque* obj) {

    if(obj->count == 0)
        return false;
    
    struct node *temp;
    temp = obj->front;
    
    obj->front = obj->front->next;
    if(obj->front)
    obj->front->prev = NULL;
    
    obj->count--;
    if(obj->front == NULL)
        obj->rear = NULL;
    free(temp);
    return true;
}

bool myCircularDequeDeleteLast(MyCircularDeque* obj) {
  
    
    if(obj->count == 0)
        return false;
    
    struct node *temp;
    temp = obj->rear;
    obj->rear = obj->rear->prev;
    if(obj->rear)
    obj->rear->next = NULL;
    
    obj->count--;
    free(temp);
    
    if(obj->rear == NULL)
        obj->front = NULL;
    
    return true;
    
    
}

int myCircularDequeGetFront(MyCircularDeque* obj) {
  
    
    if(obj->count == 0)
        return -1;
    
    return obj->front->val;
    
    
}

int myCircularDequeGetRear(MyCircularDeque* obj) {
  
    if(obj->count == 0)
        return -1;
    
    return obj->rear->val;
    
    
    
    
}

bool myCircularDequeIsEmpty(MyCircularDeque* obj) {
  
    
    if(obj->count == 0)
        return true;
    else
        return false;
    
}

bool myCircularDequeIsFull(MyCircularDeque* obj) {
  
      if(obj->count == obj->cap)
        return true;
    else
        return false;
    
    
}

void myCircularDequeFree(MyCircularDeque* obj) {

    
    struct node *temp, *curr;
    if(obj->count == 0) {
        free(obj);
        return;
        
    }
    
    
    curr = obj->front;
    while(curr != NULL) {
        temp = curr;
        curr = curr->next;
        free(temp);
    }
    
    free(obj);
    return;
}