class Solution {
public:
    #define BOP(op) {#op[0], [] (int a, int b) { return a op b; }}
    map<char, function<int(int, int)>> ops{BOP(+), BOP(*)};
    unordered_map<int, unordered_set<int>> dp;
    unordered_set<int> &evalAll(string &s, int l, int r) {
        int state = l * s.size() + r;
        if (dp.count(state))
            return dp[state];
        if (l + 1 == r)
            return dp[state] = {s[l] - '0'};
        auto &res = dp[state];
        for (int i = l + 1; i < r; i += 2) {
            auto &left = evalAll(s, l, i), &right = evalAll(s, i + 1, r);
            auto &op = ops[s[i]];
            for (auto l : left)
                for (auto r : right) {
                    int val = op(l, r);
                    if (val <= 1000)
                        res.insert(val);
                }
        }
        return res;
    }
    
    int evalTrue (string &s) {
        vector<int> stk{s[0] - '0'};
        for (int i = 2; i < s.size(); i += 2) {
            int val = s[i] - '0';
            if (s[i - 1] == '*') {
                val *= stk.back();
                stk.pop_back();
            }
            stk.push_back(val);
        }
        return accumulate(stk.begin(), stk.end(), 0);
    }
    
    int scoreOfStudents(string s, vector<int>& answers) {
        auto &results = evalAll(s, 0, s.size());
        int score = 0, true_res = evalTrue(s);
        for (auto ans : answers) {
            if (results.count(ans))
                score += 2;
            if (ans == true_res)
                score += 3;
        }
        return score;
    }
};