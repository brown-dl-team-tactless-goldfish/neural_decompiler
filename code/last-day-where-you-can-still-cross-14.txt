//C++
class Solution {
    int dirs[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    
    bool dfs(const vector<vector<int>> &grid, vector<vector<int>> &visited, int i, int j) {
        int m = grid.size(), n = grid[0].size();
        
        for (auto &d: dirs) {
            int u = i + d[0], v = j + d[1];
            if (u < 0 || u == m || v < 0 || v == n) continue;
            
            if (grid[u][v] == 1) continue;
            if (u == m - 1) return true;
            if (visited[u][v] == 1) continue;
            
            visited[u][v] = 1;
            if (dfs(grid, visited, u, v)) return true;
        }
        
        return false;
    }
public:
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        vector<vector<int>> grid(row, vector<int>(col, 1)), visited(row, vector<int>(col, 0));
        
        for (int k = cells.size() - 1; k >= 0; --k) {
            int i = cells[k][0] - 1, j = cells[k][1] - 1;
            grid[i][j] = 0;
            
            bool good = false;
            if (i == 0) good = true;
            for (auto &d: dirs) {
                int u = i + d[0], v = j + d[1];
                if (u < 0 || u == row || v < 0 || v == col) continue;
                if (grid[u][v] == 1) continue;
                if (visited[u][v] == 1) good = true;
                if (u == 0) good = true;
            }
            if (good == false) continue;
            
            visited[i][j] = 1;
            if (i == row - 1) return k;
            if (dfs(grid, visited, i, j) == true) return k;
        }
        return 0;
    }
};