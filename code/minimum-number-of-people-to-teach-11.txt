int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
    
	
	// we save each users language id list into map, with id as key
    std::map<int, set<int>> users;
    for(int i = 0; i < languages.size(); ++i) {
        for(auto& l : languages[i]) {
            users[i + 1].insert(l);
        }
    }
    
	// then we go through each relationship
	// if a pair of friend don't have common language
	// we save their language and user id into set
	// we can prove, target language must chosen from lang set
    set<int> lang;
    set<int> people;
    for(auto& f : friendships) {
        
        bool skip = false; // if they have one common language, skip is true
        for(auto& l : users[f[0]]) {
            if (users[f[1]].count(l) > 0) {
                skip = true;
                break;
            }
        }
        
        if (!skip) {
            for(auto& l : users[f[0]]) { // save user a's language into set
                lang.insert(l);
            }
            for(auto& l : users[f[1]]) { // save user b's language into set
                lang.insert(l);
            }
            
			// at the same time, save user a and b into people set
            people.insert(f[0]);
            people.insert(f[1]);
        }
    }
    int res = lang.empty() ? 0 : languages.size(); // if no pair of relationship has no common language, the result is 0;
    
	
	// chose any fron lang set, and calculate how many people need taught
	// save the minimum as result
    for(auto& l : lang) {
        int cnt = 0;
        for(auto& p : people) {
            if (users[p].count(l) == 0) {
                ++cnt;
            }
        }
        res = std::min(res, cnt);
    }
    
    return res;
    
}