struct dominoe {
    int x, y;
    dominoe(int a, int b) : x{a}, y{b}{}
    bool operator==(const dominoe &d) const 
    {
        return (x == d.x && y == d.y) || (x == d.y && y == d.x);
    }
};

template<>
struct hash<dominoe>
{
    size_t operator()(const dominoe & d) const
    {
        return std::hash<int>()(d.x) ^ std::hash<int>()(d.y);
    }
};

class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        unordered_map<dominoe, int> cnt;
        int n = dominoes.size();
        for (int i = 0; i < n; i++)
        {
            auto & d = dominoes[i];
            cnt[{d[0], d[1]}] ++;
        }
        int sum = 0;
        for (auto [_, c] : cnt)
        {
            if (c > 1)
            {
                sum += c * (c - 1) / 2;
            }
        }
        return sum;
    }
};