
class MovieRentingSystem {
public:
    unordered_map<int,unordered_map<int,int>>shopm;
    unordered_map<int,set<pair<int,int>>>sear;
    set<pair<int,pair<int,int>>>rented;
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
       
        int m=entries.size();
        for(int i=0;i<m;i++){
            int x=entries[i][0];
            int y=entries[i][1];
            int z=entries[i][2];
            shopm[x][y]=z;
            sear[y].insert({z,x});
        }
    
    }
    
    vector<int> search(int movie) {
        
        int cnt=0;
        vector<int>v;
        for(auto x:sear[movie]){
            v.push_back(x.second);
            cnt++;
            if(cnt==5)break;
        }
        return v;  
    }
    
    void rent(int shop, int movie) {
        auto it =sear[movie].find({shopm[shop][movie],shop});
        sear[movie].erase(it);
        rented.insert({shopm[shop][movie],{shop,movie}});
    
    }
    
    void drop(int shop, int movie) {
        
        sear[movie].insert({shopm[shop][movie],shop});
        auto it =rented.find({shopm[shop][movie],{shop,movie}});
        rented.erase(it);
    }
    
    vector<vector<int>> report() {
        vector<vector<int>>v;
        int cnt=0;
        for(auto it =begin(rented);it!=end(rented);it++){
            v.push_back({it->second.first,it->second.second});
            cnt++;
            if(cnt==5)return v;
        }
        return v;
        
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */
