class Solution {
public:
    int maxProfit(vector<int>& inventory, int orders) {
        sort(inventory.begin(), inventory.end(), greater());
        int l = 0, r = 1e9;
        while(l<r){
            auto mid = (l+r)/2;
            if(!kBall(inventory, orders, mid)) l = mid+1;
            else r = mid;
        }
        long profit = 0, mod = 1e9+7;
        for(auto x:inventory){
            auto dy = min(orders, max(0,x-l));
            orders -= dy;
            long y = x-dy;
            profit += (y+1+x)*(x-y)/2;
            profit %= mod;
            if(orders == 0) break;
        }
        if(orders > 0) profit += long(l)*orders;        
        return profit % mod;
    }
    
    bool kBall(const vector<int>& v, long sum, int k){
        for(auto x:v){
            sum -= max(x-k, 0);
            if(sum < 0) return false;
        }
        return sum >= 0;
    }
};