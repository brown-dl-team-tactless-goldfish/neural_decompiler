typedef struct
{
    int top;
    int size;
    int * arr;
}Stack;

bool isStackFull(Stack * stack)
{
    return (stack->top == stack->size - 1) ? 1 : 0;
}

bool isStackEmpty(Stack * stack)
{
    return (stack->top == -1) ? 1 : 0;
}

void push(Stack * stack, int data)
{
    if(isStackFull(stack))
        return;
    stack->arr[++(stack->top)] = data;
}

int pop(Stack * stack)
{
    if(isStackEmpty(stack))
        return -1;
    return stack->arr[(stack->top)--];
}

int peek_top(Stack * stack)
{
    if(isStackEmpty(stack))
        return -1;
    return stack->arr[stack->top];
}

bool validateStackSequences(int* pushed, int pushedSize, int* popped, int poppedSize)
{
    Stack * stack = (Stack *)malloc(sizeof(Stack));
    stack->top  = -1;
    stack->size = pushedSize;
    stack->arr = (int *)malloc(sizeof(int) * (stack->size));
    
    int i = 0;
    int j = 0;
    
    while(j != poppedSize)
    {
        if(i == 0)
        {
            push(stack, pushed[i]);
            i++;
        }
        else
        {
            if(popped[j] == peek_top(stack))
            {
                pop(stack);
                j++;
            }
            else if(i < pushedSize)
            {
                push(stack, pushed[i]);
                i++;
            }
            else
            {
                break;
            }
        }
    }
    
    if(isStackEmpty(stack))
        return true;
    return false;
    
}