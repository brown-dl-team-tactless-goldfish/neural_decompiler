class Solution {
public:
    int minimumTime(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        
        vector<vector<int>> dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        vector<vector<int>> vis(n, vector<int>(m, 0));

        priority_queue<vector<int>, vector<vector<int>>, greater<>> q;
        vis[0][0] = 1;

        if(grid[1][0] <= 1) {
            q.push({1, 1, 0});
            vis[1][0] = 1;
        }
        if(grid[0][1] <= 1) {
            q.push({1, 0, 1});
            vis[0][1] = 1;
        }
        if(q.empty()) return -1;

        while(!q.empty()) {
            vector<int> v = q.top(); q.pop();
            int t = v[0], i = v[1], j = v[2];
            if(i == n-1 && j == m-1) return t;

            for(auto X: dir) {
                int r = i + X[0], c = j + X[1];
                if(r < n && r >= 0 && c < m && c >= 0 && !vis[r][c]) {
                    if(grid[r][c] <= t+1) {
                        q.push({t+1, r, c});
                    } else {
                        int d = grid[r][c] - t;
                        if(d%2 == 0) {
                            q.push({grid[r][c]+1, r, c});
                        } else {
                            q.push({grid[r][c], r, c});
                        }
                    }
                    vis[r][c] = 1;
                }
            }
        }
        
        return -1;
    }
};