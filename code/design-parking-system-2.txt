typedef struct {
    int max_slots;
    int occupied_slots;
} Big_t;

typedef struct {
    int max_slots;
    int occupied_slots;
} Medium_t;

typedef struct {
    int max_slots;
    int occupied_slots;
} Small_t;

typedef struct {
    Big_t Big;
    Medium_t Medium;
    Small_t Small;
} ParkingSystem;


ParkingSystem* parkingSystemCreate(int big, int medium, int small) {
    ParkingSystem *ps = malloc(sizeof(*ps));
    
    ps->Big.max_slots = big;
    ps->Big.occupied_slots = 0;
    
    ps->Medium.max_slots = medium;
    ps->Medium.occupied_slots = 0;    
    
    ps->Small.max_slots = small;
    ps->Small.occupied_slots = 0;
    
    return ps;
}

bool parkingSystemAddCar(ParkingSystem* obj, int carType) {
    if(carType == 1 && obj->Big.occupied_slots < obj->Big.max_slots) {
        obj->Big.occupied_slots++;
        return true;
    } else if(carType == 2 && obj->Medium.occupied_slots < obj->Medium.max_slots) {
        obj->Medium.occupied_slots++;
        return true;
    } else if(carType == 3 && obj->Small.occupied_slots < obj->Small.max_slots) {
        obj->Small.occupied_slots++;
        return true;
    }
    
    return false;
}

void parkingSystemFree(ParkingSystem* obj) {
    free(obj);
}