int ds_find(vector<int> &ds, int i) {
    return ds[i] < 0 ? i : ds[i] = ds_find(ds, ds[i]);
}
bool isBipartite(vector<vector<int>>& graph) {
    vector<int> ds(graph.size(), -1);
    for (auto i = 0; i < graph.size(); ++i) {
        auto sibling_group = -1, node_group = ds_find(ds, i);
        for (auto j = 0; j < graph[i].size(); ++j) {
            auto prev_group = exchange(sibling_group, ds_find(ds, graph[i][j]));
            if (node_group == sibling_group) return false;
            if (prev_group >= 0 && prev_group != sibling_group) ds[prev_group] = sibling_group;
        }
    }
    return true;
}