#define UPDOWN    1 
#define LEFTRIGHT 2

int DFS(int** grid, int r, int c, int rLen, int cLen, int direction)
{
    int ret = 0;
    if(direction == UPDOWN)
    {
        for(int i = 0; i < rLen; i++)
        {
            if(grid[i][c] == 1)
            {
                grid[i][c] = 0; 
                ret += (1 + DFS(grid, i, c, rLen, cLen, LEFTRIGHT));/* find current col only */
            }
        }
    }
    else
    {
        for(int i = 0; i < cLen; i++)
        {
            if(grid[r][i] == 1)
            {
                grid[r][i] = 0; 
                ret += (1 + DFS(grid, r, i, rLen, cLen, UPDOWN));/* find current row only */
            }
        }        
    }
    return ret;
}

int countServers(int** grid, int gridSize, int* gridColSize){
    int maxCom = 0;
    for(int i = 0; i < gridSize; i++)
    {
        for(int j = 0; j < *gridColSize; j++)
        {
            if(grid[i][j] == 1)
            {
                grid[i][j] = 0; /* clear avoid re-count */
                int cnt = 1 + DFS(grid, i, j, gridSize, *gridColSize, UPDOWN) + 
                    DFS(grid, i, j, gridSize, *gridColSize, LEFTRIGHT);
                if(cnt >= 2)
                    maxCom += cnt;
            }
        }
    }
    return maxCom;
}