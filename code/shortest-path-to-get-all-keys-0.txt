class Solution {
public:
   int shortestPathAllKeys(vector<string>& grid) {
      initialize(grid);
      queue<State> q;
      q.push(startState);
      visited[startState.id()] = true;
      while (!q.empty()) {
         auto state = q.front(); q.pop();
         for (const auto& d : dirs) {
            int i = state.x + d[0], j = state.y + d[1];
            if (!isEnterable(i, j, grid, state)) continue;
            State newState{ i, j, state.keyState, state.step + 1 };
            updateKeyState(newState.keyState, grid[i][j]);
            if (newState.keyState == endKeyState) return newState.step;
            if (visited[newState.id()]) continue;
            visited[newState.id()] = true;
            q.push(newState);
         }
      }
      return -1;
   }
private:
   struct State {
      int id() const { return x * 30 + y + 900 * keyState; }
      int x = -1;
      int y = -1;
      int keyState = 0;
      int step = 0;
   };

   void initialize(vector<string>& grid)
   {
      n = grid.size(); m = grid[0].size();
      visited = vector<bool>(30 * 30 * 64, false);

      for (int i = 0; i<n; i++) {
         for (int j = 0; j<m; j++) {
            if (grid[i][j] == '@') {
               startState.x = i;
               startState.y = j;
               break;
            }
         }
      }

      for (const auto& s : grid) {
         for (auto c : s)
            updateKeyState(endKeyState, c);
      }
   }

   void updateKeyState(int& keyState, char c) {
      if (c >= 'a' && c <= 'f')
         keyState |= 1 << (c - 'a');
   }

   bool isEnterable(int i, int j, const vector<string>& grid, const State& state) {
      if (i<0 || i >= n || j<0 || j >= m || grid[i][j] == '#') return false;
      return isUnlock(grid[i][j], state);
   }

   bool isUnlock(char c, const State& state)
   {
      if (!('A' <= c && c <= 'F')) return true;
      auto keybit = c - 'A';
      return state.keyState & (1 << keybit);
   }

   vector<bool> visited;
   int n;
   int m;
   State startState;
   int endKeyState;
   const vector<vector<int>> dirs = { { 0,1 },{ 1,0 },{ 0,-1 },{ -1,0 } };
};