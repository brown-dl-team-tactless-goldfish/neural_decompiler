class Solution {
public:
    vector<int> ans;
    void getmax12(int& m1, int& m2, map<int, int>& mp)
    {
        auto iter = mp.rbegin();
        m1 = iter->first;
        if (iter->second > 1) {
            m2 = m1;
            return;
        }
        iter++;
        m2 = iter->first;
        return;   
    }
    
    void del(map<int, int>& mp, int v)
    {
        mp[v]--;
        if (mp[v] == 0) {
            mp.erase(v);
        }
    }
    
    bool dfs(map<int, int>& mp, int n)
    {
        if (mp.count(0) == 0) return false;
        if (n == 0) {
            return true;
        }
        int m1, m2;
        getmax12(m1, m2, mp);
        int v = m1 - m2;
        map<int, int> mp1;
        map<int, int> mp2;
        if ((mp.count(v) == 0) && (mp.count(-v) == 0))
        {
            return false;
        }
        while (!mp.empty())
        {
            auto iter = mp.begin();
            int v1 = iter->first;
            mp1[v1]++;
            del(mp, v1);
            
            int v2 = v1 + v;
            if (mp.count(v2) <= 0) {
                return false;
            }
            mp2[v2]++;
            del(mp, v2);
        }
        bool b1 = mp2.count(v) > 0;
        bool b2 = mp1.count(-v) > 0;
        
        if (mp1.count(0) && b1) {
            bool res = dfs(mp1, n - 1);
            if (res) {
                ans.push_back(v);
                return res;
            }
        }
        
        if (mp2.count(0) && b2) {
            bool res = dfs(mp2, n - 1);
            if (res) {
                ans.push_back(-v);
                return res;
            }
        }
        return false;
    }
    
    vector<int> recoverArray(int n, vector<int>& sums) {
        map<int, int> mp;
        for (auto s : sums)
        {
            mp[s]++;
        }
        bool res = dfs(mp, n);
        return ans;
    }
};