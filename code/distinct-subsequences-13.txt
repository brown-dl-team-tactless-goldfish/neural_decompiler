class Solution {
public:
    int numDistinct(string s, string t) {
        //speed up
        if(s.size() < t.size() || t.size() == 0 || s.size() == 0) return 0;
       
        set<char> setT;        
        for(char c : t) setT.insert(c);
        for(int i = 0; i < s.size(); i++)
        {
            if(setT.find(s[i]) == setT.end()) 
            {
                s.erase(i, 1);
                i--;
            }
        }       
        if(s.size() < t.size() || t.size() == 0 || s.size() == 0) return 0;
        
        //dp
        vector<vector<long>>dp (t.size(), vector<long>(s.size(), 0));
        // dp[i][j] start from s[j], number of subsequence match sequence start from t[i]
        
        for(int i = (int)t.size()-1; i >= 0; i--)//t
        {
            int dist = (int)t.size()-1-i;
            for(int j = (int)s.size()-1-dist; j >= 0; j--)//s
            {
                char curr = t[i];
                for(int pos = s.size(); pos >= j; pos--)
                {
                    dp[i][j] = ( j == s.size()-1 ? 0 : dp[i][j+1]);//prevInc
                    if(s[pos] == curr)
                    {
                        dp[i][j] += ((i < t.size()-1 && j < s.size()-1) ? dp[i+1][j+1] : 1);//currInc
                    }

                }
            }
        }
        return dp[0][0];
    }
};