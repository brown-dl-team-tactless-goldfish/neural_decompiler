class Solution {
public:
    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        set<int> arr;
        
        //to store languages known by ith user
        unordered_map<int, map<int, int>> mp;
        
        for(int i = 0; i < languages.size(); i++) 
            for(auto x : languages[i])
                mp[i+1][x]++;
        
        for(int i = 0; i < friendships.size(); i++) {
            int x = friendships[i][0], y = friendships[i][1];
            int flag = 0;
            
            for(int cnt = 1; cnt <= n; cnt++) {
                //do not insert into set if both can communicate with each other
                if(mp[x][cnt] and mp[y][cnt]) {
                    flag = 1;
                    break;
                }
            }
            
            if(flag == 0) 
                arr.insert(x), arr.insert(y);
        }
        
        int cnta = INT_MAX;
        
        //here logic is that if the friendship set has any two mutually exclusive tuples than 
        //they have to know the common language as the whole network has to communicate
        //so checking for each language check how many persons know it and take the minimum number needed to teach one
        
        //check how much persons we need to teach for each language
        for(int cnt = 1; cnt <= n; cnt++) {
            int maxi = 0;
            for(auto x : arr) 
                if(!mp[x][cnt])
                    maxi++;
        
            cnta = min(cnta, maxi);
        }
        
        return cnta;
    }
};