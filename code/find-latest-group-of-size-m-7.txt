class Solution {
public:
    int findLatestStep(vector<int>& arr, int m) {
        int n = arr.size();
        if (m == n) {
            return n;
        }
        set<int> indexSet;
        indexSet.insert(0);
        indexSet.insert(n + 1);
        int res = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            set<int>::iterator it = indexSet.upper_bound(arr[i]);
            int right = *it;
            int left = *(prev(it));
            if (arr[i] - left - 1 == m || right - arr[i] - 1 == m) {
                return res;
            }
            indexSet.insert(arr[i]);
            res--;
        }
        return -1;
    }
};