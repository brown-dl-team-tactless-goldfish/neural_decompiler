smatch m;
const string ch = "<![CDATA[";
const string cf = "]]>";
const regex th("^<[A-Z]{1,9}>");
const regex tf("^</[A-Z]{1,9}>");

class Solution {
public:
    
    bool isValid(string s) {
        stack<string> tag;
        int n = s.size();
        
        if(!regex_search(s.cbegin(), s.cend(), m, th)) return false;
        
        for(int i=0; i<n; i++){
            if(i!=0 && tag.empty()) return false;
            
            if(s[i] == '<'){
                if(s.substr(i, ch.size()) == ch){
                    i += ch.size();
                    auto ce = s.find(cf, i);
                    if(ce == string::npos) return false;
                    i = ce + cf.size();
                } else if(regex_search(s.cbegin()+i, s.cend(), m, th)){
                    string t = m[0].str();
                    tag.push(t.substr(1, t.size()-1));
                    i += t.size();
                } else if(regex_search(s.cbegin()+i, s.cend(), m, tf)){
                    string t = m[0].str();
                    if(tag.empty() || tag.top() != t.substr(2, t.size()-1)) return false;
                    tag.pop();
                    i += t.size();
                } else {
                    return false;
                }
                i--;
            }
        }
        
        return tag.empty();
    }
};