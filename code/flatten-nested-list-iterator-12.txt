struct NestedIterator {
    int *a, i, n;
};

#define is_int(...) NestedIntegerIsInteger(__VA_ARGS__)
#define gi(...)     NestedIntegerGetInteger(__VA_ARGS__)
#define gl(...)     NestedIntegerGetList(__VA_ARGS__)
#define glsz(...)   NestedIntegerGetListSize(__VA_ARGS__)

void *fl(void** nl, int sz, struct NestedIterator *ni) {
    if (sz > 0) {
        if (is_int(*nl))
            ni->a[ni->n++] = gi(*nl);
        else
            fl(gl(*nl), glsz(*nl), ni);
        fl(++nl, --sz, ni);
    }
    return ni;
}

struct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {
    struct NestedIterator *ni = calloc(1, sizeof *ni);
    ni->a = calloc(1, sizeof(int [100000]));
    return fl((void **)nestedList, nestedListSize, ni);
}

bool nestedIterHasNext(struct NestedIterator *iter) {
    return iter->i < iter->n;
}

int nestedIterNext(struct NestedIterator *iter) {
    return iter->a[iter->i++];
}

void nestedIterFree(struct NestedIterator *iter) {
    free(iter->a), free(iter);
}