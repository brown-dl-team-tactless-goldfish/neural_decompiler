class Solution {
    int helper(const vector<int>& days, const vector<int>& costs, vector<int>& dp, int i) {
        if (i < 0) return 0;
        if (dp[i]) return dp[i];
        
        int j = i-1;
        int a = helper(days, costs, dp, j) + costs[0];
        
        while (j >= 0 && days[i]-days[j] < 7) --j;
        int b = helper(days, costs, dp, j) + costs[1];
        
        while (j >= 0 && days[i]-days[j] < 30) --j;
        int c = helper(days, costs, dp, j) + costs[2];
        
        return dp[i] = min(a, min(b, c));
    }
    
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        sort(days.begin(), days.end());
        vector<int> dp(days.size(), 0);
        return helper(days, costs, dp, days.size()-1);
    }
}; 