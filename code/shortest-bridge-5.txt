class Solution {
public:
    vector<int> DIR = {1, 0, -1, 0, 1};
    queue<pair<int, int>> q;
    int n, m;
    int shortestBridge(vector<vector<int>>& grid) {
        n = grid.size(), m = grid[0].size();
        int level = 0, color = 2;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(grid[i][j] == 1)
                    helper(grid, i, j, color++);
        while(!q.empty()){
            int sz = q.size();
            for(int i = 0; i < sz; i++){
                auto [r,c] = q.front();
                q.pop();
                for(int k = 0; k < 4; k++){
                    int nr = r + DIR[k], nc = c + DIR[k + 1];
                    if(nr < 0 || nc < 0 || nr == n || nc == m || grid[nr][nc] == 2) continue;
                    if(grid[nr][nc] == 3) return level;
                    grid[nr][nc] = 2;
                    q.push({nr, nc});
                }
            }
            level++;
        }
        return -1;
    }
    void helper(vector<vector<int>>& grid, int i, int j, int color){
        if(i < 0 || j < 0 || i == n || j == m || grid[i][j] != 1)
            return;
        if(color == 2) q.push({i, j});
        grid[i][j] = color;
        for(int k = 0; k < 4; k++)
            helper(grid, i + DIR[k], j + DIR[k + 1], color);
        
    }
};