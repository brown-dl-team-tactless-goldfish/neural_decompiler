class Solution {
public:
    int longestPath(vector<int>& parent, string s) {
        const int n = parent.size();
        vector<vector<int>> g(n);
        for(int i=1;i<n;i++){
            g[parent[i]].push_back(i);
        }
        int gMax = 1;
        getLen(g, 0, gMax, s);
        return gMax;
    }
    
    int getLen(vector<vector<int>>& g, int i, int& gMax, const string& s){
        priority_queue<int, vector<int>, greater<>> q;
        for(auto child : g[i]){
            int len = getLen(g, child, gMax, s);
            if(s[child] != s[i])  q.push(len);
            if(q.size() > 2) q.pop();
        }
        
        if(q.empty()) return 1;
        int x = q.top(); q.pop();
        if(q.empty()) {
            gMax = max(gMax, 1 + x);
            return 1 + x; 
        }       
        auto y = q.top();
        gMax = max(gMax, 1 + x + y);
        return 1 + y;
    }
};