class Solution {
public:
   int mergeStones(vector<int>& stones, int K) {
      this->K = K;
      const int n = stones.size();
      if (n == 1) return 0;
      if ((n - 1) % (K - 1) != 0) return -1;
      for (auto x : stones) vsum.push_back(vsum.back() + x);
      vdp = vector(n, vector(n + 1, vector<int>(K + 1, -1)));
      for (int i = 0; i < n; i++) vdp[i][i + 1][1] = stones[i];

      return dp(0, n, K);
   }

   int dp(int i, int j, int k) {
      if (vdp[i][j][k] > -1) return vdp[i][j][k];
      if (k == 1) return vdp[i][j][k] = dp(i, j, K) + vsum[j] - vsum[i];
      vdp[i][j][k] = 1e8;
      if ((j - i - k) % (K - 1) != 0) return vdp[i][j][k];
      for (int m = i + 1; m < j; m++) 
         vdp[i][j][k] = min(vdp[i][j][k], dp(i, m, 1) + dp(m, j, k - 1));
      return vdp[i][j][k];
   }

   int K;
   vector<int> vsum = { 0 };
   vector<vector<vector<int>>> vdp;
};