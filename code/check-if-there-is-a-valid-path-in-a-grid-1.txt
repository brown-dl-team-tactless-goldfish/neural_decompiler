class Solution {
public:
    bool hasValidPath(vector<vector<int>>& grid) {
        vector<vector<pair<int, int>>> directions = {
            {{0, 0}, {0, 0}},
            {{0, -1}, {0, 1}},
            {{-1, 0}, {1, 0}},
            {{0, -1}, {1, 0}},
            {{0, 1}, {1, 0}},
            {{0, -1}, {-1, 0}},
            {{0, 1}, {-1, 0}}};
        return hasValidPath(grid, 0, 0, directions, -1);
    }
    
    bool hasValidPath(vector<vector<int>>& grid, int r, int c, const vector<vector<pair<int, int>>>& directions, int p) {
        const int M = grid.size();
        const int N = grid[0].size();
        if (r == M - 1 && c == N - 1) {
            return true;
        }
        int f_type = grid[r][c];
        for (int j = 0; j < 2; ++j) {
            if (j == p) {
                continue;
            }
            const auto& d1 = directions[f_type][j];
            int m = r + d1.first, n = c + d1.second;
            if (m >= 0 && m < M && n >= 0 && n < N) {
                int t_type = grid[m][n]; 
                for (int i = 0; i < 2; ++i) {
                    const auto& d2 = directions[t_type][i];
                    if (m + d2.first == r && n + d2.second == c) {
                        if (hasValidPath(grid, m, n, directions, i)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
};