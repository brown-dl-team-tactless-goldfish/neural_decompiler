class Solution {
public:
    int getCost(string s,int start,int move,int push)
    {
        int c = 0;
        for(int i=0;i<s.length();i++)
        {
            if(i == 0)
            {
			    // if not the start digit
                if((s[i] - '0') != start)
                {
                    c += move;
                }
            }
            else
            {
				// if digit is not same as prev then we need to move
                if(s[i] != s[i-1])
                {
                    c += move;
                }
            }
            c += push;
        }
        return c;
    }
    int minCostSetTime(int startAt, int moveCost, int pushCost, int targetSeconds) {
        
        int ans = 100000000;
        for(int i=0;i<100;i++)
        {
            if(targetSeconds < i)
                break;

            int x = targetSeconds - i;

            if(x % 60 == 0)
            {

                string s;
                if(i < 10)
                {
                    s += "0";
                }
                s += to_string(i);


                int m = x / 60;
				// minute digits cannot exceed 2
                if(m >= 100)
                    continue;
                if(m > 0){
                    s = to_string(m) + s;
                    ans = min(ans,getCost(s,startAt, moveCost, pushCost));
                }
                else
                {
                    if(i < 10)
                    {
                        ans = min(ans,getCost(to_string(i),startAt, moveCost, pushCost));
                    }
                    else
                    {
                        ans = min(ans,getCost(s,startAt, moveCost, pushCost));
                    }
                }
                
                
            }
        }

        return ans;


    }
};