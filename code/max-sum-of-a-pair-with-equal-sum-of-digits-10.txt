class Solution {
public:
    int getSum(int n)
    {
        int sum = 0;
        while (n != 0) {
            sum = sum + n % 10;
            n = n / 10;
        }
        return sum;
    }
    int maximumSum(vector<int>& nums) {
        unordered_map<int, vector<int>> mp; 
        
        for (auto num: nums) {
            int s= getSum(num); 
            mp[s].push_back(num); 
        }
        int mx=0; 
        vector<int> values; 
        int ans=-1; 
        for (auto m: mp) {
            // cout<<m.first<<" : ";
            // for (auto v: m.second) cout<<v<<" "; 
            // cout<<endl;
            
            if (m.second.size() > 1) {
                values= m.second; 
                sort(values.rbegin(), values.rend());
                ans= max(ans, values[0]+ values[1]); 
            }
        }
        
        return ans;
        
    }
};