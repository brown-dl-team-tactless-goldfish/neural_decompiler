class Solution {
public:
    unordered_map<int, TreeNode*> parent;
    vector<TreeNode*> nodes;
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        if(!root -> left && !root -> right) return root;
        vector<int> count(1001);
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int sz = q.size();
            nodes = {};
            for(int i = 0; i < sz; i++){
                root = q.front();
                q.pop();
                if(root -> left){
                    parent[root -> left -> val] = root;
                    q.push(root -> left);
                }
                if(root -> right){
                    parent[root -> right -> val] = root;
                    q.push(root -> right);
                }
                nodes.push_back(root);
            }
        }
        for(auto& n: nodes)
            q.push(n);
        while(!q.empty()){
            int sz = q.size();
            for(int i = 0; i < sz; i++){
                root = q.front();
                q.pop();
                count[root -> val]++;
                if(count[root -> val] == nodes.size())
                    return root;
                q.push(parent[root -> val]);
            }
        }
        return NULL;
    }
};