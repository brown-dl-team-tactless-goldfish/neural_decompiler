bool possibleBipartition(int n, vector<vector<int>>& A) {
        vector<vector<int>>g(n+1);
        vector<int>colors(n+1, 0);
        for(auto c : A) {
            g[c[0]].push_back(c[1]);
            g[c[1]].push_back(c[0]);
        }
        queue<int>q;
        for(int i=1;i<=n;i++) {
            if(colors[i]) continue;
            colors[i] = 1;
            q.push(i);
            while(!q.empty()) {
                int u = q.front(); q.pop();
                for(auto c : g[u]) {
                    if(!colors[c]) {
                        colors[c] = -colors[u]; //revert the color of neighbour
                        q.push(c);
                    }
                    else if(colors[c] == colors[u]) //if found a neighbour with same color then return false
                        return false;
                }
            }
        }
        return true;
    }