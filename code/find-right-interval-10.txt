    public int[] FindRightInterval(int[][] intervals) {
        var starts = intervals.Select(Start).OrderBy(p => p).ToArray();
        var map = intervals.Select((p, i)=>(start: Start(p), i)).ToDictionary(p => p.start, p => p.i);
        return intervals.Select(End).Select(FindNearestStart).ToArray();

        int FindNearestStart(int end) {
            var index = Array.BinarySearch(starts, end);
            if (index < 0) index = ~index;
            return index < starts.Length
                ? map[starts[index]]
                : -1;
        }
    }

    private static int Start(int[] pair) => pair[0];
    private static int End(int[] pair) => pair[1];