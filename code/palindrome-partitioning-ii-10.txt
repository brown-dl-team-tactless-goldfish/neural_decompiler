class Solution {
public:
    int minCut(string const& s) {
        using Partition = vector<pair<int, int>>;
        if (s.empty()) return 0;
		
        class Partitioner {
            public:
                Partitioner(string const& s) : s_(s), sz_(s.size()), palindromes_(findParlindromeSubstrings(s)), mem_(sz_) {
                    // mem_[i]: minimum number of splits needed to divide substring
                    // beginning at i into palindromes
                    mem_[sz_ - 1] = 0;
                    for (int i = sz_ - 2; i >= 0; --i) {
                        // minimum number of splits cannot possibly be equal to (sz - i)
                        mem_[i] = sz_ - i;
                        for (auto iter = palindromes_[i].crbegin(); palindromes_[i].crend() != iter; ++iter) {
                            auto const j = *iter;
                            if (j + 1 == sz_) {
							    // entire substring beginning at i is a palindrome
                                mem_[i] = 0;
                                break;
                            }
                            // try splitting after s[j]
                            mem_[i] = min(mem_[i], 1 + mem_[j + 1]);
                        }
                    }
                }
                auto minCut() const {
                    return mem_[0];
                }
            private:
                static vector<vector<int>> findParlindromeSubstrings(string const& s) {
                    auto const sz = s.size();
                    vector<vector<int>> res(sz);
                    for (auto& p : res) p.reserve(sz);
                    for (int c = 0; c <= 2 * (sz - 1); ++c)
                        // find all palindrome substrings s[i,..., j] such that i + j == c (i.e., s[i, ..., j] is "centered" at c/2)
                        for (int i = c / 2, j = c - i; i >= 0
                            && j < sz && s[i] == s[j]; --i, ++j)
                            res[i].push_back(j);
                    return res;
                }
                string const& s_;
                int const sz_;
                vector<vector<int>> const palindromes_;
                vector<int> mem_;
        };
		
        Partitioner const p(s);
        return p.minCut();
    }
};