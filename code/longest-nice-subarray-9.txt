class Solution {
public:
    int longestNiceSubarray(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> bitPrefixSum(n + 1, vector<int> (31));
        for (int i = n - 1; i >= 0; i--) {
            for (int bit = 0; bit < 31; bit++) {
                if (nums[i] & (1 << bit)) {
                    bitPrefixSum[i][bit] = bitPrefixSum[i + 1][bit] + 1;
                } else {
                    bitPrefixSum[i][bit] = bitPrefixSum[i + 1][bit];
                }
            }
        }
        int sol = 1;
        for (int i = 0; i < n; i++) {
            int j = min(n - 1, i + 31);
            for (int bit = 0; bit < 31; bit++) {
                while (bitPrefixSum[i][bit] - bitPrefixSum[j + 1][bit] > 1) {
                    --j; 
                }
            }
            sol = max(sol, j - i + 1);
        }
        return sol;
    }
};