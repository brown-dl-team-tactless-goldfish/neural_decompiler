/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* reverseEvenLengthGroups(struct ListNode* head)
{
    if(head->next == NULL || head->next->next == NULL)
    {
        return head;
    }
    
    int k = 1;
    int cur_k = k;
    
    struct ListNode * prev = NULL;
    struct ListNode * trav = head;
    int no_of_nodes = 0;
    
    int current_count = 0;
    
    while(trav)
    {
        no_of_nodes++;
        trav =trav->next;
    }
    
    trav = head;
    
    while(trav)
    {
        if(current_count + k > no_of_nodes)
        {
            k = no_of_nodes - current_count;
            cur_k = k;
        }   
        
        if(k%2 != 0)    //Odd
        {
            while(trav && cur_k > 0)
            {
                prev = trav;
                trav = trav->next;
                cur_k--;
            }
            
            if(cur_k == 0)
            {
                current_count += k;
                k += 1;
                cur_k = k;
            }
        }
        else    //Even
        {
            struct ListNode * hold = NULL;
            struct ListNode * first = NULL;
            struct ListNode * end = trav->next;
            
            while(trav && cur_k > 0)
            {
                trav->next = first;
                first = trav;
                if(hold == NULL)
                {
                    hold = first;
                }
                trav = end;
                
                if(end)
                    end = end->next;
                
                cur_k--;
            }
            prev->next = first;
            hold->next = trav;
            prev = hold;
            
            if(cur_k == 0)
            {
                current_count += k;
                k += 1;
                cur_k = k;
            }
        }
        
    }

    return head;
}