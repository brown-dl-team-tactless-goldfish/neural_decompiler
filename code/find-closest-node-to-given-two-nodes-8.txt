   visited[node] = true;
   
   dist[node] = distance;
    
  dfs(edges,visited,dist,edges[node],distance+1);
    
  return;
    
    
}
int closestMeetingNode(vector<int>& edges, int node1, int node2) {
    
    int n = edges.size();
    
    vector <int> dist1(n, -1);
    
    vector<int> dist2(n, -1);
    
    vector <bool> visited(n, false);
    
    dfs(edges, visited, dist1, node1, 0);
    
    
    visited.assign(n,false);
    
    dfs(edges, visited, dist2, node2, 0);
    
    int ans = -1, cost = n;
    
    for(int i = 0; i < n; i++)
    {
        if(dist1[i] != -1 && dist2[i] != -1)
        {
            if( max(dist1[i], dist2[i]) < cost)
            {
                cost = max(dist1[i], dist2[i]);
            
                ans = i;
            }
        }
        
    }
    return ans;
}