class Solution {
public:
    vector<vector<pair<int, int>>> BuildGraph(int n, vector<vector<int>>& flights) {
        vector<vector<pair<int, int>>> g(n);
        for (auto &vec : flights) {
            g[vec[0]].push_back(make_pair(vec[1], vec[2]));
        }
        return g;
    }
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        auto g = BuildGraph(n, flights);
        queue<pair<int, int>> q; //First integer is the destination node, the second integer is the cost from src
        int min_dist = numeric_limits<int>::max();
        q.push(make_pair(src, 0));
        for (int j = 0; j <= K; ++j) {
            int n = q.size();
            for (int k = 0; k < n; ++k) {
                auto p = q.front();
                q.pop();
                if (p.second >= min_dist)
                    continue;
                for (auto c : g[p.first]) {
                    int new_dist = p.second + c.second;
                    if (c.first == dst && new_dist < min_dist)
                        min_dist = new_dist;
                    if (min_dist <= new_dist)
                        continue;
                    q.push(make_pair(c.first, new_dist));
                }
            }
        }
        if (min_dist == numeric_limits<int>::max())
            return -1;
        return min_dist;
    }
};