class Solution {
    typedef struct {
        int r, c, d;
    } cell_t;
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        pair<int, int> dirs[8] = {{0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {0, 1}, {-1, 1}};
        deque<cell_t> dq{{-1, -1, 0}};
        while(!dq.empty()) {
            auto [r, c, d] = dq.front();
            dq.pop_front();
            if(r == m - 1 && c == n - 1)
                return d;
            for (auto &dir : dirs) {
                auto [i, j] = dir;
                i += r, j += c;
                if (i >= 0 && i < m && j >= 0 && j < n && !grid[i][j]){
                    grid[i][j] = 1;
                    dq.emplace_back((cell_t){i, j, d + 1});
                }
            }
        }
        return -1;
    }
};