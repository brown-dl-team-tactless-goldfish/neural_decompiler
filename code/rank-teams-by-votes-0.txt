int cmp(const void* a, const void* b){
    int *A = *(int**)a ;
    int *B = *(int**)b ;
    int n = A[0] ;
    int idx = 1 ;
    while(idx <= n){
        if(A[idx] != B[idx])
            return B[idx] - A[idx] ;
        idx++;
    }
    return A[n+1] - B[n+1] ;
}
char * rankTeams(char ** votes, int votesSize){
    int n = strlen( votes[0] ) ;
    int** alpha = malloc(26 * sizeof(int*) ) ;
    //index=0 : num  ;  index= n+1 : alpha sequence
    for(int i = 0 ; i < 26; i++){
        alpha[i] = calloc( (n+2) , sizeof(int) ) ;
        alpha[i][0] = n ;
        alpha[i][n+1] = i ;
    }
    for(int i = 0 ; i < votesSize ; i++){
        for(int j = 0 ; j < n; j++){
            alpha[votes[i][j] -'A'][j+1]++ ;
        }
    }
    qsort(alpha, 26, sizeof(int*), cmp) ;
    char* ans = malloc(n + 1) ;
    ans[n] = '\0' ;
    for(int i = 0; i < n; i++){
        ans[i] = alpha[i][n+1] + 'A' ;
    }
    return ans ;
}