typedef long long ll;
class Solution {
public:
    
    ll ans = LLONG_MAX;
    
    ll getWS(vector<int>& P, vector<int>& B, vector<ll> &sums) {
        int p = P.size(), b = B.size();
        int i = 0, j = 0;
        ll ws = 0;
        while (i < p && j < b) {
            auto ub = upper_bound(P.begin()+i, P.end(), B[j]);
            int newI = ub - 1 - P.begin();
            if (newI >= i) {
                ll temp = sums[newI];
                ll count = newI - i + 1;
                if (i != 0) {
                    temp -= sums[i-1];
                }

                ws += count * B[j] - temp;
                i = newI+1;
            }
            j++;
        }
        if (i < p)
            return -1;
        return ws;
    }
    
    int minWastedSpace(vector<int>& P, vector<vector<int>>& B) {
        int pn = P.size(), bn = B.size();
        vector<ll> sums(pn, 0);
        sums[0] = P[0];
        for (int i=1; i<pn; i++)
            sums[i] = P[i] + sums[i-1];
        sort(P.begin(), P.end());
        for (int i=0; i<bn; i++) {
            sort(B[i].begin(), B[i].end());
            ll ws = getWS(P, B[i], sums);
            ans = ws == -1 ? ans : min(ans, ws);
        }

        return ans == LLONG_MAX ? -1 : ans%(long long)(pow(10, 9)+7); 
    }
};