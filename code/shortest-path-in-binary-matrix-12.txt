class Solution {
public:
    vector<vector<int>> directions = {{0,1}, {1,0},{1,1},{-1,-1},{-1,0},{0,-1},{-1,1},{1,-1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if (grid[0][0] != 0 || grid[n - 1][n - 1] != 0) {
            return -1;
        }
        queue<vector<int>> q;
        set<pair<int,int>> visited;
        q.push({0,0,1});
        visited.insert({0,0});
        while(!q.empty())  {
            auto vec = q.front(); q.pop();
            int r = vec[0], c = vec[1], dist = vec[2];
            if(r==n-1 && c==n-1)
                return dist;
            if(grid[r][c]==1) continue;
            for(auto d:directions) {
                int x = r+d[0];
                int y = c+d[1];
                if(x >= 0 && x < n && y >= 0 && y < n && !grid[x][y] && !visited.count({x,y})) {
                    q.push({x,y,dist+1});
                    visited.insert({x,y});
                }
            }
            
        }
        return -1;
    }
};