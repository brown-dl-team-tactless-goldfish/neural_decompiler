struct parray {
    int* arr;
    int size;
    int capacity;
    bool shouldCompare;
    bool areSim;
    int size2;
};
void buildSim(struct TreeNode* root, struct parray* arr) {
    if(!root) return;
    
    struct TreeNode* l = root->left;
    struct TreeNode* r = root->right;
    if(!l && !r) {
        if(!arr->shouldCompare) {
            if(arr->size == arr->capacity) {
                arr->capacity += 8;
                arr->arr = realloc(arr->arr, sizeof *arr->arr * arr->capacity);
            } arr->arr[arr->size] = root->val;
            ++arr->size;
        } else {
            if(arr->size2 == arr->size || arr->arr[arr->size2] != root->val) {
                arr->areSim = false;
                return;
            } ++arr->size2;
        }
    }
    buildSim(root->left, arr);
    buildSim(root->right, arr);
}
bool leafSimilar(struct TreeNode* root1, struct TreeNode* root2) {
    int capacity = 8;
    struct parray arr = {
        .arr = malloc(sizeof *(arr.arr) * capacity),
        .size = 0,
        .capacity = capacity,
        .shouldCompare = false,
        .areSim = true,
        .size2 = 0
    };
    buildSim(root1, &arr);
    arr.shouldCompare = true;
    buildSim(root2, &arr);
    free(arr.arr);
    return arr.areSim && arr.size == arr.size2;
}