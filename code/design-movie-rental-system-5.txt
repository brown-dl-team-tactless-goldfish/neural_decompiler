class MovieRentingSystem {
private:
    typedef long long ll;
    ll big = 300001;
    
    // {movie, {price * big + shop}}. For each movie, keeps the prices and shop that has this movie available for rent.
    unordered_map<ll, set<ll>> mp;
        
    // {price * big * big + shop * big + movie}. To keep track of the rented movies. 
    set<ll> rented;
    
    // {shop * big + movie, price}. This is just used to lookup prices given movie and shop.
    unordered_map<ll, ll> prices;

public:
    
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        mp.clear();
        for(auto v : entries) {
            ll shop = v[0], movie = v[1], price = v[2];
            mp[movie].insert(price * big + shop);
            prices[shop * big + movie] = price;
        }
    }
    
    vector<int> search(int movie) {
        vector<int> ans;
        for(auto k : mp[movie]) {
            ans.push_back(k % big);
            if(ans.size() >= 5) return ans;
        }
        return ans;

    }
    
    void rent(int shop, int movie) {
        ll price = prices[shop * big + movie];
        rented.insert(big * big * price + big * shop + movie);
        mp[movie].erase(price * big + shop);
    }
    
    void drop(int shop, int movie) {
        ll price = prices[shop * big + movie];
        rented.erase(big * big * price + big * shop + movie);
        mp[movie].insert(price * big + shop);
    }
    
    vector<vector<int>> report() {
        vector<vector<int> > ans;
        for(ll a: rented) {
            ll price = a / (big * big);
            ll movie = a % big;
            ll shop = (a - price * big * big) / big;
            ans.push_back({(int) shop, (int) movie});
            if(ans.size() >= 5) return ans;
        }
        return ans;
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */