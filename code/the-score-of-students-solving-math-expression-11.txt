    var rightAnswer = GetValidAnswer(s);
    var mem=new Dictionary<string,HashSet<int>>();
    var almostRightAnswers= GetAlmostValidAnswers(s,mem);
    //hash.Remove(rightAnswer);// Removing right answer from set
    almostRightAnswers.Remove(rightAnswer);
    var result=0;
   
    foreach(var a in answers){
        if (almostRightAnswers.Contains(a)){
            result+=2;
        }else if (a==rightAnswer){
            result+=5;
        }
    }
    return result;
}

HashSet<int> GetAlmostValidAnswers(string s,Dictionary<string,HashSet<int>> m){
    var set=new HashSet<int>();
    if (m.ContainsKey(s)){
        return m[s];
    }
    
    // Break Out condition
    if (string.IsNullOrEmpty(s)){
        return set;
    }
    if (s.Length==1){
        set.Add(Convert.ToInt32(s));
        return set;
    }
    
    for(var i=0;i<s.Length;i++){
        if (s[i]=='+' || s[i]=='*'){
            // split
            var left=s.Substring(0,i);
            var right=s.Substring(i+1);
            var leftResults=GetAlmostValidAnswers(left,m);
            var rightResults=GetAlmostValidAnswers(right,m);
            // Need to calculate left and right operands as per Operator 
            foreach(var l in leftResults){
                foreach (var r in rightResults){
                    if (s[i]=='+' ){
                        var res=l+r;
                        if (res<=1000){
                            set.Add(res);
                        }
                    }else{
                        var res=l*r;
                        if (res<=1000){
                            set.Add(res);
                        }
                    }
                }
            }
            
        }
    }
    // At the end we will either get a valid number or list will be empty
    // if no operator in equation
    m[s]=set;
    return set;
}



int GetValidAnswer(string s){
    var sign='+';
    var cur=0;
    var stack = new Stack<int>();
    foreach ( var c in s ){
        if (IsDigit(c)){
           cur=cur*10+c-'0';// all operands are in range 0-9 , no need to iterate further 
           
           if (sign=='*'){
               stack.Push(stack.Pop()*cur);
           }else{
               stack.Push(cur);
           }
           cur=0;
        }else {
            if (c=='+'){
                sign='+';
            }else if (c=='*'){
                sign='*';
            }
        }
    }

    return stack.Sum(i=>i);
}

bool IsDigit(char c){
    return c>='0' && c<='9';
}