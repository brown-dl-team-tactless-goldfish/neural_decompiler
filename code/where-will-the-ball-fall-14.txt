class Solution {
public:
    int m,n;
    vector<int> ans;
    
    vector<int> findBall(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        ans.assign(n, -1);
        
        for(int i=0; i<n; i++)
        {
            dfs(true, 0, i, i, grid);
        }
        
        return ans;
    }
    
    void dfs(bool top, int r, int c, int init, vector<vector<int>>& grid)
    {   
		// finish
        if(r == m)
        {
            ans[init] = c;
            return;
        }
        
		// stuck against wall
        if(c < 0 || c == n)
        {
            return;
        }
        
        int nr = r, nc = c;
		
		// the ball is on top part of the cell - it's moving horizontally
        if(top)
        {
            nc = c + grid[r][c];   
			// get stuck
            if(nc >= 0 && nc < n && grid[nr][nc] != grid[r][c]) 
            {
                return;
            }
        }
		// otherwise it's droping down
        else
        {
            nr = r + 1;
        }
        
        dfs(!top, nr, nc, init, grid);        
    }
};