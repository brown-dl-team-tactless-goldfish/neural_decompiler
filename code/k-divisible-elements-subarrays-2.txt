public class Solution {
    private HashSet<string> set = new HashSet<string>();
    
    public int CountDistinct(int[] nums, int k, int p) {        
        for (int i = 0; i < nums.Length; i++)
        {
            DFS(nums, k, p, i, 0, new StringBuilder());
        }
        
        return set.Count;
    }
    
    private void DFS(int[] n, int k, int p, int i, int cnt, StringBuilder sb)
    {
        if (i < n.Length)
        {
            if (n[i] % p == 0 && cnt >= k)
            {
                return;
            }
            
            sb.Append(n[i].ToString() + "-");
            
            if (!set.Contains(sb.ToString()))
            {
                set.Add(sb.ToString());
            }
            
            DFS(n, k, p, i + 1, n[i] % p == 0 ? cnt + 1 : cnt, sb);
            
            sb.Remove(sb.Length - n[i].ToString().Length - 1, n[i].ToString().Length + 1);
        }
    }
}