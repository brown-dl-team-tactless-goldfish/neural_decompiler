 long long solve(long long st, long long end, vector<long long>&pre, vector<long long>&pre2)
 {
     long long len = end-st+1;
     long long x = 0;
     if(end>=0)
         x+=pre2[end];
     
     if(st>0)
     {
        x-=pre2[st-1];
        x-=(len)*(pre[st-1]*(1LL));
     }
     return x;
 }

long long solve2(int st, int end, vector<long long>&pre3, vector<long long>&pre4)
 {
     long long len = end-st+1;
     long long x = 0;
     if(st>=0)
         x+=pre4[st];
     
     long long cal = pre3.size()-1;

     if(end<cal)
     {
        x-=pre4[end+1];
        x-=(len)*(pre3[end+1]*(1LL));
     }
     return x;
 }
int totalStrength(vector<int>& nums) {
    
    int n = nums.size();
    vector<int> nsl(n),nsr(n);
    
    stack<int> stl,str;
    stl.push(0);
    nsl[0]=-1;
    
    for(int i=1; i<n; i++) 
    {
        
        while((!stl.empty()) && nums[stl.top()]>nums[i])
            stl.pop();
        
        if(stl.empty())
            nsl[i]=-1;
        else
            nsl[i]=stl.top();
        
        stl.push(i);
    }
    
    str.push(n-1);
    nsr[n-1]=n;
    for(int i=n-2; i>=0; i--)
    {
        while((!str.empty()) && nums[str.top()]>=nums[i])    
            str.pop();
        
        if(str.empty())
            nsr[i]=n;
        else
            nsr[i]=str.top();
        
        str.push(i);
    }
    
    vector<long long> pre(n,0),pre2(n,0),pre3(n,0),pre4(n,0);
    pre[0]=nums[0];
    pre2[0]=nums[0];
    pre3[n-1] = nums[n-1];
    pre4[n-1] = nums[n-1];
    
    for(int i=1; i<n; i++)
        pre[i] = pre[i-1]+nums[i];
    
    for(int i=1; i<n; i++)
        pre2[i] = pre2[i-1]+pre[i];
    
    for(int i=n-2; i>=0; i--)
        pre3[i] = pre3[i+1]+nums[i];
    
    for(int i=n-2; i>=0; i--)
        pre4[i] = pre4[i+1] +pre3[i];

    
    long long out=0;
    
    for(int i=0; i<n; i++)
    {
        long long st = nsl[i]+1, end = nsr[i]-1;
        long long lenr = end-i+1, lenl = i-st+1;
         
        long long val1 = solve(i,end,pre,pre2);
        long long val2 = solve2(st,i-1,pre3,pre4);
        
        val1%=mod;
        val2%=mod;
        
        long long res= (val1*(1LL))*(lenl*(1LL)) + (val2*(1LL))*(lenr*(1LL));
        res%=(mod);
        
        res*=(nums[i])*(1LL);
        res%=(mod);

        out+=res;
        out%=(mod);
    }
    return out;
}