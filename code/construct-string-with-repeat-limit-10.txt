class Solution {
public:
    
    string repeatLimitedString(string s, int repeatLimit) {
        int n = s.size();
        multiset<char> st;
        for (char c : s) st.insert(c);
        int cnt = 1;
        string sol;
        sol.push_back(*prev(st.end()));
        st.erase(prev(st.end()));
        while (!st.empty()) {
            if (repeatLimit != 1) {
                char c = *prev(st.end());
                if (sol.back() == c) {
                    ++cnt;
                    sol.push_back(c);
                    st.erase(prev(st.end()));
                }
                else {
                    sol.push_back(*prev(st.end()));
                    st.erase(prev(st.end()));
                    cnt = 1;
                }
                if (cnt == repeatLimit) {
                    char d = sol.back();
                    auto it = st.lower_bound(d);
                    if (it == st.begin()) break;
                    it = prev(it);
                    sol.push_back(*it);
                    st.erase(it);
                    cnt = 1;
                }
            }
            else {
                char c = sol.back();
                if (*prev(st.end()) == c) {
                    auto it = st.lower_bound(c);
                    if (it == st.begin()) break;
                    it = prev(it);
                    sol.push_back(*it);
                    st.erase(it);
                }
                else {
                    sol.push_back(*prev(st.end()));
                    st.erase(prev(st.end()));
                }
            }
        }
        return sol;
    }
};