class Solution {
    
    int split(string &s, int k, int lim){
        //can i split string s into k parts?
        int cur = s.size();
        for(int part = 1; part<=k; part++){
            int len = to_string(part).size() + to_string(k).size() + 3;
            if(len>lim || cur==0)return -1; //need to decrease k
            int extra = lim-len;
            if(part!=k && cur<extra)return -1;
            cur-=min(cur, extra);
        }
        if(cur==0)return 0; //perfect match
        return 1; //need to increase k
    }
    vector<string>build(string &s, int k, int lim){
        int cur = s.size();
        vector<string>ans;
        int i=0;
        for(int part = 1; part<=k; part++){
            int len = to_string(part).size() + to_string(k).size() + 3;
            int extra = lim-len;
            int take = min(cur, extra);
            cur-=take;
            ans.push_back(s.substr(i, take)+"<"+to_string(part)+"/"+to_string(k)+">");
            i+=take;
        }
        return ans;
    }
    
public:
    vector<string> splitMessage(string s, int limit) {
        int l=1, r=s.size();
        int amin = INT_MAX;
        while(l<=r){
            int mid = (l+r)>>1;
            int sp = split(s, mid, limit);
            if(sp==0){
                amin = min(amin, mid);
                r=mid-1;
            }
            else if(sp==-1)
                r=mid-1;
            else
                l=mid+1;
        }
        if(amin!=INT_MAX)
            return build(s, amin, limit);
        return {};
    }
};