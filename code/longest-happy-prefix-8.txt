class Solution {
public:
    string longestPrefix(string s) {
        vector<int> index;        
        StringHash prefix, suffix;
        for(int i=0;i<s.size()-1;i++){
            int j = s.size()-1-i;
            prefix.push_back(s[i]);
            suffix.push_front(s[j]);
            if(prefix.hash() == suffix.hash())
                index.push_back(i);
        }
        
        //verify 
        for(auto it=index.rbegin(); it!=index.rend();it++){
            int i = *it, j = s.size()-1-i;
            if(s.substr(0, i+1) == s.substr(j)) return s.substr(0, i+1);
        }
        
        return "";
    }
    
    struct StringHash{        
        long long hash() const{return val; }     
        void push_back(char c){
            val += (c-'a') * pn; val %= mod;
            addChar();
        }
        void push_front(char c){
            val = (c-'a') + val*p; val%= mod;
            addChar();
        }
        
    private:
        void addChar() { pn *= p; pn %= mod; }        
        
        static constexpr int p = 31;
        static constexpr long long mod = 1e9+7;
        long long pn=1;
        long long val=0;
    };
};