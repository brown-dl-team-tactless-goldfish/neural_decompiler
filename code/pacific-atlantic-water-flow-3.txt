void dfs(vector<vector<int>> &matrix , int i , int j , int prev, vector<vector<int>>& ocean){
    if(i<0 || j<0 || i>=matrix.size() || j>=matrix[0].size()){
        return;
    }
    if(ocean[i][j]==1){
        return;
    }
    if(matrix[i][j] <prev){
        return;
    }
    ocean[i][j]=1;
    dfs(matrix,i+1,j,matrix[i][j],ocean);
    dfs(matrix,i-1,j,matrix[i][j],ocean);
    dfs(matrix,i,j+1,matrix[i][j],ocean);
    dfs(matrix,i,j-1,matrix[i][j],ocean);
    
}

vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
    vector<vector<int>> ans;
    int n=heights.size();
    if(n<1) return ans;
    int m=heights[0].size();
    vector<vector<int>> pacific(n,vector<int>(m,0));
    vector<vector<int>> atlantic(n,vector<int>(m,0));
    
    for(int i=0;i<m;i++){
        dfs(heights,0,i,INT_MIN,pacific);
        dfs(heights,n-1,i,INT_MIN,atlantic);
    }
    for(int j=0;j<n;j++){
        dfs(heights,j,0,INT_MIN,pacific);
        dfs(heights,j,m-1,INT_MIN,atlantic);
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(pacific[i][j]==1 && atlantic[i][j]==1){                    
                vector<int> vt(2);
                vt[0]=i;
                vt[1]=j;
                ans.push_back(vt);
            }                
        }
       
        
    }
    return ans;
}