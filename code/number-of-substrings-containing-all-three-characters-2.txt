class Solution {
public:
    int numberOfSubstrings(string &s) {
        int n = s.size(), ans = 0;
        unordered_map <char, int> m;
        unordered_map <char, vector<int>> pre;
        vector <int> temp(n, 0);
        pre['a'] = pre['b'] = pre['c'] = temp;
        pre[s[0]][0]++;
        for(int i = 1; i < n; i++) {
            for(char ch = 'a'; ch <= 'c'; ch++) {
                if(s[i] == ch) pre[ch][i] = pre[ch][i - 1] + 1;
                else pre[ch][i] = pre[ch][i - 1];
            }
        }
        for(int i = 0; i < n; i++) {
            m[s[i]]++;
            int x = -1, y = -1;
            for(char c = 'a'; c <= 'c'; c++) {
                if(s[i] == c) continue;
                if(x == -1) x = lower_bound(pre[c].begin() + i, pre[c].end(), m[c] + 1) - pre[c].begin();
                else y = lower_bound(pre[c].begin() + i, pre[c].end(), m[c] + 1) - pre[c].begin(); 
            }
            if(x == n || y == n) continue;
            ans += n - max(x, y);
        }
        return ans;
    }
};