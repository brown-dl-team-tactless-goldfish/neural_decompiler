class Solution {
public:
    int maximumSum(vector<int>& arr) {
        int n = arr.size();
        vector<int> fwd(n) , bckd(n);
        //apply kadane's algorithm in both the directions
        //1. forward direction
        fwd[0] = arr[0];
        int gmax = arr[0] , lmax = arr[0];
        for(int i=1;i<n;i++) {
            lmax = max(arr[i],arr[i]+lmax);
            gmax = max(gmax,lmax);
            fwd[i] = lmax;
        }
        //2.backward direction
        bckd[n-1] = arr[n-1];
        gmax = arr[n-1] , lmax = arr[n-1];
        for(int i=n-2;i>=0;i--) {
            lmax = max(arr[i],lmax+arr[i]);
            gmax = max(gmax,lmax);
            bckd[i] = lmax;
        }
        int maxSum = gmax; 
       
        for(int i=1;i<n-1;i++) {
            maxSum = max(maxSum, max(0,bckd[i+1]) + max(0,fwd[i-1]));
        }
         if(maxSum<=0) //meaning there are no positive elements in arr
            return *max_element(arr.begin(),arr.end());
        return maxSum;
    }
};