class Solution {
public:
    long long maxProduct(string s) {
    
     int n=s.length();
       
      vector<int> d1(n);
       for (int i = 0, l = 0, r = -1; i < n; i++) {
        int k = (i > r) ? 1 : min(d1[l + r - i], r - i + 1);
        while (0 <= i - k && i + k < n && s[i - k] == s[i + k]) {
            k++;
        }
        d1[i] = k--;
        if (i + k > r) {
            l = i - k;
            r = i + k;
        }
           
           
    }

       
        vector<int>right(n,0);
        vector<int>left(n,0);
       
        for(int i=n-1;i>=0;i--){
            right[i-d1[i]+1]=max(2*d1[i]-1,right[i-d1[i]+1]);
        }
        for(int i=0;i<n;i++){
            left[i+d1[i]-1]=max(2*d1[i]-1,left[i+d1[i]-1]);
        }
        for(int i=1;i<n;i++){
            left[i]=max(left[i],left[i-1]);
        }
        for(int i=n-2;i>=0;i--){
            right[i]=max(right[i],right[i+1]);
        }
        int i=0;
       long long  int ans=0;
        while(i<n){
            
            long long int x=d1[i];
            while(x){
                if(i-x>=0){
                ans=max(ans,left[i-x]*1ll*(2*1ll*x-1ll));
                }
                if(i+x<n){
                ans=max(ans,right[i+x]*1ll*(2*1ll*x-1ll));
                }
                x--;
            }
            i+=d1[i];
        }
        return ans;
        
        
        
        
    }
};
