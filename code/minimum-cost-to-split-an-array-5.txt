class Solution {
public:
    int dfs(int cur, vector<int>& nums, int k,
            vector<int>& dp) {
        if (cur >= nums.size()) return 0;
        if (dp[cur] != -1) return dp[cur];
        vector<int> hmap(1001, 0);
        vector<int> hset(1001, 0);
        int res = INT_MAX;
        int sz = 0;
        for (int i = cur; i < nums.size(); i++) {
            hmap[nums[i]]++;
            if (hmap[nums[i]] >= 2) {
                sz -= hset[nums[i]] > 0 ? (hmap[nums[i]] - 1) : 0;
                sz += hmap[nums[i]];
                hset[nums[i]]++;
            }
            int cost = dfs(i + 1, nums, k, dp);
            if (cost != INT_MAX)
                res = min(res, cost + sz);
        }
        return dp[cur] = res + k;
    }
    int minCost(vector<int>& nums, int k) {
        vector<int> dp(nums.size() + 1, -1);
        return dfs(0, nums, k, dp);
    }
};