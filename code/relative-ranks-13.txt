

/**
 * Note: The returned array must be malloced, assume caller calls free().
 Input: score = [10,3,8,9,4]
Output: ["Gold Medal","5","Bronze Medal","Silver Medal","4"]
Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].
 */

typedef struct {
    int idx;
    int val;
}data;

int cmp(const void *a, const void *b){
    return (*(data**)b)->val - (*(data**)a)->val;
}

char* to_string(int input){
    int end;
    char *str;
    if(input < 10){
        str = calloc(2, sizeof(char));
        end = 1;
    } else if(input < 100){
        str = calloc(3, sizeof(char));
        end = 2;
    }else if(input < 1000){
        str = calloc(4, sizeof(char));
        end = 3;
    }else if(input < 10000){
        str = calloc(5, sizeof(char));
        end = 4;
    }else if(input < 100000){
        str = calloc(6, sizeof(char));
        end = 5;
    }
    str[end] = '\0';
    for(int i = end -1 ; i >= 0; i--){
        str[i] = (input % 10) + '0';
        input = input / 10;
    }
    return str;
}
char ** findRelativeRanks(int* score, int scoreSize, int* returnSize){
    data **array = calloc(scoreSize, sizeof(data*));
    char **ans = calloc(scoreSize, sizeof(char*));
    *returnSize = scoreSize;

    for(int i = 0; i<scoreSize; i++){
        array[i] = calloc(1, sizeof(data));
        array[i] -> idx = i;
        array[i] -> val = score[i];
    }
    qsort(array, scoreSize, sizeof(data*), cmp);
    ans[array[0]->idx] = "Gold Medal\0";
    if (scoreSize == 1){
        return ans;
    }
    ans[array[1]->idx] = "Silver Medal\0";
    if (scoreSize == 2){
        return ans;
    }
    ans[array[2]->idx] = "Bronze Medal\0";
    if (scoreSize == 3){
        return ans;
    }
    int price = 4;
    char *str = calloc(6, sizeof(char));
    for(int i = 3; i<scoreSize; i++){
        ans[array[i]->idx] = to_string(price);
        price++;
    }
    return ans;
}