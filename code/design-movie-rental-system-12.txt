class MovieRentingSystem {
public://5,1
    unordered_map<int, unordered_map<int, int>> mp;
    unordered_map<int, unordered_map<int, int>> mpRef;
    map<pair<int,int>, int> rentedMovies;
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
          for(auto it: entries){
              mp[it[0]][it[1]] = it[2];
              mpRef[it[0]][it[1]] = it[2];
          }
    }
    
    vector<int> search(int movie) {
        priority_queue<pair<int, int>> maxH;
        
        for(auto it: mp){
            int shop = it.first;
            auto movies = it.second;
            if(movies[movie]){
                int price = movies[movie];
                maxH.push({price, shop});
                if(maxH.size() > 5){
                    maxH.pop();
                }
            }
        }
        
        stack<pair<int,int>> st;
        while(!maxH.empty()){
            if(st.size() == 0){
                st.push(maxH.top());
                maxH.pop();
            }else{
                if(st.top().first == maxH.top().first){
                    pair<int,int> pr = st.top();
                    st.pop();
                    if(maxH.top().second > pr.second){
                        st.push(maxH.top());
                        st.push(pr);
                        maxH.pop();
                    }else{
                        st.push(pr);
                        st.push(maxH.top());
                        maxH.pop();
                    }
                }else{
                    st.push(maxH.top());
                    maxH.pop();
                }
            }
        }
        
        vector<int> ans;
        while(st.empty() == false){
            pair<int,int> pr = st.top();
            st.pop();
            ans.push_back(pr.second);
        }
        return ans;
    }
    
    void rent(int shop, int movie) {
        rentedMovies[{shop,movie}] = mp[shop][movie];
        mp[shop][movie] = 0;
    }
    
    void drop(int shop, int movie) {
        rentedMovies[{shop,movie}] = 0;
        mp[shop][movie] = mpRef[shop][movie];
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> ans;
        priority_queue<pair<int, pair<int,int>>> maxH;
        for(auto it: rentedMovies){
            if(it.second == 0) continue;
            maxH.push({it.second,{it.first.first, it.first.second}});
            if(maxH.size() > 5){
                maxH.pop();
            }
        }
        stack<pair<int,pair<int,int>>> st;
        while(!maxH.empty()){
            if(st.size() == 0){
                st.push(maxH.top());
                maxH.pop();
            }else{
                if(st.top().first == maxH.top().first){
                    pair<int,pair<int,int>> pr = st.top();
                    st.pop();
                    if(maxH.top().second.second > pr.second.second){
                        st.push(maxH.top());
                        st.push(pr);
                        maxH.pop();
                    }else{
                        st.push(pr);
                        st.push(maxH.top());
                        maxH.pop();
                    }
                }else{
                    st.push(maxH.top());
                    maxH.pop();
                }
            }
        }
        while(!st.empty()){
            pair<int,pair<int,int>> pr = st.top();
            st.pop();
            vector<int> v;
            v.push_back(pr.second.first);
            v.push_back(pr.second.second);
            ans.push_back(v);
        }
        return ans;
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */