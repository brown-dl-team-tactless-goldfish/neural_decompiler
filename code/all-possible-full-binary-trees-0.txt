struct TreeNode** allPossibleFBT(int n, int* returnSize){
    if(n % 2 == 0){
        * returnSize = 0;
        return NULL;
    }
    if(n == 1){
        struct TreeNode* root = malloc(sizeof(struct TreeNode));
        root->val = 0;
        root->left = NULL;
        root->right = NULL;
        
        struct TreeNode** ans = malloc(sizeof(struct TreeNode*));
        * returnSize = 1;
        ans[0] = root;
        return ans;
    }
    
    if(n == 3){
        struct TreeNode* root = malloc(sizeof(struct TreeNode));
        struct TreeNode* Lnode = malloc(sizeof(struct TreeNode));
        struct TreeNode* Rnode = malloc(sizeof(struct TreeNode));
        root->val = 0;
        Lnode->val = 0;
        Rnode->val = 0;
        Lnode->left = NULL;
        Lnode->right = NULL;
        Rnode->left = NULL;
        Rnode->right = NULL;
        root->left = Lnode;
        root->right = Rnode;
        struct TreeNode** ans = malloc(sizeof(struct TreeNode*));
        * returnSize = 1;
        ans[0] = root;
        return ans;
    }
    struct TreeNode** ans = malloc(5000 * sizeof(struct TreeNode*));
    int idx = 0;
    for(int i = 1; i <= (n-2); i+=2){
        int* cnL = calloc(1 , sizeof(int));
        struct TreeNode** LeftTree = allPossibleFBT(i, cnL);
        int* cnR = calloc(1 , sizeof(int));
        struct TreeNode** RightTree = allPossibleFBT(n-1-i, cnR);
        for(int j = 0; j < (*cnL); j++){
            for(int k = 0; k < (*cnR); k++){
                struct TreeNode* new = malloc(sizeof(struct TreeNode));
                new->val = 0;
                new->left = LeftTree[j];
                new->right = RightTree[k];
                ans[idx] = new;
                idx++;
            }
        }
        free(cnL);
        free(cnR);
    }
    ans = realloc(ans, idx*sizeof(struct TreeNode*));
    *returnSize = idx;
    return ans;
}