// stores list of string for every level of recursive call     
char *p[MAX_COUNT] = {0};
int out[MAX_COUNT] = {0};
int cnt = 0;
// stores temp string 
char tmp[MAX_COUNT] = {0};
int tmpc = 0; // char present in cur 
// count of string
int sum = 0; 
for (int i = 0; s[i] !='\0'; i++) { 
    if (s[i] == '[') {
        char * t = decodeString(&s[i+1]);
        p[cnt]=strdup(t);
        out[cnt]=sum;
        cnt++;
        sum = 0;
        int test = 1;
        while(s[i+1] !='\0') {
            if (s[i+1]=='[') {
                test++;
            } else if (s[i+1]==']') {
                test--;
            }
            i++;                 
            if (test==0) {
                if (s[i+1] != '\0') {
                    i++;
                }
                break;
            } 
        }
    } if (s[i]>='0' && s[i]<='9') {
        // read all int
        if (tmpc) {
            tmp[tmpc]=0;
            p[cnt]=strdup(tmp);
            out[cnt++]=1;
            tmpc = 0;
        }
        // number to replicate strings read all integer values
        sum = (s[i]-'0');
        while(s[i+1]!='[') {
            sum = (sum*10)+(s[i+1]-'0');
            i++;
        } 
    } else if (s[i] == ']') {
        break;
    } else {
        tmp[tmpc++] = s[i];
        //read head or tail <>[]<>
    } 
}
//printf("done with main loop check for tail: %d\n", tmpc);
if (tmpc) {
    tmp[tmpc]=0;
    p[cnt]=strdup(tmp);
    out[cnt++]=1;
    tmpc = 0;
}
// find required memory 
int summ = 0;
for (int i = 0;i < cnt; i++) {
    summ = summ + out[i]*(strlen(p[i])+1);
}
 
// allocate
char *res = malloc(sizeof(char)*(summ+1));
//copy - create full string including multiplication
int resc = 0;
for (int i = 0;i < cnt; i++) { 
    while(out[i]!=0) { // replicate count
        strcpy(res+resc,p[i]);
        resc+=strlen(p[i]);
        out[i]--;
    }
} 
res[resc] = 0; // end of line 
return res;