int subarraysDivByK(int* A, int ASize, int K) {
    if(ASize==0)
        return 0;
    else if(ASize==1)
    {
        if(A[0]%K==0)
            return 1;
        else
            return 0;
    }
    
    int ret = 0;
    int *B;
    int *hash;
    B = malloc(ASize*sizeof(int));
    hash = malloc(K*sizeof(int));
    for(int i=0;i<K;i++)
        hash[i] = 0;
    B[0] = A[0]%K;
    if(B[0]<0)
        B[0] = B[0]+K;
    hash[B[0]]++;
    for(int i=1;i<ASize;i++)
    {
        A[i] = A[i]+A[i-1];
        B[i] = A[i]%K;
        if(B[i]<0)
            B[i] = B[i]+K;
        hash[B[i]]++;
    }
    
    ret+=hash[0];
    for(int i=0;i<K;i++)
    {
        if(hash[i]>1)
            ret+=hash[i]*(hash[i]-1)>>1;
    }
    // for(int i=0;i<ASize;i++)
    // {
    //     if(A[i]%K==0)
    //     {
    //         ret++;
    //         //printf("i=%d\n",i);
    //     }
    //     if(i>0)
    //     {
    //         for(int j=0;j<i;j++)
    //         {
    //             if(B[i]==B[j])
    //             {
    //                 ret++;
    //                 //printf("i=%d j=%d\n",i,j);
    //             }
    //         }
    //     }
    // }
    return ret;
}