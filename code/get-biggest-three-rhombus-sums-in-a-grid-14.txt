class Solution {
public:
    bool checkRhombus(int i, int j, vector<vector<int>> &grid, int k)
    {
        int cond=grid.size()-2*k;
        return ((i<(cond)) && (j>k-1 && j<grid[0].size()-k));
    }
    vector<int> getBiggestThree(vector<vector<int>>& grid) 
    {
        vector<int> ans;
        // cout<<ans.size()<<endl;
        for(int i=0; i<grid.size(); i++)
        {
            for(int j=0; j<grid[0].size(); j++)
            {
                ans.push_back(grid[i][j]);
                int k=1;
                while(checkRhombus(i,j,grid,k))
                {
                    int area=grid[i][j];
                    int m=1;
                    while(m<=k)
                    {
                        area+=grid[i+m][j-m]+grid[i+m][j+m];
                        m++;
                    }
                    while(m<2*k)
                    {
                        area+=grid[i+m][j-(2*k-m)]+grid[i+m][j+(2*k-m)];
                        m++;
                    }
                    area+=grid[i+2*k][j];
                    ans.push_back(area);
                    k++;
                }
                
            }
        }
        sort(ans.begin(), ans.end());
        vector<int> result;
        int lastArea=-1;
        while(!ans.empty() and result.size()!=3)
        {
            if(lastArea==-1 or lastArea!=ans.back())
            {
                lastArea=ans.back();
                result.push_back(lastArea);
            }
            ans.pop_back();
        }
        return result;
    }
};