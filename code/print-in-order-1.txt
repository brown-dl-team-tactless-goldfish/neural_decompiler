typedef struct
{
    // User defined data may be declared here.
    int turn;
    pthread_mutex_t lock;
    pthread_cond_t cond;
} Foo;

Foo* fooCreate()
{
    Foo* obj = (Foo*) malloc(sizeof(Foo));
    // Initialize user defined data here.
    // init mutex and cond
    pthread_mutex_init(&(obj->lock), NULL);
    pthread_cond_init(&(obj->cond), NULL);
    obj->turn = 1;
    return obj;
}

void first(Foo* obj)
{
    // take lock
    pthread_mutex_lock(&(obj->lock));
    // while not my turn
    while(obj->turn != 1)
    {
        // wait and unlock
        pthread_cond_wait(&(obj->cond), &(obj->lock)); 
    }
    // printFirst() outputs "first". Do not change or remove this line.
    printFirst();
    obj->turn = 2;
    // unlock
    pthread_mutex_unlock(&(obj->lock));
    // broadcast
    pthread_cond_broadcast(&(obj->cond));
}

void second(Foo* obj)
{
    pthread_mutex_lock(&(obj->lock)); 
    while(obj->turn != 2)
    {
        pthread_cond_wait(&(obj->cond), &(obj->lock));
    }
    // printSecond() outputs "second". Do not change or remove this line.
    printSecond();
    obj->turn = 3;
    pthread_mutex_unlock(&(obj->lock));
    pthread_cond_broadcast(&(obj->cond));
}

void third(Foo* obj)
{    
    pthread_mutex_lock(&(obj->lock)); 
    while(obj->turn != 3)
    {
        pthread_cond_wait(&(obj->cond), &(obj->lock)); 
    }
    // printThird() outputs "third". Do not change or remove this line.
    printThird();
    obj->turn = 1;
    pthread_mutex_unlock(&(obj->lock));
    pthread_cond_broadcast(&(obj->cond));
}

void fooFree(Foo* obj)
{
    // User defined data may be cleaned up here.
    free(obj);
}