typedef struct result {
    int coe;
    int value;
    bool equal;
    char* rest;
} result;

inline result parse_item(char* pos) {
    int sum = 0;
    result r;
    r.coe = 0; r.value = 0; r.equal = false;
    if(*pos == 'x') {
        r.coe = 1;
        r.rest = pos + 1;
        return r;
    }
    for(;'0' <= *pos && *pos <= '9'; pos++) {
        sum *= 10; sum += *pos - '0';
    }
    r.rest = pos;
    if(*pos == 'x') {
        r.rest ++;
        r.coe = sum;
    } else {
        r.value = sum;
    }
    return r;
}

inline result parse_one(char* pos) {
    result r;
    r.coe = 0; r.value = 0; r.equal = false;
    switch(*pos) {
        case '=':
            r.equal = 1; 
            r.rest = pos+1;
            return r;
        case '+':
            return parse_item(pos+1);
        case '-':
            r = parse_item(pos+1);
            r.coe *= -1; r.value *= -1;
            return r;
        default: // item
            return parse_item(pos);
    }
}

char* solveEquation(char* equation) {
    int coe = 0;
    int value = 0;
    int side = 1;
    for(char* ptr = equation;*ptr;) {
        result r = parse_one(ptr);
        if(r.equal) {
            side = -1;
        } else {
            coe += side * r.coe;
            value += side * r.value;
        }
        ptr = r.rest;
    }
    value = -value;
    // printf("%dx=%d\n", coe, value);
    char* rstr = malloc(sizeof(char)*(strlen("Infinite solutions")+1));
    if(coe == 0) {
        if(value != 0) {
            strcpy(rstr, "No solution");
        } else {
            strcpy(rstr, "Infinite solutions");
        }
        return rstr;
    } else {
        int answer = value / coe;
        int len = 2;
        if(answer < 0) {
            len ++;
            len += log(0-answer)/log(10) + 1;
        } else if(answer == 0) {
            len ++;
        } else {
            len += log(answer)/log(10) + 1;
        }
        
        
        len += 1; // '\0'
        rstr = realloc(rstr, sizeof(char) * len);
        sprintf(rstr, "x=%d", answer);
        return rstr;
    }
}