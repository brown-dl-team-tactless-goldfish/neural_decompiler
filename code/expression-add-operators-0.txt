class Solution {
public:
    vector<string> addOperators(string num, int target) {
        vector<string> results;
        for (unsigned int l = 1; l <= num.length(); l++) {
            string newNumStr = num.substr(0, l);
            if (newNumStr.length() > 1 && newNumStr[0] == '0') {
                continue;
            }
            long long int newNum = str2lli(newNumStr);
            dfs(results, 
                num.substr(l, num.length() - l),
                newNumStr,
                0, 
                1, 
                newNum,
                target);
        }
        return results;
    }
    
    long long int str2lli(string s) {
        long long int res = 0;
        for (auto& c : s) {
            res = res * 10 + c - '0';
        }
        return res;
    }
    
    void dfs(vector<string>& results, 
             string num, 
             string formula,
             long long int a, 
             long long int b, 
             long long int c,
             long long int target) {
        if (a + b * c == target && num.length() == 0) {
            results.push_back(formula);
        } 
        else {
            for (unsigned int l = 1; l <= num.length(); l++) {
                string newNumStr = num.substr(0, l);
                if (newNumStr.length() > 1 && newNumStr[0] == '0') {
                    continue;
                }
                long long int newNum = str2lli(newNumStr);
                // add
                dfs(results, 
                    num.substr(l, num.length() - l),
                    formula + '+' + newNumStr,
                    a + b * c,
                    1, 
                    newNum,
                    target);
                // subtract
                dfs(results, 
                    num.substr(l, num.length() - l),
                    formula + '-' + newNumStr,
                    a + b * c,
                    -1, 
                    newNum,
                    target);
                // multiply
                dfs(results, 
                    num.substr(l, num.length() - l),
                    formula + '*' + newNumStr,
                    a,
                    b * c,
                    newNum,
                    target);
            }
        }
    }
    
};