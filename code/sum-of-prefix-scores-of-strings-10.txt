class TrieNode{
public:
    vector<TrieNode*> children = vector<TrieNode*>(26, NULL);
    int prefixOf= 0;
};

class Solution {
public:
    TrieNode* makeNode(){
        return new TrieNode;
    }
    
    void insert(TrieNode* root, string s, int id){
        for(char c : s){
            if(root->children[c-'a'] == NULL){
                root->children[c-'a'] = makeNode();
            }
            root->children[c-'a']->prefixOf++;
            root = root->children[c-'a'];
        }
    }
    
    int find(TrieNode* root, string s){
        int count = 0;
        for(char c: s){
            
            if(root->children[c-'a'] == NULL){
                return 0;
            }else{
                count += root->children[c-'a']->prefixOf;
            }
            root = root->children[c-'a'];
        }
        
        return count;
    }
    
    
    vector<int> sumPrefixScores(vector<string>& words) {
        TrieNode* root = makeNode();
        for(int i = 0; i < words.size(); i++){
            insert(root, words[i], i);
        }
        
        vector<int> res(words.size(), 0);
        
        for(int i = 0; i < words.size(); i++){
            res[i] = find(root, words[i]);
        }
        
        return res;
        
    }
};