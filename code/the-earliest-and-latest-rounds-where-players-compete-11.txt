class Solution {
public:
    int lm,hm;
    void solve(set<int> &now,int round,int fp,int sp){
       
        if(!now.count(fp) or !now.count(sp))
            return;
        
        int n = (int)(now.size())/2;
        vector<int> cur_set(now.begin(),now.end());
        
        int nn = (int)now.size();
        
        for(int mask=0;mask<(1<<n);++mask){
            set<int> send;
            if((nn%2)!=0)
                send.insert(cur_set[n]);
            bool ok = false;
            for(int j=0;j<n;j++){
                int p1 = cur_set[j];
                int p2 = cur_set[(int)cur_set.size() - 1 - j];
                if(p1==fp and p2==sp){
                    lm = min(lm,round);
                    hm = max(hm,round);
                    ok=true;
                    break;
                }
                if(p1==fp or p1==sp)
                    send.insert(p1);
                else if(p2==fp or p2==sp)
                    send.insert(p2);
                else if(mask&(1<<j))
                    send.insert(p1);
                else if(!(mask&(1<<j)))
                    send.insert(p2);
            }
            if(!ok){
                solve(send,round+1,fp,sp);
            }
            
        }
        
    }
    vector<int> earliestAndLatest(int n, int firstPlayer, int secondPlayer) {
        lm = 2e9;
        hm = 0;
        set<int> now;
        for(int i=1;i<=n;i++)
            now.insert(i);
        solve(now,1,firstPlayer,secondPlayer);
        vector<int> v;
        v.push_back(lm);
        v.push_back(hm);
        return v;
        
    }
};