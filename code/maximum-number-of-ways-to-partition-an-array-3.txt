class Solution {
public:
    int waysToPartition(vector<int>& nums, int k) {
        vector<int> l(nums.size());
        vector<int> r(nums.size());
        vector<long long> sum(nums.size());
        sum[0] = nums[0];
        for(int i = 1;i<nums.size();i++) {
            sum[i] = sum[i-1] + nums[i];
        }
        unordered_map<long long,int> m; 
        for(int i = nums.size()-1;i>=1;i--) {
            long long right = sum.back() - sum[i-1];
            long long left = sum[i-1];
            long long diff = right - left; 
            m[diff]++;
            l[i-1] = m[k-nums[i-1]];
        }
        m.clear();
        for(int i = 1;i<nums.size();i++) {
            long long left = sum[i-1];
            long long right = sum.back() - sum[i-1];
            m[left-right]++;
            r[i] = m[k-nums[i]];
        }
        int ret = 0; 
        for(int i = 0;i<nums.size();i++) {
            ret = max(ret,l[i] + r[i]);
        }
        int count = 0; 
        for(int i = 0;i<nums.size()-1;i++) {
            if(sum[i] == sum.back()-sum[i]) {
                count++;
            }
        }
        ret = max(ret,count);
        return ret; 
    }
};