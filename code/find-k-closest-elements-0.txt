int* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize){
    int left = 0; 
    int right = arrSize-1;
    int mid;
    * returnSize = k;
    int* ans = malloc(k * sizeof(int));
    mid = (left + right)/2;  //init mid, in case k == 1;
    while(left < right - 1){
        mid = (left + right)/2;
        if(arr[mid] == x)
            break;
        
        else if((mid > 0) && arr[mid] > x)
            right = mid;

        else if((mid < arrSize-1) && arr[mid] < x)
            left = mid;
        
        else
            break;
    }
    int pivot;
    if(abs(arr[left] - x) <= abs(arr[right] - x)){
         if(abs(arr[left] - x) <= abs(arr[mid] - x))
             pivot = left;
         else
             pivot = mid;        
    }        
    else{
         if(abs(arr[right] - x) <= abs(arr[mid] - x))
             pivot = right;
         else
             pivot = mid;     
    }

    int pointL = pivot - 1;
    int pointR = pivot + 1;
    for(int i = 1; i < k; i++){
        if(pointL >= 0 && pointR < arrSize){
            if(abs(x- arr[pointL]) <= abs(x- arr[pointR])){
                pointL--;
            }
            else{
                pointR++;
            }
        }
        else if(pointL >= 0){
                pointL--;
        }
        else{
                pointR++;
        }
    }

    int idx = 0;
    for(int i = pointL + 1; i < pointR; i++){
        ans[idx] = arr[i];
        idx++;
    }
    return ans;
}