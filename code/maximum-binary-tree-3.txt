/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct TreeNode* constructMaximumBinaryTree(int* nums, int numsSize) {
    if(numsSize==0){
        return NULL;
    }
    struct TreeNode* ret=(struct TreeNode*)malloc(sizeof(struct TreeNode));
    int max=nums[0];
    int cut=0;
    for(int i=1;i<numsSize;i++){
        if(nums[i]>max){
            max=nums[i];
            cut=i;
        }
    }
    ret->val=max;
    if(cut!=0){
        ret->left=(struct TreeNode*)malloc(sizeof(struct TreeNode));
        constructMaximumBinaryTree1(nums,cut,ret->left);
    }
    else{
        ret->left=NULL;
    }
    if(cut<numsSize-1){
        ret->right=(struct TreeNode*)malloc(sizeof(struct TreeNode));
        constructMaximumBinaryTree1(&nums[cut+1],numsSize-cut-1,ret->right);
    }
    else{
         ret->right=NULL;
    }
    return ret;
}
void constructMaximumBinaryTree1(int* nums, int numsSize,struct TreeNode* root) {
    if(numsSize==0){
        root==NULL;
        return;
    }
    int max=nums[0];
    int cut=0;
    for(int i=1;i<numsSize;i++){
        if(nums[i]>max){
            max=nums[i];
            cut=i;
        }
    }
    root->val=max;
    if(cut!=0){
        root->left=(struct TreeNode*)malloc(sizeof(struct TreeNode));
        constructMaximumBinaryTree1(nums,cut,root->left);
    }
    else{
        root->left=NULL;
    }
    if(cut<numsSize-1){
        root->right=(struct TreeNode*)malloc(sizeof(struct TreeNode));
        constructMaximumBinaryTree1(&nums[cut+1],numsSize-cut-1,root->right);
    }
    else{
        root->right=NULL;
    }
}