int fetchCandies(int boxIndex, int* status, int statusSize, int* candies, int candiesSize, int** keys, int keysSize, 
                 int* keysColSize, int** containedBoxes, int containedBoxesSize, int* containedBoxesColSize, 
                 int* isAccessible, int *visited , int *haveKey){
    int count = 0;
    
    if (visited[boxIndex] == 1 || isAccessible[boxIndex] == 0 || (status[boxIndex] == 0 && haveKey[boxIndex] == 0))
        return 0;
    
    count = candies[boxIndex];
    visited[boxIndex] = 1;

    for (int i = 0; i < keysColSize[boxIndex]; i++) {
        haveKey[keys[boxIndex][i]] = 1;
        count += fetchCandies(keys[boxIndex][i], status, statusSize, candies, candiesSize, keys, keysSize, keysColSize, containedBoxes, containedBoxesSize, containedBoxesColSize, isAccessible, visited, haveKey);
    }
    
    for (int i = 0; i < containedBoxesColSize[boxIndex]; i++) {
        isAccessible[containedBoxes[boxIndex][i]] = 1;
        count += fetchCandies(containedBoxes[boxIndex][i], status, statusSize, candies, candiesSize, keys, keysSize, keysColSize, containedBoxes, containedBoxesSize, containedBoxesColSize, isAccessible, visited, haveKey);
    }
    
    return count;
}

int maxCandies(int* status, int statusSize, int* candies, int candiesSize, int** keys, int keysSize, int* keysColSize, int** containedBoxes, int containedBoxesSize, int* containedBoxesColSize, int* initialBoxes, int initialBoxesSize){
    int *isAccessible = NULL, *visited = NULL, *haveKey = NULL, Candies = 0; 
    
    isAccessible = calloc(statusSize, sizeof(int));
    visited = calloc(statusSize, sizeof(int));
    haveKey = calloc(statusSize, sizeof(int));
    
    for (int i = 0; i < initialBoxesSize; i++) {
        isAccessible[initialBoxes[i]] = 1;
        Candies += fetchCandies(initialBoxes[i], status, statusSize, candies, candiesSize, keys, keysSize, keysColSize, containedBoxes, containedBoxesSize, containedBoxesColSize, isAccessible, visited, haveKey);
    }
    
    free(isAccessible);
    free(visited);
    free(haveKey);
    
    return (Candies);
}