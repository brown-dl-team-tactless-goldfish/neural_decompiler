class Solution {
  bool is_prime(char c) { return c == '2' || c == '3' || c == '5' || c == '7'; }

public:
  int beautifulPartitions(string s, int k, int minLength) {
    int n = s.size();
    if (!is_prime(s[0]) || is_prime(s[n - 1])) {
      return 0;
    }

    vector<int> partition_idx;
    for (int i = 0; i < n; i++) {
      if (is_prime(s[i]) && (i == 0 || !is_prime(s[i - 1]))) {
        partition_idx.push_back(i);
      }
    }

    int m = partition_idx.size();
    vector<int> dp(m);
    for (int i = 0; i < m && n - partition_idx[i] >= minLength; i++) {
      dp[i] = 1;
    }
    for (int k2 = 2; k2 <= k; k2++) {
      vector<int> ndp(m);
      int cur = 0;
      for (int i = m - 1, j = m - 1; i >= 0; i--) {
        while (j > i && partition_idx[j] - partition_idx[i] >= minLength) {
          cur += dp[j--];
          cur %= M;
        }
        ndp[i] = cur;
      }
      swap(dp, ndp);
    }

    return dp[0];
  }
};