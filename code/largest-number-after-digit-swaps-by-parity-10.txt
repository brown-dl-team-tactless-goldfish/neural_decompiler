public class Solution {
    public int LargestInteger(int num) {
        var numArray = num.ToString().ToCharArray();
        for(int i = 0 ; i < numArray.Length; i++) {
            char c = numArray[i];
            int no = Convert.ToInt32(c);
            bool isEven = no % 2 == 0;
            if(isEven) {
                var(n, pos) = BiggestOddOrEven(isEven, i+1, numArray);
                if(n > no) {
                    numArray[i] = Convert.ToChar(n);
                    numArray[pos] = c;
                }
            } else {
                var(m, posm) = BiggestOddOrEven(isEven, i+1, numArray);
                if(m > no) {
                    numArray[i] = Convert.ToChar(m);
                    numArray[posm] = c;
                }
            }
        }
        string str = string.Join("",numArray);
        return Convert.ToInt32(str);
    }
    private (int, int) BiggestOddOrEven(bool isEven, int startIndex, char[] noArray) {
        int maxOdd = 0;
        int maxOddPosition = startIndex;
        int maxEven = 0;
        int maxEvenPosition = startIndex;
        for(int i = startIndex; i< noArray.Length; i++) {
            char c = noArray[i];
            int no = Convert.ToInt32(c);
            bool isOdd = no % 2 != 0;
            if(isOdd) {
                if(no > maxOdd) {
                    maxOdd = no;
                    maxOddPosition = i;
                }
            } else{
                if(no > maxEven) {
                    maxEven = no;
                    maxEvenPosition = i;
                }
            }
        }
        
        return isEven ? (maxEven, maxEvenPosition) : (maxOdd, maxOddPosition);
    }
}