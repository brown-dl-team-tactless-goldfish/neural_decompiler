public class Solution {
    public int MaxValue(int[][] events, int k) {
        Array.Sort(events, (x, y) => x[0] == y[0] ? x[1] - y[1] : x[0] - y[0]);
        int[] next = new int[events.Length];
        for (int i = 0; i < events.Length; ++i) {
            int l = i, r = events.Length - 1;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (events[m][0] > events[i][1]) {
                    r = m;
                } else {
                    l = m + 1;
                }
            }
            
            if (events[l][0] <= events[i][1]) l++;
            next[i] = l;
        }
        
        int[,] dp = new int[events.Length + 1, k + 1];
        for (int i = 0; i < dp.GetLength(0); ++i)
            for (int j = 0; j < dp.GetLength(1); ++j)
                dp[i, j] = -1;
        
        return DFS(events, 0, 0, k, next, dp);
    }
    
    public int DFS(int[][] ev, int pos, int ec, int k, int[] next, int[,] dp) {
        if (pos >= ev.Length || ec == k) return 0;
        if (dp[pos, ec] != -1) return dp[pos, ec];
        int nx = next[pos];
        return dp[pos, ec] = Math.Max(DFS(ev, pos + 1, ec, k, next, dp), ev[pos][2] + DFS(ev, nx, ec + 1, k, next, dp));
    }
    
}