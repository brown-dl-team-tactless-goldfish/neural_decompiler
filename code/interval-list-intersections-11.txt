class Solution {   
    public int[][] IntervalIntersection(int[][] A, int[][] B) {
        var ret = new List<int[]>();        
        var indices = new List<int>{0,0};
        var C = new int[][][]{A,B};
        
        while(true){               
            var minIndex = -1;
            int[] curr = null;
            var overlap = false;
            for(var i=0; i<C.Length; i++){   
                var index = indices[i];
                if(index>= C[i].Length)                
                    continue;     
                var interval = C[i][index];
                if(curr == null){
                    curr = new int[]{interval[0], interval[1]};
                    minIndex = i;
                }
                else{              
                    if(interval[1]<curr[1])
                        minIndex=i;
                    
                    if(interval[1] < curr[0] || curr[1]<interval[0]){
                        overlap = false;
                        break;
                    }
                    else{
                        curr[0] = Math.Max(curr[0], interval[0]);
                        curr[1] = Math.Min(curr[1], interval[1]);
                        overlap = true;
                    }
                }
            }
            
            if(minIndex==-1)
                break;
            indices[minIndex]++;
            if(overlap)
                ret.Add(curr);
        }
        return ret.ToArray();
    }
}