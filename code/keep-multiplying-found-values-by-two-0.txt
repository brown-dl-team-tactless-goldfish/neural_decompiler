int cmp(const void* a, const void* b) {
    return *(const int*) a - *(const int*) b;
}

bool search(int* nums, int start, int end, int tar, int* idx) {
    if(nums[start] == tar || nums[end] == tar) {
        *idx = (nums[start] == tar) ? start : end;
        return true;
    }
    while(start < end) {
        int mid = start + (end - start) / 2;
        if(nums[mid] == tar) {
            *idx = mid;
            return true;
        } else if(nums[mid] < tar) {
            start = mid + 1;
        } else {
            end = mid;
        }
    }
    return false;
}

int findFinalValue(int* nums, int numsSize, int original) {
    qsort(nums, numsSize, sizeof(int), cmp);
    int start = 0, idx = 0;
    while(1) {
        if(!search(nums, start, numsSize-1, original, &idx)) break;
        start = idx;
        original *= 2;
    }
    return original;
}