//UNION
//father, count, min
int findFather(int** UNION, int val){
    int k = val;
    while(k != UNION[k][0]){
        k = UNION[k][0] ;
    }    
    return k;
}
int minScore(int n, int** roads, int roadsSize, int* roadsColSize){ 
    int** UNION = malloc((n+1) * sizeof(int*));
    for(int i = 1; i <= n; i++){
        UNION[i] = malloc(3 * sizeof(int));
        UNION[i][0] = i;
        UNION[i][1] = 1;
        UNION[i][2] = INT_MAX;
    }
    
    for(int i = 0; i < roadsSize; i++){
        int a = findFather( UNION, roads[i][0] );
        int b = findFather( UNION, roads[i][1] );
        int min = fmin(roads[i][2],  fmin(UNION[a][2], UNION[b][2]) );
        if(a == b){
            UNION[a][2] = min;
            continue;
        }
        if(UNION[a][1] >= UNION[b][1]){
            UNION[b][0] = a;
            UNION[a][2] = min;
            UNION[a][1] += UNION[b][1];
        }
        else{
            UNION[a][0] = b;
            UNION[b][2] = min;
            UNION[b][1] += UNION[a][1];
        }
    }
    int first = findFather(UNION, 1);
    int last  = findFather(UNION, n);
    int ans ;
    if(first != last)
        ans =  -1;
    else
        ans = UNION[first][2];
    
    for(int i = 1; i <= n; i++){
        free(UNION[i]);
    }
    free(UNION);
    return ans;
        
}