class Solution {
public:
    int waysToSplit(vector<int>& nums) {
        long const mod = 1e9 + 7;
        int n = nums.size();
        vector<long long> prefix(nums.size());
        prefix[0] = nums[0];
        for(int i = 1;i<nums.size();i++)
        {
            prefix[i] = prefix[i-1] + nums[i];
        }
        
        long long count = 0;
        for(int i = 0;i<prefix.size();i++)
        {
            int left = lower_bound(prefix.begin(), prefix.end(), 2*prefix[i]) - prefix.begin();
            if(left<=i) left = i+1;
            int start = left;
            if(left==prefix.size()) break;
            int right = prefix.size()-1;
            int ans = left;
            while(left<=right)
            {
                int mid = (left+(right-left)/2);
                int right_val = prefix[n-1]-prefix[mid];
                int left_val = prefix[mid]-prefix[i];
                if(mid==n-1) break;
                if(right_val >= left_val)
                {
                    ans = mid;
                    left = mid+1;
                }
                else right = mid-1;
            }
            if(ans==left) continue;
            ans = ans-start + 1;
            count+=ans;
        }
        return count%mod;
    }
};