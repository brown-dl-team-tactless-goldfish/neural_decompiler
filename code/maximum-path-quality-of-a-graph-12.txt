class Solution {
public:
    int ans=INT_MIN;
    void dfs(int src,int curt,int curval,
             int mt,vector<int>&val,vector<pair<int,int>>adj[]){
        if(curt > mt) return ;
        curval+=val[src];
        if(src == 0)
            ans=max(ans , curval);
        int tem = val[src];
        val[src]=0;
        for(auto it : adj[src])
            dfs(it.first,curt+it.second,curval,mt,val,adj);
        val[src]=tem;
    }
    int maximalPathQuality(vector<int>& val, vector<vector<int>>& ed, int mt) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int n = val.size();
        // Create a weithed adjacency list
        vector<pair<int,int>>adj[n];
        for(int i=0;i<ed.size();i++){
            int u=ed[i][0];
            int v=ed[i][1];
            int t=ed[i][2];
            adj[u].push_back({v,t});
            adj[v].push_back({u,t});
        }
        //calling dfs
        dfs(0,0,0,mt,val,adj);
        return ans;
    }
};