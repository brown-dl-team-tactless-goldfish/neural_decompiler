class Solution {
public:
    int res;
    int target;
    
    void check(int count){
        // cout<<count<<endl;
        int exp1=abs(count-target);
        int exp2=abs(res-target);
        if(exp1<exp2){
            res=count;
        }
        else if(exp1==exp2){
            // cout<<count<<" "<<res<<endl;
            if(count<res){
               res=count;
            }
        }
    }
    
    void dfs(vector<int>& toppingCosts, int i, int sum){
        check(sum);
        if(i>=toppingCosts.size()) return;
        dfs(toppingCosts, i+1, sum);
        dfs(toppingCosts, i+1, sum+toppingCosts[i]);
        dfs(toppingCosts, i+1, sum+2*toppingCosts[i]);
    }
    
    int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts, int _target) {
        target=_target;
        int n=baseCosts.size();
        int m=toppingCosts.size();
        res=INT_MAX;
        for(auto& b:baseCosts){
            int sum=b;
            dfs(toppingCosts, 0, sum);
        }
        return res;
    }
};