int balancedString(char * s){
    int n = strlen(s);
    int Q = 0, W = 0, E = 0, R = 0;
    for(int i = 0;i < n; i++){
        switch(s[i]){
            case 'Q':
                Q++;
                break;
            case 'W':
                W++;
                break;
            case 'E':
                E++;
                break;
            case 'R':
                R++;
                break;
        }
    }
    Q = fmax(0, Q - n /4);
    W = fmax(0, W - n /4);
    E = fmax(0, E - n /4);
    R = fmax(0, R - n /4);
    int ans = INT_MAX;
    int q = 0, w = 0, e = 0, r =0;
    for(int i = 0; i < (Q+W+E+R); i++){
        if(s[i] == 'Q')
            q++;
        else if(s[i] == 'W')
            w++;
        else if(s[i] == 'E')
            e++;
        else if(s[i] == 'R')
            r++;
    }
    if(q == Q && w == W && e == E && r == R)
        return (Q+W+E+R);
    int left = 0, right;
    for(right = (Q+W+E+R); right < n; right++){
        if(s[right] == 'Q')
            q++;
        else if(s[right] == 'W')
            w++;
        else if(s[right] == 'E')
            e++;
        else if(s[right] == 'R')
            r++;
        if(q >= Q && w >= W && e >= E && r >= R){            
            while(1){
                if(s[left] == 'Q')
                    q--;
                else if(s[left] == 'W')
                    w--;
                else if(s[left] == 'E')
                    e--;
                else if(s[left] == 'R')
                    r--;
                left++;
                if(q < Q || w < W || e < E || r < R){
                    //put here faster, but need + 2, because left already shift
                    ans = fmin(ans, right - left + 2 ); 
                    break;
                }
            }
        }
    }
    
    return ans;
}