int comp (const void** a, const void** b){
    if ((*(int**)a)[0] == (*(int**)b)[0]){
        return (*(int**)a)[1] - (*(int**)b)[1];
    }
    return (*(int**)a)[0] - (*(int**)b)[0];
}


bool isRectangleCover(int** rectangles, int rectanglesSize, int* rectanglesColSize){
    qsort(rectangles, rectanglesSize, sizeof(int*), comp);
    int m = rectangles[0][0];
    int n = rectangles[0][1];
    int p = 0;
    int k;
    for (int i = 0 ; i < rectanglesSize ; i++){
        rectangles[i][0] -= m;
        rectangles[i][2] -= m;
        rectangles[i][1] -= n;
        rectangles[i][3] -= n;
        if (p < rectangles[i][2]){
            p = rectangles[i][2];
            k = rectangles[i][3];
        } else if (p == rectangles[i][2]){
            if (k < rectangles[i][3]){
                k = rectangles[i][3];
            }
        }
    }
    
    int* list = calloc(k,sizeof(int));

    for (int i = 0 ; i < rectanglesSize ; i++){
        if (rectangles[i][1] < 0 || rectangles[i][3] > k){
            return false;
        }
        for (int t = rectangles[i][1] ; t < rectangles[i][3] ; t++){
            if (list[t] != rectangles[i][0]){
                return false;
            } else {
                list[t] = rectangles[i][2];
            }
        }
    }
    for (int i = 0 ; i < k ; i++){
        if (list[i] != p){
            return false;
        }
    }
    free(list);
    return true;
}