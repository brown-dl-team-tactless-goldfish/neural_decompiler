typedef long long LL;
class Solution {
public:
    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) {
        int n=boxes.size();
        vector<LL>prefix(n+1,0);
        for(int i=1;i<=n;i++)prefix[i]=(LL)prefix[i-1]+(LL)boxes[i-1][1];
        vector<int>dp(n,0);
        vector<int>dp2(n,0);
        deque<array<int,3>>dq;
        dp[0]=2;
        dp2[0]=2;
        dq.push_back({0,0,boxes[0][0]});
        for(int i=1;i<n;i++)
        {
            while(!dq.empty()&&((i-dq.front()[0]>=maxBoxes)||(prefix[i+1]-prefix[dq.front()[0]]>maxWeight)))
            {
                int box_index=dq.front()[0];
                int diff=dq.front()[1];
                int last=dq.front()[2];
                dq.pop_front();
                if(dq.size()>0)dq.front()[2]=last;
                if(dq.size()>0)dq.front()[1]=diff-(boxes[dq.front()[0]][0]!=boxes[box_index][0]);
            }
            if(dq.size()>0)
            {
                if(dq.front()[2]!=boxes[i][0])
                {
                    dq.front()[2]=boxes[i][0];
                    dq.front()[1]++;
                }
                dp[i]=min(dp[i-1]+2,dp2[dq.front()[0]]+dq.front()[1]);
            }else dp[i]=dp[i-1]+2;
            dp2[i]=dp[i-1]+2;
            while(dq.size()>0&&dq.back()[1]+dp2[dq.back()[0]]>=dp2[i])dq.pop_back();
            dq.push_back({i,0,boxes[i][0]});
            // cout << dp[i] << endl;
        }
        return dp[n-1];
    }
};