unordered_map<int,vector<int>> kvf;
unordered_map<int, list<int>> fre_list;
unordered_map<int, list<int>:: iterator> key_it;

int c,size, min_freq;

LFUCache(int capacity) {
    
    c = capacity;
    size = 0;
    min_freq = 0;
    
}

int get(int key) {
    
    if(!kvf.count(key))
    {
        return -1;
    }
    
    int f = kvf[key][1];
    int val = kvf[key][0];
    
    fre_list[f].erase(key_it[key]);
    
    fre_list[f+1].push_back(key);
    
    kvf[key][1]++;
    
    key_it[key] = --fre_list[f+1].end();
    
    if(!fre_list[min_freq].size())
    {
        min_freq++;
    }
    
    return val;
    
}

void put(int key, int value) {
    
    if(c<=0)   
    { 
        return;
    }
    
    if(get(key) != -1)
    {
        kvf[key][0] = value;
        
        return;
    }
    
    if(size == c)
    {
        int temp = fre_list[min_freq].front();
        fre_list[min_freq].pop_front();
        kvf.erase(temp);
        key_it.erase(temp);
    }
    
    kvf[key] = {value, 1};
    
    fre_list[1].push_back(key);
    
    key_it[key] = --fre_list[1].end();
    
    min_freq = 1;
    
    if(size<c)
    {
        size++;
    }
    
}