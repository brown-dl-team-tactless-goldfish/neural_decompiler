int cmp(const void* a, const void* b) {
    return *(const int*) a - *(const int*) b;
}

int check(int* potions, int potionsSize, double tar) {
    int l = 0, r = potionsSize - 1;
    if (tar > potions[r]) return l;
    if (tar <= potions[l]) return r + 1;
    while (l < r) {
        int m = l + ((r - l) >> 1);
        if (potions[m] >= tar) {
            r = m;
        } else {
            l = m + 1;
        }
    }
    return potionsSize - l;
}

int* successfulPairs(int* spells, int spellsSize, int* potions, int potionsSize, long long success, int* returnSize) {
    *returnSize = 0;
    qsort(potions, potionsSize, sizeof(int), cmp);
    int* res = (int*) calloc(spellsSize, sizeof(int));
    for (int i = 0; i < spellsSize; i++) {
        double tar = success / (double) spells[i];
        res[(*returnSize)++] = check(potions, potionsSize, tar);
    }
    return res;
}