class Solution {
public:
    int n;
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        n = colors.size();
        vector<vector<int>> es(n);
        vector<vector<int>> cs(n, vector<int>(26, 0));
        vector<int> ind(n, 0);
        
        for (auto& e : edges)
        {
            es[e[0]].push_back(e[1]);
            ind[e[1]]++;
        }
        
        deque<int> q;
        for (int i = 0; i < n; i++)
        {
            if (ind[i] == 0)
            {
                q.push_back(i);
            }
        }
        int cnt = 0;
        while (!q.empty())
        {
            int i = q.front();
            q.pop_front();
            cs[i][colors[i] - 'a']++;
            cnt++;
            for (auto& nei : es[i])
            {
                for (int j = 0; j < 26; j++)
                {
                    cs[nei][j] = max(cs[nei][j], cs[i][j]);
                }
                ind[nei]--;
                if (ind[nei] == 0)
                {
                    q.push_back(nei);
                }
            }
        }
        if (cnt != n) return -1;
        int ans = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < 26; j++)
            {
                ans = max(ans, cs[i][j]);
            }
        }
        
        return ans;
        
    }
};