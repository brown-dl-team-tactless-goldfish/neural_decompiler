class Solution {
public:
    vector<vector<int>> board;
    
    vector<int> x = {1,0,-1,0};
    vector<int> y = {0,1,0,-1};
    
    void dfs(int r, int c){
        board[r][c] = 1;
        
        // cout<<"dfs = "<<r<<" "<<c<<endl;
        
        for(int i=0;i<4;i++){
            int xx = r + x[i];
            int yy = c + y[i];
            
            if(xx>=0 && xx<board.size() && yy>=0 && yy<board.size() && !board[xx][yy]){
                dfs(xx, yy);
            }
        }
        
        return;
    }
    
    int regionsBySlashes(vector<string>& grid) {
        int m = grid.size();
        int n = 4*m+1;
        
        board.clear();
        board.resize(n, vector<int>(n, 0));
        
        int k;
        for(int i=0;i<m;i+=1){
            k = 0;
            for(int j=0;j<grid[i].size();j+=1){
                if(grid[i][j] == '/'){
                    for(int k=-2;k<=2;k++){
                        board[2+4*i+k][2+4*j-k] = 1;
                    }
                }
                else if(grid[i][j] == '\\'){
                    for(int k=-2;k<=2;k++){
                        // cout<<2+4*i+k<<" "<<2+4*j+k<<endl;
                        board[2+4*i+k][2+4*j+k] = 1;
                    }
                }
            }
        }
        
        int res = 0;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]) continue;
                res++;
                dfs(i, j);
            }
        }
        
        return res;
    }
};