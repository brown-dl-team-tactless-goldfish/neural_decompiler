int * findBall(
    const int * const * const grid, 
    const int gridSize, 
    const int * const gridColSize, 
    int * const returnSize
){
	*returnSize = *gridColSize;
	int * const results = (int *)malloc(sizeof (int) * *returnSize);
	if (NULL == results){
		*returnSize = 0;
		return NULL;
	}
	
	for (int i = 0; i < *gridColSize; i += 1){		
		struct {
			int row;
			int col;
			enum {
				Area_UPPER,
				Area_LOWER
			}area;
		}pos = {
			.row = 0,
			.col = i,
			.area = Area_UPPER
		};
		
		do {
			switch (pos.area){
			case Area_UPPER:
				switch (grid[pos.row][pos.col]){
				case 1:
					if (
						!( pos.col + 1 < *gridColSize ) || 
						-1 == grid[pos.row][pos.col + 1]
					){
						pos.col = -1;
						break;
					}
					
					pos.col += 1;
					pos.area = Area_LOWER;
					
					break;
				case -1:
					if (
						!( pos.col - 1 >= 0 ) || 
						1 == grid[pos.row][pos.col - 1]
					){
						pos.col = -1;
						break;
					}
					
					pos.col -= 1;
					pos.area = Area_LOWER;
					
					break;
				default:
					assert(0);
				}
					
				break;
			case Area_LOWER:
				pos.row += 1;
				pos.area = Area_UPPER;
					
				break;
			default:
				assert(0);
			}
		}while (pos.col != -1 && pos.row < gridSize);
		
		results[i] = pos.col;
	}
	
	return results;
}