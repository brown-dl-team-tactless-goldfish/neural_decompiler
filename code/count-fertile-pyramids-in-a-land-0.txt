public class Solution {
    public int CountPyramids(int[][] g) {
        int r = 0;
        
        r += CountPyramid(g);
        
        for (int i = 0; i < g.Length; ++i) {
            for (int j = 0; j < g[0].Length; ++j) {
                if (g[i][j] > 0) g[i][j] = 1;
            }
        }
        
        // Flip Multidimensional Array
        for (int i = 0, j = g.Length - 1; i <= j; i++, j--) {
            for (int k = 0; k < g[i].Length; ++k) {
                int t = g[i][k];
                g[i][k] = g[j][k];
                g[j][k] = t;
            }
        }
        
        r += CountPyramid(g);
        
        return r;
    }
    
    // Search for pyramids upside down for easier coding
    public int CountPyramid(int[][] g) {
        int rows = g.Length, cols = g[0].Length, res = 0;
        
        for (int i = 1; i < rows; ++i) {
            for (int j = 1; j < cols - 1; ++j) {
                if (g[i][j] != 0 && g[i - 1][j] != 0) {
                    g[i][j] = Math.Min(g[i - 1][j - 1], g[i - 1][j + 1]) + 1;
                    res += g[i][j] - 1;
                }
            }
        }
        
        return res;
    }
}