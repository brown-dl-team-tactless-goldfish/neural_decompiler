public class Solution {
    public IList<string> RemoveSubfolders(string[] folder) {
        TrieNode trie = new TrieNode();
        foreach(string str in folder)
            trie.AddString(str);     
        return trie.GetRootString();
    }
}

public class TrieNode
{
    private TrieNode[] children = new TrieNode[27];
    private string word = null;
	
    public void AddString(string str)
    {
        TrieNode cur = this;
        foreach(char c in str)
        {
            int index = c == '/' ? 26 : c - 'a';
            if(cur.children[index] == null)
                cur.children[index] = new TrieNode();
            cur = cur.children[index];
        }
        cur.word = str;
    }
    
    public IList<string> GetRootString()
    {
        IList<string> result = new List<string>();
        DFS(this, result);
        return result;
    }
    
    public void DFS(TrieNode node, IList<string> result)
    {
        if(node == null)
            return;
        if(node.word != null)
            result.Add(node.word);
        for(int i = 0; i < 27; i++)
        {
            char c = i == 26 ? '/' : (char)('a' + i);
            if(node.word != null && c == '/')
                continue;
            DFS(node.children[i], result);
        }
    }
}