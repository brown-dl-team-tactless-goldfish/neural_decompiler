class Solution {
public:
    
    int dp[1001][2][101];
    
    int answer(vector<int>&nums , int k , int oper , int index){
        if(index >= nums.size())return 0;
        
        if(!k)return 0;
        
        if(dp[index][oper][k] != -1)return dp[index][oper][k];
        
        int a = INT_MIN , b = INT_MIN , c = INT_MIN;
        
        if(!oper){
            a = answer(nums , k , !oper , index + 1) - nums[index];
        }else{
            b = answer(nums , k - 1 , !oper , index + 1) + nums[index];
        }
        c = answer(nums , k , oper , index + 1);
        
        return dp[index][oper][k] = max(a , max(b , c));
    }
    
    int maxProfit(int k, vector<int>& prices) {
        memset(dp , -1 , sizeof(dp));
        return answer(prices ,  k , 0 , 0);
    }
};