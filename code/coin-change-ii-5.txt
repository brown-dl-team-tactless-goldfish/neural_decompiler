class Solution {
public:
    int fun( int ind , int T , vector<int> &arr , vector<vector<int>> &dp) // Gives number of combination make amoout T with any elemen use any nubmer of time using elments  0......ind  part of array . 
    {
        if( ind ==0 ) // smallest subproblem able to answer 
        {
            // multiple arr[0] then 1 combination of change possible 
            if( T%arr[0]==0)
            return 1 ;
            else 
            return 0 ; 
        } 
        if( dp[ind][T] != -1 )return dp[ind][T]; 
        int nottake = fun(ind-1,T,arr,dp); // not taken then subproblem target as it 
        int take = 0 ; 
        if( arr[ind] <= T )   // take elemen possible target smaller or equal and subproblem sahi target small.
         take = fun(ind,T-arr[ind],arr,dp);
        
        return dp[ind][T] = take + nottake ;
    }
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,-1));
        return fun(n-1,amount,coins,dp);
    }
};