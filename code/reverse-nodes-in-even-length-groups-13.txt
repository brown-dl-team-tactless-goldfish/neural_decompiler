class Solution {
public:
    ListNode *helper(ListNode *head,int reqLen,ListNode *parent) {
        if(!head || !head->next) {
            return head;
        }
        int count=1;
        ListNode *tmp=head;
        while(count<reqLen && tmp) {
            tmp=tmp->next;
            count++;
        }
        if(!tmp) {
            count--;
        }
        if(count%2==0) {
            ListNode *later=NULL,*curr=head,*prev=NULL,*target=tmp?tmp->next:NULL;
            if(parent) {
                parent->next=NULL;
            }
            while(curr!=target) {
                later=curr->next;
                curr->next=prev;
                prev=curr;
                curr=later;
            }
            if(parent) {
                parent->next=prev;
            }
            head->next=target?helper(target,reqLen+1,head):head->next;
            return prev;
        }
        else {
            if(parent) {
                parent->next=head;
            }
            if(tmp) {
                tmp->next=helper(tmp->next,reqLen+1,tmp);
            }
            return head;
        }
    }
    ListNode* reverseEvenLengthGroups(ListNode* head) {
        return helper(head,1,NULL);
    }
};