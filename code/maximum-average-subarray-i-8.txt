**Approach 1 using presum vector O(n) space**
class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> presum(n);
        presum[0] = nums[0];
        for(int i=1; i<n; i++){
            presum[i] = presum[i-1] + nums[i];
        }
        
        
        double maxAvg = -DBL_MAX;;
        for(int i=0; i<n; i++){
            if((i+k-1)>=n){
                break;
            } else {
                double sum = presum[i+k-1] - presum[i] + nums[i];
                sum = sum/k;
                maxAvg = max(maxAvg, sum);
            }
        }
        
        return maxAvg;
    }
};

Approach 2 O(1) space

class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        int n = nums.size();
        int start = 0;
        double sum = 0;
        double maxAvg = -DBL_MAX;
        for(int i=0; i<n; i++){
            sum+= nums[i];
            if((i-start)+1>k){
                sum-= nums[start];
                start++;
            }
            
            if(((i-start)+1) == k){
                double ans = sum/k;
                maxAvg = max(maxAvg, ans); 
            }
        }
        
        return maxAvg;
    }
};
