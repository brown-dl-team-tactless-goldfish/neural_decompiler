class Solution {
public:
    typedef long long ll;
    long long countQuadruplets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> suf(n, vector<int> (n + 1, 0));
        vector<vector<int>> pre(n, vector<int> (n + 1, 0));
        for(int l = n - 2; l >= 0; l--) {
            suf[l] = suf[l + 1];
            for (int ele = 0; ele < nums[l + 1]; ele++) {
                suf[l][ele]++;
            }
        }      
        for(int i = 1; i < n; i++) {
            pre[i] = pre[i - 1];
            for(int ele = nums[i - 1] + 1; ele <= n; ele++) {
                pre[i][ele]++;
            }
        } 
        ll ans = 0;
        for(int j = 1; j < n - 2; j++) {
            for(int k = j + 1; k < n - 1; k++) {
                if(nums[j] > nums[k]) {
                    ans += (pre[j][nums[k]] * suf[k][nums[j]]);
                }
            }
        }
        return ans;
    }
};