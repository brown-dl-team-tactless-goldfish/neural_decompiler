class Solution {
public:
    bool find(vector<int> &arr,vector<int> &kmp,vector<int> &nums,int &i){
        int l = 0;
        while(l<arr.size() && i<nums.size()){
            if(arr[l]==nums[i]) l++;
            else{
               while(l && arr[l]!=nums[i]) l = kmp[l-1];
               if(arr[l]==nums[i]) l++;
            }
            i++;
        }
        if(l>=arr.size()) return 1;
        else return 0;
    }
    bool canChoose(vector<vector<int>>& arr, vector<int>& nums) {
        int k = 0,i=0;
        for(i = 0;i<arr.size() && k<nums.size();++i){
            vector<int> &temp = arr[i];
            vector<int> kmp(temp.size(),0);
            int l = 0,r=1;
            while(r<temp.size()){
                if(temp[l]==temp[r]){
                    kmp[r] = l+1; l++;
                }
                else{
                    while(l && temp[l]!=temp[r]) l = kmp[l-1];
					if(temp[l]==temp[r]){
                        l++; kmp[r] = l;
                    }
                }
                r++;
            }
            if(!find(temp,kmp,nums,k)) return 0;
        }
        if(i<arr.size()) return 0;
        return 1;
    }
};