#define N 26

int isAnagram(int *a, int *b) {
    for(int i = 0; i < N; i++) {
        if(a[i] != b[i])
            return 0;
    }
    return 1;
}

int* findAnagrams(char * s, char * p, int* returnSize) {
    int sLength, pLength;;
    int sMap[N] = {0}, pMap[N] = {0};
    int *ans = (int *) 0;
    
    *returnSize = 0;
    
    if ((sLength = (int) strlen(s)) < (pLength = (int) strlen(p)))
        return ((int *) 0);
    
    for (int i = 0; i < pLength; i++)
        pMap[(p[i] - 'a')]++;
    
    for (int i = 0; i < sLength; i++) {
        if(i >= pLength)
            sMap[s[i - pLength] - 'a']--;
        sMap[s[i] - 'a']++;
        if(isAnagram(sMap, pMap)) {
            *returnSize = *returnSize + 1;
            if (*returnSize == 1)
                ans = (int *) malloc(sizeof(int));
            else
                 ans = realloc(ans, *returnSize * sizeof(int));
            ans[*returnSize - 1] = i + 1 - pLength;
        }
    }
    return ans;
}