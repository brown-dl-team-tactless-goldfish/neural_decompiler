//from tyagsa
#define ll long long
#define mod 1000000007
ll mpow(ll a, ll b, ll m)
{
	if (b == 0)
		return 1;
	ll x = mpow(a, b / 2, m);
	x = (x * x) % m;
	if (b % 2)
	{
		x = (x * a) % m;
	}
	return x;
}
class Solution {
public:
    int countPartitions(vector<int>& nums, int k) {
        ll totSum =0;
        int n = nums.size();
        for(auto node : nums) totSum += node;
        if((2*k)>totSum) return 0;
        sort(nums.begin(),nums.end());
        
        if(n == 1) return 0;
        
        vector<vector<ll>> dp(n,vector<ll>(k,0));
        
        for(int i =0 ;i<n ; i+=1){
            for(int j =0; j < k; j+=1){
                if(!i && !j){
                    dp[i][j] = 1;
                    continue;
                }
                if(i == 0){
                    if(j==nums[i]) dp[i][j] = 1;
                    continue;
                }
                if(nums[i]>j) dp[i][j] = dp[i-1][j];
                else{
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]];
                    dp[i][j] %= mod;
                }
            }
        }
        
        ll ways= 0;
        for(int i = 1; i< k ; i+=1){
            ways += dp[n-1][i];
        }
        ways %= mod;
        ll totWaysOfDividing = mpow(2,n,mod);
        totWaysOfDividing -= 2;
        totWaysOfDividing -= 2*ways;
        totWaysOfDividing = (totWaysOfDividing%mod + mod)%mod;
        return totWaysOfDividing;
        
        
        
    }
};