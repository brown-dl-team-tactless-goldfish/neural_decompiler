class Solution {
public:
    int numWays(string s) {
        long long MOD = 1000000007;
        int cnt = 0;
        for(char ch : s){
            if(ch == '1')cnt++;
        }
        if(cnt % 3 > 0 || s.size() == 0)return 0;
        vector<long long>seg;
        int need = cnt / 3;
        if(cnt == 0){
            long long sz = s.size() - 1;
            return (sz*(sz-1)/2)%MOD;   /// all zero return n-3+1 C 2
        }
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '1'){
                need--;
            }
            if(need == 0){
                int c = 0;
                while(i + 1 < s.size() && s[i+1] == '0'){
                    i++;
                    c++;
                }
                seg.push_back(c);
                need = cnt / 3;
            }
            if(seg.size() == 2)break;
        }
        return ((seg[0]+1)*(seg[1]+1)) % MOD;   /// number of zero between (s1 and s2) + 1 multiple (s2 and s3)+1
    }
};