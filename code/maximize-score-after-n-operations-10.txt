class Solution {
public:
    int dp[16385][8];
    int solve(vector<int>&nums , int &mask , int operation , int K ){
        if(operation > K) return 0 ;
        if(dp[mask][operation] != -1 ) return dp[mask][operation] ; 
        
        int ans = 0 ;
        for(int i = 0 ; i < nums.size() ; ++i ){
            
            for(int j = i + 1 ;j < nums.size() ; ++j ){
                if(!(mask&(1<<i)) and !(mask&(1<<j)) ){
                    mask = mask | (1 << i) | (1 << j) ;
                    ans = max(ans,operation*__gcd(nums[i],nums[j]) + solve(nums,mask,operation+1,K)) ;
                    mask = mask & (~(1 << i)) & (~(1<<j)) ;
                }
            }
        }
        
        return dp[mask][operation] = ans ;
        
    }
    int maxScore(vector<int>& nums) {
        memset(dp,-1,sizeof(dp)) ;
        int mask = 0 ;
        return solve(nums,mask,1,(int)nums.size()/2) ;
    }
};