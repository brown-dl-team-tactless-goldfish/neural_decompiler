/*
    Binary lifting:
        f(i, k) is i's 2^k ancester.
        f(i, 0) is i's 2^0 ancester, namely i's parent
        
    f is like dp's state function, for each node, will have logn f(i, j)
    
    key: f(i, k) = f(f(i, k-1), k-1) using 2^k = 2^(k - 1) + 2^(k - 1)
    
    
    DP transition function: f(i, k) = f(f(i, k-1), k-1) 
    
    
    we can iteratively compute all f(i, j)
    
    The topological order is top-down,
    Using BFS to pre-compute.
    
*/

const int N = 50010;
class TreeAncestor {
    vector<int> gh[N];
    int f[N][16];
public:
    TreeAncestor(int n, vector<int>& p) {
        memset(f, -1, sizeof f);
        int root;
        for (int i = 0; i < n; ++ i)
        {
            if (p[i] == -1) root = i;
            else gh[p[i]].push_back(i);
        }
        
        queue<int> q;
        q.push(root);
        while (q.size())
        {
            int u = q.front(); q.pop();
            for (int v : gh[u])
            {
                f[v][0] = u;
                
                for (int k = 1; k < 16; ++ k)
                    if (f[v][k-1] != -1)
                        f[v][k] = f[f[v][k - 1]][k - 1];
                q.push(v);
            }
        }
    }
    
    int getKthAncestor(int x, int k) {
        for (int i = 0; i < 16; ++ i)
            if (k >> i & 1)
            {
                x = f[x][i];
                if (x == -1) // out of the bound
                    return x;
            }
        return x;
    }
};

/**
 * Your TreeAncestor object will be instantiated and called as such:
 * TreeAncestor* obj = new TreeAncestor(n, parent);
 * int param_1 = obj->getKthAncestor(node,k);
 */