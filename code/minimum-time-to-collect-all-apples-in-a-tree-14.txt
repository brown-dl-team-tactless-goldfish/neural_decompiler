class Solution {
public:

    int time = 0;
    int dfs(int i, int prev, vector<int>adj[], vector<bool>& hasApple,int dist){
        bool ok = hasApple[i];
        for(auto j:adj[i]){
            if(j==prev) continue;
            int temp = dfs(j,i,adj,hasApple,dist+1) ;
            if(temp) time += temp - dist, ok = true;
        }

        return ok ? dist : 0;
    }

    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        int m = edges.size();
        vector<int> adj[n];
        for(auto i:edges){
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }

        dfs(0,-1,adj,hasApple,0);
        return time * 2;
    }
};