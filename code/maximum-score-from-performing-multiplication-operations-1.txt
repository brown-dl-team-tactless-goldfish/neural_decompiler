int max(int a, int b) {
    return a + (b-a)*(a<b);
}

int mxrec(int *n, int i, int j, int k, int *m, int ms, int **memo) {
    int result;
    if (k >= ms) {
        return 0;
    } 
    if (memo[i][j] > INT_MIN) {
        return memo[i][j];
    }
    result = max(mxrec(n, i+1, j, k+1, m, ms, memo) + m[k] * n[i],
                     mxrec(n, i, j-1, k+1, m, ms, memo) + m[k] * n[j]);
    memo[i][j] = result;
    return result;
}

int maximumScore(int* nums, int numsSize, int* multipliers, int multipliersSize) {
    int i, j, **memo;
    
/* The Excluded Middle *)   */
    if (numsSize > 2*multipliersSize) {
        for (i = 0; i < multipliersSize; ++i) {
            nums[i+multipliersSize] = nums[numsSize - multipliersSize+i];
        }
        numsSize = 2*multipliersSize;
    }
    memo = malloc(numsSize * sizeof(int*));
    for (i = 0; i < numsSize; ++i) {
        memo[i] = malloc(numsSize * sizeof(int));
        for (j = 0; j < numsSize; ++j) {
                memo[i][j] = INT_MIN;
        }
    }
    return mxrec(nums, 0, numsSize-1, 0, multipliers, multipliersSize, memo);
}