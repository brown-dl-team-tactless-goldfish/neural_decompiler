class Solution {
public:
    int minimumTime(int n, vector<vector<int>>& r, vector<int>& time) {
       map<int,vector<int>> g;
        vector<int>v(n+1,0);
        for(auto i : r){
            g[i[0]].push_back(i[1]) ; 
            v[i[1]]++;
        }
        int ans= 0; 
        queue<int>q;
        vector<int>finish(n+1,0);
        
        for(int i=1;i<=n;i++)
        {
            if(v[i]==0){
                q.push(i);
                finish[i] = time[i-1] ; 
            }
        }
        int tot;
        while(!q.empty())
        {
            int sz = q.size();
        
            for(int i = 0 ; i <sz;i++ )
            {
                int node = q.front();
                q.pop();
              //  finish[node] = max(finish[c] , finish[node] + time[node-1]);
                for(auto c : g[node])
                {
                    v[c]--;
                     finish[c] = max(finish[c] , finish[node] + time[c-1]);
                    if(v[c] == 0){
                        q.push(c); //cout<<c<<" ";
                      
                    }
                }
            }
            
        }
        return *max_element(finish.begin(),finish.end());
        
    }
};