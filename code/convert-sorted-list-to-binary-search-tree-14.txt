struct TreeNode *add(struct ListNode *head, struct TreeNode *root)
{
    // printf("%d %d", head->val, head->next);
    if(head == NULL)
    {
        return NULL;
    }
    if(head->next == NULL)
    {
        root = malloc(sizeof(struct TreeNode));
        root->left = NULL;
        root->right = NULL;
        root->val = head->val;
        return root;
    }
    if(head->next->next == NULL)
    {
        // printf("\ta");
        root = malloc(sizeof(struct TreeNode));
        root->left = NULL;
        root->right = NULL;
        root->val = head->next->val;
        root->left = malloc(sizeof(struct TreeNode));
        root->left->left = NULL;
        root->left->right = NULL;
        root->left->val = head->val;
        return root;
    }
    printf("Enter");
    struct TreeNode *tmp = malloc(sizeof(struct TreeNode));
    tmp->left = NULL;
    tmp->right = NULL;
    struct ListNode *slow = head;
    struct ListNode *fast = head;
    struct ListNode* temp = NULL;
    
        root = malloc(sizeof(struct TreeNode));
        root->left = NULL;
        root->right = NULL;
    while(true)
    {
        fast = fast->next->next;
         if(fast->next == NULL)
        {
            temp = slow;
        }
        else
        {
            temp = slow->next;
        }
        slow = slow->next;
        if(fast->next == NULL || fast->next->next == NULL)
        {
        // temp = slow;
            
            break;
        }
    }
    // printf("%d__%d", temp->val, slow->next->val);
    if(fast->next == NULL)
    {
        tmp->val = slow->val;  
        slow = slow->next;
    }
    else
    {
        tmp->val = slow->next->val;
        slow = slow->next->next;
    }

    // slow = slow->next;        
    
    temp->next = NULL;
   
    fast = head;
    root = tmp;
    // printf("  %d...%d  ", fast->val, slow->val);
    root->left = add(fast, root->left);
    root->right = add(slow, root->right);
    return root;
    
}

struct TreeNode* sortedListToBST(struct ListNode* head){
     if(head == NULL)
    {
        return NULL;
    }
    if(head->next == NULL)
    {
        struct TreeNode *root = malloc(sizeof(struct TreeNode));
        root->left = NULL;
        root->right = NULL;
        root->val = head->val;
        return root;
    }
    if(head->next->next == NULL)
    {
        struct TreeNode *root = malloc(sizeof(struct TreeNode));
        root->left = NULL;
        root->right = NULL;
        root->val = head->next->val;
        root->left = malloc(sizeof(struct TreeNode));
        root->left->left = NULL;
        root->left->right = NULL;
        root->left->val = head->val;
        return root;
    }
    struct TreeNode* root = malloc(sizeof(struct TreeNode));
    struct ListNode* temp = NULL;
    
    root->left = NULL;
    root->right = NULL;
    struct ListNode *slow = head;
    struct ListNode *fast = head;
    while(true)
    {
        fast = fast->next->next;
        if(fast->next == NULL)
        {
            temp = slow;
        }
        else
        {
            temp = slow->next;
        }
        slow = slow->next;
        if(fast->next == NULL || fast->next->next == NULL)
        {
        // temp = slow;
            
            break;
        }
    }
    // printf("%d %d aaaa", temp->val, slow->val);
    if(fast->next == NULL)
    {
        root->val = slow->val;   
        slow = slow->next;
        
    }
    else
    {
        root->val = slow->next->val;
        slow = slow->next->next;
    }
    temp->next = NULL;
    // root->val = slow->val;
    fast = head;
    // printf("%d0000%d", fast->val, slow->val);
    root->left = add(fast, root->left);
    root->right = add(slow, root->right);
    return root;
}