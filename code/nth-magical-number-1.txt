int Commonmultiple(int a, int b, int* oneround){
    int box[30] = {0};
    int count = 0;
    int copy = b;
    int oneround_atimes = 1;
    for (int i = 2 ; i <= sqrt(b) ; i++){
        while (b % i == 0){
            box[count] = i;
            count++;
            b /= i;
        }
    }
    if (b != 1){
        box[count] = b;
        count++;
    }
    for (int i = 0 ; i < count ; i++){
        if(a % box[i] == 0){
            a /= box[i];
        } else {
            oneround_atimes *= box[i];
        }
    }
    *oneround = oneround_atimes + a - 1;
    return a*copy;
}

int nthMagicalNumber(int n, int a, int b){
    int mod = 1e9+7;
    long long commonmultiple;
    int oneround = 0;
    if (a > b){
        commonmultiple = Commonmultiple(a, b, &oneround);
    } else commonmultiple = Commonmultiple(b, a, &oneround);
    int lost = n % oneround;
    int count = 0;
    long long now = 0;
    long long adda = 0;
    long long addb = 0;
    while (count < lost) {
        if (adda + a > addb + b){
            addb += b;
            now = addb;
        } else {
            adda += a;
            now = adda;
        }
        count++;
    }
    
    if (n >= oneround){
        now += ((n/oneround)*commonmultiple) % mod;
    } 
    return now % mod ;
}