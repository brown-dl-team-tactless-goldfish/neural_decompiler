#define TOTAL_CHAR 26
//Helper function for calling in qsort function in ascending order
static inline int func_ascend(const void* num1, const void* num2){
    return (*(int*)num1 - *(int*)num2);
}

//function to check wheater two arrays are equal
bool array_comp(int* array_1, int* array_2){
    for(int ptr=0; ptr < TOTAL_CHAR; ptr++){
        if(array_1[ptr] != array_2[ptr]){return false;}
    }
    return true;    
}

bool closeStrings(char * word1, char * word2){
    int word1_len = strlen(word1);
    //protection and termination condtion on lenght being not equal
    if(word1_len != strlen(word2)){return false;}

    int word1_char_count[TOTAL_CHAR] = {0},word2_char_count[TOTAL_CHAR] = {0};     //arry to count number of times individual charater occurance
    int word1_char_occur[TOTAL_CHAR] = {0},word2_char_occur[TOTAL_CHAR] = {0};     //arry to keep tab on occurance of the character

    for(int ptr = 0; ptr < word1_len; ptr++){
        word1_char_count[word1[ptr] - 'a']++;     //word1 character count 
        word2_char_count[word2[ptr] - 'a']++;     //word2 character count 
        word1_char_occur[word1[ptr] - 'a'] = 1;   //word1 character presence
        word2_char_occur[word2[ptr] - 'a'] = 1;   //word2 character presence
    }
    //sorting the count array
    qsort(word1_char_count,TOTAL_CHAR,sizeof(int),func_ascend);
    qsort(word2_char_count,TOTAL_CHAR,sizeof(int),func_ascend);

    //return after comapring the sorted result
    //comapring the count of the indivudual character in string
    //comapring the occurance of the given character in string 
    return (array_comp(word1_char_count,word2_char_count) && array_comp(word1_char_occur,word2_char_occur));
}