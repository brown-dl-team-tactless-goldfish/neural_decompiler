class Solution {
public:
    bool matchReplacement(string s, string sub, vector<vector<char>>& mappings) {
        if (s.length() < sub.length())
            return false;
        unordered_map<char, unordered_set<char>> mp;
        for (auto& m : mappings)
            mp[m[0]].insert(m[1]);
        for (int i = 0; i <= s.length() - sub.length(); i++)
            if (matching(sub, s, mp, 0, i))
                return true;
        return false;
    }

private: 
    bool matching(string& sub, string& s, unordered_map<char, unordered_set<char>>& mp, int i, int j)
    {
        if (i == sub.length())
            return true;
        bool matched = (sub[i] == s[j]);
        if (matched)
            return matching(sub, s, mp, i + 1, j + 1);
        for (auto& c : mp[sub[i]])
            if (s[j] == c)
                return matching(sub, s, mp, i + 1, j + 1);
        return false;
    }
};