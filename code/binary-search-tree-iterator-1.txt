void inorder(struct TreeNode * root, int ** value, int * num){
    if (root == NULL)
        return;
    inorder(root->left, value, num);
    value[0][0] = root->val;
    *value = *value + 1;
    *num = *num + 1;
    inorder(root->right, value, num);
    return;
}

typedef struct {
    int * value;
    int index;
    int num;
} BSTIterator;


BSTIterator* bSTIteratorCreate(struct TreeNode* root) {
    int ** value = malloc(sizeof(int *));
    value[0] = malloc(sizeof(int) * 10000);
    int * start = value[0];
    int num = 0;
    inorder(root, value, &num);
    BSTIterator * it = malloc(sizeof(BSTIterator));
    it->value = start;
    it->index = 0;
    it->num = num;
    return it;
}

/** @return the next smallest number */
int bSTIteratorNext(BSTIterator* obj) {
    int val = obj->value[obj->index];
    obj->index++;
    return val;
}

/** @return whether we have a next smallest number */
bool bSTIteratorHasNext(BSTIterator* obj) {
    if (obj->index < obj->num)
        return true;
    else
        return false;
}

void bSTIteratorFree(BSTIterator* obj) {
    free(obj->value);
    free(obj);
}