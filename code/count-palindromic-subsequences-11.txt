class Solution {
public:
    int countPalindromes(string s) {
        int N = s.size(), preCnt[10]{}, dp[10001][100]{}, prefix[100]{}, suffix[100]{}, tailCnt[10]{};

        for(int i = 0; i < N; i++) {
            for(int j = 0; j < 10; j++) prefix[j*10 + (s[i]-'0')] += preCnt[j];
            copy(begin(prefix), end(prefix), begin(dp[i]));
            preCnt[s[i]-'0']++;
        }

        long long ans = 0, mod = 1e9+7;
        for(int i = N-1; i >= 2; i--) {
            for(int k = 0; k < 100; k++) ans = (ans + ((long long)suffix[k]*dp[i-1][k]))%mod;
            for(int j = 0; j < 10; j++) suffix[j*10 + (s[i]-'0')] += tailCnt[j];
            tailCnt[s[i]-'0']++;
        }
        return ans;
    }
};