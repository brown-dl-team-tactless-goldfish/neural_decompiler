vector<string> findAllRecipes(vector<string>& recipes, vector<vector<string>>& ingredients, vector<string>& supplies) {
        unordered_map<string,vector<string>> graph;
        unordered_set<string> s;
        for(auto str:supplies)
        {
            s.insert(str);
        }
        int n=recipes.size();
        unordered_map<string,int> indegree;
        for(auto x:recipes)
        {
            indegree[x]=0;
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<ingredients[i].size();j++)
            {
                if(s.find(ingredients[i][j])==s.end())
                {
                    graph[ingredients[i][j]].push_back(recipes[i]);
                    indegree[recipes[i]]++;
                }
            }
        }
        queue<string> q;
        for(auto x:recipes)
        {
            if(indegree[x]==0)
            {
                q.push(x);
            }
        }
        vector<string> ans;
        while(!q.empty())
        {
            int c = q.size();
            while(c!=0)
            {
                string temp = q.front();
                q.pop();
                ans.push_back(temp);
                for(auto adj:graph[temp])
                {
                    indegree[adj]--;
                    if(indegree[adj]==0)
                    {
                        q.push(adj);
                    }
                }
                c--;
            }
            
        }
        return ans;
    }