

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

void merge(int arr[500][2], int s, int m, int e, int sortByNum)
{
    int n1 = m - s + 1;
    int n2 = e - m;
    
    int aN1[n1][2];
    int aN2[n2][2];
    
    int cmIdx = s;
    int n1Idx = 0;
    int n2Idx = 0;
    
    for(int i = 0; i < n1; i++)
    {
        aN1[i][0] = arr[s+i][0];
        aN1[i][1] = arr[s+i][1];        
    }
    for(int ii = 0; ii < n2; ii++)
    {
        aN2[ii][0] = arr[m+ii+1][0];
        aN2[ii][1] = arr[m+ii+1][1];        
    }   
    
    while((n1Idx < n1) && (n2Idx < n2))
    {
        if((sortByNum == 0)? aN2[n2Idx][1] < aN1[n1Idx][1] : aN2[n2Idx][0] < aN1[n1Idx][0])
        {
            arr[cmIdx][0] = aN2[n2Idx][0];
            arr[cmIdx++][1] = aN2[n2Idx++][1];
        }
        else
        {
            arr[cmIdx][0] = aN1[n1Idx][0];
            arr[cmIdx++][1] = aN1[n1Idx++][1];
        }
    }
    
    while(n1Idx < n1)
    {
        arr[cmIdx][0] = aN1[n1Idx][0];
        arr[cmIdx++][1] = aN1[n1Idx++][1];        
    }
    while(n2Idx < n2)
    {
        arr[cmIdx][0] = aN2[n2Idx][0];
        arr[cmIdx++][1] = aN2[n2Idx++][1];        
    }    
}

void mergeSort(int arr[500][2], int s, int e, int sortByNum)
{
    if(s < e)
    {
        int m = s + (e - s)/2;
        mergeSort(arr, s, m, sortByNum);
        mergeSort(arr,m + 1, e, sortByNum);
        merge(arr, s, m, e, sortByNum);
    }
}

int countOnes(int no)
{
    int count = 0;
    while(no)
    {
        no = no & no - 1;
        count++;
    }
    return count;
}

int* sortByBits(int* arr, int arrSize, int* returnSize){
    int arrF[500][2] = {0};
    
    int *retArr = (int *)malloc(sizeof(int) * arrSize);
    
    for(int idx = 0; idx < arrSize; idx++)
    {
        arrF[idx][0] = arr[idx];
        arrF[idx][1] = countOnes(arr[idx]);
    }
    
    mergeSort(arrF, 0, arrSize - 1, 0);
    
    int bitstate = arrF[0][1];
    int startIdx = 0;
    
    for(int i = 0 ; i < arrSize; i++)
    {
        if(arrF[i][1] != bitstate)
        {
            mergeSort(arrF, startIdx, i - 1, 1);
            bitstate = arrF[i][1];
            startIdx = i;
        }
    }
    
    if(arrF[arrSize - 1][1] == bitstate)
    {
        mergeSort(arrF, startIdx, arrSize - 1, 1);
    }    
    
    for(int i =0 ; i <arrSize; i++)
    {
        retArr[i] = arrF[i][0];
    }
    
    *returnSize = arrSize;
    return retArr;
}