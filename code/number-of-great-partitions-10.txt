class Solution {
public:
    const int mod = 1e9 + 7;
    void add(int& a, int b) {
        a += b;
        if (a >= mod) {
            a -= mod;
        }
    }
    int mul(int a, int b) {
        return ((long long) a * b) % mod;
    }
    int countPartitions(vector<int>& nums, int k) {
        int n = nums.size();
        vector<vector<int>> dp(n + 1, vector<int> (k));
        dp[0][0] = 1;
        long long total = 0;
        for (int i = 0; i < n; i++) {
            total += nums[i];
            for (int sum = 0; sum < k; sum++) {
                add(dp[i + 1][sum], dp[i][sum]);
                if (sum + nums[i] < k) {
                    add(dp[i + 1][sum + nums[i]], dp[i][sum]);
                }
            }
        }
        if (k > total / 2) {
            return 0;
        }
        int rem = 0;
        for (int i = 0; i < k; i++) {
            add(rem, dp[n][i]);
        }
        int pw = 1;
        for (int i = 0; i < n; i++) {
            pw = mul(pw, 2);
        }
        rem = mul(rem, 2);
        pw -= rem;
        if (pw < 0) {
            pw += mod;
        }
        return pw;
        
    }
};