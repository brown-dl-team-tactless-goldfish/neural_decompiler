class Solution {
    vector<vector<int>> table;

    void build_table(vector<int> &a, int n) {
        for(int i = 0; i < n; i++) table[i][0] = a[i];

        for(int j = 1; (1 << j) <= n; j++) {
            for(int i = 0; (i + (1 << j) - 1) < n; i++) {
                table[i][j] = max(table[i][j-1], table[i+(1<<(j-1))][j-1]);
            }
        }
    }

    int get_max(int l, int r) {
        int j = log2(r-l+1);
        return max(table[l][j], table[r-(1<<j)+1][j]);
    }
    
public:
    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {
        sort(items.begin(), items.end());
        
        vector<int> beauty(items.size()), price(items.size());
        for(int i = 0; i < items.size(); i++) {
            price[i] = items[i][0];
            beauty[i] = items[i][1];
        }
        
        table = vector<vector<int>>(items.size()+5, vector<int> (20, 0));
        build_table(beauty, items.size());
        
        vector<int> ans(queries.size());
        for(int i = 0; i < queries.size(); i++) {
            int val = queries[i];
            int pos = upper_bound(price.begin(), price.end(), val) - price.begin() - 1;
            if(pos < 0) 
                ans[i] = 0;
            else if(pos == 0) 
                ans[i] = beauty[0];
            else
                ans[i] = get_max(0, pos);
        }
        
        return ans;
    }
};