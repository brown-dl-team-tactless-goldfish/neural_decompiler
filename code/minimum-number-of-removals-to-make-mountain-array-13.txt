class Solution {
public:
    int minimumMountainRemovals(vector<int>& nums) {
        auto v = nums;
        reverse(v.begin(), v.end());
        auto left = minLisRemovals(nums), right = minLisRemovals(v);
        int res = 9999999;
        for(int i=0;i<nums.size();i++){
            res = min(res, left[i] + right[nums.size() - i-1]);
        }
        return res;
    }
    
    vector<int> minLisRemovals(const vector<int>& nums){
        vector<int> res;
        vector<int> lis;
        for(int i = 0; i<nums.size(); i++){
            int x = nums[i];
            auto it = lower_bound(lis.begin(), lis.end(), x);
            int lisLen = it - lis.begin() + 1;
            if(lisLen > 1) res.push_back(i+1 - lisLen);
            else res.push_back(999999);
            
            if(it == lis.end()) lis.push_back(x);
            else *it = x;
        }
        return res;
    }
};