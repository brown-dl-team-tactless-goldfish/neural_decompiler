class Solution {
public:
    int cnt[1000][26];
    int dp[1000][1000];
    int numWays(vector<string>& words, string target) {
        int n = words.size();
        int m = words[0].length();        
        int k = target.length();        
        int i , j;
        const int r = 1000000007;

        // a cumulate count of each alphabet till j position
        // to get a count of jth position of words for a alphabet
        for (i = 0; i < n; ++i) ++cnt[0][words[i][0] - 'a'];        
        for(j = 1; j < m; ++j) {            
            for (i = 0; i < n; ++i) ++cnt[j][words[i][j] - 'a'];
            for (i = 0; i < 26; ++i) cnt[j][i] += cnt[j-1][i];
        }

        // get answer            
        // till j th position of words, count to make 1 ~ k length of target.
        dp[0][0] = cnt[0][target[0]-'a']; // initial
        int c = 0;    
        for (j = 1; j < m; ++j) {
            for (i = 0; i < k; ++i) {
                if(i > j) break; // is impossible
                if(m - j < k - i) continue; // is impossible

                c = target[i] - 'a'; // i th character of target
                if(i == 0) {
                    dp[j][i] = (cnt[j][c] - cnt[j-1][c] + dp[j-1][i]) % r;
                }
                else { // calculate count              
                    dp[j][i] = ((long long)(cnt[j][c] - cnt[j-1][c]) * dp[j-1][i-1] + dp[j-1][i]) % r;                     
                }
            }
        }        
        // get answer
        return dp[m-1][k-1];
    }
};