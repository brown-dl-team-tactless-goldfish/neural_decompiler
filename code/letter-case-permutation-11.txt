#define bitfield uint16_t

bool is_alphabetic(char ch) {
    return ch >= 'A' && ch <= 'z';
}

char** letterCasePermutation(char* s, int* returnSize) {
    int len = 0;
    int alphabetic_count = 0;
    char* walker = s;
    while (*walker) {
        if (is_alphabetic(*walker++)) {
            alphabetic_count += 1;
        }
        len += 1;
    }
    int permutation_count = powl(2, alphabetic_count);
    char** result = (char**) malloc(permutation_count * sizeof(char*));
    char* strs = (char*) malloc((len * sizeof(char) + 1) * permutation_count);
    for (bitfield permutation = 0; permutation < permutation_count; permutation++) {
        int offset = 0;
        char* str = strs + permutation * (len + 1);
        for (int i = 0; i < len; i++) {
            char ch = s[i];
            if (is_alphabetic(ch)) {
                ch = ((permutation & 1 << offset++) != 0)
                     ? toupper(ch)
                     : tolower(ch);
            }
            str[i] = ch;
        }
        str[len] = '\0';
        result[permutation] = str;
    }
    *returnSize = permutation_count;
    return result;
}
