class Solution {
public:
    std::string solveEquation(string const &e) {
        std::string s;
        
        auto validate = [](bool cond){ if (!cond) throw std::invalid_argument("invalid equation"); };
        
        validate(!e.empty() && '=' != e.front() && '=' != e.back());
        
        int k   = 0;
        int b   = 0;
        int inv = 1;
        
        std::stack<char> st;
        
        auto extract_num = [&]{
            int d = 0;
            validate(std::isdigit(st.top()));
            for (int exp = 1; !st.empty() && std::isdigit(st.top());
                 d += exp * (st.top() - '0'), st.pop(), exp *= 10)
                ;
            return d;
        };
        
        auto extract = [&]{
            int v = 0;
            while (!st.empty())
            {
                if (auto const d = extract_num())
                    v += inv * (st.top() == '+' ? 1 : -1) * d;
                st.pop();
            }
            return v;
        };
        
        for (auto c : e)
        {
            switch (c)
            {
                case '0'...'9':
                    if (st.empty())
                        st.push('+');
                    st.push(c);
                    break;
                case '=':
                    validate(1 == inv);
                    b += extract();
                    inv = -1;
                    break;
                case '+':
                case '-':
                    validate(st.empty() || std::isdigit(st.top()));
                    b += extract();
                    st.push(c);
                    break;
                case 'x':
                    if (st.empty())
                        st.push('+');
                    if (!std::isdigit(st.top()))
                        st.push('1');
                    k += extract();
                    break;
                default:
                    validate(false);
            }
        }
        
        validate(-1 == inv);
        b += extract();
        
        return 0 == k ? 0 == b ? "Infinite solutions" : "No solution" : "x=" + std::to_string(-b / k);
    }
};