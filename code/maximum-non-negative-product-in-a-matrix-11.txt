template<typename T1>
class Solution {
  int rows, cols;
public:
  T1 mp ( vector<vector<T1>>& g ) {
try{
    if(not g.size()){
      string a = "size is 0";
      throw a;
    }

    rows = g.size();
    cols = g[0].size();

    T1 maxProduct[rows][cols];
    T1 minProduct[rows][cols];

    maxProduct[0][0] = minProduct[0][0] = g[0][0];

    //1st row
    for( int i = 1; i < cols; ++i ) {
      maxProduct[0][i] = g[0][i] * maxProduct[0][i-1];
      minProduct[0][i] = maxProduct[0][i];
    }

    //1st col
    for( int i = 1; i < rows; ++i ) {
      maxProduct[i][0] = g[i][0] * maxProduct[i-1][0];
      minProduct[i][0] = maxProduct[i][0];
    }
    T1 a=0, b=0, c=0, d=0;
    for (int i = 1; i < rows; ++i) {
      for (int j = 1; j < cols; ++j) {
        a = g[i][j] * maxProduct[i-1][j];
        b = g[i][j] * maxProduct[i][j-1];
        c = g[i][j] * minProduct[i-1][j];
        d = g[i][j] * minProduct[i][j-1];

        maxProduct[i][j] = max (max(a, b),
                                max(c, d));
        minProduct[i][j] = min (min(a, b),
                                min(c, d));
      }
    }
    return (maxProduct[rows-1][cols-1] < 0) ? -1 : (maxProduct[rows-1][cols-1] % 1000000007);
  }catch(string e){
    cout<<"Exception!! "<<e;
  }catch(...){
    cout<<"Caught=";
  }
  }
};
int main() {
  vector<vector<int64_t>> g = {   //8
    {1,-2,1},
    {1,-2,1},
    {3,-4,1}
  };
  Solution <int64_t>s;
  cout << s.mp(g);
}