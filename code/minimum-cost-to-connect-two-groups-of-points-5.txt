 public class Solution
    {
        private void Helper(IList<IList<int>> cost, int?[,] dp, int idx, int maskRight)
        {
            checked
            {

                if (dp[idx, maskRight].HasValue)
                {
                    return;
                }

                int n = cost.Count;
                int m = cost[0].Count;

                int powM = 1 << m;

                if (idx == n && maskRight == powM - 1)
                {
                    dp[idx, maskRight] = 0;
                    return;
                }

                if (idx == n && maskRight != powM - 1)
                {
                    dp[idx, maskRight] = int.MaxValue;
                    return;
                }

                int res = int.MaxValue;

                for (int j = 0; j < m; j++)
                {
                    var newRightMask = maskRight | (1 << j);
                    var costThis = cost[idx][j];
                    Helper(cost, dp, idx + 1, newRightMask);

                    var inner = dp[idx + 1, newRightMask].Value;
                    if (inner != int.MaxValue)
                    {
                        res = Math.Min(res, costThis + inner);
                    }

                    if (newRightMask != maskRight)
                    {
                        Helper(cost, dp, idx, newRightMask);
                        var cand = dp[idx, newRightMask].Value;
                        if (cand != int.MaxValue)
                        {
                            res = Math.Min(res, costThis + cand);
                        }
                    }
                }


                dp[idx, maskRight] = res;
            }
        }

        public int ConnectTwoGroups(IList<IList<int>> cost)
        {
            int n = cost.Count;
            int m = cost[0].Count;

            int powM = 1 << m;

            int?[,] dp = new int?[n + 1,powM];
            Helper(cost, dp, 0, 0);
            return dp[0, 0].Value;
        }
    }