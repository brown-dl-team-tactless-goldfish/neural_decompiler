typedef struct position{
    int val;
    struct position *next;
} P;

void create(int val, struct Node **head, struct Node **tail){
    struct Node *new = (struct Node*)malloc(sizeof(struct Node));
    if (new == NULL)
        return;
    new->val = val;
    new->next = NULL;
    new->random = NULL;
    
    if (*head == NULL){
        *head = new;
        *tail = new;
    }
    else{
        (*tail)->next = new;
        *tail = new;
    }
}

int get_random(struct Node *random, struct Node *head){
    struct Node *c = head;
    int k = 0;
    
    if (random == NULL)
        return -1;
    
    else{
        while (c->next != NULL){
            if (random == c)
                return k;
            c = c->next;
            k++;
        }
    }
    return k; 
}

void insert(P **head, P **tail, int val){
    P *new = (P*)malloc(sizeof(P));
    P *c = *head;
    if (new == NULL)
        return;
    new->val = val;
    new->next = NULL;
    
    if (*head == NULL){
        *head = new;
        *tail = new;
    }
    else{
        (*tail)->next = new;
        *tail = new;
    }
}

void to_link(struct Node *head, struct Node *node, int pos){
    int i = 0;
    struct Node *c = head;
    
    if (pos == -1){
        node->random = NULL;
        return;
    }
    while (c != NULL){
        if (i == pos){
            node->random = c;
            return;
        }
        i++;
        c = c->next;
    }
}

struct Node* copyRandomList(struct Node* head) {
	P *positions = NULL;
    P *pos_tail = NULL;
    P *t = NULL;
    struct Node *c = head;
    struct Node *new_head = NULL, *tail = NULL, *main = NULL;
    int random;
    
    if (head == NULL)
        return NULL;
    
    //create the linear and save the randon pointed pos
    while (c != NULL){
        create(c->val, &new_head, &tail);
        random = get_random(c->random, head);
        insert(&positions, &pos_tail, random);
        c = c->next;
    }

    t = positions;
    main = new_head;
    
    while (main != NULL){
        random = t->val;
        to_link(new_head, main, random);
        main = main->next;
        t = t->next;
    }
    return new_head;
}