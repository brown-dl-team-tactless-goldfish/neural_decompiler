class Solution {
    bool getNumOfOperationsRequired(vector<int>& nums, int target, int maxAllowed) {
        int count = 0;
        for (auto& num : nums) {
            if (num <= target) continue;
            count += ((num / target) + ((num % target) ? 1 : 0) - 1);
            if (count > maxAllowed) return false;
        }
        
        return count <= maxAllowed;
    }
public:
    int minimumSize(vector<int>& nums, int maxOperations) {
        int maxNum = INT_MIN, minNum = 1;
        for (auto& num : nums) {
            maxNum = max(maxNum, num);
        }
        
        while (minNum < maxNum) {
            int mid = (minNum + maxNum) / 2;
            if (getNumOfOperationsRequired(nums, mid, maxOperations)) {
                maxNum = mid;
            } else {
                minNum = mid + 1;
            }
        }
        
        return maxNum;
    }
};