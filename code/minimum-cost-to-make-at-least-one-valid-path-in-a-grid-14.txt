class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        int dir[5][2] = {{0,0},{0,1},{0,-1},{1,0},{-1,0}};
        vector<vector<int>> costs(r,vector<int>(c,INT_MAX));
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
        pq.push({0,0});
        costs[0][0] = 0;
        while(!pq.empty()) {
            auto cur = pq.top();
            pq.pop();
            int x = cur.second /1000;
            int y = cur.second %1000;
            int curCost = cur.first;
            for(int i = 1;i<=4;i++) {
                int nx = x + dir[i][0];
                int ny = y + dir[i][1];
                if(nx <0 || ny < 0 || nx >=r || ny >= c)continue;
                int nCost = (i == grid[x][y]? curCost : curCost + 1);
                if(nCost < costs[nx][ny]) {
                    pq.push({nCost, nx * 1000 + ny});
                    costs[nx][ny] = nCost;
                }
            }
        }
        return costs[r - 1][c - 1];
    }
};