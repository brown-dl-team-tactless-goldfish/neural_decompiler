/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
bool checkPrime(int val){
    if(val == 1)
        return false;
    if(val == 2 || val == 3)
        return true;
    int d = val;
    for(int i = 2; i < d; i++){
        if(d % i == 0)
            return false;
        while(d % i == 0){
            d /= i;
        }
    }
    return true;
}
int* closestPrimes(int left, int right, int* returnSize){
    int min = INT_MAX;
    int stack[100]; 
    int idx  = 0;
    int p = -1;
    for(int i = left; i <= right; i++){
        if(idx >= 100)
            break;
        if(checkPrime(i)){
            stack[idx] = i;
            idx++;
            if(idx > 1){
                if(( stack[idx-1] - stack[idx-2]) < min ){
                    min = stack[idx-1] - stack[idx-2];
                    p = idx -2;
                }
            }
        }
    }  
    *returnSize = 2;
    int* ans = malloc(2 * sizeof(int));
    if(p == -1 || idx < 2){
        ans[0] = -1;
        ans[1] = -1;
        return ans;
    }
    else{
        ans[0] = stack[p];
        ans[1] = stack[p+1];
        return ans;
    }
}