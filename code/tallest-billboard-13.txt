class Solution {
private:
	vector<unordered_map<int,int>> dp;
	int f(int i, int diff, vector<int> &rods) {
		if (i >= rods.size()) {
			if (diff == 0) return 0;
			return INT_MIN;
		}
		if (dp[i].find(diff) != dp[i].end()) return dp[i][diff];
		int op1 = rods[i] + f(i + 1, diff + rods[i], rods);
		int op2 = f(i + 1, diff - rods[i], rods);
		int op3 = f(i + 1, diff, rods);
		return dp[i][diff] = max(op1, max(op3, op2));
	}
public:
	int tallestBillboard(vector<int>& rods) {
		int m = accumulate(rods.begin(), rods.end(), 0), n = rods.size();
		dp.assign(n, {});
		return f(0, 0, rods);
	}
};