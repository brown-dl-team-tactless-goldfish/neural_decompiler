class Solution {
public:
    string kthSmallestPath(vector<int>& destination, int k) {
       
        vector<vector<int>> vec(destination[0] + destination[1] + 1,vector<int>());  /// Vector to store the required nCr we need.
        int n = destination[0] + destination[1];
        vec[1].push_back(1);
        vec[1].push_back(1);
        for(int i = 2;i<=n;i++){
            for(int j = 0; j<=vec[i-1].size();j++){
                if(j == vec[i-1].size() || j == 0)
                    vec[i].push_back(1);
                else vec[i].push_back(vec[i-1][j-1] + vec[i-1][j]);
            }
        }  
        string ans;
        int a = destination[1];
        int b = destination[0];
        while( k > 0){
            int x = vec[a-1+b][b];  /// x is the number of strings starting with 'H'.
			
			if(k <= x){    
                ans += 'H';
                a--;
				if(k == x)
					k-=x;
			}
            else if(k > x){
                ans += 'V';
                k -= x;
                b--;
            }
            if(a == 0 || b == 0){   /// if at any point either a or b == 0, we should break;
                break;
            }
        }
  
        for(int i = 0;i<b;i++)    /// add remaining V's
            ans += 'V';
        for(int i = 0;i<a;i++)   /// add remaining H's
             ans += 'H';
        return ans;      
    }
};