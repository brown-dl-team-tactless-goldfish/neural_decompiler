#define MOD 1000000007LL

class Solution {
public:
  long long dfs(long cur, long prod, array<vector<int>, 31>& graph, array<int, 31>& freq) {
    long long res = 1;
    for (auto&& node : graph[cur]) {
      if (freq[node] > 0 && gcd(prod, node) == 1) {
        res = ( res + dfs(node, prod * node, graph, freq) * freq[node] ) % MOD;
      }
    }
    return res;
  }
  int numberOfGoodSubsets(vector<int>& nums) {
    array<vector<int>, 31> graph = {
      vector<int>{2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30},
    };
    for (int i = 1; i <= 30; ++i) {
      for (auto&& val : graph[0]) {
        if (i < val && gcd(val, i) == 1) {
          graph[i].push_back(val);
        }
      }
    }
    array<int, 31> freq = {};
    for (auto&& val : nums) {
      freq[val]++;
    }
    long long res = 0;
    long long power = 1;
    for (int x = 0; x < freq[1]; ++x) {
      power = power << 1;
      power %= MOD;
    }
    for (auto&& src : graph[0]) {
      if (freq[src] > 0) {
        res = ( res + dfs(src, src, graph, freq) * freq[src] % MOD * power ) % MOD;
      }
    }
    return res;
  }
};