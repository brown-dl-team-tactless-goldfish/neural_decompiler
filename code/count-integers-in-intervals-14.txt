public class Node {
	public int val;
	public int left;
	public int right;
	public Node ln;
	public Node rn;

	public Node(int l, int r, int v) {
		left = l;
		right = r;
		val = v;
	}

	public int Push(int l, int r) {
		if (l <= left && right <= r) {
			ln = null;
			rn = null;
			val = right - left + 1;
			return val;
		}
		if (right < l || r < left || left == right)
			return val;

		int mid = (left + right) / 2;
		if (ln == null)
			ln = new Node(left, mid, val > 0 ? mid - left + 1 : 0);

		if (rn == null)
			rn = new Node(mid+1, right, val > 0 ? right - mid : 0);

		val = ln.Push(l, r) + rn.Push(l, r);
		return val;
	}
}

public Node root;
public CountIntervals() {
	root = new Node(0, 1000000000, 0);
}

public void Add(int l, int r) {
	root.Push(l, r);
}

public int Count() {
	return this.root.val;
}