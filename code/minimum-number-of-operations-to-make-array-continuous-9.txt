class Solution {
public:
    int minOperations(vector<int>& nums) {
        
        //length of the initial array
        int len=nums.size();
        
        //remove duplicate elements and sort them
        set<int>S;
        for(auto &x:nums)
            S.insert(x);
        
        vector<int>temp;
        for(auto &x:S)
            temp.push_back(x);
        
        
        int maxx=INT_MIN,e=0;
        //In the first loop we traverse the entire array(modified) and take that element
        //as the minimum element of the required array and count the no of elements 
        //that are in the range of [element,element+len) 
        //and so for each element we count the count of elements required in the array 
        //which is present in modified array and take the maximum of such counts.
        for(int i=0;i<temp.size();i++)
        {
            while(e<temp.size()&&temp[e]<temp[i]+len)
            e++;
            
            maxx=max(maxx,e-i);
        }
        
        //the answer is the (length of the given array)-(maximum no of elements found in nums of any
        //such array that is being created in the above process.)
        return len-maxx;
    }
};