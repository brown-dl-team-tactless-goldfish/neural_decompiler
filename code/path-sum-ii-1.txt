void dfs(struct TreeNode *node, int *curPath, int *i, int remainSum, int **res, int *rIdx, int **rC) {
    if(node) {
        curPath[(*i)++] = node->val;        // place current node val in path
        
        if(!node->left && !node->right && remainSum == node->val) {
            // add cur path to result
            res[*rIdx] = calloc(sizeof(int), *i);
            memcpy(res[*rIdx], curPath, sizeof(int) * (*i));
            (*rC)[(*rIdx)++] = *i;
        } else {
            dfs(node->left, curPath, i, remainSum - node->val, res, rIdx, rC);
            dfs(node->right, curPath, i, remainSum - node->val, res, rIdx, rC);
        }
        --*i;                               // backtrack, remove current node val in path
    }
}

int** pathSum(struct TreeNode* root, int targetSum, int* returnSize, int** returnColumnSizes){
    int **res = calloc(sizeof(int *), 300);
    int *curPath = calloc(sizeof(int), 1000);
    int idx = 0, curSum = 0;
    *returnSize = 0;
    *returnColumnSizes = calloc(sizeof(int), 1000);
    
    dfs(root, curPath, &idx, targetSum, res, returnSize, returnColumnSizes);
    return res;
}