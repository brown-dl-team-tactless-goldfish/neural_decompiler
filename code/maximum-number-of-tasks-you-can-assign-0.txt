class Solution {
    bool check(int k, const vector<int>& tasks, const vector<int>& workers, int pills, int strength){
        int idxW = 0 ;
        int finish = 0 ;
        multiset<int>Set(workers.end() - k, workers.end()) ;

        for(int i = k-1; i >= 0; i--){ 
            if(*Set.rbegin() >= tasks[i])
                Set.erase(prev(Set.end()) );
            else{
                if(pills == 0)
                    return false ;
                auto iter = Set.lower_bound(tasks[i] - strength) ;
                if(iter == Set.end())
                    return false ;
                Set.erase(iter) ;
                pills-- ;
            }
        }
        return true ;
    }
public:
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        sort(tasks.begin(), tasks.end()) ;
        sort(workers.begin(), workers.end()) ;
        int left = 0, right = min(tasks.size(), workers.size() ) ;
        while(left < right){
            int mid = right - (right -left)/2 ;
            if(check(mid, tasks, workers, pills, strength))
                left = mid ;
            else
                right = mid - 1 ;
        }
        return left ;
    }
};