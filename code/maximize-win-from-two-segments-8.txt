// Sliding window + DP
class Solution {
public:
    int maximizeWin(vector<int>& prizePositions, int k) {
        int n = prizePositions.size();
        int l=0,ans=0;
        vector<int>dp(n+1,0);

        for(int r=0;r<n;r++){
            while(prizePositions[r]-prizePositions[l]>k)
                l++; // to maintain the window size
            
            dp[r+1] = max(dp[r],r-l+1); // r-l+1 will give the number of prices picked in that window of l and r
            ans = max(ans,dp[l]+r-l+1); // getting the max sum
        }   
        return ans;
    }
};