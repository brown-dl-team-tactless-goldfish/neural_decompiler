int debug=0;
int judge(char *a,int pos,int max)
{
    int n=0;
    for(int i=0;i<=pos;i++)
    {
        if(a[i]=='(')
            n++;
        else
        n--;
        if(n<0||n>max)
        return 0;
    }
    if(n==0&&pos==max*2-1)
        return 2;
    return 1;
}
void recur(char *a,int pos,int max,char**s,int* returnSize)
{
    if(judge(a,pos,max))
    {
        if(pos==max*2-1)
        {
             if(judge(a,pos,max)==2)
             {
                    for(int i=0;i<max*2;i++)
                {
                    s[*(returnSize)][i]=a[i];
                    if(debug)printf("%c",a[i]);
                }
                if(debug)printf("\n");
                *(returnSize)=*(returnSize)+1;
                return;
                //写入数组
                //return++;
             }
            else
            {
                return;
            }

        }
        else
        {
            pos++;
            a[pos]='(';
            recur(a,pos,max,s,returnSize);
            a[pos]=')';
            recur(a,pos,max,s,returnSize);
            return;
        }
    }
    else
        return;
}
char** generateParenthesis(int n, int* returnSize) {
    *(returnSize)=0;
    char **s=(char**)malloc(sizeof(char**)*4096);
    for(int i=0;i<4096;i++)
        s[i]=(char*)malloc(sizeof(char)*n*2+1);
    for(int i=0;i<4096;i++)
        s[i][n*2]='\0';
    char*t=(char*)malloc(sizeof(char)*n*2);
    recur(t,-1,n,s,returnSize);
    free(t);
    return s;
}