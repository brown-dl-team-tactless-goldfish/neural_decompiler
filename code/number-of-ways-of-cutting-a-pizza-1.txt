#define mod 1000000007

int check(char ** pizza, int pizzaSize, int len, int*** list, int i, int j, int k, int apple){
    if (k+1 > apple){
        return 0;
    }
    if (list[i][j][k] != -1){
        return list[i][j][k];
    }
    
    //水平
    bool find = false;
    int copy_i = i;
    int count = 0;
    while (find == false){ 
        for (int x = j ; x < len ; x++){
            if (pizza[copy_i][x] == 'A'){
                count++;
            }
        }
        if (count > 0){
            find = true;
        }
        copy_i++;
    }
    
    int ans = 0;
    while (copy_i < pizzaSize){
        ans = (long long)(ans + check(pizza, pizzaSize, len, list, copy_i, j, k-1, apple-count)) % mod;
        for (int x = j ; x < len ; x++){
            if (pizza[copy_i][x] == 'A'){
                count++;
            }
        }
        copy_i++;
    }
    
    //垂直
    find = false;
    int copy_j = j;
    count = 0;
    while (find == false){ 
        for (int x = i ; x < pizzaSize ; x++){
            if (pizza[x][copy_j] == 'A'){
                count++;
            }
        }
        if (count > 0){
            find = true;
        }
        copy_j++;
    }
    while (copy_j < len){
        ans = (long long)(ans + check(pizza, pizzaSize, len, list, i, copy_j, k-1, apple-count)) % mod;
        for (int x = i ; x < pizzaSize ; x++){
            if (pizza[x][copy_j] == 'A'){
                count++;
            }
        }
        copy_j++;
    }
    list[i][j][k] = ans;
    return ans;
}

int ways(char ** pizza, int pizzaSize, int k){
    int*** list = malloc(sizeof(int**)*pizzaSize);
    int len = strlen(pizza[0]);
    int apple = 0;
    for (int i = 0 ; i < pizzaSize ; i++){
        list[i] = malloc(sizeof(int*)*len);
        for (int j = 0 ; j < len ; j++){
            list[i][j] = malloc(sizeof(int)*k);
            if (pizza[i][j] == 'A'){
                apple++;
            }
            list[i][j][0] = 1;
            for (int m = 1 ; m < k ; m++){
                list[i][j][m] = -1;
            }
        }
    }
    
    int ans = check(pizza, pizzaSize, len, list, 0, 0, k-1, apple);
        
    for (int i = 0 ; i < pizzaSize ; i++){
        for (int j = 0 ; j < len ; j++){
            free(list[i][j]);
        }
        free(list[i]);
    }
    free(list);
    
    return ans;
}