class Solution 
{
public:
    string reorderSpaces(string text) 
    {
        int totalLen = text.length();
        int spaceLen = 0, wordLen = 0;
        int ourSpaces = 0, leftSpaces = 0;
        string res = "";
        
        // count words and spaces 
        for ( int i=0; i<totalLen; i++ ) {
            char c = text[i];
            if ( isspace(c) ) {
                spaceLen++;
            }
            else if ( islower(c) && i<totalLen ) {
                wordLen++;
                i++;
                c = text[i];
                while ( islower(c) && i<totalLen ) {
                    i++;
                    c = text[i];
                }
                i--;
            }
        }
        
        if ( wordLen == 1 ) {
            int frontSpace = 0;
            // remove leading spaces
            while(!text.empty() && isspace(*text.begin())) {
                text.erase(text.begin());
                frontSpace++;
            }
            // add equal spaces at the end
            for ( int i=0; i<frontSpace; i++ ) {
                text += " ";
            }            
            return text;
        }
        else if ( wordLen > 1 ) {
            ourSpaces = spaceLen/(wordLen-1);
            leftSpaces = spaceLen%(wordLen-1);  
        }    
            
        // add spaces to words
        for ( int i=0; i<totalLen; i++ ) {
            char c = text[i];
            string t = "";
            if ( islower(c) && i<totalLen ) {
                t += c;
                i++;
                c = text[i];
                while ( islower(c) && i<totalLen ) {
                    t += c;
                    i++;
                    c = text[i];
                }
                res += t;
                for ( int j=0; j<ourSpaces; j++ ) {
                    res += " ";
                }
                i--;
            }
        }
        
        // remove extra trailing space added in the last word by above function
        while ( !res.empty() && isspace(*res.rbegin()) ) {
            res.erase(res.length()-1);  
        }
        // add all the remaining spaces at the end 
        for ( int i=0; i<leftSpaces; i++ ) {
            res += " ";
        }
        
        return res;
    }
};