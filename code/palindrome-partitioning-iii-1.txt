int palindromePartition(string s, int k) {
  auto skips = s.size() / 2;
  vector<vector<int>> dp(skips, vector<int>(s.size() + 1));
  for (auto n = 0; n < skips; ++n) iota(begin(dp[n]), end(dp[n]), 0);
  for (int m = 0; m < s.size(); ++m) {
    for (int i = m, j = m + 1, skip = 0; i >= 0 && j < s.size() && skip < skips; --i, ++j) {
        if (s[i] != s[j]) ++skip;
        for (int n = 0; n + skip < skips; ++n)
            dp[n + skip][j + 1] = min(dp[n + skip][j + 1], 1 + dp[n][i]);
    }
    for (int i = m, j = m, skip = 0; i >= 0 && j < s.size() && skip < skips; --i, ++j) {
        if (s[i] != s[j]) ++skip;
        for (int n = 0; n + skip < skips; ++n)
            dp[n + skip][j + 1] = min(dp[n + skip][j + 1], 1 + dp[n][i]);
    }
  }
  for (auto n = 0; n < skips; ++n) {
      if (dp[n][s.size()] <= k) return n;
  }
  return skips;
}