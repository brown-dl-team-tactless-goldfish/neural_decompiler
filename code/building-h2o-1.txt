#define L pthread_mutex_t
#define I(m) pthread_mutex_init(&obj->##m, NULL)
#define lock(m) pthread_mutex_lock(&obj->##m)
#define unlock(m) pthread_mutex_unlock(&obj->##m)
typedef struct {
    // User defined data may be declared here.
    int n;
    L h;
    L o;
} H2O;

H2O* h2oCreate() {
    H2O* obj = (H2O*) malloc(sizeof(H2O));
    
    // Initialize user defined data here.
    obj->n = 0;
    I(h);
    I(o);
    lock(h);
    return obj;
}

void hydrogen(H2O* obj) {
    lock(h);
    if (obj->n > 0) {
        // releaseHydrogen() outputs "H". Do not change or remove this line.
        releaseHydrogen();
        obj->n--;
        if (obj->n > 0) unlock(h);
        else unlock(o);
    }
}

void oxygen(H2O* obj) {
    lock(o);
    if (obj->n == 0) {
        // releaseOxygen() outputs "O". Do not change or remove this line.
        releaseOxygen();
        obj->n = 2;
        unlock(h);
    }
}

void h2oFree(H2O* obj) {
    // User defined data may be cleaned up here.
    
}