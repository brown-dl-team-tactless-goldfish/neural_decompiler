class Solution {
    public boolean isTransformable(String s, String t) {
        Queue<Integer>[] queues = new LinkedList[10];
        for (int i = 0; i < 10; i++) {
            queues[i] = new LinkedList<>();
        }
        for (int i = 0; i < s.length(); i++) {
            queues[s.charAt(i) - '0'].offer(i);
        }
        for (char c : t.toCharArray()) {
            if (queues[c - '0'].isEmpty()) {
                return false;
            }
            int idx = queues[c - '0'].poll();
            for (int i = 0; i < c - '0'; i++) {
                if (!queues[i].isEmpty() && queues[i].peek() < idx) {
                    return false;
                }
            }
        }
        return true;
    }
}