int cmp(const void *a, const void *b){
    return *(int*)a-*(int*)b;
}

int minimumRounds(int* tasks, int tasksSize){
    if (tasksSize <= 1) return -1;
    qsort(tasks, tasksSize, sizeof(int), cmp);
    int level = tasks[0];
    int total_count = 0;
    int level_count = 0;
    int i = 0;
    for (; i < tasksSize; i++){
        if (tasks[i] == level){
            level_count++;
        } else {
            if (level_count <= 1) return -1;

            if (level_count % 3 == 2){
                total_count = total_count + (level_count - 2) / 3 + 1;
            } else if (level_count % 3 == 1){
                total_count = total_count + (level_count - 4) / 3 + 2;
            } else {
                total_count = total_count + (level_count) / 3;
            }

            level = tasks[i];
            level_count = 1;
        }
    }

    //Last 
    if (level_count <= 1) return -1;

    if (level_count % 3 == 2){
        total_count = total_count + (level_count - 2) / 3 + 1;
    } else if (level_count % 3 == 1){
        total_count = total_count + (level_count - 4) / 3 + 2;
    } else {
        total_count = total_count + (level_count) / 3;
    }

    return total_count;
}