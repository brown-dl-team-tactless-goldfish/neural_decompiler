class Solution {
public:
    int minOperations(vector<vector<int>>& grid, int x) {
        // vector 'v' will store the elements of the grid in sorted manner
        vector<int>v;
        
        // populate the vector
        for(auto it:grid) {
            for(auto d:it) {
                v.push_back(d);
            }
        }
        
        // sort the vector
        sort(v.begin(),v.end());
        
        // if all the numbers of the vector are not producing the same remainder when divided by x then it's impossible to make them equal
        int rem=v[0]%x,n=v.size(),middle=v[n/2],ans=0;
        for(int i=1;i<n;i++) {
            if(v[i]%x!=rem) {
                return -1;
            }
        }
        
        // we have to just make them equal to the middle element of the vector
        // middle element means the element which appears in the middle position of the vector(v[n/2])
        for(int i=0;i<v.size();i++) {
            // get the no. of operations and add them to answer
            ans+=(abs(v[i]-middle)/x);
        }
        return ans;
    }
};