	typedef struct {
		int** matrix;
		int row;
	} NumMatrix;


	NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {
		NumMatrix* obj = malloc(sizeof(NumMatrix));
		obj -> matrix = malloc(sizeof(int*) * matrixSize);
		for(int i = 0; i < matrixSize; i++){
			obj->matrix[i] = malloc(matrixColSize[0] * sizeof(int));
		}
		obj -> row = matrixSize;
		for(int i = 0; i < matrixSize; i++){
			for(int j = 0; j < matrixColSize[0]; j++){
				int up_index = i - 1;
				int left_index = j - 1;
				int up_block = 0;
				int left_block = 0;
				int up_left_block = 0;
				if(up_index >= 0 && left_index >= 0){
					up_block = obj->matrix[up_index][j];
					left_block = obj->matrix[i][left_index];
					up_left_block = obj->matrix[up_index][left_index];
				}
				else if(up_index >= 0){
					up_block = obj->matrix[up_index][j];
				}
				else if(left_index >= 0){
					left_block = obj->matrix[i][left_index];
				}
				obj->matrix[i][j] = matrix[i][j] + left_block + up_block - up_left_block;
				// printf("%d ", obj->matrix[i][j]);
			}
			// printf("\n");
		}
		return obj;
	}

	int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
		int block1 = 0, block2 = 0, block3 = 0, block4 = 0;

		if(row2 >= 0 && col2 >= 0){
			block1 = obj->matrix[row2][col2];
		}
		if(row1 >= 1 && col1 >= 1){
			block4 = obj->matrix[row1 - 1][col1 - 1];
			block2 = obj->matrix[row1 - 1][col2];
			block3 = obj->matrix[row2][col1 - 1];
		}
		else if (col1 >= 1){
			block3 = obj->matrix[row2][col1 - 1];
		}
		else if (row1 >= 1){
			block2 = obj->matrix[row1 - 1][col2];
		}

		return block1 - block2 - block3 + block4;
	}

	void numMatrixFree(NumMatrix* obj) {
		// use the origin input matrix, it is no need to free.
		for(int i = 0; i < obj -> row; i++){
			free(obj->matrix[i]);
		}
		free(obj->matrix);
		free(obj);
		return;
	}

	/**
	 * Your NumMatrix struct will be instantiated and called as such:
	 * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);
	 * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);

	 * numMatrixFree(obj);
	*/