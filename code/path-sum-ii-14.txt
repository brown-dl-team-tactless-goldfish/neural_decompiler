/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int** res;
int* path;
int* colSize;
int resTop;
int pathTop;

void DFS(struct TreeNode* root, int count){
    if(!root->left && !root->right){
        if(count==0){
            int* curPath=malloc(sizeof(int)*pathTop);
            memcpy(curPath, path, sizeof(int)*pathTop);
            
            colSize[resTop]=pathTop;
            res[resTop++]=curPath;
        }
        return;
    }
    if(root->left){
        path[pathTop++]=root->left->val;
        DFS(root->left, count - root->left->val);
        pathTop--;
    }
    if(root->right){
        path[pathTop++]=root->right->val;
        DFS(root->right, count - root->right->val);
        --pathTop;
    }

}
int** pathSum(struct TreeNode* root, int targetSum, int* returnSize, int** returnColumnSizes){
    res=malloc(sizeof(int*)*1000);
    path=malloc(sizeof(int)*1000);
    colSize=malloc(sizeof(int)*1000);
    resTop=pathTop=0;
    *returnSize=0;
    
    if(!root)
        return res;
    path[pathTop++]=root->val;
    DFS(root, targetSum - root->val);
    
    *returnSize=resTop;
    *returnColumnSizes=colSize;
    
    return res;
}