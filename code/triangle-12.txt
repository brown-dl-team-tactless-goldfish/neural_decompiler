#define MIN(A,B) (((A)<(B))?(A):(B))

int minimumTotal(int** triangle, int triangleRowSize, int *triangleColSizes) {
 
    int **dp;
    int i,d,j,k;
		
		//Creat the dp trigangle(the size is same as the input triganle) 
    dp = (int **)malloc(sizeof(int *)*triangleRowSize);
    for(i = 0;i < triangleRowSize;i++)
    {
        dp[i] = (int *)malloc(sizeof(int)*triangleColSizes[i]);
    }
    
		//Initialize the dp triangle(set a value big enough)
    for(i = 0;i < triangleRowSize;i++)
    {
        for(j = 0; j < triangleColSizes[i];j++){dp[i][j] = INT_MAX/2;}
    }
    
    dp[0][0] = triangle[0][0];
		
		//The difference from the previous line is divided into odd and even numbers.
    for(i = 1;i < triangleRowSize;i++)
    {
        d = triangleColSizes[i] - triangleColSizes[i-1];
        if(d%2)
        {
            j = d+1/2;
            for(j = 0; j <triangleColSizes[i-1];j++)
            {
                dp[i][j+d-1] = MIN((dp[i-1][j] + triangle[i][j+d-1]),dp[i][j+d-1]);
                dp[i][j+d] = MIN((dp[i-1][j] + triangle[i][j+d]),dp[i][j+d]);
            }
        }
        else
        {
            j = d/2;
            for(j = 0; j <triangleColSizes[i-1];j++)
            {
                dp[i][j+d-1] = MIN((dp[i-1][j] + triangle[i][j+d-1]),dp[i][j+d-1]);
                dp[i][j+d] = MIN((dp[i-1][j] + triangle[i][j+d]),dp[i][j+d]);
                dp[i][j+d+1] = MIN((dp[i-1][j] + triangle[i][j+d+1]),dp[i][j+d+1]);
            }
        }
    }
    
		//Find the min value at the last row
    int Min = INT_MAX;
    for(i = 0; i< triangleColSizes[triangleRowSize-1];i++){Min = MIN(Min,dp[triangleRowSize-1][i]);}
    
    return Min;