// RS Hash Function
unsigned int RSHash(char *str, int n)
{
    unsigned int b = 378551;
    unsigned int a = 63689;
    unsigned int hash = 0;

    for(int i = 0; i < n ;i++)
    {
        hash = hash * a + str[i];
        a *= b;
    }

    return (hash & 0x7FFFFFFF);
}
void dfs(char * s, int* hash, int N, int* ans, int count){
    if(*s == '\0'){
        *ans = fmax(*ans, count);
        return ;
    }
    int n = strlen(s);
    for(int i = 1; i <= n; i++){
        unsigned int val = RSHash(s, i);
        unsigned int d = val;
        while(1){
            if(hash[d % N] == -1){
                hash[d % N] = val;
                break;
            }
            else if(hash[d % N] == val){
                goto next;
            }
            else
                d++;
        }
    
        dfs(&s[i], hash, N, ans, count+1);
        hash[d % N] = -1;
        
        next: 
            continue;
    }
}

int maxUniqueSplit(char * s){
    int n = strlen(s);
    int N = 50;
    int hash[50] ;
    for(int i = 0; i < 50; i++){
        hash[i] = -1;
    }
    int ans = 0;
    dfs(s, hash, N, &ans, 0);
    return ans;
}