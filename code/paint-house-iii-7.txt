int minCost(vector<int>& houses, vector<vector<int>>& cost, int n, int m, int target) {
        constexpr auto INF = numeric_limits<int>::max();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(m + 1, vector<int>(target + 1)));
        function<int(int, int, int)> getOrCompute;
        getOrCompute = [&](int idx, int prevColor, int groupsLeft) {
            if (idx == n || groupsLeft == 0) {
                if (idx == n) return groupsLeft == 0 ? 0 : INF;
                return idx == n ? 0 : INF;
            }
            if (dp[idx][prevColor][groupsLeft]) {
                return dp[idx][prevColor][groupsLeft];
            }
            auto res = INF;
            for (int c = 1; c <= m; ++c) {
                if (c == prevColor) {
                    continue;
                }
                int totalCost = 0;
                for (int i = idx; i <= n - groupsLeft; ++i) {
                    if (houses[i] != 0 && houses[i] != c) {
                        break;
                    }
                    if (houses[i] == 0) totalCost += cost[i][c - 1];
                    if (const auto otherCost = getOrCompute(i + 1, c, groupsLeft - 1); otherCost != INF) {
                        res = min(res, totalCost + otherCost);
                    }
                }   
            }
            return dp[idx][prevColor][groupsLeft] = res;
        };
        const int ans = getOrCompute(0, 0, target);
        return ans == INF ? -1 : ans;
    }