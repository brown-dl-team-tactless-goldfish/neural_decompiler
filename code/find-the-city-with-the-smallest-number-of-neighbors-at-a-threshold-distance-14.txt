int dp[101][101][101];
int f(int i, int j, int k, vector<vector<int>>&graph){
    if(k<0) return graph[i][j];
    if(i==j) return 0;//no self loops present
    
    if(dp[i][j][k]!=-1) return dp[i][j][k];
    
    return dp[i][j][k] = min(f(i, j, k-1, graph), f(i, k, k-1, graph) + f(k, j, k-1, graph));
}
int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
    memset(dp, -1, sizeof(dp));
    vector<vector<int>>graph(n, vector<int>(n, int(1e7)+1));
    for(auto &e: edges)
        graph[e[0]][e[1]] = graph[e[1]][e[0]] = e[2];

    int count = INT_MIN, res = -1, c, dist;
    
    for(int i = 0; i<n; i++){
        c = 0;

        for(int j = 0; j<n; j++){
            dist = f(i, j, n-1, graph);

            if(dist > distanceThreshold) c++;
        }

        if(count <= c) count = c, res = i;
    }

    return res;
}