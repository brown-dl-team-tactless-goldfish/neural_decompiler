class Solution {
public:
	int slidingPuzzle(vector<vector<int>>& board) {
		unordered_set<string> visited;
		queue<string> qu;
		string s="";
		for(int i=0;i<board.size();i++)
			for(int j=0;j<board[0].size();j++)
			{
				s+=board[i][j]+'0';
			}

		qu.push(s);

		vector<vector<int>> dir{{1,3},{0,2,4},{1,5},{0,4},{3,5,1},{4,2}};
		visited.insert(s);
		int step=0;
		while(!qu.empty())
		{
			int len=qu.size();
			while(len>0)
			{
				string temp=qu.front();
				qu.pop();
				if(temp=="123450") return step;
				len--;
				int idx=-1;
				for(int i=0;i<temp.size();i++)
				{
					if(temp[i]=='0')
					{
						idx=i;
						break;
					}
				}

				//cout<<idx<<endl;

				for(int j=0;j<dir[idx].size();j++)
				{
					string ss=temp;
					swap(ss[idx],ss[dir[idx][j]]);
				  //  cout<<ss<<endl;
					if(visited.count(ss)) continue;
					visited.insert(ss);
					qu.push(ss);
				}
			}
		   // cout<<step<<endl;
			step++;

		}

		return -1;
	}
};