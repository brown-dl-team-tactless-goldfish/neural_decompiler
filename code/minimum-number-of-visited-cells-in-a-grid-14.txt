class Solution {
public:
    int minimumVisitedCells(vector<vector<int>>& arr) {
        
        int n=arr.size();
        int m=arr[0].size();
        vector<vector<int>> distance(n,vector<int>(m,1e9));
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> q;
        distance[0][0]=0;
        q.push({0,{0,0}});
        while(q.size()!=0){
            
            pair<int,pair<int,int>> front=q.top();
            q.pop();
            int i=front.second.first;
            int j=front.second.second;
            int d=front.first;
            if(i==n-1 && j==m-1){
                return d+1;
            }
            for(int k=j;k<=arr[i][j]+j;k++){
                
                if(k<m && distance[i][k]>d+1){
                    distance[i][k]=d+1;
                    q.push({distance[i][k],{i,k}});
                    if(k==m-1 && i==n-1){
                        return d+2;
                    }
                }
            }
            for(int k=i;k<=arr[i][j]+i;k++){
                
                if(k<n && distance[k][j]>d+1){
                    distance[k][j]=d+1;
                    q.push({distance[k][j],{k,j}});
                    if(k==n-1 && j==m-1){
                        return d+2;
                    }
                }
            }
        }
        return -1;
    }
};