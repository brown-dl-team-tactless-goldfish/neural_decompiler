class Solution {
public:
    int findRotateSteps(string ring, string key) {
        array<vector<int>, 26> pos;
        for (int i = 0; i < ring.size(); ++i) {
            pos[ring[i] - 'a'].emplace_back(i);
        }

        vector<vector<int>> dp(ring.size(), vector<int>(key.size() + 1, -1));
        return getdp(ring, key, 0, 0, pos, dp);
    }
private:
    int getdp(string& ring, string& key, int i, int j,
              array<vector<int>, 26>& pos, vector<vector<int>>& dp) {
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        if (j == key.size()) {
            return dp[i][j] = 0;
        }

        int ans = INT_MAX;
        if (ring[i] == key[j]) {
            ans = 1 + getdp(ring, key, i, j + 1, pos, dp);
        } else {
            for (int p : pos[key[j] - 'a']) {
                int cost = 1 + min(max(i, p) - min(i, p), min(i, p) + int(ring.size()) - max(i, p));
                ans = min(ans, cost + getdp(ring, key, p, j + 1, pos, dp));
            }
        }
        return dp[i][j] = ans;
    }
};
