class Solution {
public:
    int visited[201];
    int mod = 1e9+7;
    map<pair<int,int>,int>mp;
    int solve(int idx , int last,string &s){
        //base case
        if(idx<0)return 1;
        
        if(mp.count({idx,last}))
            return mp[{idx,last}];
        int ans = 0 ;
        
        //hash means any number can be insertd at last position
        if(s[idx]=='#'){
            for(int i=0;i<s.size();i++){
                if(!visited[i]){
                    visited[i]=1;
                    ans = (ans + solve(idx-1,i,s))%mod;
                    visited[i]=0;
                }
            }
        }
        
        if(s[idx]=='D'){
            for(int i=last+1;i<s.size();i++){
                if(!visited[i]){
                    visited[i]=1;
                    ans = (ans + solve(idx-1,i,s))%mod;
                    visited[i]=0;
                }
            }            
        }
        
        if(s[idx]=='I'){
            for(int i=0;i<last;i++){
                if(!visited[i]){
                    visited[i]=1;
                    ans = (ans + solve(idx-1,i,s))%mod;
                    visited[i]=0;
                }
            }             
        }
        
        return mp[{idx,last}] = ans;
        
    }
    int numPermsDISequence(string s) {
        s.push_back('#');
        int n=s.size();
        return solve(n-1,0,s);
    }
};