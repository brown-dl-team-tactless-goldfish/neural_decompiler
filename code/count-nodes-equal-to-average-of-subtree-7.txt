/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int averageOfSubtree(TreeNode* root) {
        count = 0;
        countSubs(root);
        return count;
    }

private:
    int count;
    vector<int> countSubs(TreeNode* n){
        if(n == nullptr) return {0, 0};
        int v = n->val;
        int c = 1;
        vector<int> left = countSubs(n->left);
        vector<int> right = countSubs(n->right);
        v += left[0];
        c += left[1];
        v += right[0];
        c += right[1];
        if(n->val == v / c) count++;
        return {v, c};
        
    }
};