class Solution {
public:
    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        vector<bool> res;
        vector<vector<int>> edges(n);
        vector<vector<int>> paths(n, vector<int>(n, INT_MAX));
        
        for (const auto& v : prerequisites)
        {
            edges[v[0]].push_back(v[1]);
        }
        
        for (int i = 0; i < n; ++i)
        {
            paths[i][i] = 0;
            auto comp = [&](int c1, int c2)
            {
                return paths[i][c1] > paths[i][c2];
            };
            
            priority_queue<int, vector<int>, decltype(comp)> heap(comp);
            heap.push(i);
            while (!heap.empty())
            {
                int top = heap.top();
                heap.pop();
                for (int c : edges[top])
                {
                    if (paths[i][c] > paths[i][top] + 1)
                    {
                        paths[i][c] = paths[i][top] + 1;
                        heap.push(c);
                    }
                }
            }
        }
        
        for (const auto& q : queries)
        {
            res.push_back(paths[q[0]][q[1]] < INT_MAX ? true : false);
        }
        
        return res;
    }
};