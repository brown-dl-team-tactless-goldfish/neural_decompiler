class Solution {
public:
    int componentValue(vector<int>& nums, vector<vector<int>>& edges) {
        int size = nums.size();
        int sum = 0;
        for(int num: nums) sum += num;
            
        vector<vector<int>> e(size);
        for(vector<int>& edge: edges) {
            e[edge[0]].push_back(edge[1]);
            e[edge[1]].push_back(edge[0]);
        }
        
        vector<int> visited(size, 0);
        bool res;
        int target;
        function<int(int)> dfs = [&](int startNode) {
            if(!res) return 0;
            
            visited[startNode] = target;
            int sum = 0;
            for(int nextNode: e[startNode]) {
                if(visited[nextNode] != target) sum += dfs(nextNode);
            }
            
            sum += nums[startNode];
            if(sum > target) res = false;
            return sum >= target ? 0 : sum;
        };
        
        for(int div = size; div >= 2; div--) {
            if(sum % div) continue;
            
            res = true;
            target = sum / div;
            dfs(0);
            if(res) return div - 1;
        }
        
        return 0;
    }
};