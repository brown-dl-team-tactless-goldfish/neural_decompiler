class Solution {
public:
    #define LL long long
    int sum;
    unordered_map<int,unordered_map<int,pair<LL,LL>>> memo[50][25];
    double getProbability(vector<int>& balls) {
        vector<int> vs;
        for(int i=0;i<balls.size();i++){
            sum+=balls[i];
            int cnt=balls[i];
            for(int j=0;j<cnt;j++){
                vs.push_back(i);
            }
        }
        auto ret=dfs(0,vs,0,0,0);
        return 1.0*ret.first/ret.second;
    }
    pair<LL,LL> dfs(int idx, vector<int>& vs, int cnt1, int box1, int box2){  //box1 and box2 record the colors we have in each box, cnt1 is the numbers of balls in box1
        if(cnt1>sum/2 || idx-cnt1>sum/2) return {0,0};
        if(idx==vs.size()){
            int tmp1=0;
            int tmp2=0;
            for(int i=0;i<8;i++){
                if((box1&(1<<i))!=0) tmp1++;
            }
            for(int i=0;i<8;i++){
                if((box2&(1<<i))!=0) tmp2++;
            }
            if(tmp1==tmp2) return {1,1};
            else return {0,1};
        }
        if(memo[idx][cnt1].find(box1)!=memo[idx][cnt1].end() && memo[idx][cnt1][box1].find(box2)!=memo[idx][cnt1][box1].end()) return memo[idx][cnt1][box1][box2];
        int col=vs[idx];
        auto a1=dfs(idx+1,vs,cnt1+1,box1|(1<<col),box2);
        auto a2=dfs(idx+1,vs,cnt1,box1, box2|(1<<col));
        return memo[idx][cnt1][box1][box2]= {a1.first+a2.first,a1.second+a2.second};
    }
};