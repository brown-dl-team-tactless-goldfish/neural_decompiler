class Solution {
public:
    void dfs(int i, vector<int> adj[], vector<int> &vis, vector<int> &ans){
        vis[i]=1; ans.push_back(i);
        for(auto x: adj[i]){
            if(vis[x]==0){
                dfs(x,adj,vis,ans);
            }
        }
    }
    vector<int> restoreArray(vector<vector<int>>& a) {
        vector<int> ans;
        int i=0,j,ii, n, u, v, start;
        unordered_set<int> st;
        unordered_map<int,int> mp, mp1;
        for(auto x: a){
            st.insert(x[0]);
            st.insert(x[1]);
        }
        for(auto x: st) mp[x]=i++;
        for(auto x: mp) mp1[x.second]=x.first;
        n=st.size();
        vector<int> adj[n];
        for(auto x: a){
            u=mp[x[0]];
            v=mp[x[1]];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        for(i=0;i<n;i++){
            if(adj[i].size()==1){
                start=i;
                break;
            }
        }
        vector<int> vis(n,0);
        vector<int> temp;
        if(vis[start]==0){
            dfs(start,adj,vis,temp);
            if(temp.size()==n){
                for(ii=0;ii<n;ii++){
                    ans.push_back(mp1[temp[ii]]);
                }
                return ans;
            }
        }
        return ans;
    }
};