class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& E, vector<int>& P) {
        unordered_map<int, unordered_set<int>> g;
        for(auto & e : E) {
            g[e[0]].insert(e[1]);
            g[e[1]].insert(e[0]);
        }

        
        int N = P.size();
        vector<int> D(N+1, 0);
        queue<int> q;
        q.push(0);
        D[0] = 1;
        while(!q.empty()) {
            for(int i = q.size(); i > 0; i--) {
                int t = q.front(); q.pop();
                for(int nxt : g[t]) {
                    if(!D[nxt]) {
                        D[nxt] = D[t]+1;
                        q.push(nxt);
                    }
                }
            }
        }

        int res = 0;
        for(int i = 1; i < N; i++) {
            int loop = 2*(D[i]-1);
            int resend = (loop+P[i]-1)/P[i]-1;
            int total = resend*P[i] + loop;
            res = max(res, total);
        }
        return res+1;
    }
};