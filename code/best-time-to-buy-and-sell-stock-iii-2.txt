int calcProfit(int* array, int start, int end){
    int min = array[start];
    int max = array[start];
    int profit = 0;
    for (int i=start; i<end; i++){
        if (array[i] > max){
            max = array[i];
        }
        if (array[i] < min){
            if (max - min > profit) profit = max - min;
            min = max = array[i];
        }
    }
    if (max - min > profit) profit = max - min;
    return profit;
}

int totalProfit(int* array, int len, int pairIndex){
    int p1 = calcProfit(array, 0, 2*pairIndex);
    int p2 = calcProfit(array, 2*pairIndex, len);
    return p1 + p2;
}

int maxProfit(int* prices, int pricesSize) {
    int* reduce = malloc(sizeof(int) * pricesSize);
    int len = 0;
    
    int min = prices[0];
    int max = prices[0];
    for (int i=1; i<pricesSize; i++){
        if (prices[i] < max){
            if (min != max){
                reduce[len++] = min;
                reduce[len++] = max;
            }
            min = max = prices[i];
        }
        
        if (prices[i] >= max){
            max = prices[i];
        }
    }
    if (min != max){
        reduce[len++] = min;
        reduce[len++] = max;
    }
    
    int maximum = 0;
    
    for (int i=0; i<len/2; i++){
        int temp = totalProfit(reduce, len, i);
        if (temp > maximum) maximum = temp;
    }
    
    free(reduce);
    
    return maximum;
}