class Solution {
public:
    
    bool topoSort(int k, vector<vector<int>> &graph, unordered_map<int,int> &Map){
        vector<int> indeg(k+1, 0);
        for(int i=0;i<graph.size();i++){
            for(auto nbr: graph[i]){
                indeg[nbr]++;
            }
        }
        
        queue<int> q;
        for(int i=1;i<indeg.size();i++){
            if(indeg[i] == 0) q.push(i);
        }
        
        int count = 0;      //for cycle detection
        int number = 0;     //for row/col number
        while(!q.empty()){
            int curNode = q.front();
            q.pop();
            
            count++;
            Map[curNode] = number;  //assign row/col number
            number++;
            
            for(auto nbr: graph[curNode]){
                indeg[nbr]--;
                if(indeg[nbr] == 0) q.push(nbr);
            }
        }
        
        if(count != k) return false;
        return true;
    }
    
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
        
        //graph building:
        vector<vector<int>> rowGraph(k+1);
        vector<vector<int>> colGraph(k+1);
        
        for(auto edge: rowConditions){
            rowGraph[edge[0]].push_back(edge[1]);
        }
        for(auto edge: colConditions){
            colGraph[edge[0]].push_back(edge[1]);
        }
        
        //map for coordinates of all elements:
        unordered_map<int,int> row; // ele, row
        unordered_map<int,int> col; // ele, col
        
        //toposort:
        bool x = topoSort(k, rowGraph, row);        
        bool y = topoSort(k, colGraph, col);
        
        //if cycle formed:
        if(!x or !y){
            vector<vector<int>> matrix;
            return matrix;
        }
        
        //ans:
        vector<vector<int>> matrix(k, vector<int>(k, 0));
        for(int ele=1;ele<k+1;ele++){
            int r = row[ele], c = col[ele];
            matrix[r][c] = ele;
        }
        
        return matrix;        
    }
};