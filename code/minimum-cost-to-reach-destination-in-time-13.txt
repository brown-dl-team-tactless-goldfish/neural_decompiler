class Solution {
public:
     vector<pair<int,int>> mp[1001] ;  
    vector<bool>vis;
    int n  ;
    map<pair<int,int>,int>cost;
    int mx = 0  ;
    int dp[5001][3001] ; 
    int solve(int mx , int st,int en,int tot,vector<int>&pass){
        
        if(mx >=  tot && en == st){
            return (pass[0]) ; 
        }
        else if(mx < tot)
            return 1e7 ; 
        
        if(dp[st][tot] != -1)
            return dp[st][tot] ; 
        
        int ans = 1e7 ; 
       
        for(auto i : mp[st]){
                if(tot + i.second <= mx){
                int r = pass[i.first] + solve(mx,i.first,en,tot+i.second,pass);
                ans = min(ans,r);
                }
            
        }
       
        return dp[st][tot] = ans ; 
    }
    
    int minCost(int maxTime, vector<vector<int>>& edges, vector<int>& passingFees) {
        for(auto i : edges){
            mp[i[0]].push_back({i[1],i[2]}) ; 
            mp[i[1]].push_back({i[0],i[2]}) ; 
            mx = max({mx,i[0],i[1]}) ; 
            
            
        }
        
        n = edges.size() ; 
        vis.resize(n+1,false) ; 
        
        memset(dp,-1,sizeof(dp))  ; 
        
        int p = solve(maxTime,0,mx,0,passingFees);
        if(p >= 1e7)
            return -1;
        
        return p ; 
    }
};