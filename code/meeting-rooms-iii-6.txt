class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& m) {
        vector<int> vec(n); // no of times room is used
        
        set<pair<long long,int>> booked_room; // {time_when_it_will_be_free, room_no}
        
        set<int> free_room; // which rooms are free 
        for(int i=0;i<n;i++) free_room.insert(i);
        
        sort(m.begin(),m.end());
        
        vector<long long> room_free_time(n); // when time this particular room will be free
        
        for(auto &meet : m){
            long long st = meet[0], en = meet[1];
            
            while(booked_room.size() and (*booked_room.begin()).first <= st){
                free_room.insert((*booked_room.begin()).second);
                booked_room.erase(booked_room.begin());
            }
            
            int room; // availaible for current meeting 
            if(free_room.size()){
                int room = *free_room.begin(); 
                free_room.erase(free_room.begin());
            }else{
                room = *booked_room.begin().second; 
                booked_room.erase(booked_room.begin());
            }
            vec[room]++;
            room_free_time[room] = max(room_free_time[room] + (en-st),en);
            booked_room.insert({room_free_time[room],room});
        }
        
        int ans = 0, idx;
        
        for(int i=0;i<n;i++)
            if(vec[i] > ans) ans = vec[i], idx = i;
        
        return idx;
    }
};