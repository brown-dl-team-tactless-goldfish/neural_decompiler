class Solution {
public:
    int minimumOperations(vector<int>& nums) {
        unordered_map<int, int> o, e;
        for (int i = 0; i < nums.size(); ++i) {
            if (i % 2) {
                ++o[nums[i]];
            } else {
                ++e[nums[i]];
            }
        }
        

        pair<int, int> maxfo, secMaxfo, maxfe, secMaxfe;
        for (auto [k, v] : o) {
            if (v > maxfo.second) {
                swap(maxfo, secMaxfo);
                maxfo.first = k, maxfo.second = v;
            } else if (v > secMaxfo.second) {
                secMaxfo.first = k, secMaxfo.second = v;
            }
        }
        
        for (auto [k, v] : e) {
            if (v > maxfe.second) {
                swap(maxfe, secMaxfe);
                maxfe.first = k, maxfe.second = v;
            } else if (v > secMaxfo.second) {
                secMaxfe.first = k, secMaxfe.second = v;
            }
        }
        
        if (maxfo.first != maxfe.first) {
            return nums.size() - maxfo.second - maxfe.second; 
        } else {
            return nums.size() - max(maxfo.second + secMaxfe.second, maxfe.second + secMaxfo.second);
        }
    } 
};