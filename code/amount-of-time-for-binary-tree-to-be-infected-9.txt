public:
    unordered_map<int, unordered_set<int>> adj;
    unordered_set<int> col;
    int depth = 0;
    
    int amountOfTime(TreeNode* root, int start) {
        if (!root) return 0;
        convert(root);
        
        col.insert(start);
        bfs(start);
        return depth;
    }
    void convert(TreeNode* curr){
        if (curr -> left){
            adj[curr -> left -> val].insert(curr -> val);
            adj[curr -> val].insert(curr -> left -> val);
            convert(curr -> left);
        }
        if (curr -> right){
            adj[curr -> right -> val].insert(curr -> val);
            adj[curr -> val].insert(curr -> right -> val);
            convert(curr -> right);
        }
    }
    void bfs(int curr){
        queue<pair<int, int>> q;
        q.push({curr, 0});
        
        while (!q.empty()){
            auto[node, time] = q.front();
            q.pop();
            
            for (auto& it: adj[node]){
                if (col.find(it) == col.end()){
                    col.insert(it);
                    q.push({it, time + 1});
                    depth = max(depth, time + 1);
                }
            }
        }
    }