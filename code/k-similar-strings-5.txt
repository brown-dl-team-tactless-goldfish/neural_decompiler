class Solution {
    int findK(string &A, string &B, int start, unordered_map<string,int> &mem) { 
       if(mem.find(A) != mem.end())
           return mem[A];
       while(start < A.size() && A[start] == B[start])
          start++;   
       if(start == A.size())
           return 0;
       int minK = INT_MAX;  
       char c = A[start];
       A[start] = B[start]; 
       for(int i = start + 1; i < A.size(); i++) {
           if(A[i] == B[i] || A[i] != B[start]) 
             continue;
           A[i] = c;
           minK = min(minK, findK(A, B, start + 1, mem) + 1);
           A[i] = B[start]; 
        } 
        A[start] = c;
        mem[A] = minK;
        return minK;
    }
    
 public:
    int kSimilarity(string A, string B) {
       unordered_map<string, int> mem;
       return findK(A, B, 0, mem);
    }
}