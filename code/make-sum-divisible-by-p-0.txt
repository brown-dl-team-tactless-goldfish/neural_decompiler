int minSubarray(int* nums, int numsSize, int p){
    int n = numsSize ;
    int N = 10 * n ;
    int sum = 0 ;
    for(int i = 0 ; i < n ; i++){
        sum = (sum + nums[i]) % p ;
    }
    int rm = sum % p ;
    if(rm == 0 )
        return  0 ;
    int** hash = calloc(N , sizeof(int*)) ;
    hash[0] = malloc(2 * sizeof(int)) ;
    hash[0][0] = 0 ;
    hash[0][1] = -1 ;
    
    int val = 0;
    int min = INT_MAX ;

    for(int i = 0; i < n ; i++){
        val = (val + nums[i] ) % p;
        int tmp =  val % p - rm ;
        if(tmp < 0){
            tmp += p;
        }
        int d = tmp ;
        while(1){
            if(hash[d % N] == NULL ){
                break ;
            } 
            else if(hash[d % N][0] == tmp){
                min = fmin(min, i - hash[d % N][1]) ;
                if(min == 1)
                    return min ;
                break ;
            }
            else
                d++;
        }
        val %= p ;
        d = val ;
        while(1){
            if(hash[d % N] == NULL){
                hash[d % N] = malloc(2 * sizeof(int)) ;
                hash[d % N][0] = val ;
                hash[d % N][1] = i;
                break;
            }
            else if(hash[d % N][0] == val ){
                hash[d % N][1] = i;
                break ;
            }
            else
                d++;
        }
    }
    if(min == INT_MAX || min == n) 
        return -1 ;
    else
        return min ;
}