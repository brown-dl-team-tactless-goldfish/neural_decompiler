class Solution {
public:
    int c = 1000000007;
    int dp[51][101][51]; // dp array init 
    int ways(int &n,int tmp,int &m,int &k,int cost,int prev,long long &tot){
        if(tmp==n){
            if(cost==k){
                return 1;
            }
            return 0;
        }
        
        if(dp[tmp][prev][cost]!=-1) return dp[tmp][prev][cost];  //Obvious
        
        long long totways=0;
        
        for(int i=1;i<=m;i++){
            if(tmp==0){
                totways = (totways + ways(n,tmp+1,m,k,cost+1,i,tot))%c;
            }
            else{
                if(i<=prev){
                    totways = (totways + ways(n,tmp+1,m,k,cost,prev,tot))%c;
                }
                else
                    totways = (totways + ways(n,tmp+1,m,k,cost+1,i,tot))%c;
            }
        }
        
        return dp[tmp][prev][cost] = totways;  //Obvious
		
    }
    
    int numOfArrays(int n, int m, int k) {
        memset(dp, -1, sizeof(dp));
        long long tot=0;
        return ways(n,0,m,k,0,0,tot);
    }
};