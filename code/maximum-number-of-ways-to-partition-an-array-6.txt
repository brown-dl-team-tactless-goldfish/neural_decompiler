    int n=nums.size();
    
    vector<long long>prefix(n);
    vector<long long>suffix(n);
    
    prefix[0]=nums[0];
    suffix[n-1]=nums[n-1];
    
    for(int i=1;i<n;i++){
        prefix[i]=prefix[i-1]+nums[i];
    }
    
    for(int i=n-2;i>=0;i--){
        suffix[i]=suffix[i+1]+nums[i];
    }
    
    long long count=0;
    
    for(int i=1;i<n;i++){
        if(prefix[i-1]==suffix[i]){
            count++;
        }
    }
    
    unordered_map<long long,long long>left,right;
    
    for(int i=0;i<n-1;i++){
        right[prefix[i]-suffix[i+1]]++;
    }
    
    for(int i=0;i<n;i++){
        
        long long val=0;
        
        long long diff=k-nums[i];
        
        val+=left[diff];
        val+=right[-diff];
        
        count=max(count,val);
        
        if(i<n-1){
         
            long long dd=prefix[i]-suffix[i+1];
            
            left[dd]++;
            right[dd]--;
            
        }
        
    }
    
    return count;
    
}