bool isSolvable(vector<string>& words, string result) {
    
    /*Find the set of all characters present over the list of words, and result strings.*/
    set<char> charSet;
    for(auto word : words) for(auto c : word) charSet.insert(c);
    for(auto c : result) charSet.insert(c);
    
    vector<char> charVec;
    vector<int> charRank(26);
    
    /* Assign the rank 0 to smallest letter, 1 to second smallest and so on */
    int rank = 0;
    for(auto c : charSet) {
        charRank[c - 'A'] = rank++;
        charVec.push_back(c);
    }
    
    /* Coefficient stores for each letter, 
    the overall net coefficient to be multiplied with the value of that letter.
    
    let say, 
    words = ["APPLE", "BANANA"]
    result = ["CHERRRY"]
    
    Sorted set of chars: ['A', 'B', 'C', 'E', 'L', 'N', 'P', 'R', 'Y']
    
    coefficient of 'A' = 10^4 + 10^0 + 10^2 + 10^4
    coefficient of 'B' = 10^5
    coefficient of 'C' = -10^6 (negative because it's the RHS term, and we're summing up LHS and RHS)
    coefficient of 'E' = 10^0 - 10^4
    .
    .
    and so on
    
    coefficient[i] = coefficient of a letter which is ranked with value i.
    
    */
    vector<long long> coefficient(rank, 0);
    
    /* We add since it's the LHS value */
    for(auto word : words) {
        int coeff = 1;
        for(int i = (int) word.size() - 1; i >= 0; --i) {
            coefficient[charRank[word[i] - 'A']] += coeff;
            coeff *= 10;
        }
    }
    
    /* We subtract since its the RHS value */
    int coeff = 1;
    for(int i = (int) result.size() - 1; i >= 0; --i) {
        coefficient[charRank[result[i] - 'A']] -= coeff;
        coeff *= 10;
    }

    
    /* Find all masks having exactly 'rank' number of bits set in it. */
    for(int mask = 0; mask < 1 << 10; ++mask) {
        
        if(__builtin_popcount(mask) == rank) {
            
            /*If the number of set bits in mask is exactly equal to the 
              number of unique characters. */
            
            vector<int> values;
            for(int i = 0; i < 10; ++i) {
                if(mask & (1 << i)) {
                    values.push_back(i);
                }
            }
            
            /*values[i] is the digit assigned to the ith smallest letter or the letter which is ranked with value i */
            
            /*Let say we have chosen X values, we need to try all X! permutations */
                            
            do {
                int netSum = 0;
                
                for(int i = 0; i < rank; ++i)
                    netSum += coefficient[i] * values[i];
                
                /* If the net sum of LHS and RHS is zero, return true */                    
                if(netSum == 0) 
                    return true; 
                
            } while(next_permutation(values.begin(), values.end()));
        }
    }
    
    return false;
}