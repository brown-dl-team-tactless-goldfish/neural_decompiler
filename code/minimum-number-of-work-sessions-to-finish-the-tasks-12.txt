int dp[16][1<<15];

class Solution {
public:
int help(vector<int>& ar,int jobPos,int curTime,int k,int mask){
    int n=ar.size();
    if(jobPos==n) return 0;             //  all jobs selected
    if(dp[curTime][mask]!=-1) return dp[curTime][mask];
    int minSessions = pow(10,8);
    for(int i=0;i<n;i++){
        if((mask&(1<<i))==0){
            // can take this job
            mask^=(1<<i);
            if(curTime+ar[i]>k) minSessions = min(minSessions , 1+help(ar,jobPos+1,ar[i],k,mask)  );
            else minSessions = min(minSessions , help(ar,jobPos+1,ar[i]+curTime,k,mask)  );
            mask^=(1<<i);
        }
    }

    dp[curTime][mask]=minSessions;
    return minSessions;
}

int minSessions(vector<int>& ar, int k) {
    memset(dp,-1,sizeof(dp));
    int curTime=0,mask=0;
    return help(ar,0,0,k,mask)+1;           //  select the 0th job such that curTime = 0 and curTime must not exceed 'k'
}
};