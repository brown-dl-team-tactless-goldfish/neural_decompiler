int cmp(const void *a,const void *b){
    return *(int*)b-*(int*)a;
}

bool backtrack(int *nums,int numsSize,bool *used,int target,int subsum,int pos,int k){
    if(k==0) return true;
    if(subsum==target) return backtrack(nums,numsSize,used,target,0,0,k-1);
    for(int i=pos;i<numsSize;i++){
        if(used[i] || subsum+nums[i] > target) {
            continue;
        }
        used[i]=true;
        if(backtrack(nums,numsSize,used,target,subsum+nums[i],i+1,k)){
            return true;
        }
        used[i]=false;
    }
    return false;
}

bool canPartitionKSubsets(int* nums, int numsSize, int k){
    int sum=0;
    for(int i=0;i<numsSize;i++){
        sum+=nums[i];
    }
    
    if(sum%k!=0) return false;
    qsort(nums,numsSize,sizeof(int),cmp);
    if(nums[0]>sum/k)return false;
    bool *used=(bool*)calloc(numsSize,sizeof(bool));
    return backtrack(nums,numsSize,used,sum/k,0,0,k);
}