typedef struct DSU{
    int* root;
    int* rank;
}DSU;

DSU* createDSU(int size){
    DSU* dsu = malloc(sizeof(DSU));
    dsu->root = malloc(size * sizeof(int));
    for(int i = 0; i < size; i++)
        dsu->root[i] = i;
    dsu->rank = calloc(size, sizeof(int));
    return dsu;
}

int find(int* root, int x){
    if(x == root[x])
        return x;
    return root[x] = find(root, root[x]);
}

void setUnion(int* root, int* rank, int x, int y){
    int rootX = find(root, x);
    int rootY = find(root, y);
    if(rootX != rootY){
        if(rank[rootX] > rank[rootY])
            root[rootY] = rootX;
        else if(rank[rootY] > rank[rootX])
            root[rootX] = rootY;
        else{
            root[rootX] = rootY;
            rank[rootY]++;
        }
    }
}

void freeDSU(DSU* dsu, int size){
    free(dsu->rank);
    free(dsu->root);
    free(dsu);
}

int minScore(int n, int** roads, int roadsSize, int* roadsColSize){
    DSU* dsu = createDSU(n + 1);
    int* root = dsu->root;
    int* rank = dsu->rank;
    int minScore = INT_MAX;

    for(int i = 0; i < roadsSize; i++){
        int city1 = roads[i][0];
        int city2 = roads[i][1];
        setUnion(root, rank, city1, city2);
    }

    for(int i = 0; i < roadsSize; i++){
        int city = roads[i][0];
        int distance = roads[i][2];
        if(find(root, 1) == find(root, city))
            minScore = minScore < distance ? minScore : distance; 
    }
    
    freeDSU(dsu, n + 1);
    return minScore;
}