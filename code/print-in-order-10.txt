
#include <pthread.h>
typedef struct {
    // User defined data may be declared here.
    pthread_mutex_t mutex;
    pthread_cond_t condition;
    int value;
} Foo;

Foo* fooCreate() {
    Foo* obj = (Foo*) malloc(sizeof(Foo));
    
    // Initialize user defined data here.
    pthread_mutex_init(&(obj->mutex), NULL);
    pthread_cond_init(&(obj->condition), NULL);
    obj->value = 0;
    return obj;
}

void first(Foo* obj) {
    
    pthread_mutex_lock(&(obj->mutex));
    // printFirst() outputs "first". Do not change or remove this line.
    printFirst();
    obj->value = 1;
    pthread_cond_signal(&(obj->condition));
    pthread_mutex_unlock(&(obj->mutex));
}

void second(Foo* obj) {
    
    pthread_mutex_lock(&(obj->mutex));
    while (obj->value < 1)
    {
        pthread_cond_wait(&(obj->condition), &(obj->mutex));
    }
    // printSecond() outputs "second". Do not change or remove this line.
    printSecond();
    obj->value = 2;
    pthread_cond_signal(&(obj->condition));
    pthread_mutex_unlock(&(obj->mutex));
}

void third(Foo* obj) {
    
    pthread_mutex_lock(&(obj->mutex));
    while (obj->val < 2)
    {
        pthread_cond_wait(&(obj->condition), &(obj->mutex));
    }
    // printThird() outputs "third". Do not change or remove this line.
    printThird();
    obj->value = 0;
    pthread_cond_signal(&(obj->condition));
    pthread_mutex_unlock(&(obj->mutex));
    
}

void fooFree(Foo* obj) {
    // User defined data may be cleaned up here.
    
    pthread_mutex_destroy(&(obj->mutex));
    pthread_cond_destroy(&(obj->condition));
    free(obj);
    
}
