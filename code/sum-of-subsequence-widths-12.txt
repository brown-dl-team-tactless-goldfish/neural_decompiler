const int m=1e9+7;
class Solution {
public:
    vector<int>POW;
    void init(int n)
    {
        POW.clear();
        POW.push_back(1);
        for(int i=1;i<=n;i++){
            int temp=POW[i-1]*2;
            temp%=m;
            POW.push_back(temp);
        }
        
        for(int i=1;i<=n;i++){
            POW[i]=(POW[i-1]%m+POW[i]%m)%m;
        }
    }
    int mul(long long int a,long long int b)
    {
        return ((a%m)*(b%m))%m;
    }
    int sumSubseqWidths(vector<int>& A) {
        int n=A.size();
        init(n);
        sort(A.begin(),A.end());
        
        int ans=0;
        for(int i=0;i<n;i++)
        {
            int less=i-1;
            int more=n-i-2;
            int temp=0;
            if(less>=0)
            {
                temp=mul(POW[less],A[i]);
            }
            if(more>=0)
            {
                temp=(temp%m+((-1*mul(POW[more],A[i]))%m+m)%m)%m;
            }
            ans=(ans%m+temp%m)%m;            
        }
        
        return ans;
    }
};
