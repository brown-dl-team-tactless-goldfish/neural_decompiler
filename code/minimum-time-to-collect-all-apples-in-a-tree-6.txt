class Solution {
public:
    void dfs(int s, vector<int> adj[], vector<bool> &hasApple, vector<bool> &visited, vector<bool> &mustVisit, int p){
        visited[s] = true;

        if(hasApple[s]){
            if(p >= 0){
                mustVisit[p] = true;
            }
            mustVisit[s] = true;
        }

        for(auto it = adj[s].begin(); it != adj[s].end(); it++)
            if(!visited[*it]){
                dfs(*it, adj, hasApple, visited, mustVisit, s);
                if(mustVisit[*it]) mustVisit[s] = true; 
            }

    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        vector<int> adj[n];
        for(auto i:edges)   adj[i[0]].push_back(i[1]), adj[i[1]].push_back(i[0]);

        vector<bool> mustVisit(n, false);
        vector<bool> visited(n, false);

        dfs(0, adj, hasApple, visited, mustVisit, -1);

        int c = 0;
        for(int i = 0; i < n; i++){
            if(mustVisit[i] && i != 0)  c++;   
        }

        return c * 2;
    }
};