class Solution {
public:
    bool findCommon(vector<int>&a, vector<int>&b) {
        for(int i=0;i<a.size();i++) {
            for(int j=0;j<b.size();j++) {
                if(a[i]==b[j])
                    return 1;
            }
        }
        return 0;
    }
    
    int minimumTeachings(int n, vector<vector<int>>& lang, vector<vector<int>>& friends) {
        int l = lang.size();
        int f = friends.size();
        set<int> ppl_with_no_common; 
        unordered_map<int,vector<int>> mp ; 
        //language , array of users
        
        for(int i=0;i<f;i++) {
            if(!findCommon(lang[friends[i][0]-1] , lang[friends[i][1]-1])) //if friends cannot communiate with each other
            {
                ppl_with_no_common.insert(friends[i][0]);
                ppl_with_no_common.insert(friends[i][1]);
            }
        }
        
        for(int j=0;j<l;j++) {
            if(ppl_with_no_common.find(j+1)!=ppl_with_no_common.end()) {
                for(int k=0;k<lang[j].size();k++)            
                    mp[lang[j][k]].push_back(j+1);
            }
        }
        int ans = 0;
        int language = 0;
        for(int i=1;i<=mp.size();i++) {
            if(ans<mp[i].size()) {
                ans = mp[i].size();
                language = i;
            }
        }
        // ans denotes the number of people speaking the most common language. 
        // so teach this language 'l' to the people who cannot communicate with their friends.
     //   cout<<language<<" will be taught to " << ppl_with_no_common.size()-ans <<" people!";
        return ppl_with_no_common.size()-ans;
    }
};