void quickSort(int* sums, int* idxs, int left, int right) {
    if (left >= right)
        return;
    int l = left, r = right, sum = sums[l], idx = idxs[l];
    while (l < r) {
        while (l < r && (sums[r] > sum || sums[r] == sum && idxs[r] > idx))
            r--;
        sums[l] = sums[r];
        idxs[l] = idxs[r];
        while (l < r && (sums[l] < sum || sums[l] == sum && idxs[l] < idx))
            l++;
        sums[r] = sums[l];
        idxs[r] = idxs[l];
    }
    sums[l] = sum;
    idxs[l] = idx;
    quickSort(sums, idxs, left, l - 1);
    quickSort(sums, idxs, r + 1, right);
}

int quickFind(int* sums, int* idxs, int size, int sum, int minIdx, 
    int* left, int* right) {

    int l, r, k;
    l = 0, r = size - 1, k = (l + r) / 2;
    while (l < r) {
        if (sums[k] < sum || sums[k] == sum && idxs[k] <= minIdx)
            l = k + 1;
        else if (sums[k] > sum || sums[k] == sum && idxs[k] > minIdx && 
            (k > 0 && sums[k - 1] == sum && idxs[k - 1] > minIdx))
            r = k - 1;
        else 
            break;
        k = (l + r) / 2;
    }
    if (sums[k] == sum && idxs[k] > minIdx)
        *left = k;
    else
        return -1;

    l = 0, r = size - 1, k = (l + r) / 2;
    while (l < r) {
        if (sums[k] < sum || 
            sums[k] == sum && (k < size - 1 && sums[k + 1] == sum))
            l = k + 1;
        else if (sums[k] > sum)
            r = k - 1;
        else
            break;
        k = (l + r) / 2;
    }
    *right = k;
    return 0;
}

int subarraySum(int* nums, int numsSize, int k) {
    int *sums = malloc(sizeof(int) * numsSize);
    int *idxs = malloc(sizeof(int) * numsSize);
    int i, cnt = 0, sum = 0;
    for (i = 0; i < numsSize; i++) {
        sum += nums[i];
        sums[i] = sum;
        idxs[i] = i;
    }
    quickSort(sums, idxs, 0, numsSize - 1);

    int l, r;
    if (quickFind(sums, idxs, numsSize, k, -1, &l, &r) == 0)
        cnt += r - l + 1;
    sum = 0;
    for (i = 0; i < numsSize; i++) {
        sum += nums[i];
        if (quickFind(sums, idxs, numsSize, k + sum, i, &l, &r) == 0)
            cnt += r - l + 1;
    }
    return cnt;
}