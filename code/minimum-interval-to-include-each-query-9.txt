class Solution {
public:
    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& q) {
      int s=0;
      vector<vector<int>>queries;
      for(auto x : q){
        queries.push_back({x,s});
        s++;
      }
      
      sort(begin(intervals),end(intervals),[](const vector<int>&v1,const vector<int>&v2){
        return v1[0]<v2[0];
      });
       sort(begin(queries),end(queries),[](const vector<int>&v1,const vector<int>&v2){
        return v1[0]<v2[0];
      });
      
      priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> >pq;
      
      int i=0;
      int n=intervals.size();
      int j=0;
      int m= queries.size();
      vector<int>res(m,-1);
      while(j<m){
      
        while(i<n && intervals[i][0]<= queries[j][0]){
          pq.push({intervals[i][1]-intervals[i][0]+1,intervals[i][1]});
          i++;
        }
  
        while(!pq.empty() && pq.top().second<queries[j][0]) pq.pop();
        
        if(!pq.empty()) res[queries[j][1]]= pq.top().first;
        
        j++;
        
      }
      
      return res;
      
      
    }
};
