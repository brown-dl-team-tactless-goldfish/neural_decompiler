    /*
     * Solution is to find the set of words that are queried should be present
     * in wordlist. For doing this, there are set of rules
     * Rules:
     * 1. If the word matches the wordlist, return the same word
     *    Eg: wordList- [kite], query - [kite] => o/p = [kite]
     *
     * 2. If the word matches the wordlists by doing a lowercase check, then
     *    word should be returned as same case in the wordlist
     *    Eg: wordList - [kite], query - [KITE, KiTE, KItE] => [kite, kite,kite]
     *
     * 3. If the wordList has same case-sensitive words and if the query word
     *    matches the word in wordlist by converting it to a lower-case, then
     *    word returned is the first such match in wordlist
     *    Eg: wordList - [KiTe, kite], query - [Kite] => [KiTe]
     *
     * 4. If the query word by replacing the vowels matches a word in wordlist,
     *    then word returned with same case as the first such match in wordlist
     *    Eg: wordList - [KiTe, kite], query - [keti] => [KiTe]
     *
     * 5. If query word is not found in wordlist, then word returned is an empty
     *    word
     *    Eg: wordList - [KiTe, kite], query - [keet] => []
    */
    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries) {
        // Set to store the unique words from the wordlist
        std::unordered_set<string> uniqueWords;
        // Map to store the lowercase wordlist and original word
        std::unordered_map<string, string> mp;
        // Map to store the words after changing the vowels with '*'
        std::unordered_map<string, string> devowels;
        
        // Fill all the maps and sets
        for (string word : wordlist) {
            // push it in set
            uniqueWords.insert(word);
            
            // LowerCase Rule
            string lowercaseword = lower(word);
            if (mp.count(lowercaseword) == 0)
                mp[lowercaseword] = word;
            
            // Vowel Replacing rule
            string vowelreplacedword = vowelRemovedString(lowercaseword);
            if (devowels.count(vowelreplacedword) == 0)
                devowels[vowelreplacedword] = word;
        }
        
        // Loop over queries, returing results in queries
        for (int i = 0; i < queries.size(); i++) {
            string word = "";
            if (uniqueWords.count(queries[i]) == 1) {
                // Same word found in wordList
                // nothing to update 
            }
            else if (mp.count(word = lower(queries[i])) == 1) {
                // Lower Case word is found, replace with the
                // first occurence of the word in wordlist
                queries[i] = mp[word];
            }
            else if (devowels.count(word = vowelRemovedString(word)) == 1) {
                // After replacing the vowels, the string is
                // present in the wordlist, return the first
                // matched word
                queries[i] = devowels[word];               
            }
            else {
                // Nothing found, push empty string
                queries[i] = "";
            }
        }
        return queries;
    }
    
    string lower(string word) {
        for (int i = 0; i < word.size(); i++) {
            word[i] = tolower(word[i]);
        }
        return word;
    }
    
    string vowelRemovedString(string word) {
        for (int i = 0; i < word.length(); i++) {
            char c = word[i];
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                word[i] = '*';
            }
        }
        return word;
    }