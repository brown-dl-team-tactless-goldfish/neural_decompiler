typedef struct {
    int followerId;
    int followeeId;  
} Follower;


typedef struct {
    int userId;
    int tweetId;    
} Tweet;


typedef struct {
    Follower * Followers;
    int FollowersSize;
    Tweet * Tweets;
    int TweetsCount;
    int TweetsSize;
    int Feed[10];
} Twitter;


Twitter* twitterCreate() {
Twitter * t;
    
    t = (Twitter*) calloc(1,sizeof(Twitter));
    
    t->TweetsSize = 10;
    t->Tweets = (Tweet*)malloc(sizeof(Tweet)*(t->TweetsSize));
    
    t->FollowersSize = 10;
    t->Followers = (Follower*)calloc(t->FollowersSize, sizeof(Follower));

    return t;
}

void twitterPostTweet(Twitter* obj, int userId, int tweetId) {
Tweet* T;
int i;

    if(obj->TweetsCount==obj->TweetsSize){        
        obj->TweetsSize *= 2;
        obj->Tweets = (Tweet*)realloc(obj->Tweets, sizeof(Tweet)*(obj->TweetsSize));         
    }
    
    obj->Tweets[(obj->TweetsCount)].userId = userId;
    obj->Tweets[(obj->TweetsCount)].tweetId = tweetId;   
    
    ++(obj->TweetsCount);    
    
    
}

bool IsFollowing(Twitter* obj, int userID, int followeeId){
int i;
    
    for(i=0;i<obj->FollowersSize;i++){
        if(obj->Followers[i].followerId==userID && obj->Followers[i].followeeId==followeeId){
            return true;
        }        
    }
    return false;
}

int* twitterGetNewsFeed(Twitter* obj, int userId, int*retSize) {
int i;
int j;
    
    *retSize=0;
    for(i=obj->TweetsCount-1;i>=0;i--){
        if(obj->Tweets[i].userId == userId || IsFollowing(obj, userId, obj->Tweets[i].userId)){
            obj->Feed[*retSize] = obj->Tweets[i].tweetId;
            ++(*retSize);
            if(*retSize==10) break;
        }        
    }
    return obj->Feed;
}

void twitterFollow(Twitter* obj, int followerId, int followeeId) {
int i;
    
    if(IsFollowing(obj,followerId,followeeId)) return;
    
    for(i=0;i<obj->FollowersSize;i++){
        if(obj->Followers[i].followerId==0 && obj->Followers[i].followeeId==0){
            obj->Followers[i].followerId = followerId;
            obj->Followers[i].followeeId = followeeId;
            return;
        }        
    }
    
    obj->FollowersSize*=2;
    obj->Followers = (Follower*)realloc(obj->Followers, sizeof(Follower)*obj->FollowersSize);
    
    memset(&obj->Followers[i],0,sizeof(Follower)*obj->FollowersSize/2);
    
    obj->Followers[i].followerId = followerId;
    obj->Followers[i].followeeId = followeeId;

    
}

void twitterUnfollow(Twitter* obj, int followerId, int followeeId) {
int i;
    
    for(i=0;i<obj->FollowersSize;i++){
        if(obj->Followers[i].followerId==followerId && obj->Followers[i].followeeId==followeeId){
            obj->Followers[i].followerId = 0;
            obj->Followers[i].followeeId = 0;
            return;
        }
    }
}

void twitterFree(Twitter* obj) {
    free(obj);
}

/**
 * Your Twitter struct will be instantiated and called as such:
 * Twitter* obj = twitterCreate();
 * twitterPostTweet(obj, userId, tweetId);
 
 * int* param_2 = twitterGetNewsFeed(obj, userId, retSize);
 
 * twitterFollow(obj, followerId, followeeId);
 
 * twitterUnfollow(obj, followerId, followeeId);
 
 * twitterFree(obj);
*/