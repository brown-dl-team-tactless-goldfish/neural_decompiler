public class Allocator
{
    private const int AVAILABLE = -1;
    
    private readonly LinkedList<Block> blocks = new LinkedList<Block>();

    public Allocator(int n)
    {
        blocks.AddFirst(new Block(0, AVAILABLE, n));
    }
    
    public int Allocate(int size, int mID)
    {
        for (var block = blocks.First; block != null; )
        {
            var next = block.Next;
            if (block.Value.Id == AVAILABLE && block.Value.Size >= size)
            {
                blocks.AddBefore(block, new Block(block.Value.Index, mID, size));
                if (block.Value.Size > size)
                {
                    blocks.AddBefore(block, new Block(block.Value.Index + size, AVAILABLE, block.Value.Size - size));
                }
                blocks.Remove(block);
                return block.Value.Index;
            }
            block = next;
        }
        return -1;
    }
    
    public int Free(int mID)
    {
        int freed = 0;
        
        // 1) replace blocks w/ available blocks
        for (var block = blocks.First; block != null; )
        {
            var next = block.Next;
            if (block.Value.Id == mID)
            {
                freed += block.Value.Size;
                blocks.AddBefore(block, new Block(block.Value.Index, AVAILABLE, block.Value.Size));
                blocks.Remove(block);
            }
            block = next;
        }
        
        // 2) merge available blocks
        for (var block = blocks.First; block != null; )
        {
            var next = block.Next;
            if (block.Value.Id == AVAILABLE && next?.Value.Id == AVAILABLE)
            {
                var merged = blocks.AddBefore(block, new Block(block.Value.Index, AVAILABLE, block.Value.Size + next.Value.Size));
                blocks.Remove(block);
                blocks.Remove(next);
                next = merged;
            }
            block = next;
        }
        
        return freed;
    }
    
    private struct Block
    {
        public readonly int Index;
        public readonly int Id;
        public readonly int Size;

        public Block(int index, int id, int size)
        {
            Index = index;
            Id = id;
            Size = size;
        }
    }
}