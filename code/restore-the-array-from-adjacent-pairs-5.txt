class Solution {
public:
    vector<int> restoreArray(vector<vector<int>>& A) {
        int n = A.size(); 
        
        unordered_map<int, vector<int>> connections;
        
        for (const auto& pair : A) {
            connections[pair[0]].push_back(pair[1]);
            connections[pair[1]].push_back(pair[0]);
        }
        
        int cur;
        
        for (const auto& c : connections) {
            if (c.second.size() == 1) {
                cur = c.first; break;
            }
        }
        
        vector<int> res; 
        
		// since every number is unique, to mark whether we have visited a specific number
        unordered_set<int> visited; visited.insert(cur);
        
        while (true) {
            res.push_back(cur); 
            
            if (visited.size() == n + 1) break;
            
            for (const auto next : connections[cur]) {
                if (visited.count(next)) continue; 
                visited.insert(next); 
                cur = next; 
            }
        }
        
        return res;
    }
};