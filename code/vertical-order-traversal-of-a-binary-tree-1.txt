struct class{
    int rol;
    int val;
};

void countNode (struct TreeNode* root, int* returnSize, int* count, int col, int* mincol, int* maxcol){
    if (root == NULL){
        return;
    }
    if (col < *mincol){
        *mincol -= 1;
        count[*mincol] = 0;
    } else if (col > *maxcol){
        *maxcol += 1;
        count[*maxcol] = 0;
    }
    count[col]++;
    countNode (root->left, returnSize, count, col-1, mincol, maxcol);
    countNode (root->right, returnSize, count, col+1, mincol, maxcol);
}

void input(struct TreeNode* root, int rol, int col, int mincol, int* count, struct class** rol_val){
    if (root == NULL){
        return;
    }
    rol_val[col-mincol][count[col]].val = root->val;
    rol_val[col-mincol][count[col]].rol = rol;
    count[col]++;
    input(root->left, rol+1, col-1, mincol, count, rol_val);
    input(root->right, rol+1, col+1, mincol, count, rol_val);
}

int comp (const void* a, const void* b){
    if ((*(struct class*)a).rol == (*(struct class*)b).rol){
        return (*(struct class*)a).val - (*(struct class*)b).val;
    }
    return (*(struct class*)a).rol - (*(struct class*)b).rol;
}


int** verticalTraversal(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    int count[2000];
    int mincol = 1000;
    int maxcol = 1000;
    count[1000] = 0;
    countNode (root, returnSize, count, 1000, &mincol, &maxcol);
    *returnSize = maxcol-mincol+1;
    
    struct class** rol_val = malloc(sizeof(struct class*)*(*returnSize));
    (*returnColumnSizes) = malloc(sizeof(int)*(*returnSize));
    int min = mincol;
    for (int i = 0 ; i < *returnSize ; i++, min++){
        (*returnColumnSizes)[i] = count[min];
        rol_val[i] = malloc(sizeof(struct class)*(count[min]));
        count[min] = 0;
    }
    
    input(root, 0, 1000, mincol, count, rol_val);
    for (int i = 0 ; i < *returnSize ; i++, min++){
        qsort(rol_val[i], (*returnColumnSizes)[i], sizeof(struct class), comp);
    }
    
    int** ans = malloc(sizeof(int*)*(*returnSize));
    min = mincol;
    for (int i = 0 ; i < *returnSize ; i++, min++){
        ans[i] = malloc(sizeof(int)*(count[min]));
        for (int j = 0 ; j < count[min] ; j++){
            ans[i][j] = rol_val[i][j].val;
        }
        free(rol_val[i]);
    }
    
    free(rol_val);
    return ans;
}