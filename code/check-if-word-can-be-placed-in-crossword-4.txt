class Solution {
public:
    bool placeWordInCrossword(vector<vector<char>>& board, string word) {
        
         int m = board.size();
         int n = board[0].size();
         int w = word.length();
         int p = 0;
        //hori scan
         for(int i=0;i<m;i++){
             for(int j=0;j<=n-w;){
                 if(board[i][j]!='#'){ 
                    if(hmatch(board,i,j,word)) return true;  
                 }else 
                     j++;
             }
         }
        //vertical scan
        for(int i=0;i<n;i++){
             for(int j=0;j<=m-w;){
                 if(board[j][i]!='#'){ 
                    if(vmatch(board,j,i,word)) return true; 
                 }else j++;
             }
         }
        
        return false;
        
    } 
      bool hmatch(vector<vector<char>>& board,int i,int &j,string word) {
          int n = word.size();
          int c = board[0].size();
          bool find = true;
          int oj = j;
          cout<<"good"<<i<<j<<endl;
          for(int k=0;k<n;k++){
               if(board[i][j]==' ' || board[i][j]==word[k]){
                  j++; 
              }
              else  {
                  find =false;   
                  break;
              }
          } 
          if(!find ||( j<c && board[i][j]!='#')){
              find = true;
              
              j = oj;
              for(int k=0;k<n;k++){
                 if(board[i][j]==' ' || board[i][j]==word[n-1-k]){
                    j++; 
                  }
                  else  {
                  find =false;   
                  break;
                 }
             }
               
          }
          
          if( find && (j==c||board[i][j]=='#')){
              
               
              find = true;
          }  
          else{
               find = false;
          }
          
          
          while(j<c && board[i][j ]!='#')j++;
           
          
          return find;
      }  
    
    
    
     bool vmatch(vector<vector<char>>& board,int  &i, int j,string word) {
          int n = word.size();
          int row = board.size(); 
          int oi = i;
          bool find = true;
          
         for(int k=0;k<n;k++){
              if(board[i][j]==' ' || board[i][j]==word[k]){
                  i++; 
                  
              }
              else{
                  find = false;
                  break;
              }
          }
         if(!find ||(i<row && board[i][j]!='#')){
              find = true;
              i = oi;
              for(int k=0;k<n;k++){
                 if(board[i][j]==' ' || board[i][j]==word[n-1-k]){
                    i++; 
                  }
                  else  {
                  find =false;   
                  break;
                 }
             } 
          }
          
          if(find && (i==row || board[i][j]=='#')){
              cout<<1;
              
               find =  true;
          }
          else{
              find = false;
             
          } 
             while(i<row && board[i++][j]!='#');
          return find;
      }  
        
        
    
};