int maxScoreWords(vector<string>& words, vector<char>& letters, vector<int>& score) {
        int n = words.size();
        vector<int> word_score;
        for(auto &w : words) {
            int s = 0;
            for(auto &c : w) s += score[c-'a'];
            word_score.push_back(s);
        }
        vector<int> count(26,0);
        for(auto c : letters) count[c-'a']++;
        return dfs(words, word_score, 0, count);
    }
    bool canInclude(string &w, vector<int> &count) {
        vector<int> wc(26,0);
        for(auto c : w) wc[c-'a']++;
        for(int i=0;i<26;i++) if(wc[i]>count[i]) return false;
        for(int i=0;i<26;i++) count[i] -= wc[i];
        return true;
    }
    int dfs(vector<string> &words, vector<int> &wscore, int i, vector<int> &count) {
        if(i>=words.size()) return 0;
        int s1 = 0;
        if(canInclude(words[i], count)) {
            s1 = wscore[i] + dfs(words,wscore,i+1,count);
            for(auto c : words[i]) count[c-'a']++;
        }
        int s2 = dfs(words,wscore,i+1,count);
        return max(s1,s2);
    }