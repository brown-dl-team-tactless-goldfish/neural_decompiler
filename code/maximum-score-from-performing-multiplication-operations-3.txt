int maximumScore(int* nums, int numsSize, int* multipliers, int multipliersSize){
    // allocate pnRecord to record
    short sMultipliersSize = multipliersSize;
    int* pnRecord = (int*) malloc(sMultipliersSize*sizeof(int));

    // get all from start
    sMultipliersSize--;
    pnRecord[0] = 0;
    for(short i=0; i<sMultipliersSize; i++) pnRecord[i+1] = pnRecord[i] + nums[i] * multipliers[i];
    int nRet = pnRecord[sMultipliersSize] + nums[sMultipliersSize] * multipliers[sMultipliersSize];
    
    // trace from both start and end
    sMultipliersSize++;
    for(short i=1; i<=sMultipliersSize; i++)
    {
        // get from end
        pnRecord[0] += nums[numsSize-i] * multipliers[i-1];

        // get from all rest start
        for(short j=0; j<sMultipliersSize-i; j++)
        {
            int nTmp = pnRecord[j+1] + nums[numsSize-i] * multipliers[j+i];
            pnRecord[j+1] = pnRecord[j] + nums[j] * multipliers[j+i];
            if(nTmp > pnRecord[j+1]) pnRecord[j+1] = nTmp;
        }

        if(pnRecord[sMultipliersSize-i] > nRet) nRet = pnRecord[sMultipliersSize-i];
    }

    // free memory
    free(pnRecord);

    return nRet;
}