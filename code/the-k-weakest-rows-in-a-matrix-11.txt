/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

#define OFFSET  16
#define MASK    ((1 << OFFSET) - 1)

static int int_cmp(void *a, void *b) {
    return (*(int *)a & MASK) - (*(int *)b & MASK);
}

int* kWeakestRows(int** mat, int matSize, int* matColSize, int k, int* returnSize)
{
    int *res = calloc(matSize, sizeof(int));
    int count = 0;
    
    *returnSize = k;
    
    for(int i=0; i<matSize; i++) {
        res[i] |= i << 16;
        count = 0;
        for(int j=0; j<matColSize[i]; j++) {
            count += (mat[i][j] & 0x1) ? 1 : 0;     
        }
        res[i] |= count;
    }
    
    qsort(res, matSize, sizeof(int), int_cmp);

    for(int i=0; i<k; i++) {
        res[i] >>= OFFSET;
    }
    
    return res;
}