struct Point {
    int x;
    int y;
};

struct Point queue[10000];
int head, tail;

void push_point(int x, int y) {
    queue[head].x = x;
    queue[head].y = y;
    head++;
}

struct Point pop_point() {
    struct Point ret;
    ret.x = queue[tail].x;
    ret.y = queue[tail].y;
    tail++;

    return ret;
}

int n;

int isInside(int x, int y) {
    if (x < n && y < n && x >= 0 && y >= 0)
        return 1;
    return 0;
}

int maxDistance(int** grid, int gridSize, int* gridColSize){
    n = gridSize, head = 0, tail = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if (grid[i][j] == 1)
                push_point(i, j);
    
    if (head == 0 || head == gridSize * gridSize)
        return -1;

    int max_dist = 0;
    int x_dir[4] = {1,-1,0,0};
    int y_dir[4] = {0,0,1,-1};
    while (head > tail) {        
        int step_size = head - tail;
        while(step_size--) {
            struct Point cur = pop_point();
            for (int i = 0; i < 4; i++) {
                int x_tmp = cur.x + x_dir[i];
                int y_tmp = cur.y + y_dir[i];
                if (isInside(x_tmp, y_tmp) && grid[x_tmp][y_tmp] == 0) {
                    push_point(x_tmp, y_tmp);
                    grid[x_tmp][y_tmp] = 1;
                }
            }            
        }
        max_dist++;
    }

    return max_dist - 1;
}