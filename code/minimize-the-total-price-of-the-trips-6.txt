class Solution {
public:
    int sum=0;
    vector<vector<int>>dp;
    int find(vector<vector<int>>&g, vector<int>&cost, int s,int p, bool k=true)
    {
        if(dp[k][s]!=-1)
            return dp[k][s];
        int ans1=0,ans2=0;
        if(k)
            ans1+=cost[s];
        for(auto i:g[s])
        {
            if(i!=p)
            {
                ans1+=find(g,cost,i,s,!k);
                ans2+=find(g,cost,i,s,k);
            }
        }
        return dp[k][s]=max(ans1,ans2);
    }
    bool helper(vector<vector<int>>&g, int s, int e, int p, vector<int>&cost, vector<int>&price)
    {
        if(s==e)
        {
            sum+=price[e];
            cost[e]+=price[e];
            return true;
        }
        for(auto i:g[s])
        {
            if(i!=p && helper(g,i,e,s,cost,price))
            {
                sum+=price[s];
                cost[s]+=price[s];
                return true;
            }
        }
        return false;
    }
    int minimumTotalPrice(int n, vector<vector<int>>& e, vector<int>& price, vector<vector<int>>& t) 
    {
        vector<vector<int>>g(n);
        
        for(int i=0;i<e.size();i++)
        {
            g[e[i][0]].push_back(e[i][1]);
            g[e[i][1]].push_back(e[i][0]);
        }
        vector<int>cost(n,0);
        for(int i=0;i<t.size();i++)
        {
            helper(g,t[i][0],t[i][1],-1,cost,price);
        }
        
        int sum1=0,sum2=0;
        
        dp.resize(2,vector<int>(n,-1));
        sum1=find(g,cost,0,-1);       
        
        sum-=(sum1/2);
        
        return sum;
    }
};