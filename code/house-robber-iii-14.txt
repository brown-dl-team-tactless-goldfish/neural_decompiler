struct Rob
{
    int withRobbery;
    int withoutRobbery;
    Rob(){
        withRobbery=0;
        withoutRobbery=0;
    }
};
class Solution {
public:
      
int rob(TreeNode* root) {
        Rob result=fun(root);
    return max(result.withRobbery,result.withoutRobbery); 
    }
    Rob fun(TreeNode* root)
    {
      if(!root)
          return Rob();
        
        // Left se kitna aayega
        Rob left=fun(root->left);
        
        // right se kitna aayega
        Rob right=fun(root->right);
        
        // Ab yadi current pr robbery kru 
           // to left se without robbery kitna max aayega
           // to right se without robbery kitna max aayega
      Rob ans=Rob();
        ans.withRobbery=root->val;
        ans.withRobbery+=(left.withoutRobbery+right.withoutRobbery);
        
        // Ab yadi current pr robbery na kru
           // to left se with robbery or without robbery wale me se max 
           // to right se with robbery or wihtou robbery wale me se max
           ans.withoutRobbery=0;
          ans.withoutRobbery+=max(left.withoutRobbery,left.withRobbery)+max(right.withoutRobbery,right.withRobbery);
        return ans;
     
    }
};

Time Complexity: O(n)
Space Complexity: O(n) ----> due to recursion.