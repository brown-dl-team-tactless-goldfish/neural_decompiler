struct TripletNode {
    char * triplet;
    int len;
    struct TripletNode * next;
};

struct TripletNode * create_triplet_node(int n, int magnitude) {
    int hundreds = n / 100;
    int tens = (n / 10) % 10;
    int ones = n % 10;
    
    int hundreds_len = 0;
    int tens_len = 0;
    int ones_len = 0;
    int mag_len = 0;
    
    char * hundreds_str;
    char * tens_str;
    char * ones_str;
    char * mag_str;
    char * triplet;
    
    struct TripletNode * triplet_node = (struct TripletNode *) malloc(sizeof(struct TripletNode));
    
    switch (hundreds) {
        case 9:
            hundreds_str = "Nine Hundred ";
            break;
        case 8:
            hundreds_str = "Eight Hundred ";
            break;
        case 7:
            hundreds_str = "Seven Hundred ";
            break;
        case 6:
            hundreds_str = "Six Hundred ";
            break;
        case 5:
            hundreds_str = "Five Hundred ";
            break;
        case 4:
            hundreds_str = "Four Hundred ";
            break;
        case 3:
            hundreds_str = "Three Hundred ";
            break;
        case 2:
            hundreds_str = "Two Hundred ";
            break;
        case 1:
            hundreds_str = "One Hundred ";
            break;
        case 0:
            hundreds_str = "";
            break;
    }
    
    if (tens != 1) {
        switch (tens) {
            case 9:
                tens_str = "Ninety ";
                break;
            case 8:
                tens_str = "Eighty ";
                break;
            case 7:
                tens_str = "Seventy ";
                break;
            case 6:
                tens_str = "Sixty ";
                break;
            case 5:
                tens_str = "Fifty ";
                break;
            case 4:
                tens_str = "Forty ";
                break;
            case 3:
                tens_str = "Thirty ";
                break;
            case 2:
                tens_str = "Twenty ";
                break;
            case 0:
                tens_str = "";
                break;
        }
        switch (ones) {
            case 9:
                ones_str = "Nine ";
                break;
            case 8:
                ones_str = "Eight ";
                break;
            case 7:
                ones_str = "Seven ";
                break;
            case 6:
                ones_str = "Six ";
                break;
            case 5:
                ones_str = "Five ";
                break;
            case 4:
                ones_str = "Four ";
                break;
            case 3:
                ones_str = "Three ";
                break;
            case 2:
                ones_str = "Two ";
                break;
            case 1:
                ones_str = "One ";
                break;
            case 0:
                ones_str = "";
                break;
        }
    } else {
        tens_str = "";
        switch (ones) {
            case 9:
                ones_str = "Nineteen ";
                break;
            case 8:
                ones_str = "Eighteen ";
                break;
            case 7:
                ones_str = "Seventeen ";
                break;
            case 6:
                ones_str = "Sixteen ";
                break;
            case 5:
                ones_str = "Fifteen ";
                break;
            case 4:
                ones_str = "Fourteen ";
                break;
            case 3:
                ones_str = "Thirteen ";
                break;
            case 2:
                ones_str = "Twelve ";
                break;
            case 1:
                ones_str = "Eleven ";
                break;
            case 0:
                ones_str = "Ten ";
                break;
        }
    }
    
    switch (magnitude) {
        case 0:
            mag_str = "";
            break;
        case 1:
            mag_str = "Thousand ";
            break;
        case 2:
            mag_str = "Million ";
            break;
        case 3:
            mag_str = "Billion ";
            break;
        case 4:
            mag_str = "Trillion ";
            break;
        case 5:
            mag_str = "Quadrillion ";
            break;
    }
    
    while (*(hundreds_str + hundreds_len) != 0) {
        hundreds_len++;
    }
    
    while (*(tens_str + tens_len) != 0) {
        tens_len++;
    }
    
    while (*(ones_str + ones_len) != 0) {
        ones_len++;
    }
    
    while (*(mag_str + mag_len) != 0) {
        mag_len++;
    }
    
    int len = hundreds_len + tens_len + ones_len + mag_len;
    
    triplet = (char *) malloc(len * sizeof(char));
    
    int t = 0;
    
    for (int i = 0; i < hundreds_len; i++) {
        *(triplet + t) = *(hundreds_str + i);
        t++;
    }
    
    for (int i = 0; i < tens_len; i++) {
        *(triplet + t) = *(tens_str + i);
        t++;
    }
    
    for (int i = 0; i < ones_len; i++) {
        *(triplet + t) = *(ones_str + i);
        t++;
    }
    
    for (int i = 0; i < mag_len; i++) {
        *(triplet + t) = *(mag_str + i);
        t++;
    }
    
    *(triplet + len - 1) = 0;
    
    triplet_node->triplet = triplet;
    triplet_node->len = len;
    triplet_node->next = NULL;
    
    return triplet_node;
}

char * numberToWords(int num) {
    if (num == 0) {
        return "Zero";
    } else {
        struct TripletNode* head = NULL;
        int mag = 0;
        int len = 0;
        while (num > 0) {
            int trip = num % 1000;
            if (trip > 0) {
                struct TripletNode * temp = create_triplet_node(trip, mag);
                temp->next = head;
                len += temp->len;
                head = temp;
            }
            num = num / 1000;
            mag++;
        }
        
        char * num_str = (char *) malloc(len * sizeof(len));
        int t = 0;
        
        while (head != NULL) {
            for (int i = 0; i < head->len - 1; i++) {
                *(num_str + t) = *((head->triplet) + i);
                t++;
            }
            
            *(num_str + t) = ' ';
            t++;
            
            head = head->next;
        }
        
        *(num_str + len - 1) = 0;
        
        return num_str;
    }
}