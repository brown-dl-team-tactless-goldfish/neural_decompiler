class Solution {
public:
    optional<pair<int, int>> num_removes(string &s) {
        int l = 0, r = 0;
        for (auto &c : s) {
            l += c == '(';
            r += !l && c == ')';
            l -= l && c == ')';
        }
        if (!l && !r)
            return nullopt;    
        return make_optional(make_pair(l, r));
    }
    
    void dfs(int idx, int l, int r, string s, vector<string> &ans) {
        if (!l && !r && !num_removes(s)) {
            ans.emplace_back(s);
        }
        char prev = '$';
        for (int i = idx; i < s.size(); i++) {
            if (prev == s[i]) continue;
            auto rl = l && s[i] == '(';
            auto rr = r && s[i] == ')';
            if (rl || rr) {
                auto tmp = s.substr(0, i) + s.substr(i + 1);
                dfs(i, l - rl, r - rr, tmp, ans);
            } 
            prev = s[i];
        }
    }
    
    vector<string> removeInvalidParentheses(string s) {
        vector<string> ans;
        auto opt = num_removes(s);
        auto [l, r] = opt ? *opt : make_pair(0, 0);
        dfs(0, l, r, s, ans);
        return ans;
    }
};