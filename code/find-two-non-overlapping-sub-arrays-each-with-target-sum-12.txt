class Solution {
public:
    /*
        [1   8]
        
        list of segment pairs which make target values[{1 3} {2 2} {6, 7} {6, 8}]
        
        [0] = inf                          = 1
        [1] = 3 {1, 3} = 1                 = 1
        [2] = 1 {2, 2}                     = 1
        [3] = inf                          = 2
        [4] = inf                          = 2
        [5] = inf                          = 2
        [6] = min(3 {6, 8} , 2 {6, 7}) = 2 = 2
        [7] = inf                          = inf
        [8] = inf                          = inf
        
    */
    #define inf 0x3f3f3f3f
    
    int non_overlapping_min_sub_array_len_from_index[100001];
    int minSumOfLengths(vector<int>& arr, int target) {
        memset(non_overlapping_min_sub_array_len_from_index, inf, sizeof non_overlapping_min_sub_array_len_from_index);
        vector <pair<int, int>> targetMakingPairs;
        int lf = 0, sum = 0;
        for (int rt = 0; rt < arr.size(); rt++) {
            sum += arr[rt];
            while(sum > target) {
                sum -= arr[lf++];
            }
            if (sum == target) {
                targetMakingPairs.push_back({lf, rt});
                non_overlapping_min_sub_array_len_from_index[lf] = min(non_overlapping_min_sub_array_len_from_index[lf], rt - lf + 1);
            }
        }
        
        if (targetMakingPairs.size() < 2) return -1;
        
        for (int index = arr.size() - 1; index >= 0; index--) {
            non_overlapping_min_sub_array_len_from_index[index] = min(non_overlapping_min_sub_array_len_from_index[index], non_overlapping_min_sub_array_len_from_index[index + 1]);
        }

        
        int result = inf;
        for (int pair_id = 0; pair_id < targetMakingPairs.size(); pair_id++) {
            result = min(result, targetMakingPairs[pair_id].second - targetMakingPairs[pair_id].first + 1 + non_overlapping_min_sub_array_len_from_index[ targetMakingPairs[pair_id].second + 1 ]);
        }
        
        return result == inf ? -1 : result;
    }
};