class Solution {
public:
    const int mod = 1e9+7;
    #define maxn 3501
    int dp[maxn][maxn], sum[maxn];
    short prefix[maxn][maxn];
    int numberOfCombinations(string num) {
        int n = num.size();
        if (num[0] == '0') return 0;
        
        for (int i = n-1; i >= 0; i--) {
            for (int j = n-1; j >= 0; j--) {
                if (num[i] == num[j]) {
                    prefix[i][j] = prefix[i+1][j+1] + 1;
                }
            }
        }
        
        for (int j = 1; j <= n; j++) dp[1][j] = 1;
        sum[1] = 1;
        
        for (int i = 2; i <= n; i++) {
            if (num[i-1] == '0') {  // handling the leading zero
                for (int j = i; j <= n; j++) dp[i][j] = 0;
                for (int k = 1; k <= i; k++) sum[k] = (sum[k-1] + dp[k][i]) % mod;
                continue;
            }
            for (int j = i; j <= n; j++) {
                int k = 2*i - 1 - j;
                if (k <= 0) {
                    dp[i][j] += sum[i-1];
                } else {
                    int c = k;
                    int len = prefix[k-1][i-1];
                    if (len >= j-i+1) {
                        c = k;
                    } else {
                        if (num[k-1+len] > num[i-1+len]) c = k+1;
                    }
                    dp[i][j] += (sum[i-1] - sum[c-1] + mod) % mod;
                }
            }
            memset(sum, 0, sizeof(sum));
            for (int k = 1; k <= i; k++) sum[k] = (sum[k-1] + dp[k][i]) % mod;
        }
        int ans = 0;
        for (int j = 1; j <= n; j++) ans += dp[j][n], ans %= mod;
        return ans;
    }
};