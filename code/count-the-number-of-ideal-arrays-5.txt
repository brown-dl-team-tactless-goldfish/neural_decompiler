class Solution {
public:
    int mm[10001][16];
    long func(long x,long m,long maxValue, long mod){
        if(m==1){
            mm[x][m] = 1;
            return 1;
        }
        if(mm[x][m])
            return mm[x][m];
        long res = 0;
        for(int i=2;i<=(maxValue/x);i++){
            if(x*i <= maxValue)
                res = (res + func(x*i,m-1,maxValue,mod))%mod;
            else
                break;
        }
        mm[x][m]=res;
        return res;
    }
    long exp(long x,long a,long mod){
        if(a==0)
            return 1;
        long temp = exp(x,a/2,mod);
        temp = (temp*temp)%mod;
        if(a%2)
            temp = (temp*x)%mod;
        return temp;
    }
    int idealArrays(int n, int maxValue) {
        vector<long> c(maxValue+1);
        memset(mm,0,sizeof(mm));
        long mod = 1e9 + 7;
        c[0]=1;
        for(long i=1;i<=min((long)(n-1),(long)maxValue);i++){
            c[i] = (((c[i-1]*(n-i))%mod)*exp(i,mod-2,mod))%mod;
        }
        long ans=0;
        for(long i=1;i<=maxValue;i++){
            for(int j=1;j<=min(15,n);j++){
                long r = func(i,j,maxValue,mod);
                if(r == 0)
                    break;
                ans = (ans + (r*c[j-1])%mod)%mod;
            }
        }
        return ans;
    }
};