    int componentValue(vector<int>& nums, vector<vector<int>>& edges) {
        const auto sum = accumulate(nums.begin(), nums.end(), 0); 
        vector<vector<int>> g(nums.size());
        for (auto& e:edges) g[e[0]].push_back(e[1]), g[e[1]].push_back(e[0]);        
        for (int d=1;d<= sum/2; d++)
            if (sum % d == 0 && dfs(g, nums, 0, -1, d) == 0) return sum/d - 1;
        return 0;
    }
    
    int dfs(const vector<vector<int>>& g, const vector<int>& nums, int i, int par, int d){
        int sum = nums[i];
        for (auto j : g[i]) {
            if (j == par) continue;
            if (int x = dfs(g, nums, j, i, d); x==-1) return -1; //impossible
            else sum += x;
        }
        if (sum > d) return -1;
        return sum == d ? 0 : sum;
    }