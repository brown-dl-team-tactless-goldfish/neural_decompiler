class Solution {
public:
    vector<vector<int>> hcf;
    int dp[10004][7][7];
    int mod = 1e9 + 7;

    int gcd(int a, int b) {
        if (a == 0) return b;
        if (b == 0) return a;

        return a > b ? gcd(b, a % b) : gcd(a, b % a);
    }

    int solve(int i, int prev, int pre_prev, int &n) {
        if (i == n) return 1;

        int ans = 0;
        if (prev != -1 && pre_prev != -1 && dp[i][prev][pre_prev] != -1) return dp[i][prev][pre_prev];
        for (int x = 1; x <= 6; x++) {
            if ((i == 0) || (x != prev && x != pre_prev && hcf[x][prev] == 1)) {
                int res = solve(i + 1, x, prev, n);
                ans += res;
                ans %= mod;
            }
        }

        if (prev != -1 && pre_prev != -1) dp[i][prev][pre_prev] = ans;
        return ans;
    }
    int distinctSequences(int n) {

        hcf.resize(7, vector<int> (7));
        memset(dp, -1, sizeof(dp));

        for (int i = 1; i <= 6; i++) {
            for (int j = 1; j <= 6; j++) {
                if (i == 1 || j == 1) hcf[i][j] = 1;
                else if (i == 0 || j == 0) hcf[i][j] = i + j;
                else hcf[i][j] = gcd(i, j);
            }
        }

        return solve(0, -1, -1, n);
    }
};