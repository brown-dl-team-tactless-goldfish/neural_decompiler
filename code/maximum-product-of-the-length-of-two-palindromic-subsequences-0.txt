int maxPalindromic(char *str){
    if(strlen(str)==1) return 1;
    int len = strlen(str);
    int dp[len][len];
    
    dp[0][0] = 1;
    for(int i=1; i<len; ++i){
        dp[i][i] = 1;
        dp[i-1][i] = str[i]==str[i-1] ? 2 : 1;
    }

    for(int i=2; i<len; ++i){
        for(int j=0; i+j<len; ++j){
            int head = j, tail = i+j;
            dp[head][tail] = str[head]==str[tail] ? dp[head+1][tail-1]+2 : fmax(dp[head+1][tail], dp[head][tail-1]);
        }
    }

    return dp[0][len-1];
}

int maxProduct(char * s){
    int res = 0, mask = (1<<strlen(s))-1;
    
    for(int i=1; i<mask; ++i){
        int cnt1 = 0, cnt2 = 0;
        char tmp1[strlen(s)], tmp2[strlen(s)]; 
        for(int j=strlen(s)-1; j>=0; --j){
            if(1<<j & i)
                tmp1[cnt1++] = s[j];
            else
                tmp2[cnt2++] = s[j];
        }

        tmp1[cnt1] = '\0';
        tmp2[cnt2] = '\0';
        int len1 = maxPalindromic(tmp1), len2 = maxPalindromic(tmp2);
        res = fmax(res, len1*len2);
    }

    return res;
}