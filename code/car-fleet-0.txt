typedef struct {
    int speed;
    int position;
    float timeOfArrival;
} car_t;


int compare( const void * a, const void * b )
{
    return ( (( car_t* )a)->position - (( car_t* )b)->position );
}



int carFleet( int target, int* position, int positionSize, int* speed, int speedSize ) {
    int fleet = 1;
    car_t * cars = malloc( sizeof( car_t )*positionSize );

    if ( positionSize == 0 ) return 0;

    for ( int i = 0; i < positionSize; i++ )
    {
        cars[i].timeOfArrival = ( ( float )target - ( float )position[i] ) / ( float )speed[i];
        cars[i].position = position[i];
        cars[i].speed = speed[i];
    }

    qsort( cars, positionSize, sizeof( car_t ), compare );

    for ( int i = positionSize - 1; i >= 1; i-- )
    {
        if ( cars[i].timeOfArrival < cars[i - 1].timeOfArrival )
        {
            fleet++;
        }
        else
        {
            cars[i-1].timeOfArrival = cars[i].timeOfArrival;
        }
    }

    free( cars );

    return fleet;
}
