class Solution {
    int n, m;
    int64_t dp[16][16][2];
public:
    int maxProductPath(vector<vector<int>>& a) {
        memset(dp, 0xffffffff, sizeof(dp));
        n = a.size();
        m = a[0].size();
        auto res = dfs(a, 0, 0, 0);
        if(res <0) return -1;
        return res%1000000007;
    }
    int64_t dfs(vector<vector<int>>& a, int r, int c, bool minus){
        if(r == n-1 && c == m-1) return a[r][c];
        auto old_state = minus;//keep old minus state
        
        if(dp[r][c][minus] != -1) return dp[r][c][minus];
        
        int64_t res;
        
        if(minus){//take minimum
            res = LLONG_MAX;
            if(a[r][c] <0) minus= false;
            if(r+1 <n) res = a[r][c]*dfs(a, r+1, c, minus);
            if(c+1 <m) res = min(res, a[r][c]*dfs(a, r, c+1, minus));
            
        }else{//take maximum
            res = LLONG_MIN;
            if(a[r][c] <0) minus= true;
            if(r+1 <n) res = a[r][c]*dfs(a, r+1, c, minus);
            if(c+1 <m) res = max(res, a[r][c]*dfs(a, r, c+1, minus));
        }
        return dp[r][c][old_state] = res;
    }
};