class Solution {
public:
    
    int count = 0;
    
    // declare a unordered map
    
    unordered_map<int, int> mp;
    
    void dfs(vector<int>& nums, int i, int n, int k)
    {
        // base case, if we have found a subset
        
        if(i == n)
        {
            count++;
            
            return;
        }
        
        // inclusion part
        
        // according to condition add the curr element
        
        if(mp[nums[i] - k] == 0)
        {
            mp[nums[i]]++;
            
            dfs(nums, i + 1, n, k);
            
            mp[nums[i]]--;
        }
        
        // exclusion part
        
        dfs(nums, i + 1, n, k);
    }
    
    int beautifulSubsets(vector<int>& nums, int k) {
        
        int n = nums.size();
        
        // sort the array
        
        sort(nums.begin(), nums.end());
        
        // call dfs function
        
        dfs(nums, 0, n, k);
        
        // remove one empty set from count
        
        return count - 1;
    }
};