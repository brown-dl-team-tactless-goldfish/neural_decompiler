struct StringRecord
{
    int nZeroCount;
    int nOneCount;

    struct StringRecord* pstNext;
};

int minFlipsMonoIncr(char * s){
    // skip previous 0's first
    while('0' == *s) s++;
    if('\0' == *s) return 0;

    int nTotalOneCount = 0;
    struct StringRecord* pstHead = NULL;
    while(*s)
    {
        // count 1' first
        int nOneCount = 0;
        while('1' == *s)
        {
            nOneCount++;
            s++;
        }
        
        // skip last 1' and break
        if('\0' == *s) break;

        // count 0' later
        struct StringRecord* pstNew = (struct StringRecord*)malloc(sizeof(struct StringRecord));
        pstNew->nZeroCount = 0;
        pstNew->nOneCount = nOneCount;
        pstNew->pstNext = pstHead;
        pstHead = pstNew;

        while('0' == *s)
        {
            pstHead->nZeroCount++;
            s++;
        }

        // count total middle 1'
        nTotalOneCount += pstHead->nOneCount;
    }

    // find minimum flip base on one by one group of {1', 0'}
    unsigned short usRet = nTotalOneCount;
    while(pstHead)
    {
        // only flip previous 1' and current 0'
        unsigned short usCurrFlip = (nTotalOneCount - pstHead->nOneCount) + pstHead->nZeroCount;
        if(usCurrFlip < usRet) usRet = usCurrFlip;

        struct StringRecord* pstDel = pstHead;
        pstHead = pstHead->pstNext;
        if(pstHead)
        {
            // merge current 1' and 0' to next group
            pstHead->nZeroCount += pstDel->nZeroCount;
            pstHead->nOneCount += pstDel->nOneCount;
        }
        free(pstDel);
    }

    return usRet;
}