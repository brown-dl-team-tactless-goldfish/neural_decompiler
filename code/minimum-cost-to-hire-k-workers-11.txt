public class Solution {
    
    public class Worker {
        public int Quality;
        public int Wage;
        public double Rate;
    }
    
    Worker[] workers;
    
    int K;
    
    public double MincostToHireWorkers(int[] quality, int[] wage, int K) {
        this.K = K;
        
        workers = new Worker[quality.Length];
        
        double minComp = double.PositiveInfinity;
        
        var _workers = new List<Worker>(quality.Length);
        
        for (int i = 0; i < quality.Length; i++) {
            _workers.Add(new Worker { Quality = quality[i], Wage = wage[i], Rate = 1.0 * wage[i] / quality[i] });
        }
        
        workers  = _workers.OrderBy(x => x.Quality).ToArray();
        
        for (int i = 0; i < workers.Length; i++) {
            var worker = workers[i];
            
            double rate = worker.Rate;
            
            int k = 1;
            double comp = worker.Wage;
            
            if (k == K) {
                minComp = Math.Min(comp, minComp);
            }
            else
            for (int j = 0; j < workers.Length; j++) {
                
                if (j != i && workers[j].Rate <= rate) {
                    k++;
                    comp += rate * workers[j].Quality;
                    if (comp >= minComp) break;
                    if (k == K) {
                        minComp = Math.Min(comp, minComp);
                        break;
                    }
                }
            }
            
        }
        
        return minComp;
    }
}