#ifdef NON_WORK
/* if left child is returning camera needed,
     camera will be placed at parent,
    in this case, calling this func for right child is not rqd 
    But in this right child may be a subtree, this solution ignores going through the right subtree which is incorrect*/
int getnumc(struct TreeNode* nd, int *nc){
    /* as node is null no camera needed */
    if (!nd)
        return NO_CAMERA_NEEDED;
    /* two choices */
    /* place camera on node or on children */
    int lret;
    lret = getnumc(nd->left, nc);
    if (lret == CAMERA_NEEDED){
        (*nc)++;
        return HAS_CAMERA;
    }
    int rret = getnumc(nd->right, nc);
    /* if any child need a camera, increment number of cameras.
       place a camera
     */
    if (rret == CAMERA_NEEDED){
        (*nc)++;
        return HAS_CAMERA;
    }
    /* if any child a camera, 
    parent does not need a camera */
    if ((lret == HAS_CAMERA) || (rret == HAS_CAMERA))
        return NO_CAMERA_NEEDED;
    return CAMERA_NEEDED;
}
#endif
