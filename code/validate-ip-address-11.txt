vector<string> split(string IP, char ch)
{
    stringstream ob(IP);
    
    string part;
    
    vector<string> parts;
    
    while(getline(ob,part,ch))
    {
        
        parts.push_back(part);
    }
    
    return parts;
    
}

bool validIPv4(string IP)
{
    if(count(IP.begin( ),IP.end( ), '.') != 3)
    {
        
        return false;
    }
    
    vector<string> parts = split(IP,'.');
    
    if(parts.size( ) != 4)
    {
        return false;
    }
    
    for(auto part : parts)
    {
        if(part.empty( )||part.size() >3||(part.size()>1 && part[0]=='0') )
        {
            
            return false;
        }
        
        for(auto c :  part)
        {
            
            if(!isdigit(c))
            {
                return false;
            }
        }
        
        if(stoi(part) > 255)
        {
            
            return false;
        }
        
    }
    
    return true;
    
}

bool validIPv6(string IP)
{
    if(count(IP.begin( ),IP.end( ), ':') != 7)
    {
        
        return false;
    }
    
    vector<string> parts = split(IP,':');
    
    if(parts.size( ) != 8)
    {
        return false;
    }
    
    for(auto part : parts)
    {
        if(part.empty( )||part.size() > 4)
        {
            
            return false;
        }
        
        for(auto c :  part)
        {
             if (!isdigit(c) && (!isalpha(c) || toupper(c) > 'F'))
             {
                return false;
            }
           
        }
        
    }
    
    return true;
    
}
string validIPAddress(string IP) {
    
    return validIPv4(IP)? "IPv4" : (validIPv6(IP)? "IPv6" : "Neither");
    
}