class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        if(edges.empty())
            return 0;
        
        vector<vector<pair<int,double>>> g(n);
        
        for(int i = 0; i < edges.size(); i++){
            int u = edges[i][0];
            int v = edges[i][1];
            double p = succProb[i];
            g[u].push_back({v,p});
            g[v].push_back({u,p});
        }
        
        vector<double> costs(n,0);
        costs[start] = 1;
        //given start and end
        queue<int> q;
        q.push(start);
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            for(auto c : g[node]){
                if(costs[c.first] < costs[node]*c.second){
                    costs[c.first] = costs[node]*c.second;
                    q.push(c.first);
                }
            }
        }
        
        
        return costs[end];
    }
};