#define all(x) x.begin(), x.end()
#define sz(x) static_cast<int32_t>(x.size())
#define pb push_back
#define ll long long
const int MOD = 1e9 + 7, N = 200005;
const ll INF = 2e18;
typedef pair<int, int> pii;
template <class T> inline void chmax(T &x,T y){ x = max((x), (y));}
template <class T> inline void chmin(T &x,T y){ x = min((x), (y));}
template <typename T> T powm(T a,T b, ll m){T cnt=1; while(b>0) { if(b%2==1) cnt=(cnt*a)%m; b/=2; a=(a*a)%m; }return cnt%m;}
template <typename T> T gcd(T a,T b) {if(a==0) return b; return gcd(b%a,a);}

class Solution {
public:
    int maximumMinutes(vector<vector<int>>& g) {
        int n = g.size(), m = sz(g[0]);
        queue <array<int, 2>> Q;
        const int dx[] = {1, -1, 0, 0};
        const int dy[] = {0, 0, 1, -1};
        vector <vector<int>> time(n, vector<int>(m, -1));
        vector <vector<int>> dis(n, vector<int>(m, -1));
        for (int i = 0; i < n; ++i) {
          for (int j = 0; j < m; ++j) {
            if (g[i][j] == 1) {
              Q.push({i, j});
              time[i][j] = 0;
            }
          }
        }
        while (!Q.empty()) {
          auto now = Q.front();
          Q.pop();
          int x = now[0], y = now[1];
          for (int i = 0; i < 4; ++i) {
            int xx = x + dx[i];
            int yy = y + dy[i];
            if (xx >= 0 and xx < n and yy >= 0 and yy < m and g[xx][yy] != 2 and time[xx][yy] == -1) {
              time[xx][yy] = time[x][y] + 1;
              Q.push({xx, yy});
            }
          }
        }
        dis[0][0] = 0;
        Q.push({0, 0});
        while (!Q.empty()) {
          auto now = Q.front();
          Q.pop();
          int x = now[0], y = now[1];
          for (int i = 0; i < 4; ++i) {
            int xx = x + dx[i];
            int yy = y + dy[i];
            if (xx >= 0 and xx < n and yy >= 0 and yy < m and g[xx][yy] != 2 and dis[xx][yy] == -1) {
              Q.push({xx, yy});
              dis[xx][yy] = dis[x][y] + 1; 
            }
          }
        }
        int l = 0, r = m * n + 10;
        int ans = -1;
        auto ok = [&](int mi) {
          queue <array<int, 2>> q;
          q.push({0, 0});
           vector<vector<int>> vis(n, vector<int>(m, 0)); 
          while (!q.empty()) {
            auto now = q.front();
            q.pop();
            int x = now[0], y = now[1];
            if (x == n - 1 and y == m - 1) {
              return true;
            }
              vis[x][y] = 1;
            for (int i = 0; i < 4; ++i) {
              int xx = x + dx[i];
              int yy = y + dy[i];
              if (xx >= 0 and xx < n and yy >= 0 and yy < m and g[xx][yy] != 2 and !vis[xx][yy]) {
                  if (xx == n - 1 and yy == m - 1 and (dis[xx][yy] + mi <= time[xx][yy] or time[xx][yy] == -1))
                    q.push({xx, yy});
                  else if ((time[xx][yy] == -1) or dis[xx][yy] + mi < time[xx][yy]) {
                      q.push({xx, yy});
                  }
              }
            }
          }
          return false;
        };
        // for (int i = 0; i < n; ++i) {
        //     for (int j = 0; j < m; ++j) {
        //         cout << time[i][j] << " ";
        //     }
        //     cout << '\n';
        // }
        while (l <= r) {
          int mid = (l + r) >> 1;
          if (ok(mid)) {
            ans = mid;
            l = mid + 1;
          } else {
            r = mid - 1;
          }
        }
        if (ans > m * n) ans = 1e9;
        return ans;
    }
};