/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    int** output = NULL;
    int level = 0;
    struct TreeNode* queue[2000];
    struct TreeNode* tmp = NULL;
    int queue_num = 0;
    int cur_level_num = 0;
    int cur_queue_idx = 0;
    int i = 0;
    int *out_level_num = NULL;

    if (root == NULL) {
        *returnSize = 0;
        return NULL;
    }
    output = (int**)malloc(2000*sizeof(int*));
    out_level_num = (int*)malloc(2000*sizeof(int));
    queue[queue_num++] = root;
    cur_level_num = queue_num - cur_queue_idx;
    while (cur_level_num > 0) {
        // pop element from queue
        out_level_num[level] = cur_level_num;
        output[level] = (int*)malloc(cur_level_num*sizeof(int));
        for (i = cur_queue_idx; i < cur_queue_idx + cur_level_num; i++) {
            tmp = queue[i];
            if (level & 0x1) {
                output[level][cur_level_num-1 - (i-cur_queue_idx)] = tmp->val;
            } else {
                output[level][i-cur_queue_idx] = tmp->val;
            }
            if (tmp->left) {
                queue[queue_num++] = tmp->left;
            }
            if (tmp->right) {
                queue[queue_num++] = tmp->right;
            }
        }
        cur_queue_idx = i;
        cur_level_num = queue_num - cur_queue_idx;
        level++;
    }
    *returnSize = level;
    *returnColumnSizes = out_level_num;
    return output;
}