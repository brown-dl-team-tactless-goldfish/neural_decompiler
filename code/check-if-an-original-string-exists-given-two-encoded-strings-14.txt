public class Solution {
    public bool PossiblyEquals(string s1, string s2) {
        if (s1 == null && s2 == null) {
            return true;
        }
        else if (s1 == null || s2 == null) {
            return false;
        }
        
        // 0 is visited false, 1 is visited true
        var memo = new Dictionary<int, int>[s1.Length + 1][];
        for (int i = 0; i < s1.Length + 1 ; i++) {
            memo[i] = new Dictionary<int, int>[s2.Length + 1];
            for (int j = 0; j < s2.Length + 1; j++) {
                memo[i][j] = new Dictionary<int, int>();
            }
        }
        
        return FindPossibleEquals(s1, s2, 0, 0, 0, memo);
    }
    
    private bool FindPossibleEquals(string s1, string s2, int i1, int i2, int diff, Dictionary<int, int>[][] memo) {
        if (i1 == s1.Length && i2 == s2.Length) {
            return diff == 0;
        }
        
        if(memo[i1][i2].ContainsKey(diff)) {
            return memo[i1][i2][diff] == 1;
        }
        
        if (i1 < s1.Length && IsNumber(s1[i1])) {
            int num = 0;
            while (i1 < s1.Length && IsNumber(s1[i1])) {
                num = num * 10 + s1[i1] - '0';
                i1++;
                if (FindPossibleEquals(s1, s2, i1, i2, diff - num, memo)) {
                    memo[i1][i2].Add(diff, 1);
                    return true;
                }
            }
        }
        else if (i2 < s2.Length && IsNumber(s2[i2])){
            int num = 0;
            while (i2 < s2.Length && IsNumber(s2[i2])) {
                num = num * 10 + s2[i2] - '0';
                i2++;
                if (FindPossibleEquals(s1, s2, i1, i2, diff + num, memo)) {
                    memo[i1][i2].Add(diff, 1);
                    return true;
                }
            }
        }
        else if (diff == 0) {
            if (i1 < s1.Length && i2 < s2.Length && s1[i1] == s2[i2] && FindPossibleEquals(s1, s2, i1 + 1, i2 + 1, diff, memo)) {
                memo[i1][i2].Add(diff, 1);
                return true;
            }
        }
        else if (diff > 0) {
            if (i1 < s1.Length && FindPossibleEquals(s1, s2, i1 + 1, i2, diff-1, memo)) {
                memo[i1][i2].Add(diff, 1);
                return true;
            }
        }
        else if (diff < 0) {
            if (i2 < s2.Length && FindPossibleEquals(s1, s2, i1, i2 + 1, diff+1, memo)) {
                memo[i1][i2].Add(diff, 1);
                return true;
            }
        }
        
        if (!memo[i1][i2].ContainsKey(diff)) {
            memo[i1][i2].Add(diff, 0);
        }

        return false;
    }
    
    private bool IsNumber(char c) {
        return c <= '9' && c >= '0';
    }
}