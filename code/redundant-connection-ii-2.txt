class Solution {
public:  
    bool iscircle(vector<int>&m, int p)
    {
        int c = p;
        while(m[c]!=0&&m[c]!=p) c = m[c];
        return m[c]!=0;
    }
    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {
        vector<int> m(edges.size()+1,0);
        vector<int> first, second, c;
        for(auto e:edges)
        {
            if(m[e[1]]!=0)
            {     
                first = vector<int>({m[e[1]],e[1]});        
                second = e;
            }
            else
            {
                m[e[1]] = e[0];
                if(!c.size()&&iscircle(m,e[1]))c = e;
            }
        }
        return first.size()?(c.size()?first:second):c;
    }
};