/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
double* sampleStats(int* count, int countSize, int* returnSize){
        *returnSize = 5 ;
        double* ret = malloc(5 * sizeof(double)) ;
        //find min
        double min, max ;
        for(int i = 0; i < 256; i++){
            if(count[i]){
                min = i ;
                break ;
            }
        }
        ret[0] = min ;
        //find max
        for(int i = 255; i >= 0; i--){
            if(count[i]){
                max = i ;
                break ;
            }
        }
        ret[1] = max ;
        double sum = 0 ;
        int n = 0 ;
        int mode = 0 ;
        for(int i = min; i <= max; i++){
            sum += (long long)i*count[i] ;
            n += count[i] ;
            if(count[i] > count[mode])
                mode = i ;
        }
        //find average and mode
        ret[2] = sum / n ;
        ret[4] = mode ;
        
        //find median
        if(n % 2){
            long long mid = n/2 + 1 ;
            long long sum = 0 ;
            for(int i = min ; i <= max; i++){
                sum += count[i] ;
                if(sum >= mid){
                    ret[3] = i ;
                    break ;
                }
            }
        }
        else{
            long long mid1 = n/2 ;
            long long mid2 = n/2 + 1 ;
            long long sum = 0 ;
            for(int i = min ; i <= max; i++){
                sum += count[i] ;
                if(sum >= mid1){
                    mid1 = i ;
                    if(sum >= mid2)
                        ret[3] = i ;
                    else{
                        for(int j = i+1; j <= max; j++){
                            if(count[j]){
                                ret[3] = (i+j) / 2.0 ;
                                break ;
                            }
                        }
                    }
                    break ;
                }
            }

        }
        return ret ;
}