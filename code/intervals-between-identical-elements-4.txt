class Solution {
public:
    vector<long long> getDistances(vector<int>& arr) {
        unordered_map<int,vector<int>> map;
        int n = arr.size();
        for(int i=0; i<n; i++)
        {
            map[arr[i]].push_back(i);
        }
        vector<long long> ans(n,0);
        for(auto it:map)
        {
            auto vec = map[it.first];
            int m = vec.size();
            if(m<2) continue;
            vector<long long> prefix(m+1,0);
            prefix[0] = vec[0];
            for(int i=1; i<m; i++)
                prefix[i] += prefix[i-1]+vec[i];
            ans[vec[0]] = abs(prefix[m-1]-(long long)vec[0]*m);
            ans[vec[m-1]] = abs(prefix[m-1]-(long long)vec[m-1]*m);
            for(long long i=1; i<m-1; i++)
            {
                long long sum = 0;
                sum += abs(prefix[i] - (long long)vec[i]*(i+1));
                sum += abs((prefix[m-1]-prefix[i])-(long long)vec[i]*(m-i-1));
                ans[vec[i]] = sum;
            }
            
        }
        return ans;
    }
};