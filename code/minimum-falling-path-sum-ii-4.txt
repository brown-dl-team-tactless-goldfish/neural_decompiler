#define INF 0x7fffffff

int d[200][200];

int solve(int **arr, int arrSize, int* arrColSize, int row, int col);

int minFallingPathSum(int** arr, int arrSize, int* arrColSize) {
    for (int i = 0; i < 200; ++i) {
        for (int j = 0; j < 200; ++j) {
            d[i][j] = INF;
        }
    }
    
    for (int i = 0; i < arrColSize[0]; ++i) {
        solve(arr, arrSize, arrColSize, 0, i);   
    }
    
    int min = INF;
    for (int i = 0; i < arrColSize[0]; ++i) {
        if (d[0][i] < min) {
            min = d[0][i];
        }
    }
    
    return min;
}

int solve(int **arr, int arrSize, int* arrColSize, int row, int col) {
    if (row >= arrSize) {
        return 0;
    }
    
    if (row < 0 || col < 0 || col >= arrColSize[0]) {
        return INF;
    }
    
    if (d[row][col] != INF) {
        return d[row][col];
    }

    int min = INF;
    for (int i = 0; i < arrColSize[0]; ++i) {
        if (i != col) {
            int child = solve(arr, arrSize, arrColSize, row + 1, i);
            if (child < min) {
                min = child;
            }
        }
    }
    
    d[row][col] = min + arr[row][col];
    return min + arr[row][col];;
}