/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,vector<TreeNode*> > um;
    
    //For deep copy of the tree
    TreeNode* cloneTree(TreeNode* root){
        if(root == nullptr)
            return root;
        TreeNode* new_root = new TreeNode(0);
        new_root->left = cloneTree(root->left);
        new_root->right = cloneTree(root->right);
        return new_root;
    }
    
    vector<TreeNode*> allPossibleFBT(int n) {
        if(n % 2 == 0)
            return {};
        
        um[1] = {new TreeNode(0)};
        
        for(int i = 3; i <= n; i+=2){
            
            vector<TreeNode*> v; //will store all permutations of tree of size i
            
            for(int left = 1; left <i ; left+=2){
                int right = (i-left-1);
                
                for(auto left_node : um[left]){
                    for(auto right_node: um[right]){
                        TreeNode* root = new TreeNode(0);
                        root->left = cloneTree(left_node);
                        root->right = cloneTree(right_node);
                        v.push_back(root);
                    }
                }
            }
            um[i] = v;
        }
        return um[n];
    }
};