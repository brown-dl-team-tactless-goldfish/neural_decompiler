class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int val)
    {
        data=val;
        left=NULL;
        right=NULL;
    }
};
unordered_map<int,Node*>mp;
int n;
vector<long long int>v;
class Solution {
public:
    int countHighestScoreNodes(vector<int>&par) {
        long long int c=0;
        n=par.size();
        v.resize(n,-1);
        Node* root;
        for(int i=0;i<par.size();i++)
        {
            mp[i]=new Node(i);
        }
        root=mp[0];
        for(int i=1;i<par.size();i++)
        {
            if(mp[par[i]]->left==NULL)
            {
                mp[par[i]]->left=mp[i];
            }
            else if(mp[par[i]]->right==NULL)
            {
                mp[par[i]]->right=mp[i];
            }
        }
        int ans=0;
        long long int m=fun(root);
        for(int i=0;i<v.size();i++) c=max(c,v[i]);
        for(int i=0;i<v.size();i++)
        {
            if(v[i]==c)
            {
                ans++;
            }
        }
        return ans;
    }
    long long int fun(Node* root)
    {
        if(root==NULL)
        {
            return 0;
        }
        long int l=fun(root->left);
        long int r=fun(root->right);
        long long int k;
        if(root->data==0)
        {
            if(root->left==NULL and root->right==NULL)
            {
                k=1;
            }
            else if(root->left!=NULL and root->right!=NULL)
            {
                k=l*r;
            }
            else if(root->left!=NULL and root->right==NULL)
            {
                k=l;
            }
            else if(root->left==NULL and root->right!=NULL)
            {
                k=r;
            }
        }
        else if(root->left==NULL and root->right==NULL)
        {
            k=n-1;
        }
        else if(root->left!=NULL and root->right!=NULL)
        {
            k=l*r*(n-l-r-1);
        }
        else if(root->left!=NULL and root->right==NULL)
        {
            k=l*(n-l-1);
        }
        else if(root->left==NULL and root->right!=NULL)
        {
            k=r*(n-r-1);
        }
        v[root->data]=k;
        return l+r+1;
    }
};