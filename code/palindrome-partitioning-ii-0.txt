int minCut(char* s) {
    int slen = strlen(s), tlen = slen*2+1, i;
    if (slen <= 1)
        return 0;

    char *t = (char*)malloc(tlen); // helper string t
    int *p = (int*)malloc(tlen*sizeof(int)), *steps = (int*)malloc((slen+1)*sizeof(int));

    t[0] = '#';
    for (i = 0; i < slen; i++) {
        t[i*2+1] = s[i];
        t[i*2+2] = '#';
        steps[i] = i;
    }
    steps[slen] = slen;

    int center = 1, right = 2;
    p[0] = 0;
    p[1] = 1;
    
    for (i = 2; i < tlen; i++) {
        int mirror = center*2 - i;
        if (right > i && p[mirror] < right-i) {
            p[i] = p[mirror];
            continue;
        }

        int limit = min(i, tlen-i-1), n, j;
        for (n = right <= i ? 1 : right+1-i; n <= limit; n++) {
            if (t[i+n] != t[i-n])
                break;
        }

        p[center = i] = --n;
        right = i + n;

        for (j = (i-n)/2; n >= 1; j++, n -= 2) { // update steps
            steps[j+n] = min(steps[j+n], steps[j]+1);
        }
    }
    
    int r = steps[slen]-1;
    free(t);
    free(p);
    free(steps);
    return r;
}