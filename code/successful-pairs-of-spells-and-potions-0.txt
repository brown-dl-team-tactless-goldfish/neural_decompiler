

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
//sort func
int cmpfunc(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

//
//find numbers of potions[i] >= val
//
int findSuccessful (int* potions, int potionsSize, double val){
    int left = 0, right = potionsSize-1;
    int mid;
    while(left < right){
        mid = (left + right)/2;
        if((double)potions[mid] >= val)
            right = mid;
        else
            left = mid + 1;
    }
    if((double)potions[left] >= val)
        return (potionsSize - left);
    else
        return 0;
}

int* successfulPairs(int* spells, int spellsSize, int* potions, int potionsSize, long long success, int* returnSize){
    int i, j;
    //sort potions 
    qsort(potions , potionsSize, sizeof(int), cmpfunc);
    //
    //spellss[i] *{P0, P1, ..., Pn} > success
    //{P0, P1, ..., Pn} > success/spellss[i]
    //find how many P0, P1, ..., Pn > success/spellss[i]
    //spellsFloat[i]  = success/spellss[i]
    double* spellsFloat = malloc(spellsSize * sizeof(double));
    for(i = 0; i < spellsSize; i++){
        spellsFloat[i] = 1.0*success /spells[i] ;
    }
    
    * returnSize = spellsSize;
    int* ans = malloc(spellsSize * sizeof(int));
    for(i = 0; i < spellsSize; i++){
        ans[i] = findSuccessful (potions, potionsSize, spellsFloat[i]);
    }
    
    free(spellsFloat);
    return ans;
}