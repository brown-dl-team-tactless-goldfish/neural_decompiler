    long long minCost(vector<int>& nums, vector<int>& cost) {
        long long target = 0;
        long long totalToInc = 0;
        for (int c : cost) {
            totalToInc -= c;
        }
        unsigned long long currentCost = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, std::greater<pair<int, int>>> pq;
        for (size_t i = 0; i < nums.size(); ++i) {
            currentCost += ((long long) cost[i]) * nums[i];
            pq.push({nums[i], cost[i]});
        }
        while (!pq.empty() && totalToInc < 0) {
            auto top = pq.top();
            long long nextTarget = top.first;
            currentCost += totalToInc * (nextTarget - target);
            target = nextTarget;
            totalToInc += 2 * top.second;
            pq.pop();
        }
        return currentCost;
    }