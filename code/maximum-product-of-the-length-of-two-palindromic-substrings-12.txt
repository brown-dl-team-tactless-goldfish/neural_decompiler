    vector<long long int> dp(n + 1, 1);
    vector<long long int> udp(n + 1, 1);
    
    for (long long int i = 2; i < n; i++) {
        // cout << "i = " << i << " i2 = " << i - dp[i - 1] - 1 <<  endl;
        if (i - dp[i - 1] - 1 >= 0 && s[i] == s[i - dp[i - 1] - 1]) {
            dp[i] = dp[i - 1] + 2;
        }
        else
            dp[i] = 1;
        // cout << "dpi = " << dp[i] << endl;
    }
    
    
    for (long long int i = n - 3; i >= 0; i--) {
        if (i + udp[i + 1] + 1 < n && s[i] == s[i + udp[i + 1] + 1])
            udp[i] = udp[i + 1]  + 2;
        else
            udp[i] = 1;
    }
    
    
    vector<long long int> pl(n + 1, 1), pr(n + 1, 1);
    
    for (int i = 1; i < n; i++) {
        pl[i] = max(pl[i - 1], dp[i]);
    }
    for (int i = n - 2; i >= 0; i--) {
        pr[i] = max(pr[i + 1], udp[i]);
    }
    
    long long int ans = 0;
    
    for (long long int i = 0; i < n - 1; i++) {
        ans = max(ans, pl[i] * pr[i + 1]);
        if (ans < pl[i] * pr[i + 1])
            ans = pl[i] * pr[i + 1];
        // long long int t1 = pl[i], t2 = pr[i + 1];
        // if (t1 * t2 > 2147385345)
        //     cout << t1 * t2 << endl;
    }
    return ans;
}