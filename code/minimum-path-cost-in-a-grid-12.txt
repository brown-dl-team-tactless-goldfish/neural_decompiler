class Solution {
public:
    int minPathCost(vector<vector<int>>& nums, vector<vector<int>>& moveCost) {
        int n = nums.size(), m = nums[0].size();
        vector<vector<int>> dp(n,vector<int>(m,0));
        for(int i = 0; i<m;++i) dp[0][i] = nums[0][i];
        int re = INT_MAX;
        for(int i = 1; i<n;++i){
            for(int j = 0; j<m;++j){
                int val = INT_MAX;
                for(int k = 0; k<m;++k){
                    val = min(val,dp[i-1][k] + moveCost[nums[i-1][k]][j]); // try every transition from last row to current row and col
                }
                dp[i][j] = nums[i][j] + val;
                if(i==n-1) re = min(re,dp[i][j]);
            }
        }
        return re;
    }
};