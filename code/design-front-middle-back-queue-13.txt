public class FrontMiddleBackQueue {
	private LinkedList<int> list;
	public FrontMiddleBackQueue() {
		list = new LinkedList<int>();
	}

	public void PushFront(int val) {
		list.AddFirst(val);
	 }

	public void PushMiddle(int val) {
		if (!list.Any())
			list.AddFirst(val);
		else
		{
			int index = 0;
			LinkedListNode<int> curr = list.First;
			while (index < list.Count / 2)
			{
				curr = curr.Next;
				index++;
			}
			list.AddBefore(curr, val);
		}
	}

	public void PushBack(int val) {
		list.AddLast(val);
	}

	public int PopFront() {
		if (list.Any())
		{
			var res = list.First();
			list.RemoveFirst();
			return res;
		}
		return -1;
	}

	public int PopMiddle() {
		 if (!list.Any())
			return -1;
		else
		{
			int index = 0;
			LinkedListNode<int> curr = list.First;
			while (index < (list.Count - 1) / 2)
			{
				curr = curr.Next;
				index++;
			}
			list.Remove(curr);
			return curr.Value;
		}
	}

	public int PopBack() {
		if (list.Any())
		{
			var res = list.Last();
			list.RemoveLast();
			return res;
		}
		return -1;
	}
}