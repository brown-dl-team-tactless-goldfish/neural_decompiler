int tribonacci(int n)
{
        //base cases
        if (n == 0)
            return 0;
        if (n == 1 || n == 2)
            return 1;
    
        //dynamic approach: we fill first the small sub-problems and from them we will build up the big sub-problems
        int *t = malloc(sizeof(int) * (n + 1));
        t[0] = 0;
        t[1] = 1;
        t[2] = 1;
    
        for(int i = 3; i <= n; i++)
        {
            // Tn+3 = Tn + Tn+1 + Tn+2
            t[i] = t[i - 1] + t[i - 2] + t[i - 3];

        }
        //here is the solution!
        return t[n];
}