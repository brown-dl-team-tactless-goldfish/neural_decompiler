class Solution {
    int R, C, OC;
    unordered_set<int> mset;
    void dfs (vector<vector<int>>& grid, int r, int c, bool& B) {
        if(r < 0 || c < 0 || r >= R || c >= C || (grid[r][c] != OC && grid[r][c] != -OC)) {
            B = true;
            return;
        }
        if(mset.find(r * C + c) != mset.end()) return;
        mset.insert(r * C + c);
        bool nB = false;
        dfs(grid, r + 1, c, nB);
        dfs(grid, r - 1, c, nB);
        dfs(grid, r, c + 1, nB);
        dfs(grid, r, c - 1, nB);
                                                            
        if(nB) {
            grid[r][c] *= -1;
        }
    }
    
public:
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int r0, int c0, int color) {
        R = grid.size(), C = grid[0].size(), OC = grid[r0][c0];
        bool b = false;
        dfs(grid, r0, c0, b);
        for(auto& v : grid) {
            for(auto& i : v) {
                if(i < 0) {
                    i = color;
                }
            }
        }
        return grid;
    }
};