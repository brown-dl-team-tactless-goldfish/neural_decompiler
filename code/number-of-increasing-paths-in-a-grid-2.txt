class Solution {
public:
    const int dx[4] = {-1,0,1,0} ;
    const int dy[4] = {0,1,0,-1} ;
    int r , c , ans = 0, dp[1001][1001] , MOD = 1e9 + 7 ;
    
    int solve(int i , int j , vector<vector<int>>&grid){
        int ways = 1 ;
        if(dp[i][j] != -1) return dp[i][j] ;
        
        for(int itr = 0 ; itr < 4; ++ itr){
            int ii = i + dx[itr] , jj = j + dy[itr] ;
            if(ii >= 0 and jj >= 0 and ii < r and jj < c and grid[ii][jj] > grid[i][j])
                ways += solve(ii,jj,grid) , ways %= MOD ;
        }
        return dp[i][j] = ways ;
    }
    int countPaths(vector<vector<int>>& grid) {
        r = grid.size() , c = grid[0].size() ;
        memset(dp,-1,sizeof(dp)) ;
        
        for(int i = 0; i < r;  ++i){
            for(int j = 0 ; j < c; ++j ){
                ans += solve(i,j,grid) ;
                ans %= MOD ;
            }
        }
        return ans ;
    }
};