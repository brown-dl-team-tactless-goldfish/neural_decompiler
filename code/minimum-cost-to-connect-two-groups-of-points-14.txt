    int we_can[13];
    int rec(int i,int mask,vector<vector<int> >&cost,vector<vector<int> >&dp){
        int n = cost.size();
        int m = cost[0].size();
        if(i == cost.size()){
            int take = 0;
            for(int j=0;j<m;j++){
                if((mask & (1 << j)) == 0){
                    take += we_can[j];
                
                }
            }
            
            return take;
        }
        if(dp[i][mask] != -1){
            return dp[i][mask];
        }
        int ans = INT_MAX;
        for(int j=0;j<m;j++){
            ans = min(ans,cost[i][j] + rec(i+1,mask | (1 << j),cost,dp));
        }
        dp[i][mask] = ans;
        return ans;
    }
    int connectTwoGroups(vector<vector<int>>& cost) {
        
        int n = cost.size();
        int m = cost[0].size();
        for(int j=0;j<m;j++){
            we_can[j] = 500;
        }
        vector<vector<int> >dp(n,vector<int>((1 << m)+1,-1));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
              //  cout << cost[i][j] << endl;
                we_can[j] = min(we_can[j],cost[i][j]);
            }
        }
        return rec(0,0,cost,dp);
    }