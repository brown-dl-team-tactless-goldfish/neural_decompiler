    public class Solution
    {
        public IList<string> WatchedVideosByFriends(IList<IList<string>> watchedVideos, int[][] friends, int id, int level)
        {
            int currLevel = 0;
            Queue<int> bfs = new Queue<int>();
            ISet<int> visited = new HashSet<int>();
            IDictionary<string, int> res = new Dictionary<string, int>();
            visited.Add(id);
            bfs.Enqueue(id);

            while (bfs.Count > 0)
            {
                int count = bfs.Count;
                for (int i = 0; i < count; i++)
                {
                    var person = bfs.Dequeue();
                    if (currLevel == level)
                    {
                        foreach (var video in watchedVideos[person])
                        {
                            if (!res.ContainsKey(video))
                            {
                                res[video] = 0;
                            }

                            res[video]++;
                        }
                    }

                    foreach (var friend in friends[person])
                    {
                        if (visited.Add(friend))
                        {
                            bfs.Enqueue(friend);
                        }
                    }
                }
                currLevel++;
                if (currLevel > level)
                {
                    break;
                }
            }

            (string video, int count)[] pairs = res.Select(p => (p.Key, p.Value)).ToArray();
            Array.Sort(pairs, (p1, p2) =>
            {
                var freqCmp = p1.count.CompareTo(p2.count);
                if (freqCmp != 0)
                {
                    return freqCmp;
                }

                return string.Compare(p1.video, p2.video, StringComparison.Ordinal);
            });

            return pairs.Select(p => p.video).ToArray();
        }
    }