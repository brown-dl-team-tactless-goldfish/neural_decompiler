class Solution {
public:
    long long dp[101][101][101];
    long long f(vector<int>&v,vector<int> &h,int n,int ind,int k,int last){
        if(k<0)return INT_MAX;
        if(ind==n&&k==0){
            int xx=v.size();
            long long ss=0;
            for(int j=last+1;j<n;++j)ss+=(h[j]-h[last]);
           // for(auto x: v)cout<<x<<" ";
          //  cout<<endl;
            //cout<<ss<<endl;
            return ss;
        }
        if(ind==n)return INT_MAX;
        if(last!=-1&&dp[ind][k][last]!=-1)return dp[ind][k][last];
        long long xx=f(v,h,n,ind+1,k,last);
        v.push_back(ind);
        long long ss=0;
        for(int j=last+1;j<=ind;++j){
            ss=ss+min(h[ind]-h[j],last!=-1?h[j]-h[last]:INT_MAX);
        }
        long long yy=ss+f(v,h,n,ind+1,k-1,ind);
        v.pop_back();
        if(last!=-1)dp[ind][k][last]=min(xx,yy);
        return min(xx,yy);
    }
    int minDistance(vector<int>& houses, int k) {
        int n=houses.size();
        vector<int> v;
        sort(houses.begin(),houses.end());
        memset(dp,-1,sizeof(dp));
        int ans=f(v,houses,n,0,k,-1);
        return ans;
    }
};