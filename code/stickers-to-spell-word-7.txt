class Solution {
public:
    
    int rec(string& target, vector<multiset<char>>& stick, unordered_map<string,int>& mp)
    {
        if(mp.find(target)!=mp.end())
            return mp[target];
        if(target=="")
            return 0;
        int ans=100;
        for(auto stt:stick)
        {
            string remaining="";
            auto st=stt;
            if(st.find(target[0])!=st.end())
            {
                for(char c:target)
                {
                    if(st.find(c)!=st.end())
                    {
                        st.erase(st.find(c));
                    }
                    else
                        remaining+=c;
                }
                ans=min(ans,rec(remaining,stick,mp)+1);
            }
        }
        mp[target]=ans;
        return ans;
    }
    int minStickers(vector<string>& stickers, string target) 
    {
        set<char>st;
        for(string s:stickers)
            for(char c :s)
                st.insert(c);
        for(char c:target)
            if(st.find(c)==st.end())
                return -1;
        vector<multiset<char>> ms;
        for(string s:stickers)
        {
            multiset<char>temp;
            for(char c:s)
                temp.insert(c);
            ms.push_back(temp);
        }
        unordered_map<string,int>memo;
        return rec(target,ms,memo);
    }
};