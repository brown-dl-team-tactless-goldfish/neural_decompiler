class Solution {
public:
    array<int,9> f(array<int,9>&a, array<int,9>&b) {
        int x = (accumulate(a.begin(),a.end(),0));
        int y = (accumulate(b.begin(),b.end(),0));
        if(x < y) {
            return b;
        } else if(x > y) {
            return a; 
        }
        for(int i = 8;i>=0;i--) {
            if(a[i] > b[i]) {
                return a;
            } else if(b[i] > a[i]) {
                return b;
            }
        }
        return a; 
    }
    string g(array<int,9>& a) {
        string ret; 
        for(int i = 8;i>=0;i--) {
            ret += string(a[i],'1'+i);
        }
        if(ret.empty()) {
            return "0";
        }
        return ret;
    }
    string largestNumber(vector<int>& cost, int target) {
        vector<vector<array<int,9>>> dp(cost.size(),vector<array<int,9>>(target+1));
        for(int i = 1;i*cost[0]<=target;i++) {
            dp[0][i*cost[0]][0] = i; 
        }
        for(int i = 1;i<dp.size();i++) {
            for(int j=0;j<dp[i].size();j++) {
                if(j>=cost[i]) {
                    auto& x = dp[i][j-cost[i]];
                    int a = accumulate(x.begin(),x.end(),0);
                    if(j==cost[i] || a != 0) {
                        dp[i][j] = x; 
                        dp[i][j][i]++;
                    }
                }
                dp[i][j] = f(dp[i][j],dp[i-1][j]);
            }
        }
        string ret = g(dp.back().back());
        return ret; 
    }
};