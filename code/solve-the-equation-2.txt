#include <stdbool.h>
#include <string.h>

typedef enum Side {
    LEFT = 0, RIGHT
} Side;

typedef enum Degree {
    ZEROTH = 0, FIRST = 1
} Degree;

typedef enum Sign {
    NEGATIVE = -1, POSITIVE = 1
} Sign;

char *solveEquation(char *equation)
{
    static char buf[19];
    int leftX0 = 0, leftX1 = 0;
    int rightX0 = 0, rightX1 = 0;
    int *options[] = { &leftX0, &leftX1, &rightX0, &rightX1 };
    
    Side side = LEFT;
    Degree degree = ZEROTH;
    Sign sign = POSITIVE;
    Sign newSign = POSITIVE;
    int coeff = 0;
    bool noCoeff = true;
    char c;
    while (c = *equation++) {
        switch (c) {
            case '=':
                *options[side * 2 + degree] += sign * coeff;
                side = RIGHT;
                goto reset;
            case '-':
                newSign = NEGATIVE;
            case '+':
                *options[side * 2 + degree] += sign * coeff;
            reset:
                degree = ZEROTH;
                sign = newSign;
                newSign = POSITIVE;
                coeff = 0;
                noCoeff = true;
                break;
            case 'x':
                degree = FIRST;
                if (noCoeff)
                    coeff = 1;
                break;
            default:
                noCoeff = false;
                coeff = 10 * coeff + (c - '0');
        }
    }

    if (coeff > 0) {
        *options[side * 2 + degree] += sign * coeff;
    }

    leftX1 -= rightX1;
    rightX1 = 0;
    rightX0 -= leftX0;
    leftX0 = 0;

    if (leftX1 == 0) {
        if (rightX0 == 0) {
            sprintf(buf, "Infinite solutions");
        } else {
            sprintf(buf, "No solution");
        }
    } else {
        rightX1 /= leftX1;
        rightX0 /= leftX1;
        leftX1 = 1;
        sprintf(buf, "x=%d", rightX0);
    }

    return buf;
}