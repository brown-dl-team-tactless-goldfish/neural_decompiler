class Solution {
public:
    string oddString(vector<string>& words) {
        unordered_map<string, int> dict;
        for(auto& str: words){
            dict[convert(str)]++;
        }

        string target_str = "";
        for(auto& ele: dict){
            if(ele.second == 1){
                target_str = ele.first;
            }
        }

        for(auto& ele: words){
            if(target_str.compare(convert(ele)) == 0){
                return ele;
            }
        }

        return "";
    }

    string convert(string& str){
        stringstream ss;
        for(int i=1;i<str.size();i++){
            ss << to_string(str[i] - str[i-1]);
            ss << " "; 
        }

        return ss.str();
    }
};