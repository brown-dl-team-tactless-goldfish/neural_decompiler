typedef long long ll;
class Solution {
public:
 // Feasiblility Check of BS
    bool isValid(vector<int>&nums, ll mid, int m) {
        int n = nums.size();
        int curr_sum = 0, subarray = 0;
        for(int i=0; i<n; i++) {
            curr_sum += nums[i];                        // we will keep calculating current sum of subarray 
            if(curr_sum > mid) {                       // if curr_sum is > mid ( required sum ) we will increment 
			                                           // our subarray count.
                subarray++;
                curr_sum = nums[i];
            }
            
            if(subarray+1 > m) return false;
        }
        
        return true;
    }
    
    int splitArray(vector<int>& nums, int m) {
        int n = nums.size();
        ll sum = 0;
        
        for(int n:nums)
            sum += n;
        
        ll low = *max_element(begin(nums), end(nums));        // lowest possible sum
        ll high = sum;                                        // highest possible sum
        
        while(low<high) {
            ll mid = low + (high - low)/2;                    // applying BS on answer
                                                              // (largest sum) 
            
            if(isValid(nums, mid, m)) high = mid;             // if there are m possible
                                                              // subarrays with given sum mid we will go on left 
															  // side as we have to find minimum possible largest sum
															  
            else low = mid + 1;                  // else, we will go on right side 
        } 
        
        return high;                  // at last we will return the high pointer which will now store the 
		                             // minimum possible largest sum.
    }
};