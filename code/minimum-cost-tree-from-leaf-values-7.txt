int mctFromLeafValues(vector<int>& arr)
{
	if (arr.size() == 0)
		return 0;
	if (arr.size() == 1)
		return arr.back();
	if (arr.size() == 2)
		return arr[0] * arr[1];
	
	bool decrease = arr[0] > arr[1];
	int current_tree = arr[0] * arr[1];
	int max_idx = arr[0] > arr[1] ? 0 : 1;
	
	vector<int> peak_idx;
	if (max_idx == 0)
		peak_idx.push_back(max_idx);

	for (int i = 2; i < arr.size(); i++)
	{	//5 4
		if (arr[i] < arr[i - 1])
		{
			peak_idx.push_back(i - 1);
			current_tree += arr[i] * arr[i - 1];
		}//4 5
		else
		{
			if (peak_idx.empty())
				current_tree += arr[i] * arr[i - 1];
			else
			{
				if (arr[i] < arr[peak_idx.back()])
				{
					current_tree += (arr[i] - arr[i - 1]) * arr[peak_idx.back()] + arr[i] * arr[i - 1];
				}
				else
				{
					int last_peak = 0;
					while (!peak_idx.empty() && arr[peak_idx.back()] <= arr[i])
					{
						last_peak = peak_idx.back();
						peak_idx.pop_back();
					}
					if (!peak_idx.empty())
						current_tree += arr[i] * arr[last_peak] + (arr[i] - arr[last_peak]) * arr[peak_idx.back()];
					else
					{
						current_tree += arr[i] * arr[last_peak];
					}
				}
			}
			//if (arr[i] > arr[max_idx])
			//	max_idx = i;
		}
		//cout << "peak_idx: " << peak_idx << endl;
		//cout <<"current_tree: "<< current_tree << endl;
	}
	//cout << endl;
	return current_tree;
}