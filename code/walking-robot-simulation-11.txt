class Solution {
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        unordered_map<int,vector<int>> mpx,mpy;
        int ans=0;
        for(auto v:obstacles)
        {
            mpx[v[0]].push_back(v[1]);
            mpy[v[1]].push_back(v[0]);
        }
        for(auto it:mpx)
        {
            vector<int> temp=it.second;
            sort(temp.begin(),temp.end());
            mpx[it.first]=temp;
        }
        for(auto it:mpy)
        {
            vector<int> temp=it.second;
            sort(temp.begin(),temp.end());
            mpy[it.first]=temp;
        }
        int x=0,y=0;
        bool xp=0,yp=1,xm=0,ym=0;
        
        for(int i=0;i<commands.size();i++)
        {
          if(commands[i]>0)
          {
            if(yp)
            {
              vector<int> temp=mpx[x];
              int t=upper_bound(temp.begin(),temp.end(),y)-temp.begin();
              int k=y+commands[i];
              if(t<temp.size() and k>=temp[t])
                   y=temp[t]-1;
              else
                    y=k;
            }
            else if(ym)
            {
              vector<int> temp=mpx[x];
              int t=lower_bound(temp.begin(),temp.end(),y)-temp.begin();
              int k=y-commands[i];
              t--;
                if(t>=0 and temp[t]>=k)
                    y=temp[t]+1;
                else
                    y=k;
            }
            else if(xp)
            {
               vector<int> temp=mpy[y];
              int t=upper_bound(temp.begin(),temp.end(),x)-temp.begin();
              int k=x+commands[i];
              if(t<temp.size() and k>=temp[t])
                   x=temp[t]-1;
              else
                    x=k; 
            }
            else if(xm)
            {
               vector<int> temp=mpy[y];
              int t=lower_bound(temp.begin(),temp.end(),x)-temp.begin();
              int k=x-commands[i];
              t--;
                if(t>=0 and temp[t]>=k)
                    x=temp[t]+1;
                else
                    x=k; 
            }
          }
            else
            {
                if(commands[i]==-2)
                {
                  if(xp)
                  {
                      xp=0;
                      yp=1;
                  }
                    else if(yp)
                    {
                        yp=0;
                        xm=1;
                    }
                    else if(xm)
                    {
                        xm=0;
                        ym=1;
                    }
                    else
                    {
                        ym=0;
                        xp=1;
                    }
                }else
                {
                   if(xp)
                  {
                      xp=0;
                       ym=1;
                  }
                    else if(yp)
                    {
                        yp=0;
                        xp=1;
                    }
                    else if(xm)
                    {
                        xm=0;
                        yp=1;
                    }
                    else
                    {
                        ym=0;
                        xm=1;
                    } 
                }
            }
            ans=max(ans,x*x+y*y);
            // cout<<x<<" "<<y<<"\n";
        }
        
        return ans;
    }
};