def letterCasePermutation(self, S):
    #print "S = ", S

    res = []
    def helper(curPath):
        #print "curPath = ", curPath
        len_curPath = len(curPath)
        len_remains = len(S) - len_curPath

        if len_remains < 0:
            #not valid
            return
        elif len_remains == 0:
        # if remainS == "":
            #print "found 1"
            if curPath not in res:
                res.append(curPath)
            return


        #print "len_remains = ", len_remains


        c = S[len_curPath]
        if c.isdigit():
            curPath += c
            tmpRemain = S[0:len_curPath] + S[len_curPath+1:]
            helper(curPath)
        else:
            #lower
            tmpPath_1 = curPath + c.lower()
            tmpRemain = S[0:len_curPath] + S[len_curPath + 1:]
            helper(tmpPath_1)

            #upper
            tmpPath_2 = curPath + c.upper()
            # remainS = remainS[0:idx] + remainS[idx + 1:]
            helper(tmpPath_2)

    helper("")
    #print "end res = ", res
    return res