class Solution {
public:
    long long dfs(int v, int p, vector<vector<int>>& edge, vector<int>& price, vector<long long>& mx) {
        long long vMx = 0;
        for (int u : edge[v]) {
            if (u != p) {
                long long cMx = dfs(u, v, edge, price, mx);
                mx[v] = max(mx[v], cMx);
            }
        }
        mx[v] += price[v];
        return mx[v];
    }
    void dfs1(int v, int p, vector<vector<int>>& edge, vector<int>& price, vector<long long>& mx, long long& sol, vector<long long>& ppMx) {
        long long pmx = mx[v];
        if (p != -1) {
            pmx = max(pmx, ppMx[p] + price[v]);
        }
        sol = max(sol, pmx - price[v]);
        for (int u : edge[v]) {
            if (u != p) {
                long long px = 0;
                if (p != -1) {
                    px = max(px, ppMx[p] + price[v]);
                }
                for (int k : edge[v]) {
                    if (k != u && k != p) {
                        px = max(px, mx[k] + price[v]);
                    }
                }
                ppMx[v] = px;
                if (ppMx[v] == 0) ppMx[v] = price[v];
                dfs1(u, v, edge, price, mx, sol, ppMx);
            }
        }
    }
    long long maxOutput(int n, vector<vector<int>>& edges, vector<int>& price) {
        vector<vector<int>> edge(n);
        for (const vector<int>& v : edges) {
            edge[v[0]].push_back(v[1]);
            edge[v[1]].push_back(v[0]);
        }
        vector<long long> mx(n);
        dfs(0, -1, edge, price, mx);
        long long sol = mx[0] - price[0];
        vector<long long> ppMx(n);
        ppMx[0] = price[0];
        dfs1(0, -1, edge, price, mx, sol, ppMx);
        return sol;
        
    }
};