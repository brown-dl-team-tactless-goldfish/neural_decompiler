/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        vector<int> traversal;
        
        //bfs for traversing the tree and storing the node values and reversing them if 
        //its the odd'th level
        queue<TreeNode *> q;
        q.push(root);
        q.push(NULL);
        int i = 0;
        int odd = 0;
        
        while(!q.empty()){
            TreeNode *temp = q.front();
            q.pop();
            if(temp){
                traversal.push_back(temp->val);
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }   
            }else{
                if(odd % 2 != 0){
                    reverse(traversal.begin() + i , traversal.end());
                }
                odd++;
                if(!q.empty()){
                    q.push(NULL);
                }
                i = traversal.size();
            }
        }
        
        //bfs for traversing and updating the modified nodes
        q.push(root);
        q.push(NULL);
        i = 0;
        
        while(!q.empty()){
            TreeNode *temp = q.front();
            q.pop();
            if(temp){
                temp->val = traversal[i++]; 
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }
            }else{
                if(!q.empty()){
                    q.push(NULL);
                }
            }
        }
        
        return root;        
    }
};