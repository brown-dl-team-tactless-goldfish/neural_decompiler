class Solution {
public:
    int maxCandies(vector<int>& status, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, vector<int>& initialBoxes) {
        int ret = 0 ;
        queue<int>q ; //boxes 
        unordered_set<int>curKeySet ;
        
        for(auto& box : initialBoxes)
            q.push(box) ;
        
        bool process = true ;
        while(!q.empty() && process)
        {
            process = false ;
            int sz = q.size() ;
            for(int i = 0; i < sz; i++){
                int cur = q.front() ;
                q.pop() ;
                if(status[cur] == 0 && curKeySet.count(cur)==0 ) // can't open, put it back to queue
                    q.push(cur) ;
                else{
                    process = true ;
                    ret += candies[cur] ;
                    for(auto& newKey : keys[cur])
                        curKeySet.insert(newKey) ;    
                    for(auto& newBox : containedBoxes[cur])
                        q.push(newBox) ;
                }
            }
        }
        return ret ;
    }
};