class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m = isWater.size(), n = isWater[0].size();
        queue<int> q;
        vector<vector<int>> ans(m, vector<int>(n, -1));
        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if(isWater[i][j] == 1) {
                    q.push((i << 16) | j);
                    ans[i][j] = 0;
                }
            }
        }
        
        int h = 0;
        int d[5] = {0, 1, 0, -1, 0};
        while(q.size()) {
            int size = q.size();
            while(size--) {
                int x = q.front() >> 16, y = q.front() & 0xFFFF;
                q.pop();
                for(int i = 0; i < 4; ++i) {
                    int nx = d[i] + x;
                    int ny = d[i + 1] + y;
                    if(nx < 0 || ny < 0 || nx >= m || ny >= n || ans[nx][ny] != -1) continue;
                    ans[nx][ny] = h + 1;
                    q.push((nx << 16) | ny);
                }
            }
            ++h;
        }
        return ans;
    }
};