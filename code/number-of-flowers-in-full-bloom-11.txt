class Solution {
public:
    vector<int> fullBloomFlowers(vector<vector<int>>& flowers, vector<int>& persons) {
        // Sort flowers based on blown up timings
        sort(begin(flowers),end(flowers));

        vector<pair<int,int>> p;

        for(int i=0;i<persons.size();i++)
        {
            p.push_back({persons[i],i});
        }
        // Sort persons based on arrival time
        sort(begin(p),end(p));

        // vector to store answers
        vector<int> ans(p.size(), 0);

        // varible to traverse flowers
        int j = 0;

        // Most important thing which help us to track endtimes at an instance
		// in sorted way :)
        multiset<int> endTimes;

        for(int i=0;i<p.size();i++)
        {
            int arriveTime = p[i].first;
            int index = p[i].second;

            // insert flowers which are blown on or before arriveTime
            while(j < flowers.size() && flowers[j][0] <= arriveTime)
            {
                endTimes.insert(flowers[j][1]);
                j++;
            }

            // Delete flowers whose blown time is over before arriveTime
            while(!endTimes.empty() && *(endTimes.begin()) < arriveTime)
            {
                endTimes.erase(endTimes.begin());
            }

            // Store the answer at original query index
            ans[index] = endTimes.size();

        }

        // yay!! We are done, returning answer now!!
        return ans;
    }
};