class Solution {
public:
    
    int find(int i, vector<vector<int> >&boxes, vector<int>&dp, int mb, int mw) {
        if(i >= boxes.size())
            return 0;
        if(dp[i] != -1)
            return dp[i];
        
        int j = i;
        int c = 0, w = 0; 
        dp[i] = INT_MAX;
        vector<int> v;
        
        while((j < boxes.size()) && ((c+1) <= mb) && ((w + boxes[j][1]) <= mw)) {
            if(v.size() == 0 || v[v.size()-1] != boxes[j][0])
                v.push_back(boxes[j][0]);
 
            w = w + boxes[j][1];
            j ++;
            c ++;
        }
        dp[i] = min(dp[i], 1 + (int)v.size() + find(j, boxes, dp, mb, mw));
        
        if(j != boxes.size()) {
            while(j>i && boxes[j][0] == boxes[j-1][0]) {
                if(v.size() > 0 && v[v.size()-1] == boxes[j][0])
                    v.pop_back();
                j--;
            }
            if(j > i)
                dp[i] = min(dp[i], 1 + (int)v.size() + find(j, boxes, dp, mb, mw));
        }        
        
        return dp[i];
    }
    
    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) {
        vector<int> dp(boxes.size(), -1);
        return find(0, boxes, dp, maxBoxes, maxWeight);
        
    }
};