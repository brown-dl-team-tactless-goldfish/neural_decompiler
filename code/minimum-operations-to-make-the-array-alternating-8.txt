class Solution {
public:
	int minimumOperations(vector<int>& a) {
		map<int,int> m1,m2;
		int n = a.size();
		if(n==1) return 0;
		for(int i=0;i<n;i+=2){
			m1[a[i]]++;
			if(i+1<n) {
				m2[a[i+1]]++;
			}
		}
		vector<pair<int,int> > v1,v2;
		for(auto i:m1){
			v1.push_back({i.second,i.first});
		}
		for(auto i:m2){
			v2.push_back({i.second,i.first});
		}
		sort(v1.begin(),v1.end(),greater<pair<int,int> >());
		sort(v2.begin(),v2.end(),greater<pair<int,int> >());
		if(v1[0].second != v2[0].second){
			return (n - v1[0].first - v2[0].first);
		}
		if(v2.size()==1 && v1.size()==1) return min(n - v1[0].first,n - v2[0].first); 
		if(v2.size()==1) return min(n - v1[0].first,n - v2[0].first - v1[1].first);        
		if(v1.size()==1) return min(n - v2[0].first,n - v2[1].first - v1[0].first);
		return min(n - v1[0].first - v2[1].first,n - v2[0].first - v1[1].first);
	}
};