class Solution {
public:
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int m = grid.size();
        int n = grid[0].size();
        int M = 1e9 + 7;
        vector<vector<vector<int>>> dp(m,vector<vector<int>>(n,vector<int>(k,0)));
        // for last row
        int modv = grid[m-1][n-1]%k;
        dp[m-1][n-1][modv] = 1;
        for(int c = n-2;c>=0;c--){
            modv = (modv + grid[m-1][c])%k;
            dp[m-1][c][modv] = 1;
        }
        modv = grid[m-1][n-1]%k;
        for(int r = m-2;r>=0;r--){
            modv = (modv + grid[r][n-1])%k;
            dp[r][n-1][modv] = 1;
        }

        for(int i=m-2;i>=0;i--){
            for(int j=n-2;j>=0;j--){
                // first do for right side
                for(int t=0;t<k;t++){
                    int waysr = dp[i][j+1][t]; // having mod t
                    int modval = (t + grid[i][j])%k;
                    dp[i][j][modval] += waysr;
                    dp[i][j][modval] = (dp[i][j][modval])%M;
                }
                // for down side
                for(int t=0;t<k;t++){
                    int waysr = dp[i+1][j][t]; // having mod t
                    int modval = (t + grid[i][j])%k;
                    dp[i][j][modval] += waysr;
                    dp[i][j][modval] = (dp[i][j][modval])%M;
                }
            }
        }
        return dp[0][0][0];
    }
};