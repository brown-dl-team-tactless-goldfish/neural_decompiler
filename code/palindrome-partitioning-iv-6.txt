class Solution {
public:
    bool ispalindrome(int i, int j, vector<vector<int>> &dp, string &s) {
        if (i >= j)
            dp[i][j] = 1;
        else if (dp[i][j] == -1) {
            dp[i][j] = ispalindrome(i + 1, j - 1, dp, s) && (s[i] == s[j]);
        }
        return dp[i][j];
    }
    bool checkPartitioning(string s) {
        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        for (int i = 1; i < n; i++)
            for (int j = i; j < n - 1; j++)
                if(ispalindrome(0, i - 1, dp, s) && ispalindrome(i, j, dp, s) && ispalindrome(j + 1, n - 1, dp, s))
                    return true;
        return false;
    }
};