
int cmp_asc(const void *a, const void *b){
    return *(int*)a-*(int*)b;
}

int cmp_des(const void *a, const void *b){
    return *(int*)b-*(int*)a;
}

long long smallestNumber(long long num){
    int is_neg = 0;
    if(num < 0){
        is_neg = 1;
        num = num * -1;
    } else if (num == 0){
        return 0;
    }
    int digit_count = 16;
    int act_digit_count = 0;
    int *digits = malloc(digit_count * sizeof(int));



    for (int i = 0; num > 0; i++){
        act_digit_count++;
        digits[i] = (int)(num % (long long)10);
        num = num/(long long)10;
    }

    if (is_neg){
        qsort(digits, act_digit_count, sizeof(int), cmp_des);
    } else {
        qsort(digits, act_digit_count, sizeof(int), cmp_asc);
        if (digits[0] == 0){
            int search = 1;
            while(digits[search]==0){
                search++;
            }
            digits[0] = digits[search];
            digits[search] = 0;
        }
    }

    long long ret = 0;
    int power = 0;
    for (int i = act_digit_count -1; i>=0 ; i--){
        ret = ret + digits[i] * pow(10, power);
        power++;
    }
    if (is_neg) ret = ret * -1;
	//free(digits);
    return ret;
}


