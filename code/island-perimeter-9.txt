int dfs(int **grid, int m, int n, int i, int j, bool **visited) {
    // base case 1: reached boundary or water cell
    if(i < 0 || j < 0 || i == m || j == n || grid[i][j] == 0) return 1;  
    
    // base case 2: already visited and considered for perimeter
    if(visited[i][j]) return 0; 
    
    // mark this island cell as visited
    visited[i][j] = true;
    
    int x[4] = {0, 0, 1, -1};
    int y[4] = {1, -1, 0, 0};
    // check 4 adjacent cells for land and include its perimeter
    int ret = 0;
    for(int d = 0; d < 4; d++) 
        ret += dfs(grid, m, n, i + x[d], j + y[d], visited);
    
    return ret;
}

int islandPerimeter(int** grid, int gridSize, int* gridColSize) {
    bool **visited = calloc(sizeof(bool *), gridSize);
    for(int i = 0; i < gridSize; i++) 
        visited[i] = calloc(sizeof(bool), gridColSize[0]);
    int ret = 0;
    for(int i = 0; i < gridSize; i++)
        for(int j = 0; j < gridColSize[0]; j++)
            if(grid[i][j] == 1)
                return dfs(grid, gridSize, gridColSize[0], i, j, visited);
    return 0;
}