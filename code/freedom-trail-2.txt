public class Solution {
    private int Calculate(int i, int j, int length) {
        if (i == j)
            return 0;
        else if ( i > j)
            return Calculate(j, i, length);
        else {
            return Math.Min(j - i, i + length -j);
        }
    }
    
    public int FindRotateSteps(string ring, string key) {
        var map = new Dictionary<char, List<int>>();
        
        for (int i = 0; i < ring.Length; i++){
            if (!map.ContainsKey(ring[i]))
                map[ring[i]] = new List<int>();
            map[ring[i]].Add(i);
        }
        
        var steps = new List<Tuple<int, int>>(){ new Tuple<int, int>(0,0)};
        
        foreach(var c in key.ToCharArray()) {
            steps = map[c].Select( i => new Tuple<int, int>(i, steps.Select( t => Calculate(i, t.Item1, ring.Length) + t.Item2 + 1).Min())).ToList();
        }
        
        return steps.Select(t => t.Item2).Min();
    }
}