int dp[102][102];

int help(vector<int>& cuts, int low, int high)
{
    if(low+1 == high)
    {
        return 0;
    }
    
    if(dp[low][high] != -1)
    {
        return dp[low][high];
    }
    
    int ans = INT_MAX;
    
    for(int i=low+1; i<high; i++)
    { 
        int val=cuts[high]-cuts[low]+ help(cuts,low,i)+help(cuts,i,high);
    
        ans = min(ans,val);
    }

   return dp[low][high] = ans;
}

int minCost(int n, vector<int>& cuts) 
{
    memset(dp,-1,sizeof(dp));
    
    cuts.push_back(0);
    cuts.push_back(n);
    
    sort(cuts.begin(),cuts.end());
    
    return help(cuts,0,cuts.size()-1);
    
    
}