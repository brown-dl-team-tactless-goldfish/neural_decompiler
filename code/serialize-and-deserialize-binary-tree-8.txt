/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
#define MARK_NULL(t) (t=1001)
#define CHECK_NULL(v) (v==1001)

void internalSerial(struct TreeNode *root, int16_t **r, int *cap, int *size) {
    if (*size >= *cap) {
        *cap += 100;
        *r = realloc(*r, sizeof(int16_t) * *cap);
    }
    if (!root) {
        (*r)[(*size)++] = 0;
        MARK_NULL((*r)[(*size)-1]);
        return;
    }
    //printf("internal serial: %d\n", root->val);
    (*r)[(*size)++] = root->val;
    internalSerial(root->left, r, cap, size);
    internalSerial(root->right, r, cap, size);
}

/** Encodes a tree to a single string. */
char* serialize(struct TreeNode* root) {
    int cap = 1000;
    int16_t *r = malloc(sizeof(int16_t) * cap);
    int size = 0;
    internalSerial(root, &r, &cap, &size);
    char *data= malloc(sizeof(char) * 5 * size+1); 
    for (int i = 0;i < size;i++) {
        sprintf(data+5*i, "%+05d", r[i]);
    }
    data[size*5] = '\0';
    //printf("serialize result: %s\n", data);
    free(r);
    return data;
}

struct TreeNode * internalDeSerial(int16_t *r, int *idx, int size) {
    //printf("size: %d\n", size);
    if (size == *idx) return NULL;
    int t = r[*idx];
    //printf("internal deserial: r[%d]= %d\n", *idx, t);
    if (CHECK_NULL(t)) {
        (*idx)++;
        return NULL;
    }
    struct TreeNode *n = malloc(sizeof(*n));
    *n = (struct TreeNode){};
    (*idx)++;
    n->val = t;
    n->left = internalDeSerial(r, idx, size);
    n->right = internalDeSerial(r, idx, size);
    return n;
}

/** Decodes your encoded data to tree. */
struct TreeNode* deserialize(char* data) {
    struct TreeNode *root = NULL;
    if (data[0] == '\0') return root;
    int size = strlen(data)/5;
    //printf("size:%d\n", size);
    int idx = 0;
    int16_t *r = malloc(size*sizeof(int16_t));
    for (int i=0;i<size;i++) {
        //printf("i:%d\n", i);
        char t[6] = {};
        memcpy(t, data+5*i, 5);
        t[5] = '\0';
        int v = atoi(t);
        //printf("v:%d\n", v);
        r[i] = v;
    }
    root = internalDeSerial(r, &idx, size);
    free(r);
    return root;
}

// Your functions will be called as such:
// char* data = serialize(root);
// deserialize(data);