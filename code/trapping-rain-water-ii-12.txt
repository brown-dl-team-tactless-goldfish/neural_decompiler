vector<vector<int>> dir{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

int trapRainWater(vector<vector<int>>& heightMap) {
    
int row = heightMap.size(), col = heightMap[0].size(), i, j, val=INT_MIN;
    
 vector<vector<bool>> visited(row,vector<bool>(col, false));
    
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
    
    for(i=0; i<row; i++)
    {
        for(j=0; j<col; j++)
        {
           if(!(i==0 ||j==0 || i==row-1 || j== col-1))
            {
                continue;
            }
            
            q.push({heightMap[i][j], i*col+j});
            
            visited[i][j] = true;
        }
    }
    
    int ans = 0;
    
    while(!q.empty())
    {
        auto it = q.top();
        q.pop();
        
        int height = it.first;
        
        val = max(height, val);
        
        int x = it.second/col, y = it.second % col;
        
        for(auto d: dir)
        {
            int x1 = x + d[0];
            int y1 = y + d[1];
            
            if(x1>=row || x1<0 || y1<0 || y1>=col || visited[x1][y1])
            {
                continue;
            }
            
            visited[x1][y1] = true;
            
            if(heightMap[x1][y1] < val)
            {
               ans = ans + val - heightMap[x1][y1] ;
            }
        
            q.push({heightMap[x1][y1], x1*col + y1});
        }
    }
    
    return ans;
    
}