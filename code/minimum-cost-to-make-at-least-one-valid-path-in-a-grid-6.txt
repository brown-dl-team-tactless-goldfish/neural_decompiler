class Solution {
public:
    vector<vector<int>> DIR = {
        {0, 1},
        {0, -1},
        {1, 0},
        {-1, 0}
    };
    int n, m, cost = 0;
    int minCost(vector<vector<int>>& g) {
        n = g.size(), m = g[0].size();
        vector<vector<int>> dist(n, vector<int>(m, 2e9));
        queue<pair<int, int>> q;
        dfs(g, dist, 0, 0, cost, q);
        while(!q.empty()){
            cost++;
            int sz = q.size();
            for(int i = 0; i < sz; i++){
                auto [r, c] = q.front();
                q.pop();
                for(int k = 0; k < 4; k++)
                    dfs(g, dist, r + DIR[k][0], c + DIR[k][1], cost, q);
            }
        }
        return dist[n - 1][m - 1];
    }
    void dfs(vector<vector<int>>& g, vector<vector<int>>& dist, int r, int c, int cost, queue<pair<int, int>> &q){
        if(r < 0 || r == n || c < 0 || c == m || dist[r][c] != 2e9)
            return;
        dist[r][c] = cost;
        q.push({r, c});
        int next = g[r][c] - 1;
        dfs(g, dist, r + DIR[next][0], c + DIR[next][1], cost, q);
    }
};