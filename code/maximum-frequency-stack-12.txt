class FreqStack {
public:
  class Data{                  //data stucture for each note(n - value, c - count of value, idx - index of position)
    public:
    int n; int c; int idx;
  };
  
  class Compare{               //comparator for queue
    public:
    bool operator() (Data &a, Data &b){
      if(a.c < b.c) return true;
      if(a.c == b.c) 
        if(a.idx < b.idx) return true;
    
      return false;
    }
  };
  
  unordered_map<int,int> mp;                             //<number, value of this number in queue>
  priority_queue <Data, vector<Data>, Compare > pq;
  int id;
  
  FreqStack() {
    id = INT_MIN;                                        //unique number of start position 
  }
    
  void push(int x) {                                     
    mp[x]++;                                             //increase count of this number in queue
    Data tmp;
    tmp.n = x, tmp.c = mp[x], tmp.idx = id;
    pq.push(tmp);
    id++;                                                //increase index of position
  }
    
  int pop() {
    Data tmp = pq.top(); pq.pop();        
    mp[tmp.n]--;                                         //decrease count of this number in queue
    return tmp.n;    
  }
};

/**
 * Your FreqStack object will be instantiated and called as such:
 * FreqStack* obj = new FreqStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 */