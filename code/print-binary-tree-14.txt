public class Solution {
        private List<IList<string>> result = new List<IList<string>>();

        public IList<IList<string>> PrintTree(TreeNode root)
        {
            if (root == null)
                return new List<IList<string>>();

            int height = GetHeight(root),
                width = 1;

            for (int i = 1; i < height; i++)
                width = width * 2 + 1;

            for (int i = 0; i < height; i++)
                result.Add(Enumerable.Repeat(string.Empty, width).ToList());

            Print(root, 0, 0, width - 1);

            return result;
        }

        private int GetHeight(TreeNode node)
        {
            if (node == null)
                return 0;

            int l = GetHeight(node.left),
                r = GetHeight(node.right);

            return l >= r ? l + 1 : r + 1;
        }

        private void Print(TreeNode node, int level, int i, int j)
        {
            if (node != null)
            {
                result[level][i + (j - i) / 2] = node.val.ToString();

                Print(node.left, level + 1, i, i + (j - i) / 2 - 1);
                Print(node.right, level + 1, i + (j - i) / 2 + 1, j);
            }
        }
}