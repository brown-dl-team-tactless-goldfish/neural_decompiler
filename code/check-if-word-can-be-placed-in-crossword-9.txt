class Solution 
{
public:
// Main Idea is to check that the string can be fit horizontally and vertically with the given condition
// This DFS Function is for checking vertically
    bool dfs(vector<vector<char>>& board, string &word ,int i,int j, int index)
    {
       if(index==word.length())
       {
           if(i>=board.size())
           {
               return true;
           }
           else if(board[i][j]=='#')
           {
               return true;
           }
           else
           {
               return false;
           }
       }
       else
        {
           if(i>=board.size())
           {
               return false;
           }
            if(board[i][j]=='#')
            {
                 return false;
            }
            else if(board[i][j]==' ' || board[i][j]==word[index])
            {
                return dfs(board,word,i+1,j,index+1);
            }
            else  
            {
                return false;
            }
        }
    }
    // This DFS Function is for checking Horizontally
    bool dfs1(vector<vector<char>>& board, string &word ,int i,int j, int index)
    {
       if(index==word.length())
       {
           if(j>=board[i].size())
           {
               return true;
           }
           else if(board[i][j]=='#')
           {
               return true;
           }
           else
           {
               return false;
           }
       }
       else
        {
           if(j>=board[i].size())
           {
               return false;
           }
            if(board[i][j]=='#')
            {
                 return false;
            }
            else if(board[i][j]==' ' || board[i][j]==word[index])
            {
                
                return dfs1(board,word,i,j+1,index+1);
            }
            else  
            {
                return false;
            }
        }
    }
    
    bool placeWordInCrossword(vector<vector<char>>& board, string word) 
    {
      string p=word;
      reverse(p.begin(),p.end());
	  // Checking for both reverse & original string
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[i].size();j++)
            {
                if(board[i][j]==' ' || board[i][j]==word[0] || board[i][j]==p[0])
                {
                   if(i-1>=0 && board[i-1][j]=='#' && (dfs(board,word,i,j,0) || dfs(board,p,i,j,0) )) 
                   {
                       return true;
                   }
                   if(i==0 && ( dfs(board,word,i,j,0) || dfs(board,p,i,j,0) ))
                   {
                       return true;
                   }
                    
                   if(j-1>=0 && board[i][j-1]=='#' && ( dfs1(board,word,i,j,0) || dfs1(board,p,i,j,0) )) 
                   {
                       return true;
                   }
                   if(j==0 && (dfs1(board,word,i,j,0) || dfs1(board,p,i,j,0)) )
                   {
                       return true;
                   }
                }
            }
            
        }
        return false;
    }
};