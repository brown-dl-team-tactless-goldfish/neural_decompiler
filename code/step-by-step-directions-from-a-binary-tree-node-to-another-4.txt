/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* lca = nullptr;
    const int INF = 1e9 + 7;
    pair<bool, bool> getLca(TreeNode* root, int start, int dest) {
        if (root == nullptr) return make_pair(false, false);
        pair<bool, bool> p = getLca(root->left, start, dest);
        pair<bool, bool> q = getLca(root->right, start, dest);
        if (p.first == true && q.second == true && lca == nullptr) {
            lca = root;
            return make_pair(true, true);
        }
         if (q.first == true && p.second == true && lca == nullptr) {
            lca = root;
            return make_pair(true, true);
        }
        if (root->val == start) {
            if (p.second == true) {
                if (lca == nullptr) {
                    lca = root;
                }
                return make_pair(true, true);
            }
            if (q.second == true) {
                if (lca == nullptr) {
                    lca = root;
                }
                return make_pair(true, true);
            }
            return make_pair(true, false);
        }
        if (root->val == dest) {
            if (p.first == true) {
                if (lca == nullptr) {
                    lca = root;
                }
                return make_pair(true, true);
            }
            if (q.first == true) {
                if (lca == nullptr) {
                    lca = root;
                }
                return make_pair(true, true);
            }
            return make_pair(false, true);
        }
        return make_pair(p.first | q.first, p.second | q.second);
    }
    int getD(TreeNode* root, int val) {
        if (root == nullptr) return INF;
        if (root->val == val) return 0;
        return min(getD(root->left, val), getD(root->right, val)) + 1;
    }
    void getDe(TreeNode* root, int val, string& cur, string& sol) {
        if (root == nullptr) return;
        if (root->val == val) {
            for (char c : cur) sol.push_back(c);
            return;
        }
        cur.push_back('L');
        getDe(root->left, val, cur, sol);
        cur.pop_back();
        cur.push_back('R');
        getDe(root->right, val, cur, sol);
        cur.pop_back();
    }
    string getDirections(TreeNode* root, int startValue, int destValue) {
        getLca(root, startValue, destValue);
        string cur;
        int dep = getD(lca, startValue);
        string sol = string(dep, 'U');
        getDe(lca, destValue, cur, sol);
        return sol;
        
    }
};