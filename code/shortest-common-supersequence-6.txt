class Solution {
public:
    string shortestCommonSupersequence(string s1, string s2) 
    {
        int len1 = s1.size(), len2 = s2.size();
        string dp[len1+1][len2+1];
        
        for(int i=0; i<=len1; i++)
            dp[i][0] = "";
        
        for(int i=0; i<=len2; i++)
            dp[0][i] = "";
        
        // Finding LCS
        for(int i=1; i<=len1; i++)
        {
            for(int j=1; j<=len2; j++)
            {
                if(s1[i-1] == s2[j-1])
                    dp[i][j] = dp[i-1][j-1] + s2[j-1];
                
                else
                    dp[i][j] = (dp[i-1][j].size() < dp[i][j-1].size()) ? dp[i][j-1] : dp[i-1][j];
            }
        }
        
        string lcs = dp[len1][len2];
        int i=0, j=0;
        string ans;
        
        for(auto c:lcs)
        {
            while(s1[i] != c and i<len1)
                ans += s1[i++];
            
            while(s2[j] != c and j<len2)
                ans += s2[j++];
            
            i++;
            j++;
            ans += c;
        }
        
        while(i<len1)
            ans += s1[i++];
        
        while(j<len2)
            ans += s2[j++];
        return ans;
    }
};