public class Solution {
    //each password is n digits; 
    //treat the password as nodes;
    //visit every nodes once to create the password with all possible answers in one string.
    //use DFS; the node should be seeds with n-1 "0" and append a number from k each time;
    //Make sure we dont duplicate visit the same node;
    //so store all the nodes visited in a hashset visited;
    //00, 01,11,10  can be 00110
    public HashSet<string> visited = new HashSet<string>();
    StringBuilder ans = new StringBuilder();   
    public string CrackSafe(int n, int k) {
        //max length of the output is k^n + (n-1)
        string node = new string('0',n-1);
        DFS(node,k);
        ans.Append(node);
        return ans.ToString();
    }
    public void DFS(string node, int k)
    {
        for(int i = 0; i < k; i++) //i from 0 .. up to k-1 possible digits;
        {
            int x = i;
            string next = node + x;
            if (!visited.Contains(next))
            {
                visited.Add(next);
                DFS(next.Substring(1), k); // only pass in the n-1 substring; 
                ans.Append(x);
            }
        }        
    }
}