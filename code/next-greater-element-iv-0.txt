struct unfind{
    int val;
    int place;
    bool first;
    struct unfind* next;
};

void check (struct unfind* root, struct unfind* now, struct unfind* this, int* nums){
    if (now == NULL){
        this->next = NULL;
        root->next = this;
        return;
    }
    if (this->val > now->val){
        if (now->first){
            nums[now->place] = this->val;
            root->next = now->next;
            free(now);
            check(root, root->next, this, nums);
        } else {
            now->first = true;
            check(now, now->next, this, nums);
        }
    } else {
        this->next = root->next;
        root->next = this;
    }
}

void freelist(struct unfind* root, int* nums){
    if (root == NULL){
        return;
    }
    nums[root->place] = -1;
    freelist(root->next, nums);
    free(root);
}

int* secondGreaterElement(int* nums, int numsSize, int* returnSize){
    *returnSize = numsSize;
    int* ans = malloc(sizeof(int)*numsSize);
    struct unfind* root = malloc(sizeof(struct unfind));
    struct unfind* zero = malloc(sizeof(struct unfind));
    root->place = numsSize-1;   //Imput the place where must be -1  Just for write freelist();
    root->next = zero;
    
    zero->val = nums[0];
    zero->place = 0;
    zero->first = false;
    zero->next = NULL;
    
    for (int i = 1 ; i < numsSize ; i++){
        struct unfind* this = malloc(sizeof(struct unfind));
        this->val = nums[i];
        this->place = i;
        this->first = false;
        check(root, root->next, this, ans);
    }
    freelist(root, ans);
    return ans;
}