int makeConnected(int n, int** connections, int connectionsSize, int* connectionsColSize){
    if (n - 1 > connectionsSize)
        return -1;

    int *roots = (int *)malloc(sizeof(int) * n);
    int *sizes = (int *)malloc(sizeof(int) * n);
    for (int i = 0; i < n; i ++) {
        roots[i] = -1;
        sizes[i] = 1;
    }
    int ans = -1, rA, rB;
    for (int i = 0; i < connectionsSize; i ++) {
        if (roots[connections[i][0]] == -1 && roots[connections[i][1]] == -1) {
            if (sizes[connections[i][0]] > sizes[connections[i][1]]) {
                roots[connections[i][1]] = connections[i][0];
                sizes[connections[i][0]] += sizes[connections[i][1]];
                sizes[connections[i][1]] = 0;
            }
            else {
                roots[connections[i][0]] = connections[i][1];
                sizes[connections[i][1]] += sizes[connections[i][0]];
                sizes[connections[i][0]] = 0;
            }
        }
        else if (roots[connections[i][0]] == -1) {
            rB = roots[connections[i][1]];
            while (roots[rB] != -1) {
                rB = roots[rB];
            }
            //printf("%d root %d, sizes %d, i %d\n", connections[i][1], rB, sizes[rB], i);
            if (rB == connections[i][0]) {
                roots[connections[i][1]] = rB;
                continue;
            }
            if (sizes[connections[i][0]] > sizes[rB]) {
                roots[rB] = connections[i][0];
                roots[connections[i][1]] = connections[i][0];
                sizes[connections[i][0]] += sizes[rB];
                sizes[rB] = 0;
            }
            else {
                roots[connections[i][0]] = rB;
                roots[connections[i][1]] = rB;
                sizes[rB] += sizes[connections[i][0]];
                sizes[connections[i][0]] = 0;
            }
        }
        else if (roots[connections[i][1]] == -1) {
            rB = roots[connections[i][0]];
            while (roots[rB] != -1) {
                rB = roots[rB];
            }
            //printf("%d root %d, size %d i %d\n", connections[i][0], rB, sizes[rB], i);
            if (rB == connections[i][1]) {
                roots[connections[i][0]] = rB;
                continue;
            }
            if (sizes[connections[i][1]] > sizes[rB]) {
                roots[rB] = connections[i][1];
                roots[connections[i][0]] = connections[i][1];
                sizes[connections[i][1]] += sizes[rB];
                sizes[rB] = 0;
            }
            else {
                roots[connections[i][1]] = rB;
                roots[connections[i][0]] = rB;
                sizes[rB] += sizes[connections[i][1]];
                sizes[connections[i][1]] = 0;
            }
        }
        else {
            rA = roots[connections[i][0]];
            rB = roots[connections[i][1]];
            while (roots[rA] != -1) {
                rA = roots[rA];
            }
            while (roots[rB] != -1) {
                rB = roots[rB];
            }
            //printf("%d root %d, size %d i %d ", connections[i][0], rA, sizes[rA], i);
            //printf("& %d root %d, size %d i %d\n", connections[i][1], rB, sizes[rB], i);

            if (rA == rB){
                roots[connections[i][0]] = rA;
                roots[connections[i][1]] = rA;
                continue;
            }
            
            if (sizes[rA] > sizes[rB]) {
                roots[rB] = rA;
                roots[connections[i][0]] = rA;
                roots[connections[i][1]] = rA;
                sizes[rA] += sizes[rB];
                sizes[rB] = 0;
            }
            else {
                roots[rA] = rB;
                roots[connections[i][0]] = rB;
                roots[connections[i][1]] = rB;
                sizes[rB] += sizes[rA];
                sizes[rA] = 0;
            }
        }
    }
    for (int i = 0; i < n; i ++) {
        //printf("%d ", sizes[i]);
        if (sizes[i])
            ans ++;
    }
    return ans;
}