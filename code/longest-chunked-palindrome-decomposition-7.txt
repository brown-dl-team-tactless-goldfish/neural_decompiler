
class Solution {
public:
    unordered_map<string,int> dp;
    int solve(int i , int j , string s) {
        // cout<<"CALLING FOR "<<i<<" ,  "<<j<<'\n';
        if(i > j) return 0;
        if(i == j) return 1;
        
        string key = to_string(i) + "$" + to_string(j);
        
        if(dp.find(key) != dp.end()) return dp[key];
        
        int ans = 1;
        
        for(int k=i; k<j; k++) {
            if(s.substr(i,k-i+1) == s.substr(j-k+i , k-i+1)) {
                
                    // int curAns =   2 + solve(k+1 , j-k-1,s);
                    int curAns = 2 + solve(k+1 , j - (k-i+1),s);
                    ans = max(ans , curAns);
                        
            }
        }
        
      
        return dp[key] = ans;
    }
    int longestDecomposition(string text) {
     
        int i = 0; int j = text.length()-1;
        int ans = solve(i,j,text);
        return ans;
        return 0;
    }
};
