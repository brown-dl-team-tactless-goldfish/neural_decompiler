void reverse(char *answer, int start, int end)
{   
    int i, temp = end-start+1;
    
    for(i=0; i<temp/2; i++)
    {
        answer[start+i] ^= answer[end-i];
        answer[end-i] ^= answer[start+i];
        answer[start+i] ^= answer[end-i];
    }
}

char * reverseParentheses(char * s){

    int length = strlen(s);
    int i, stack_length = 0, answer_length = 0;
    char *answer;
    int string_stack[800];
    
    if(length == 0)
        return NULL;

    answer = (char*)malloc(sizeof(char)*2000);
    
    for(i=0; i<length; i++)
    {
        if(s[i] == '(')
        {
            string_stack[stack_length] = answer_length;
            stack_length++;
        }
        else if(s[i] == ')')
        {
            if(string_stack[stack_length-1] < (answer_length-1))
                reverse(answer, string_stack[stack_length-1], answer_length-1);
            stack_length--;
        }
        else
        {
            answer[answer_length++] = s[i];
        }
    }

    answer[answer_length] = '\0';
    return answer;
}