If u still get stuck, please comment

Example n = 57901.
- First of all, we need find the amount of all special number with 1, 2, 3, 4 digits
	+ Example with 4 digits, amount of special number is 9 * 9 * 8 * 7 -> it is simple math problem
	+ With 1, 2, 3 digits as well
	+ And to find that, I build funcion 'countSpecialNumbersWithDigit' in my solution
- Second, we need find the the amount of all special number with 5 digits and smaller of equals than 57901
	+ first, we calulate amount of special number from 10000 to 50000
	+ with first digit of n is 5, we have 4 digits smaller than 5 
	  (1 to 4, we can't chose 0 because it is first digit and can't chose 5, 6, 7, ... because special number < 50000)
	+ And with each digit smaller than 5, we have 9 * 8 * 7 * 6 cases
	+ Let me explain. Example if first digit is 3, second digit we can chose 9 digits (except 3 because special number)
	+ and third digit we can chose 8 digits (except 3 and second digit) and so on.
	+ Thats is how we got result with each digit smaller than 5 is 9 * 8 * 7 * 6 
	+ So from 10000 to 50000 we have 4 * 9 * 8 * 7 * 6 special number ( 4 is 4 digits smaller than 5)
	+ Next, we calulate amount of special number from 50000 to 57000
	+ Because 5 is first digit of n, so second digits we can chose 5 digits (from 0 to 6 except 5 (first digit), can chose 7, 8, 9 bcause special number < 57000)
	+ As well, third digit that we can chose 8 digits (from 0 - 9 except 5 and second digit) and so on
	+ so the result is 1 * 5 * 8 * 7 * 6
	+ And so on...
=> that how algorithm work.

class Solution {
public:
	unordered_map<int, int> map;
	int factorial[11] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800};

	int countSpecialNumbers(int n) {
		if(n <= 10)
			return n;

		string str = to_string(n);
		return countSpecialNumbers(str, 0) + countSpecialNumbersWithDigit(str.size() - 1);
	}

	int countSpecialNumbersWithDigit(int numDigit) {
		if(numDigit == 1)
			return 9;
		return 9 * comb(9, numDigit - 1) + countSpecialNumbersWithDigit(numDigit - 1);
	}

	int countDigits(char start, char end) {
		int count = 0;
		for(char c = start; c <= end; c++)
			count += !map[c];
		return count;
	}

	int comb(int n, int k) { // the result is n * (n - 1) * ... * (n - k + 1)
		return factorial[n] / factorial[n - k];
	}

	int countSpecialNumbers(string& str, int index) {
		if(index == str.size() - 1)
			return countDigits('0', str[index]);

		int res = 0, countDigitsLessThanCurrDigit = 0;

		countDigitsLessThanCurrDigit = (index == 0) ? countDigits('1', str[index] - 1)
													: countDigits('0', str[index] - 1);

		int leftoverDigits = 10 - (index + 1);

		res += comb(leftoverDigits, str.size() - index - 1) * countDigitsLessThanCurrDigit;

		if(map[str[index]])
			return res;

		map[str[index]] = true;
		res += countSpecialNumbers(str, index + 1);

		return res;
	}
};