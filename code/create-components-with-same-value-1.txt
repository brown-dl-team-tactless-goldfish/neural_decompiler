class Solution {
public:
    vector<int> arr;
    vector<vector<int>> g;
    
    int dfs(int ind,int parent,const int target)
    {
        int val = arr[ind];
        
        for(auto it : g[ind]){
            if(it == parent) continue;
            val += dfs(it,ind,target);
        }
        
        if(val == target) return 0;
        return val;
    }
    int componentValue(vector<int>& nums, vector<vector<int>>& edges) {
        g.clear(),arr.clear();
        int n = nums.size();
        g.resize(n),arr.resize(n);
        int sum = 0;
        
        for(auto i: edges){
            g[i[0]].push_back(i[1]);
            g[i[1]].push_back(i[0]);
        }
        
        for(int j=0;j<n;j++){
            sum += nums[j];
            arr[j] = nums[j];
        }
        
        int result = 0;
        for(int parts = 1;parts <= n;parts++){
            if(sum%parts != 0) continue;
            if(dfs(0,-1,sum/parts) !=0) continue;
            
            result = max(result,parts-1);
        }
        return result;
    }
};