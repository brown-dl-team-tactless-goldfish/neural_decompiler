class Solution {
public:
    int n;
    vector<long long> dp;
    int bitset(int m)
    {
        int cnt = 0;
        for (int i = 0; i < n; i++)
        {
            int bit = 1 << i;
            if ((bit & m) ==bit)
            {
                cnt++;
            }
        }
        return cnt;
    }
    int minimumXORSum(vector<int>& n1, vector<int>& n2) {
        n = n1.size();
        int tt = 1 << n;
        dp = vector<long long>(tt, 0);
        for (int mask = 1; mask < tt; mask++)
        {
            long long cur = INT_MAX;
            int cnt = bitset(mask);
            int v = n1[cnt - 1];
            for (int i = 0; i < n; i++)
            {
                int bit = 1 << i;
                if ((bit & mask) == bit)
                {
                    long long c = dp[mask ^ bit] + (v ^ n2[i]);
                    cur = min(c, cur);
                }
            }
            dp[mask] = cur;
        }
        return dp[tt - 1];     
    }
};