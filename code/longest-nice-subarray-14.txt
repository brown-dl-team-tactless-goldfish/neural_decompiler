        public int LongestNiceSubarray(int[] nums)
        {
            int res = 1;
            int[] arr = new int[32];//store count of bit-1 of from bit0 to bit31
            int left = 0;
            for(int i = 0; i < nums.Length; i++)
            {
                var curr = getBitArrayOfInt(nums[i]);
                for(int j = 0; j <=30; j++)
                    arr[j] += curr[j];
                //not nice, remove the lefe most element
                while (arr.Max()>1 && left < i)
                {
                    var prev = getBitArrayOfInt(nums[left++]);
                    for (int j = 0; j <= 30; j++)
                        arr[j] -= prev[j];
                }
                res = Math.Max(res, i - left + 1);
            }
            return res;
        }

        private int[] getBitArrayOfInt(int x)
        {
            int[] res = new int[32];
            for(int i = 0; i <= 30; i++)
            {
                if((x & (1 << i)) != 0)
                    res[i] = 1;
            }
            return res;
        }