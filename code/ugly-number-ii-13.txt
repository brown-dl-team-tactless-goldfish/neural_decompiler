static void swap(int* a, int* b)
{
    register int t = *a;
    *a = *b, *b = t;
}

static void add(register int** s, register int i, int val)
{
    if (INT_MAX - val <= 0) return;
    (*s)[i] = val;
    while (i > 0 && (*s)[(i-1)/2] > (*s)[i]) swap(&(*s)[(i-1)/2], &(*s)[i]), i=(i-1)/2;
}

static void min_heapify(register int** s, register int i, int N)
{
    register int m = 2*i+1 < N && (*s)[i] > (*s)[2*i+1] ? 2*i+1:i;
    if (2*i+2 < N && (*s)[m] > (*s)[2*i+2]) m = 2*i+2;
    if (i!=m) swap(&(*s)[i], &(*s)[m]), min_heapify(s, m, N);
}

static int poll(int* arr, int* N)
{        
    register int t = arr[0];
    swap(&arr[0], &arr[*N-1]);
    min_heapify(&arr, 0, --(*N)); 
    return t;
}

static int nthUglyNumber(register int n)
{
    if (n<=6) return n;
    int* arr = (int*) malloc((n*3+3)*sizeof(int));
    register int t=0;
    int j=0;
    add(&arr, j++, 2);
    add(&arr, j++, 3);
    add(&arr, j++, 5);
    for (register int c=1;c<n;)
    {
        // poll
        t = poll(arr, &j);
        
        if (t != arr[0]) // peek
        {
            if (INT_MAX / 2 >= t) add(&arr, j++, t * 2);
            if (INT_MAX / 3 >= t) add(&arr, j++, t * 3);
            if (INT_MAX / 5 >= t) add(&arr, j++, t * 5);
            ++c;
        }
    }
    free(arr), arr=NULL;
    return t;
}