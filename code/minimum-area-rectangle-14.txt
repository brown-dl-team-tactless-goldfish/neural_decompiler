class Solution {
public:
    int minAreaRect(vector<vector<int>>& points) {
        int mindist = INT_MAX;
        unordered_map<int, vector<int>> hashmap;
        for(auto &p: points) {
            hashmap[p[0]].push_back(p[1]);
        }
        for(auto &v: hashmap) {
            sort(v.second.begin(), v.second.end(), std::less<int>()) ;
        }
        for(auto it = hashmap.begin(); it != hashmap.end(); it++) {
            if(it->second.size() < 2 ) continue;
            for(auto it1 = next(it); it1 != hashmap.end(); it1++) {
                if(it1->second.size() < 2) continue;
                vector<int> vals;
                vals = common_elements(it1->second, it->second);
                if(vals.size() < 2) continue;
                for(int i = 0; i < (int)vals.size()-1; i++) {
                    mindist= min(mindist, abs(it->first-it1->first) * abs(vals[i]- vals[i+1]));
                }
            }
        }
        return mindist == INT_MAX ? 0 : mindist;
    }
    vector<int> common_elements(vector<int> &a, vector<int> &b) {
        vector<int> retval;
        int i = 0, j = 0;
        while(i < a.size() && j < b.size()) {
            if(a[i] == b[j]) {
                retval.push_back(b[j]);
                i++; j++;
            }
            else if(a[i] > b[j]) {
                j++;
            }
            else  {
                i++;
            }
        }
        return retval;
    }
};