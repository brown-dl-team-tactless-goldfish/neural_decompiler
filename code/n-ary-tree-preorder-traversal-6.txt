/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     int numChildren;
 *     struct Node** children;
 * };
 */

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
void preorderHelper(struct Node* node, int* arr, int* idx) {
    if (node == NULL) {
        return;
    }
    arr[(*idx)++] = node->val;  // insert node value into array
    for (int i = 0; i < node->numChildren; i++) {
        preorderHelper(node->children[i], arr, idx);  // recursive call for each child
    }
}

int* preorder(struct Node* root, int* returnSize) {
    int* arr = (int*)malloc(sizeof(int) * 10000); // assuming the maximum number of nodes is 10000
    int idx = 0;
    preorderHelper(root, arr, &idx);
    *returnSize = idx;  // set return size
    return arr;
}