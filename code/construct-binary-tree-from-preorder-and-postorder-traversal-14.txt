/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    using iter = vector<int>::iterator;
    TreeNode* construct(iter l, iter r, iter b, iter e) {
        if (l == r) {
            return nullptr;
        }
        TreeNode* node = new TreeNode(*l++);
        if (l != r) {
            auto it = b;
            for (;it < e - 1 && *it != *l; ++it);

            node->left  = construct(l, l + (it - b) + 1, b, it + 1); 
            node->right = construct(l + (it - b) + 1, r, it + 1, e - 1);
        }
        return node;
    }
    
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        return construct(preorder.begin(), preorder.end(), postorder.begin(), postorder.end());
    }
};