/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseEvenLengthGroups(ListNode* head) {
        vector<vector<ListNode *>> arr;
        
        ListNode *p = head;
        if(!p)
            return p;
        
        
        int c = 0;
        
        while(p){
            c++;
            vector<ListNode *> v;
            for(int i = 0; i < c && p; i++){
                v.push_back(p);
                p = p->next;
            }

            arr.push_back(v);
        }
        
        vector<ListNode *> l;

        for(int i = 0; i < arr.size(); i++){

            if(arr[i].size() % 2 == 0)
                reverse(arr[i].begin(), arr[i].end());
            
            for(int j = 0; j < arr[i].size(); j++)
                l.push_back(arr[i][j]);
        }
        
        for(int i = 1; i < l.size(); i++){
            l[i]->next = NULL;
            l[i-1]->next = l[i];
        }
            
        return l[0];
    }
};