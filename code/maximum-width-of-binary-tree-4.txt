/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int widthOfBinaryTree(struct TreeNode* root) {
    if (!root) return 0;
    
    int d = 1; //diameter
        
    struct TreeNode* Q[10000];
    int N[10000] = { 0 };
    int front = 0, rear = 0;
    Q[rear] = root;
    N[rear++] = 1;
    int start = 1, end = 1;
    int cur_size = 1, next_size = 0;
    
    while (front < rear) {
        if (cur_size == 0) break;
        
        for (int i = 0; i < cur_size; ++i) {
            struct TreeNode* tmp = Q[front];
            end = N[front++];
            if (tmp->left) {
                Q[rear] = tmp->left;
                N[rear++] = 2 * end;
                ++next_size;
            }
            if (tmp->right) {
                Q[rear] = tmp->right;
                N[rear++] = 2 * end + 1;
                ++next_size;
            }
        }
        printf("start=%d end=%d   ", start, end);
        
        if (end - start + 1 > d)
            d = end - start + 1;
        
        //指向下一行最左边的元素标号
        start = N[front]; 
        cur_size = next_size;
        next_size = 0;
    }
    return d;
}