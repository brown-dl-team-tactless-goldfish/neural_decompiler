class Solution {
public:
    struct Trie
    {
        unordered_map<int,Trie*>child;
        bool isend;
        Trie()
        {
            isend=false;
        }
    };
    Trie *root;
    int insert(vector<int>&nums,int i,int j)
    {
        Trie *p=root;
        int count=0;
        for(int k=i;k<=j;k++)
        {
            if(p->child[nums[k]]==NULL)
                p->child[nums[k]]=new Trie();
            p=p->child[nums[k]];
            if(!p->isend)
                count++;
            p->isend=true;
        }
        return count;
    }
    int countDistinct(vector<int>& nums, int k, int p) 
    {
        root=new Trie();
        int n=nums.size(),res=0;
        for(int i=0;i<n;i++)
        {
            int c=0,j=i;
            for(j=i;j<n;j++)
            {
                if(nums[j]%p==0)
                    c++;
                if(c>k)
                    break;
            }
            res+=insert(nums,i,j-1);
        }
        return res;
    }
};