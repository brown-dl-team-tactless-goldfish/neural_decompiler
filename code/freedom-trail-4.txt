class Solution {
public:
    int dist(int i, int j, int n) {
        if (i > j)
            swap(i, j);
        return min(j - i, i + n - j);
    }
    
    int findRotateSteps(string ring, string key) {
        unordered_map<char, vector<int>> pos;
        for (int i = 0; i < ring.length(); ++i)
            pos[ring[i]].push_back(i);
        
        unordered_map<int, int> dp;
        dp[0] = 0;
        for (char c : key) {
            unordered_map<int, int> next;
            for (int i : pos[c]) {
                next[i] = INT_MAX;
                for (auto p : dp)
                    next[i] = min(next[i], p.second + dist(i, p.first, ring.length()) + 1);
            }
            dp = next;
        }
        
        int ans = INT_MAX;
        for (auto p : dp)
            ans = min(ans, p.second);
        return ans;
    }
};