public class Solution {
    public int NumSubmatrixSumTarget(int[][] matrix, int target) {
        int res = 0;
        for(int i = 0; i < matrix.Length; i++){
            int[] nums = new int[matrix[0].Length];
            for(int j = i; j < matrix.Length; j++){
                for(int c = 0; c < matrix[0].Length; c++){
                    nums[c] += matrix[j][c];
                }
                res += getNumOfSubarrays(nums, target);
            }
        }
        return res;
    }
	
    private int getNumOfSubarrays(int[] nums, int k){
        Dictionary<int,int> map = new Dictionary<int,int>();
        map.Add(0,1);
        int res = 0, sum = 0;
        for(int i = 0; i < nums.Length; i++){
            sum += nums[i];
            if(map.ContainsKey(sum-k)){
                res += map[sum-k];
            }
            if(map.ContainsKey(sum))
                map[sum]++;
            else
                map.Add(sum,1);
        }
        return res;
    }
}