class Solution {
public:
    int maximumScore(vector<int>& scores, vector<vector<int>>& edges) {
        int n = scores.size(); 
        vector<vector<int>> graph(n); 
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]); 
            graph[edge[1]].push_back(edge[0]); 
        }
        for (auto& node : graph) sort(node.begin(), node.end(), [&](auto& lhs, auto& rhs) {return scores[lhs] > scores[rhs];}); 
        int ans = -1; 
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1]; 
            for (int i = 0; i < min(3, (int)graph[u].size()); ++i) 
                for (int j = 0; j < min(3, (int)graph[v].size()); ++j) 
                    if (graph[u][i] != v && graph[v][j] != u && graph[u][i] != graph[v][j]) 
                        ans = max(ans, scores[u] + scores[v] + scores[graph[u][i]] + scores[graph[v][j]]); 
        }
        return ans; 
    }
};