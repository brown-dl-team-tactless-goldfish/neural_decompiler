class Solution {
public:
    #define ll long long
    ll n, mod = 1e9 + 7; 
    vector<ll> dp; 
    
    ll memo(string & corridor, int start, int seats){
        if(start == n ) return seats == 2; 
        if(dp[start] != -1) return dp[start]; 
        ll res = 0, count = 0, i = start; 
        while(i < n && count != 2){
            if(corridor[i++] == 'S') count ++; 
        }
        res = memo(corridor, i, count); 
        ll peas = 0; 
        while(i<n && corridor[i] != 'S'){
            peas ++; 
            i ++; 
        }
        if(i == n && corridor.back() == 'P') peas = 1; 
        res = (res + (peas*memo(corridor, i, count))%mod) %mod; 
        return dp[start] = res; 
    }
    
    int numberOfWays(string corridor) {
        n = corridor.size(); 
        dp.resize(n, -1); 
        return memo(corridor, 0, 0); 
    }
};