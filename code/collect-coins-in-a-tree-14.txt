class Solution {
public:
    vector<int> dis2;
    vector<int> sub;
    vector<int> dis1;
    vector<int> subans;
    vector<vector<int>> es;
    vector<int> vs;
    int sum = 0;
    int n;
    int rank = INT_MAX;
    int count1(int i, int p) {
        int cur = vs[i];
        for (auto e : es[i]) {
            if (e == p) continue;
            cur += vs[e];
        }
        return cur;
    }
    
    int count2(int i, int p) {
        int cur = vs[i];
        int s = cur;
        for (auto e : es[i]) {
            if (e == p) continue;
            cur += count1(e, i);
            s += count2(e, i);
        }
        dis2[i] = cur;
        sub[i] = s;
        return s;
    }
    int dfs1(int i, int p) {
        int cur = vs[i];
        int ans = 0;
        for (auto e : es[i]) {
            if (e == p) continue;
            int v = dfs1(e, i);
            if (dis1[e] - cur < sub[e]) {
                ans += v + 2;
            }
        }
        subans[i] = ans;
        return ans;      
    }
    
    void dfs(int i, int p, int other, int ansp) {
        int remain = sum - other;
        int base = 0;
        int cur = vs[i];
        if (p != -1) {
            int x = dis1[p] - vs[i];
            if (x >= other) {
                // no need to search
            } else {
                base += 2 + ansp;
            }
        }
        int ans = subans[i] + base;
        for (auto e : es[i]) {
            if (e == p) continue;
            int ap = ans;
            if (dis1[e] - cur < sub[e]) {
                ap -= subans[e] + 2;
            }
            dfs(e, i, sum - sub[e], ap);
        }
        rank = min(ans, rank);
        return;
    } 
    
    int collectTheCoins(vector<int>& cs, vector<vector<int>>& edges) {
        vs = cs;
        n = cs.size();
        es.resize(n);
        dis1.resize(n);
        sub.resize(n);
        dis2.resize(n);
        subans.resize(n);
        for (auto e : edges) {
            int x = e[0];
            int y = e[1];
            es[x].push_back(y);
            es[y].push_back(x);
        }
        for (int i = 0; i < n; i++) {
            int cnt = cs[i];
            for (auto e : es[i]) cnt += cs[e];
            dis1[i] = cnt;
        }
        for (auto c : cs) sum += c;
        count2(0, -1);
        dfs1(0, -1);
        dfs(0, -1, 0, 0);
        return rank;
    }
};