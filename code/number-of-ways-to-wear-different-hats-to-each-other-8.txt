class Solution {
public:
  int own[11][41];
  int dp[1026][41];
  int f=0;
  #define mod 1000000007
  long long  solve(int mask,vector<int>&v,int idx,int n){
    
    if(mask==0) return 1;
    
    if(dp[mask][idx]!=-1) return dp[mask][idx];
    if(idx>=v.size()) return 0 ;
    

    long long ans=solve(mask,v,idx+1,n)%mod;
    
    for(int i=0;i<n;i++){
      if(mask&(1<<i)){
        
        if(own[i][v[idx]]){

        ans= (ans+  solve(mask^(1<<i),v,idx+1,n))%mod;
          
        }
      }
    }
 
    
    return  dp[mask][idx]=ans; 
  }
  int numberWays(vector<vector<int>>& hats) {
    int n=hats.size(); 
    unordered_set<int>m;
    memset(own,0,sizeof(own));
    memset(dp,-1,sizeof(dp));
	
    for(int i=0;i<n;i++){
      for(int j=0;j<hats[i].size();j++){
        own[i][hats[i][j]]=1;
        m.insert(hats[i][j]);
      }
    }
    
    vector<int>v{begin(m),end(m)};
    int mask = (1<<n)-1;
    return solve(mask,v,0,n);
    }
};