int minMoves(int* nums, int numsSize, int k){
    int n = numsSize;   
    if(k == 1)
        return 0;
    int* OnePos = malloc(n * sizeof(int));
    int Cn = 0;
    for(int i = 0; i < n; i++){
        if(nums[i] == 1){
            OnePos[Cn] = i;
            Cn++;
        }
    }
    
    int min = INT_MAX;
    long long* dp = malloc((Cn+1) * sizeof(long long));
    dp[0] = 0;
    for(int i = 1; i <= Cn; i++){
        dp[i] = dp[i-1] + OnePos[i-1];
    }
    for(int i = 0; i <= Cn - k; i++){
        int mid = i + k/2 ;
        int cur = 0;
        long long sum = 0;
        sum = ( (long long)OnePos[mid] + OnePos[mid]-k/2 )*(k/2 + 1)/2 ;        
        cur = sum- (dp[mid+1] - dp[i]) ;
 
        if(k > 2){
            int r = k - k/2;
            sum = ((long long)2*OnePos[mid] + r-1) * r/2;
            cur += dp[i+k] - dp[mid]  - sum;
        }
        min = fmin(min , cur);
        if(min == 0)
            return 0;
    }   
    return min;
}