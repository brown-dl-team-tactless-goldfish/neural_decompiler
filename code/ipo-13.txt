public class Solution {

        public int FindMaximizedCapital(int k, int w, int[] profits, int[] capital)
        {
            (int capital, int profit)[] projects = new (int capital, int profit)[profits.Length];

            for (int i = 0; i < profits.Length; i++)
            {
                projects[i] = (capital[i], profits[i]);
            }

            Array.Sort(projects, (x, y) => { return x.capital - y.capital; });

            PriorityQueue<int, int> queue = new PriorityQueue<int, int>();
            int completed = 0;
            while (k-- > 0)
            {
                while (completed < projects.Length && projects[completed].capital <= w)
                {
                    queue.Enqueue(projects[completed].profit, int.MaxValue - projects[completed].profit);
                    completed++;
                }

                if (queue.Count == 0)
                {
                    break;
                }

                w += queue.Dequeue();
            }
            return w;
        }
     
}