int count = 0;

 bool is_possible(int num)
{
    int s_root = sqrt(num);
    
    return s_root * s_root == num;
}

void permutation(int i, int n,vector<int> nums)
{
    if(i == n)
    {
        count++;
    }
    
    for(int idx = i; idx<n; idx++)
    {
        if(idx != i && nums[idx] == nums[i])
        {
            continue;
        }
        
        swap(nums[idx],nums[i]);
        
        if(i == 0 ||(i > 0 && is_possible(nums[i] + nums[i-1])))
        {
            permutation(i+1,n,nums);
        }
    }
    
}

    
int numSquarefulPerms(vector<int>& nums) {

   
    int n = nums.size();

    sort(nums.begin(),nums.end());

    permutation(0,n, nums);
  
    return count;
}