int cmpfunc2(const int** a, const int** b){
    return (b[0][1] - a[0][1]);
}

int cmpfunc(const int* a, const int* b){
    return (*a - *b);
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* topKFrequent(int* nums, int numsSize, int k, int* returnSize){
    int** temp = malloc(sizeof(int*)*numsSize);
    int i;
    for(i=0;i<numsSize;i++){
        temp[i] = malloc(sizeof(int)*2);
    }
    qsort(nums,numsSize,sizeof(int),cmpfunc);
    int count=0;
    for(i=0;i<numsSize;i++){
        if(i==0){
            temp[count][0] = nums[i];
            temp[count][1] = 1;
        }
        else if(temp[count][0] != nums[i]){
            count++;
            temp[count][0] = nums[i];
            temp[count][1] = 1;
        }
        else if(temp[count][0] == nums[i]){
            temp[count][1]++;
        }
    }

    count++;
    qsort(temp,count,sizeof(int*),cmpfunc2);
    
    int* ret = malloc(sizeof(int)*k);
    for(i=0;i<k;i++){
        ret[i] = temp[i][0];
    }
    *returnSize = k;
    for(i=0;i<numsSize;i++){
        free(temp[i]);
    }
    free(temp);
    return ret;
}