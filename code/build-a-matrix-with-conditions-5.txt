class Solution {
public:
    // Kahn's algo for topo sort
    vector<int> toposort(int V,vector<vector<int>> &adj) {
        queue<int> q;
        vector<int> indegree(V+1,0);
        vector<int> ans;
        for(int i=1;i<=V;++i){
            for(auto it : adj[i]){
                indegree[it]++;
            }
        }
        for(int i=1;i<=V;++i){
            if(indegree[i] == 0){
                ans.push_back(i);
                q.push(i);
            }
        }
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto it : adj[node]){
                indegree[it]--;
                if(indegree[it] == 0){
                    ans.push_back(it);
                    q.push(it);
                }
            }
        }

        if(ans.size() == V) return ans;
        else {
            ans.clear();
            return ans;
        }
    }
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& row, vector<vector<int>>& col) {
        
        vector<vector<int>> graph(k+1);
        vector<vector<int>> mat(k,vector<int>(k,0));
        
        //making rowCondition ans colCondition as adjacency matrix
        for(auto r : row){
            graph[r[0]].push_back(r[1]);
        }
        vector<int> row_ = toposort(k,graph);
        graph.clear();
        graph.resize(k+1);
        for(auto c : col){
            graph[c[0]].push_back(c[1]);
        }
        
        //incase of cycle detection
        vector<int> col_ = toposort(k,graph);
        if(row_.size() == 0 || col_.size() == 0){
            mat.clear();
            return mat;
        } 
        
        //getting coordinates of each number from 1 to k;
        unordered_map<int,vector<int>> points;
        for(int i=0;i<row_.size();++i){
            points[row_[i]].push_back(i);
        }
        for(int i=0;i<col_.size();++i){
            points[col_[i]].push_back(i);
        }
        
        
        for(auto m : points){
            if(m.second.size() == 2)
                mat[m.second[0]][m.second[1]] = m.first;
        }
        return mat;
    }
};