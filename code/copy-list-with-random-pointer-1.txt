/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *next;
 *     struct Node *random;
 * };
 */

//
//find the position of random in the list
int findPosition(struct Node* head, struct Node* random){
    if(random == NULL)
        return -1 ;
    struct Node* tmp = head ;
    int idx = 0 ;
    while(tmp){
        if(tmp == random)
            return idx ;
        idx++ ;
        tmp = tmp->next ;
    }
    return -1 ;
}

//
//copy list node's val and link next, also get "newTable"(address of new list's node)
struct Node* copyStep1(struct Node* head, struct Node** newTable){
    struct Node* newHead = malloc(sizeof(struct Node)) ;
    int cn = 0 ;
    newHead->val = head->val ;
    newHead->next = NULL ;
    struct Node* ptr = newHead ;
    struct Node* tmp = head->next ;
    newTable[cn] = ptr ;
    cn++ ;
    while(tmp){
        struct Node* node = malloc(sizeof(struct Node)) ;
        node->val = tmp->val ;
        ptr->next = node ;
        ptr = node ;
        tmp = tmp->next ;
        newTable[cn] = ptr ;
        cn++ ;
    }
    ptr->next = NULL ;
    return newHead ;
} 
struct Node* copyRandomList(struct Node* head) {
    //if head is NULL return NULL 
    if(head == NULL)
        return NULL ;
 
    //randomIdx: record orginal random index    
    int randomIdx[1000] ;
    //newTable: record address of copy list's node 
    struct Node* newTable[1000] ;
    int cn = 0 ;
    struct Node* tmp = head ;
    //find count and randomIdx 
    while(tmp){
        randomIdx[cn] = findPosition(head, tmp->random) ;
        tmp = tmp->next ;
        cn++ ;
    }
    //copy list node's val and next, and get "newTable"
    struct Node* newHead = copyStep1(head, newTable) ;
    
    //step 2: build new list's randomIdx
    struct Node* nTmp = newHead;
    for(int i = 0; i < cn; i++){
        if(randomIdx[i] == -1)
            nTmp->random = NULL ;
        else
            nTmp->random = newTable[randomIdx[i]] ;
        nTmp = nTmp->next ;
    }
    return newHead;
}