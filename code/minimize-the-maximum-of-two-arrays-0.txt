int gcd(int a, int b){
    int tmp = b ;
    while(tmp){
        b = a % tmp ;
        a = tmp ;
        tmp = b ;
    }
    return a ;
}
long long lcm(int a, int b){
    long long ret = 1 ;
    return (long long)a * b / gcd(a, b) ;
}

bool checkStatus(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2, int n){
    long long a = n - n/divisor1 ;
    long long b = n - n/divisor2 ;
    long long c = n - (n/divisor1 + n/divisor2 - n/lcm(divisor1, divisor2)) ;
    if(a < uniqueCnt1 || b < uniqueCnt2 || (a+b-c) < (uniqueCnt1 + uniqueCnt2))
        return false ;
    else
        return true ;
    
}
int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2){
    int left = 1, right = INT_MAX-1 ;
    while(left < right ){
        int mid = left + (right - left) / 2 ;
        if(checkStatus(divisor1, divisor2, uniqueCnt1, uniqueCnt2, mid) )
            right = mid ;            
        else
            left = mid + 1 ;
    }
    return left ;
}