/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    struct node {
        int x;
        int depth;
    };
    node arr[1001];
    int idx = 0;
    int n;
public:
    TreeNode* recoverFromPreorder(string S) {
        if(S.empty()) return NULL;
        
        int cnt = 0;
        int dashCnt = 0;
        string s = "";
        for(int i=0;i<S.size();i++) {
            if(S[i] == '-') {
                if(s != "") {
                    int x = stoi(s);
                    arr[cnt].x=x;
                    arr[cnt++].depth = dashCnt;
                    dashCnt=0;
                }
                dashCnt++;
                s = "";
            }else {
                s += S[i];
            } 
        }
        
         arr[cnt].x=stoi(s);
         arr[cnt++].depth = dashCnt;
         n = cnt;
        
        TreeNode *root = new TreeNode(arr[0].x);
        idx = 1;
        buildTree(root, 0);
        return root;
    }
    
    
    void buildTree(TreeNode *rt, int depth) {
        if(idx >= n) return;
        if(depth + 1 == arr[idx].depth) {
            TreeNode *x = new TreeNode(arr[idx].x);
            rt->left = x;
            idx++;
            buildTree(rt->left, depth + 1);
            
        }
        
        if(depth + 1 == arr[idx].depth) {
            TreeNode *x = new TreeNode(arr[idx].x);
            rt->right = x;
            idx++;
            buildTree(rt->right, depth + 1);
            
        }
        
    }
};