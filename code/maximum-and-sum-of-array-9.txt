class Solution {
public:
    int dp[20][300000];
    int maximumANDSum(vector<int>& nums, int numSlots) {
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            for(int mask = 0; mask < (1 << (2 * numSlots)); mask++) {
                for(int slot = 0; slot < numSlots; slot++) {
                    int first = mask & (1 << (2 * slot));
                    int second = mask & (1 << (2 * slot + 1));
                    if(first == 0 || second == 0) {
                        int new_mask = 0;
                        if(first == 0) new_mask = mask | (1 << (2 * slot));
                        else new_mask = mask | (1 << (2 * slot + 1));
                        dp[i + 1][new_mask] = max(dp[i + 1][new_mask], dp[i][mask] + (nums[i] & (slot + 1)));
                    }
                }
            }
        }
        int sol = 0;
        for(int mask = 0; mask < (1 << (2* numSlots)); mask++) sol = max(sol, dp[n][mask]);
        return sol;
    }
};