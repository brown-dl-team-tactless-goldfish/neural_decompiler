class Solution {
public:
    vector<vector<int>>adj;
    int ans=1;
    int dfs(int node,int par,string&s){
     
      int parC=1;  
      for(auto x:adj[node]){
          if(x!=par){
             int childC=dfs(x,node,s);
          
          if(s[x]!=s[node]){
             ans=max(childC+parC,ans);
             parC= max(parC,childC+1);
          }
          }
      }
      
      return parC;
    }
    int longestPath(vector<int>& p, string s) {
        int n=p.size();
        adj.resize(n);
        for(int i=0;i<n;i++){
            if(i!=0){
            adj[p[i]].push_back(i);
            adj[i].push_back(p[i]);
            }
        }
      dfs(0,-1,s);
      return ans;
    }
};