class Solution {
public: 
    map<int,int> mp; 
    map<int,int> ans; 
    int depth(TreeNode* root){
        if(!root) return 0; 
        int l=depth(root->left);
        int r=depth(root->right);
        return mp[root->val]=1+max(l,r); 
    }    
    void dfs(TreeNode* root,int curr,int level){
        if(!root) return ;
        ans[root->val]=curr;
        curr=max(curr,level);
        int lcurr=curr; if(root->right) lcurr=max(curr,mp[root->right->val]+level);
        int rcurr=curr; if(root->left) rcurr=max(curr,mp[root->left->val]+level);
        dfs(root->left,lcurr,level+1);
        dfs(root->right,rcurr,level+1);  
    }
        
    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {
        vector<int> res;
        depth(root);
        dfs(root,0,0);
        for(int q:queries) res.push_back(ans[q]);
        return res;
    }
};