/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     int numChildren;
 *     struct Node** children;
 * };
 */

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* preorder(struct Node* root, int* returnSize) {
int** array_set;
int* array_count;
int* ret_array;
int set_size;
int i, j;
int count = 1;
int ptr = 1;
if (root==NULL) { 
    *returnSize = 0;
    return NULL;
   }
array_set = malloc(root->numChildren * sizeof(int*));
array_count = malloc(root->numChildren * sizeof(int));
for (i=0; i<root->numChildren; i++) {
    array_set[i] = preorder(root->children[i],&set_size);
    array_count[i] = set_size;
    count += set_size;
}

ret_array = malloc(count * sizeof(int));
ret_array[0]=root->val;
for (i=0; i<root->numChildren; i++)
    for (j=0; j<array_count[i]; j++)
        ret_array[ptr++] = array_set[i][j];
for (i=0; i<root->numChildren; i++)
    free(array_set[i]);
free(array_set);
free(array_count);
*returnSize = count;
return ret_array;
}