class Solution {
public:
    using ll = long long;
    int minimizeSet(ll divisor1, ll divisor2, ll uniqueCnt1, ll uniqueCnt2) {
        ll l = 1, r = 1'000'000'000'000'000;
        const auto check = [&](ll m) {
            const auto satisfiesFirst = m - m / divisor1;
            const auto satisfiesSecond = m - m / divisor2;
            const auto satisfirsBoth = satisfiesFirst + satisfiesSecond - m + m / lcm(divisor1, divisor2);
            if (satisfiesFirst < uniqueCnt1) {
                return false;
            }
            ll satisfiesSecondOnly = satisfiesSecond - satisfirsBoth;
            ll leftForSecond = satisfiesSecondOnly + min(satisfiesFirst - uniqueCnt1, satisfirsBoth);
            return leftForSecond >= uniqueCnt2;
        };
        while (l + 1 < r) {
            const auto m = (l + r) / 2;
            if (check(m)) {
                r = m;
            }
            else {
                l = m;
            }
        }
        return check(l) ? l : r;
    }
};