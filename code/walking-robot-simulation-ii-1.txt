typedef struct {
	int pos;
	int len;
	int height;
	int width;
	int c1;
	int c2;
	int c3;
	int c4;
	bool init;
} Robot;


Robot* robotCreate(int width, int height) {
	Robot *obj;

	obj = malloc(sizeof(Robot));

	obj->pos = 0;
	obj->len = 2*(height+width-2);
	obj->width = width-1;
	obj->height = height-1;
	obj->c1 = width-1;
	obj->c2 = width+height-2;
	obj->c3 = width*2+height-3;
	obj->c4 = 2*(width+height-2);
	obj->init = true;

	return obj;
}

void robotStep(Robot* obj, int num) {

	obj->pos = (obj->pos+num) % obj->len;
	if(num>0)
		obj->init = false;;
}

int* robotGetPos(Robot* obj, int* retSize) {
	int *p;
	p = malloc(sizeof(int)*2);
	*retSize = 2;

	if(obj->pos <= obj->c1){
		p[0] = obj->pos;
		p[1] = 0;
	}
	else if(obj->pos <= obj->c2){
		p[0] = obj->width;
		p[1] = obj->pos - obj->c1;
	}
	else if(obj->pos <= obj->c3){
		p[0] = obj->c3 - obj->pos;
		p[1] = obj->height;
	}
	else{
		p[0] = 0;
		p[1] = obj->c4 - obj->pos;
	}

	return p;

}

char * robotGetDir(Robot* obj) {
	char *dir=malloc(sizeof(int)*6);

	if(obj->pos == 0 && (obj->init)){
		strcpy(dir, "East");
		return dir;
	}

	if(obj->pos == 0){
		strcpy(dir, "South");
		return dir;
	}

	if(obj->pos <= obj->c1){
		strcpy(dir, "East");
	}
	else if(obj->pos <= obj->c2){
		strcpy(dir, "North");
	}
	else if(obj->pos <= obj->c3)
		strcpy(dir, "West");
	else
		strcpy(dir, "South");

	return dir;
}

void robotFree(Robot* obj) {
	free(obj);
}


