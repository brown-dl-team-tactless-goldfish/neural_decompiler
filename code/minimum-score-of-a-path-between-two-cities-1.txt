#define MAX_INT 2147483647

typedef struct Node {
    void *data;
    struct Node *next;
} Node;

typedef struct {
    int cityNum;
    int visited;
} City;

Node **buildAdjacencyList(int numCities, int **roads, int roadSize) {
    int i;
    City *c;
    Node *n1, *n2, **cities = malloc((numCities+1) * sizeof(Node*));
    cities[0] = NULL;
    for (i = 1; i <= numCities; ++i) {
        c = malloc(sizeof(City));
        c->cityNum = i;
        c->visited = 0;
        cities[i] = malloc(sizeof(Node));
        cities[i]->data = (void*) c;
        cities[i]->next = NULL;
    }
    for (i = 0; i < roadSize; ++i) {
        n1 = malloc(sizeof(Node));
        n1->data = cities[roads[i][1]]->data;
        n1->next =  cities[roads[i][0]]->next;
        n2 = malloc(sizeof(Node));
        n2->data = cities[roads[i][0]]->data;
        n2->next = cities[roads[i][1]]->next;
        cities[roads[i][0]]->next = n1;
        cities[roads[i][1]]->next = n2;
	}
    return cities;
}

void dfs(int city, Node **adjList) {
    Node *n = adjList[city];
    City *c = (City*) n->data;
    if (!c->visited) {
        c->visited = 1;
        n = n->next;
        while (n != NULL) {
            c = (City*) n->data;
            dfs(c->cityNum, adjList);
            n = n->next;
        }
    }
}

int minScore(int n, int** roads, int roadsSize, int* roadsColSize){
    int i, distance, minDistance = MAX_INT;
    City *c0, *c1;
    Node **adjacencyList = buildAdjacencyList(n, roads, roadsSize);
    dfs(1, adjacencyList);
    for (i = 0; i < roadsSize; ++i) {
        c0 = (City*) adjacencyList[roads[i][0]]->data;
        c1 = (City*) adjacencyList[roads[i][1]]->data;
        if (c0->visited && c1->visited) {
            distance = roads[i][2];
            printf("%d\n", distance);
            if (distance < minDistance) {
                minDistance = distance;
            }
        }
    }
    return minDistance;
}