/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    vector<int>res;
    
    void distanceKdown(TreeNode* root, int K) {
        if (!root || K < 0) return;
        
        if (K == 0) {
            res.push_back(root->val);
            return;
        }
        
        distanceKdown(root->left, K-1);
        distanceKdown(root->right, K-1);
    }
    
    int distanceKUtil(TreeNode* root, TreeNode* target, int K) {
        if (!root) return -1;
        
        if (root == target) {
            distanceKdown(root, K);
            return 0;
        }
        
        int d1 = distanceKUtil(root->left, target, K);
        if (d1 != -1) {
            if (d1+1 == K)
                res.push_back(root->val);
            else
                distanceKdown(root->right, K-d1-2);
            return 1+d1;
        }
        
        int d2 = distanceKUtil(root->right, target, K);
        if (d2 != -1) {
            if (d2+1 == K)
                res.push_back(root->val);
            else
                distanceKdown(root->left, K-d2-2);
            return 1+d2;
        }
        
        return -1;
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        
        if (!root) return res;
        distanceKUtil(root, target, K);
        return res;
    }
};