int findSize(int* arr, int arrSize, int* min) {
    int max = arr[0];
    for(int i = 1; i < arrSize; i++) {
        max = arr[i] > max ? arr[i] : max;
        *min = arr[i] < *min ? arr[i] : *min;
    }
    return *min < 0 ? max + abs(*min) + 1 : max + 1;
}

int cmp(const void* a, const void* b) {
    return *(const int*) b - *(const int*) a;
}

bool uniqueOccurrences(int* arr, int arrSize) {
    int shift = arr[0];
    int size = findSize(arr, arrSize, &shift);
    shift = (shift > 0) ? 0 : abs(shift);
    int* hash = (int*) calloc(size, sizeof(int));
    for(int i = 0; i < arrSize; i++) {
        hash[arr[i] + shift]++;
    }
    qsort(hash, size, sizeof(int), cmp);
    for(int i = 0; i+1 < size; i++) {
        if(hash[i+1] == 0) break;
        if(hash[i] == hash[i+1]) {
            free(hash);
            return false;
        }
    }
    free(hash);
    return true;
}