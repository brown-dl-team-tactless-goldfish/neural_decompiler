int longestCycle(int* edges, int edgesSize){
    int count = 0;
    int actual;
    int length = -1;
    int j = 0;
    int to_delete;
    for (count; count < edgesSize; count++)
    {
        if(edges[count] != -1)
        {
        j = 1;
        actual = count;
        to_delete = count;
//Looking for possible Cycle ***********************************
        while (edges[actual] != count && j <= (edgesSize - count ) && edges[actual] != -1)
        {
            actual = edges[actual];
            j++;
        }
//Checking if Cyle found ******************
        if (edges[actual] == count)
        if (j>length) //Checking if it's lengthen then the previous lengthen cycle
        length = j;
        actual = count;
//now we will make all members of this cycle to -1's to ensure that our program won't check none of those members in next tries
        while (edges[actual] != count && j <= (edgesSize - count ) && edges[actual] != -1)
        {
            to_delete = actual;
            actual = edges[actual];
            edges[to_delete] = -1;
        }
        }
    }
return length;
}