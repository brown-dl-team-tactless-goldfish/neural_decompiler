int cmpFunc(const void *a, const void *b){
    return(*((int *)a) - *((int *)b));
}

int minimumRounds(int* tasks, int tasksSize){
    int i, start, cnt, number;    
    if (tasksSize == 1)
        return(-1);
   
    /* Sort this array first */
    qsort(tasks, tasksSize, sizeof(int), cmpFunc);
    for (i=1, start=0, cnt=0; i<tasksSize; ++i){
        /* count the number of same value */
        if (tasks[i-1] != tasks[i]){
            number = i - start;
            if (number == 1)
                return(-1);
            else
                cnt += (number / 3) + ((number % 3) ? 1 : 0);
            start = i;
        }
        /* when to the end of the array */
        if (i == (tasksSize-1)){
            number = i - start + 1;
            if (number == 1)
                return(-1);
            else
                cnt += (number / 3) + ((number % 3) ? 1 : 0);
        }
    }
    return(cnt);
}