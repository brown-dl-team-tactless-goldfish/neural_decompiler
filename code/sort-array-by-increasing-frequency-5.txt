

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

static int hash[201];

static int cmp(const int *a, const int *b) {
    int count_a = hash[*a + 100];
    int count_b = hash[*b + 100];
    return (count_a != count_b) ? (count_a - count_b) : *b - *a;
}

int* frequencySort(int* nums, int numsSize, int* returnSize){
    int i;
    
    memset(hash, 0, sizeof(hash));
    for(i=0; i<numsSize; i++)
        hash[nums[i] + 100]++;
    
    qsort(nums, numsSize, sizeof(int), cmp);
    *returnSize = numsSize;

    return nums;
}