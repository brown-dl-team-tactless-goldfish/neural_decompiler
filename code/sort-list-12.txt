/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode *merge(struct ListNode *left, struct ListNode *right) {
    struct ListNode *res, **pp;
    res = NULL;
    pp = &res;
    while (left || right) {
        if (!right || left && left->val <= right->val) {
            *pp = left;
            left = left->next;
        } else {
            *pp = right;
            right = right->next;
        }
        pp = &(*pp)->next;
    }
    *pp = NULL;
    return res;
}

struct ListNode *mergeSort(struct ListNode *head, int length) {
    if (length <= 1) {
        if (length == 1)
            head->next = NULL;
        return head;
    }
    int midlen = length / 2;
    struct ListNode *ptr = head;
    for (int i = 0; i < midlen; i++) {
        ptr = ptr->next;
    }
    return merge(mergeSort(head, midlen), mergeSort(ptr, length - midlen));
}

struct ListNode *sortList(struct ListNode *head) {
    int len = 0;
    struct ListNode *ptr = head;
    while (ptr) {
        len++;
        ptr =ptr->next;
    }
    return mergeSort(head, len);
}