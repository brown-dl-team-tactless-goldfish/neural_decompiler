class Solution {
public:
    vector<int> sortItems(
        int n,
        int m,
        vector<int>& group,
        vector<vector<int>>& beforeItems
    ) {
        vector<vector<int>> items(m);
        for (int i = 0; i < n; ++i) {
            if (group[i] == -1) {
                group[i] = m++;
                items.push_back({i});
            } else {
                items[group[i]].push_back(i);
            }
        }
        vector<unordered_set<int>> superGraph(m);
        for (int i = 0; i < n; ++i) {
            int v = group[i];
            for (int j: beforeItems[i]) {
                int u = group[j];
                if (v == u)
                    continue;
                superGraph[v].insert(u);
            }
        }
        
        vector<int> superVis(m), superOrder;
        function<int(int)> superDfs = [&](int v)->int {
            if (superVis[v])
                return superVis[v];
            superVis[v] = -1;
            for (int u: superGraph[v])
                if (superDfs(u) == -1)
                    return -1;
            superOrder.push_back(v);
            return superVis[v] = 1;
        };
        for (int i = 0; i < m; ++i)
            if (superDfs(i) == -1)
                return {};
        
        vector<int> ans, vis(n);
        function<int(int)> dfs = [&](int v)->int {
            if (vis[v])
                return vis[v];
            vis[v] = -1;
            for (int u: beforeItems[v])
                if (dfs(u) == -1)
                    return -1;
            ans.push_back(v);
            return vis[v] = 1;
        };
        for (int gid: superOrder)
            for (int v: items[gid])
                if (dfs(v) == -1)
                    return {};
        return ans;
    }
};
