    private Dictionary<int, int> dict = new Dictionary<int, int>();
    private bool[] visited = null;
        
    public bool IsBipartite(int[][] graph) {
        if (graph == null || graph.Length == 0)
            return true;
        
        for (int i = 0; i < graph.Length; i++)
        {
            if (!dict.ContainsKey(i))
                dict.Add(i, 0);
            
            visited = new bool[graph.Length];
            visited[i] = true;
            
            if (!DFS(graph, i))
                return false;
        }
        
        return true;
    }
    
    private bool DFS(int[][] graph, int node)
    {
        foreach (var nei in graph[node])
        {
            if (dict.ContainsKey(node) && dict.ContainsKey(nei) && dict[node] == dict[nei])
                return false;
            
            if (dict.ContainsKey(node) && !dict.ContainsKey(nei))
                dict.Add(nei, ~dict[node] & 1);
            else if (dict.ContainsKey(nei) && !dict.ContainsKey(node))
                dict.Add(node, ~dict[nei] & 1);
            
            if (!visited[nei])
            {
                visited[nei] = true;
                DFS(graph, nei);
            }
        }
        
        return true;
    }