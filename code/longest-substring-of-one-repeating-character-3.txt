class Solution {
private:
    map<int, int>Map ; //key : interval head
                       //val : interval tail
    multiset<int>Set ; //lengths of all intervals
    int n ;
    string str ;
    void insert(int idx){
        auto iter = Map.upper_bound(idx);
        iter = prev(iter) ;
        int a = iter->first ;
        int b = iter->second ;
        if(a == b)
            return ;
        removeInterval(a);       
        if(a == idx){;
            addInterval(a, a);
            addInterval(a+1, b);
        }
        else if(b == idx){
            addInterval(a, b-1);
            addInterval(b, b);
        }
        else{
            addInterval(a, idx-1);
            addInterval(idx, idx);
            addInterval(idx+1, b);
        }
    }
    
    void mergeRight(int idx){
        if(idx == (n-1) || str[idx] != str[idx+1])
            return  ;
        auto iter = Map.lower_bound(idx+1);
        int b = iter->second;
        removeInterval(idx) ;
        removeInterval(idx+1) ;
        addInterval(idx, b) ;       
    }
    void mergeLeft(int idx){
        if(idx == 0 || str[idx] != str[idx-1])
            return  ;
        auto iter = Map.find(idx);
        iter = prev(iter) ;
        int a = iter->first ;
        int b = Map[idx] ;
        removeInterval(idx) ;
        removeInterval(a) ;
        addInterval(a, b) ;        
    }    
    
    void removeInterval(int idx){
        int b = Map[idx] ;
        Map.erase(idx) ;
        Set.erase(Set.find(b-idx+1)) ;        
    }
    
    void addInterval(int a, int b){
        Map[a] = b ;
        Set.insert(b-a + 1) ;
    }
    
public:
    vector<int> longestRepeating(string s, string queryCharacters, vector<int>& queryIndices) {
        this->n = s.size() ;
        this->str = s ;
        for(int i = 0; i < n; i++){
            int j = i ;
            while(j < n && s[j] == s[i])
                j++ ;
            Map[i] = j-1 ;
            Set.insert(j-i) ;
            i = j - 1 ;
        }
            
        vector<int>ret ;
        for(int i = 0; i < queryIndices.size(); i++){
            int idx = queryIndices[i] ;
            if(str[idx] != queryCharacters[i]){               
                insert(idx) ;
                str[idx] = queryCharacters[i] ;
                mergeRight(idx) ;
                mergeLeft(idx) ;
            }
            ret.push_back(*Set.rbegin()) ;
        }
        return ret ;
    }
};