int min(int a, int b) {
    return a < b ? a : b;
}

int is_prime(int n) {
    if (n <= 1) {
        return 0;
    }
    int i;
    for (i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) {
            return 0;
        }
    }
    return 1;
}


int* closestPrimes(int left, int right, int* returnSize) {
    int* closestPrimes = (int*)malloc(2 * sizeof(int));
    closestPrimes[0] = -1;
    closestPrimes[1] = -1;
    if (right <= 1) {
        *returnSize = 2;
        return closestPrimes;
    }
    int* primes = (int*)malloc((right - left + 1) * sizeof(int));
    int primeCount = 0;
    int minDiff = INT_MAX;
    int i;
    for (i = left; i <= right; ++i) {
        if (is_prime(i)) {
            primes[primeCount++] = i;
            if (primeCount >= 2 && primes[primeCount - 1] - primes[primeCount - 2] < minDiff) {
                minDiff = primes[primeCount - 1] - primes[primeCount - 2];
                closestPrimes[0] = primes[primeCount - 2];
                closestPrimes[1] = primes[primeCount - 1];
                if (minDiff <= 2) {
                    break;
                }
            }
        }
    }
    *returnSize = 2;
    free(primes);
    return closestPrimes;
}