void visit(int **grid, int r, int c, int n, int m){
    if (r < 0 || c < 0 || r >= n || c >= m || grid[r][c] == 1) return;
    grid[r][c] = 1;
    int dr[] = { 0, 1, 0, -1 };
    int dc[] = { -1, 0, 1, 0 };
    for (int i = 0; i < 4; i++)
        visit(grid, r+dr[i], c+dc[i], n, m);
    return;
}

int closedIsland(int** grid, int gridSize, int* gridColSize){
    int n = gridSize, m = *gridColSize;
    // Exclude connected groups from four edges
    for (int j = 0; j < m; j++) {
        visit(grid, 0, j, n, m);
        visit(grid, n-1, j, n, m);
    }
    for (int i = 0; i < n; i++) {
        visit(grid, i, 0, n, m);
        visit(grid, i, m-1, n, m);
    }
    // Count the number of connected components of 0s on the grid
    int res = 0;
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
            if (grid[i][j] == 0) {
                visit(grid, i, j, n, m);
                res++;
            }
        }
    }
    return res;
}