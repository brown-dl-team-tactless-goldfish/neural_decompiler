typedef struct {
    char val[11];
    UT_hash_handle hh;
} Node1;

char *trans(char *t) {
    char *ret = (char *)malloc(11);
    memset(ret, '0', 11);
    int len = strlen(t);
    for (int i=0; i<len; i++) {
        ret[t[i]-'0']++;
    }
    ret[10] = 0;
    return ret;
}

bool reorderedPowerOf2(int n){
    Node1 *ht = NULL, *tmp = NULL;
    char t[11] = {0};
    char *p = NULL;
    
    for (int i=0; i<32; i++) {
        memset(t, 0, sizeof(t));
        sprintf(t, "%llu", (0x1UL << i));
        p = trans(t);
        HASH_FIND_STR(ht, p, tmp);
        if (tmp == NULL) {
            tmp = (Node1 *)malloc(sizeof(Node1));
            memset(tmp, 0, sizeof(Node1));
            memcpy(tmp->val, p, 10);
            HASH_ADD_STR(ht, val, tmp);
        }
    }
    
    memset(t, 0, sizeof(t));
    sprintf(t, "%llu", n);
    p = trans(t);
    HASH_FIND_STR(ht, p, tmp);
    if (tmp)
        return true;
    
    return false;
}