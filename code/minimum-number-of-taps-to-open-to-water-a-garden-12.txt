class Solution {
public:
    int minTaps(int n, vector<int>& ranges) {
        int big = 1e7;
		// dp[i] stands for the minimum taps to cover the range [0, i].
		// By definition, it can be deducted that dp[i] <= dp[j] for any i < j. Becasue dp[j] could always qualify dp[i].
        vector<int> dp(n+1, big); 
        dp[0] = 0;
        
        for(int i=0; i<=n; i++) {
            int start = max(0, i - ranges[i]);
            int end = min(n, i + ranges[i]);
            
            if(dp[start] != big) {
                for(int j = start; j<=end; j++) {
                    dp[j] = min(dp[j], 1 + dp[start]);
                }
            }
        }
        
        
        return dp[n] == big ? -1 : dp[n];
    }
};