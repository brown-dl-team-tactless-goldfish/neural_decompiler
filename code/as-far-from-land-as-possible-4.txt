class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int res = -1, n = grid.size(), m = grid[0].size();
        for (int i = 0; i < n; ++ i) {
            for (int j = 0; j < m; ++ j) {
                if (grid[i][j] == 0) {
                    int dist = 1, tmp = INT_MAX;
                    while (i + dist < n || i - dist >= 0 || j + dist < m || j - dist >= 0) {
                        for (int x = j - dist; x <= j + dist; ++ x) {
                            if (x < 0 || x >= m) continue;
                            if ((i - dist >= 0 && grid[i - dist][x] == 1) || (i + dist < n && grid[i + dist][x] == 1)) tmp = min(tmp, dist + abs(x - j));
                        }
                        for (int x = i - dist; x <= i + dist; ++ x) {
                            if (x < 0 || x >= n) continue;
                            if ((j - dist >= 0 && grid[x][j - dist] == 1) || (j + dist < m && grid[x][j + dist] == 1)) tmp = min(tmp, dist + abs(x - i));
                        }
                        if (tmp != INT_MAX) break;
                        ++ dist;
                    }
                    if (tmp != INT_MAX) res = max(res, tmp);
                }
            }
        }
        return res;
    }
};