class Solution {
public:
    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {
       
       
        //temp is the heart of the algorithm here it contains pair
        //{start_time,end-start+tip}
        /*********************************************/
        vector<pair<int,int>> temp[n+1];//Array of vectors
        //this temp contains starting time, end-start+tip as pair for a particular finish time
        
        for(auto x:rides)
            temp[x[1]].push_back({x[0],x[1]-x[0]+x[2]});
        //here we push the pair in the temp[finish time]
    
      
        /*********************************************/
        vector<long long >dp(n+1,0);
    
        // dp0 =0 and dp 1=0 
        // dp[i] means
        for(int i=2;i<=n;i++)
        {
            dp[i]=dp[i-1]; // dont choose 
            
            for(auto it : temp[i])
            {
                dp[i]=max(dp[i],it.second+dp[it.first]);
            }
           
        }
        return dp[n];
        
    }
};