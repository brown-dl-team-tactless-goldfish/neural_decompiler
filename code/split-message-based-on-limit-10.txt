class Solution {
public:
    vector<string> splitMessage(string message, int limit) {
        // if limit is <= 5, there is no room for characters (impossible)
        if (limit <= 5) return {};
        
        int i = 0,      // parts
            sum = 0;    // space taken up by suffixes (excluding b) [e.g "<a/>" * i]
            
        while (++i) {   // loop until minimum number of parts is found, or it is deemed impossible
            string d = to_string(i); // int -> string
            sum += 3 + size(d);      // update sum
            
            // if suffix leaves no room for other characters, it is impossible to split message
            if (size(d) * 2 + 3 > limit) return {}; // e.g. limit = 7 & suffix = "<10/10>" is impossible
            // if number of parts is valid, break (guaranteed to be optimal)
            // i.e. length of parts, after removing suffixes, is >= to length of message
            if (limit*i - sum - size(d)*i >= message.size()) break;
        }
        
        vector<string> res; // result vector
        string suf = "/" + to_string(i) + ">"; // end of suffix ("/b>")
        int j = 0; // current index of message
        // we know how many parts there are, so we can just build our result
        for (int k=1; k<=i; ++k) {
            string suffix = "<" + to_string(k) + suf; // suffix
            int n = limit - size(suffix); // amount of characters before suffix
            res.push_back(message.substr(j, n) + suffix); // add to result
            j += n; // update message index
        }
        
        // done :D
        return res;
    }
};