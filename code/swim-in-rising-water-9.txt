class Solution {
public:
    int par[4][2] = {{-1,0},{0,-1},{0,1},{1,0}}; //for four direction movement
    
    pair<int,int> findMin(vector<vector<int>> &dist ,vector<vector<bool>> &check){ // find the smallest value if t and returning the index position
        int ii,jj;
        int m = INT_MAX;
        for(int i=0;i<dist.size();i++){
            for(int j=0;j<dist.size();j++){
                if(check[i][j]==false && dist[i][j]<m){
                    m=dist[i][j];
                    ii=i;
                    jj=j;
                }
            }
        }
        return {ii,jj};
        
    }
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> dist(n,vector<int>(n,INT_MAX));
        vector<vector<bool>> check(n,vector<bool>(n,false));
        dist[0][0]=grid[0][0];
        for(int i=0;i<n*n-1;i++){
            
            pair<int,int> l = findMin(dist,check);
            int r = l.first;
            int c = l.second;
            
            check[r][c]=true;
           
            for(int i=0;i<4;i++){ // checking the next smallest from that direction
                int rr = r+par[i][0];
                int cc = c+par[i][1];
                if(rr>=0 && cc>=0 && rr<n && cc<n && !check[rr][cc] && dist[r][c]!=INT_MAX && dist[r][c] + ((grid[rr][cc]-dist[r][c])<0?0:(grid[rr][cc]-grid[r][c]))<dist[rr][cc]){
                    dist[rr][cc]=dist[r][c] + ((grid[rr][cc]-dist[r][c])<0?0:(grid[rr][cc]-dist[r][c]));
                }
            }
        }
        
        return dist[n-1][n-1];
        
    }
};