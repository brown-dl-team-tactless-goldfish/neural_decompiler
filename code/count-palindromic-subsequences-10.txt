class Solution {
public:
    int mod=1e9+7;
    
    int countPalindromes(string s) {
        int n=s.length();
        vector<vector<long long> > left_double(n,vector<long long> (100)) , right_double(n , vector<long long> (100));
        vector<vector<long long> > leftCnt(n,vector< long long> (10)) , rightCnt(n,vector<long long> (10));
        
        for(int i=0;i<n;i++){
            int i_=n-i-1;
            for(int j=0;j<=9;j++){
                if(i-1>=0) leftCnt[i][j] = leftCnt[i-1][j];
                leftCnt[i][j] += ((s[i]-'0') == j);
                if(i_+1<n) rightCnt[i_][j] = rightCnt[i_+1][j];
                rightCnt[i_][j] += ((s[i_]-'0') == j);       
            }
        }
        
        for(int i=1;i<n;i++){
            int i_ = n-i-1;
            for(int j=0;j<100;j++){
                //for left double
                left_double[i][j] = left_double[i-1][j];
                int dig=j%10;
                if(dig==(s[i]-'0')) left_double[i][j]+=leftCnt[i-1][j/10];
                left_double[i][j]%=mod;
                
                //for right double
                if(i_+1<n){
                    right_double[i_][j] = right_double[i_+1][j];
                }
                dig=j/10;
                if(dig==(s[i_]-'0')){
                    if(i_+1<n) right_double[i_][j]+=rightCnt[i_+1][j%10];
                }
                right_double[i_][j]%=mod;
                
            }
        }
        
         
        
        long long ans=0;
        for(int i=1;i<n-1;i++){
            for(int j=0;j<100;j++){
                string s1;
                s1.push_back((j/10)+'0');
                s1.push_back((j%10)+'0');
                string s2=s1;
                reverse(s2.begin(),s2.end());
                
                int x = stoi(s1) , y = stoi(s2);
                ans = ( ans + left_double[i-1][x] * right_double[i+1][y])%mod;
            }
        }

        return ans;
        
    }
};