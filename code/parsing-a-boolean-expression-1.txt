class Solution {
public:
    bool parseBoolExpr(string expression) {
        stack<char> s;
        for(auto ch:expression)
        {
            char has_false = false;
            char has_true = false;
            if(ch==',')continue;
            if(ch!=')')s.push(ch);
            if(ch==')')
            {
                while(s.top()!='(')
                {
                char top = s.top();
                s.pop();
                if(top=='t')has_true = true;
                else if (top=='f')has_false = true;
                }
                s.pop();
                char op = s.top();
                s.pop();
                if(op=='&')
                {
                    if(has_false==true)s.push('f');
                    else s.push('t');
                }
                if(op=='|')
                {
                    if(has_true==true)s.push('t');
                    else s.push('f');
                }
                if(op=='!')
                {
                    if(has_true==true)s.push('f');
                    else s.push('t');
                }
            }
        }
        char result = s.top();
        if(result=='f')return false;
        else return true;
    }
};