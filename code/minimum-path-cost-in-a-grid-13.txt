class Solution {
    int dfs(int i, int j, int n, int m, vector<vector<int>> &grid, vector<vector<int>> &moveCost, vector<vector<int>> &dp) {
        if(i == n - 1) return grid[i][j];
        if(dp[i][j] != -1) return dp[i][j];

        int ans = 1e9;
        for(int k=0; k<m; k++) {
            ans = min(ans, grid[i][j] + moveCost[grid[i][j]][k] + dfs(i + 1, k, n, m, grid, moveCost, dp));
        }
        return dp[i][j] = ans;
    }
public:
    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {
        int n = grid.size(), m = grid[0].size(), ans = 1e9;
        vector<vector<int>> dp(n, vector<int>(m, -1));

        for(int r=0; r<m; r++) {
            for(int c=0; c<m; c++) {
                ans = min(ans, grid[0][r] + moveCost[grid[0][r]][c] + dfs(1, c, n, m, grid, moveCost, dp));
            }  
        }
        return ans;
    }
};