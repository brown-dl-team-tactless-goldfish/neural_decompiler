int maxHeight(vector<vector<int>>& A) {
    int n = A.size();
    for (auto &cub : A) sort(begin(cub), end(cub));
    
    vector<unordered_set<int>> g(n);  // graph
    vector<int> din(n, 0);  // indegree
    for (int i=0; i<n; ++i)
        for (int j=0; j<n; ++j)
            if (i != j &&
                A[i][0] <= A[j][0] && A[i][1] <= A[j][1] && A[i][2] <= A[j][2] &&
                !g[j].count(i))
                g[i].insert(j), ++din[j];
    
    vector<int> mxh(n);  // max heights
    generate(begin(mxh), end(mxh), [it=begin(A)]() mutable { return (*it++)[2]; });
    
    deque<int> que;  // queue for topological sort
    for (int i=0; i<n; ++i) if (din[i] == 0) que.push_back(i);
    
    while (!que.empty()) {  // topological sort
        int p = que[0]; que.pop_front();
        for (auto q : g[p]) {
            mxh[q] = max(mxh[q], mxh[p] + A[q][2]);
            --din[q];
            if (din[q] == 0) que.push_back(q);
        }
    }
    return *max_element(begin(mxh), end(mxh));
}