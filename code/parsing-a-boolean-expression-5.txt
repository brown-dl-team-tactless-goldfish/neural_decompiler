class Solution { 
public:
   bool parseBoolExpr(string expression) {
      stringstream ss(expression);
      return parse(ss);
   }

   bool parse(stringstream& ss) {
      const char c = ss.get();
      if (c == 't') return true;
      if (c == 'f') return false;
      if (c == '!') {
         assert(ss.get() == '(');
         bool val = parse(ss);
         assert(ss.get() == ')');
         return !val;
      }
      else return parseAndOr(ss, c);
   }

   bool parseAndOr(stringstream & ss, char andOr) {
      assert(ss.get() == '(');
      bool res = parse(ss);
      while (ss.get() != ')') { // ss.get() is ','
         bool val = parse(ss);
         andOr == '&' ? (res &= val) : (res |= val);
      }
      return res;
   }
};