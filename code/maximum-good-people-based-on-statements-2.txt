int isGood;
int isBad;
int res;
vector<vector<int>> statements;
int n;

class Snapshot {
    private:
    int isGoodSnapshot;
    int isBadSnapshot;
    
    public:
    Snapshot() {
        isGoodSnapshot = isGood;
        isBadSnapshot = isBad;
    }
    
    void recover() {
        isGood = isGoodSnapshot;
        isBad = isBadSnapshot;
    }
};

int ones(int n) {
    int res = 0;
    while(n > 0) {
        res += 1;
        n -= n & -n;
    }
    return res;
}

class Solution {
public:
    bool updateNeighbor(int pos) {
        for(int neighbor = 0; neighbor < n; ++neighbor) {
            if(statements[pos][neighbor] == 0) {
                if(isGood & (1 << neighbor)) {
                    return false;
                } else {
                    isBad |= 1 << neighbor;
                }
            } else if(statements[pos][neighbor] == 1) {
                if(isBad & (1 << neighbor)) {
                    return false;
                } else {
                    isGood |= 1 << neighbor;
                }
            }
        }
        
        return true;
    }
    
    void dfs(int pos) {
        if(pos == n) {
            res = max(res, ones(isGood));
        } else {
            if(isGood & (1 << pos)) {
                Snapshot snapshot;
                if(updateNeighbor(pos)) {
                    dfs(pos + 1);
                }
                snapshot.recover();
            } else if(isBad & (1 << pos)) {
                dfs(pos + 1);
            } else {
                isGood |= 1 << pos;
                Snapshot snapshot;
                if(updateNeighbor(pos)) {
                    dfs(pos + 1);
                }
                snapshot.recover();
                isGood &= ~(1 << pos);
                
                isBad |= 1 << pos;
                dfs(pos + 1);
                isBad &= ~(1 << pos);
            }
        }
    }
    
    int maximumGood(vector<vector<int>>& _statements) {
        isGood = 0;
        isBad = 0;

        res = 0;
        swap(_statements, statements);
        n = statements.size();
        
        dfs(0);
        
        return res;
    }
};