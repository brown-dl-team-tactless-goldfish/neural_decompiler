struct NestedIterator {
    int* list;
    int  cur;
    int  n;   
};

void process(int* list, int* idx, struct NestedInteger* nestedList){
    if(NestedIntegerIsInteger(nestedList)){
        list[*idx] = NestedIntegerGetInteger(nestedList);
        *idx = *idx + 1;
        return ;
    }
    struct NestedInteger ** newNestedList = NestedIntegerGetList(nestedList);
    int newnestedListSize =  NestedIntegerGetListSize(nestedList);
    for(int i = 0; i < newnestedListSize; i++){
        process(list, idx, newNestedList[i]);
    }
}

struct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {
    struct NestedIterator *  ret = (struct NestedIterator*)malloc(sizeof(struct NestedIterator));
    ret->list = malloc(50000 * sizeof(int));
    int id = 0;
    for(int i = 0; i < nestedListSize; i++){
        process(ret->list, &id, nestedList[i]);
    }
    ret->list = realloc(ret->list, id*sizeof(int));
    ret->cur = 0;
    ret->n = id;
    return ret;
}

bool nestedIterHasNext(struct NestedIterator *iter) {
    return ((iter->cur) < (iter->n));
}

int nestedIterNext(struct NestedIterator *iter) {    
    return (iter->list[iter->cur++]);
}

/** Deallocates memory previously allocated for the iterator */
void nestedIterFree(struct NestedIterator *iter) {
   free(iter->list);
   free(iter);
}