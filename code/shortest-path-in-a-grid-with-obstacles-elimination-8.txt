public int ShortestPath(int[][] grid, int k) {
    int m = grid.Length;
    int n = grid[0].Length;
    if (m == 1 && n == 1) {
        return 0;
    }
    var v = new bool[m, n, k + 1];
    v[m - 1, n - 1, k] = true;
    var q = new Queue<(int, int, int)>();
    q.Enqueue((m - 1, n - 1, k));
    for (int depth = 1; q.Count > 0; depth++) {
        for (int count = q.Count; count > 0; count--) {
            var (a, b, c) = q.Dequeue();
            var arr = new[] {
                (a + 1, b),
                (a - 1, b),
                (a, b + 1),
                (a, b - 1)
            };
            foreach (var (x, y) in arr) {
                if (x == 0 && y == 0) {
                    return depth;
                }
                if (x < 0 || x == m || y < 0 || y == n) {
                    continue;
                }
                int z = grid[x][y] == 0 ? c : c - 1;
                if (z < 0 || v[x, y, z]) {
                    continue;
                }
                v[x, y, z] = true;
                q.Enqueue((x, y, z));
            }
        }
    }
    return -1;
}