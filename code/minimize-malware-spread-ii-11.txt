class Solution {
public:
    int cnt=0;
    int vis[301];
    vector<int> adj[301];
    void dfs(int u, int x, int parent){
        if(vis[u]==1) return;
        vis[u]=1;
        for(auto v:adj[u]){
            if(v!=x && !vis[v] && v!=parent){
                dfs(v,x,u);
            }
        }
        cnt++;
    }
    static bool cmp(int a,int b){
        return a>b;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        sort(initial.begin(),initial.end(),cmp);
       // dsu ob(n);
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]){
                    adj[i].push_back(j);
                }
            }
        }
        int minans=INT_MAX,node=0;
        for(auto i:initial){
            int ans=0;
            memset(vis,0,sizeof(vis));
            for(auto j:initial){
                if(j==i) continue;
                cnt=0;
                dfs(j,i,-1);
                ans+=cnt;
            }
            if(minans>=ans){
                node=i;
                minans=ans;
            }
        }
        return node;
    }
};