void pushNextStates(int i, int current, int src, int k, int count, int n, 
	unordered_map<int, int>& depMap, queue<pair<int, int>>& queue, unordered_set<int>& seen)
{
	if (k == 0 || i > n) return; 
	pushNext(i + 1, current, src, k, count, n, depMap, queue, seen);

	if (current & 1 << i || (depMap[i] & src) != depMap[i]) return;
	pushNext(i + 1, current | 1 << i, src, k - 1, count, n,  depMap, queue, seen);

	if (seen.count(current | 1 << i)) return;
	
	queue.push({ current | 1 << i, count + 1 });
	seen.insert(current | 1 << i);   
}

int minNumberOfSemesters(int n, vector<vector<int>>& deps, int k) 
{
	unordered_map<int, int> depMap;
	for (auto dep : deps) depMap[dep[1]] |= 1 << dep[0];

	queue<pair<int, int>> queue({{0, 0}});
    unordered_set<int> seen { 0 };

	while (!queue.empty())
	{
		auto [current, count] = queue.front();
		queue.pop();

		if (current >> 1 == (1 << n) - 1) return count;
		pushNextStates(1, current, current, k, count, n, depMap, queue, seen);
	}

	return -1;
}