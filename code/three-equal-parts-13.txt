class Solution {
public:
    vector<int> threeEqualParts(vector<int>& arr) {
        int sizeOfOne = 0;
        for (auto &i : arr) {
            if (i == 1) {
                sizeOfOne++;
            }
        }
        if (sizeOfOne % 3 != 0) {
            return vector<int>{-1, -1};
        }
        if (sizeOfOne == 0) {
            return vector<int>{0, 2};
        }
        int currentSizeOfOne = 0;
        int end1 = 0;
        int end2 = 0;
        int end3 = 0;
        int prefixZero = -1;
        for (std::vector<int>::size_type i = 0; i < arr.size(); i++) {
            if (arr[i] == 1) {
                currentSizeOfOne++;
                if (prefixZero == -1) {
                    prefixZero = i;
                }
                if (currentSizeOfOne == sizeOfOne/3) {
                    end1 = i;
                }
                if (currentSizeOfOne == sizeOfOne/3*2) {
                    end2 = i;
                }
                if (currentSizeOfOne == sizeOfOne) {
                    end3 = i;
                }
            }
        }
        int suffixZero = static_cast<int>(arr.size() - 1) - end3;
        end1 += suffixZero;
        end2 += suffixZero;
        end3 += suffixZero;
        for (auto i = 0; i <= end1-prefixZero; i++) {
            if (arr[end1-i] != arr[end2-i] || arr[end1-i] != arr[end3-i]) {
                return vector<int>{-1, -1};
            }
        }
        return vector<int>{end1, end2+1};
    }
};