class MedianFinder {
  private:
    priority_queue<int,vector<int>,greater<int>>minHeap;
    priority_queue<int>maxHeap;
    int count;
public:
    MedianFinder() {
        count=0;
    }
    
    void addNum(int num) {
      count++;
      if(!maxHeap.empty()&&maxHeap.top()<num)
          minHeap.push(num);
      else
          maxHeap.push(num);
     if(count%2==0)
     {
          if(maxHeap.size()>minHeap.size())
            {
                int Top=maxHeap.top();
                maxHeap.pop();
                minHeap.push(Top);
            }
            if(minHeap.size()>maxHeap.size())
            {
                int Top=minHeap.top();
                minHeap.pop();
                maxHeap.push(Top);
            }
        
        
     }
        else
        {
            
              if(maxHeap.size()>minHeap.size()+1)
            {
                int Top=maxHeap.top();
                maxHeap.pop();
                minHeap.push(Top);
            }
            if(minHeap.size()+1>maxHeap.size())
            {
                int Top=minHeap.top();
                minHeap.pop();
                maxHeap.push(Top);
            }   
            }
        
    }
    
    double findMedian() {
       if(count%2==0)
           return (double(minHeap.top())+double(maxHeap.top()))/2.0;
        else
            return double(maxHeap.top());
    }
};

Time Complexity: O(NLogn)
Space Complexity: O(N)