class Solution {
public:
    vector<vector<int>> grid;
    vector<vector<bool>> visit;
    int w;
    int h;
    
    void dfs(int r, int c)
    {
        if(r < 0 || r >= h || c < 0 || c >= w || grid[r][c] || visit[r][c]) return;
        visit[r][c] = true;
        dfs(r-1, c);
        dfs(r+1, c);
        dfs(r, c-1);
        dfs(r, c+1);
    }
    
    int closedIsland(vector<vector<int>>& grid) {
        if(grid.size() < 2 || grid[0].size() < 2) return 0;
        w = grid[0].size();
        h = grid.size();
        this->grid = grid;
        visit.resize(h, vector<bool>(w, false));
        
        for(int i = 0; i < w; i++)
        {
            if(visit[0][i] == false && grid[0][i] == 0)
                dfs(0, i);
            if(visit[h-1][i] == false && grid[h-1][i] == 0)
                dfs(h-1, i);
        }
        
        for(int i = 0; i < h; i++)
        {
            if(visit[i][0] == false && grid[i][0] == 0)
                dfs(i, 0);
            if(visit[i][w-1] == false && grid[i][w-1] == 0)
                dfs(i, w-1);
        }
        
        int out = 0;
        for(int i = 1; i < h-1; i++)
        {
            for(int j = 1; j < w-1; j++)
            {
                if(visit[i][j] == false && grid[i][j] == 0)
                {
                    dfs(i, j);
                    out++;
                }
            }
        }
        return out;
    }
};