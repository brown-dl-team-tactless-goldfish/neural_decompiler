class Solution {
public:
    long long re = INT_MIN;
    int find(vector<vector<long long>>& nums,int i){
        if(nums[i][0]==-1) return i;
        else return nums[i][0] = find(nums,nums[i][0]);
    }
    void union_(vector<vector<long long>>& nums,int x,int y){
        int i = find(nums,x), j = find(nums,y);
        if(i!=j){
            if(i<j){ nums[j][0] = i; nums[i][1]+=nums[j][1]; re = max(re,nums[i][1]); }
            else{ nums[i][0] = j; nums[j][1]+=nums[i][1]; re = max(re,nums[j][1]); }
        }
    }
    vector<long long> maximumSegmentSum(vector<int>& arr, vector<int>& q) {
        int n = arr.size();
        vector<vector<long long>> nums(n,vector<long long>(2,-1));
        vector<long long> ans = {0};
        for(int i = n-1; i>0; --i){
            int j = q[i];
            nums[j][1] = arr[j]; 
            re = max(re,(long long)arr[j]);
            if(j+1<n && nums[j+1][1]!=-1) union_(nums,j,j+1);
            if(j-1>=0 && nums[j-1][1]!=-1) union_(nums,j,j-1);
            ans.push_back(re);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};