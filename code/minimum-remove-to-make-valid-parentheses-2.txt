#define STACK_SIZE_MAX 100000

char * minRemoveToMakeValid(char * s){
    
    /*
    What remains in the stack after iteration will be the index of the parentheses to be removed
    */
    int stack[STACK_SIZE_MAX];
    int stackSize = 0;
    
    for (int i = 0; s[i] != '\0'; i++)
    {
        if (s[i] == '(')
        {
            // printf("Pt 1: s[%d] = %c, stackSize = %d\n", i, s[i], stackSize);
            stack[stackSize++] = i;
        }
        else if (s[i] == ')')
        {
            if (stackSize == 0 || s[stack[stackSize-1]] != '(')
            {
                // printf("Pt 2: s[%d] = %c, stackSize = %d\n", i, s[i], stackSize);
                stack[stackSize++] = i;
            }
            else // stackSize != 0 && stack[stackSize-1] == '('
            {
                // printf("Pt 3: s[%d] = %c, stackSize = %d\n", i, s[i], stackSize);
                stackSize--;
            }
        }
    }
    
    char* ans = malloc(sizeof(char) * (strlen(s) - stackSize + 1));
    for (int i = 0; i < stackSize; i++)
    {
        // printf("s[%d] = %c\n", stack[i], s[stack[i]]);
        s[stack[i]] = '-';
    }
    
    int j = 0; // write pointer
    for (int i = 0; s[i] != '\0'; i++)
    {
        if (s[i] != '-')
        {
            ans[j++] = s[i];
        }
    }
    ans[j] = '\0';
    
    return ans;
}