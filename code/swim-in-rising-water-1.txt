bool findPath(int ** grid, int row, int col, int time, int, int***);
    
int swimInWater(int** grid, int gridSize, int* gridColSize){
    int max = 0x80000000;
    for (int i = 0; i < gridSize; i++){
        for (int j = 0; j < gridColSize[i]; j++){
            if (grid[i][j] > max)
                max = grid[i][j];
        }
    }
    int min = (grid[0][0] > grid[gridSize - 1][gridSize - 1])?grid[0][0]:grid[gridSize - 1][gridSize - 1];
    int ** visited = malloc(sizeof(int *) * gridSize);
    for (int i = 0; i < gridSize; i++){
        visited[i] = malloc(sizeof(int) * gridSize);
        for (int j = 0; j < gridSize; j++){
            visited[i][j] = 0;
        }
    }
    int r = 0, c = 0;
    int index = 0;
    while (min < max){
        bool result = false;
        int middle  = (min + max) / 2;
        for (int i = 0; i < gridSize; i++){
            for (int j = 0; j < gridSize; j++){
                visited[i][j] = 0;
            }
        }
        result = findPath(grid, 0, 0, middle, gridSize, &visited);
        if (result){
            max = middle;
        }
        else{
            min = middle + 1;
        }
    }
    return min;
}

bool findPath(int ** grid, int row, int col, int time, int gridSize, int *** visited){
    if (row < 0 || col < 0 || row >= gridSize || col >= gridSize)
        return false;
    if ((*visited)[row][col] == 1)
        return false;
    //printf("row = %d, col = %d\n", row, col);
    (*visited)[row][col] = 1;
    if (grid[row][col] > time)
        return false;
    if (row == gridSize - 1 && col == gridSize - 1)
        return true;
    bool result = false;
    result = findPath(grid, row - 1, col, time, gridSize, visited);
    if (result)
        return true;
    result = findPath(grid, row + 1, col, time, gridSize, visited);
    if (result)
        return true;
    result = findPath(grid, row, col - 1, time, gridSize, visited);
    if (result)
        return true;
    result = findPath(grid, row, col + 1, time, gridSize, visited);
    if (result)
        return true;
    return false;
}