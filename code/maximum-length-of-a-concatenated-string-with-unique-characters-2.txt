void backtracking(unsigned int* pRecord, int start, int end, unsigned int mask, int* pMaxLength)
{
    int i;
    for (i=start; i<end; ++i)
    {
        if ((mask&pRecord[i]) == 0)
        {
            backtracking(pRecord, i+1, end, (mask|pRecord[i]), pMaxLength);
        }
    }

    unsigned int count = 0;
    while (mask)
    {
        count += mask & 1;
        mask >>= 1;
    }
    (*pMaxLength) = ((*pMaxLength)>count)?(*pMaxLength):count;
}

int maxLength(char ** arr, int arrSize){
    int retVal = 0;

    unsigned int Record[arrSize];
    unsigned int mask;
    int i;
    for (i=0; i<arrSize; ++i)
    {
        Record[i] = 0;
        while (*arr[i])
        {
            mask = (1 << (*arr[i]-'a'));
            if ((Record[i]&mask) != 0)
            {
                Record[i] = 0;
                break;
            }
            Record[i] |= mask;

            arr[i]++;
        }
    }

    backtracking(Record, 0, arrSize, 0, &retVal);

    return retVal;
}