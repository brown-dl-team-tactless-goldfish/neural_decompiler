class Solution {
public:
   vector<int> numMovesStonesII(vector<int>& stones) {
      sort(stones.begin(), stones.end());
      return { minMove(stones), maxMove(stones) };
   }

   int maxMove(vector<int>& v) {
      const int n = v.size();
      int left = v[1] - v[0] - 1;
      int right = v[n - 1] - v[n - 2] - 1;
      int total_interval = v[n - 1] - v[0] - n + 1;
      return total_interval - min(left, right);
   }

   int minMove(vector<int>& v) {
      int l = 0, r = 1, minMove = v.size();
      while (r < v.size()) {
         int interval = v[r] - v[l] - (r - l);
         int numStoneOutsideLR = v.size() - (r - l + 1);
         if (numStoneOutsideLR >= interval) {
            if (numStoneOutsideLR == 1 && interval == 0)
               minMove = min(minMove, 2); //shit corner case
            else
               minMove = min(minMove, numStoneOutsideLR);
            r++;
         }
         else {
            l++;
         }
      }
      return minMove;
   }
};