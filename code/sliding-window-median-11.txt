    multiset<int, greater<int>> left; // sorted in increasing order
    multiset<int> right; // sorted in decreasing order
    
    void add( int num )
    {
        left.insert(num);
        right.insert(*left.begin());
        left.erase(left.begin());
        
        if( left.size() < right.size() )
        {
            left.insert(*right.begin());
            right.erase(right.begin());
        }
    }
    
    void remove( int num )
    {
        if( num <= *left.begin() ) left.erase(left.find(num));
        else                       right.erase(right.find(num));
        
        if( left.size() < right.size() )
        {
            left.insert(*right.begin());
            right.erase(right.begin());
        }
        else if( left.size()-1 > right.size() )
        {
            right.insert(*left.begin());
            left.erase(left.begin());                
        }
    }
    
    double getMedian()
    {
        return left.size() > right.size() ? *left.begin() : ((double)*left.begin() + (double)*right.begin())*0.5;
    }
    
    vector<double> medianSlidingWindow(vector<int>& nums, int k) 
    {   
        vector<double> medians;
        
        if( k == 1 ) 
        {
            std::transform(nums.begin(), nums.end(), back_inserter(medians), [](int x) { return (double)x;});
            return medians;
        }
        
        for( int i = 0; i < k; ++i )
            add(nums[i]);
                
        medians.push_back(getMedian());
        
        for( int i = k; i < nums.size(); ++i )
        {
            remove(nums[i-k]);
            add(nums[i]);
            medians.push_back(getMedian());
        }
        
        return medians;
    }