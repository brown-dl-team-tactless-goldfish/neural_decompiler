int deep(struct TreeNode*root)// how deep of binary tree
{
    if(root==NULL)
        return 0;
    int left=deep(root->left);
    int right=deep(root->right);
    return left>right?left+1:right+1;
}
void fill(struct TreeNode*root,int depth,int*counter)//count how many node in the binary tree level
{
    if(root==NULL)
        return ;
   
    counter[depth]++;
    fill(root->left,depth+1,counter);
    fill(root->right,depth+1,counter);    
}
void fill2(struct TreeNode*root,int depth,int**result,int*counter)//fill the answer in the result
{
  if(root==NULL)
      return;
  
    result[depth][counter[depth]-1]=root->val;
    counter[depth]--;
    fill2(root->right,depth+1,result,counter);
    fill2(root->left,depth+1,result,counter);
    
  
}
int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes)
{
int dp=deep(root);
int *counter=calloc(dp,sizeof(int));
fill(root,0,counter);
   int **result=malloc(sizeof(int*)*dp);
    for(int i=0;i<dp;i++)
    {
       result[i]=calloc(counter[i],sizeof(int));  
    }
  
    *returnSize=dp;
    *returnColumnSizes=malloc(sizeof(int)*dp);
    
    for(int i=0;i<dp;i++)
    {
        (*returnColumnSizes)[i]=counter[i];
        
    }
    fill2(root,0,result,counter);
return result;    
}