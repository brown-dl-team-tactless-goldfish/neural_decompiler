struct stack
{
    int size;
    int ind;
    int *arr;
};

void stack_push(struct stack *st,int num)
{
    if(st->ind < st->size){ st->arr[++st->ind] = num; }
}

int stack_pop(struct stack *st)
{
    int num;
    if(st->ind >= 0){ num = st->arr[st->ind--]; }
    return num;
}

int add_stack_contents(struct stack *st)
{
    int sum = 0;
    /* Until the stack is not empty pop the all elements,sum it up and then return it.*/
    while(st->ind>=0){ sum += stack_pop(st); }
    return sum;
}

int getLucky(char * s, int k){
    
    //Create a stack,since max value of char will be 26 i.e 2 digits we can allocate stack size of 2 * number of characters in the string.
    struct stack *st = (struct stack*)malloc(sizeof(struct stack));
    st->size = strlen(s) * 2;
    st->arr = (int*)malloc(sizeof(int) * st->size);
    st->ind = -1;
    
    int num = 0;
    int temp = 0;
        
    /*Get the integer value of each char and push in to the stack*/
    for(int i=0;i<strlen(s);i++){
        temp = s[i] - 'a' + 1;
        if(temp >= 10){
            stack_push(st,temp%10);
            stack_push(st,temp/10);
        }
        else{
            stack_push(st,temp);
        }
    }
    
    /* Transform 'k' times */
    while(k>0){
        num = add_stack_contents(st);
        k--;
        
        /* Seperate the integers and push it back into the stack*/
        temp = num;
        while(temp>=1){stack_push(st,temp%10);temp = temp/10;}
    }
    
    free(st);    /* Dont forget to free the memory :D */
    return num;
}
