class Solution {
public:
    
    int ds_find(vector<int> & ds, int ndx) {
        while (ds[ndx] >= 0) ndx = ds[ndx];
        return ndx;
    }
    
    void ds_union(vector<int> & ds, int a, int b) {
        
        a = ds_find(ds, a);
        b = ds_find(ds, b);
        
        if (a > b) swap(a,b);
        
        if (a != b) {
            ds[a] += ds[b];
            ds[b] = a;            
        }
        
    }
    
    int numTimesAllBlue(vector<int>& light) {
        
        int n = light.size();
        vector<int> ds(n, -1);
        vector<int> on(n, 0);
        int count = 0;
        
        for (int i=0; i<n; i++) {
            
            int bulb = light[i]-1;
            on[bulb] = 1;
            if (bulb && on[bulb-1]) ds_union(ds, bulb, bulb-1);
            if (bulb+1<n && on[bulb+1]) ds_union(ds, bulb, bulb+1);
            
            int root = ds_find(ds, bulb);
            int size = -ds[0];

            if (root==0 && size==i+1) count++;
        }
        
        return count;

    }
};