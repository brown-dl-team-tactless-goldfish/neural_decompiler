void check(int** copyList, int** board, int x, int y, int boardSize, int boardColSize){
    int up = y-1 >= 0 ? copyList[y-1][x]:-1;
    int down = y+1 < boardSize ? copyList[y+1][x]:-1;
    int left = x-1 >= 0 ? copyList[y][x-1]:-1;
    int right = x+1 < boardColSize ? copyList[y][x+1]:-1;
    int d1 = -1, d2 = -1, d3 = -1, d4 = -1;
    if((y-1 >= 0) && (x-1 >= 0))d1 = copyList[y-1][x-1];
    if((y-1 >= 0) && (x+1 < boardColSize))d2 = copyList[y-1][x+1];
    if(y+1 < boardSize && x-1 >= 0)d3 = copyList[y+1][x-1];
    if(y+1 < boardSize && x+1 < boardColSize)d4 = copyList[y+1][x+1];
    
    int alive = 0;
    
    if(up == 1)alive++;
    if(down == 1)alive++;
    if(left == 1)alive++;
    if(right == 1)alive++;
    if(d1 == 1)alive++;
    if(d2 == 1)alive++;
    if(d3 == 1)alive++;
    if(d4 == 1)alive++;    
       
    if(copyList[y][x] == 1 && alive < 2)board[y][x] = 0;
    else if(copyList[y][x] == 1 && (alive == 2 || alive == 3))board[y][x] = 1;
    else if(copyList[y][x] == 1 && alive > 3)board[y][x] = 0;
    else if(copyList[y][x] == 0 && alive == 3)board[y][x] = 1;
    
}

int** copy(int** board, int boardSize, int* boardColSize){
    int** new_copy = malloc(sizeof(int*)*(boardSize));
    for(int i = 0; i < boardSize; i++){
        new_copy[i] = malloc(sizeof(int)*(*boardColSize));
    }
    
    for(int i = 0; i < boardSize; i++){
        for(int j = 0; j < *boardColSize; j++){
            new_copy[i][j] = board[i][j];
        }
    }
    
    return new_copy;
}

void gameOfLife(int** board, int boardSize, int* boardColSize){
    
    int** copy_Life = copy(board, boardSize, boardColSize);
    
    for(int i = 0; i < boardSize; i++){
        for(int j = 0; j < *boardColSize; j++){
            check(copy_Life, board, j, i, boardSize, *boardColSize);
        }
    }
}