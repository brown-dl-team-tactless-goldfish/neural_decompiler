class Solution {
public:
    bool isValid(int r, int c, int R, int C) {
        return r >= 0 && r < R && c >= 0 && c < C;
    }
    
    using pii = pair<int, pair<int, int>>; // {weight, coordinate}
    vector<pair<int, int>> dirs = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
    
    int minimumEffortPath(vector<vector<int>>& heights) {
        priority_queue<pii, vector<pii>, greater<pii>> pq;
        pq.push({0, {0, 0}});
        int R = heights.size(); if (R == 0) return 0; int C = heights[0].size();
        vector<vector<int>> dist(R, vector<int> (C, INT_MAX));
        dist[0][0] = 0;
        while (!pq.empty()) {
            auto [w, node] = pq.top(); pq.pop();
            auto [r, c] = node;
            for (auto &dir: dirs) {
                int r1 = r + dir.first, c1 = c + dir.second;
                if (isValid(r1, c1, R, C)) {
                    if (dist[r1][c1] > max(w, abs(heights[r][c] - heights[r1][c1]))) {
                        dist[r1][c1] = max(w, abs(heights[r][c] - heights[r1][c1]));
                        pq.push({dist[r1][c1], {r1, c1}});
                    }
                }
            }
        }
        return dist[R - 1][C - 1];
    }
    
};