typedef struct node {
    int val;
    int count;
    UT_hash_handle hh;
} Node;

int cmp(int *a, int *b)
{
    return *a - *b;
}

int findLeastNumOfUniqueInts(int* arr, int arrSize, int k){
    Node *ht = NULL;
    
    for (int i=0; i<arrSize; i++) {
        int val = arr[i];
        Node *tmp = NULL;
        HASH_FIND_INT(ht, &val, tmp);
        if (tmp) {
            tmp->count++;
        } else {
            tmp = (Node *)malloc(sizeof(Node));
            tmp->val = val;
            tmp->count = 1;
            HASH_ADD_INT(ht, val, tmp);
        }
    }
    
    Node *tmp = NULL, *iter = NULL;
    int a[1000001];
    memset(a, 0, sizeof(a));
    int count = 0;
    HASH_ITER(hh, ht, iter, tmp) {
        count++;
        a[count-1] = iter->count;
        HASH_DEL(ht, iter);
        free(iter);
    }
    
    qsort(a, count, sizeof(int), cmp);
    int retval = 0;
    for (int i=0; i<count; i++){
        if (a[i] <= k) {
            k -= a[i];
            a[i] = 0;
        } else {
            a[i] -= k;
            k = 0;
            retval++;
        }
    }
    
    return retval;
    
}