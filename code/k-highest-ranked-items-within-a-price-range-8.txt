class Solution {
public:
    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k) {
        priority_queue<pair<int,pair<int,pair<int, int>>>, vector<pair<int,pair<int,pair<int, int>>>>, greater<pair<int,pair<int,pair<int, int>>>>> pq;
        int dirx[4] = {-1,1,0,0};
        int diry[4] = {0,0,-1,1};
        queue<pair<int,pair<int,int>>> q;
        vector<vector<int>> ans;
        q.push({grid[start[0]][start[1]],{start[0],start[1]}});
        grid[start[0]][start[1]] = 0;
        int pl = pricing[0], ph = pricing[1];
        int n = grid.size(), m = grid[0].size();
        int dist = 0;
        while(!q.empty())
        {
            dist++;
            int sz = q.size();
            while(sz--)
            {
                pair<int,pair<int, int>> xy = q.front();
                q.pop();
                int val = xy.first;
                int x = xy.second.first;
                int y = xy.second.second;
                if(pl <= val && val <= ph)
                {
                    pq.push({dist,{val,{x,y}}});
                }
                for(int i = 0; i < 4; i++)
                {
                    int nxtx = x + dirx[i];
                    int nxty = y + diry[i];
                    if(nxtx < 0 || nxtx >= n || nxty < 0 || nxty >= m) continue;
                    if(grid[nxtx][nxty] == 0) continue;
                    q.push({grid[nxtx][nxty],{nxtx,nxty}});
                    grid[nxtx][nxty] = 0;
                }
            }   
        }
        while(!pq.empty() && k--)
        {
            pair<int,pair<int,pair<int, int>>> tp = pq.top();
            pq.pop();
            ans.push_back({tp.second.second.first, tp.second.second.second});
        }
        return ans;
    }
};