class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<List<String>>();
        List<String> partStrings = new ArrayList<String>();
        findPartition(0, s, partStrings, ans);
        return ans;
    }

    static void findPartition(int idx, String s, List<String> partStrings, List<List<String>> ans) {
		if(idx == s.length()) {
			ans.add(new ArrayList<>(partStrings));
			return;
		}
		for (int i = idx; i < s.length(); i++) {
			if(isPali(s, idx, i)) {
				partStrings.add(s.substring(idx, i + 1));
				findPartition(i + 1, s, partStrings, ans);
				partStrings.remove(partStrings.size() - 1);
			}
		}
	}

	private static boolean isPali(String s, int start, int end) {
		while(start <= end) {
			if(s.charAt(start++) != s.charAt(end--)) {
				return false;
			}
		}
		return true;
	}
}