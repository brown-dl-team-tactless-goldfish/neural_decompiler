class Node{
public:
    int x, y;
    Node(int x, int y){
        this->x = x;
        this->y = y;
    }
};

class Solution {
public:
    
    bool isPossible(int x, int y, int rows, int cols){
        if(x < 0 or x >= rows or y < 0 or y >= cols) return 0;
        return 1;
    }
    
    void bfs(queue<Node> &bfsQ, vector<vector<int>> &time, vector<vector<int>>& grid){
        int rows = grid.size(), cols = grid[0].size();
        int level = 0;
        int dir[4][2] = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        while(!bfsQ.empty()){
            int qSize = bfsQ.size();
            while(qSize--){
                Node curr = bfsQ.front();
                bfsQ.pop();
                int x = curr.x, y = curr.y;
                if(time[x][y] == -1){
                    time[x][y] = level;
                }
                for(int k = 0; k < 4; k++){
                    int nx = x + dir[k][0];
                    int ny = y + dir[k][1];
                    if(isPossible(nx, ny, rows, cols) and grid[nx][ny] == 0 and time[nx][ny] == -1){
                        bfsQ.push(Node(nx, ny));
                    }
                }
            }
            level++;
        }
    }
    
    int maximumMinutes(vector<vector<int>>& grid) {
        int rows = grid.size(), cols = grid[0].size();
        queue<Node> bfsQ;
        bfsQ.push(Node(0,0));
        vector<vector<int>> timePerson(rows, vector<int>(cols, -1));
        bfs(bfsQ, timePerson, grid);
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(grid[i][j] == 1) bfsQ.push(Node(i, j));
            }
        }
        vector<vector<int>> timeFire(rows, vector<int>(cols, -1));
        bfs(bfsQ, timeFire, grid);
        int timeForPersonToReach = timePerson[rows - 1][cols - 1];
        int timeForFireToReach = timeFire[rows - 1][cols - 1];
        if(timeForPersonToReach == -1) return -1; 
        if(timeForFireToReach == -1) return 1e9;
        if(timeForPersonToReach > timeForFireToReach) return -1;
        int differenceInArrival = timeForFireToReach - timeForPersonToReach;
        int diffFromLeft =  timeFire[rows - 1][cols - 2] - timePerson[rows - 1][cols - 2];
        int diffFromRight = timeFire[rows - 2][cols - 1] - timePerson[rows - 2][cols - 1];
        if(timePerson[rows - 1][cols - 2] != -1 and timePerson[rows - 2][cols - 1] != -1 and diffFromLeft > differenceInArrival or diffFromRight > differenceInArrival){
            return differenceInArrival;
        }
        return differenceInArrival - 1;
    }
};