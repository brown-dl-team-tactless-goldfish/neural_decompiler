
int cmp(char** a, char** b) {
    char* pa = *a;
    char* pb = *b;
    
    while (*pa && *pb) {
        if (*pa < *pb) return 1;
        if (*pa > *pb) return -1;
        ++pa;
        ++pb;
    }
    
    if (*pa == *pb) return 0;
    
    if (*pa == NULL) pa = *b;
    else             pb = *a;
    
    while (*pa && *pb) {
        if (*pa < *pb) return 1;
        if (*pa > *pb) return -1;
        ++pa;
        ++pb;
    }
    
    if (*pa == NULL) pa = *b;
    else             pb = *a;
    
    while (*pa && *pb) {
        if (*pa < *pb) return 1;
        if (*pa > *pb) return -1;
        ++pa;
        ++pb;
    }
    
    return 0;
}

char * largestNumber(int* nums, int numsSize){
    char** tmps = malloc(numsSize * sizeof(char*));
    
    int len = 0;
    for (int i = 0; i < numsSize; ++i) {
        char tmp[256];
        int  l = sprintf(tmp, "%d", nums[i]);
        
        tmps[i] = malloc((l + 1) * sizeof(char));
        memcpy(tmps[i], tmp, (l + 1) * sizeof(char));
        
        len += l;
    }
        
    qsort(tmps, numsSize, sizeof(char*), cmp);
    
    char* ans = malloc((len + 1) * sizeof(char));
    for (int i = 0, j = 0; i < numsSize; ++i)
        j += sprintf(ans + j, "%s", tmps[i]);

    if (ans[0] == '0') ans[1] = NULL;
    
    for (int i = 0; i < numsSize; ++i)
        free(tmps[i]);    
    free(tmps);
    
    return ans;
}