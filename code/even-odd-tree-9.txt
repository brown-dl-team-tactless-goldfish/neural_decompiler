class Solution {
public:
    
    bool helper(TreeNode* root,int level, vector<vector<int>> &res)
    {
        if(!root)
        {
            return true;
        }
        
        if(level == res.size())
        {
            res.push_back(vector<int>());
        }
        
        // even level
        if(level % 2 == 0)
        {
            // if you divide odd number by 2, you will have have some left over otherwise its false
            if(root->val % 2 == 0)//
            {
                return false;
            }
            
            if(!res[level].empty() and res[level].back() >= root->val)
            {
                return false;
            }
        }
        else//odd
        {
            // if you divide even number by 2, you will never have some left over otherwise its false
            if(root->val % 2 != 0)
            {
                return false;
            }
            
            if(!res[level].empty() and res[level].back() <= root->val)
            {
                return false;
            }
        }
        
        res[level].push_back(root->val);
        
        return helper(root->left,level+1, res) and helper(root->right,level+1, res);
    }
    bool isEvenOddTree(TreeNode* root) {
        vector<vector<int>> res;
        return helper(root, 0, res);
    }
};