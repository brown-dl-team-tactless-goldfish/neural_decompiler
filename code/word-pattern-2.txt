bool exist(char *h[26], char * w) {
    for (int i=0;i<26;i++) {
        if (h[i])
            if (strcmp(w, h[i]) == 0) return true;
    }
    return false;
}

bool wordPattern(char * pattern, char * s){
    char *h[26] = {};
    int j = 0;
    int je = 0;
    int i = 0;
    int sl = strlen(s);
    int pl = strlen(pattern);
    for (i=0;pattern[i]!='\0' && je < sl;i++) {
        int k = pattern[i] - 'a';
        while (s[je] != ' ' && s[je] != '\0') {
            //printf("s[je]: %c\n", s[je]);
            je++;
            //printf("je: %d\n", je);
        }
        s[je]='\0';
        if (h[k]) {
            //printf("h[k]: %s, s+j: %s\n", h[k], s+j);
            if (strcmp(h[k], s+j) != 0) return false;
        } else {
            // h[k] is NULL but s+j has already inserted into hash table
            if (exist(h, s+j)) return false;
            h[k] = s+j;
        }
        j = ++je;
    }
    //printf("je=%d, i=%d, sl=%d, pl=%d\n", je, i,sl, pl);
    return (je-1 != sl || i != pl) ? false: true;
}