typedef struct {
    // User defined data may be declared here.
    pthread_cond_t  cond;
    pthread_mutex_t lock;
    int count;
} Foo;

Foo* fooCreate() {
    Foo* obj = (Foo*) malloc(sizeof(Foo));
    pthread_mutex_init(&obj->lock,NULL);
    pthread_cond_init(&obj->cond,NULL);
    obj->count = 0;
    return obj;
}

void first(Foo* obj) {
    pthread_mutex_lock(&obj->lock);
    // printFirst() outputs "first". Do not change or remove this line.
    printFirst();
    obj->count++;
    pthread_cond_broadcast(&obj->cond);
    pthread_mutex_unlock(&obj->lock);
}

void second(Foo* obj) {
    
    // printSecond() outputs "second". Do not change or remove this line.
    pthread_mutex_lock(&obj->lock);
    while(obj->count < 1) pthread_cond_wait(&obj->cond, &obj->lock);
    printSecond();
    obj->count++;
    pthread_cond_broadcast(&obj->cond);
    pthread_mutex_unlock(&obj->lock);
}

void third(Foo* obj) {
    
    // printThird() outputs "third". Do not change or remove this line.
    pthread_mutex_lock(&obj->lock);
    while(obj->count < 2) pthread_cond_wait(&obj->cond, &obj->lock);
    printThird();
    pthread_cond_broadcast(&obj->cond);
    pthread_mutex_unlock(&obj->lock);
}

void fooFree(Foo* obj) {
    // User defined data may be cleaned up here.
    pthread_mutex_destroy(&obj->lock);
    pthread_cond_destroy(&obj->cond);
    free(obj);

}