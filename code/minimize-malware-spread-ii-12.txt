class Solution {
public:
    // Using DFS
    void dfs(vector<vector<int>>& graph, set<int> &infected, int curr_node, int removed_node){
	    // to store the infected nodes after a node is removed
        if(!infected.count(curr_node) && curr_node != removed_node){
            infected.insert(curr_node);
            for(int j = 0; j < graph[curr_node].size(); j++){
                if(graph[curr_node][j] == 1)
                    dfs(graph, infected, j, removed_node);
            }
        }      
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        if(initial.size() == 1)
            return initial[0];
        
        int min_size = INT_MAX;
        int min_idx = 0;
        
        for(int i = 0; i < initial.size(); i++){
            set<int> infected; // stores all the infected nodes after the removal of the node
            for(int j = 0; j < initial.size(); j++){
                if(i != j){
                    // simulating that we are removing the node at initial[i]
                    // example:
                    // if initial = {2, 4, 6}
                    // then when we are at 2 dfs is called for 4 and 6
                    // when we are at 4 dfs is called for 2 and 6.
                    dfs(graph, infected, initial[j], initial[i]);
                }
            }
            
            // now check if the infected nodes size after the removal is less than the previously seen min size
            if(infected.size() < min_size){
                min_size = infected.size();
                min_idx = initial[i];
            }
            else if(infected.size() == min_size){
                // if the infected nodes size after the removal is equal to the previously seen min size
                min_idx = min(initial[i], min_idx);
            }  
        }
        return min_idx;
    }
};