typedef struct {
    int* a;
    int size;
} RangeFreqQuery;

int cmp(const void *a, const void *b){ return (*(int*)a - *(int*)b); }
RangeFreqQuery* rangeFreqQueryCreate(int* arr, int arrSize) {
    RangeFreqQuery* obj = (RangeFreqQuery*)calloc(1, sizeof(RangeFreqQuery));
    obj->size = arrSize + 1;    
    obj->a = (int*)calloc(obj->size, sizeof(int));
    for(int i = 0; i < arrSize; i++)
        obj->a[i] = arr[i] << 17 | i;
    obj->a[arrSize] = 10001 << 17;/* add a max value for the next element */
    qsort(obj->a, obj->size-1, sizeof(int), cmp);
     
    return obj;
}

int bSearch1(int* a, int size, int target){
    int l = 0, r = size - 1, m;
    while(l < r){
        m = l + ((r - l)>>1);
        if(a[m] < target)
            l = m + 1;
        else
            r = m;
    }
    return l;
}
int bSearch2(int* a, int size, int target){
    int l = 0, r = size - 1, m;
    while(l < r){
        m = l + ((r - l)>>1);
        if(a[m] <= target)
            l = m + 1;
        else
            r = m;
    }
    return l;
}
int rangeFreqQueryQuery(RangeFreqQuery* obj, int left, int right, int value) {
    int l = bSearch1(obj->a, obj->size, value << 17 | left);/* find the first element >= target */
    int r = bSearch2(obj->a, obj->size, value << 17 | right);/* find the first element > target */
    return r-l;
}

void rangeFreqQueryFree(RangeFreqQuery* obj) {
    free(obj->a);
    free(obj);
}