class Solution:
    def largestTimeFromDigits(self, A: List[int]) -> str:
        print("A = ", A)

        res = ""
        self.hh, self.mm = float('-inf'), float('-inf')

        def helper(remainDigits, curSet):
            if (len(curSet) == 4):
                # print("might be one, curSet = ", curSet)

                if (curSet[0] * 10 + curSet[1]) > 23:
                    return

                if (curSet[2]*10 + curSet[3]) > 59:
                    return

                tmpHH = curSet[0] * 10 + curSet[1]
                tmpMM = curSet[2] * 10 + curSet[3]

                if (tmpHH*60 + tmpMM > self.hh*60 + self.mm):
                    self.hh = tmpHH
                    self.mm = tmpMM

                return

            n = len(remainDigits)
            for i in range(n):
                helper(remainDigits[:i]+remainDigits[i+1:],
                       curSet+[remainDigits[i]])

        helper(A, [])
        # print("end self.hh = ", self.hh, " self.mm = ", self.mm)

        if (self.hh == float('-inf') or self.mm == float('-inf')):
            return ""
        return str(self.hh).zfill(2) + ":"+str(self.mm).zfill(2)