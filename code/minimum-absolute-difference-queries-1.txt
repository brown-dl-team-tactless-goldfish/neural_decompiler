#define LEFT(x) 2*x+1
#define RIGHT(x) 2*x+2

class Solution {
    
    int val_;
    
    void constructTree(int left, int right, bool tree[][102], int segId, vector<int> &nums){
        assert(segId<=val_);
        int mid = left + (right-left)/2;
        
        if(left==right){
            tree[segId][nums[left]]=1;
            return;
        }
        
        constructTree(left,mid,tree,LEFT(segId),nums);
        constructTree(mid+1,right,tree,RIGHT(segId),nums);
        
        for(int i=0;i<101;i++){
            tree[segId][i]=max((int)tree[segId][i],(int)tree[LEFT(segId)][i]);
            tree[segId][i]=max((int)tree[segId][i],(int)tree[RIGHT(segId)][i]);
        }
        
    }
    
    int arr[102];
    
    void queryTree(int left, int right, int qLeft, int qRight, int segId, bool tree[][102], vector<int> &nums){
        assert(segId<=val_);
        int mid = left + (right-left)/2;
        if(qRight<left || right<qLeft)
            return;
        if(qLeft<=left && right<=qRight){
            for(int i=0;i<101;i++){
                arr[i]=max(arr[i],(int)tree[segId][i]);
            }
            return;
        }
        queryTree(left,mid,qLeft,qRight,LEFT(segId),tree,nums);
        queryTree(mid+1,right,qLeft,qRight,RIGHT(segId),tree,nums);
    }
    
    int process(){
        int i=0;
        int ans = INT_MAX;
        for(i=0;i<101;){
            if(arr[i]==0)
                i++;
            else{
                int j = i+1;
                while(j<101 && arr[j]==0){
                    j++;
                }
                if(j==101){
                    break;
                }
                else{
                    ans=min(ans,j-i);
                    i=j;
                }
            }
        }
        if(ans==INT_MAX)
            return -1;
        return ans;
    }
    
public:
    
    vector<int> minDifference(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int c = 1;
        while(n>=c){
            c*=2;
        }
        int toAdd = c - n;
        int val = nums.back();
        while(toAdd--){
            nums.push_back(val);
        }
        n=nums.size();
        bool tree[2*n+2][102];
        
        val_ = 2*n+2;
        
        memset(tree,0,sizeof(tree));
        constructTree(0,n-1,tree,0,nums);
        
        vector<int> ans(queries.size());
        for(int i=0;i<queries.size();i++){
            // cout<<"HRE"<<endl;
            memset(arr,0,sizeof(arr));
            queryTree(0,n-1,queries[i][0],queries[i][1],0,tree,nums);
            ans[i]=process();
        }
        return ans;
        
    }
    
};





