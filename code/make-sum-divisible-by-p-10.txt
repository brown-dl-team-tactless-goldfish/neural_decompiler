public int MinSubarray(int[] nums, int p)
{        
	int sum = 0;
	for(int i = 0; i < nums.Length; i++)
	{
		sum = (sum + nums[i]) % p;
	}     

	if(sum % p == 0)
	{
		return 0;
	}

	Dictionary<int, int> remaindersIndex = new Dictionary<int, int>()
	{
		[0] = -1
	};

	int result = nums.Length;
	int currentSum = 0;
	for(int i = 0; i < nums.Length; i++)
	{
		currentSum = (currentSum + nums[i]) % p;
		int required = (currentSum - sum + p) % p;

		if(remaindersIndex.ContainsKey(required))
		{
			int length = i - remaindersIndex[required];
			result = Math.Min(result, length);
		}

		remaindersIndex[currentSum] = i;
	}

	return result < nums.Length ? result : -1;        
}
