int DFS(int** grid, int rlen, int clen, int r, int c){
    /* boundary check */
    if(r >= rlen) 
        return c;
    else if(c >= clen || c < 0) 
        return -1;

    /* pass throught */
    if((c+1 < clen) && grid[r][c] == 1 && grid[r][c+1] == 1)
        return DFS(grid, rlen, clen, r+1, c+1);
    else if(c >= 1 && grid[r][c] == -1 && grid[r][c-1] == -1)
        return DFS(grid, rlen, clen, r+1, c-1);
    return -1;
}

int* findBall(int** grid, int gridSize, int* gridColSize, int* returnSize){
    int* ans = (int*)calloc(*gridColSize, sizeof(int));
    for(int i = 0; i < *gridColSize; i++){
        ans[i] = DFS(grid, gridSize, *gridColSize, 0, i);
    }
    *returnSize = *gridColSize;
    return ans;
}