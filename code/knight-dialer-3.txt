public class Solution
    {
        private const int MODULO = 1000000007;
        private const int ROWS = 4;
        private const int COLUMNS = 3;
        private static readonly (int, int) _stub1 = (ROWS - 1, 0);
        private static readonly (int, int) _stub2 = (ROWS - 1, COLUMNS - 1);

        private static (int, int)[] _steps =
            {(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1)};

        public int KnightDialer(int n)
        {
            checked
            {
                int[,,] dp = new int[n, ROWS, COLUMNS];

                for (int i = 0; i < n; i++)
                {
                    for (int r = 0; r < ROWS; r++)
                    {
                        for (int c = 0; c < COLUMNS; c++)
                        {
                            if ((r == _stub1.Item1 && c == _stub1.Item2) || (r == _stub2.Item1 && c == _stub2.Item2))
                            {
                                dp[i, r, c] = 0;
                                continue;
                            }

                            if (i == 0)
                            {
                                dp[i, r, c] = 1;
                                continue;
                            }

                            foreach (var step in _steps)
                            {
                                int nextRow = r + step.Item1;
                                int nextCol = c + step.Item2;

                                if (nextRow >= 0 && nextRow < ROWS && nextCol >= 0 && nextCol < COLUMNS)
                                {
                                    dp[i, r, c] += dp[i - 1, nextRow, nextCol];
                                    dp[i, r, c] = dp[i, r, c] % MODULO;
                                }
                            }
                        }
                    }
                }

                int res = 0;
                for (int r = 0; r < ROWS; r++)
                {
                    for (int c = 0; c < COLUMNS; c++)
                    {
                        res += dp[n - 1, r, c];
                        res = res % MODULO;
                    }
                }

                return res;
            }
        }
    }