static int count=0;

void dfs(int u, int* visited, int* disc, int* low, int* parent, int** connections, int connectionsSize, int**ret){
    static int time=0;  
    visited[u]++;
    
    disc[u] = low[u] = ++time;
    int i,v;
    for(i=0;i<connectionsSize;i++){
        if(connections[i][0]==u)
            v = connections[i][1];
        else if(connections[i][1]==u)
            v = connections[i][0];
        else
            continue;
        if(!visited[v]){
            parent[v] = u;
            dfs(v,visited,disc,low,parent,connections,connectionsSize,ret);
            
            low[u] = low[u]<low[v]? low[u]: low[v];
            
            if(low[v]>disc[u]){
                //
                count++;
                ret = (int** ) realloc(ret,sizeof(int*)*count);
                ret[count-1] = malloc(sizeof(int)*2);
                ret[count-1][0] = u;
                ret[count-1][1] = v;
            }
        }
        else if(v != parent[u])
            low[u] = low[u]<disc[v]? low[u]: disc[v];
    }
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** criticalConnections(int n, int** connections, int connectionsSize, int* connectionsColSize, int* returnSize, int** returnColumnSizes){
    int** ret = (int**) malloc(sizeof(int*));
    int ns = connectionsSize;
    int visited[ns];
    int disc[ns];
    int low[ns];
    int parent[ns];
    
    memset(visited,0,ns*sizeof(visited[0]));
    memset(parent,0,ns*sizeof(parent[0]));
    
    int i;
    for(i=0;i<ns;i++){
        if(!visited[i])
            dfs(i,visited,disc,low,parent,connections,connectionsSize,ret);
    }
    //printf("%d\n",count);
    *returnSize = count;
    //returnColumnSizes = (int**)malloc(sizeof(int*));
    *returnColumnSizes = (int*)malloc(sizeof(int));
    for(i=0;i<count;i++)
        (*returnColumnSizes)[i] = 2;
    return ret;
}
