class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        visited.resize(n);
        for(int i=0;i<n;i++){
            if(visited[i]) continue;
            roots.insert(i);
            if(!dfs(i, i, leftChild, rightChild)) return false;
        }
        return roots.size() == 1;
    }
    
    bool dfs(int i, int root, vector<int>& leftChild, vector<int>& rightChild){
        if(i==-1) return true;
        if(i!=root && roots.count(i)){
            roots.erase(i);
            return true;
        }
        if(visited[i]) return false;
        visited[i] = true;
        return dfs(leftChild[i], root, leftChild, rightChild) && 
            dfs(rightChild[i], root, leftChild, rightChild);
    }
        
    vector<bool> visited;
    unordered_set<int> roots;
};