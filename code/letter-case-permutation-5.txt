#include <stdlib.h>
#include <string.h>
#include <math.h>

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** letterCasePermutation(char * s, int* returnSize){
    int idxList[12], numChars = 0, idx = 0, strLen = 0, bit, powVal;
    char **pResult;
    
    for (strLen = 0; s[strLen] != '\0'; strLen++) {
        if ((s[strLen] >= 'A') && (s[strLen] <= 'Z')) {
            s[strLen] += 'a' - 'A';
            idxList[numChars] = strLen;
            numChars++;
        }
        else if ((s[strLen] >= 'a') && (s[strLen] <= 'z')) {
            idxList[numChars] = strLen;
            numChars++;
        }
    }
    powVal = pow(2, numChars);
    
    pResult = malloc(powVal * sizeof(char *));
    
    for (idx = 0; idx < powVal; idx++) {
        pResult[idx] = malloc(strLen + 1);
        strcpy(pResult[idx], s);
        for (bit = 0; bit < numChars; bit++) {
            if (idx & (1 << bit)) {
                pResult[idx][idxList[bit]] = pResult[idx][idxList[bit]] - 'a' + 'A';
            }
        }
    }
    *returnSize = powVal;
    
    return pResult;
}