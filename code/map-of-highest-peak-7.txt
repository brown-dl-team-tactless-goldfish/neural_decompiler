class Solution {
public:
    using VI = vector<int>;
    using VVI = vector<VI>;
    using Pair = pair<int, int>;
    using Pairs = vector<Pair>;
    using Queue = queue<Pair>;
    using Seen = unordered_map<int, unordered_map<int, bool>>;
    VVI highestPeak(VVI& A, Queue q = {}, Seen seen = {}) {
        auto M = A.size(),
             N = A[0].size();
        for (auto i{ 0 }; i < M; ++i)
            for (auto j{ 0 }; j < N; ++j)
                if (A[i][j])
                    A[i][j] = 0, q.push({ i, j }), seen[i][j] = true;
        auto depth = 0;
        while (q.size()) {
            int k = q.size();
            while (k--) {
                auto [i, j] = q.front(); q.pop();
                A[i][j] = depth;
                for (auto [u, v]: Pairs{{ i - 1, j}, { i, j + 1 }, { i + 1, j }, { i, j - 1 }}) { // clockwise directions: up, right, down, left
                    if (u < 0 || v < 0 || u == M || v == N || seen[u][v])
                        continue;
                    q.push({ u, v }), seen[u][v] = true;
                }
            }
            ++depth;
        }
        return A;
    }
};