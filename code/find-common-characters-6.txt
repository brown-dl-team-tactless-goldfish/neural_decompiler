/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int letter(char **A, int s, char l){
    bool vec[s-1];
    int k = 0;

    for (int u=0; u<s-1; u++){
        vec[u] = false;
    }
    //scan all the words from array pos 1
    for (int i=1; i<s; i++){
        k = 0;
        while (k < strlen(A[i]) && vec[i-1] == false){
            if (A[i][k] == l){
                vec[i-1] = true;
                A[i][k] = '.';
            }
            k++;
        }
        //break because if the letter is not present in the string in pos i we can stop to scan because it is not a winner
        if (vec[i-1] == false)
            break;
    }
    for (int j=0; j<s-1; j++){
        if (vec[j] == false)
            return 0;
    }
    return 1;
}
char ** commonChars(char ** A, int ASize, int* returnSize){
    int i = 0, k = 0, totalChars = 0, counter = 0, value;
    
    if (ASize == 1){
        char **rr = (char **)malloc(strlen(A[0])*sizeof(char *));
        for (int t=0; t<strlen(A[0]); t++){
            rr[t] = (char *)malloc(2*sizeof(char));
        }
        for (int t=0; t<strlen(A[0]); t++){
            rr[t][0] = A[0][t];
            rr[t][1] = '\0';
        }
        *returnSize = strlen(A[0]);
        return rr;
    }

    //find the total of chars
    for (int i=0; i<ASize; i++){
        totalChars += strlen(A[i]);
    }

    //support array to save the winne chars
    char total[totalChars];
    for (int i=0; i<totalChars; i++)
        total[i] = '.';
    
   //I check only the first world because all the strings in the array must contain the first word's letetrs
    int size = strlen(A[0]);
    char word[size+1];
    strcpy(word, A[0]);
    
    //scan the first word's letters
    for (int i=0; i<size; i++){
        value = letter(A, ASize, word[i]);
        counter += value;
        if (value == 1){
            total[k] = word[i];
            k++;
        }
    }
    
    //now counter has the sum of the right chars so allocate a char array of size counter and 1 column size
    char **r = (char **)malloc(counter*sizeof(char*));
    
    for (int i=0; i<counter; i++){
        r[i] = (char *)malloc(2*sizeof(char));
    }
    
    for (int i=0; i<counter; i++){
        r[i][0] = total[i];
        r[i][1] = '\0';
    }
    
    *returnSize = counter;
    return r;
}