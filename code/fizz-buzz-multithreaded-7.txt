#include <pthread.h>
typedef struct {
    int nsize;
    int cur;
    pthread_mutex_t lock;
    pthread_cond_t cond;
} FizzBuzz;

FizzBuzz* fizzBuzzCreate(int n) {
    FizzBuzz* obj=malloc(sizeof(FizzBuzz));
    obj->nsize=n;
    obj->cur=1;
    pthread_mutex_init(&obj->lock, NULL);
    pthread_cond_init(&obj->cond, NULL);
    return obj;
}

// printFizz() outputs "fizz".
void fizz(FizzBuzz* obj) {
    while(1){
        pthread_mutex_lock(&obj->lock);
        if(obj->cur > obj->nsize){                
                pthread_mutex_unlock(&obj->lock);
                return;
        }
        if(obj->cur%3==0 && obj->cur%5!=0){
            printFizz();
            obj->cur++;
            pthread_cond_broadcast(&obj->cond);
        }else{
            pthread_cond_wait(&obj->cond, &obj->lock);
        }
        pthread_mutex_unlock(&obj->lock);            
    }
}

// printBuzz() outputs "buzz".
void buzz(FizzBuzz* obj) {
    while(1){
        pthread_mutex_lock(&obj->lock);
        if(obj->cur > obj->nsize){                
                pthread_mutex_unlock(&obj->lock);
                return;
        }  
        if(obj->cur%3!=0 && obj->cur%5==0){
            printBuzz();
            obj->cur++;
            pthread_cond_broadcast(&obj->cond);
        }else{
            pthread_cond_wait(&obj->cond, &obj->lock);
        }
        pthread_mutex_unlock(&obj->lock);            
    }
}

// printFizzBuzz() outputs "fizzbuzz".
void fizzbuzz(FizzBuzz* obj) {
      while(1){
        pthread_mutex_lock(&obj->lock);   
        if(obj->cur > obj->nsize){
                pthread_mutex_unlock(&obj->lock);
                return;
        }
        if(obj->cur%3==0 && obj->cur%5==0){
            printFizzBuzz();
            obj->cur++;
            pthread_cond_broadcast(&obj->cond);
        }else{
            pthread_cond_wait(&obj->cond, &obj->lock);
        }
        pthread_mutex_unlock(&obj->lock);            
    }
}

// You may call global function `void printNumber(int x)`
// to output "x", where x is an integer.
void number(FizzBuzz* obj) {
     while(1){
        pthread_mutex_lock(&obj->lock);
        if(obj->cur > obj->nsize){                
            pthread_mutex_unlock(&obj->lock);
            return;
        } 
        if(obj->cur%3!=0 && obj->cur%5!=0){
            printNumber(obj->cur);
            obj->cur++;
            pthread_cond_broadcast(&obj->cond);
        }else{
            pthread_cond_wait(&obj->cond, &obj->lock);
        }
        pthread_mutex_unlock(&obj->lock);            
    }  
}

void fizzBuzzFree(FizzBuzz* obj) {
    pthread_mutex_destroy(&obj->lock);
    pthread_cond_destroy(&obj->cond);
    free(obj);
}