void MAN(int** grid, int x, int y, int human_step, int i, int j, int* human, int* hx, int* hy){
    if (i+1 <= x && grid[i+1][j] == 0){
        grid[i+1][j] = human_step;
        hx[*human] = i+1;
        hy[*human] = j;
        *human += 1;
    }
    if (i-1 >= 0 && grid[i-1][j] == 0){
        grid[i-1][j] = human_step;
        hx[*human] = i-1;
        hy[*human] = j;
        *human += 1;
    }
    if (j+1 <= y && grid[i][j+1] == 0){
        grid[i][j+1] = human_step;
        hx[*human] = i;
        hy[*human] = j+1;
        *human += 1;
    }
    if (j-1 >= 0 && grid[i][j-1] == 0){
        grid[i][j-1] = human_step;
        hx[*human] = i;
        hy[*human] = j-1;
        *human += 1;
    }
}

void FIRE(int** grid, int x, int y, int fire_stap, int i, int j, int* fire, int* fx, int* fy){
    if (i+1 <= x && grid[i+1][j] <= 0){
        grid[i+1][j] = fire_stap;
        fx[*fire] = i+1;
        fy[*fire] = j;
        *fire += 1;
    }
    if (i-1 >= 0 && grid[i-1][j] <= 0){
        grid[i-1][j] = fire_stap;
        fx[*fire] = i-1;
        fy[*fire] = j;
        *fire += 1;
    }
    if (j+1 <= y && grid[i][j+1] <= 0){
        grid[i][j+1] = fire_stap;
        fx[*fire] = i;
        fy[*fire] = j+1;
        *fire += 1;
    }
    if (j-1 >= 0 && grid[i][j-1] <= 0){
        grid[i][j-1] = fire_stap;
        fx[*fire] = i;
        fy[*fire] = j-1;
        *fire += 1;
    }
}


void H_next_minutes(int** grid, int x, int y, int human_step, int* human, int* end, int* hx, int* hy, int last_h){
    int a = *human;
    for (int i = last_h ; i < a ; i++){
        if (grid[hx[i]][hy[i]] == human_step){
            MAN(grid, x, y, human_step-1, hx[i], hy[i], human, hx, hy);
        }
    }
    if (grid[x][y] != 0){
        *end = grid[x][y];
    }
}

void F_next_minutes(int** grid, int x, int y,  int fire_stap, int* fire, int* fx, int* fy, int last_f){
    int a = *fire;
    for (int i = last_f ; i < a ; i++){
        FIRE(grid, x, y, fire_stap+1, fx[i], fy[i], fire, fx, fy);
    }
}

int maximumMinutes(int** grid, int gridSize, int* gridColSize){
    int human = 0;
    int hx[10000];
    int hy[10000];
    
    int fire = 0;
    int fx[10000];
    int fy[10000];
    
    int human_step = -1;
    int fire_stap = 3;

    int x = gridSize-1;
    int y = *gridColSize-1;
    int end = 0;
    
    if (grid[0][1] == 0){
        grid[0][1] = human_step;
        hx[human] = 0;
        hy[human] = 1;
        human++;
    }
    if (grid[1][0] == 0){
        grid[1][0] = human_step;
        hx[human] = 1;
        hy[human] = 0;
        human++;
    }
    for (int i = 0 ; i < gridSize ; i++){
        for (int j = 0 ; j < *gridColSize ; j++){
            if (grid[i][j] == 1){
                FIRE(grid, x, y, fire_stap, i, j, &fire, fx, fy);
            }
        }
    }
    
    int last_h = 0;
    int last_f = 0;
    while (grid[x][y] <= 0) {
        int copyhuman = human;
        int copyfire = fire;
        if (grid[x][y]== 0){
            H_next_minutes(grid, x, y, human_step, &human, &end, hx, hy, last_h);
            if ((human == last_h)){
                return -1;
            }
        }
        F_next_minutes(grid, x, y, fire_stap, &fire, fx, fy, last_f);
        if (grid[x][y] > 0){
            if (end == 0){
                return -1;
            } else {
                if (grid[x-1][y] == end+1 || grid[x][y-1] == end+1){
                    return grid[x][y]+end-2;
                }
                return grid[x][y]+end-3;
            }
        }
        if (fire == last_f && grid[x][y] < 0){
            return 1000000000;
        }
        fire_stap++;
        human_step--;
        last_h = copyhuman;
        last_f = copyfire;
    }
    return -1;
}