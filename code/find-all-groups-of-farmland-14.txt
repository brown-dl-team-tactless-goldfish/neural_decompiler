vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        vector<vector<int>> result;
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        int r = land.size(); int c = land[0].size();
        
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (land[i][j]) {
                    int x,y;
                    // track till where all row has 1's
                    for (x = i+1; (x < r) && land[x][j]; x++);
                    
                    // track till where all columns has 1's
                    for (y = j+1; (y < c) && land[i][y]; y++);
                    
                    result.push_back({i,j,x-1,y-1});
                    
                    for (int p = i; p < x; p++) 
                        for (int q = j; q < y; q++)
                            land[p][q] = 0;
                }
            }
        }
        return result;
    }
    
    vector<vector<int>> findFarmland2(vector<vector<int>>& land) {
        vector<vector<int>> result;
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        int r = land.size(); int c = land[0].size();
        
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (land[i][j]) {
                    vector<int> row;
                    row.reserve(4);
                    row.push_back(i);
                    row.push_back(j);
                    queue<pair<int,int>> q;
                    q.push({i,j});
                    int maxRow = i; int maxCol = j;
                    while (!q.empty()) {
                        auto [x,y] = q.front();
                        q.pop();
                        maxRow = max(maxRow,x); maxCol = max(maxCol,y);
                        for (auto &d: dir) {
                            int nx = x + d[0]; int ny = y + d[1];
                            if ((nx  < 0) || (nx == r) || ny < 0 || ny == c || !land[nx][ny])
                                continue;
                            land[nx][ny] = 0;
                            q.push({nx,ny});
                        }
                    }
                    row.push_back(maxRow); 
                    row.push_back(maxCol);
                    result.push_back(row);
                }
            }
        }
        return result;
    }
	```