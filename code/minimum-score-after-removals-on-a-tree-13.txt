void anc(int s,int pr,int r){
    p[r][s]=1;
    for(auto i: g[s]){
        if(i==pr) continue;
        anc(i,s,r);
    }
}
void dfs(int u,int pr){
    
    x[u]=val[u];
    anc(u,pr,u);
    for(auto v : g[u]){
        if(v!=pr){
            dfs(v,u);
            x[u]^=x[v];
        }
    }
}
int minimumScore(vector<int>& a, vector<vector<int>>& e) {
    int n=a.size();
    for(int i=0;i<n;i++){
        g[i].clear();
        for(int j=0;j<n;j++){
            p[i][j]=0;
        }
    }
    x.clear();
    val.clear();
    x.resize(n);
    val.resize(n);
    val=a;
    for(auto i: e){
        g[i[0]].push_back(i[1]);
        g[i[1]].push_back(i[0]);
    }
    dfs(0,-1);
    // for(auto i: x){
    //     cout<<i<<" ";
    // }
    int ans=INT_MAX;
    for(int i=1;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(i==j) continue;
            if(p[i][j]){
                int c1=x[j];
                int c2=x[i]^x[j];
                int c3=x[0]^x[i];
                ans=min(ans,max({c1,c2,c3})-min({c1,c2,c3}));
            }
            else if(p[j][i]){
                int c1=x[i];
                int c2=x[j]^x[i];
                int c3=x[0]^x[j];
                ans=min(ans,max({c1,c2,c3})-min({c1,c2,c3}));
            }
            else{
                int c1=x[i];
                int c2=x[j];
                int c3=x[0]^c1^c2;
                ans=min(ans,max({c1,c2,c3})-min({c1,c2,c3}));
            }
        }
    }
    return ans;
}