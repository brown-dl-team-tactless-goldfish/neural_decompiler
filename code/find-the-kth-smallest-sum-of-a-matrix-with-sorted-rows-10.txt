class Solution {
public:
    int kthSmallest(vector<vector<int>>& mat, int k) {
        const int m = mat.size(), n = mat[0].size();
        vector<int> v(m);
        int s = 0;
        for (int i = 0; i < m; ++i) {
            s += mat[i][0];
        }
        priority_queue<pair<int, vector<int>>> q;
        q.push({-s, v});
        set<vector<int>> have;
        while (!q.empty()) {
            vector<int> v = q.top().second;
            const int sum = -q.top().first;
            q.pop();
            if (have.find(v) != have.end()) continue;
            have.insert(v);
            if (--k == 0) return sum;
            for (int i = 0; i < m; ++i) {
                if (v[i] + 1 < n) {
                    ++v[i];
                    q.push({-sum + mat[i][v[i] - 1] - mat[i][v[i]], v});
                    --v[i];
                }
            }
        }
        return -1;
    }
};