#define NUM_COMB 150
#define MAX_NUM 500



void backtrace(int **result,
              int* curr_result,
              int* candidates,
              int cand_size,
              int cand_index,
              int target,
              int* result_row,
              int* curr_result_size,
              int* returnColumnSizes) {
    
    if (target == 0) {
        for (int i = 0; i < *curr_result_size; i++) {
            result[*result_row][i] = curr_result[i];
        }
        returnColumnSizes[*result_row] = *curr_result_size;
        *result_row = *result_row + 1;
    }
    
    for (int i = cand_index; i < cand_size; i++) {
        if (target - candidates[i] < 0) {
            continue;
        }
        
        curr_result[*curr_result_size] = candidates[i];
        *curr_result_size = *curr_result_size + 1;
        
        backtrace(result,
                  curr_result,
                  candidates,
                  cand_size,
                  i,
                  target - candidates[i],
                  result_row,
                  curr_result_size,
                  returnColumnSizes);
        
        *curr_result_size = *curr_result_size - 1;
    }
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes){

    int **result;
    int *curr_result;
    int result_row = 0;
    int curr_result_col = 0;
    
    result = calloc(NUM_COMB, sizeof(int*));
    curr_result = calloc(MAX_NUM, sizeof(int));
    *returnColumnSizes = calloc(NUM_COMB, sizeof(int));
    
    
    for (int i = 0; i < NUM_COMB; i++) {
        result[i] = calloc(MAX_NUM, sizeof(int));
        //returnColumnSizes = calloc(MAX_NUM, sizeof(int));
    }
    
    backtrace(result, curr_result, candidates, candidatesSize, 0, target, &result_row, &curr_result_col, *returnColumnSizes);
    
    *returnSize = result_row;
    
    return result;
}