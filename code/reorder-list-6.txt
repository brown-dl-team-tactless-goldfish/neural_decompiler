/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
        struct ListNode head;
        struct ListNode* nx1;
        struct ListNode* nx2;
        struct ListNode* br =&head;
        head.next = NULL;
        while(l1!=NULL && l2!=NULL )
        {
            nx1 = l1->next;
            nx2 = l2->next;
            br->next = l1;
            l1->next = l2;
            l2->next = NULL;
            l1 = nx1;
            l2 = nx2;
            br = br->next->next;                
        }  
        br->next= l1? l1 : l2;
        return head.next;
    
}

struct ListNode* reverseList(struct ListNode* head) {
    struct ListNode *br = head;
    struct ListNode *pre = NULL;
    struct ListNode *cur = head;
    while(br!=NULL){
        cur = br;
        br = br->next;
        cur->next = pre;
        pre = cur;
    }
    return cur;
}

void reorderList(struct ListNode* head) {
    if(head ==NULL || head->next == NULL) return head;
    struct ListNode* hi = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* lo = (struct ListNode*)malloc(sizeof(struct ListNode));
    lo->next = head;
    struct ListNode* br = lo->next;
    struct ListNode* pre = br;
    struct ListNode* fast = lo->next;
    while(fast != NULL && fast->next!= NULL)     {
        pre = br;
        br = br->next;
        fast = fast->next->next;
    }
    hi->next = br;
    pre->next = NULL;
    hi->next = reverseList(hi->next);
    return mergeTwoLists(lo->next,hi->next);
        
}