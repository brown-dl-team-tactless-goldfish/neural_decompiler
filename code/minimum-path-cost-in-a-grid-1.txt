class Solution {
public:
    int ans = INT_MAX ;
    int r ,c ; 
    map<int,vector<int>> cost ;
    int dp[51][51] ;
    
    int solve(int row , int col , vector<vector<int>>&grid){
        if(row == r - 1) return grid[row][col] ;
        if(dp[row][col] != -1) return dp[row][col] ;
        
        int ele = grid[row][col] ;
        int ans = INT_MAX ;
        //go to every possible column and find the minimum
        for(int j = 0 ; j < cost[ele].size() ; ++j ) ans = min(ans,ele + cost[ele][j] + solve(row + 1 , j , grid) ) ;
        
        return dp[row][col] = ans ;
        
    }
    
    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {
        memset(dp,-1,sizeof(dp)) ;
        
        r = grid.size() , c = grid[0].size() ;
        for(int i = 0 ; i < moveCost.size() ; ++i ){
            for(auto &x : moveCost[i]) cost[i].push_back(x) ;
        }
        //start from evey possible cell in first row 
        for(int j = 0 ; j < c ; ++j ) ans = min(ans,solve(0,j,grid));
        
        return ans ;
    }
};