/* uthash implementation START */
typedef struct {
    int num;
    int count;
    UT_hash_handle hh;
}inthash;

void hash_add(inthash **ihash, int num){
    inthash *el = NULL;
    HASH_FIND_INT(*ihash, &num, el);
    if(el == NULL){
        el = malloc(sizeof(inthash));
        el->num = num;
        el->count = 0;
        HASH_ADD_INT(*ihash, num, el);
    }
    el->count++;
    return;
}

int hash_get(inthash **ihash, int num){
    inthash *el = NULL;
    HASH_FIND_INT(*ihash, &num, el);
    if(el != NULL)
        return el->count;
    return 0;
}

void hash_delete(inthash **ihash){
    inthash *el, *temp;
    HASH_ITER(hh, *ihash, el, temp){
        HASH_DEL(*ihash, el);
        free(el);
    }
    return;
}
/* uthash implementation END */

int hIndex(int* citations, int citationsSize){
    if(citations == NULL || citationsSize < 1)
        return 0;
    
    int max = INT_MIN;
    inthash *ihash = NULL;
    
    for(int index = 0; index < citationsSize; index++){
        hash_add(&ihash, citations[index]);
        if(citations[index] > max){
            max = citations[index];
        }        
    }
    int count = 0;
    int cn;    
    for(cn = max; cn >= 0; cn--){
        count +=  hash_get(&ihash, cn);
        if(count >= cn) {
            break;
        }
    }
    hash_delete(&ihash);

    return cn;
}