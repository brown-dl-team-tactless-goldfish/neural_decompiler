int frequency(char* word) {
    if (word == NULL) {
        return 0;
    }
    char minChar = word[0];
    int count = 0;
    for (int i = 0; word[i] != '\0'; ++i) {
        if (word[i] == minChar) {
            count++;
        }
        else if (word[i] < minChar) {
            count = 1;
            minChar = word[i];
        }
    }
    return count;
}

int binarySearch(int* array, int length, int value) {
    int l = 0;
    int r = length - 1;
    while (l <= r) {
        int m = l + ((r - l) >> 1);
        if (array[m] > value) {
            r = m - 1;
        }
        else {
            l = m + 1;
        }
    }
    return l;
}

int compareInts(const void* a, const void* b) {
    return *((int*)a) - *((int*)b);
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* numSmallerByFrequency(char ** queries, int queriesSize, char ** words, int wordsSize, int* returnSize){
    
    int* frequencies = (int*)malloc(wordsSize * sizeof(int));
    for (int i = 0; i < wordsSize; ++i) {
        frequencies[i] = frequency(words[i]);
    }
    
    qsort(frequencies, wordsSize, sizeof(int), compareInts);
    
    int* queryFrequencies = (int*)malloc(queriesSize * sizeof(int));
    for (int i = 0; i < queriesSize; ++i) {
        queryFrequencies[i] = frequency(queries[i]);
    }
    
    int* result = (int*)malloc(queriesSize * sizeof(int));
    *returnSize = queriesSize;
    
    for (int i = 0; i < queriesSize; ++i) {
        result[i] = wordsSize - binarySearch(frequencies, wordsSize, queryFrequencies[i]);
    }
    
    free(frequencies);
    free(queryFrequencies);
    
    return result;
}
