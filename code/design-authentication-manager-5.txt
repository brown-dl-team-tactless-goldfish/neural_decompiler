class AuthenticationManager {
private:
    int timeToLive ;
    unordered_map<string, int>Map ;
public:
    AuthenticationManager(int timeToLive) {
        this->timeToLive = timeToLive ;
    }
    
    void generate(string tokenId, int currentTime) {
        Map[tokenId] = currentTime + timeToLive ;
    }
    
    void renew(string tokenId, int currentTime) {
        if(Map.find(tokenId) != Map.end() && Map[tokenId] > currentTime)
        {
            Map[tokenId] = currentTime + timeToLive ;    
        }    
        
    }
    
    int countUnexpiredTokens(int currentTime) {
        int ret = 0 ;
        for(auto& m : Map){
            if(m.second > currentTime)
                ret++ ;
        }
        return ret ;
    }
};

/**
 * Your AuthenticationManager object will be instantiated and called as such:
 * AuthenticationManager* obj = new AuthenticationManager(timeToLive);
 * obj->generate(tokenId,currentTime);
 * obj->renew(tokenId,currentTime);
 * int param_3 = obj->countUnexpiredTokens(currentTime);
 */