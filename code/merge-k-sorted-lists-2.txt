int findlen(struct ListNode* head) {
    if(!head) return 0;
    int tmp = 0;
    struct ListNode* fast = head;
    while(fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        tmp++;
    }
    return (fast == NULL) ? (2 * tmp) : (2 * tmp + 1);
}

struct ListNode* GenList(int* arr, int sum) {    
    struct ListNode* head = (struct ListNode*) malloc(sizeof(struct ListNode));
    struct ListNode* tmp = head;
    for(int i = 0; i < sum; i++) {
        tmp->val = arr[i];
        if(i != sum-1) {
            struct ListNode* node = (struct ListNode*) malloc(sizeof(struct ListNode));
            tmp->next = node;
            tmp = node;
        }
    }
    tmp->next = NULL;
    return head;
}

int cmp(const void* a, const void* b) {
    return *(const int*)a - *(const int*)b;
}

struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    if(listsSize == 0) return NULL;
    int* sublistSizerArr = (int*) malloc(listsSize * sizeof(int));
    int sum = 0;
    for(int i = 0; i < listsSize; i++) {
        sublistSizerArr[i] = findlen(lists[i]);
        sum += sublistSizerArr[i];
    }
    if(!sum) {
        struct ListNode* newhead = NULL;
        free(sublistSizerArr);
        return newhead;
    } 
    int* arr = (int*) malloc(sum * sizeof(int));
    int arrIndex = 0;
    for(int i = 0; i < listsSize; i++) {
        struct ListNode* tmp = lists[i];
        if(tmp) {
            for(int j = 0; j < sublistSizerArr[i]; j++) {
                arr[arrIndex++] = tmp->val;
                tmp = tmp->next;
            }
        }
    }
    qsort(arr, sum, sizeof(int), cmp);
    struct ListNode* newhead = GenList(arr, sum);
    free(arr);
    free(sublistSizerArr);
    return newhead;
}