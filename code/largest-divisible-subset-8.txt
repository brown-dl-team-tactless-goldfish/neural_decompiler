/*
    In math, number A is said to be divisible by number B if A % B = 0.
 
    Time complexity: O(n^2) where n is the size of input array
          Sort array has a O(nlogn) time complexity. Filling in the dp array takes running time of O(n^2) = 1 + 2 + 3 + ...+ n.
          Building the output list take O(n). Time complexity is dominated by the 2nd part, so the overall time complexity is O(n^2).
    
    Space complexity: O(n)
          dp array has space complexity O(n). output list holds up to n elements, so the space complexity is also O(n).
*/
public class Solution {
    public IList<int> LargestDivisibleSubset(int[] nums) {
        
        List<int> res = new List<int>();
        
        if(nums == null || nums.Length == 0)
            return res;
        
        Array.Sort(nums);
        
        // dp[i]: Total number of elements if nums[i] is included in the subset.
        int[] dp = new int[nums.Length];
        dp[0] = 1;
        int maxlen = 1;
        
        for(int i = 1; i < nums.Length; i++)
        {
            for(int j = 0; j < i; j++)
            {
                if(nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i])
                {
                    dp[i] = dp[j] + 1;
                    maxlen = Math.Max(maxlen, dp[i]);
                }
            }
        }
        
        int prev = -1;
        for(int i = nums.Length - 1; i >= 0 ; i--)
        {
            if(dp[i] == maxlen && (prev == -1 || prev % nums[i] == 0))
            {
                res.Add(nums[i]);
                maxlen--;
                prev = nums[i];
            }
        }
        
        return res;
    }
}