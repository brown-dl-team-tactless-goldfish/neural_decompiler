class Solution {
public:
    vector<int> prefix;
    vector<vector<int>> rects;
    
    Solution(vector<vector<int>>& rects) {
        this->rects = rects;
        prefix.push_back(getArea(rects[0]));
        for(int i = 1; i < rects.size(); i++){
            prefix.push_back(prefix.back() + getArea(rects[i]));
        }
    }
    
    static int getArea(vector<int>& rect){
        return (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);
    }
    
    vector<int> getRandomPoint(vector<int>& rect){
        vector<int> randPoint;
        int randX = rect[0] + rand() % (rect[2] - rect[0] + 1);
        int randY = rect[1] + rand() % (rect[3] - rect[1] + 1);
        randPoint.push_back(randX);
        randPoint.push_back(randY);
        return randPoint;
    }
    
    vector<int> pick() {
        int randIndex = rand() % (prefix.back() + 1);
        int rectIndex = lower_bound(prefix.begin(), prefix.end(), randIndex) - prefix.begin();
        return getRandomPoint(rects[rectIndex]);
    }
};
