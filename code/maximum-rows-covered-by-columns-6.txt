class Solution {
public:
    bool C[15];
    bool rc[15];
    int rccnt = 0;
    int res = 0;
    int rl, cl;
    void init_rc(vector<vector<int>>& M) {
        for (int i = 0; i < rl; i++) {
            int j = 0;
            for (; j < cl; j++) {
                if (M[i][j] == 1)
                    break;
            }
            if (j >= cl) {
                rccnt++;
                rc[i] = false;
            }
        }
    }
    int setC(int c) {
        memset(C, false, sizeof(C));
        int idx = 0;
        int cnt = 0;
        while (c > 0) {
            if ((c & 1) == 1) {
                C[idx] = true;
                cnt++;
            }
            c >>= 1;
            idx++;
        }
        return cnt;
    }
    int cntR(vector<vector<int>>& M) {
        int cnt = 0;
        for (int i = 0; i < rl; i++) {
            if (rc[i]) {
                int j = 0;
                int f = true;
                for (; j < cl; j++) {
                    if (M[i][j] == 1 && !C[j]) {
                        f = false;
                        break;
                    }
                }
                if (f) {
                    cnt++;
                }
            }
        }
        return cnt;
    }
    int maximumRows(vector<vector<int>>& matrix, int numSelect) {
        memset(rc, true, sizeof(rc));
        rl = matrix.size();
        cl = matrix[0].size();
        init_rc(matrix);
        int mm = pow(2, cl);
        for (int m = 0; m < mm; m++) {
            if (setC(m) == numSelect) {
                res = max(res, (rccnt + cntR(matrix)));
            }
        }
        return res;
    }
};