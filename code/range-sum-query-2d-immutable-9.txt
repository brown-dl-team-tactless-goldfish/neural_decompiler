
typedef struct {
    int **map;
} NumMatrix;


NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {
    int n = *matrixColSize;
    NumMatrix *num_matrix = (NumMatrix *)malloc(sizeof(NumMatrix));
    num_matrix->map = (int **)malloc(matrixSize*sizeof(int *));
    for(int i=0;i<matrixSize;i++) {
        num_matrix->map[i] = (int *)malloc(n*sizeof(int));
        memcpy(num_matrix->map[i], &matrix[i][0], n*sizeof(int));
    }
    
    // accumualte row
    for(int i=0;i<matrixSize;i++) {
        for(int j=1;j<n;j++) {
            num_matrix->map[i][j] += num_matrix->map[i][j-1];
        }
    }

    // accumualte col
    for(int i=1;i<matrixSize;i++) {
        for(int j=0;j<n;j++) {
            num_matrix->map[i][j] += num_matrix->map[i-1][j];
        }
    }

    return num_matrix;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
    int result = obj->map[row2][col2];
    if(row1 > 0) result -= obj->map[row1-1][col2];
    if(col1 > 0) result -= obj->map[row2][col1-1];
    if(row1 > 0 && col1 > 0) result += obj->map[row1-1][col1-1];
    
    return result;
}

void numMatrixFree(NumMatrix* obj) {
    free(obj);
}