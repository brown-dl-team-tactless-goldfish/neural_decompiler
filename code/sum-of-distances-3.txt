class Solution {
public:
    vector<long long> distance(vector<int>& nums) {
        unordered_map<int, vector<long long>> mp;
        vector<long long> arr(nums.size(), 0);
        for(int i = 0; i < nums.size(); i++){
            mp[nums[i]].push_back((long long)i);
        }
        unordered_set<int> f;
        for(int i = 0; i < arr.size(); i++){
            if(f.count(nums[i])) continue;
            vector<long long> n = mp[nums[i]];
            vector<long long> sums = n;
            sums[0] = n[0];
            for(int j = 1; j < sums.size(); j++) sums[j] = (sums[j-1] + n[j]);
            for(int j = 0; j < sums.size(); j++){
                long long t = 0;
                if(j != 0) t += j * n[j] - sums[j-1];
                if(j != sums.size()-1) t += (sums[sums.size()-1] - sums[j]) - ((sums.size()-1-j) * n[j]);
                arr[n[j]] = t;
            }
            f.insert(nums[i]);
        }
        return arr;
    }
};