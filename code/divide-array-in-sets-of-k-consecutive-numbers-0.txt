int cmpfunc(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

bool isPossibleDivide(int* nums, int numsSize, int k){
    int n = numsSize;
    if(n % k)
        return false;
    qsort(nums, n, sizeof(int), cmpfunc);
    
    int* cn = calloc(n , sizeof(int));
    int idx = 0;
    for(int i = 0; i < n; i++){
        if(nums[i] == nums[idx])
            cn[idx]++;
        else{
            idx++;
            nums[idx] = nums[i];
            cn[idx] = 1;
        }
    }
    int begin = 0;
    int set = 0;
    while(set < n/k){
        while(cn[begin] == 0){
            begin++;
        }
        cn[begin]--;
        for(int i = begin+1; i < begin+k; i++){
            if(i > idx)
                return false;
            if(cn[i] == 0 || nums[i] != nums[i-1] + 1)
                return false;
            cn[i]--;
        }
        set++;

    }
    return true;
}