class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        vector<bool> isPresent(n*n, false);
        queue<int> q;
        q.push(0);
        int ans = -1;
        while(!q.empty()){
            int size = q.size();
            ans++;
            for(int i = 0 ; i < size ; i++){
                int temp = q.front();
                if(temp == n*n-1) return ans;
                q.pop();
                for(int j = 1 ; j <= 6 ; j++){
                    int val = min(n*n-1, temp+j);
                    if(!isPresent[val]){
                        isPresent[val] = true;
                        int r = n-val/n-1, c;
                        if(n%2 == 0){
                            if(r%2 != 0){
                                c = val%n;
                            }else{
                                c = n-val%n-1;
                            }
                        }else{
                            if(r%2 == 0){
                                c = val%n;
                            }else{
                                c = n-val%n-1;
                            }
                        }
                        if(board[r][c] == -1)
                            q.push(val);
                        else{
                            q.push(board[r][c]-1);
                        } 
                    }
                }
            }
            cout << endl;
        }

        return -1;
    }
};