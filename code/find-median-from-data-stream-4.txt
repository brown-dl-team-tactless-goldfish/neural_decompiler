
typedef struct
{
    int val;
    struct node* pre;
    struct node* next;
} node;

typedef struct {
    node* head;
    node* mid;
    int size;
} MedianFinder;

/** initialize your data structure here. */

MedianFinder* medianFinderCreate() {
    MedianFinder* obj = (MedianFinder*)malloc(sizeof(MedianFinder));
    obj->head = NULL;
    obj->mid = NULL;
    obj->size = 0;
    
    return obj;
}

void medianFinderAddNum(MedianFinder* obj, int num) {
    node* newNode = NULL;
    node* temp = NULL, *pre = NULL;
    
    newNode = (node*)malloc(sizeof(node));
    newNode->val = num;
    newNode->next = NULL;
    newNode->pre = NULL;
    if(obj->head == NULL)
    {
        obj->head = newNode;
        obj->mid = newNode;
        obj->size = 1;
    }
    else
    {
        if(num <= obj->head->val)
        {
            newNode->next = obj->head;
            obj->head->pre = newNode;
            obj->head = newNode;
            
            obj->size++;
            if((obj->size%2) == 0)
                obj->mid = obj->mid->pre;
            return;
        }
        else if(num >= obj->mid->val)
        {
            temp = obj->mid;
        }
        else
        {
            temp = obj->head;
        }
        
        pre = temp;
        while(temp && (temp->val < num))
        {
            pre = temp;
            temp = temp->next;
        }
        newNode->next = pre->next;
        newNode->pre = pre;
        if(pre->next)
        {
            temp = pre->next;
            temp->pre = newNode;
        }
        pre->next = newNode;
        
        obj->size++;
        if((obj->size%2) == 0)
        {
            if(num < obj->mid->val)
                obj->mid = obj->mid->pre;
        }
        else
        {
            if(num < obj->mid->val)
                ;//obj->mid = obj->mid->pre;
            else
                obj->mid = obj->mid->next;
        }
    }
    
#if 0
    temp = obj->head;
    while(temp)
    {
        printf("\n temp = %d,%d",temp,temp->val);
        temp = temp->next;
    }
    printf("\n mid = %d,%d\n",obj->mid,obj->mid->val);
#endif    
}

double medianFinderFindMedian(MedianFinder* obj) {
    double result = 0;
    node* next;
    
    if(obj->mid == NULL)
        return 0;
    if((obj->size%2) == 0)
    {
        next = obj->mid->next;
        result = (double)(obj->mid->val + next->val)/2;
    }
    else
        result = obj->mid->val;
    return result;
}

void medianFinderFree(MedianFinder* obj) {
    node* temp = NULL;
    
    while(obj->head)
    {
        temp = obj->head;
        obj->head = obj->head->next;
        free(temp);
    }
    free(obj);
}

/**
 * Your MedianFinder struct will be instantiated and called as such:
 * MedianFinder* obj = medianFinderCreate();
 * medianFinderAddNum(obj, num);
 
 * double param_2 = medianFinderFindMedian(obj);
 
 * medianFinderFree(obj);
*/