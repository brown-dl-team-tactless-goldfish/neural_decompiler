using LL = long long ;
using PLL = pair<LL, LL> ;
class Solution {
public:
    vector<long long> distance(vector<int>& nums) {
        int n = nums.size() ;
        vector<LL>ret(n) ;
        unordered_map<int, PLL>Map ;
        for(int i = 0; i < n; i++){
            if(Map.find(nums[i]) != Map.end()){                
                LL preSum = Map[nums[i]].first  ;
                LL count =  Map[nums[i]].second ;
                ret[i] +=   count * i - preSum;                
            }
            Map[nums[i]].first += i ;
            Map[nums[i]].second++ ;
            
        }
        Map.clear() ;
        for(int i = n-1; i >= 0; i--){
            if(Map.find(nums[i]) != Map.end()){
                LL sufSum = Map[nums[i]].first ;
                LL count =  Map[nums[i]].second ;
                ret[i] +=  sufSum - count * i ;
            }
            Map[nums[i]].first += i ;
            Map[nums[i]].second++ ;
        }
    
        return ret ;
    }
};