class Solution {
public:
    double getMinDistSum(vector<vector<int>>& positions) {
        double x1=0, x2=100, y1=0, y2=100, preMin=1e9, curMin=0, e=5e-6;
        while(abs(preMin - curMin)>e || x2-x1>e || y2-y1>e){
            preMin = curMin;
            curMin = zoomIn(positions, x1,x2,y1,y2);
        } 
        return preMin;
    }
    
    double zoomIn(const vector<vector<int>>& positions, double& x1, double& x2, double& y1, double& y2){
        const int n = 3;
        const double dx = (x2-x1)/n, dy = (y2-y1)/n;
        double minDis = 1e9, xMin=0, yMin=0;
        for(int i=0;i<=n;i++){
            for(int j=0;j<=n;j++){
                double x=x1+dx*i, y=y1+dy*j;
                double dis = sumDis(x,y,positions);
                if(dis<minDis) xMin=x, yMin=y, minDis=dis;
            }
        }
        x1 = xMin-dx, x2 = xMin+dx;
        y1 = yMin-dy, y2 = yMin+dy;
        return minDis;
    }
    
    double sumDis(double x, double y, const vector<vector<int>>& positions){
        double sum = 0;
        for(auto& v:positions) sum += sqrt(pow(x-v[0],2) + pow(y-v[1], 2));
        return sum;
    }
};