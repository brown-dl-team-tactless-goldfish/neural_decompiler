public class Solution 
{
    public int FindMinStep(string board, string hand) 
    {
        int[] freq = new int[26];
        for (int i = 0; i < hand.Length; i++) 
            freq[hand[i] - 'A']++;
        int result = Helper(board, freq);
        return result == int.MaxValue ? -1 : result;
    }
    
    private int Helper(string s, int[] freq) 
    {
        s = RemoveDuplicates(s);     
        if (string.IsNullOrEmpty(s)) return 0;
        int  result = int.MaxValue, need = 0;
        int i = 0, j = 0;
        while(j <= s.Length) 
        {
            if (j == s.Length || s[j] != s[i])
            {
                need = 3 - (j - i);
                if (freq[s[i] - 'A'] >= need) 
                {
                    freq[s[i] - 'A'] -= need;
                    var rest = Helper(s.Substring(0, i) + s.Substring(j), freq);
                    if(rest != int.MaxValue)
                        result = Math.Min(result, need + rest);
                    freq[s[i] - 'A'] += need;
                }
                i = j;
            }
            j++;
        }
        
        return result;
    } 
    
    private string RemoveDuplicates(string str)
    {
        var stack = new Stack<char>();
        foreach(var ch in str)
        {
            if(stack.Count == 0 || stack.Peek() == ch)
                stack.Push(ch);
            else
            {
                RemoveFromStack(stack);
                stack.Push(ch);
            }
        }
        
        RemoveFromStack(stack);
        var list = stack.ToList();
        list.Reverse();
        return new string(list.ToArray());
    }
    
    private void RemoveFromStack(Stack<char> stack)
    {
        if(stack.Count == 0) return;
        var prev = stack.Peek();
        int count = 0;
        while(stack.Any() && stack.Peek() == prev)
        {
            count++;
            stack.Pop();
        }
        
        if(count < 3)
            for(int i  = 0; i < count; i++)
                stack.Push(prev);
    }
}