struct ListNode* helper_reverse(struct ListNode* head)
{
    struct ListNode* pre=NULL, *cur, *next;
    
    while(head)
    {
        next = head->next;
        head->next = pre;
        pre = head;
        head = next;
    }
    return pre;
}

void helper_merge(struct ListNode* head, struct ListNode* mid)
{
    struct ListNode *next1, *next2;
    
    while(head)
    {
        next1 = head->next;
        head->next = mid;
        if(mid)
        {
            next2 = mid->next;
            mid->next = next1;
			mid = next2;
        }
        head = next1;
    }
}

void reorderList(struct ListNode* head){
     struct ListNode *slow=head, *fast=head, *mid;
    
    if((head==NULL) || (head->next==NULL))
        return;
    
    // find mid and break up
    while(fast->next && fast->next->next)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    mid = slow->next;
    slow->next = NULL;
    
    // reverse
    mid = helper_reverse(mid);
    
    // merge
    helper_merge(head,mid);
}