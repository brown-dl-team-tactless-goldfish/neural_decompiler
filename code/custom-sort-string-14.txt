//index represent the letter a,b,c.. , value represents sort priority
int crosswalk[26];

int sortfunc(char *a, char *b) {
    int idxa = *a - 'a';
    int idxb = *b - 'a';

    // returning a negative number puts a to the left
    // returning a positive number puts b to the left
    // returning zero means they are equivalent (can be sorted either way)
    return crosswalk[idxa] - crosswalk [idxb];
}


char * customSortString(char * order, char * s){

    int olen = strlen(order);
    int slen = strlen(s);
    
    // initialize by giving ever letter the same priority 
    // per the problem, it doesnt matter but here we give it the lowest priority
    for (int i = 0; i < 26; i++) {
        crosswalk[i] = 26;
    }
    
    // as each letter appears in the order string, assign that letter its true priority
    for (int i = 0; i < olen; i++) {
        // if the 4th letter is 'j', this becomes crosswalk[9] = 3; (4th highest priorty)
        crosswalk[order[i]-'a'] = i;
    }
    
    // send string to be sorted based on the priority we just created
    qsort (s,slen,sizeof(char),sortfunc);
    return s;
}