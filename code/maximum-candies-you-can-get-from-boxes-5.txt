int maxCandies(vector<int>&         status,
               vector<int>&         candies, 
               vector<vector<int>>& keys, 
               vector<vector<int>>& containedBoxes, 
               vector<int>&         initialBoxes) 
{
    unordered_set<int> boxesOwnedUnopened;
    unordered_set<int> boxesOwnedToOpen;
    unordered_set<int> collectedKeys;

    int candiesCollected = 0;

    auto addBoxes = [&] (auto const& boxes) {
        for (auto box : boxes) {
            if (status[box]) {
                boxesOwnedToOpen.insert(box);
            } else {
                boxesOwnedUnopened.insert(box);
            }
        }      
    };

    addBoxes(initialBoxes);

    while (not boxesOwnedToOpen.empty()) {

        auto it = boxesOwnedToOpen.begin();
        int box = *it;
        collectedKeys.insert(keys[box].begin(), keys[box].end());
        candiesCollected += candies[box];
        addBoxes(containedBoxes[box]);
        boxesOwnedToOpen.erase(it);

        if (boxesOwnedToOpen.empty()) {
            for (auto box : boxesOwnedUnopened) {
                if (collectedKeys.count(box)) {
                    boxesOwnedToOpen.insert(box);
                    collectedKeys.erase(collectedKeys.find(box));   
                }
            }
            for (auto box : boxesOwnedToOpen) {
                boxesOwnedUnopened.erase(boxesOwnedUnopened.find(box));
            }
        }
    }

    return candiesCollected;
}