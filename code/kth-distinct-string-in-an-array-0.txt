// RS Hash Function
unsigned int RSHash(char *str)
{
    unsigned int b = 378551;
    unsigned int a = 63689;
    unsigned int hash = 0;

    while (*str)
    {
        hash = hash * a + (*str++);
        a *= b;
    }

    return (hash & 0x7FFFFFFF);
}
typedef struct data{
    unsigned int key;
    int idx;
}data;

char * kthDistinct(char ** arr, int arrSize, int k){
    int n = arrSize;
    bool* duplicate = calloc(n, sizeof(bool)) ;
    int N = 10 * n;
    data** hash = calloc(N, sizeof(data**));
    int skip = 0;
    for(int i = 0; i < n; i++){
        unsigned int val = RSHash(arr[i]);
        unsigned int d = val;
        while(1){
            if(hash[d%N] == NULL){
                hash[d%N] = malloc(sizeof(data))  ;
                hash[d%N]->key = val;
                hash[d%N]->idx = i;
                break;
            }
            else if(hash[d%N]->key == val){
                int id = hash[d%N]->idx;
                if(duplicate[id] == false){
                    skip++ ;   //skip itme id
                }
                duplicate[id] = true;
                duplicate[i] = true;
                skip++ ;  //skip item i
                break;
            }
            else
                d++;
        }
    }
    char* ans = "";
    int right = 0;
    for(int i = 0; i < n; i++){
        if(duplicate[i] == false){
            right++;
            if(right == k){
                ans = malloc(sizeof(arr[i]) + 1) ;
                strcpy(ans, arr[i]);                
            }
        }
    }
    free(duplicate) ;
    for(int i = 0; i < N; i++){
        if(hash[i])
            free(hash[i]);
    }
    free(hash);
    return ans;
}