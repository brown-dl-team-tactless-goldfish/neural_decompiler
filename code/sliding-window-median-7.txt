class Solution {
public:
void balance(multiset<int> &lf,multiset<int> &rt,int k){
    int lfLim=(k+1)/2,rtLim=k-lfLim;
    while(lf.size()>lfLim){
        // take one from lf and put it in rt
        int tmp=*lf.rbegin();
        lf.erase(lf.find(tmp));
        rt.insert(tmp);
    }
    while(rt.size()>rtLim){
        // take one from rt and put it in lf
        int tmp=*rt.begin();
        rt.erase(rt.find(tmp));
        lf.insert(tmp);
    }
}

vector<double> medianSlidingWindow(vector<int>& ar, int k) {
    // if k is odd then the size of left half > right half
    multiset<int> lf,rt;
    vector<double> ans;
    int n=ar.size();
    for(int i=0;i<k;i++) lf.insert(ar[i]);
    for(int i=k;i<=n;i++){
        balance(lf,rt,k);
        double sum=*lf.rbegin();
        if(k&1) ans.push_back(sum);
        else{
            sum+=*rt.begin();
            ans.push_back(sum/2.0);
        }
        if(i==n) break;
        int takeOut=ar[i-k];
        if(takeOut<=*lf.rbegin()){
            // take out from left
            auto it=lf.find(takeOut);
            lf.erase(it);
        }else{            
            // take out from right
            auto it=rt.find(takeOut);
            rt.erase(it);
        }        
        int putIn=ar[i];
        if((lf.size() && putIn<=*lf.rbegin()) || (lf.empty() && putIn<*rt.begin())) lf.insert(putIn);
        else rt.insert(putIn);
    }
    return ans;
}
};