    string stoneGameIII(vector<int>& stoneValue) {
        // dp[i].first means remaining i stones such that starting first's max score
        vector<pair<int, int>> dp(stoneValue.size() + 1, {INT_MIN, INT_MIN});
        
        dp[stoneValue.size()].first = 0;
        dp[stoneValue.size()].second = 0;
        
        for (int i = stoneValue.size() - 1; i >= 0; --i) {
            int max_idx = i + 1;
            int sum = 0;
            
			// starting first can choose 1 ~ 3 stones
            for (int j = 1; j <= 3; ++j) {
                int idx = i + j - 1;
                
                if (idx >= stoneValue.size()) {
                    continue;
                }
                
                sum += stoneValue[idx];

                if ((dp[i + j].second + sum) > dp[i].first) {
                    dp[i].first = (dp[i + j].second + sum);
                    max_idx = i + j;
                }
            }
            
            dp[i].second = dp[max_idx].first;
        }
        
        if (dp[0].first == dp[0].second) {
            return "Tie";
        } else if (dp[0].first > dp[0].second) {
            return "Alice";
        } else {
            return "Bob";
        }
    }