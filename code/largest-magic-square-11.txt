class Solution {
public:
    int R[60][60][4];
    int r, c;
    void initR(vector<vector<int>>& G) {
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                R[i + 1][j + 1][1] = R[i + 1][j][1] + G[i][j]; 
                R[i + 1][j + 1][0] = R[i][j + 1][0] + G[i][j];
                R[i + 1][j + 1][2] = R[i][j][2] + G[i][j];
                R[i + 1][j + 1][3] = R[i][j + 2][3] + G[i][j];
            }
        }
        
    }
    int largestMagicSquare(vector<vector<int>>& grid) {
        r = grid.size();
        c = grid[0].size();
        for (int i = 0; i < 60; i++) {
            for (int j = 0; j < 60; j++) {
                for (int k = 0; k < 4; k++) {
                    R[i][j][k] = 0;
                }
            }
        }
        initR(grid);
        int csum;
        int res = 1;
        for (int i = 1; i <= r; i++) {
            for (int j = 1; j <= c; j++) {
                int len = std::min((c - j + 1), (r - i + 1));
                for (int k = 0; k < len; k++) {
                    csum = R[i + k][j + k][2] - R[i - 1][j - 1][2];
                    if (R[i + k][j][3] - R[i - 1][j + k + 1][3] == csum) {
                        bool f = true;
                        for (int l = i; l <= i + k; l++) {
                            if (R[l][j + k][1] - R[l][j - 1][1] != csum) {
                                f = false;
                                break;
                            }
                        }
                        if (f) {
                            for (int l = j; l <= j + k; l++) {
                                if (R[i + k][l][0] - R[i - 1][l][0] != csum) {
                                    f = false;
                                    break;
                                }
                            }
                            if (f) {
                                int tmp = (k + 1);
                                res = std::max(res, tmp);
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
};