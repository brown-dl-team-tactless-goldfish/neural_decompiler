    public int MinimumOperations(TreeNode root)
    {
        int result = 0;
        Queue<TreeNode> q = new Queue<TreeNode>();
        q.Enqueue(root);

        while (q.Any())
        {
            List<int> levelNodes = new List<int>();
            //number - index
            Dictionary<int, int> d = new Dictionary<int, int>();
            int orderCounter = 0;

            int count = q.Count;

            for (int i = 0; i < count; i++)
            {
                
                TreeNode node = q.Dequeue();
                if (node.left != null)
                {
                    q.Enqueue(node.left);
                    levelNodes.Add(node.left.val);
                    d.Add(node.left.val, orderCounter++);
                }
                if (node.right != null)
                {
                    q.Enqueue(node.right);
                    levelNodes.Add(node.right.val);
                    d.Add(node.right.val, orderCounter++);
                }

            }

            List<int> levelNodesSorted = levelNodes.OrderBy(n => n).ToList();
            int n = levelNodes.Count;
            for (int i = 0; i <n; i++)
            {
                if (levelNodes[i] != levelNodesSorted[i])
                {
                    result++;
                    int temp = levelNodes[i];
                    levelNodes[i] = levelNodesSorted[i];
                    levelNodes[d[levelNodesSorted[i]]] = temp;
                    d[temp] = d[levelNodesSorted[i]];
                }
            }
        }
        return result;
    }