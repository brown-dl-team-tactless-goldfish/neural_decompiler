/**
 * Your MinStack struct will be instantiated and called as such:
  MinStack obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/


typedef struct {
    int str[8000];
    int top;
    int min[20];
    int mincnt;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() {
    MinStack *Min;
    Min=(MinStack*)malloc(sizeof(MinStack));
    Min->top=-1;
    Min->mincnt=0;
    return Min;
}

void minStackPush(MinStack* obj, int x) {
    obj->top++;
    obj->str[obj->top]=x;
    
    printf("mincnt=%d push:%d\n",obj->mincnt,x);
    if( obj->mincnt==0 || x<=obj->min[obj->mincnt-1] )
    {
        obj->min[obj->mincnt++]=x;
        printf("%d*",x);
    }
    printf("\n===end===\n\n");
        
  
}

void minStackPop(MinStack* obj) {
    if(obj->top==-1)
        return ;
    
    if(obj->mincnt==0)
        ;//////////////////////
    
    else if( obj->str[obj->top]==obj->min[obj->mincnt-1] )
        obj->mincnt--;
    
    obj->top--;
}

int minStackTop(MinStack* obj) {

    return obj->str[obj->top];
}

int minStackGetMin(MinStack* obj) {

    return obj->min[obj->mincnt-1];
}

void minStackFree(MinStack* obj) {
    free(obj);
}