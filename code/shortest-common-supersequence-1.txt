int max(int a,int b){
    return a > b ? a : b;
}
char * shortestCommonSupersequence(char * str1, char * str2){
    int n=strlen(str1),m=strlen(str2);
    for(int i=0;i<=m;i++)
        dp[i][0]=0;
    for(int i=0;i<=n;i++)
        dp[0][i]=0;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(str1[i-1]==str2[j-1])
                dp[i][j]=dp[i-1][j-1]+1;
            else 
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }
    char* lcs=(char*)calloc(dp[n][m]+1,sizeof(char));
    int top=dp[n][m]-1;
    int i=n,j=m;
    while(i > 0 && j > 0){
        if(str1[i-1]==str2[j-1]){
            lcs[top--]=str1[i-1];
            i--;
            j--;
        }
        else if(i-1 > 0 && dp[i-1][j]==dp[i][j])
            i-=1;
        else 
            j-=1;
    }
    char* res=(char*)calloc(n+m+1-(dp[n][m]),sizeof(char));
    int k=0;
    i=j=0,top=-1;
    while(i < n && j < m && k < dp[n][m]){
        if(str1[i]==str2[j]){
            res[++top]=str1[i];
            i++;
            j++;
            k++;
        }
        else if(str1[i]!=lcs[k])
            res[++top]=str1[i++];
        else if(str2[j]!=lcs[k])
            res[++top]=str2[j++];
    }
    while(i < n) res[++top]=str1[i++];
    while(j < m) res[++top]=str2[j++];
    return res;
}