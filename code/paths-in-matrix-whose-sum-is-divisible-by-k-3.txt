class Solution {
public:
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int mod = 1e9 + 7;
        int row = grid.size();
        int col = grid[0].size();
        
        vector<vector<int>> curr(col, vector<int> (k, 0));
        vector<vector<int>> prev(col, vector<int> (k, 0));
        
        for(int r = 0; r < row; r++) {
            for(int c = 0; c < col; c++) {
                if(!r && !c) { curr[c][grid[r][c] % k] += 1; }
                else {
                    for(int i = 0; i < k; i++) {
                        int nextI = (grid[r][c] + i) % k;
                        curr[c][nextI] = (c ? curr[c - 1][i] : 0) + prev[c][i];
                        curr[c][nextI] %= mod;
                    }
                }
            }
            
            swap(curr, prev);
        }
        
        return prev[col - 1][0];
    }
};