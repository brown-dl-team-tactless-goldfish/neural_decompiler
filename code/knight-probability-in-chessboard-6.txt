class Solution {
    double dfs(int N, int K, int r, int c,  vector<vector<vector<double>>>& dp) {
        if (r < 0 || c < 0 || r >= N || c >= N)
            return 0;
        if (K == 0) return 1;
        if (dp[K][r][c] != -1) 
            return dp[K][r][c];
        
        double moves =  dfs(N, K-1, r-2, c-1, dp) +
                        dfs(N, K-1, r-1, c-2, dp) +
                        dfs(N, K-1, r+1, c-2, dp) +
                        dfs(N, K-1, r+2, c-1, dp) +
                        dfs(N, K-1, r-2, c+1, dp) +
                        dfs(N, K-1, r-1, c+2, dp) +
                        dfs(N, K-1, r+2, c+1, dp) +
                        dfs(N, K-1, r+1, c+2, dp);
        
        moves /= 8;
        dp[K][r][c] = moves;
        return dp[K][r][c];
    }
public:
    double knightProbability(int N, int K, int r, int c) {
        
        vector<vector<vector<double>>>dp(K+1, vector<vector<double>>(N+1, vector<double>(N+1, -1)));
        return dfs(N, K, r, c, dp);
    }
};