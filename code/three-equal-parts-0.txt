/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* threeEqualParts(int* A, int ASize, int* returnSize){
    int n,i;
    int *r = (int *)malloc(sizeof(int)*2);
    r[0]=r[1]=-1;
    *returnSize = 2;
    //count how many ones in array
    for(n = i = 0; i < ASize; i++)
    {
        if(A[i])n++;
    }
    //if it's worth trying, it must contain equal ones of each
    if(n && n % 3 == 0)
    {
        uint16_t d = 0; // length of a part
        uint16_t q = 0; // length counter of a part and its forehead
        uint16_t p=0; // counter of '1' has read
        uint16_t s=0; // current position record pointer
        uint16_t k[3]={0}; //begin positions of parts
        //every part has this amount of '1'
        n /= 3;
        //loop from backward in order to count acutal part size first.
        for(i = ASize - 1;i>=0;i--)
        {
            q++; // count how many chars gone though
            if(A[i] && (++p % n == 0 || n == 1)) // if '1' then test if reached a point to do segment
            {
                k[s++]=i; //record and move pointer to next record
                if(d == 0) d = ASize - i; //set corret length of a part
                else if(d < n || d > q) return r; // incorret length found, immediate return
                q = 0; // reset part char counter for next one
            }
        }
        //detect unmatch pattern
        for(i = 0; i < d; i++)
        {
            if(!((A+k[2])[i]==(A+k[0])[i] && (A+k[0])[i] == (A+k[1])[i]))return r;
        }
        //set position to first one's last char and second one's last char
        r[0] = k[2]+d-1;
        r[1] = k[1]+d;
    }
    else if(n == 0)
    {
        //wired, unwritten rule, even applies to empty input.
        r[0]=0;
        r[1]=ASize-1;
    }
    return r;
}