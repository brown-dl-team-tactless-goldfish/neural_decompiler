class Solution {
public:
    long long minimumDifference(vector<int>& nums) {
    typedef long long LL;
    int n=nums.size()/3;
    priority_queue<int> first,last;
    vector<LL> fOpti(nums.size(),0),lOpti(nums.size(),0);
    LL s=0;
    for(int i=0;i<2*n;i++)
    {
        s+=nums[i];
        first.push(nums[i]);
        while(first.size()>n)
        {
            s-=first.top();
            first.pop();
        }
        fOpti[i]=s;
    }
    LL ans=LLONG_MAX;
    s=0;
    for(int i=3*n-1;i>=n;i--)
    {
        s+=nums[i];
        last.push(-nums[i]);
        while(last.size()>n)
        {
            s-=(-last.top());
            last.pop();
        }
        lOpti[i]=s;
        if(i<=2*n)
            ans=min(fOpti[i-1]-lOpti[i],ans);
    }
    return ans;
    }
};