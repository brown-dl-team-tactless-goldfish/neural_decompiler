#define MAX_LENGTH      (100)

struct hash_struct {
    char key[MAX_LENGTH];
    int count;
    int idx;
    UT_hash_handle hh;
};

void freeAll(struct hash_struct* pFree)
{
    struct hash_struct* current;
    struct hash_struct* tmp;
    HASH_ITER(hh, pFree, current, tmp)
    {
        HASH_DEL(pFree, current);
        free(current);
    }
}

int compareChar(const void* c1, const void* c2)
{
    // ascending order
    return (*(char*)c1 - *(char*)c2);
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
char *** groupAnagrams(char ** strs, int strsSize, int* returnSize, int** returnColumnSizes){
    char*** pRetVal = NULL;
    (*returnSize) = 0;

    int i, j, k;
    char pSortStr[MAX_LENGTH];
    struct hash_struct* map = NULL;
    struct hash_struct* temp;


    /* 1. use hash map to count strs[i] appear times to prepare malloc return arrays */
    for (i=0; i<strsSize; ++i)
    {
        // sort strs[i] as hash key
        memset(pSortStr, 0, sizeof(pSortStr));
        snprintf(pSortStr, sizeof(pSortStr), "%s", strs[i]);
        qsort(pSortStr, strlen(pSortStr), sizeof(char), compareChar);

        temp = NULL;
        HASH_FIND_STR(map, pSortStr, temp);

        // strs[i] exist in hash map
        if (temp != NULL)
        {
            temp->count++;
            continue;
        }

        // strs[i] does not exist in hash map
        temp = (struct hash_struct*)malloc(sizeof(struct hash_struct));
        if (temp == NULL)
        {
            perror("malloc");
            freeAll(map);
            map = NULL;
            (*returnSize) = 0;
            return pRetVal;
        }
        snprintf(temp->key, MAX_LENGTH, "%s", pSortStr);
        temp->count = 1;
        HASH_ADD_STR(map, key, temp);

        // update returnSize
        (*returnSize)++;
    }


    /* 2. malloc return arrays */
    // update returnColumnSizes
    (*returnColumnSizes) = (int*)malloc((*returnSize)*sizeof(int));
    if ((*returnColumnSizes) == NULL)
    {
        perror("malloc");
        freeAll(map);
        map = NULL;
        (*returnSize) = 0;
        return pRetVal;
    }
    i = 0;
    for (temp=map; temp!=NULL; temp=temp->hh.next)
    {
        (*returnColumnSizes)[i++] = temp->count;
    }

    // temporary free hash map
    freeAll(map);
    map = NULL;

    // update return char ***
    pRetVal = (char***)malloc((*returnSize)*sizeof(char**));
    if (pRetVal == NULL)
    {
        perror("malloc");
        free((*returnColumnSizes));
        (*returnColumnSizes) = NULL;
        (*returnSize) = 0;
        return pRetVal;
    }
    for (i=0; i<(*returnSize); ++i)
    {
        pRetVal[i] = (char**)malloc(((*returnColumnSizes)[i])*sizeof(char*));
        if (pRetVal[i] == NULL)
        {
            perror("malloc");
            for (j=0; j<i; ++j)
            {
                free(pRetVal[j]);
                pRetVal[j] = NULL;
            }
            free((*returnColumnSizes));
            (*returnColumnSizes) = NULL;
            free(pRetVal);
            pRetVal = NULL;
            (*returnSize) = 0;
            return pRetVal;
        }
        for (j=0; j<(*returnColumnSizes)[i]; ++j)
        {
            pRetVal[i][j] = (char*)malloc(MAX_LENGTH*sizeof(char));
            if (pRetVal[i][j] == NULL)
            {
                perror("malloc");
                for (k=0; k<j; ++k)
                {
                    free(pRetVal[i][k]);
                    pRetVal[i][k] = NULL;
                }
                for (k=0; k<i; ++k)
                {
                    free(pRetVal[k]);
                    pRetVal[k] = NULL;
                }
                free((*returnColumnSizes));
                (*returnColumnSizes) = NULL;
                free(pRetVal);
                pRetVal = NULL;
                (*returnSize) = 0;
                return pRetVal;
            }
            memset(pRetVal[i][j], 0, MAX_LENGTH);
        }
    }


    /* 3. re-use hash map to copy strs[i] to return arrays */
    int idx = 0;
    for (i=0; i<strsSize; ++i)
    {
        // sort strs[i] as hash key
        memset(pSortStr, 0, sizeof(pSortStr));
        snprintf(pSortStr, sizeof(pSortStr), "%s", strs[i]);
        qsort(pSortStr, strlen(pSortStr), sizeof(char), compareChar);

        temp = NULL;
        HASH_FIND_STR(map, pSortStr, temp);

        // strs[i] exist in hash map
        if (temp != NULL)
        {
            // copy strs[i] to return arrays
            snprintf(pRetVal[temp->idx][temp->count], MAX_LENGTH, "%s", strs[i]);

            temp->count++;
            continue;
        }

        // strs[i] does not exist in hash map
        temp = (struct hash_struct*)malloc(sizeof(struct hash_struct));
        if (temp == NULL)
        {
            perror("malloc");
            freeAll(map);
            map = NULL;
            for (j=0; j<(*returnSize); ++j)
            {
                for (k=0; k<(*returnColumnSizes)[j]; ++k)
                {
                    free(pRetVal[j][k]);
                    pRetVal[j][k] = NULL;
                }
                free(pRetVal[j]);
                pRetVal[j] = NULL;
            }
            free((*returnColumnSizes));
            (*returnColumnSizes) = NULL;
            free(pRetVal);
            pRetVal = NULL;
            (*returnSize) = 0;
            return pRetVal;
        }
        snprintf(temp->key, MAX_LENGTH, "%s", pSortStr);
        temp->count = 1;
        temp->idx = idx;
        HASH_ADD_STR(map, key, temp);

        // copy strs[i] to return arrays
        snprintf(pRetVal[idx++][0], MAX_LENGTH, "%s", strs[i]);
    }

    // free hash map
    freeAll(map);
    map = NULL;

    return pRetVal;
}