class Solution {
public:
    bool matchReplacement(string s, string sub, vector<vector<char>>& mappings) {
        unordered_map<char, vector<char>> replace;
        for(int i = 0; i < mappings.size(); i ++){
            replace[mappings[i][1]].push_back(mappings[i][0]);
        }
        unordered_map<char, int> table;
        for(int i = 0; i < sub.size() - 1; i ++){
            table[sub[i]] = i;
        }
        int i = 0, n = sub.size();
        while(i + n - 1 < s.size()){
            int res = 1, offset = n;
            for(int j = n - 1; j >= 0; j--){
                char c = s[i + j];
                if(c != sub[j]){
                    res = 0;
                    for(auto &k : replace[c]){
                        if(k == sub[j]){
                            res = 1;
                            break;
                        }
                    }
                }
                if(!res) break; 
            } 
            if(res) return true;
            else{
                char c = s[i + n - 1];
                if(table.find(c) != table.end()) offset = min(offset, n - 1 - table[c]);
                for(auto &k : replace[c]){
                    if(table[k] != n - 1) offset = min(offset, n - 1 - table[k]);
                }
                i += offset;
            }
        }
        return false;
    }
};