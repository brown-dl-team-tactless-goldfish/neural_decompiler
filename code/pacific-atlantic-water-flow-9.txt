class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
      	int m = heights.size(), n = heights[0].size();
	    vector<vector<int>> reach(m, vector<int>(n)), res;
	    function<void(int, int, int)> dfs = [&dfs, &reach, &res, &heights, m, n] (int r, int c, int ocean) {
            if (!(reach[r][c] & ocean)) {
	            int dir[5] = {0, 1, 0, -1, 0};
                reach[r][c] |= ocean;
	            for (int i = 0; i < 4; i++) {
	                int nr = r + dir[i], nc = c + dir[i + 1];
                    
	                if (min(nr, nc) < 0 || nr >= m || nc >= n) continue;
	                else if (heights[r][c] <= heights[nr][nc]) {
                        dfs(nr, nc, ocean);
                    }
                }
	            if (reach[r][c] == 3) res.push_back({r, c});
            }
        };
        for (int i = 0; i < m; i++) {
	        dfs(i, 0, 1);
            dfs(i, n - 1, 2);
        }
        for (int i = 0; i < n; i++) {
	        dfs(0, i, 1);
            dfs(m - 1, i, 2);
        }
        return res;
    }
};
	
