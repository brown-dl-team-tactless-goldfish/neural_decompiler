class Solution {
public:
    int helper(vector<int>&nums,int i,int j,int k){
        if(i > j)
            return -1;
        if(i == j){
            if(nums[i] > k)
                return 1;
            else
                return -1;
        }
        int n = j-i+1;
        double x = (double)k/(double)n;
        int l = i;
        while(l <= j && nums[l] > x){
            l++;
        }
        if(l > j)
            return n;
        // cout<<ans<<" ";
        return max(helper(nums,i,l-1,k),helper(nums,l+1,j,k));
    }
    int validSubarraySize(vector<int>& nums, int threshold) {
        return helper(nums,0,nums.size()-1,threshold);
    }
};