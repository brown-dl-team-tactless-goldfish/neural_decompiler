class Solution {
public:
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        sort(arr2.begin(), arr2.end());
        
        unordered_map<int, int> path2prev{{-10, 0}};
        auto i2 = arr2.begin();
        for(const auto a1 : arr1){
            unordered_map<int, int> path2curr;
            for(const auto path : path2prev){
                if(a1 > path.first){
                    if(path2curr.find(a1) != path2curr.end()){
                        path2curr[a1] = min(path.second, path2curr[a1]);
                    }else{
                        path2curr[a1] = path.second;
                    }
                }
                
                i2 = upper_bound(arr2.begin(), arr2.end(), path.first);
                if(i2 != arr2.end()){
                    if(path2curr.find(*i2) != path2curr.end()){
                        path2curr[*i2] = min(path.second + 1, path2curr[*i2]);
                    }else{
                        path2curr[*i2] = path.second + 1;
                    }
                }
            }
            
            if(path2curr.empty()) return -1;
            path2prev = path2curr;
            path2prev = std::move(path2curr);
        }
        
        auto res = INT_MAX;
        for(const auto &path : path2prev){
            res = min(res, path.second);
        }
        return res;
    }
};