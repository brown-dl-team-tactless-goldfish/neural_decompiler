#define X first
#define Y second
using Bucket = map< int, set<int> >;
class Solution {
public:
    int minAreaRect( vector< vector<int> >& points, Bucket m={}, int ans=numeric_limits<int>::max() ) {

        for( const auto& p: points )
            if( m.find( p[0] ) == m.end() )
                m[ p[0] ] = { p[1] };
            else
                m[ p[0] ].insert( p[1] );

        for( auto pre = m.cbegin();  pre != m.cend();  ++pre )
            for( auto cur = next( pre );  cur != m.cend();  ++cur ){
                vector<int> common, delta;
                set_intersection( pre->Y.cbegin(), pre->Y.cend(), cur->Y.cbegin(), cur->Y.cend(), back_inserter( common ) );
                adjacent_difference( common.cbegin(), common.cend(), back_inserter( delta ) );
                ans = ( delta.size() < 2 ) ? ans : min( ans, (cur->X - pre->X) * *min_element( next(delta.cbegin()), delta.cend() ));
            }
        return ans < numeric_limits<int>::max() ? ans : 0;
    }
};