class Solution {
public:
    int minStickers(vector<string>& stickers, string target) {
        vector<vector<int>> stickersWrapper(stickers.size(), vector<int>(26, 0));
        for (int i = 0; i < stickers.size(); ++i) {
            const auto& sticker = stickers[i];
            for (const char ch : sticker) {
                ++stickersWrapper[i][ch - 'a'];
            }
        }
        unordered_map<string, int> store;
        return _stick_dfs(stickersWrapper, store, target);
    }

private:
    int _stick_dfs(const vector<vector<int>>& stickersWrapper,
                   unordered_map<string, int>& store,
                   string target) {
        if (target.empty() || store.count(target)) {
            return target.empty() ? 0 : store[target];
        }

        vector<int> targetWrapper(26, 0);
        for (const char c : target) {
            ++targetWrapper[c - 'a'];
        }
        
        int inner_ret = INT_MAX;
        for (int i = 0; i < stickersWrapper.size(); ++i) {
            std::string leftTarget;
            for (int j = 0; j < 26; ++j) {
                if (targetWrapper[j] > stickersWrapper[i][j]) {
                    int leftCount = targetWrapper[j] - stickersWrapper[i][j];
                    char ch = 'a' + j;
                    leftTarget += std::string(leftCount, ch);
                }
            }
            if (leftTarget == target) {
                continue;
            }
            int tmp_ret = _stick_dfs(stickersWrapper, store, leftTarget);
            if (tmp_ret != -1) {
                inner_ret = std::min(inner_ret, tmp_ret + 1);
            }
        }
        store[target] = (inner_ret == INT_MAX) ? -1 : inner_ret;
        return store[target];
    }
};