class Solution {
public:
    vector<vector<int>>dir = {
        {1, 0}, {0, 1}, {-1, 0}, {0, -1}
    };
    vector<vector<int>>way = {
        {}, {1, 3}, {2, 0}, {3, 0}, {1, 0}, {3, 2}, {2, 1}
    };
    vector<vector<bool>>vis;
    int m, n;
    bool dfs(int i, int j, vector<vector<int>>& grid){
        if(i == m - 1 && j == n - 1) return true;
        vis[i][j] = true;
        for(int c : way[grid[i][j]]){
            int x = i + dir[c][0];
            int y = j + dir[c][1];
            if(x >= 0 && x < m && y >= 0 && y < n && !vis[x][y]){
                for(int d : way[grid[x][y]]){
                    if(x + dir[d][0] == i && y + dir[d][1] == j && dfs(x, y, grid)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool hasValidPath(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        vis.resize(m, vector<bool>(n, false));
        return dfs(0, 0, grid);
    }
};