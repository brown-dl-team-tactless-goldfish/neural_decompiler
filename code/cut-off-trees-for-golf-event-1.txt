int m,n;

vector<vector<int>> dir{{1,0},{-1,0},{0,1},{0,-1}};

bool isvalid(int i,int j)
{
    return  (i<0 || j<0 || i>=m || j>=n)? false : true;
     
    
}
int bfs(int s1,int s2,int f1,int f2,vector<vector<int>>forest)
{
    queue<pair<int,int>>q;
    
    q.push({s1,s2});
    
    forest[s1][s2] = 0;
    
    int res = 0;
    
    while(!q.empty())
    {
        int n=q.size();
        
        while(n--)
        {
            auto cur = q.front();
            q.pop();
            
            int x = cur.first, y = cur.second;
            
            if( x == f1 && y == f2)
            {
                return res;
            }
            
            for(auto &a: dir)
            {
                 int c = x + a[0];
                 int d = y + a[1];
                
                if(isvalid(c,d) && forest[c][d]!=0)
                {
                    forest[c][d]=0;
                    
                    q.push({c,d});
                }
            }
        }
        
        res++;
    }
    
    return -1;
}

int cutOffTree(vector<vector<int>>& forest) 
{
    vector<vector<int>>v;
    
    m=forest.size(),n=forest[0].size();
    
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(forest[i][j]>1)
            {  
                v.push_back({forest[i][j],i,j});
            }
        }
    }
    
    sort(v.begin(),v.end());
    
    int i = 0, j = 0,res = 0;
    
    for(auto &x:v)
    {
        int dist = bfs(i,j,x[1],x[2],forest);
        
        if(dist == -1)
        {
            return -1;
        }
        
        res += dist;
        
        i = x[1], j = x[2];
    }
    
    return res;
}