class Solution {
public:
    int maxOperations(vector<int>& nums, int k) {
        
        unordered_map<int,int>track;    // track number occuerence count
        
        int c = 0;  // count sum pairs
        for(auto &t : nums)
        {
            if(track[k-t]>0)    // complement of t exists and so increment count c
            {
                track[k-t]--;   // decrement complement item count in Map 
                c++;
            }   
            else track[t]++;    // no complement found and so increase item t count in Map
        }
        
        return c;
    }
};