
typedef struct Node{
    int key;
    int value;
    int start;
    int end;
    struct Node *next;
} Node;

typedef struct Map {
    Node **item;
    int items;
    int max;
} Map;

Node * create_node(int key, int value, int start){
    Node * new_node = (Node*)malloc(sizeof(Node));
    new_node->key = key;
    new_node->value = value;
    new_node->start = start;
    new_node->end = start;
    new_node->next = NULL;
    
    return new_node;  
}

int hash_function(int key){
    return (key%MAX_VALUE);
}

int max(int a, int b){
    return (a>b)?a:b;
}

int min(int a, int b){
    return (a<b)?a:b;
}

Map * create_table(int size){
    Map * table = (Map*)malloc(sizeof(Map));
    table->items = 0;
    table->max = 0;
    table->item = (Node**)calloc(size, sizeof(Node));
    return table;
}

void update_or_insert(Map* obj, int key, int idx){
    int index = hash_function(key);
    int value = 1;
    if(obj->item[index] == NULL){
        obj->item[index] = create_node(key,value,idx);
        obj->max = max(obj->max, obj->item[index]->value);
    }
    else if(obj->item[index]->key == key){
        obj->item[index]->value += value;
        obj->item[index]->end = idx;
        obj->max = max(obj->max, obj->item[index]->value);
    }
}

int get_len(Map* obj, int key){
    int index = hash_function(key);
    int ret = -1;
    if(obj->item[index] == NULL){
       ret = -1;
    }
    else if(obj->item[index]->key == key){
        ret = (obj->item[index]->end - obj->item[index]->start) + 1;
    }
    return ret;
}

int find(Map* obj, int key){
    int index = hash_function(key);
    if(obj->item[index] == NULL){
        return -1;
    }
    else{
        return obj->item[index]->value;
    }
}

int findShortestSubArray(int* nums, int numsSize){
    Map * obj = create_table(MAX_VALUE);
    int min_len = MAX_VALUE;

    for (int i = 0; i < numsSize; i++){
        update_or_insert(obj, nums[i], i);
    }
    for (int i = 0; i < numsSize; i++){
        if(find(obj, nums[i]) == obj->max){
            min_len = min(min_len, get_len(obj, nums[i]));
        }
    }
    return min_len;
}