class Solution {
public:
    int minMoves(vector<int>& a, int limit) {
        // each pair can provide a range sum of 
        // [l, r] => [min(a, b) + 1, max(a, b) + limit]
        // __
        //  ___
        //  ______
        //       ___
        //         ___
        //         ___
        //         ___
        //         ___
        //         ___
        //                  _____
        //                            _____
        // so basically each pair can provide some ranges like above
        // and to make sum equal to one of the values of the ranges 
        // we need only 1 move for that particular pair
        
        int n = a.size();
        vector<int> LineSweep(2e5, 0);
        vector<int> sum(2e5, 0);
        for(int i = 0; i < n/2; i++){
            int mn = min(a[i], a[n - 1 - i]) + 1;
            int mx = max(a[i], a[n - 1 - i]) + limit;
            LineSweep[mx + 1]++;
            LineSweep[mn]--;
            sum[a[i] + a[n - 1 - i]]++;
        }
        int res = 2 * n;
        int cur = n;
        for(int i = 2; i < 2e5; i++){
            cur += LineSweep[i];
            res = min(res, cur - sum[i]);
        }
        return res;
    }
};