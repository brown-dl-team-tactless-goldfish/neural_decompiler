struct Node
{
    double sumOfValue;
    double countOfNode;
    Node(){
        sumOfValue=0;
        countOfNode=0;
    }
};
class Solution {
    private:
    int count;
public:
    int averageOfSubtree(TreeNode* root) {
        count=0;
        fun(root);
   return count;
    }
    Node* fun(TreeNode* root)
    {
        if(!root)
            return new Node();
        Node* right_sub=fun(root->right);
        Node* left_sub=fun(root->left);
      
        Node* n=new Node();
        n->sumOfValue=right_sub->sumOfValue+left_sub->sumOfValue+root->val;
        n->countOfNode=right_sub->countOfNode+left_sub->countOfNode+1;
        
        if(int(n->sumOfValue/n->countOfNode)==root->val)
            count+=1;
        return n;
    }
};

Time Complexity: O(n)
Space Complexity: O(n), due to recursion stack.