class Solution {
private:
    int dp[101][101][502];
public:
    bool solve(int i,int j,vector<vector<char>> &grid,int close){
        if(i < 0 or j < 0 or i >= grid.size() or j >= grid[0].size()) return false;
        if(close < 0) return false;
        if(i == grid.size()-1 and j == grid[0].size()-1){
            close += grid[i][j] == ')' ? -1 : 1;
            return close == 0;
        }
        
        if(dp[i][j][close] != -1) return dp[i][j][close];
        
        int new_close = grid[i][j] == ')' ? close - 1 : close + 1;
        
        bool op1 = solve(i+1,j,grid,new_close);
        bool op2 = solve(i,j+1,grid,new_close);
        
        return dp[i][j][close] = (op1 or op2);
    }
    bool hasValidPath(vector<vector<char>>& grid) {
        if(grid[0][0] == ')') return false;
        memset(dp,-1,sizeof dp);
        return solve(0,0,grid,0);
    }
};