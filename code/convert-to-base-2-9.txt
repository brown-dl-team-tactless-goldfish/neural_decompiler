    string baseNeg2(int N) {
        int curr = (N%2 == 0) ? 0 : 1;
        int idx = 2;

        string ans = (curr) ? "1" : "0";

		//Increment curr until it exceeds N (or equals)
        while (curr < N) {
			 //only odd bits give a positive number
			 // Remember: Input: 3,  Output: "111"  Explantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3
            curr |= 1 << idx;
            idx += 2; //Increment by 2 to retrieve the next pos
            ans = "10" + ans; //put the bit to 1
        }

        idx -= 3;
		// Go back and this time we gonna try to regress "curr"
        while (idx > 0 && curr != N) {
		
            int c = (1 << idx);
            if (curr - c >= N)
            {
                curr -= c;
                int i = ans.size() - 1 - idx;
                if (i >= 0) {
                    ans[i] = (ans[i] == '0') ? '1' : '0';  //set to 0 if it was a positive, or set to 1 to reduce the current number
                }
            }
			// Go back
            --idx;
        }

        return ans;   
    }