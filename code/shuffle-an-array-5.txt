typedef struct {
    int *original;
    int size;
} Solution;

Solution* solutionCreate(int* nums, int size) {
    Solution* obj=(Solution*)malloc(sizeof(Solution));
    obj->original=nums;
    obj->size=size;
    return obj;
}

/** Resets the array to its original configuration and return it. */
int* solutionReset(Solution* obj, int *returnSize) {
    *returnSize=obj->size;
    return obj->original;
}

/** Returns a random shuffling of the array. */
int* solutionShuffle(Solution* obj, int *returnSize) {
    *returnSize=obj->size;
    int *ret=(int*)calloc((*returnSize),sizeof(int));
    int *array=(int*)calloc((*returnSize),sizeof(int));
    int temp=0;
    int count=-1;
    for(int i=0;i<*returnSize;i++){
        temp=random()%((*returnSize)-i);
        for(int j=0;j<*returnSize;j++){
            if(array[j]==0){
                count++;
                if(count==temp){
                    array[j]=1;
                    count=-1;
                    ret[i]=obj->original[j];
                    break;
                }
            }
        }
    }
    return ret;
}

void solutionFree(Solution* obj) {
    free(obj->original);
    free(obj);
}

/**
 * Your Solution struct will be instantiated and called as such:
 * struct Solution* obj = solutionCreate(nums, size);
 * int* param_1 = solutionReset(obj);
 * int* param_2 = solutionShuffle(obj);
 * solutionFree(obj);
 */