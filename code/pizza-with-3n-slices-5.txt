class Solution {
    int helper(vector <int>& slices,int s,int e,int n,vector <vector<int>>& dp){
        if(n == 0 || s > e)
            return 0;
        if(dp[s][n] != -1)
            return dp[s][n];
        int include = slices[s] + helper(slices,s+2,e,n-1,dp);
        int exclude = helper(slices,s+1,e,n,dp);
        return dp[s][n] = max(include,exclude);
    }
public:
    int maxSizeSlices(vector<int>& slices) {
        int n = slices.size();
        vector <vector<int>> dp(n,vector<int>(n/3+1,-1));
        int opt1 = helper(slices,0,slices.size()-2,n/3,dp);
        vector <vector<int>> dp2(n,vector<int>(n/3+1,-1));
        int opt2 = helper(slices,1,slices.size()-1,n/3,dp2);
        return max(opt1,opt2);
    }
};