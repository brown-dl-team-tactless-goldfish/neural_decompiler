class Solution {
public:
    bool color_it(vector<int> Graph[], vector<int>& color, int start) {
        color[start] = 1;
        
        queue<int> Q;
        Q.push(start);
        while(! Q.empty()) {
            int curr = Q.front();
            Q.pop();
            
            for(int v : Graph[curr]) {
                if(color[v] == color[curr]) return false;
                
                if(color[v] == -1) {
                    Q.push(v);
                    color[v] = 1 - color[curr];
                }      
            }
        }
        return true;
    }
    
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        
        //make graph
        vector<int> Graph[N+1];
        for(int i = 0; i < dislikes.size(); i++) {
            Graph[dislikes[i][0]].push_back(dislikes[i][1]);
            Graph[dislikes[i][1]].push_back(dislikes[i][0]);
        }
        
        vector<int> color;
        color.assign(N + 1, -1);
        
        bool ans = true;
        for(int i = 1; i <= N; i++) {
            if(color[i] == -1)
                ans = ans && color_it(Graph, color, i);
        }
        
        return ans;
    }
};