typedef struct {
    char val;
    int f, idx;
} map_t;

int numberOfDigits(int n) {
    if (n == 0)
        return 1;
    
    int digits = 0;
    while(n > 0) {
        n /= 10;
        digits++;
    }
    
    return digits;
}

#define N 11

char * getHint(char * secret, char * guess){
    map_t *map = (map_t *) malloc(N * sizeof(map_t));
    int i, bulls, cows, bullsDigits, cowsDigits;
    
    for (i = 0; i < N; i++) {
        map[i].f = 0;
        map[i].idx = -1;
    }
        
    
    for (i = 0; secret[i] != '\0'; i++) {
        int idx = secret[i] - '0';
        map[idx].val = secret[i];
        map[idx].idx = i;
        map[idx].f++;
    }

    bulls = cows = 0;
    for (i = 0; guess[i] != '\0'; i++) {
        int idx = guess[i] - '0';
        if (map[idx].idx > -1) {
            if (guess[i] == secret[i]) {
                bulls++;
                if (map[idx].f <= 0)
                    cows--;    
            } else {
                if (map[idx].f > 0)
                    cows++;
            } 
            map[idx].f--;
        }
    }
    free(map);
    
    bullsDigits = numberOfDigits(bulls);;
    cowsDigits = numberOfDigits(cows);
    
    char *hint = (char *) calloc((3 + bullsDigits + cowsDigits), sizeof(char));
    
    sprintf(hint, "%dA%dB", bulls, cows);
    
    return hint;
}