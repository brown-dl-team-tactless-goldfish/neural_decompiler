int hash(int a,int b)
{
	if(a<b)
		return (a<<15)+b;
	else return (b<<15)+a;
}
int binarySearch(int start,int end, int target, vector<int>& arr)
{
	int ret=start-1,val=arr[start-1],q;
	while(start<=end)
	{
		q=start+(end-start)/2;
		if(arr[q]+val>target)
			if(q>start&&arr[q-1]+val>target)
				end=q-1;
			else return q;
		else start=q+1;
	}
	return ret;
}
vector<int> countPairs(int n, vector<vector<int>>& edges, vector<int>& queries) 
{
	unordered_map<int,int> adj;
	int anti_mask=32767;
	vector<int> count(n+1);
	for(auto& x:edges)
	{
		count[x[0]]++;
		count[x[1]]++;
		adj[hash(x[0],x[1])]++;
	}
	vector<int> temp=count;
	sort(count.begin(),count.end());
	vector<int> ret(queries.size());
	for(int j=0;j<queries.size();++j)
	{
		for(int i=1;i<=n;++i)
		{
			int end=binarySearch(i+1,n,queries[j],count);
			if(end>i)
				ret[j]+=n-end+1;
		}
		for(auto itr=adj.begin();itr!=adj.end();++itr)
		{
			int v=itr->first&anti_mask,u=itr->first>>15;
			if(temp[u]+temp[v]>queries[j]&&temp[u]+temp[v]-itr->second<=queries[j])
				--ret[j];
		}
	}
	return ret;
}