class Solution {
public:
    int N = 5e4+10; //max prime factor that we can have
    vector<int> primes;
    int par[100002];
    
    void func(){
        bool prime[N + 1];
        memset(prime, true, sizeof(prime));

        for (int p = 2; p * p <= N; p++)
        {
            if (prime[p] == true)
            {
                for (int i = p * p; i <= N; i += p)
                    prime[i] = false;
            }
        }
        for (int p = 2; p <= N; p++)
            if (prime[p])
                primes.push_back(p);
    }
    
    int find(int a){
        if(par[a]==a) return a;
        return par[a]=find(par[a]);
    }
    
    void uni(int a, int b){
        a=find(a);
        b=find(b);
        if(a==b) return;
        par[b]=a;
    }

    bool gcdSort(vector<int>& nums) {
        for(int i=0;i<100002;i++) par[i]=i;
        func();
        vector<int> mp(1e5+1,0);
        for(auto it: nums){
            mp[it]++;
        }
        for(auto it: primes){
            for(int p=it;p<=1e5;p+=it){
                if(mp[p]>0){
                    uni(p,it);
                }
            }
        }
        
        map<int, vector<int> > vis;
        
        vector<int> dupl = nums;
        sort(dupl.begin(), dupl.end());
        
        for(int i=0;i<nums.size();i++){
            vis[dupl[i]].push_back(i);
        }
        
        for(auto it: nums){
            if(find(it)!=find(nums[vis[it][0]])){
                return false;
            }
            vis[it].erase(vis[it].begin());
        }
        
        return true;
    }
};