class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root)
        {
            return "";
        }
    
        return to_string(root->val)+ "," + serialize(root->left) + serialize(root->right);   
    }

    TreeNode* buildBst(queue<int>& inorder, int min, int max)
    {
        if(inorder.empty() or inorder.front() < min or inorder.front() > max )
        {
            return nullptr;
        }
        
        TreeNode* root = new TreeNode(inorder.front());
        inorder.pop();
        
        root->left = buildBst(inorder, min, root->val);
        root->right = buildBst(inorder, root->val, max);
        
        return root;
    }
    
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        queue<int> inorder;
        stringstream ss(data);
        string input;
        
        while(getline(ss, input, ','))
        {
            inorder.push(stoi(input));
        }
        
        return buildBst(inorder, INT_MIN, INT_MAX);
    }
};