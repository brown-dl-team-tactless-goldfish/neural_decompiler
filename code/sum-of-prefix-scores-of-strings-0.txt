#define CHAR_SET    26

typedef struct trie{
    struct trie *children[CHAR_SET];
    int cnt;
} Trie;

Trie* trieCreate() {
    return calloc(sizeof(Trie), 1);
}

int trieInsert(Trie* obj, char * word) {
    
    int len = strlen(word), i, idx;
    for(i = 0; i < len; i++) {
        idx = word[i] - 'a';
        if(!obj->children[idx])
            obj->children[idx] = trieCreate();
        obj->children[idx]->cnt++;
        obj = obj->children[idx];
    } 
    return len;
}

int triePreCnt(Trie* obj, char * word) {
    int len = strlen(word), i, res = 0;
    int idx;
    for(i = 0; i < len; i++) {
        idx = word[i] - 'a';
        res += obj->children[idx]->cnt;
        obj = obj->children[idx];
    }
    return res;
}

int* sumPrefixScores(char ** words, int wordsSize, int* returnSize){
    Trie *trie = trieCreate();
    int maxLen = INT_MIN;
    for(int i = 0; i < wordsSize; i++)
        maxLen = fmax(maxLen, trieInsert(trie, words[i]));
    
    int *result = calloc(sizeof(int), maxLen + 1);
    *returnSize = 0;
    
    for(int i = 0; i < wordsSize; i++) {
        result[(*returnSize)++] = triePreCnt(trie, words[i]);
    }
    return result;
}