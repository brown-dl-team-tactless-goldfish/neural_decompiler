#include <math.h>

int fullCount[] = {1,11,111,1111,11111,111111,1111111,11111111,111111111};
int tens[] = {1, 10, 100, 1000, 10000,100000,1000000,10000000,100000000,1000000000};
double logN;

class Solution {
    public:
    int findKthNumber(int n, int k) {
        logN = log10(n);
        return find(n , k, 0);
    }

    int find(const int n , int delta, const int pre) {

        for(int i = 0; i <= 9; i++) {
            int now = pre + i;
            if(now == 0) continue;
            if(delta == 1) return now;
            int count =countStartWith(n, now);
            if(delta <= count) {
                return find (n , delta - 1, (now) * 10);
            }
            delta -= count;
        }
        return -1;
    }

    int countStartWith(const int n, long pre) {
        int low = logN - log10(pre);
        if(low < 0) {
            return 0;
        } else if(low == 0) {
            return 1;
        }

        int high = logN - log10(pre + 1);
        if(low == high) {
            return fullCount[low];
        } else {
            return n % tens[low] + fullCount[low -1 ] + 1;
        }
    }
};