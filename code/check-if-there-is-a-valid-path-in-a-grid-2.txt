class Solution:
    def hasValidPath(self, grid: List[List[int]]) -> bool:
        Pair = collections.namedtuple("Pair", "x y last")
        n, m = len(grid), len(grid[0])
        q = collections.deque()
        visited = [[dict() for _ in range(m)] for _ in range(n)]
        direction = ["u", "d", "l", "r"]
        
        for c in direction:
            q.append(Pair(x=0, y=0, last=c))
            visited[0][0][c] = True
        
        while len(q) > 0:
            p = q.popleft()
            x, y, last = p.x, p.y, p.last
            
            # next is up
            if grid[x][y] == 2 and last == "d" or grid[x][y] == 5 and last == "l" or grid[x][y] == 6 and last == "r":
                if x > 0 and (grid[x-1][y] == 2 or grid[x-1][y] == 3 or grid[x-1][y] == 4) and "d" not in visited[x-1][y]:
                    q.append(Pair(x=x-1, y=y, last="d"))
                    visited[x-1][y]["d"] = True
            # next is left
            if grid[x][y] == 1 and last == "r" or grid[x][y] == 3 and last == "d" or grid[x][y] == 5 and last == "u":
                if y > 0 and (grid[x][y-1] == 1 or grid[x][y-1] == 4 or grid[x][y-1] == 6) and "a" not in visited[x][y-1]:
                    q.append(Pair(x=x, y=y-1, last="r"))
                    visited[x][y-1]["r"] = True
            # next is down
            if grid[x][y] == 2 and last == "u" or grid[x][y] == 3 and last == "l" or grid[x][y] == 4 and last == "r":
                if x < n - 1 and (grid[x+1][y] == 2 or grid[x+1][y] == 5 or grid[x+1][y] == 6) and "u" not in visited[x+1][y]:
                    q.append(Pair(x=x+1, y=y, last="u"))
                    visited[x+1][y]["u"] = True
            # next is right
            if grid[x][y] == 1 and last == "l" or grid[x][y] == 4 and last == "d" or grid[x][y] == 6 and last == "u":
                if y < m - 1 and (grid[x][y+1] == 1 or grid[x][y+1] == 3 or grid[x][y+1] == 5) and "l" not in visited[x][y+1]:
                    q.append(Pair(x=x, y=y+1, last="l"))
                    visited[x][y+1]["l"] = True
            
        for c in direction:
            if c in visited[n-1][m-1]:
                return True
        return False