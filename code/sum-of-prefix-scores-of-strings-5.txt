struct TrieNode {
    int next[26] = {};
    int cnt = 0;
    
    TrieNode() {
        fill(next, next+26, -1);
    }
};

class Solution {
public:
    vector<int> sumPrefixScores(vector<string>& words) {
        int n = size(words);
        vector<int> ans; ans.reserve(n);
        trie.emplace_back();
        for (auto& w: words) add_string(w);
        for (auto& w: words) ans.push_back(search(w));
        return ans;
    }
private:
    vector<TrieNode> trie;
    
    void add_string(string& s) {
        int v = 0;
        for (char ch: s) {
            int c = ch - 'a';
            if (trie[v].next[c] == -1) {
                trie[v].next[c] = size(trie);
                trie.emplace_back();
            }
            v = trie[v].next[c];
            trie[v].cnt++;
        }
    }
    
    int search(string& s) {
        int cnt = 0, v = 0;
        for (char ch: s) {
            int c = ch - 'a';
            if (trie[v].next[c] == -1) break;
            v = trie[v].next[c];
            cnt += trie[v].cnt;
        }
        return cnt;
    }
};