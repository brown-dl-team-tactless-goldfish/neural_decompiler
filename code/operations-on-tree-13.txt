class LockingTree {
public:
    int n;
    vector<vector<int>> adj;
    vector<int>locked;
    vector<int>par;
    LockingTree(vector<int>& parent) {
        n=parent.size();
        adj.resize(n);
        locked.resize(n);
        fill(locked.begin(),locked.end(),-1);
        par.push_back(-1);
        for(int i=1;i<parent.size();i++){
            adj[parent[i]].push_back(i);
            par.push_back(parent[i]);
        }
    }
    
    bool lock(int num, int user) {
        if(locked[num]==-1){
            locked[num]=user;
            return true;
        }
        return false;
    }
    
    bool unlock(int num, int user) {
        if(locked[num]==user){
            locked[num]=-1;
            return true;
        }
        return false;
    }
    void dfs(int curr,bool& ans){
        if(ans) return;
        for(auto child:adj[curr]){
            if(locked[child]!=-1){
                ans=true;
                return;
            }
            dfs(child,ans);
        }
    }
    void dfs2(int curr){
        for(auto child:adj[curr]){
            locked[child]=-1;
            dfs2(child);
        }
    }
    bool to_check(int num,int user){
        bool ans1=false,ans2=true;
        dfs(num,ans1);
        while(num!=-1){
            if(locked[num]!=-1){
                ans2=false;
                break;
            }
            num=par[num];
        }
        return ans1 and ans2;
    }
    bool upgrade(int num, int user) {
        if(locked[num]==-1 and to_check(num,user)){
            locked[num]=user;
            dfs2(num);
            return true;
        }
        return false;
    }
};

/**
 * Your LockingTree object will be instantiated and called as such:
 * LockingTree* obj = new LockingTree(parent);
 * bool param_1 = obj->lock(num,user);
 * bool param_2 = obj->unlock(num,user);
 * bool param_3 = obj->upgrade(num,user);
 */