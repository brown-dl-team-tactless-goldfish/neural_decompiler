class Solution {
public:
    bool dfs(vector<vector<char>>& b, int r, int c, char col, int dl, int dr)
    {
        int x = r + dl, y = c + dr;
        if(x >= 8 || y >= 8 || x < 0 || y < 0 || b[x][y] == '.') //check validity
            return false;
        if(b[r][c] != b[x][y]) //If unequal adjacent cells found which do not have value as '.' return true 
            return true;
        return dfs(b, x, y, col, dl, dr);
    }
    bool checkMove(vector<vector<char>>& b, int r, int c, char col) {
        b[r][c] = col;
        int dir[3] = {0, 1, -1};
        bool ans = false;
        for(int i=0; i<3; ++i)
            for(int j=0; j<3; ++j)
                if(!(dir[i] == 0 && dir[j] == 0))  //used this condition so that [0,0] is never used to make a path
                {
                    int x = r + dir[i], y = c + dir[j];
                    if(x <= 7 && y <= 7 && x >= 0 && y >= 0 && b[x][y] != '.' && b[x][y] != b[r][c])
                        ans = ans || dfs(b, x, y, b[x][y], dir[i], dir[j]); //here dir[i] and dir[j] is passed to specify the direction of movement
                }
        return ans;
    }
};