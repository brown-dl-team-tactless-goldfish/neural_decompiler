class Solution {
    char get(int i, const string& word1, const string& word2) {
        return i < word1.length() ? word1[i] : word2[i - word1.length()];
    }
public:
    int longestPalindrome(string word1, string word2) {
        const int n = word1.length() + word2.length();
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int d = 1; d < n; ++d) {
            for (int i = 0; i + d < n; ++i) {
                const int j = i + d;
                dp[i][j] = max(max(dp[i + 1][j], dp[i][j - 1]),
                get(i, word1, word2) == get(j, word1, word2) ? (2 + dp[i + 1][j - 1]) : 0);
                
            }
        }
        int r = 0;
        for (int i = 0; i < word1.length(); ++i) {
            for (int j = 0; j < word2.length(); ++j) {
                if (word1[i] == word2[j]) {
                    r = max(r, 2 + dp[i + 1][j + word1.length() - 1]);
                }
            }
        }
        return r;
    }
};