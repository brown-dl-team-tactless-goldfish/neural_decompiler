# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator:

    def __init__(self, root: TreeNode):
        self.queue = []
        self.length = 0
        self.curIdx = 0
        
        self.helper(root)
        
        # print ("self.queue = ", self.queue)
        # print ("self.length = ", self.length)
        # print ("self.curIdx = ", self.curIdx)
    def helper(self, curNode):
        if curNode == None:
            return
        self.helper(curNode.left)
        self.queue.append(curNode.val)
        self.length += 1
        self.helper(curNode.right)

    def next(self) -> int:
        """
        @return the next smallest number
        """
        # print ("next self.curIdx = ", self.curIdx)
        # print ("next self.length = ", self.length)
        if self.curIdx > self.length - 1:
            return None
        else:
            res = self.queue[self.curIdx]
            self.curIdx += 1
            return res
        
        

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        # print ("hasNext self.curIdx = ", self.curIdx)
        # print ("hasNext self.length = ", self.length)
        if (self.curIdx <= self.length -1):
            return True
        else:
            return False
        # return self.curIdx == (self.length -1)