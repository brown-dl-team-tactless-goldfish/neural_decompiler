class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
       map<char, char> f, b;
        for(int i=0; i<9; i++)
        {
             f['0' + i] = '0' + i + 1;
             b['9' - i] = '9' - i - 1;
        }
        
        f['9'] = '0';
        b['0'] = '9';
        
        set<string> st;
        string s = "0000";
        for(auto &t : deadends)
        {
            if(t == s) return -1;
            st.insert(t);
        }
        queue<string> q;
        q.push(s);
        st.insert(s);
        int ans = 0;
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                string t = q.front();
                q.pop();
                if(t==target) return ans;
                for(int i=0; i<4; i++)
                {
                    char c = t[i];
                    
                    t[i] = f[c];
                    if(st.find(t)==st.end())
                    {
                        q.push(t);
                        st.insert(t);
                    }
                    
                    t[i] = b[c];
                    if(st.find(t)==st.end())
                    {
                        q.push(t);
                        st.insert(t);
                    }
                    
                    t[i] = c;
                }
            }
            ans++;
        }
        return -1;
    }
};