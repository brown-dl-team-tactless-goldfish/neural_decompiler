 // reference/help:: https://leetcode.com/problems/minimum-area-rectangle/discuss/900264/IntuitiveWith-PicturesC%2B%2BJavaExplanation
 
    int minAreaRect(vector<vector<int>>& points) {
        // create a hashmap to insert x and corresponding y corrdinates for that x
        // it's given that rectangle is parallel to x and y axis
        unordered_map<int, unordered_set<int>> mp;
        for(auto point: points)
            mp[point[0]].insert(point[1]);
        int area= INT_MAX;
        for(int i=0;i<points.size()-1;i++){
            // x1,y1 is point A; x2,y2 is point B
            // if x1!=x2 and y1!=y2 means that they can correspond to the diagonal of the rectangle
            for(int j=i+1;j<points.size();j++){
                int x1=points[i][0];
                int y1= points[i][1];
                int x2= points[j][0];
                int y2= points[j][1];
                // for given x1,y1 and x2, y2 we know that other two points C = x2,y1 and D= x1,y2
                // so we find those points in the hashmap
                // if found we find the current area
                if(x1!=x2 && y1!=y2){
                    if(mp[x1].find(y2)!=mp[x1].end() && mp[x2].find(y1)!=mp[x2].end()){
                        int curr_area= abs(x2-x1)* abs(y2-y1);
                        area= min(area,curr_area);
                    }
                }
            }
        }
        if(area==INT_MAX) return 0;
        else
            return area;
    }