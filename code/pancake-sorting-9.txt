class Solution {
public:
    
    void reverse(vector<int>&arr, int ed){
        int st = 0;
        while(st < ed){
            int temp = arr[st];
            arr[st] = arr[ed];
            arr[ed] = temp;
            ++st; --ed;
        }
        return;
    }
    
    int findMaxEle(vector<int>&A, int last){
        int picked = last;
        
        for(int j = last - 1; j >= 0; --j){
            if(picked == -1){
                picked = j;
            }else{
                if(A[j] > A[picked]){
                    picked = j;
                }
            }
        }
        return picked;
    }
    
    vector<int> pancakeSort(vector<int>& A) {
        
        
        vector<int>res;
        int last = A.size()-1;
        
        for(int i = 0; i < A.size(); ++i){
            
            int picked = findMaxEle(A,last);
            
            //largest already in last pos/current order
            if(picked == last){
                --last;
                continue;
            }
            
            //only swap if the max element not at the 0 index
            if(picked !=0){
                reverse(A,picked);
                res.push_back(picked+1);
            }
            
            //swap the 0 index element to the last pos.
            reverse(A,last);
            res.push_back(last+1);
            
            --last;
        }
        
        return res;
        
    }
};