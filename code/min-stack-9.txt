#define max_size 1000
#define INT_MAX 0x7FFFFFFF


typedef struct _stack{
    int *stack;
    int index;
    int min;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() {
    MinStack *min_stack = (MinStack*)malloc(sizeof(MinStack));
    min_stack->stack = (int *)malloc(max_size * sizeof(int));
    min_stack->index = 0;
    min_stack->min = INT_MAX;
    return min_stack;
}

void minStackPush(MinStack* obj, int x) {
    if (obj->index >= max_size)
    {
        return;
    }    
    obj->stack[obj->index++] = x;
    obj->min = x < obj->min ? x : obj->min;
}

void minStackPop(MinStack* obj) {
    if (obj->index == 0)
    {
        return;
    }
    obj->index--;
    obj->min = INT_MAX;
    int i = 0;
    for (i = 0; i < obj->index; i++)
    {
        obj->min = obj->stack[i] < obj->min ? obj->stack[i] : obj->min; 
    }
}

int minStackTop(MinStack* obj) {
    if (obj->index == 0)
    {
        return -1;
    }
    return obj->stack[obj->index - 1];
}

int minStackGetMin(MinStack* obj) {
    if (obj->index == 0)
    {
        return -1;
    }
    return obj->min;
}

void minStackFree(MinStack* obj) {
    if (NULL != obj)
    {
        free(obj->stack);
        free(obj);
    }
}


/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/