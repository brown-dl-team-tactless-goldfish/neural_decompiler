int ladderLength(char * beginWord, char * endWord, char ** wordList, int wordListSize){
    int len = strlen(beginWord);
    
    //table[i][0] : count
    //table[i][x] : record items that distance is 1 from  wordList[i]
    int** table = malloc(wordListSize * sizeof(int*));
    for(int i = 0; i < wordListSize; i++){
        table[i] = malloc(wordListSize * sizeof(int));
    }
    int last = -1;
    int pos;
    for(int i = 0; i < wordListSize; i++){
        table[i][0] = 0;
    }
    for(int i = 0; i < wordListSize ; i++){
        if(strcmp(endWord, wordList[i]) == 0)
            last = i;
        for(int j = i+1; j < wordListSize; j++){
            int d = 0;
            for(int k = 0; k < len; k++){
                if(wordList[i][k] != wordList[j][k])
                    d++;
                if(d > 1)
                    break;
            }
            if(d == 1){                 
                table[i][0]++;
                pos = table[i][0];   
                table[i][pos] = j; 
                
                table[j][0]++;
                pos = table[j][0];   
                table[j][pos] = i; 
            }
        }
        table[i] = realloc(table[i], (table[i][0]+1)* sizeof(int) );
    }

    int* stack1 = malloc((wordListSize+1) * sizeof(int));
    int* stack2 = malloc((wordListSize+1) * sizeof(int));
    int idx1 = 0, idx2 = 0;
    bool* alreadyAdd = calloc(wordListSize, sizeof(int));
    for(int i = 0; i < wordListSize; i++){
        int d = 0;
        for(int j = 0; j < len; j++){
            if(beginWord[j] != wordList[i][j])
                d++;
            if(d > 1)
                break;
        }
        if(d == 1){
            if(i == last)
                return 2;
            stack1[idx1] = i;
            alreadyAdd[i] = true;
            idx1++;
        }
    }
    if(idx1 == 0)
        return 0;
    int level = 2;
    bool* visit = calloc(wordListSize, sizeof(int));    
    bool flag = true;
    int cn = idx1 ;
    int p;
    while(idx1 > 0 || idx2 > 0){
        if(idx1 > 0){
            for(int i = 0; i < idx1; i++){
                p = stack1[i];
                if(visit[p])
                    continue;
                visit[p] = true;
                for(int j = 1; j <= table[p][0]; j++){
                    int z = table[p][j]; 
                    if(z == last)
                        return level + 1;
                    if(visit[z] == false && alreadyAdd[z] == false){
                        stack2[idx2] = z;
                        alreadyAdd[z] = true;  
                        idx2++;
                    }
                }
            }
            idx1 = 0;            
        }
        else{
            for(int i = 0; i < idx2; i++){
                p = stack2[i];
                if(visit[p])
                    continue;
                visit[p] = true;
                for(int j = 1; j <= table[p][0]; j++){
                    int z = table[p][j]; 
                    if(z == last)
                        return level+1;
                    if(visit[z] == false && alreadyAdd[z] == false){
                        stack1[idx1] = z;
                        alreadyAdd[z] = true;  
                        idx1++;
                    }
                }
            }
            idx2 = 0;
        }
        level++;
    }
    
    return 0;
}