class Solution {
private:
    int countRangeSum(vector<long long>& data, int left, int right, int lower, int upper) {
        if (left >= right) return 0;
        int mid = (left&right) + ((left^right)>>1);
        if (left == mid) { return data[left] >= lower && data[left] <= upper; }
        int count = countRangeSum(data, left, mid, lower, upper) + countRangeSum(data, mid, right, lower, upper);
        for (int i = left; i < mid; i++) { count += upper_bound(data.begin()+mid, data.begin()+right, data[i]+upper) - lower_bound(data.begin()+mid, data.begin()+right, data[i]+lower); }
        sort(data.begin()+left, data.begin()+right);
        return count;
    }
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        if (nums.empty()) return 0;
        vector<long long> data(nums.begin(), nums.end());
        for (int i = 1; i < data.size(); i++) { data[i] += data[i-1]; }
        return countRangeSum(data, 0, data.size(), lower, upper);
    }
};