class Solution {
public:
   int maximumCostSubstring(string s, string chars, vector<int> &vals)
{
    int n = s.length();
    int maxAns = 0;
    int cur_cost = 0;
    unordered_map<char, int>mp;

    for (int i = 0; i < chars.length(); i++)
    {
        mp[chars[i]] = vals[i];
    }

    int start = 0;
    for (int i=0 ; i < n; i++)
    {
        char c = s[i];
        if (mp.count(c))
        {
            cur_cost += mp[c];
        }
        else
        {
            cur_cost += (c - 'a' + 1);
        }

        if (cur_cost < 0)
        {
            cur_cost = 0;
            start = i + 1;
        }

        maxAns = max(maxAns, cur_cost);
    }

    return maxAns;
}
};