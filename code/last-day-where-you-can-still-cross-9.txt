vector<pair<int,int>> dir{{-1,0},{1,0},{0,1},{0,-1}};

bool valid(int x, int y,vector<vector<int>>& grid)
{
    return x >=0 && x<grid.size() && y >= 0 && y<grid[0].size()?true:false;
    
}

bool help(int row, int col, vector<vector<int>>& c, int day)
{
    vector<vector<int>> grid(row,vector<int>(col,0));
    
    for(int i=0; i<day; i++)
    {
        grid[c[i][0]-1][c[i][1]-1] = 1;
    }
    
    queue<pair<int,int>> q;
    
    for(int i=0; i<col; i++)
    {
        if(grid[0][i] == 0)
        {
            q.push({0,i});
        }
        
        grid[0][i] = 1;
    }
    
    while(!q.empty())
    {
        int n = q.size();
        
        while(n--)
        {
           auto cur = q.front();
            q.pop();
            
            int nr = cur.first,nc = cur.second;
            
            if(nr == row-1)
            {
                return true;
            }
            for(auto &x: dir)
            {
                int nx = nr+x.first;
                int ny = nc + x.second;
                
                if(valid(nx,ny, grid) && grid[nx][ny] == 0)
                {
                    q.push({nx,ny});
                    
                    grid[nx][ny] = 1;
                }
            }
        }
    }
    
    return false;
    
}
int latestDayToCross(int row, int col, vector<vector<int>>& cells)
{
    int left = 1, right = cells.size(), ans;
    
    while(left <= right)
    {
        int mid = left + (right-left) / 2;
        
        if(help(row,col,cells, mid))
        {
            ans = mid;
            
            left = mid+1;
        }
        else
        {
            right = mid-1;
        }
    }
    
    return ans ;
}