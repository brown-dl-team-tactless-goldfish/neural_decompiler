#define GRID(i, j)  grid[(i) * n + (j)]

#define NORTH 0x1
#define EAST  0x2
#define SOUTH 0x4
#define WEST  0x8

#define WALL  0xF


int countUnguarded (int m, int n, 
                    int** guards, int guardsSize, int* guardsColSize, 
                    int** walls, int wallsSize, int* wallsColSize) {
    int  i, j, k, count = 0;
    char grid[100001] = {0};
    
    /* Set wall gird as WALL (0xF) */
    for (k = 0; k < wallsSize; k++) {
        GRID(walls[k][0], walls[k][1]) = WALL;
    }
    
    /* For each guard, look to four directions */
    for (k = 0; k < guardsSize; k++) {
        j = guards[k][1];
        
        // Look to south, util m or where already looked to south before
        for (i = guards[k][0]; i < m && !(GRID(i, j) & SOUTH); i++) {
            GRID(i, j) |= SOUTH;
        }
        
        // Look to north, util 0 or where already looked to north before
        for (i = guards[k][0]; i >= 0 && !(GRID(i, j) & NORTH); i--) {
            GRID(i, j) |= NORTH;
        }
        
        i = guards[k][0];
        
        // Look to west, util n or where already looked to west before
        for (j = guards[k][1]; j < n && !(GRID(i, j) & WEST); j++) {
            GRID(i, j) |= WEST;
        }
        
        // Look to east, util 0 or where already looked to west before
        for (j = guards[k][1]; j >= 0 && !(GRID(i, j) & EAST); j--) {
            GRID(i, j) |= EAST;
        }
    }
    
    /* Count the places where never looked (0) before */
    for (k = 0; k < m * n; k++) {
        if (grid[k] == 0) count++;
    }
    
    return count;
}