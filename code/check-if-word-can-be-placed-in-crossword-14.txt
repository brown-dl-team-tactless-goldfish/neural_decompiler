class Solution {
public:
    
    int m;
    int n;
    vector<vector<int> > directions;
    bool check(vector<vector<char>>& board, int i, int j, int dirIdx, string &word) {
        auto dir = directions[dirIdx];
        int prevI = i - dir[0];
        int prevJ = j - dir[1];
		// make sure it start with #
        if (prevI >= 0 && prevI < m && prevJ >= 0 && prevJ < n && board[prevI][prevJ] != '#') return false;
        int end = i + dir[0] * word.size();
        if(end < -1 || end > m) return false;
        end = j + dir[1] * word.size();
        if(end < -1 || end > n) return false;
        for(int k = 0; k < word.size(); k++) {
            if (word[k] == board[i][j] || board[i][j] == ' ') {
                i += dir[0];
                j += dir[1];
            }else 
                return false;
        }
		// make sure it end with #
        if(i >=0 && i < m && j >= 0 && j < n)
            return board[i][j] == '#';
        return true;
    }
    bool placeWordInCrossword(vector<vector<char>>& board, string word){
        m = board.size();
        n = board[0].size();
        directions = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                for(int dir = 0; dir < 4; dir++) {
                    if(check(board, i, j, dir, word))
                        return true;
                }
            }
        }
        return false;
    }
};
