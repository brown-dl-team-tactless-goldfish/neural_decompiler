typedef struct trie{
    struct trie *next[26];
    int val;
} MapSum;

/** Initialize your data structure here. */
MapSum* mapSumCreate() {
    MapSum *node = (MapSum *)malloc(sizeof(MapSum));
    memset(node->next, 0, sizeof(MapSum *) * 26);
    node->val = 0;
    return node;
}

void mapSumInsert(MapSum* obj, char* key, int val) {
    MapSum *root = obj;
    int len = strlen(key);
    for (int i = 0; i < len; i++) {
        int idx = key[i] - 'a';
        if (!root->next[idx])
            root->next[idx] = mapSumCreate();
        root = root->next[idx];
    }
    root->val = val;
}

static void trieTraverse(MapSum *root, int *ret)
{
    *ret += root->val;
    for (int i = 0; i < 26; i++) {
        if (root->next[i])
            trieTraverse(root->next[i], ret);
    }
}

int mapSumSum(MapSum* obj, char* prefix) {
    MapSum *root = obj;
    int len = strlen(prefix);
    int ret = 0;
    for (int i = 0; i < len; i++) {
        int idx = prefix[i] - 'a';
        if (!root->next[idx])
            return 0;
        root = root->next[idx];
    }
    trieTraverse(root, &ret);
    return ret;
}

void mapSumFree(MapSum* obj) {
    if(obj == NULL)
        return;
    for (int i = 0; i < 26; i++)
        free(obj->next[i]);
    free(obj);
}

/**
 * Your MapSum struct will be instantiated and called as such:
 * struct MapSum* obj = mapSumCreate();
 * mapSumInsert(obj, key, val);
 * int param_2 = mapSumSum(obj, prefix);
 * mapSumFree(obj);
 */