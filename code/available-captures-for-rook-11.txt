int searchPawns(char **, int, int, int);

int numRookCaptures(char** board, int boardSize, int* boardColSize){
    int rookX = 0, rookY = 0;
    int i, j;
    int pC = 0;
    
    for (i = 0; i < boardSize; i++)
    {
        for (j = 0; j < boardSize; j++)
        {
            if (*(*(board + i) + j) == 'R')
            {
                rookX = j;
                rookY = i;
            }
        }
    }
    
    pC = searchPawns(board, boardSize, rookX, rookY);

    return pC;
}

searchPawns(char** board, int boardSize, int rookX, int rookY)
{
    int pC = 0;
    int i;
    
    /* UP */
    for (i = rookY - 1; i >= 0; i--)
    {
        if (*(*(board + i) + rookX) == 'p')
        {
            pC++;
            break;
        }
        else if (*(*(board + i) + rookX) == 'B')
            break;
    }
    
    /* DOWN */
    for (i = rookY + 1; i < boardSize; i++)
    {
        if (*(*(board + i) + rookX) == 'p')
        {
            pC++;
            break;
        }
        else if (*(*(board + i) + rookX) == 'B')
            break;
    }
    
    /* LEFT */
    for (i = rookX - 1; i >= 0; i--)
    {
        if (*(*(board + rookY) + i) == 'p')
        {
            pC++;
            break;
        }
        else if (*(*(board + rookY) + i) == 'B')
            break;
    }
    
    /* RIGHT */
    for (i = rookX + 1; i < boardSize; i++)
    {
        if (*(*(board + rookY) + i) == 'p')
        {
            pC++;
            break;
        }
        else if (*(*(board + rookY) + i) == 'B')
            break;
    }
    
    return pC;
}