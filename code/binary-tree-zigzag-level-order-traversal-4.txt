/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

/*
    Algo:

    BFS:
    0. Init: q, head, tail, direction = 0 forward, 1 backward.
    1. Push root node to queue. Push a null node to q as delimitor for depth.
    2. while q not empty:
        a. get tail node.
        b. if delimiter is seen, save nodes in result array.
        c. toggle direction.
        d. traverse nodes in forward or reverse direction as specified by "direction"
*/

struct TreeNode* q[2000];
int head, tail;
int** result;
int** ret_col;
int depth[2000];
int pos;

int** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes)
{
    int array[512];
    struct TreeNode* s;
    pos = 0;
    int direction = 0;
    int i = 0;
    int curr_depth = 0;
    ret_col = returnColumnSizes;

    ret_col[0] = (int*) malloc (sizeof(int) * 2000);
    head = tail = 0;
    *returnSize = 0;
    ret_col[0][0] = 0;
    if (!root)
        return NULL;

    result = (int**) malloc (sizeof(int*) * 2000);
    q[head] = root;
    depth[head] = curr_depth;
    head++;

    while (head > tail)
    {
        s = q[tail];
        if (depth[tail] > curr_depth)
        {
            result[pos] = (int*) malloc (sizeof(int) * i); 
            if (direction)
            {
                for (int j = i-1; j >= 0; --j)
                {
                    result[pos][j] = array[i-j-1];
                }
            }
            else
            {
                memcpy (result[pos], array, sizeof(int) * i);
            }
            ret_col[0][pos] = i;
            i = 0;
            pos++;
            direction ^= 1;
            curr_depth = depth[tail];
        }

        {
            array[i] = s->val;
            i++;
            if (s->left)
            {
                q[head] = s->left;
                depth[head] = curr_depth + 1;
                head++;
            }
            if (s->right)
            {
                q[head] = s->right;
                depth[head] = curr_depth + 1;
                head++;
            }
        }
        tail++;
    }

    if (i)
    {
            result[pos] = (int*) malloc (sizeof(int) * i); 
            if (direction)
            {
                for (int j = i-1; j >= 0; --j)
                {
                    result[pos][j] = array[i-j-1];
                }
            }
            else
            {
                memcpy (result[pos], array, sizeof(int) * i);
            } 
            ret_col[0][pos] = i;
            i = 0;
            pos++;
    }
    *returnSize = pos;
    return result;   

}