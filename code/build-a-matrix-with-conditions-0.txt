#define f first
#define s second
class Solution {
public:
    
    pair<bool,vector<int>> topo(vector<vector<int>>& conditions, int k){
        vector<vector<int>> graph(k+1);
        vector<int> indegree(k+1, 0);
        vector<int> place(k+1,-1);
        
        for(auto &p : conditions){
            int u = p[0], v = p[1];
            graph[u].push_back(v);
            indegree[v]++;
        }
        
        queue<int> q;
        int cnt = 0, plc=0;
        
        for(int i=1; i<=k; ++i){
            if(indegree[i] == 0){ 
                q.push(i);
                place[i]=plc;
                plc++;
                cnt++;
            }
        }
        
        while(!q.empty()){
            int cur = q.front(); q.pop();
            
            for(auto &child : graph[cur]){
                indegree[child]--;
                if(indegree[child] == 0){
                    place[child] = plc;
                    q.push(child);
                    plc++;
                    cnt++;
                }
            }
        }
        return {cnt==k,place};
    }
    
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
        vector<vector<int>> temp;
        auto r1 = topo(rowConditions, k);
        auto c1 = topo(colConditions, k);

        if(c1.f==false || r1.f==false) return temp;
        
        vector<vector<int>> ans(k, vector<int>(k,0));
        vector<int> r = r1.s, c = c1.s;
        
        for(int i=1; i<=k; ++i){
            int x = r[i], y=c[i];
            ans[x][y] = i;
        }
        
        
        return ans;
    }
};