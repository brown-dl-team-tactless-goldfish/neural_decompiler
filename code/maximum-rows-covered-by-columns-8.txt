class Solution {
public:
    int r , c ;
    int maximumRows(vector<vector<int>>& grid, int cols) {
        r = grid.size(),  c = grid[0].size() ;
        //generate all the possible combinations of column choosings;
        int ans = 0 ;
		
        for(int mask = 1 ; mask < (1 << c) ; ++mask ){
            if(__builtin_popcount(mask) != cols ) continue ;
			
			//only cols number of column chossings are allowed
            int covered = 0 ;
            for(int i = 0 ; i < r ; ++i ){
                //check the ith row 
                //there should be no one(1) present at places where mask & (1 << i) == 0
                bool good = true ;
                for(int j = 0 ; j < c; ++j ){
                    if(!(mask & (1 << j)) and grid[i][j]){
                        good = false ;
                        break ;
                    }
                }
                if(good) ++covered ;
            }
            ans = max(ans,covered) ;
        }
        
        return ans ;
    }
};