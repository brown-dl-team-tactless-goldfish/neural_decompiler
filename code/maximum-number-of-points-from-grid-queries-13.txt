class Solution {
public:
    vector<int>Parent;
    vector<int>Size;

    int find(int x){

        if(Parent[x]==x){
            return x;
        }

        int temp=find(Parent[x]);

        Parent[x]=temp;

        return temp;

    }


    void Union(int x,int y){

        int lx=find(x);
        int ly=find(y);

        if(lx!=ly){

            if(Size[lx]>Size[ly]){
                Size[lx]+=Size[ly];
                Parent[ly]=lx;
            }

            else{
                Size[ly]+=Size[lx];
                Parent[lx]=ly;
            }

        }

    }
    
   
    int r;
    
    int findCell(int i,int j){
        return ((i*r) + j);
    }
       
            
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        int m = grid.size();
        int n = grid[0].size();
        r = max(m,n);
        
        Parent.resize(2000002);
        Size.resize(2000002);
        
        for(int i=0;i<2000002;i++){
            Parent[i] = i;
            Size[i] = 0;
        }
        
        vector<vector<pair<int,int>>>index(1000002);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               index[grid[i][j]].push_back({i,j});
            }
        }
    

        vector<int>storage(1000002,0);
        
        int dx[4] = {0,0,1,-1};
        int dy[4] = {1,-1,0,0};
        
        for(int i=0;i<1000002;i++){
            for(int j=0;j<index[i].size();j++){
                int x = index[i][j].first;
                int y = index[i][j].second;
                int cellno = findCell(x,y);
                int p = find(cellno);
                Size[p]++;
                for(int dir=0;dir<4;dir++){
                    int nx = x + dx[dir];
                    int ny = y + dy[dir];
                    if(nx>=0 && ny>=0 && nx<m && ny<n && grid[nx][ny]<=i){
                            int nxt = findCell(nx,ny);
                            int par = find(nxt);
                            int nextcell = findCell(nx,ny);
                            Union(nextcell,cellno);
                    }
                }
            }
            int p = find(0);
            storage[i] = Size[p];
        }
        
        vector<int>ans;
        for(int i=0;i<queries.size();i++){
            int j = queries[i];
            ans.push_back(storage[j-1]);
        }
        
        return ans;
    }
};

/*

1 2 3
2 5 7
3 5 1

*/
  