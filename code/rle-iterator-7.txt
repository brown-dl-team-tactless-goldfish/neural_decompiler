class RLEIterator {
public:
    // 'pointer' indicates the current index in runtime
    long long pointer;
    
    // 'v' is a 2D vector where in each vector(size=3)
    // the first element is the actual array element
    // the second element is the starting index of that element in decoded array
    // the third element is the ending index of that element in decoded array
    vector<vector<long long>>v;
    RLEIterator(vector<int>& encoding) {
        // 'index' helps to get the starting and ending index of elements 
        long long index=0;
        pointer=0;
        
        // populate the vector 'v'
        for(int i=0;i<encoding.size();i+=2) {
            v.push_back({encoding[i+1],index,index+encoding[i]-1});
            index+=encoding[i];
        }
    }
    
    int next(int n) {
        // increment the pointer
        pointer+=n;
        
        // iterate over the 2D vector and check in which index range the current pointer lies. 
        for(auto it:v) {
            // if the pointer lies in a particular index range then return the element
            if(pointer-1>=it[1]  && pointer-1<=it[2]) {
                return it[0];
            }
        }
        
        // if the pointer is out of bound then return -1
        return -1;
    }
};