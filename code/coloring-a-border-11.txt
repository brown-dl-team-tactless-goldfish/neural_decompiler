class Solution {
    int xDir[4] = {-1, 1, 0, 0};
    int yDir[4] = {0, 0, -1, 1};
    int N, M;
    vector<vector<int>> ans;
public:
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int row, int col, int color) {
        N = grid.size(); M = grid[0].size();
        ans = grid;
        vector<vector<int>> vis(N, vector<int> (M, 0));
        
        dfs(row, col, color, grid, vis);
        return ans;
    }
    
    void dfs(int r, int c, int color, vector<vector<int>>& grid, vector<vector<int>> vis) {
        vis[r][c] = 1;
        
        int x, y, count = 0;
        for(int i=0;i<4;i++) {
            x = r + xDir[i]; y = c + yDir[i];
            if(isValid(x,y) && grid[x][y] == grid[r][c]) {
                count++;
                if(!vis[x][y]) {
                    dfs(x, y, color, grid, vis);
                }
            }
        }
        
        if(count >= 0 && count < 4)
            ans[r][c] = color;
    }
    
    bool isValid(int x, int y) {
        return x >= 0 && x < N && y >= 0 && y < M;
    }
};