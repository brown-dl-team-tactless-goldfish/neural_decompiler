class Solution {
public:
    string result = "1#2#3#4#5#0";
    vector<int> DIR = {1, 0, -1, 0, 1};
    unordered_set<string> set;
    queue<pair<pair<int, int>, vector<vector<int>>>> q;
    string serialize(vector<vector<int>>& A){
        string result = "";
        for(int i = 0; i < 2; i++)
            for(int j = 0; j < 3; j++)
                result += A[i][j] + '0', result += '#';
        result.pop_back();
        return result;
    }
    pair<int, int> zero(vector<vector<int>>& board) {
        for(int i = 0; i < 2; i++)
            for(int j = 0; j < 3; j++)
                if(!board[i][j])
                    return {i, j};
        return {-1, -1};   
    }
    int slidingPuzzle(vector<vector<int>>& board) {
        string s = serialize(board);
        if(s == result) return 0;
        set.insert(s);
        auto [r, c] = zero(board);
        q.push({{r, c}, board});
        return helper();
    }
    int helper(){
        int count = 1;
        while(!q.empty()){
            int sz = q.size();
            for(int i = 0; i < sz; i++){
                auto temp = q.front();
                q.pop();
                auto [r, c] = temp.first;
                auto state = temp.second;
                for(int k = 0; k < 4; k++){
                    auto tempState = state;
                    int nr = r + DIR[k], nc = c + DIR[k + 1];
                    if(nr < 0 || nc < 0 || nr == 2 || nc == 3)
                        continue;
                    tempState[r][c] = tempState[nr][nc];
                    tempState[nr][nc] = 0;
                    string s = serialize(tempState);
                    if(s == result) return count;
                    if(set.find(s) != set.end()) continue;
                    set.insert(s);
                    q.push({{nr, nc}, tempState});
                }
            }
            count++;
        }
        return -1;
    }
};