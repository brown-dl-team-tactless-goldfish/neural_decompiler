class Solution {
public:
    int findRotateSteps(string ring, string key) {
        unordered_map<char, vector<int>> c2i;
        int ringLen = (int)ring.size();
        for (int i = 0; i < ringLen; ++i) {
            c2i[ring[i]].emplace_back(i);
        }
    
        unordered_map<int, int> dp_;
        dp_[0] = 0;
        for (auto c : key) {
            unordered_map<int, int> dp;
            for (auto i : c2i[c]) {
                dp[i] = INT_MAX;
                for (auto item : dp_) {
                    int val = item.second, idx = item.first;
                    dp[i] = std::min(dp[i], 
                                     val + std::min(abs(i - idx), (int)ring.size() - abs(i - idx)));
                }
            }
            dp_ = dp;
        }
        int ans = INT_MAX;
        for (auto item : dp_) {
            ans = std::min(item.second, ans);
        }
        return ans + key.size();
    }
};