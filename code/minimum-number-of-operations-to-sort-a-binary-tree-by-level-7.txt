public class Solution {
    public int MinimumOperations(TreeNode root) {
        int ops = 0;
        Queue<TreeNode> queue = new();
        queue.Enqueue(root);
        while(queue.Count > 0){
            int size = queue.Count;
            int[] arr = new int[size];
            for(int i = 0; i < size; i++){
                TreeNode curr = queue.Dequeue();
                arr[i] = curr.val;
                if(curr.left != null) queue.Enqueue(curr.left);
                if(curr.right != null) queue.Enqueue(curr.right);
            }
            ops += CountOps(arr);
        }
        return ops;
    }
    private int CountOps(int[] arr){
        int ops = 0;
        Dictionary<int, int> map = new();
        for(int i = 0; i < arr.Length; i++) map.Add(arr[i], i);
        int[] sortedArr = arr.OrderBy(x => x).ToArray();
        for(int i = 0; i < arr.Length; i++){
            if(arr[i] != sortedArr[i]){
                int temp = arr[i], tempIdx = map[sortedArr[i]];
                arr[i] = sortedArr[i];
                arr[tempIdx] = temp;
                map[arr[i]] = i;
                map[temp] = tempIdx;
                ops++;
            }
        }
        return ops;
    }
}