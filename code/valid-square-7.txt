class Solution {
public:
    float fun(vector<int> p , vector<int> q)
      return sqrt( pow(p[0]-q[0],2) + pow(p[1]-q[1],2) );
	  
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
       vector<float> v;
        v.push_back(fun(p1,p2)); // push all the distances into vector
        v.push_back(fun(p1,p3));
        v.push_back(fun(p1,p4));
        v.push_back(fun(p2,p3));
        v.push_back(fun(p2,p4));
        v.push_back(fun(p3,p4));
        sort(v.begin(),v.end()); // sort the vector elements
        int i;
        float s=v[0];
        float ss=v[5];
        int u=0,w=0; 
        for(i=0 ; i<6 ; i++) 
        {
            if(v[i]==s)
            u++; // make the count 
            if(v[i]==ss)
            w++;
        }
        if(u==4 && w==2)
        return true;
        else
        return false;
    }
};