class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:


        num_rows = len(grid)
        if (num_rows == 0 or num_rows == 1):
            return 0
        num_cols = len(grid[0])
        if (num_cols == 0 or num_cols == 1):
            return 0

        # print("num_rows = ", num_rows)
        # print("num_cols = ", num_cols)

        # for i in range(num_rows):
        #     print (grid[i])

        self.res = 0
        self.flagValid = True

        def dfs(curX, curY, visited):
            # print("curX = ", curX, " curY = ", curY)
            if ([curX, curY] in visited):
                return
            else:
                visited.append([curX, curY])
            if (0 <= curX < num_rows and 0 <= curY < num_cols):
                if (self.flagValid == False):
                    return
                if (grid[curX][curY] == 1):
                    return
                elif (grid[curX][curY] == 2):
                    self.flagValid = False
                    return
                elif (grid[curX][curY] == 0):
                    # if (curX != 0 and curX != num_rows-1 and curY != 0 and curY != num_cols-1):
                    #     grid[curX][curY] = 2
                    #     for direction in [[1, 0], [-1, 0], [0, 1], [0, -1]]:
                    #         dfs(curX+direction[0], curY+direction[1])
                    # else:
                    #     self.flagValid = False
                    if (curX == 0 or curX == num_rows-1 or curY == 0 or curY == num_cols-1):
                        self.flagValid = False
                    elif (self.flagValid == True):
                        grid[curX][curY] = 2
                        for direction in [[1, 0], [-1, 0], [0, 1], [0, -1]]:
                            dfs(curX+direction[0], curY+direction[1], visited)

        res = 0
        for x in range(1, num_rows-1):
            for y in range(1, num_cols-1):
                if (grid[x][y] == 0):
                    # print("x = ", x, " y = ", y)
                    self.flagValid = True
                    dfs(x, y, [])
                    if (self.flagValid == True):
                        res += 1
                        # print("found 1, x = ", x, " y = ", y)
                        # for i in range(num_rows):
                        #     print (grid[i])

        # print("end res = ", res)
        # print("end grid = ", grid)

        # for i in range(num_rows):
        #     print (grid[i])
        return res
