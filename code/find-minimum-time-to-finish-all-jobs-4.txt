class Solution {
public:
    bool ok(int max_Time,int job_id,vector<int>& jobs,int k,vector<int>& workers){
        if(job_id==jobs.size()){
            return true;
        }
        for(int i=0;i<k;i++){
            if(workers[i]+jobs[job_id]<=max_Time){
                workers[i] += jobs[job_id];
                if(ok(max_Time,job_id+1,jobs,k,workers)){
                    return true;
                }
                workers[i] -= jobs[job_id];
            }
            if(workers[i]==0){
                return false;
            }
        }
        return false;
    }
    int minimumTimeRequired(vector<int>& jobs, int k) {
        vector<int> workers(k);
        sort(jobs.rbegin(),jobs.rend());
        int l = *max_element(jobs.begin(),jobs.end()),r = accumulate(jobs.begin(),jobs.end(),0),ans = r;
        while(l<=r){
            int mid = (l+r)/2;
            fill(workers.begin(),workers.end(),0);
            if(ok(mid,0,jobs,k,workers)){
                ans = mid;
                r = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }
        
        return ans;
    }
};