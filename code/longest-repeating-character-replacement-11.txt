class Solution {
public:
    string s;
    int k;
    
    int find(char x){
        int ans = 0;
        int head = -1;
        int tail = 0;
        int cnt = 0;
        int n = s.size();
        while(tail<n){
            while(head+1<n && (s[head+1] == x || cnt<k)){
                head++;
                if(s[head] != x) cnt++;
            }
        
            if(cnt<=k) ans = max(ans,head-tail+1);
            if(head>=tail){
                if(s[tail] != x) cnt--;
                tail++;
            }
            else{
                tail++;
                head = tail-1;
            }
        }
        return ans;
    }
    
    int characterReplacement(string _s, int _k) {
        // two approach - 
        // binary search on the length 
        // since there are only 26 char, we can fix the char and try to find max length for each
        // can be done with two pointer
        int ans = 0;
        s = _s;
        k = _k;
        for(char c = 'A';c<='Z';c++){
            ans = max(ans,find(c));
        }
        return ans;
    }
};