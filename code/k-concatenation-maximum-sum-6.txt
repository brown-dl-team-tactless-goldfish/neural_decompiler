class Solution {
public:
    
    int M = pow(10, 9) + 7;
    
    int Kadane(vector<int>& arr)
    {
        long csum = arr[0];
        long osum = arr[0];
        
        for(int i=1; i<arr.size(); i++)
        {
            csum = max(csum + arr[i], (long)arr[i]);
            osum = max(csum, osum);
        }
        
        return osum;
    }
    
    int kConcatenationMaxSum(vector<int>& arr, int k) 
    {
        int osize = arr.size();
        
        if(arr.empty() || k==0)
            return 0;
        
        if(arr.size() == 1)
            return arr[1];
        
        long sum = 0; //sum of the array
        
        for(int i=0; i<arr.size(); i++)
            sum+=arr[i];
        
        if(k == 1)
            return Kadane(arr);
        
        //for K==2
        
        arr.resize(2*arr.size());
      
        for(int i=0; i<osize; i++)
           arr[osize + i] = arr[i];
        
        int Kres = Kadane(arr);
        
        if(Kres < 0)
            return 0; //length of subarray is zero
        
        else
        {
            if(sum > 0)
                return (Kres + (k-2)*sum)%M;
            
            else
                return Kres%M;
        }
        
        
    }
};
