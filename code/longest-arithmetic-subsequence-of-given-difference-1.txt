longest_sub_array_size = 1; 
for(i=0; i< arrSize; i++)
{
	// handle arr[i]
	sub_arr_len[i]= -1; 
	
	if(i>0)
	{
		for(j=0; j<i; j++)
		{
			//sub_arr_len_temp = sub_arr_len[j];
			
			if(sub_arr_len[j]>0)
			{
				if(arr[j]+(difference)*sub_arr_len[j] == arr[i])//if (sub_arr[j][sub_arr_len_temp-1]+diff == arr[i])
				{// find a match
					sub_arr_len[i] = 0; // this node i now joins sub_arr[j], 
					sub_arr_len[j] = sub_arr_len[j] + 1; 
					//sub_arr[j][sub_arr_len_temp] = arr[i]; 
					
					if(longest_sub_array_size<sub_arr_len[j])
					{
						longest_sub_array_size = sub_arr_len[j];
					}
				}
			}
		}	// for j
	}

	if(sub_arr_len[i] == -1)
	{// this node did not join any sub-node (otherwise it will be 0), create a new subnode; 
		sub_arr_len[i] = 1; 
	}
}// for i

return longest_sub_array_size; 