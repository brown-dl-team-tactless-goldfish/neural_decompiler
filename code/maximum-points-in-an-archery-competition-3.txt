public class Solution
{
    int maxScore;
    int[] maxScoreAr;
    public int[] MaximumBobPoints(int numArrows, int[] aliceArrows)
    {
        maxScore = 0;
        int[] bobArrows = new int[12];
        maxScoreAr = new int[12];
        int max = MaxScoreBobArrows(1, numArrows, aliceArrows, bobArrows);

        return maxScoreAr; 
    }

    int MaxScoreBobArrows(int i, int totArrows, int[] aliceArrows, int[] bobArrows)
    {
        if (i == 11)
        {
            // put all the remianing arrows in last bucket
            bobArrows[11] = totArrows;
            totArrows = 0;

            // calculate total score. if its greater than prev max, make a copy of it.
            int localScore = 0;
            for (int idx = 0; idx < aliceArrows.Length; idx++)
            {
                if (bobArrows[idx] > aliceArrows[idx])
                    localScore += idx;
            }
            if (localScore > maxScore)
            {
                maxScore = localScore;
                for (int k = 0; k < 12; k++)
                {
                    maxScoreAr[k] = bobArrows[k];
                }
            }
            int result = (bobArrows[11] > aliceArrows[11] ? 11 : 0);
            bobArrows[11] = 0;
            return result;
        }
        if (totArrows == 0)
        {
            // calculate total score. if its greater than prev max, make a copy of it.
            int localScore = 0;
            for (int idx = 0; idx < aliceArrows.Length; idx++)
            {
                if (bobArrows[idx] > aliceArrows[idx])
                    localScore += idx;
            }
            if (localScore > maxScore)
            {
                maxScore = localScore;
                for (int k = 0; k < 12; k++)
                {
                    maxScoreAr[k] = bobArrows[k];
                }
            }
            return 0;
        }
        if (totArrows <= aliceArrows[i])
        {
            bobArrows[i] = 0;
            return MaxScoreBobArrows(i + 1, totArrows, aliceArrows, bobArrows);
        }
        // get max taking this
        bobArrows[i] = aliceArrows[i] + 1;
        int maxTakingThis = MaxScoreBobArrows(i + 1, totArrows - bobArrows[i], aliceArrows, bobArrows);
        bobArrows[i] = 0;

        // get max skipping this
        int maxSkippingThis = MaxScoreBobArrows(i + 1, totArrows, aliceArrows, bobArrows);

        // return the max of the 2
        return Math.Max(maxTakingThis, maxSkippingThis) + (maxTakingThis >= maxSkippingThis ? i : 0);
    }
}