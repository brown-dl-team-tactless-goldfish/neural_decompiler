#define N 101
class Solution {
public:
    vector<int>color;
    vector<bool>visited;
    bool ok;
    void bfs(int source, vector<vector<int>>&adj, bool &ok){
        color[source] = 0;
        queue<int>q;
        visited[source] = true;
        q.push(source);
        while(!q.empty()){
            int sz = q.size();
            while(sz){
                int top = q.front();
                q.pop();
                auto v = adj[top];
                for(auto&it:v){
                    if((color[it] == 0 && color[top] == 0) || (color[it] == 1 && color[top] == 1)){
                        ok = false;
                        return;
                    }
                    else if(color[it] == -1){
                        visited[it] = true;
                        color[it] = 1 - color[top];
                        q.push(it);
                    }
                }
                --sz;
            }
        }
        
        return ;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        // we will color it red as 1 and black as 0.
        int n = (int)graph.size();
        color.resize(N);
        visited.resize(N);
        fill(visited.begin(), visited.end(), false);
        fill(color.begin(), color.end(), -1);
        ok = true;
        for(int i = 0; i<=n-1; i++){
            if(!visited[i])
                bfs(i, graph, ok);
        }

        
        return ok;
    }
};