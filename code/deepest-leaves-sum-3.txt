#define N 10001
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int curr){
        if(!root)return;
        height[root->val] = max(height[root->val], curr);
        dfs(root->left, curr  +1);
        dfs(root->right, curr+1);
    }
    vector<int>height;
    int deepestLeavesSum(TreeNode* root) {
        height.resize(N);
        fill(height.begin(), height.end(), 0);
        dfs(root, 0);
        int mx = 0;
        mx = *max_element(height.begin(), height.end());
        int ans = 0;
        for(int i = 0; i<N; i++){
            if(height[i] == mx)ans += i;
        }
        return ans;
    }
};