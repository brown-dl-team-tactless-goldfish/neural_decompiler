class Solution {
public:
    int maxSumBST(TreeNode* root) {
        dfs(root);
        return maxSum;
    }
    
    //return {isBst, sum, l, r},  l and r are value boundry 
    tuple<bool,int, int, int> dfs(TreeNode* root){
        if(!root) return {true, 0, INT_MAX, INT_MIN};
        const int x = root->val;
        auto [isBst1, sum1, l1, r1] = dfs(root->left);
        auto [isBst2, sum2, l2, r2] = dfs(root->right);
        if(!isBst1 || !isBst2 || x<=r1 || x>=l2) return {false, 0, 0, 0};
        int sum = sum1+sum2+x;
        maxSum = max(maxSum, sum);
        return {true, sum, min(l1,x), max(r2,x)};
    }
    
    int maxSum = 0;
};