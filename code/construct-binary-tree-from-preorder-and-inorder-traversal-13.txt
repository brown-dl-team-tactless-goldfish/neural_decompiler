struct TreeNode *buildTreeHelper(int *preorder,int start_preorder,int end_preorder,int *inorder,int start_inorder,int end_inorder);
struct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {
    
    int start_preorder=0;
    int start_inorder=0;
    int end_preorder=preorderSize-1;
    int end_inorder=inorderSize-1;
    return buildTreeHelper(preorder,start_preorder,end_preorder,inorder,start_inorder,end_inorder);
}
struct TreeNode *buildTreeHelper(int *preorder,int start_preorder,int end_preorder,int *inorder,int start_inorder,int end_inorder){
    if(start_preorder>end_preorder||start_inorder>end_inorder) return NULL;
    struct TreeNode *root=malloc(sizeof(struct TreeNode*)*1);
    root->val=preorder[start_preorder];
    int i=0;
    for(i=0;i<=end_inorder;i++){
        if(inorder[i]==preorder[start_preorder]) break;
    }
    int start_inorder_left=start_inorder;
    int end_inorder_left=i-1;
    int start_inorder_right=i+1;
    int end_inorder_right=end_inorder;
    int start_preorder_left=start_preorder+1;
    int end_preorder_left=start_preorder_left-start_inorder_left+end_inorder_left;
    int start_preorder_right=end_preorder_left+1;
    int end_preorder_right=start_preorder_right-start_inorder_right+end_inorder_right;
    root->left=buildTreeHelper(preorder,start_preorder_left,end_preorder_left,inorder,start_inorder_left,end_inorder_left);
    root->right=buildTreeHelper(preorder,start_preorder_right,end_preorder_right,inorder,start_inorder_right,end_inorder_right);
    return root;
}