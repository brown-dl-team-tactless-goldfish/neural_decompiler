typedef long long LL;

class Solution {
public:
    LL maximumBeauty(vector<int>& fs, LL nfs, int tar, int fu, int par) {
        
        LL ans = 0;
        LL cplt = 0;
        sort(fs.begin(), fs.end());
        while (fs.size())
        {
            if (fs.back() < tar) break;
            LL t = fs.back(); fs.pop_back();
            cplt ++ ;
        }
        
        int n = fs.size();
        
        vector<LL> psum, psum2;
        for (int i = n - 1; i >= 0; -- i)
            psum.push_back(tar - fs[i]);
        for (int i = 1; i < n; ++ i) psum[i] += psum[i - 1];
        
        psum2.push_back(0);
        for (int i = 1; i < n; ++ i)
            psum2.push_back(psum2.back() + (fs[i] - fs[i - 1]) * i);
        
        LL nfs_cp = nfs, cplt_cp = cplt;
        LL cum = 0;
        for (int i = 0; i <= n; ++ i)
        {
            LL res = 0;
            
            if (i > 0)
            {
                if (psum[i - 1] > nfs) break;
                nfs -= psum[i - 1];
                cplt += i;
            }
            if (i < n)
            {
                auto it = upper_bound(psum2.begin(), psum2.begin() + n - i, nfs);
                LL cnt = it - psum2.begin();
                if (it != psum2.begin())
                {
                    nfs -= *prev(it);    
                    LL idx = prev(it) - psum2.begin();
                    if (fs[idx] + nfs / cnt >= tar)
                        res += ((LL)tar - 1) * par;
                    else
                        res += ((LL)fs[idx] + nfs / cnt) * par;
                }                
            }

            res += cplt * fu;
            ans = max(ans, res);
            nfs = nfs_cp, cplt = cplt_cp;
        }
        return ans;
    }
};