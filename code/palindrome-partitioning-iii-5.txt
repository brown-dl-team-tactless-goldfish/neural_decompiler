class Solution {
public:
    vector<vector<int>>dp,dp2;
    int change(string s,int i,int j){
        int ans=0;
        while(i<j){
            if(s[i]!=s[j]){
                ans++;
            }
            i++;
            j--;
        }
        return ans;
    }
    int solve(int i,string s,int k){
        int ans=100;
        if(k<0)return 100;
        if(dp2[i][k]!=-1)return dp2[i][k];
        if(i==s.size())return k==0?0:s.size();
        for(int j=i;j<s.size();j++){
            if(dp[i][j]==-1)dp[i][j]=change(s,i,j);
            int ahead=solve(j+1,s,k-1);
            if(ahead!=-1)
            ans=min(ans,dp[i][j]+ahead);
        }
        return dp2[i][k]=ans;
    }
    int palindromePartition(string s, int k) {
        dp=vector<vector<int>>(105,vector<int>(105,-1));
        dp2=vector<vector<int>>(105,vector<int>(105,-1));
        return solve(0,s,k);
    }
};