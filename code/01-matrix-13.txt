typedef struct queue{
    int i;
    int j;
    int step;
    struct queue* next;
}queue;

struct queue *head = NULL;
struct queue *tail = NULL;

void pop(){
    if(head){
        head = head->next;
    }
}

void push(struct queue* q){
    if (!head){
        head = q;
        tail = q;
        head ->next = NULL;
        tail ->next = NULL;
    }
    else {
        tail->next = q;
        tail = q;
        tail ->next = NULL;
    }
}

void create_push(int i, int j, int step){
    struct queue *new = malloc(sizeof(queue));
    new->i = i;
    new->j = j;
    new->step = step;
    push(new);
}

int bfs(int** matrix, int x, int y, int** visited, struct queue* curr){
    int i = curr->i;
    int j = curr->j;
    int step = curr->step;

    visited[i][j] = 1;

    if(i>0)
        if(!visited[i-1][j])
            if(matrix[i-1][j])
                create_push(i-1,j,step+1);
            else 
                return step;
    if(i<x-1){
        if(!visited[i+1][j] && matrix[i+1][j])
            create_push(i+1,j,step+1);
        else if(!visited[i+1][j] && !matrix[i+1][j])
            return step;
    }
    if(j>0){
        if(!visited[i][j-1] && matrix[i][j-1])
            create_push(i,j-1,step+1);
        else if(!visited[i][j-1] && !matrix[i][j-1])
            return step;
    }
    if(j<y-1){
        if(!visited[i][j+1] && matrix[i][j+1])
            create_push(i,j+1,step+1);
        else if(!visited[i][j+1] && !matrix[i][j+1])
            return step;
    }
    
    if(curr->next)
        step = bfs(matrix,x,y,visited,curr->next);
    
    return step;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** updateMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes){
    if(!matrix || !matrixSize || *matrixColSize == 0){
        *matrixColSize= 0;
        return matrix;
    }
    int i, j,k;
    int x = matrixSize;
    int y = *matrixColSize;
    *returnSize = x;
    *returnColumnSizes = malloc(sizeof(int)*x);
    for(i=0;i<x;i++){
        (*returnColumnSizes)[i] = y;
    }

    int **visited = malloc(sizeof(int*)*x);
    for(i=0;i<x;i++){
        visited[i] = malloc(sizeof(int)*y);
        memset(visited[i],0,sizeof(int)*y);
    }
    
    for(i=0;i<x;i++){
        for(j=0;j<y;j++){
            if(matrix[i][j]==1){
                create_push(i,j,1);
                matrix[i][j]=bfs(matrix,x,y,visited,head);
                while (head){
                    struct queue* temp = head;
                    pop();
                    free(temp);
                }
            }
            for(k=0;k<x;k++)
                memset(visited[k],0,sizeof(int)*y);
                
        }        
    }
    return matrix;
}