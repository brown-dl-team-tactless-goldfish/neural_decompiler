void xor_subset_sum(int *nums, int *sum_xor, int *arr, int arr_index, int k, int numsSize) {
    if(k >= numsSize) {
        int temp_xor = 0;
        for(int i=0;i<arr_index;i++) {
            // printf("%d, %d\n", arr[i], nums[arr[i]]);
            if(0 == i) {
                temp_xor = nums[arr[i]];
                continue;
            }
            temp_xor ^= nums[arr[i]];
        }
        *sum_xor += temp_xor;
        // printf("============\n");
    }
    else {
        arr[arr_index++] = k;
        xor_subset_sum(nums, sum_xor, arr, arr_index, k+1, numsSize);

        arr[arr_index--] = 0;
        xor_subset_sum(nums, sum_xor, arr, arr_index, k+1, numsSize);
    }
}


int subsetXORSum(int *nums, int numsSize){
    assert(numsSize<=12);
    int arr[13];
    memset(arr, 0, numsSize*sizeof(int));
    int arr_index = 0;
    int sum_xor = 0;
    xor_subset_sum(nums, &sum_xor, arr, arr_index, 0, numsSize);
    return sum_xor;
}
