class Solution {
public:
    // Create key from a given string
    // odd index character frequency and even index character frequency
    void getKey(string &words, string &key) {
        vector<int> oMap(26,0);
        vector<int> eMap(26,0);
        
        for (int i = 0; i < words.size(); i++) {
            if (i%2) oMap[words[i]-'a']++;
            else eMap[words[i]-'a']++;
        }
        
        string oddKey,evenKey;
        for (int i = 0; i < 26; i++) {
            char c = i + 'a';
            if (oMap[i]) {
                oddKey += c + to_string(oMap[i]);
            }
            if (eMap[i]) {
                evenKey += c + to_string(eMap[i]);
            }
        }
        key = oddKey + '#' + evenKey;
    }
    int numSpecialEquivGroups(vector<string>& words) {
        unordered_set<string> st;
        for (int i = 0; i < words.size(); i++) {
            string key;
            // create key for the given word
            getKey(words[i],key);
            // if seen already continue
            if (st.count(key))
                continue;
            // insert unqiue key found till now
            st.insert(key);
        }
        // return size of the set which is set of unique keys
        return st.size();
    }
};