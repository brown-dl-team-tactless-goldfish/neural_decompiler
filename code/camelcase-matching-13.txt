class Solution {
    bool compare(string s, string t) {
        int n = s.length();
        int m = t.length();
        
        int i = 0, j = 0;
        string scap, tcap;
        while (i < n && j < m) {
            if (s[i] == t[j]) {
                if (isupper(s[i])) scap += s[i];
                i++;
            }
            if (isupper(t[j])) tcap += t[j];
            j++;
        }
        
        while (j < m) {
            if (isupper(t[j])) tcap += t[j];
            j++;
        }
        
        return (i == n) && (scap == tcap);
    }
public:
    vector<bool> camelMatch(vector<string>& queries, string pattern) {
        vector<bool>res;
        for (int i = 0; i < queries.size(); i++) {
            if (compare(pattern, queries[i]))
                res.push_back(true);
            else
                res.push_back(false);
        }
        
        return res;
    }
};