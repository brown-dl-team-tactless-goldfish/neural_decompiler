int cmpfunc (const void ** a, const void ** b) {
    int* arr1 = *(int**)a;
    int* arr2 = *(int**)b;
    if(arr1[0] == arr2[0])
          return 0;
      else if(arr1[0] > arr2[0])
          return 1;
      else 
          return -1;  
}

int findMinArrowShots(int** points, int pointsSize, int* pointsColSize){
    //sort by the first item of each element
    
    qsort(points, pointsSize, sizeof(int*), cmpfunc);
   
    int count = 1;
    int arrow = points[0][1];
    for(int i = 0; i < pointsSize; i++){
        //Check if end of current gap is smaller than current arrow,
        //if it is, change to become new arrow
        //must be larger than start of previous gap as well
        if(points[i][1]<arrow && points[i][1]>=points[i-1][0]){
            arrow = points[i][1];
        }
        //current arrow is within the current gap
        else if(arrow<=points[i][1] && arrow>=points[i][0]){
            continue;
        }
        //add one to count and change to new arrow
        else{
            count++;
            arrow = points[i][1];
        }
    }
    return count;
}