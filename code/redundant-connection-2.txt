    
    int findParent(int a, vector<int>& parent){
        if(parent[a] == a)
            return a;
        else
            return parent[a] = findParent(parent[a], parent);
    }
    
    void unionThese(int a, int b, vector<int>& parent){
        
        int aParent = findParent(a, parent);
        int bParent = findParent(b, parent);
        
        if(aParent!=bParent){
            int minParent= min(aParent, bParent);
            parent[aParent] = minParent;
            parent[bParent] = minParent;
        }
    }
    
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        
        int n = edges.size(); 
        vector<int> parent(n+1);
        
        for(int i=1; i<=n; i++)
            parent[i] = i;
        parent[0] = -1;
        for(auto i:edges){
            int a= i[0];
            int b= i[1];
            
            int aParent = findParent(a, parent);
            int bParent = findParent(b, parent);
            
            if(aParent==bParent)
                return {a,b};
            else
                unionThese(a, b, parent);
        }
        return {-1,-1};
    }