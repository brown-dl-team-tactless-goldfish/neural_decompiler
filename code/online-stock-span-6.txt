typedef struct pair{
    int first;
    int second;
}Pair;
//declaring structure
typedef struct {
   Pair* data;
   struct Cstack *ptr; //pointer type of stack
}Stack;
typedef Stack *stackPtr;

typedef struct {
    stackPtr *top;
} StockSpanner;

//function for pushing value into the top of stack
void stackPush(stackPtr *top, int p, int s ){
    Pair *pr = (Pair*)malloc(sizeof(Pair));
    pr->first = p;
    pr->second = s;
    stackPtr nodePtr;
    //allocating memory
    nodePtr = (stackPtr)malloc(sizeof(Stack));
    //pushing value at the top of stack only if there is space
    nodePtr->data = pr;
    nodePtr->ptr = *top;
    *top = nodePtr;
}
//popping value out of the stack
void stackPop(stackPtr *top){
   stackPtr tempPtr; //temporary pointer
   tempPtr = *top;
   *top = (*top)->ptr;
   free(tempPtr->data);
   free(tempPtr); //free temporary pointer value
}
StockSpanner* stockSpannerCreate() {
    StockSpanner* head = (StockSpanner*)malloc(sizeof(StockSpanner));
    head->top = NULL;
    return head;
}
bool checkEmpty(stackPtr top){
   return (top == NULL);
}
Pair* stackTop(stackPtr top) {
	return top->data;
}
int stockSpannerNext(StockSpanner* obj, int price) {
    int ans = 1;
    while (!checkEmpty(obj->top) && stackTop(obj->top)->first <= price) {
        ans += stackTop(obj->top)->second;
        stackPop(&obj->top);
    }
    stackPush(&obj->top, price, ans);
    return ans;
}

void stockSpannerFree(StockSpanner* obj) {
    while (!checkEmpty(obj->top)){
        stackPop(&obj->top);
    }
    free(obj);
}

/**
 * Your StockSpanner struct will be instantiated and called as such:
 * StockSpanner* obj = stockSpannerCreate();
 * int param_1 = stockSpannerNext(obj, price);
 
 * stockSpannerFree(obj);
*/