class Solution {
public:
    int mergeStones(vector<int>& stones, int k) {
        int sum = 0;
        if ((stones.size() - k) % (k - 1) != 0) return -1;
        vector<int> prefix(stones.size() + 1, 0);
        for (int i = 0; i < stones.size(); i++) prefix[i + 1] = prefix[i] + stones[i];
        int n = stones.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int l = k - 1; l < n; l++) {
            int mini = INT_MAX, idx = -1;
            for (int i = 0, j = i + l; i < n && j < n; i++, j++) {
                if (l == k - 1) {
                    dp[i][j] = prefix[j + 1] - prefix[i];
                    continue;
                }
                dp[i][j] = INT_MAX;
                for (int m = i; m < j; m += k - 1) {
                    dp[i][j] = min(dp[i][j], dp[i][m] + dp[m + 1][j]);
                }
                if (l % (k - 1) == 0) {
                    dp[i][j] += prefix[j + 1] - prefix[i];
                }
            }
            //cout << idx << ":" << mini << ":" << sum << endl;
        }
        if (dp[0][n - 1] == INT_MAX) dp[0][n - 1] = -1;
        return dp[0][n - 1];
    }
};