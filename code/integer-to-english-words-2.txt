#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *digitToWord(int *num) {
    switch(*num) {
        case 90: (*num) -= 90; return "Ninety ";
        case 80: (*num) -= 80; return "Eighty ";
        case 70: (*num) -= 70; return "Seventy ";
        case 60: (*num) -= 60; return "Sixty ";
        case 50: (*num) -= 50; return "Fifty ";
        case 40: (*num) -= 40; return "Forty ";
        case 30: (*num) -= 30; return "Thirty ";
        case 20: (*num) -= 20; return "Twenty ";
        case 19: (*num) -= 19; return "Nineteen ";
        case 18: (*num) -= 18; return "Eighteen ";
        case 17: (*num) -= 17; return "Seventeen ";
        case 16: (*num) -= 16; return "Sixteen ";
        case 15: (*num) -= 15; return "Fifteen ";
        case 14: (*num) -= 14; return "Fourteen ";
        case 13: (*num) -= 13; return "Thirteen ";
        case 12: (*num) -= 12; return "Twelve ";
        case 11: (*num) -= 11; return "Eleven ";
        case 10: (*num) -= 10; return "Ten ";
        case 9: (*num) -= 9; return "Nine ";
        case 8: (*num) -= 8; return "Eight ";
        case 7: (*num) -= 7; return "Seven ";
        case 6: (*num) -= 6; return "Six ";
        case 5: (*num) -= 5; return "Five ";
        case 4: (*num) -= 4; return "Four ";
        case 3: (*num) -= 3; return "Three ";
        case 2: (*num) -= 2; return "Two ";
        case 1: (*num) -= 1; return "One ";
        case 0: (*num) -= 0; return "Zero ";
        default: return "Error";
    }
}

char *numberToWords(int num) {
    if (num == 0) {
        return "Zero";
    }
    int tmp, tmp2;
    char *out = malloc(1024);
    out[0] = 0;
    int billions = num / 1000000000;//1 000 000 000
    num -= (billions * 1000000000);
    int millions = num / 1000000;//1 000 000
    num -= (millions * 1000000);
    int thousands = num / 1000;//1 000
    num -= (thousands * 1000);
    if (billions > 0){
        strcat(out, digitToWord(&billions));
        strcat(out, "Billion ");
    }
    if (millions > 0){
        if (millions > 99) {
            tmp = millions / 100;
						tmp2 = tmp;
            strcat(out, digitToWord(&tmp));
            strcat(out, "Hundred ");
            millions -= tmp2 * 100;
        }
        if ((millions < 20) && (millions > 10)) {
            strcat(out, digitToWord(&millions));
        }
        if (millions > 9) {
            tmp = millions / 10;
            tmp2 = tmp;
            tmp *= 10;
            strcat(out, digitToWord(&tmp));
            millions -= tmp2*10;
        }
        if (millions > 0) {
            strcat(out, digitToWord(&millions));
        }
        strcat(out, "Million ");
    }
    if (thousands > 0){
        if (thousands > 99) {
            tmp = thousands / 100;
            tmp2 = tmp;
            strcat(out, digitToWord(&tmp));
            strcat(out, "Hundred ");
            thousands -= tmp2 * 100;
        }
        if ((thousands < 20) && (thousands > 10)) {
            strcat(out, digitToWord(&thousands));
        }
        if (thousands > 9) {
            tmp = thousands / 10;
            tmp2 = tmp;
            tmp *= 10;
            strcat(out, digitToWord(&tmp));
            thousands -= tmp2*10;
        }
        if (thousands > 0) {
            strcat(out, digitToWord(&thousands));
        }
        strcat(out, "Thousand ");
    }
    if (num > 99) {
        tmp = num / 100;
        tmp2 = tmp;
        strcat(out, digitToWord(&tmp));
        strcat(out, "Hundred ");
        num -= tmp2 * 100;
    }
    if ((num < 20) && (num > 10)) {
        strcat(out, digitToWord(&num));
    }
    if (num > 9) {
        tmp = num / 10;
        tmp2 = tmp;
        tmp *= 10;
        strcat(out, digitToWord(&tmp));
        num -= tmp2*10;
    }
    if (num > 0) {
        strcat(out, digitToWord(&num));
    }
    tmp = strlen(out);
    if (out[tmp-1] == ' ') {
            out[tmp-1] = 0;
        }
    return out;
}

int main() {
    printf("|%s|\n", numberToWords(1234567891));
    return 0;
}