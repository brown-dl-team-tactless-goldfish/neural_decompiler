/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** shiftGrid(int** grid, int gridSize, int* gridColSize, int k, int* returnSize, int** returnColumnSizes){
    *returnColumnSizes = (int*)malloc(gridSize*sizeof(int));
    int* cacheX = (int*)malloc(*gridColSize*sizeof(int));
    int* cacheY = (int*)malloc(gridSize*sizeof(int));
    
    for( int y=0; y<gridSize; y++ )
    {
        (*returnColumnSizes)[y] = *gridColSize;
    }
    
    for( int shift=0; shift<k; shift++ )
    {
         for( int y=0; y<gridSize; y++ )
         {
             for( int x=0; x<*gridColSize; x++ )
             {
                 cacheX[(x+1)%*gridColSize] = grid[y][x];
             }
             memcpy(&grid[y][0],cacheX,*gridColSize*sizeof(int));
         }
    
         for( int y=0; y<gridSize; y++ )
         {
             cacheY[(y+1)%gridSize] = grid[y][0];
         }
         for( int y=0; y<gridSize; y++ )
         {
             grid[y][0] = cacheY[y];
         }
    }
    
    *returnSize = gridSize;
    free(cacheX);
    free(cacheY);
    return grid;
}