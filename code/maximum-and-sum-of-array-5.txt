class Solution {
public:
    
    int ans=0;
    int dp[300000][20];
    int solve(int slot,int mask,vector<int>&nums,int k){
        
        if(k==nums.size()){
            return 0;
        }
        if(dp[mask][k]!=-1)return dp[mask][k];
        
        int o1=INT_MIN;
        int o2=INT_MIN;
        
        for(int j=0;j<slot;j++){
            
            if(mask&(3<<(2*j))){
                if(mask&(1<<(2*j))){                                
                o1= max(o1,(nums[k]&(j+1))+solve(slot,mask^(1<<(2*j)),nums,k+1));
                }
                else if(mask&(2<<(2*j))){
                 o2=max(o2,(nums[k]&(j+1))+solve(slot,mask^(2<<(2*j)),nums,k+1));
                }
                
            }
        }
        
        return dp[mask][k]= max(o1,o2);
        
    }
    int maximumANDSum(vector<int>& nums, int numSlots) {
        
        int n=nums.size();
        int m=numSlots;
        m=m*2;
        int mask = (1<<m) -1;
        memset(dp,-1,sizeof(dp));
        return solve(numSlots,mask,nums,0);
       
    }
};