class Solution {
public:
    string largestMultipleOfThree(vector<int>& digits) {
        int N = digits.size();
        vector<vector<vector<int>>> dp(N, vector<vector<int>>(3, {0, -1}));
        sort(digits.begin(), digits.end(), greater<int>());
        
        if (digits[0] == 0) {
            return "0";
        }
        
        int maxidx = -1, best0idx = -1, best1idx = -1, best2idx = -1;
        
        for (int i = 0; i < N; ++i) {
            int m = digits[i] % 3;
            dp[i][m][0] = 1; 
            dp[i][m][1] = -1;

            if (m == 0) {
                if (best0idx != -1 && dp[i][0][0] < dp[best0idx][0][0] + 1) {
                    dp[i][0][0] = dp[best0idx][0][0] + 1;
                    dp[i][0][1] = best0idx;
                }
                if (best1idx != -1 && (dp[i][1][0] < dp[best1idx][1][0] + 1)) {
                    dp[i][1][0] = dp[best1idx][1][0] + 1;
                    dp[i][1][1] = best1idx;
                }
                if (best2idx != -1 && (dp[i][2][0] < dp[best2idx][2][0] + 1)) {
                    dp[i][2][0] = dp[best2idx][2][0] + 1;
                    dp[i][2][1] = best2idx;
                }
            } else if (m == 1) {
                if (best2idx != -1 && (dp[i][0][0] < dp[best2idx][2][0] + 1)) {
                    dp[i][0][0] = dp[best2idx][2][0] + 1;
                    dp[i][0][1] = best2idx;
                }
                if (best0idx != -1 && dp[i][1][0] < dp[best0idx][0][0] + 1) {
                    dp[i][1][0] = dp[best0idx][0][0] + 1;
                    dp[i][1][1] = best0idx;
                }
                if (best1idx != -1 && (dp[i][2][0] < dp[best1idx][1][0] + 1)) {
                    dp[i][2][0] = dp[best1idx][1][0] + 1;
                    dp[i][2][1] = best1idx;
                }
            } else if (m == 2) {
                if (best1idx != -1 && (dp[i][0][0] < dp[best1idx][1][0] + 1)) {
                    dp[i][0][0] = dp[best1idx][1][0] + 1;
                    dp[i][0][1] = best1idx;
                }
                if (best2idx != -1 && (dp[i][1][0] < dp[best2idx][2][0] + 1)) {
                    dp[i][1][0] = dp[best2idx][2][0] + 1;
                    dp[i][1][1] = best2idx;
                }
                if (best0idx != -1 && dp[i][2][0] < dp[best0idx][0][0] + 1) {
                    dp[i][2][0] = dp[best0idx][0][0] + 1;
                    dp[i][2][1] = best0idx;
                }
            }
            if (dp[i][0][0]) {
                if (best0idx == -1 || dp[best0idx][0][0] < dp[i][0][0]) {
                    best0idx = i;    
                }
            }
            if (dp[i][1][0]) {
                if (best1idx == -1 || dp[best1idx][1][0] < dp[i][1][0]) {
                    best1idx = i;    
                }
            }
            if (dp[i][2][0]) {
                if (best2idx == -1 || dp[best2idx][2][0] < dp[i][2][0]) {
                    best2idx = i;    
                }
            }
            if (dp[i][0][0]) {
                if (maxidx == -1) {
                    maxidx = i;
                } else if (dp[maxidx][0][0] < dp[i][0][0]) {
                    maxidx = i;
                }
            }
        }
        
        int i = maxidx;
        int sum = 0;
        string result;
        
        while (i != -1) {
            result.push_back('0' + digits[i]);
            int m = sum % 3;
            sum += digits[i];
            
            switch (m) {
                case 0:
                    i = dp[i][0][1];
                    break;
                    
                case 1:
                    i = dp[i][2][1];
                    break;
                    
                case 2:
                    i = dp[i][1][1];
                    break;
                    
                default:
                    assert(false);
            }
        }
        
        reverse(result.begin(), result.end());
        return result;
    }
};