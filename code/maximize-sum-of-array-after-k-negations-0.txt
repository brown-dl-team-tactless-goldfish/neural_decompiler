int cmpfunc(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}
int negItems(int* nums, int numsSize){
    int left = 0, right = numsSize-1;
    int mid;
    while(left < right){
        mid = right - (right - left)/2 ;
        if(nums[mid] >=0)
            right = mid-1;
        else
            left = mid;
    }
    if(nums[left] < 0)
        return left + 1;
    else
        return 0;
}
int largestSumAfterKNegations(int* nums, int numsSize, int k){
    qsort(nums, numsSize, sizeof(int), cmpfunc);
    int negi = negItems(nums, numsSize) ;
    int sum = 0;
    //case 1 negi >= k
    if(negi >= k ){
        sum = 0;
        for(int i = 0; i < k; i++){
            sum +=  nums[i] * -1 ;
        }
        for(int i = k; i < numsSize; i++){
            sum += nums[i];
        }
        return sum;        
    }
    //case 2 negi = 0
    else if(negi == 0){
        sum = 0;
        for(int i = 0; i < numsSize; i++){
            sum += nums[i] ;
        }
        if(k%2 == 0)
            return sum;
        else
            return sum - 2*nums[0];
    }
    //case 3 negi < k
    else{
        sum = 0;
        for(int i = 0; i < negi; i++){
            sum +=  nums[i] * -1 ;
        }
        for(int i = negi; i < numsSize; i++){
            sum += nums[i];
        }
        if( (negi - k) % 2 == 0 )
            return sum;
        else{
            if(negi < numsSize) 
                return sum - 2*fmin( nums[negi-1]* -1, nums[negi]);
            else
                return sum - 2* nums[negi-1]* -1 ;
        }
    }
}