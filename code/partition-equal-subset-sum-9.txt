bool canPartition(int* nums, int numsSize){
    int iSum = 0;
    int iMaxValueForSubsetSum = 0;
    int iCurrentChosen = 0;
    int iCurrentNotChosen = 0;
    
    for (int iIdx = 0; iIdx < numsSize; iIdx++) {
        iSum += nums[iIdx];
    }
    
    if (iSum % 2) {
        return false;
    }
    
    iMaxValueForSubsetSum = iSum / 2;
    int numSum[numsSize + 1][iMaxValueForSubsetSum + 1];
    
    for (int iNumIdx = 0; iNumIdx <= numsSize; iNumIdx++) {
        for (int iSumIdx = 0; iSumIdx <= iMaxValueForSubsetSum; iSumIdx++) {
            if ((iNumIdx == 0) || (iSumIdx == 0)) {
                numSum[iNumIdx][iSumIdx] = 0;
                continue;
            }
                    
            if (nums[iNumIdx - 1] <= iSumIdx) {
                iCurrentChosen = nums[iNumIdx - 1] + numSum[iNumIdx - 1][iSumIdx - nums[iNumIdx - 1]];
                iCurrentNotChosen = numSum[iNumIdx - 1][iSumIdx];
                numSum[iNumIdx][iSumIdx] = iCurrentChosen > iCurrentNotChosen ? iCurrentChosen : iCurrentNotChosen;
            }
            else {
                numSum[iNumIdx][iSumIdx] = numSum[iNumIdx - 1][iSumIdx];
            }
            
            if (numSum[iNumIdx][iSumIdx] == iMaxValueForSubsetSum) {
                return true;
            }
        }
    }
    
    return false;
}