class Solution {
public:
    vector<int> arr;
    vector<int> used;
    int n;
    int m;
    bool dfs(int j, int r)
    {
        if (r == 0)
        {
            return true;
        }
        while (arr[j] != 0)
        {
            j++;
        };
        for (int k = n; k >= 1; k--)
        {
            if (used[k] == 1)
            {
                continue;
            }
            int d = (k == 1) ? 0 : k;
            if (j + d < m && arr[j + d] == 0)
            {
                used[k] = 1;
                arr[j] = k;
                arr[j + d] = k;
                bool res = dfs(j + 1, r - 1);
                if (res)
                {
                    return res;
                }
                arr[j + d] = 0;
                arr[j] = 0;
                used[k] = 0;
            }
        }
        return false;
    }
    vector<int> constructDistancedSequence(int n1) {
        n = n1;
        arr.resize(2 * n - 1, 0);
        m = arr.size();
        used = vector<int>(n + 1, 0);
        dfs(0, n);
        return arr;
    }
};