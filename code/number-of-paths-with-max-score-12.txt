class Solution {
public:
    int mod=1000000007;
    vector<int> pathsWithMaxScore(vector<string>& board) {
        vector<int>v;
        vector<vector<vector<int>>>dp(board.size(),vector<vector<int>>(board[0].size(),vector<int>(3))); //[sum,number of val,can pass]
        int r=board.size();
        int c=board[0].size();
        dp[r-1][c-1][2]=1;
        dp[r-1][c-1][1]=1;
        board[0][0]='0';//modify to 0, without any affect
        for(int i=c-2;i>=0;i--){
            if(board[r-1][i]=='X'){
                dp[r-1][i][2]=0;//can not pass
            }else{
                if(dp[r-1][i+1][2]==0){//nothing can pass
                     dp[r-1][i][2]=0;
                }else{
                     dp[r-1][i][2]=1;//can pass
                     dp[r-1][i][1]=1;
                     dp[r-1][i][0]=dp[r-1][i+1][0]+(board[r-1][i]-'0');
                }
            }
        }
        for(int i=r-2;i>=0;i--){
            for(int j=c-1;j>=0;j--){//3 case
                if(board[i][j]=='X'){
                    dp[i][j][2]=0;
                }else{
                    int M=INT_MIN;
                    vector<pair<int,int>>v;
                    if(inrange(board,i+1,j)&&dp[i+1][j][2]==1){
                        M=max(M,dp[i+1][j][0]);
                        v.push_back({dp[i+1][j][0],dp[i+1][j][1]});
                    }
                    if(inrange(board,i+1,j+1)&&dp[i+1][j+1][2]==1){
                        M=max(M,dp[i+1][j+1][0]);
                        v.push_back({dp[i+1][j+1][0],dp[i+1][j+1][1]});
                    }
                    if(inrange(board,i,j+1)&&dp[i][j+1][2]==1){
                        M=max(M,dp[i][j+1][0]);
                        v.push_back({dp[i][j+1][0],dp[i][j+1][1]});
                    }
                    if(v.size()==0){
                        dp[i][j][2]=0;
                    }else{
                        dp[i][j][0]=M+(board[i][j]-'0');
                        dp[i][j][2]=1;
                        for(pair<int,int>p:v){
                            if(p.first==M){
                                dp[i][j][1]+=p.second;
                                dp[i][j][1]%=mod;
                            }
                        }
                    }
                }
            }
        }
        if(dp[0][0][2]==1){
            v.push_back(dp[0][0][0]);
            v.push_back(dp[0][0][1]);
        }else{
            v.push_back(0);v.push_back(0);
        }
        return v;
    }
    
    bool inrange(vector<string>& board,int r,int c){
        if(r<0||c<0||r>=board.size()||c>=board[0].size())return false;
        return true;
    }
};