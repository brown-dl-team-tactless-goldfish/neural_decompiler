class Solution {
public:
    bool possibleToStamp(vector<vector<int>>& grid, int stampHeight, int stampWidth) {
        vector<vector<int>> DP = vector<vector<int>>(int(grid.size()) + 1, vector<int>(int(grid[0].size()) + 1, 0));
        vector<vector<int>> grid2 = vector<vector<int>>(int(grid.size()) + 1, vector<int>(int(grid[0].size()), 0));
        
        for (int i = 1; i <= int(grid.size()); i++)
            for (int j = 1; j <= int(grid[0].size()); j++)
                DP[i][j] = DP[i - 1][j] + DP[i][j - 1] - DP[i - 1][j - 1] + int(grid[i - 1][j - 1] == 0);
                
        for (int i = 0; i < int(grid.size()); i++) {
            for (int j = 0; j < int(grid[0].size()); j++) {
                int nx = i + stampHeight;
                int ny = j + stampWidth;
                if (nx <= int(grid.size()) && ny <= int(grid[0].size())) {
                    int tot = DP[nx][ny] - DP[nx - stampHeight][ny] - DP[nx][ny - stampWidth] + DP[nx - stampHeight][ny - stampWidth];
                    if (tot == stampHeight * stampWidth) {
                        grid2[i][j]++;                        
                        grid2[i + stampHeight][j]--;
                    }
                }
            }           
        }
        
        for (int i = 0; i < int(grid.size()); i++) {
            int prv = -1e6;
            for (int j = 0; j < int(grid[0].size()); j++) {
                if (grid2[i][j] >= 1) {
                    grid2[i + 1][j] += grid2[i][j];
                    prv = j;
                }
                if (grid[i][j] == 0 && j - prv >= stampWidth)
                    return false;
            }
        }                
        return true;
    }
};