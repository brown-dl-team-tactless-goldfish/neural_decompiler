//using stack
class Solution {
public:
    vector<int> mostCompetitive(vector<int>& nums, int k) {
        int n=nums.size();
        stack<int> stk;
        for(int i=0;i<n;i++){
            while(!stk.empty() && stk.top()>nums[i] && k<(n-i+stk.size())){
               stk.pop();
            }
            if(stk.size()<k)
               stk.push(nums[i]);
        }
        vector<int> res;
        while(!stk.empty()){
            res.push_back(stk.top());
            stk.pop();
        }
        reverse(res.begin(),res.end());
        return res;
    }
};
//using vector as stack
class Solution {
public:
    vector<int> mostCompetitive(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> stk;
        for(int i=0;i<n;i++){
            while(!stk.empty() && stk.back()>nums[i] && k<(n-i+stk.size())){
                stk.pop_back();
            }
            if(stk.size()<k)
               stk.push_back(nums[i]);
        }
        return stk;
    }
};