class Solution {
public:
    vector<vector<int>> dir = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
    
    int maxDistance(vector<vector<int>>& grid) {
        int maxi = 0;
        list<pair<int, int>> ver;
        int r = grid.size(), c = grid[0].size();
        vector<vector<int>> dp (r, vector<int>(c, INT_MAX));
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[i].size(); j++) {
                if (grid[i][j] == 0)    continue;
                ver.push_back(make_pair(i, j));
                dp[i][j] = 0;
            }
        }
        if (ver.empty())    return -1;
        while (!ver.empty()) {
            int x = ver.front().first, y = ver.front().second;
            ver.pop_front();
            //cout << x << ":" << y << ":" << dp[x][y] << endl;
            maxi = max(maxi, dp[x][y]);
            for (int p = 0; p < dir.size(); p++) {
                int x1 = x + dir[p][0], y1 = y + dir[p][1];
                if (x1 >= 0 && x1 < r && y1 >= 0 && y1 < c) {
                    if (grid[x1][y1] == 0 && dp[x1][y1] > dp[x][y] + 1) {
                        ver.push_back(make_pair(x1, y1));
                        dp[x1][y1] = dp[x][y] + 1;
                        //cout << x1 << "::" << y1 << "::" << dp[x1][y1] << endl;
                    }
                }
            }
        }
        
        maxi = (maxi == 0) ? -1 : maxi;
        return maxi;
    }
};