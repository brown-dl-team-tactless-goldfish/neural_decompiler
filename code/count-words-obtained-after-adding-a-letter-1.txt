struct trienode
{
    struct trienode* ch[26];
    bool eow;
};

struct trienode* create_node()
{
    struct trienode *node = calloc(1, sizeof(struct trienode));
    return node;
}

void insert(struct trienode *root, int hash)
{
    int pos = 0;
    
    while(hash > 0)
    {
        if (hash & 1)
        {
            if (root->ch[pos] == NULL)
                root->ch[pos] = create_node();
            
            root = root->ch[pos];
            if (hash == 1)
                root->eow = true;
        }
        hash = hash>>1;
        pos++;
    }
}

int search(struct trienode *root, int hash)
{
    int pos = 0;
    
    while(hash > 0)
    {
        if (hash & 1)
        {
            if (root->ch[pos] == NULL)
                return 0;
            
            root = root->ch[pos];
            
            if (hash == 1 && root->eow == true)
                return 1;
        }
        hash = hash>>1;
        pos++;
    }
    
    return 0;
}

int wordCount(char ** startWords, int startWordsSize, char ** targetWords, int targetWordsSize)
{
    int hash, j, count = 0, mhash;
    struct trienode *root = create_node();
    
    for (int i=0; i<startWordsSize; i++)
    {
        hash = 0;
        j=0;
        while(startWords[i][j] != '\0')
        {
            hash |= (1<<(startWords[i][j]-'a'));
            j++;
        }
        
        insert(root, hash);
    }
    
    for (int i=0; i<targetWordsSize; i++)
    {
        hash = 0;
        j=0;
        while(targetWords[i][j] != '\0')
        {
            hash |= (1<<(targetWords[i][j]-'a'));
            j++;
        }
        
        mhash = hash;
        int pos = 0;
        while(mhash > 0)
        {
            if (mhash & 1)
            {
                if (search(root, hash ^ (1<<pos)))
                {
                    count++;
                    break;
                }
            }
            pos++;
            mhash = mhash>>1;
        }
    }
    
    return count;
}