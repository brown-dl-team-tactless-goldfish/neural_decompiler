class Solution {
public:
    vector<int> sumEvenAfterQueries(vector<int>& nums, vector<vector<int>>& queries) {
        unordered_map<int, bool> even_map;
        vector<int> solution;
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] % 2 == 0){
                even_map[i] = true;
                sum += nums[i];
            }
            else{
                even_map[i] = false; 
            }
        }
        
        for(int i = 0; i < queries.size(); i++){
            int start = nums[queries[i][1]];
            nums[queries[i][1]] +=  queries[i][0];
            if(even_map[queries[i][1]]){
                if(nums[queries[i][1]] % 2 == 0){
                    sum = sum + (nums[queries[i][1]] - start);
                }
                else{
                    even_map[queries[i][1]] = false;
                    sum = sum - start;
                }
            }
            else{
                if(nums[queries[i][1]] % 2 == 0){
                    sum = sum + (nums[queries[i][1]]);
                    even_map[queries[i][1]] = true;
                }
            }
            solution.push_back(sum);   
        }
        return solution;
    }
};