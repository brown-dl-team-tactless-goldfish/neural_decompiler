class Solution {
public:
  
int find(int a,vector<int>&parent){
   
    if(parent[a]==a) return a;
   return parent[a]=find(parent[a],parent);
 } 
  
int merge(int a,int b,vector<int>&parent){
  
  int pa=find(a,parent);
  int pb=find(b,parent);
  if(pa!=pb){
    parent[pa]=pb;
    return 1;
  }
  return 0;
  
}
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
      int m=edges.size(); 
      vector<int>red(n+1);
      vector<int>green(n+1);
      for(int i=0;i<=n;i++){
        green[i]=i;
        red[i]=i;
      }
      int rc=0;
      int gc=0;
      int edg=0;
      for(int i=0;i<edges.size();i++){
        if(edges[i][0]==3){
           edg+=merge(edges[i][1],edges[i][2],red);
           merge(edges[i][1],edges[i][2],green);
        }
      }
      
       for(int i=0;i<edges.size();i++){
        if(edges[i][0]==1){
          rc+=merge(edges[i][1],edges[i][2],red);
        }else if(edges[i][0]==2){
          gc+=merge(edges[i][1],edges[i][2],green);
        }else{
          
        }
      }
      map<int,int>mg,mr;
      int sg=0;
      int sr=0;
      for(int i=1;i<=n;i++){
        mg[find(i,green)]++;
        sg=max(sg,mg[find(i,green)]);
        mr[find(i,red)]++;
        sr=max(sr, mr[find(i,red)]);
      }
      if(sr!= n ||sg!=n) return -1;
      return m-edg-rc-gc;
    }
};
