class Solution {
public:
    int minimumScore(string s, string t) {
        vector<int> right(t.length(), -1);
        vector<int> left(t.length(), -1);

        int i = 0; 

        for(int j = 0 ; j < s.length(); j++) {
            if ( i < t.length() && t[i] == s[j] ) {
                left[i] = j;
                i++;
            }
        }

        i = t.size()-1;
        for(int j = s.length()-1 ; j >= 0; j--) {
            if ( i >= 0 && t[i] == s[j] ) {
                right[i] = j;
                i--;
            }
        }

        int ans = t.size();
        int low = 0, high = t.size();
        while (low <= high) {
            int mid = (low + high)/2;
            if (isSubSequence(t, mid, left, right)) {
                ans = mid;
                high = mid -1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    bool isSubSequence(string &t, int val, vector<int> &left, vector<int> &right) {
        if(val == t.length()) {
            return true;
        }

        for(int i=0; i<=t.length()-val; i++) {
            if (i-1>=0 && i+val < t.length()) {
                if(left[i-1] !=-1 && right[i+val] != -1 && right[i+val] > left[i-1]) {
                    return true;
                }
            } else if (i-1 >= 0) {
                if (left[i-1] != -1) {
                    return true;
                }
            } else if (i+val < t.length()) {
                if(right[i+val] != -1) {
                    return true;
                }
            }
        }
        return false;
    }


};
