class Solution {
public:
    bool isPossible(int n, vector<vector<int>>& edges)
    {
        map<int,map<int,int>>mpp;
        vector<int>cnt(n+1,0);
        for(auto it: edges)
        {
            int a = it[0];
            int b = it[1];
            mpp[a][b] = 1;
            mpp[b][a] = 1;
            cnt[a]++;
            cnt[b]++;
        };
        int c= 0;
        vector<int>temp;
        for(int i = 1;i<=n;i++)
        {
            if(cnt[i]%2==1)
            {
                c++;
                temp.push_back(i);
            }
        }
      
        if(c==0 )
        {
            return true;
        }
        else if(c==2)
        {
          int a = temp[0];
            int b = temp[1];
            if(mpp[a][b]==1)
            {
               for(int i  =1;i<=n;i++)
               {
                   if(cnt[i]%2==0 && mpp[a][i]==0 && mpp[b][i]==0)
                   {
                       return true;
                   }
               }
                return false;
            }
            else
            return true;
        }
        else if(c==4)
        {
            int a  =  temp[0];
            for(int i = 1;i<4;i++)
            {
               int b = temp[i];
                if(mpp[a][b]==0)
                {
                    vector<int>pp;
                    for(int k = 1;k<4;k++)
                    {
                         if(k==i)
                             continue;
                        else
                        pp.push_back(temp[k]);
                    }
                   int c = pp[0];
                    int d = pp[1];
                    if(mpp[c][d]==0)
                    {
                    
                        return true;
                    }
                }
            }
            return false;
        }
        else
            return false;
    }
};