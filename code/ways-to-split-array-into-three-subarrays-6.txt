const int mod = 1e9 + 7;

int count_bet(vector<int> &a, int ind, int low, int high) {
    if(low > high) return 0;
    
    auto l_itr = lower_bound(a.begin(), a.begin() + ind, low);
    auto r_itr = upper_bound(a.begin(), a.begin() + ind, high);
    return (r_itr - l_itr);
}

class Solution {
public:
    int waysToSplit(vector<int>& a) {
        int n = a.size();
		
        auto pref = a;
        for(int i = 1; i < n; i++) {
            pref[i] += pref[i - 1];
        }
        
        int sum = pref.back();
        long long cnt = 0;
        
        int suf = 0;
        for(int i = n - 1; i >= 2; i--) {
            suf += a[i];
            auto in_bet = count_bet(pref, i - 1, sum - 2*suf, (sum - suf)/2);
            cnt = (cnt + in_bet) % mod;
        }
        
        return cnt;
    }
};