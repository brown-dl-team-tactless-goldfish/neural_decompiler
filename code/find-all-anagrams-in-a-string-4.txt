
bool exact_match(char *s, int len, int *p_chars)
{
        int s_chars[26] = {0};
        int i;
        
        for (i = 0; i < len; i++) {
                s_chars[s[i] - 'a']++;
        }
        
        for (i = 0; i < 26; i++)
                if (p_chars[i] != s_chars[i])
                        return false;
        return true;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findAnagrams(char * s, char * p, int* returnSize){
        int len1 = strlen(s);
        int len2 = strlen(p);
        
        if (len1 < len2) {
                *returnSize = 0;
                return NULL;
        }
        
        int i;
        int p_chars[26] = {0};
        for (i = 0; i < len2; i++)
                p_chars[p[i] - 'a']++;
        
        int *ret = malloc((len1 - len2 + 1) * sizeof(int));
        int rs = 0; //return size
        
        int chars[26] = {0};
        int raw_sum = 0;
        for (i = 0; i < len2; i++)
                raw_sum -= p[i];
        
        for (i = 0; i < len2; i++)
                raw_sum += s[i];
        if (!raw_sum && exact_match(s, len2, p_chars))
                ret[rs++] = 0;
        
        for (i = len2; i < len1; i++) {
                raw_sum += s[i];
                raw_sum -= s[i - len2];
                if (!raw_sum && exact_match(s + i - len2 + 1, len2, p_chars))
                        ret[rs++] = i - len2 + 1;
        }
        
        *returnSize = rs;
        return ret;
}