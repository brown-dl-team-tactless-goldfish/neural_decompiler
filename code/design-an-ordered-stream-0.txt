


typedef struct {
    char** data;
    int size;
    int ptr;
} OrderedStream;


OrderedStream* orderedStreamCreate(int n) {
    OrderedStream* ret = malloc(sizeof(OrderedStream));
    ret->data = calloc((n+1), sizeof(char*));
    ret->size = n;
    ret->ptr = 1;
    return ret;
}

char ** orderedStreamInsert(OrderedStream* obj, int idKey, char * value, int* retSize) {
    char** ans = NULL;
    *retSize = 0;
    obj->data[idKey] = malloc(6 * sizeof(char));
    strcpy( obj->data[idKey], value );
    if(obj->ptr != idKey){
        return ans;
    }
    int tmp = idKey;
    while(tmp <= obj->size && obj->data[tmp] ){
        (*retSize)++;
        tmp++;
    }
    ans = malloc( (*retSize) * sizeof(char*) );
    for(int i = 0; i < *retSize; i++){
        ans[i] = malloc(6 * sizeof(char));
        strcpy( ans[i], obj->data[idKey + i] );
    }
    obj->ptr = idKey + (*retSize) ;
    return ans;
}

void orderedStreamFree(OrderedStream* obj) {
    for(int i = 1; i <= obj->size; i++){
        if(obj->data[i])
            free( obj->data[i] );
    }
    free(obj->data);
    free(obj);
}

/**
 * Your OrderedStream struct will be instantiated and called as such:
 * OrderedStream* obj = orderedStreamCreate(n);
 * char ** param_1 = orderedStreamInsert(obj, idKey, value, retSize);
 
 * orderedStreamFree(obj);
*/