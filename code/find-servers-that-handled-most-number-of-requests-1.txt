    vector<int> busiestServers(int k, vector<int>& arrival, vector<int>& load) {
        set<int> freeServers;
        for(int i=0;i<k;i++) freeServers.insert(i);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> jobs; //complete time, server No.
        vector<int> counter(k,0);
        for(int i=0;i<arrival.size();i++){
            const int t = arrival[i];
            
            // check done job, and free the servers
            while(!jobs.empty() && jobs.top().first <= t){
                auto [t_out, server] = jobs.top(); jobs.pop();
                freeServers.insert(server);
            }
            
            if(freeServers.empty()) continue;
            
            // assign job to a server
            auto it = freeServers.lower_bound(i%k);
            if(it == freeServers.end()) it = freeServers.begin();
            const int server = *it;
            freeServers.erase(it);
            jobs.push(pair(t+load[i], server));
            counter[server]++;
        }
        
        const int maxCount = *max_element(counter.begin(), counter.end());
        vector<int> res;
        for(int i=0;i<k;i++) if(counter[i] == maxCount) res.push_back(i);
        return res;
    }