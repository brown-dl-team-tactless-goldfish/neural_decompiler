class Solution {
public:
    const int mod = 1e9 + 7;
    int power(long long base, long long p) {
        long long res = 1;
        while (p > 0) {
            if (p & 1) {
                res = (res * base) % mod;
            }
            base = (base * base) % mod;
            p /= 2;
        }
        return res;
    }
    int countAnagrams(string s) {
        int n = s.size();
        long long sol = 1;
        vector<long long> fac(n + 1);
        fac[0] = 1;
        for (int i = 1; i < n + 1; i++) {
            fac[i] = (fac[i - 1] * i) % mod;
        }
        for (int i = 0; i < n; i++) {
            int j = i;
            vector<int> freq(26);
            while (j < n && s[j] != ' ') {
                ++freq[s[j] - 'a'];
                ++j;
            }
            long long res = 1;
            for (int j = 0; j < 26; j++) {
                res = (res * fac[freq[j]]) % mod;
            }
            long long len = j - i;
            long long inv = power(res, mod - 2);
            sol = (sol * ((fac[len] * inv) % mod)) % mod;
            i = j;
        }
        return sol;
    }
};