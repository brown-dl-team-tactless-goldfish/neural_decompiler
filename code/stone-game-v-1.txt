def stoneGameV(self, v: List[int]) -> int:
	@lru_cache(None)
	def dfs(i: int, j: int) -> int:
		res = 0
		for k in range(i, j):
			if v[k] - v[i - 1] <= v[j] - v[k]:
				res = max(res, v[k] - v[i - 1] + dfs(i, k))
			if v[k] - v[i - 1] >= v[j] - v[k]:
				res = max(res, v[j] - v[k] + dfs(k + 1, j))
		return res
	v = [0] + list(itertools.accumulate(v))
	return dfs(1, len(v) - 1) 