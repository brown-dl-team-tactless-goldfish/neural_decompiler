void calculateHistorgram(unsigned char finalFreq[26], char ** A, int ASize){
    unsigned char tempFreq[26];
    char * strPtr;
    int i, j;
    
    for(strPtr = A[0]; *strPtr != '\0'; ++strPtr)
        ++finalFreq[*strPtr - 'a'];
    
    for(i = 1; i < ASize; ++i){
        memset(tempFreq, 0, sizeof(tempFreq));
        
        for(strPtr = A[i]; *strPtr != '\0'; ++strPtr)
            ++tempFreq[*strPtr - 'a'];
        
        for(j = 0; j < 26; ++j){
            if(tempFreq[j] < finalFreq[j])
                finalFreq[j] = tempFreq[j];
        }
    }
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** commonChars(char ** A, int ASize, int* returnSize){
    unsigned char freq[26] = {0};
    char ** output;
    int i, j, ctr;
    int outputSize = 0;
    
    calculateHistorgram(freq, A, ASize);
    
    for(i = 0; i < 26; ++i)
        outputSize += freq[i];
    
    output = malloc(outputSize * sizeof(char *));
    
    for(i = 0, j = 0; i < 26; ++i){
        for(ctr = freq[i]; ctr-- > 0; ++j){
            output[j] = malloc(2 * sizeof(char));
            output[j][0] = 'a' + i;
            output[j][1] = '\0';
        }
    }
    
    *returnSize = outputSize;
    
    return output;
}