
class Solution {
public:
   
    int recc(vector<vector<int>>& adj, int i , int k, vector<int>& dpp)
    {
        if(i>=adj.size())
            return 0;
        
        if(dpp[i]!=-1)
        {
            return dpp[i];
        }
        int ans  = 0;
        for(int j = i+k-1;j<adj.size();j++)
        {
            if(adj[i][j]==1)
            {
                ans = max(ans, recc(adj,j+1,k, dpp)+1);
            }
        }
         ans = max(ans, recc(adj,i+1,k, dpp));
        return dpp[i] = ans ;
    } 

    int maxPalindromes(string s, int k)
    {
          int len  = s.length();
    
       
       vector<vector<int>>dp(len, vector<int>(len,0));
        for(int i =  0;i<len;i++)
        {
            dp[i][i]= 1;
        }
        for(int i  = len-2;i>=0;i--)
        {
            int st = len-1;
            for(int  j = i;j>=0 && st;j--)
            {
                int x  = j;
                int y = st;
                if(y-x==1)
                {
                    if(s[x]==s[y])
                    dp[x][y] = 1;
                }
               else if(s[x]==s[y] && dp[x+1][y-1]==1)
                {
                    dp[x][y] = 1;
                }
                st--;
                
            }
        }
        vector<int>dpp(len,-1);
       return recc(dp,0,k, dpp);
     
      
    }
};