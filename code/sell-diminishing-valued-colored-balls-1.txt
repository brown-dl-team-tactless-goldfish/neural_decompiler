class Solution {
public:
    int maxProfit(vector<int>& arr, int order) {
	
	 //Sorting of array to find maximum no of ball at last to start counting.
        sort(arr.begin(),arr.end());
        int n=arr.size();
		//Res  will store the final answer 
        long res=0;
		//color represent the type of color ball we take simultaneously 
        long color=1;
        int i=n-1;
        while(i>=0 and order>0 )
        {
		  //current point
            long curr=arr[i];
          
            long prev=i>0?arr[i-1]:0;
          //You have two choices weather you have full round or half round
		  //Full round occur when the curr-prev> order/color.
		  //It means you have to remove all the current balls
            long check_full_round1=order/color;
            long check_full_round2=curr-prev;
            
        //Taking minimum which help to decide weather you go for full or half round
            long full_round=min(check_full_round1,check_full_round2);
            
            
            //Decrese the number of balls=>round*order
            order-=full_round*color;
         
            //Count all  points
            res=(res+((curr*(curr+1)-(curr-full_round)*(curr-full_round+1))/2)*color)%1000000007;
            
            //if curr-prev> full_round means its time to fnd half round.
			//Its last time when we traverse b/c we have left with some value which less than curr-prev
            if(curr-prev>full_round){
                res=(res+order*(curr-full_round))%1000000007;
                break;
            }
            color++;
            i--;
            
            
        }
        return res;
        
        