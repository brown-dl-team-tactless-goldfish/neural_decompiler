#pragma GCC optimize("Ofast","inline","fast-math","unroll-loops","no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native","f16c")
static const auto fast = []() {ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); return 0; } ();
class Solution {
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        const int mod = 1e9 + 7;
        vector<vector<pair<int, int>>> g(n + 1);
        for (auto& e : edges) {
            g[e[0]].emplace_back(e[1], e[2]);
            g[e[1]].emplace_back(e[0], e[2]);
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[n] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        q.emplace(0, n);
        while (!q.empty()) {
            auto [d, u] = q.top();
            q.pop();
            if (d > dist[u]) continue;
            for (auto& [v, w] : g[u]) {
                if (d + w < dist[v]) {
                    dist[v] = d + w;
                    q.emplace(d + w, v);
                }
            }
        }
        vector<int> dp(n + 1, -1);
        dp[n] = 1;
        function<int(int)> dfs = [&](int u) {
            if (dp[u] != -1) return dp[u];
            dp[u] = 0;
            for (auto& [v, w] : g[u]) {
                if (dist[u] > dist[v]) {
                    dp[u] = (dp[u] + dfs(v)) % mod;
                }
            }
            return dp[u];
        };
        return dfs(1);
    }
};