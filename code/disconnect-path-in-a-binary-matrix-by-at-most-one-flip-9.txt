class Solution {
public:
    bool dfs(int i, int j, int m, int n, vector<vector<int>>& grid) {
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) return false;
    
        if(i == m-1 && j == n-1) {
            return true;
        }
        
        grid[i][j] = 0;
        return dfs(i+1, j, m, n, grid) || dfs(i, j+1, m, n, grid);
    }
    bool isPossibleToCutPath(vector<vector<int>>& grid) {
        int m = grid.size() ,n = grid[0].size(), cnt = 0;
        if(dfs(0, 0 , m, n , grid)) cnt++;
        grid[0][0] = 1;
        if(dfs(0, 0 , m, n , grid)) cnt++;
        return (cnt <= 1);
        
    }
};