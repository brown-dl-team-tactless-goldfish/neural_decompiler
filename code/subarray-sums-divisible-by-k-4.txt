int subarraysDivByK(int* nums, int numsSize, int k){
    char cIndex = 0;
    short sNumsSize = numsSize, sK = k, sOffset = 0;
    int nCount[sK], nRet = 0;
    memset(nCount, 0, sK*sizeof(int));

    while(numsSize-- > 0)
    {
        // get current remainder index
        short sIndex = *nums % sK;
        if(sIndex < 0) sIndex += sK;

        // update current offset of index
        sOffset = (sOffset + sIndex) % sK;

        // add count of new *nums into correspond index
        sIndex = sIndex < sOffset? sIndex + sK - sOffset: sIndex - sOffset;
        nCount[sIndex]++;

        // add count into return if the remainder is 0
        nRet += nCount[sOffset? sK - sOffset: 0];

        nums++;
    }

    return nRet;
}