int cmpfunc(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

long long minimumRemoval(int* beans, int beansSize){
    int n = beansSize;
    if(n == 1)
        return 0;
    qsort(beans, n, sizeof(int), cmpfunc);
    long long* prefix = malloc( n * sizeof(long long));
    long long* suffix = malloc( n * sizeof(long long));
    prefix[0] = beans[0];
    for(int i = 1; i < n; i++){
        prefix[i] = prefix[i-1] + beans[i];
    }
    
    suffix[n-1] = beans[n-1];
    for(int i = n-2; i >=0; i--){
        suffix[i] = suffix[i+1] + beans[i];
    }
    
    long long ans = LONG_MAX;
    
    ans = suffix[1] - (long long)beans[0]*(n-1);

    for(int i = 1; i < (n - 1); i++){
        if(beans[i] == beans[i-1])
            continue;
        long long temp = prefix[i-1] + suffix[i] - (long long)(n -i)*beans[i];
        if(temp < ans)
            ans = temp;
    }
    if( prefix[n-2] < ans )
        ans = prefix[n-2];

    return ans;
}