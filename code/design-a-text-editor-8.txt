class node{
	public:
	char c;
	node *next;
	node *prev;
	node(char t){
		c = t;
		next = NULL;
		prev = NULL;
	}
};


class TextEditor {
public:
	node *crs;
	int size;
	TextEditor() {
		crs = new node(' ');
		size = 0;
	}

	void addText(string text) {
		node *tmp = crs->next;
		for(char c : text){
			crs->next = new node(c);
			crs->next->prev = crs;
			crs = crs->next;
		}
		crs->next = tmp;
		if(tmp){
			tmp->prev = crs;
		}
		size += text.size();
	}

	int deleteText(int k) {
		node *cur = crs->next;
		int n = 0;
		while(crs->c != ' ' && n < k){
			crs = crs->prev;
			n++;
		}
		crs->next = cur;
		if(cur)  cur->prev = crs;
		return n;
	}

	string cursorLeft(int k) {
		node *cur = crs;
		string tmp = "";
		int n = k;
		while(cur->c != ' ' && n--){
			cur = cur->prev;
		}
		n = 10;
		crs = cur;
		while(cur->c != ' ' && n--){
			tmp.push_back(cur->c);
			cur = cur->prev;
		}
		reverse(tmp.begin(),tmp.end());
		return tmp;
	}

	string cursorRight(int k) {
		node *cur = crs;
		string tmp = "";
		int n = k;
		while(cur->next && n--){
			cur = cur->next;
		}
		n = 10;
		crs = cur;
		while(cur->c != ' ' && n--){
			tmp.push_back(cur->c);
			cur = cur->prev;
		}
		reverse(tmp.begin(),tmp.end());
		return tmp;
	}
};

/**
 * Your TextEditor object will be instantiated and called as such:
 * TextEditor* obj = new TextEditor();
 * obj->addText(text);
 * int param_2 = obj->deleteText(k);
 * string param_3 = obj->cursorLeft(k);
 * string param_4 = obj->cursorRight(k);
 */