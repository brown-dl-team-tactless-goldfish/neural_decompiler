
class Solution {
public:
    bool canDistribute(vector<int>& nums, vector<int>& Q) {
        unordered_map<int ,int> freq;
        for (auto num : nums)freq[num]++;
        vector<int>F;
        for (auto vals : freq)F.push_back(vals.second);
        int m = Q.size();
        sort(Q.begin(), Q.end(), greater<int>()); //sorting Quanties in reverse order
        int doneMask = 0;
        for (auto f : F) {   // For each freq f
            int mini = f;
            int foundMask = -1;
            for (int mask = 0; mask < (1<<m); mask++) {
                if (mask&doneMask) continue;  //selecting unique mask
                else {
                        int s = 0;
                        for (int j = 0 ; j < m; j++) if (mask &(1<<j)) s += Q[j];
                        if (s <= f) {
                            int diff = f -s ;
                            if (diff < mini) {  // minimize diff and selecting higer quanties first
                                mini = diff;
                                foundMask = mask;
                            }
                        }
                    }
                }
            if (foundMask != -1) doneMask |= foundMask;  // memorizing the solution found till now
        }
        return doneMask == (1<<m) - 1;
    }
};