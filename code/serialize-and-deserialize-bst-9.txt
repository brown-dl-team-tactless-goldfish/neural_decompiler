public class Codec {
    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        if (root == null)
        {
            return string.Empty;
        }
        
        StringBuilder res = new StringBuilder();
        
        res.Append(root.val);
        
        if (root.left != null)
        {
            res.Append("," + serialize(root.left));
        }
        
        if (root.right != null)
        {
            res.Append("," + serialize(root.right));
        }
        
        return res.ToString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        System.Console.WriteLine(data);
        
        if (string.IsNullOrEmpty(data))
        {
            return null;
        }
        
        int[] values = data.Split(",").Select(x => Convert.ToInt32(x)).ToArray();
        
        return deserialize(values, 0, values.Length - 1);
    }
    
    private TreeNode deserialize(int[] data, int i, int j) {
        TreeNode node = new TreeNode(data[i]);
        
        if (i != j)
        {
            int k = i + 1;
            
            for (; k <= j; k++)
            {
                if (data[k] > data[i])
                {
                    break;
                }
            }
            
            if (k != i + 1)
            {
                node.left = deserialize(data, i + 1, k - 1);
            }
            
            if (k <= j)
            {
                node.right = deserialize(data, k, j);
            }
        }
        
        return node;
    }
}