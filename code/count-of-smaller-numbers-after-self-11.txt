class Solution {
public:
    vector<int> mm;
    vector<int>res;
    vector<int> countSmaller(vector<int>& nums) {
        vector<int>dup(nums);
        res.resize(nums.size(), 0);
        vector<int> count; int i = 0;
        for(int i = 0 ; i < nums.size(); ++i)
        {
            mm.push_back(i);
        }
        countSmaller(nums, 0, nums.size() - 1);
        return res;
    }
    
    vector<int>countSmaller(vector<int> &nums, int l, int r)
    {
        if(l < r){ //mergesort termination cond.
            int mid = l + (r - l)/2;
            countSmaller(nums, l, mid);
            countSmaller(nums,  mid + 1, r);
            merge(nums,l, r, mid);
        }
        return nums;
    }
    
    void merge(vector<int>&nums, int l, int r, int m)
    {
        vector<int>v1(mm.begin() + l, mm.begin() + m + 1); //copy the index array left.
        vector<int>v2(mm.begin() + m + 1, mm.begin() + r + 1); //copy the index array right.
        int a = 0; int b = 0; int c = 0; int k = 0;
        // Generic mergesort adapted from GeeksForGeeks, we merge back to the original index array "mm".
        while(a < v1.size() && b < v2.size())
        {
            if(nums[v1[a]] <= nums[v2[b]])
            {
                res[v1[a]] += c;  //set the counter for the index that we sorted. 
                mm[l + k] = v1[a];
                a++;
            }
            else{
                c++;
                mm[l + k] = v2[b];
                b++;
            }
            k++;
        }
        while(a < v1.size()) //copy the leftover. and for the left half incrmeent the counts.
        {
            res[v1[a]] +=c;
            mm[l + k++] = v1[a++];
        }
        while(b < v2.size())mm[l + k++] = v2[b++]; //copy leftover right if any.
        
        return;
        
        }
};