class Solution {
public:
    int letterKindCheck(string& s) {
        unordered_set<string> k;
        for (char c : s) {
            if (c >= 'a' && c <= 'z') k.insert("lower");
            if (c >= 'A' && c <= 'Z') k.insert("upper");
            if (c >= '0' && c <= '9') k.insert("digit");
        }
        return k.size();
    }
    int strongPasswordChecker(string s) {
        int k = letterKindCheck(s);
        char cur = '#';
        vector<int> v;
        for (char c : s) {
            if (cur == c) {
                v.back()++;
            } else {
                if (v.empty() || v.back() >= 3) {
                    v.push_back(1);
                } else {
                    v.back() = 1;
                }
            }
            cur = c;
        }
        int len = s.length();
        int result = 0;
        sort(v.begin(), v.end());
        if (len < 6) {
            if (!v.empty() && v[0] == 5) {
                return 2;
            } else {
                len += 3 - k;
                return 3 - k + max(0, 6 - len);
            }
        }
        if (len <= 20) {
            int sum = 0;
            for (auto i : v) {
                sum += i / 3;
            }
            return max(3 - k, sum);
        }
        // len > 20
        for (int i = 0; i < 3 - k && !v.empty(); i++) {
            sort(v.begin(), v.end());
            v.back() -= 3;
            if (v.back() <= 2) v.pop_back();
        }
        result = 3 - k;
        for (int i = 0; i < len - 20; i++) {
            bool flag = false;
            for (int& j : v) {
                if (j > 2 && (j + 1) % 3 == 1) {
                    j--;
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                for (int& j : v) {
                    if (j > 2 && (j + 1) % 3 == 2) {
                        j--;
                        flag = true;
                        break;
                    }
                }
            }
            if (!flag) {
                for (int& j : v) {
                    if (j > 2) {
                        j--;
                        break;
                    }
                }
            }
            result++;
        }
        int sum = 0;
        for (auto i : v) sum += i / 3;
        return result + sum;
    }
};