int openLock(vector<string>& deadends, string target) {
    int dp[10000] = {};
    for (auto &de : deadends)
        dp[stoi(de)] = INT_MAX;
    if (dp[0])
        return -1;
    int res = 1, t = stoi(target);
    vector<int> q{0};
    while (!q.empty()) {
        vector<int> q1;
        for (auto dd : q) {
            if (dd == t) {
                for (int step = dp[dd]; step > 0; --step) {
                    for (auto p = 1; p < 10000 && dp[dd] == step; p *= 10) {
                        auto d = dd / p % 10;
                        for (auto dir = -1; dir <= 1; dir += 2) {
                            auto new_dd = dd - d * p + (10 + d + dir) % 10 * p;
                            if (dp[new_dd] == step - 1) {
                                dd = new_dd;
                                cout << setfill('0') << setw(4) << dd << endl;
                                break;
                            }
                        }
                    }                    
                }
                return res - 1;
            }
            for (auto p = 1; p < 10000; p *= 10) {
                auto d = dd / p % 10;
                for (auto dir = -1; dir <= 1; dir += 2) {
                    auto new_dd = dd - d * p + (10 + d + dir) % 10 * p;
                    if (dp[new_dd] == 0) {
                        dp[new_dd] = res;
                        q1.push_back(new_dd);
                    }
                }
            }
        }
        ++res;
        swap(q, q1);
    }
    return -1;
}