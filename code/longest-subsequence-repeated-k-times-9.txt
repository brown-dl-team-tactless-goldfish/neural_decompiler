
	
	public static void Swap(char[] array, int index1, int index2)
    {
        char tmp = array[index1];
        array[index1] = array[index2];
        array[index2] = tmp;
    }

    public static void MoveLeft(char[] array, int fromIndex)
    {
        char tmp = array[fromIndex];
        for (int i = fromIndex + 1; i < array.Length; ++i)
        {
            array[i - 1] = array[i];
        }
        array[array.Length - 1] = tmp;
    }

    public static bool IsSubstring(char[] s, char[] usedChars, int k, int len)
    {
        int sPos = 0;
        int charPos = 0;
        int repeatedCount = 0;
        int limit = s.Length - (k - 1) * len;
        while (sPos < limit)
        {
            if (s[sPos] == usedChars[charPos])
            {
                charPos++;
                if (charPos == len)
                {
                    if (++repeatedCount == k) { return true; }
                    charPos = 0;
                    limit += len;
                }
            }
            sPos++;
        }
        return false;
    }

    public static string TestCombinations(char[] s, char[] usedChars, int k, int len, int rem)
    {
        if (rem == 0)
        {
            return IsSubstring(s, usedChars, k, len) ? new string(usedChars.Take(len).ToArray()) : null;
        }

        int at = len - rem;
        for (int i = at; i < usedChars.Length; ++i)
        {           
            Swap(usedChars, at, i); // take one character a time, move it to front
            string res = TestCombinations(s, usedChars, k, len, rem - 1);
            if (res != null) { return res; }
        }
       
        MoveLeft(usedChars, at); //restore original state
        return null;
    }
    
    public string LongestSubsequenceRepeatedK(string s, int k) {
        int[] histogram = new int['z' - 'a' + 1];
        foreach (char c in s)
        {
            histogram[c - 'a']++;
        }

        var sArray = s.Where(c => histogram[c - 'a'] >= k).ToArray();

        List<char> chars = new List<char>();
        for (char c = 'z'; c >= 'a'; --c)
        {
            while (histogram[c - 'a'] >= k)
            {
                chars.Add(c);
                histogram[c - 'a'] -= k;
            }
        }

        string ret = "";
        for (int len = 1; len <= chars.Count; ++len)
        {
            string act = TestCombinations(sArray, chars.ToArray(), k, len, len);
            if (act == null) { break; }
            ret = act;
        }
        return ret;  
    }