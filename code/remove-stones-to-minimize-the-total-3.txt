void swap (int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

void maxHeapify(int* ar, int n, int i) {
    int largest = i, left = 2 * i + 1, right = 2 * i + 2;

    if (left < n && ar[left] > ar[largest])
        largest = left;
    if (right < n && ar[right] > ar[largest])
        largest = right;
    if (i != largest) {
        swap (&ar[i], &ar[largest]);
        maxHeapify(ar, n, largest);
    }
}

void buildMaxPQ(int* ar, int n) {
    for (int i = (n / 2) - 1; i >= 0; i--)
        maxHeapify(ar, n, i);
}

int minStoneSum(int* piles, int pilesSize, int k){
    buildMaxPQ(piles, pilesSize);

    while (k--) {
        piles[0] = (piles[0] + 1) / 2;
        maxHeapify(piles, pilesSize, 0);
    }
    
    int sum = 0;

    for (int i = 0; i < pilesSize; i++)
        sum += piles[i];

    return sum;
}