/** To solve this problem, I will:
* 1. Iterate through every item in 'int nums[]' array
* 2. Check if the item is dividable by 2 and 3
* 3. Store the count of items that met requerments from 2.
* 4. Store the sum of items that met requerments from 2.
* 5. Return the result of 'itemSum/itemCount' (only if 'itemCount!=0', otherwise we have to return 0 to avoid division by 0)
*/


int averageValue(int* nums, int numsSize)
{
    int itemCount = 0;
    int itemSum = 0;

    /** I'm cheating a litle bit here:
    * Instead of creating new 'int i' as iterator, I can use already existing 'int numsSize'
    * For convinience, I'll swap it with 'ITERATOR'
    */
    #define ITERATOR numsSize
    for(ITERATOR--; ITERATOR>-1; ITERATOR--)
    {
        /** Why '%6' ?
        * Number has to be even (dividable by 2) and dividable by 3
        * In this case, every number dividable by 6 (2*3) will met this condition.
        * Also, if '%6==0' is true, it means that the number is dividable by 6
        */
        if(nums[ITERATOR]%6 == 0)
        {
            itemCount++;
            itemSum+=nums[ITERATOR];
        }
    }

    /** What does it mean ? - 'itemCount ? itemSum/itemCount : 0'
    * That's just a syntax sugar. It's the same as:
    * if (itemCount) { return itemSum/itemCount; } else { return 0; }
    */
    return itemCount ? itemSum/itemCount : 0;
}



/** Testing...
*
* #include <stdio.h>
* int main()
* {
*     int nums0[] = {1,3,6,10,12,15};
*     int result0 = averageValue(nums0, 6);
*     printf("0 - %d - %s \n", result0, result0 == 9 ? "true" : "FALSE");
* 
*     int nums1[] = {1,2,4,7,10};
*     int result1 = averageValue(nums1, 5);
*     printf("1 - %d - %s \n", result1, result1 == 0 ? "true" : "FALSE");
* 
*     return 0;
* }
*
*/