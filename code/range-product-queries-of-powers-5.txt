class Solution {
private: 
    int M = 1e9 + 7 ;
    int POW(long long a, long long b){
        int ret ;
        if(b == 0)
            return 1 ;
        if(b % 2 )
            ret = a * POW(a, b-1) % M;
        else
            ret = POW(a*a%M, b/2) % M ;
        
        return ret % M ;
    }
    
public:
    vector<int> productQueries(int n, vector<vector<int>>& queries) {
        int i = 0 ;
        int val = n ;
        vector<int>digit ;
        while(val){
            if(val % 2)
                digit.push_back(i) ;
            val /= 2 ;
            i++ ;
        }
        vector<int>preSum(digit.size() + 1) ;
        preSum[0] = 0 ;
        for(int i = 1 ; i <= digit.size() ; i++){
            preSum[i] = preSum[i-1] + digit[i-1] ;
        }
        vector<int>ret(queries.size()) ;
        for(int i = 0; i < queries.size(); i++){
            int a = queries[i][0] ;
            int b = queries[i][1] ;
            int total = preSum[b+1] - preSum[a] ;
            ret[i] = POW(2, total)% M ;
        }
        return ret ;
    }
};