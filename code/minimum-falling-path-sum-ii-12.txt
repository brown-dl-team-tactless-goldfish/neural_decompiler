class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<int> dp = grid[0];
        
        for(int i=1; i<n; i++) {
            vector<int> temp = grid[i];
            priority_queue<pair<int, int>> pq;
            for(int j=0; j<n; j++) {
                pq.push({dp[j], j});
                if(pq.size() > 2) pq.pop();
            }
            int mn2 = pq.top().first, idx2 = pq.top().second;
            pq.pop();
            int mn1 = pq.top().first, idx1 = pq.top().second;
            pq.pop();
            
            for(int j=0; j<n; j++) {
                temp[j] += j == idx1 ? mn2 : mn1;
            }
            dp = temp;
        }
        int ans = 1e9;
        for(int i : dp) ans = min(ans, i);
        return ans;
    }
};