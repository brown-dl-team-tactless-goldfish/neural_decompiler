public int[] MinInterval(int[][] intervals, int[] queries) {
        int[][] q = new int[queries.Length][];
        for (int i=0;i<queries.Length;i++){
            q[i]=new int[]{i,queries[i]};
        }
        Array.Sort(intervals,(a,b)=>a[0]-b[0]);
        Array.Sort(q,(a,b)=>a[1]-b[1]);
        var minHeap=new PriorityQueue<int,int>();
        
        int j=0;
        int[] result=new int[queries.Length];                                           
        for(int i=0;i<q.Length;i++){
           while(j<intervals.Length && q[i][1]>=intervals[j][0]){
               minHeap.Enqueue(intervals[j][1],intervals[j][1]-intervals[j][0]+1);
               j++;
           }
            
            while(minHeap.Count>0 && minHeap.Peek()<q[i][1]){
                minHeap.Dequeue();
            }
           bool flag= minHeap.TryPeek(out int lastVal,out int val);
            if(!flag){
                val=-1;
            }
            
            result[q[i][0]]=val;
          
        }
                                                   return result;
                                                   
                                                   
        
                                                   
    
}