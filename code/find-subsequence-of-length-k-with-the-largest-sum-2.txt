int cmp(const void *a, const void *b){
    return *(int*)a < *(int*)b;
}

int* maxSubsequence(int* nums, int numsSize, int k, int* returnSize){
    int i, j, l = numsSize, dup_count = 0;
    int *sorted = (int*)malloc(l * sizeof(int));
    int *ans = (int*)malloc(k * sizeof(int));
    *returnSize = k;
    
    memcpy(sorted, nums, l * sizeof(int));
    qsort(sorted, l, sizeof(int), cmp);
    int kthMax = sorted[k - 1];
    
    // Find possible occurrence(s) of other element(s) of value kthMax before sorted[k - 1]. 
    for(i = k - 1; i >= 0; i--){
        if(sorted[i] == kthMax)
            dup_count++;
        else
            break;
    }
    
    for(i = 0, j = 0; i < l; i++){
        if(nums[i] > kthMax)
            ans[j++] = nums[i];
        else if(nums[i] == kthMax){
            if(dup_count > 0){
                ans[j++] = nums[i];
                dup_count--;
            }
        }
    }
    
    return ans;
}