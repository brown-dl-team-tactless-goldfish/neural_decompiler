class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long answer = 0, curSum = 0;
        //map to keep track of occurence of numbers
        unordered_map<long long, long long> count;
        long long start = 0, end = 0;
        while(end < nums.size()) {
            curSum += nums[end];
            count[nums[end]]++;
            //either the subarray size has increased from k or there is duplicate element in the subarray
            while((end - start + 1 > k || count[nums[end]] > 1) && start < end) {
                count[nums[start]] --;
                curSum -= nums[start];
                start++;
            }
            if(end - start + 1 == k) { answer = max(answer, curSum); }
            end++;
        }
        return answer;
    }
};