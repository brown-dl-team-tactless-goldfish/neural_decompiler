int max(int x, int y) { return x > y ? x : y; }

int dfs(int **dp, int **matrix, int rowSize, int colSize, int row, int col, int val, int seq_len)
{
    if (row < 0 || row >= rowSize || col < 0 || col >= colSize)
        return seq_len;

    if (matrix[row][col] <= val)
        return 0;

    if (dp[row][col])
        return dp[row][col];

    int right    = dfs(dp, matrix, rowSize, colSize, row, col + 1, matrix[row][col], seq_len);
    int left     = dfs(dp, matrix, rowSize, colSize, row, col - 1, matrix[row][col], seq_len);
    int up       = dfs(dp, matrix, rowSize, colSize, row + 1, col, matrix[row][col], seq_len);
    int down     = dfs(dp, matrix, rowSize, colSize, row - 1, col, matrix[row][col], seq_len);
    dp[row][col] = max(max(right, left), max(up, down));

    return ++dp[row][col];
}

int longestIncreasingPath(int **matrix, int rowSize, int colSize)
{
    int **dp;
    int max_len = INT_MIN;

    if (!matrix || !rowSize || !colSize)
        return 0;

    dp = malloc(rowSize * sizeof(int *));
    for (int i = 0; i < rowSize; ++i)
        dp[i] = calloc(colSize, sizeof(int));

    for (int row = 0; row < rowSize; ++row)
        for (int col = 0; col < colSize; ++col)
            max_len = max(max_len, dfs(dp, matrix, rowSize, colSize, row, col, matrix[row][col] - 1, 0));
    return max_len;
}