def findMin(self, nums):
    """
    :type nums: List[int]
    :rtype: int
    """
    #print "nums = ", nums

    l, r = 0, len(nums)-1

    if r < 0:
        return
    elif l == r:
        return nums[0]

    res = float('inf')
    while l < r:
        #print "l = ", l, " r = ", r, " nums[l:r+1] = ", nums[l:r+1]

        m = l + (r-l)/2
        #print "m = ", m
        if nums[l] <= nums[l + (m-l)/2] <= nums[m] <= nums[m+(r-m)/2] <= nums[r]:
            #print "easy case, this array is sorted"
            if nums[l] < res:
                res = nums[l]
            l += 1
            r -= 1
        else:
            #print "this array is rotated, how to detect the pivot point"
            #print "m-l"
            # #print "l + (m-l)/2 = ", l + (m-l)/2
            #print "nums[m] = ", nums[m], "  nums[l + (m-l)/2] = ",  nums[l + (m-l)/2],  " nums[l] = ", nums[l]

            if nums[m] >= nums[l + (m-l)/2] >= nums[l]:
                #print "1 rotate in right part"
                if m +1 >= r:
                    #print"only 2 elements"
                    if res >  min(nums[m], nums[m+1]):
                        res = min(nums[m], nums[m+1])
                l = m + 1
            else:
                #print "2 rotate in left part"

                if m + 1 > r:
                    #print "only 2 elements"
                    if res >  min(nums[l], nums[l+1]):
                        res = min(nums[l], nums[l+1])
                        l = m + 1
                r = m

    #print "end res = ", res

    return res