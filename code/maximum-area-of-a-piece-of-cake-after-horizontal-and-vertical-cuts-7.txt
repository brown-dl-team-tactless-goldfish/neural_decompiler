int* CompareNumber(int* pFirst, int* pSecond)
{
    return *pFirst - *pSecond;
}

int maxArea(int h, int w, int* horizontalCuts, int horizontalCutsSize, int* verticalCuts, int verticalCutsSize){
    qsort(horizontalCuts, horizontalCutsSize, sizeof(int), CompareNumber);
    qsort(verticalCuts, verticalCutsSize, sizeof(int), CompareNumber);

    // get max diff of horizontalCuts
    int nMaxH = horizontalCuts[0], nTmp = 0;
    for(int i=1; i<horizontalCutsSize; i++)
    {
        nTmp = horizontalCuts[i] - horizontalCuts[i-1];
        if(nTmp > nMaxH) nMaxH = nTmp;
    }
    nTmp = h - horizontalCuts[horizontalCutsSize-1];
    if(nTmp > nMaxH) nMaxH = nTmp;
    
    // get max diff of verticalCuts
    int nMaxW = verticalCuts[0];
    for(int i=1; i<verticalCutsSize; i++)
    {
        nTmp = verticalCuts[i] - verticalCuts[i-1];
        if(nTmp > nMaxW) nMaxW = nTmp;
    }
    nTmp = w - verticalCuts[verticalCutsSize-1];
    if(nTmp > nMaxW) nMaxW = nTmp;

    return ((long)nMaxH * nMaxW) % (1000000007);
}