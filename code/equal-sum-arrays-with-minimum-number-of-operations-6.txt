/*

Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
output: min. no. of operations.

Return the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1​​​​​ if it is not possible to make the sum of the two arrays equal.
    
detail:
    - In one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.
        
sum(nums1) = 21 sum(nums2) = 10 -> 15 + 20
    diff = 11 -> 6 at num2[0] 
    diff = 6 -> 6 at num2[1]
    diff = 1 - > 3 at num2[3]
    
        [6,6,3,2,2,2] 
    
Input: nums1 = [6,6], nums2 = [1]
sum(num1): 12   sum(num2): 1
    diff: 11-> 6 at num2[0] -> 
    diff: 6 -> 1 at num1[0]
    diff: 1 -> 5 at num1[0]
    
Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
sum(num1) : 7   sum(num2): 6
    
    1. Sort the both arrays -> can be done in O(n) as we can try for counting sort
    2. find sum(num1) = s1 and sum(num2) = s2
        Either increase sum of s2 or decrease sum of s1 
        start with Maxmum that we can pickup (Greedy) to ensure we get min. operations.
    ex:
        nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
        s1 = 21, s2 = 10
        i=1;j=n-1
        s2= 15, count=1 => nums2[0] = 6
        s2=20, count =2 => nums2[1]=6
        s2=21  , count=3 => nums2[2]=3
        
    */
public class Solution {
    public int MinOperations(int[] nums1, int[] nums2) {
        int minOps = 0;

        int s1 = nums1.Sum();
        int s2 = nums2.Sum();
        if(s1 < s2){
            int[] tempArr = nums1;
            nums1 = nums2;
            nums2 = tempArr;
            
            int temp = s1;
            s1 = s2;
            s2 = temp;
        }
        int m = nums1.Length;
        int n =  nums2.Length;
        if(m > n * 6) 
            return -1;
        
        int[] maxDecreases = new int[m];
        int[] maxIncreases = new int[n];
        
        for(int i=0; i< m; i++){
            maxDecreases[i] = nums1[i] - 1;
        }
        
        for(int i=0; i< n; i++){
            maxIncreases[i] = 6 - nums2[i];
        }
        CountingSort(maxDecreases); 
        CountingSort(maxIncreases); 
        
        int diff = s1 - s2; 
        
        int j=0, k=0;
        while(diff > 0){
            int decrease = 0;
            
            if(j >= m){
                decrease = maxIncreases[k];
                k++;
            }else if (k >= n){
                decrease = maxDecreases[j];
                j++;
            }else if(maxDecreases[j] < maxIncreases[k]){
                decrease = maxIncreases[k];
                k++;
            }else {
                decrease = maxDecreases[j];
                j++;
            }
            
            diff = diff - decrease;
            minOps++;
        }
        return minOps;
    }
    
    public void CountingSort(int[] nums){
        int[] counts = new int[6];
        foreach(int i in nums){
            counts[i]++;
        }
        int j=0;
        for(int i = counts.Length -1; i >= 0 ; i--){
            int c = counts[i];
            while(c > 0) {
                nums[j++] = i;
                c--;
            }
        }
    }
}