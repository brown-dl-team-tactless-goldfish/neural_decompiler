/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *columnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

void dfs(int** matrix, int matrixRowSize, int *matrixColSizes,int** map,int row,int col,int value,int** ret,int* returnSize){
    if(map[row][col]==value){
        return;
    }
    int direction[4][2]={{1,0},{-1,0},{0,1},{0,-1}};
    if(map[row][col]==0){
        map[row][col]=value;
    }else{
        map[row][col]=value;
        ret[(*returnSize)++]=(int*)calloc(2,sizeof(int));
        ret[(*returnSize)-1][0]=row;
        ret[(*returnSize)-1][1]=col;
    }
    for(int i=0;i<4;i++){
        int tmp_row=row+direction[i][0];
        int tmp_col=col+direction[i][1];
        if(tmp_row>-1&&tmp_row<matrixRowSize&&tmp_col>-1
           &&tmp_col<matrixColSizes[tmp_row]&&matrix[row][col]<=matrix[tmp_row][tmp_col]){
            dfs(matrix,matrixRowSize,matrixColSizes,map,tmp_row,tmp_col,value,ret,returnSize);
        }
    }
}
int** pacificAtlantic(int** matrix, int matrixRowSize, int *matrixColSizes, int** columnSizes, int* returnSize) {
    int** map=(int**)malloc(matrixRowSize*sizeof(int*));
    *returnSize=0;
    if(matrixRowSize==0){
        return NULL;
    }
    columnSizes[0]=(int*)malloc(matrixRowSize*matrixColSizes[0]*sizeof(int));
    int** ret=(int**)malloc(matrixRowSize*matrixColSizes[0]*sizeof(int*));
    for(int i=0;i<matrixRowSize;i++){
        map[i]=(int*)calloc(matrixColSizes[i],sizeof(int));
    }
    for(int i=0;i<matrixColSizes[0];i++){
        dfs(matrix,matrixRowSize,matrixColSizes,map,0,i,1,ret,returnSize);
    }
    for(int i=0;i<matrixRowSize;i++){
        dfs(matrix,matrixRowSize,matrixColSizes,map,i,0,1,ret,returnSize);
    }
    for(int i=0;i<matrixColSizes[0];i++){
        dfs(matrix,matrixRowSize,matrixColSizes,map,matrixRowSize-1,i,-1,ret,returnSize);
    }
    for(int i=0;i<matrixRowSize;i++){
        dfs(matrix,matrixRowSize,matrixColSizes,map,i,matrixColSizes[0]-1,-1,ret,returnSize);
    }
    for(int i=0;i<*returnSize;i++){
        columnSizes[0][i]=2;
    }
    return ret;
}