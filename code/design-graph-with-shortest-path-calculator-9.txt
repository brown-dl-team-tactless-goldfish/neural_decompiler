class Graph {
    vector<pair<int, int>> adjList[105];
    int n;
public:
    Graph(int n, vector<vector<int>>& edges) {
        this -> n = n;
        for(vector<int> edge: edges) {
            adjList[edge[0]].push_back({edge[1], edge[2]});
        }
    }
    
    void addEdge(vector<int> edge) {
        adjList[edge[0]].push_back({edge[1], edge[2]});
    }
    
    int shortestPath(int node1, int node2) {
        vector<int> dist(n, INT_MAX);
        dist[node1] = 0;
        set<pair<int, int>> Set;
        Set.insert({0, node1});
        while(!Set.empty()) {
            pair<int, int> temp = *(Set.begin());
            int u = temp.second;
            Set.erase(*Set.begin());
            for(auto iter: adjList[u]) {
                int v = iter.first;
                int w = iter.second;
                if(dist[u] + w < dist[v]) {
                    Set.erase({dist[v], v});
                    dist[v] = dist[u] + w;
                    Set.insert({dist[v], v});
                }
            }
        }
        return dist[node2] == INT_MAX? -1: dist[node2];
    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */