    for (int i=0; i<n; i++){
        int lake = rains[i];
        
        // no rain day
        if (lake == 0){
            noRain.insert(i);
            ans.push_back(1);
        }
        // rain day
        else{
            // found lake wa already full 
            if (fullLake.find(lake)!=fullLake.end()){
                auto noRainDay = noRain.lower_bound(fullLake[lake]);
                // not able to find a non rainy day between rains of same lake
                // flood is inevitable
                if (noRainDay == noRain.end())  return {};
                
                // marking the index of no rain day in ans as laek value
                ans[*noRainDay] = lake;
                // removing the non rainy day
                noRain.erase(*noRainDay);
                
            }
            
            ans.push_back(-1);
            fullLake[lake] = i;
                
        }
    }
    
    return ans;
    
}