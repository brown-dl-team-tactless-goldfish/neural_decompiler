long long * DP(long long * dp,long long * tdp, int * source, int size){
    int i;
    long long mun[size];
    long long BI;
    memset(mun, 0, sizeof(mun));
    BI = mun[0] = dp[0];
    for(i = 1;i < size;i++){
        BI--;
        if(dp[i] > BI){
            BI = dp[i];
        }
        mun[i] = BI;
    }
    tdp[size - 1] = BI + source[size-1];
    for(i = size - 2;i >= 0;i--){
        BI--;
        if(dp[i] > BI){
            BI = dp[i];
        }
        tdp[i] = ((BI > mun[i])? BI: mun[i]) + source[i];
    }
    
    return tdp;
}
long long maxPoints(int** points, int pointsSize, int* pointsColSize){
    long long dp[*pointsColSize];
    long long tdp[*pointsColSize];
    long long *tm1, *tm2;
    long long ret_val;
    int i;
    for(i = 0;i < *pointsColSize;i++){
        dp[i] = points[pointsSize-1][i];
    }
    tm1 = dp; tm2 = tdp;
    for(i = pointsSize-2;i >= 0;i--){
        tm1 = DP(tm1, tm2, points[i], *pointsColSize);
        tm2 = (tm1 == dp)? tdp : dp;
    }
    ret_val = *tm1;
    for(i = 1;i < *pointsColSize;i++){
        if(tm1[i] > ret_val){
            ret_val = tm1[i];
        }
    }
    
    return ret_val;
}