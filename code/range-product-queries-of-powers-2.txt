class Solution {
public:
    vector<int> productQueries(int n, vector<vector<int>>& queries) {
        
        // My walkaround to deal with super big integer multiplcation, in order to avoid overflow in C/C++ type
        preCalcPowerOfTwo();
        
        // Base2 prefix product table, initialized with dummy 0 for index-accessing convenience
        vector<int> prefixExp = vector<int>(1,0);
        
        // Build base2 prefix sum table from bit_#0 to bit_#31
        // in the form of pow(2, i)
        for( int i = 0 ; i < 32 ; i++){
            if( n & (1<<i) ){ 
                prefixExp.emplace_back( prefixExp.back() + i );
            }
        }
        
        
        // Look-up table in prefixExp with given range
        vector<int> result;
        int exponent = 0;
        
        for( const auto& query : queries ){
            
            int begin = query[0], end = query[1];
            
            if( end > begin ){
                // multiple factors
                exponent = prefixExp[end+1] - prefixExp[begin];
                
            }else{
                // single factor
                exponent = prefixExp[end+1] - prefixExp[end];
            }   
            
            int rangeProduct = powerTwoTable[exponent]; 
    
            result.emplace_back( rangeProduct );
        }
        
        return result;
    }
    
private:
    // modulo constant defined by description
    const unsigned int MOD_CONST = (unsigned int)( pow(10, 9) ) + 7u; //1000000007; //
    
    // a table with power of 2, with modulo with MOD_CONST on each step, to make it a safe value to avoid overflow during big integer multiplication
    vector<int> powerTwoTable = vector<int>(500,1);
    
    void preCalcPowerOfTwo(){
        
        for( size_t i = 1 ; i < 500 ; i++){
            powerTwoTable[i] = (powerTwoTable[i-1] << 1) % MOD_CONST;
        }
        return;
    }
    
};
