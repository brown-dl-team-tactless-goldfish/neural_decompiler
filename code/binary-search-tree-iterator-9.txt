  #include<stdbool.h>
typedef struct TreeNode TreeNode;

struct LLNode{
	TreeNode *d;
	struct LLNode* next;
};

typedef struct LLNode LLNode;

struct BSTIterator {
    TreeNode *cur;
	LLNode *st;
};

LLNode *push(LLNode *st,TreeNode *d)
{
	LLNode *retVal=(LLNode *)malloc(sizeof(LLNode));
	retVal->d=d;
	retVal->next=st;
	return retVal;
}

struct BSTIterator *bstIteratorCreate(struct TreeNode *root) {
	struct BSTIterator *retVal=(struct BSTIterator *)malloc(sizeof(struct BSTIterator));
	if(root==NULL)
	{
		retVal->cur=NULL;
		return retVal;
	}else{
		retVal->cur=root;
		while(retVal->cur->left!=NULL)
		{
			retVal->st=push(retVal->st,retVal->cur);
			retVal->cur=retVal->cur->left;
		}
	}
	return retVal;
}

/** @return whether we have a next smallest number */
bool bstIteratorHasNext(struct BSTIterator *iter) {
	//printf("%B\n",iter->cur!=NULL);
    return iter->cur!=NULL;
}

/** @return the next smallest number */
int bstIteratorNext(struct BSTIterator *iter) {
	if(iter->cur==NULL)return 0;

	int retVal=iter->cur->val;
	
	if(iter->cur->right!=NULL)
	{
		iter->cur=iter->cur->right;
		while(iter->cur->left!=NULL)
		{
			iter->st=push(iter->st,iter->cur);
			iter->cur=iter->cur->left;
		}
	}else{
		if(iter->st==NULL)
			iter->cur=NULL;
		else
		{
			LLNode *toDel=iter->st;
			iter->st=iter->st->next;
			iter->cur=toDel->d;
			free(toDel);
		}
	}
	return retVal;
}

/** Deallocates memory previously allocated for the iterator */
void bstIteratorFree(struct BSTIterator *iter) {
    LLNode *st=iter->st;
	while(st!=NULL)
	{
		LLNode *temp=st->next;
		free(st);
		st=NULL;
		st=temp;
	}
	free(iter);
}

/**
 * Your BSTIterator will be called like this:
 * struct BSTIterator *i = bstIteratorCreate(root);
 * while (bstIteratorHasNext(i)) printf("%d\n", bstIteratorNext(i));
 * bstIteratorFree(i);
 */