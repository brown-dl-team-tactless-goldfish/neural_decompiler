typedef long long LL;

class Solution {
public:
    long long minimumDifference(vector<int>& nums) {
        int m = nums.size();
        int n = m / 3;
        
        priority_queue<LL> maxHeap;
        LL sum = 0;
        vector<LL> left;
        for (int i = 0; i < m; ++ i)
        {
            sum += nums[i];
            maxHeap.push(nums[i]);
            if (maxHeap.size() > n)
            {
                sum -= maxHeap.top();
                maxHeap.pop();
            }
            left.push_back(sum);
        }
        
        
        priority_queue<LL, vector<LL>, greater<>> minHeap;
        sum = 0;
        vector<LL> right;
        for (int i = m - 1; i >= 0; -- i)
        {
            sum += nums[i];
            minHeap.push(nums[i]);
            if (minHeap.size() > n)
            {
                sum -= minHeap.top();
                minHeap.pop();
            }
            right.push_back(sum);
        }
        reverse(right.begin(), right.end());
        
        LL ans = LONG_LONG_MAX;
        for (int i = n - 1; i < 2*n; ++ i)
        {
            ans = min(ans, left[i] - right[i + 1]);
        }
        return ans;
    }
};