class Solution {
public:
    long Mod = 1e9+7;
    int k, minLength;
    int Size;

    int isPrime(char c){
        return (c == '2' || c == '3' || c == '5' || c == '7');
    }
    int solve(string &s, int index, int part,vector<vector<int>> &dp){
        if(dp[index][part] != -1){
            return dp[index][part];
        }
        if(part == 1 && Size-index >= minLength){
            return 1;
        }
        int res = 0;
        if(Size-index < part*minLength){
            return 0;
        }
        int startIndex = index + minLength-1;
        int endIndex = Size - (part-1)*minLength-1;

        for(int i = startIndex; i <= endIndex; i++){
            if(!isPrime(s[i]) && isPrime(s[i+1])){
                res = (res + solve(s, i+1, part-1, dp))%Mod;
            }
        }
        return dp[index][part] = res;
    }

    int beautifulPartitions(string s, int K, int MinLength) {
        Size = s.size();
        vector<vector<int>> dp(Size, vector<int>(K+1,-1));
        k = K;
        minLength = MinLength;
        
        if(!isPrime(s[0]) || isPrime(s[Size-1])){
            return 0;
        }
        return solve(s, 0, K, dp);
    }
};