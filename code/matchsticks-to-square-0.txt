int cmp(const void* a, const void* b){
    return *(int*)b - *(int*)a;
}
bool DFS(int* nums, bool* visited, int cur, int n, int group, long long target, long long sum){
    if(group == 4)
        return true;
    if(sum > target)
        return false;
    if(sum == target){
        return DFS(nums, visited, group, n, group+1, target, 0);
    }
    int last = -1;   
    for(int i = cur; i < n; i++){
        if( visited[i] == true)
            continue;
        if(nums[i] == last)
           continue;
        visited[i] = true;
        if( DFS(nums, visited, i+1, n, group, target, sum+nums[i]) == true )
            return true;    
        visited[i] = false; 
        last = nums[i];
    }
    return false;
}
bool makesquare(int* matchsticks, int matchsticksSize){
    int n = matchsticksSize;
    bool ans;
    long long sum = 0;
    for(int i = 0; i < n; i++){
        sum += matchsticks[i];
    }
    if(sum % 4 != 0)
        return false;
    long long target = sum/4;
    qsort(matchsticks, n, sizeof(int), cmp);
    if(matchsticks[0] > target)
        return false;
    bool* visited = calloc(n, sizeof(bool));
    ans = DFS(matchsticks, visited, 0, n, 0, target, 0);
    free(visited);
    return ans;
}