class Graph 
{
    public:
    vector<pair<int,int>> total[100];
    Graph(int n, vector<vector<int>>& edges) 
    {
        int t=edges.size();
        for(int i=0;i<t;i++) total[edges[i][0]].push_back({edges[i][1],edges[i][2]});
    }
    
    void addEdge(vector<int> edge) 
    {
        total[edge[0]].push_back({edge[1],edge[2]});
    }
    
    int shortestPath(int node1, int node2) 
    {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
        q.push({0,node1});
        bool v[101];
        memset(v,false,sizeof(v));
        while(!q.empty())
        {
            pair<int,int> p=q.top();
            q.pop();
            int cost=p.first;
            int node=p.second;
            if(v[node]) continue;
            v[node]=true;
            if(node==node2) return cost;
            for(int i=0;i<total[node].size();i++) q.push({cost+total[node][i].second,total[node][i].first});
        }
        return -1;
    }
};