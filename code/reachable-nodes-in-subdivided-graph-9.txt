    vector<vector<pair<int, int>>> graph(n);
    for(auto &i : edges)
        graph[i[0]].push_back({i[1], i[2] + 1}), graph[i[1]].push_back({i[0], i[2] + 1});
    
    vector<long> dist(n, INT_MAX);
    dist[0] = 0;
    helper(graph, dist, 0);
    
    int ans = 0;        
    for(auto &i : edges)
    {
        int tmp1 = max((long) 0, maxMoves - dist[i[0]]);
        int tmp2 = max((long) 0, maxMoves - dist[i[1]]);

        ans += min(i[2], tmp1 + tmp2);
    }
    
    for(auto &i : dist)
        ans += i <= maxMoves;
    
    return ans;
}

void helper(vector<vector<pair<int, int>>> &graph, vector<long> &dist, int i)
{
    queue<int> q;
    q.push(i);
    
    while(!q.empty())
    {
        int j = q.front();
        q.pop();
        
        for(auto &k : graph[j])
            if(dist[k.first] > dist[j] + k.second)
                dist[k.first] = dist[j] + k.second, q.push(k.first);
    }   
}