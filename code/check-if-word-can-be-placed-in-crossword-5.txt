class Solution {
    int r, c;
    bool fit(string& s1, string& s2) {
        int size = s1.size();
        //cout << size << endl;
        if(size != s2.size()) return false;
        for(int i = 0; i < size; i ++) {
            if(s1[i] == ' ') continue;
            if(s1[i] != s2[i] && s1[i] != s2[size - 1 - i]) return false;
        }
        return true;
    }
    
    string travelLeft(vector<vector<char>>& board, vector<vector<bool>>& check, int i, int j) {
        string res;
        for(int k = j; k < c; k ++) {
            if(board[i][k] == '#') break;
            check[i][k] = true;
            res += board[i][k];
        }
        return res;
    }
    
    string travelDown(vector<vector<char>>& board, vector<vector<bool>>& check, int i, int j) {
        string res;
        for(int k = i; k < r; k ++) {
            if(board[k][j] == '#') break;
            check[k][j] = true;
            res += board[k][j];
        }
        return res;
    }
    
public:
    bool placeWordInCrossword(vector<vector<char>>& board, string word) {
        r = board.size(), c = board[0].size();
        vector<vector<bool>> checkLeft (r, vector<bool> (c, false));
        vector<vector<bool>> checkDown (r, vector<bool> (c, false));
        for(int i = 0; i < r; i ++) {
            for(int j = 0; j < c; j ++) {
                if(board[i][j] == '#') continue;
                if(checkLeft[i][j] && checkDown[i][j]) continue;
                if(!checkLeft[i][j]) {
                    string s1 = travelLeft(board, checkLeft, i, j);
                    if(fit(s1, word)) return true;
                }
                if(!checkDown[i][j]) {
                    string s2 = travelDown(board, checkDown, i, j);
                    if(fit(s2, word)) return true;
                }
            }
        }
        return false;
    }
};