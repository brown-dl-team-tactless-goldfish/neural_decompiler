typedef struct {
    int* queue;
    int front;
    int rear;
    int size;     
} MyCircularDeque;

bool myCircularDequeIsFull(MyCircularDeque* obj);
bool myCircularDequeIsEmpty(MyCircularDeque* obj);

MyCircularDeque* myCircularDequeCreate(int k) {
    MyCircularDeque* ans = malloc(sizeof(MyCircularDeque));
    ans->queue = (int*)malloc((k+1) * sizeof(int));
    ans->front = 0;
    ans->rear = 0;
    ans->size = k+1;  //rear 位置是空的，預留一個空的。
    return ans;    
}

bool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {

    if(myCircularDequeIsFull(obj)) 
        return false;
    else{
        
        obj->front = (obj->front - 1 + obj->size) % (obj->size); 
        obj->queue[obj->front] = value;
        
        return true;
    }
}

bool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {

    if(myCircularDequeIsFull(obj)) 
        return false;
    else{
        obj->queue[obj->rear] = value;
        obj->rear = (obj->rear+1) % (obj->size); 
        return true;
    }
}

bool myCircularDequeDeleteFront(MyCircularDeque* obj) {

    if(myCircularDequeIsEmpty(obj))
        return false;
    else{
        obj->front = (obj->front + 1)% obj->size; 
        return true;
    }
}

bool myCircularDequeDeleteLast(MyCircularDeque* obj) {

    if(myCircularDequeIsEmpty(obj))
        return false;
    else{
        obj->rear = (obj->rear - 1 + obj->size)% obj->size; 
        return true;
    }
}

int myCircularDequeGetFront(MyCircularDeque* obj) {

    if(myCircularDequeIsEmpty(obj))
        return -1;
    else
        return obj->queue[obj->front]; 
}

int myCircularDequeGetRear(MyCircularDeque* obj) {

    if(myCircularDequeIsEmpty(obj))
        return -1;
    else    
        return obj->queue[(obj->rear-1+obj->size) % obj->size];
}

bool myCircularDequeIsEmpty(MyCircularDeque* obj) {
    
    if((obj->front) == (obj->rear))
        return true;
    else
        return false;  
}

bool myCircularDequeIsFull(MyCircularDeque* obj) {
        return ( (obj->rear + 1) % obj->size == obj->front);  
}

void myCircularDequeFree(MyCircularDeque* obj) {
    free(obj->queue);
    free(obj);
}
