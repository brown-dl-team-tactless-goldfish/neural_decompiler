class ProductOfNumbers {
public:
    ProductOfNumbers() {
        
    }
    
    void add(int num) {
        int curr_id = running_product.size();
        if (num == 0) {
            zero_pos = curr_id;
            running_product.push_back(0);
        } else {
            if (curr_id == 0 || running_product[curr_id-1] == 0) {
                running_product.push_back(num);                
            } else {
                running_product.push_back(num*running_product[curr_id-1]);                
            }
        }        
    }
    
    int getProduct(int k) {
        int start = running_product.size()-k;
        if (zero_pos >= start) return 0;
        if (start == 0 || running_product[start-1] == 0) return running_product.back();        
        return running_product.back()/running_product[start-1];
    }
private:
    int zero_pos;
    vector<int> running_product;        
};
