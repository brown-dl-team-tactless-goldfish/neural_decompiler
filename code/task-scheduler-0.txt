class Solution {
public:
	int leastInterval(vector<char>& tasks, int n) {
		unordered_map<char,int> hsh;
		int count=0;
		for(auto c : tasks)
		{
			hsh[c]++;
			count= max(count,hsh[c]);
		}

		// count has highest frequency of any letter
		// highest frequency letter will spread across complete length almost

		int parts = count - 1; 
		// lets say count was 3, it can have 2 empty parts "?*"
		// like A???A???A for n=3

		// calculating length it can go
		int len = parts * n + count;

		// check if there are more than 1 chars with same max frequency
		// if yes, need to accomodate like "AB??AB??AB" --> here length increases by 1

		int charWithSameMaxFreq = 0;
		for(auto itr : hsh)
		{
			if(itr.second == count)
				charWithSameMaxFreq++;
		}

		// If lenght here is still less than total task length, 
		// it means, all empty slot will be filled and overflow , 
		// so answer is tasks length itself
		// hence take max of the two

		return max((int)tasks.size(),len+charWithSameMaxFreq-1);
	}
};