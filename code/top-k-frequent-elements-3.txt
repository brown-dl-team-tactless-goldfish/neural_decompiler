struct counter {
    int num;
    int cnt;
    UT_hash_handle hh;
};

int compare(const struct counter *A, const struct counter *B) {
    return A->cnt != B->cnt ? B->cnt - A->cnt : 0;
}

int* topKFrequent(int* nums, int numsSize, int k, int* returnSize){
    struct counter *cnts = NULL, *elem;
    int i, val, *res;
    *returnSize = k;
    for (i = 0; i < numsSize; i++) {
        val = nums[i];
        HASH_FIND_INT(cnts, &val, elem);
        if (elem) {
            elem->cnt++;
        } else {
            elem = malloc(sizeof *elem);
            elem->num = val;
            elem->cnt = 0;
            HASH_ADD_INT(cnts, num, elem);
        }
    }
    HASH_SORT(cnts, compare);
    res = malloc(k * sizeof(int));
    for (i = 0, elem = cnts; i < k; i++, elem = elem->hh.next) {
        res[i] = elem->num;
    }
    return res;
}