typedef struct route {
    char in[11];
    char out[11];
    int in_t;
    int out_t;
    int id;
} ROUTE;

typedef struct {
    ROUTE route[20000];
    int idx;
} UndergroundSystem;


UndergroundSystem* undergroundSystemCreate() {
    
    UndergroundSystem *p_obj = (UndergroundSystem *)malloc(sizeof(UndergroundSystem));
    p_obj->idx = -1;
    
    return p_obj;
}

void undergroundSystemCheckIn(UndergroundSystem* obj, int id, char * stationName, int t) {

    obj->idx++;
    obj->route[obj->idx].in_t = t;
    obj->route[obj->idx].out_t = 0;
    obj->route[obj->idx].id = id;
    obj->route[obj->idx].out[0] = 0;
    strcpy(obj->route[obj->idx].in, stationName);
}

void undergroundSystemCheckOut(UndergroundSystem* obj, int id, char * stationName, int t) {

    int idx = obj->idx;
    UndergroundSystem *p_obj = obj;
    
    while (idx >= 0) {
        
        if (p_obj->route[idx].id == id) {
            
            strcpy(p_obj->route[idx].out, stationName);
            p_obj->route[idx].out_t = t;
            
            break;
        }
        
        idx--;
        
    }
    
}

double undergroundSystemGetAverageTime(UndergroundSystem* obj, char * startStation, char * endStation) {
    
    int idx = obj->idx;
    UndergroundSystem *p_obj = obj;
    unsigned int time_diff = 0;
    int cnt = 0;
    
    while (idx >= 0) {
        
        if (strcmp(p_obj->route[idx].in, startStation) == 0 && strcmp(p_obj->route[idx].out, endStation) == 0) {
            time_diff += (p_obj->route[idx].out_t - p_obj->route[idx].in_t);
            cnt++;
        }
        
        idx--;
        
    }
                                
    if (cnt == 0) {
        return 0;
    }
    else {
        return ((double)(time_diff) / cnt);
    }
}

void undergroundSystemFree(UndergroundSystem* obj) {
    free(obj);    
}

/**
 * Your UndergroundSystem struct will be instantiated and called as such:
 * UndergroundSystem* obj = undergroundSystemCreate();
 * undergroundSystemCheckIn(obj, id, stationName, t);
 
 * undergroundSystemCheckOut(obj, id, stationName, t);
 
 * double param_3 = undergroundSystemGetAverageTime(obj, startStation, endStation);
 
 * undergroundSystemFree(obj);
*/