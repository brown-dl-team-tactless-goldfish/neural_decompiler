class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        
        string s, output="123450";
        int jumper[][3]={{1,3,0},{0,2,4},{1,5,2},{0,4,3},{1,3,5},{4,2,5}};
        int idx = -1, c=0;
        unordered_map<string,int> ump;
        queue<pair<pair<string,int>,int>> q;
        
        for(int i=0; i<board.size(); ++i){
            for(int j=0; j<board[0].size(); ++j){ 
                if(board[i][j]==0) idx = c;
                s.push_back('0'+board[i][j]);
                c++;
            }
        }
        
        q.push({{s,idx},0});
        
        while(!q.empty()){
            string str = q.front().first.first;
            int idx2 = q.front().first.second;
            int count = q.front().second;
            q.pop();
            
            ump[str]++;
            
            if(str==output) return count;
            
            int size = sizeof(jumper[idx2]) / sizeof(jumper[idx2][0]);
            
            for(int i=0;i<size;++i){
                
                int j = jumper[idx2][i];
                string temp=str;
        
                char t = temp[idx2];
                temp[idx2] = temp[j];
                temp[j]=t;
                
                if(ump.find(temp) == ump.end()){
                    q.push({{temp,j},count+1});
                }
            }
        }
        
        return -1;
    }
};