int numRescueBoats(int* people, int peopleSize, int limit) {
    int max=people[0];
    int i,j;
    int res=0;
    
    for (i = 1; i < peopleSize; ++i){
        // Find max "weight".
        if (max < people[i]) max = people[i];
    }
    
    //     Create an array with size max, the size of this array
    // is independant of the people array's size.
    int bucket[max+1];
    
    // Initialize all the elements to zero.
    memset(bucket, 0, sizeof(bucket));
    
    for (i = 0; i < peopleSize; ++i) {
        //     Every "weight" corresponds to a index in the "bucket" array. 
        // If there are ten "people" of size five, then bucket[5] == 10.
        //     This also creates a sorted array that may have many indexes
        // with a value of zero (a "sparse array").
        ++bucket[people[i]];
    }
    
    i = 1; // A "person" has to weigh atleast one.
    j = max;
    
    for (;;){
         
        //     From the FRONT of the array, find the next index in "bucket" 
        // that is greater than zero. These are the "light people".
        while(i <= j && bucket[i] <= 0) ++i;
        
        //     From the END of the array, find the next index in "bucket" 
        // that is greater than zero. These are the "heavier people". 
        while(i <= j && bucket[j] <= 0) --j;
        
        //     If the "i" pointer is greater than the "j" pointer, then
        // the loop has finished.
        if(i > j) break;
        
        // Increment the response variable.
        ++res;
        
        //     If a "lighter person" can be added to a boat with a "heavier
        // person" then decrement the value at index "i".
        //     The logic is that "i" and "j" correspond to "weights of people",
        // and each "i" and "j" index in "bucket" are how many "people" there
        // are that "weigh" whatever "i" and "j" is.
		//     Example: If a "person" that "weighs" whatever "i" is can be 
		// added to a boat with a "heavier person", if "i" is 5 and bucket[5] == 1 
		// (there is one "person" with a "weight" of five) then it will be 
		// decremented and bucket[5] == 0 (one person with a "weight" of
		// five "shared a boat with a heavier person" so there is one less
		// "person" with a "weight" of five), the while loop above will increment
		// "i" until it finds an index in "bucket" that isn't zero. If, however, 
		// bucket[5] == 10, then the while loop above will not increment  "i" 
		// while there are still "people" that "weigh" five.
		if(i + j <= limit) --bucket[i];
        
        //     The "heaviest people" will always get a "boat". Every loop 
		// decrement the value at index "j".
        --bucket[j];
    }
    
    return res;
}