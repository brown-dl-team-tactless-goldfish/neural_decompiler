pair<int, int> getUpperRight(vector<int>& circle){
    return ii(circle[0] + circle[2], circle[1] + circle[2]);
}

bool isWithinCircle(int x, int y, vector<int>& c){
    return pow(c[0] - x, 2) + pow(c[1] - y, 2) <= c[2] * c[2];
}

int countLatticePoints(vector<vector<int>>& circles) {
    
    ii lowerLeft = getLowerLeft(circles[0]); 
    ii upperRight = getUpperRight(circles[0]); 
    
    for(int i = 1; i< circles.size(); i++){
        ii ll = getLowerLeft(circles[i]);
        ii ur = getUpperRight(circles[i]);
        
        lowerLeft.first = min(lowerLeft.first, ll.first); 
        lowerLeft.second = min(lowerLeft.second, ll.second); 
        upperRight.first = max(upperRight.first, ur.first); 
        upperRight.second = max(upperRight.second, ur.second); 
    }
    
    int num = 0;
    
    for(int x = lowerLeft.first; x <= upperRight.first; x++){
        for(int y = lowerLeft.second; y <= upperRight.second; y++){
            bool inCircle = false;
            for(auto& c : circles){
                if(isWithinCircle(x, y, c)){
                    inCircle = true;
                    break;
                }
            }
            
            if(inCircle){
                num++;
            }
        }
    }
    return num;
}