class Solution {
public:
    const int INF = 1e9 + 7;
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int n = maze.size();
        int m = maze[0].size();
        vector<vector<int>> dist(n, vector<int> (m));
        dist[entrance[0]][entrance[1]] = 1;
        vector<pair<int, int>> que;
        que.emplace_back(entrance[0], entrance[1]);
        for (int i = 0; i < (int) que.size(); i++) {
            int r = que[i].first;
            int c = que[i].second;
            for (int x : {-1, 0, 1}) {
                for (int y : {-1, 0, 1}) {
                    if (abs(x) != abs(y)) {
                        int row = r + x;
                        int col = c + y;
                        
                        if (row >= 0 && row < n && col >= 0 && col < m) {
                            if (maze[row][col] == '.' && dist[row][col] == 0) {
                                dist[row][col] = dist[r][c] + 1;
                                que.emplace_back(row, col);
                            }
                        }
                    }
                }
            }
        }
        int ans =INF;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (maze[i][j] == '.' && (i == 0 || i == n - 1 || j == 0 || j == m - 1) && dist[i][j] > 0) {
                    if (i == entrance[0] && j == entrance[1]) continue;
                    ans = min(ans, dist[i][j] - 1);
                }
            }
        }
        if (ans == INF) return -1;
        return ans;
    }
};