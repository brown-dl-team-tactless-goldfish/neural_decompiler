class Solution
{
    public:
        int recur(string &s, int numCarpets, int len, int i, vector<vector < int>> &dp, vector< int > &sufOnes)
        {
            if (i >= s.size())
                return 0;
            if (numCarpets == 0)
                return sufOnes[i];

            if (dp[i][numCarpets] != -1)
            {
                return dp[i][numCarpets];
            }
            if (s[i] == '0')
            {
                dp[i][numCarpets] = recur(s, numCarpets, len, i + 1, dp, sufOnes);
            }
            else
            {
               	//start carpet here
                int start = recur(s, numCarpets - 1, len, i + len, dp, sufOnes);
               	//dont start carpet here
                int dont = 1 + recur(s, numCarpets, len, i + 1, dp, sufOnes);

                dp[i][numCarpets] = min(start, dont);
            }

            return dp[i][numCarpets];
        }
    int minimumWhiteTiles(string s, int n, int len)
    {
        int nn = s.size() + 1, mm = n + 1;
        vector<int> sufOnes(s.size() + 1, 0);
        for (int i = s.size() - 1; i >= 0; i--)
        {
            sufOnes[i] = sufOnes[i + 1];
            if (s[i] == '1')
            {
                sufOnes[i]++;
            }
        }
        vector<vector < int>> dp(nn, vector<int> (mm, -1));
        return recur(s, n, len, 0, dp, sufOnes);
    }
};