typedef struct {
    char *tiny;
    char *original;
    UT_hash_handle hh;
} Hash;

Hash *hash_table = NULL;

char *s = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

bool find(char *url) {
    Hash *p;
    HASH_FIND(hh, hash_table, url, strlen(url), p);
    return p;
} 


void getRandomURL(char *tiny) {
    for (int i=0; i<6; ++i) {
        tiny[i] = s[rand() % 62];
    }
}
/** Encodes a URL to a shortened URL. */
char* encode(char* longUrl) {
    char *tiny = calloc(7, sizeof(char));
    do {
        getRandomURL(tiny);
    } while (find(tiny));
    Hash *p = malloc(sizeof(Hash));
    p->tiny = tiny;
    p->original = longUrl;
    HASH_ADD_STR(hash_table, tiny, p);
    return tiny;
}

/** Decodes a shortened URL to its original URL. */
char* decode(char* shortUrl) {
    Hash *p;
    HASH_FIND(hh, hash_table, shortUrl, strlen(shortUrl), p);
    return p->original;   
}

// Your functions will be called as such:
// char* s = encode(s);
// decode(s);
