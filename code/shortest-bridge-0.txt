#define MAX_LEN 10000
#define LAND1 2
#define LAND2 1
#define TURNED 3
#define EMPTY 0

typedef struct {
    int x; 
    int y;
    int step;
} Point;

Point* bfs(int **A, int ASize, int AColSize, Point p, int *size) 
{
    Point *res = (Point*) malloc(MAX_LEN * sizeof(Point));
    *size = 1;
    res[0] = p;
    int head = 0;
    A[p.x][p.y] = LAND1;
    
    int directs[][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    while (head < *size) {
        Point cur = res[head++];
        for (int i = 0; i < 4; i++) {
            int dx = directs[i][0];
            int dy = directs[i][1];
            Point new = {cur.x + dx, cur.y + dy, 0};
            if (0 <= new.x && new.x < ASize && 0 <= new.y && new.y < AColSize && A[new.x][new.y] == 1) {
                A[new.x][new.y] = LAND1;
                res[*size] = new;
                (*size)++;
            }
        }
    }
    return res;
}

int shortestBridge(int** A, int ASize, int* AColSize){
    if (A == NULL || ASize <= 0 || *AColSize <= 0) return 0;
    Point *lands;
    int *size = (int*) malloc(sizeof(int));
    *size = -1;
    int flag = 0;
    for (int i = 0; i < ASize; i++) {
        for (int j = 0; j < *AColSize; j++) {
            if (A[i][j] == EMPTY) continue;
            Point tmp = {i, j, 0};
            lands = bfs(A, ASize, *AColSize, tmp, size);
            flag = 1;
            break;
        }
        if (flag) break;
    }

    int head = 0;
    int directs[][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    while (head < *size) {
        Point cur = lands[head++];
        for (int i = 0; i < 4; i++) {
            int dx = directs[i][0];
            int dy = directs[i][1];
            Point new = {cur.x + dx, cur.y + dy, cur.step + 1};
            if (0 <= new.x && new.x < ASize && 0 <= new.y && new.y < *AColSize && A[new.x][new.y] != TURNED) {
                if (A[new.x][new.y] == LAND2) {
                    free(size);
                    free(lands);
                    lands = NULL;
                    return cur.step;
                }
                if (A[new.x][new.y] == EMPTY) {
                    lands[*size] = new;
                    (*size)++;
                    A[new.x][new.y] = TURNED;
                }
            }
        }
    }
    
    free(size);
    free(lands);
    lands = NULL;
    return -1;
}