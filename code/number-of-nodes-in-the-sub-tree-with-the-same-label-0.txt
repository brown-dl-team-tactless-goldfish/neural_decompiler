void process(int** Tree, int root, int* cn, int* ans, int* alpha, char * labels, bool* visit){
    if(visit[root] == true){  
        return ;    
    }
    visit[root] = true;
    int old = alpha[labels[root] - 'a'];
    alpha[labels[root] - 'a']++;
    for(int i = 0; i < cn[root]; i++){
        process(Tree, Tree[root][i], cn, ans, alpha, labels, visit);    
    }    
    int new = alpha[labels[root] - 'a'];
    ans[root] = new - old;
}
int* countSubTrees(int n, int** edges, int edgesSize, int* edgesColSize, char * labels, int* returnSize){
    int** Tree = malloc(n * sizeof(int*));
    int* cn = calloc(n , sizeof(int));
    for(int i = 0; i < edgesSize; i++){
        cn[edges[i][0]]++;
        cn[edges[i][1]]++;
    }
    
    for(int i = 0; i < n; i++){
        if(cn[i] > 0)
            Tree[i] = malloc(cn[i] * sizeof(int));
    }
    
    cn = calloc(n , sizeof(int));
    bool* visit = calloc(n , sizeof(bool));
    for(int i = 0; i < edgesSize; i++){
        int K = edges[i][0];
        Tree[K][cn[K]] = edges[i][1];
        cn[K]++;
        K = edges[i][1];
        Tree[K][cn[K]] = edges[i][0];
        cn[K]++;
    }

    int* ans = malloc(n * sizeof(int));
    int* alpha = calloc(26 , sizeof(int));
    process(Tree, 0, cn, ans, alpha, labels, visit);
    *returnSize = n;
    return ans;
}