class Solution {
    vector<vector<long long int>> chooses;
    string help(int r, int c, int k){
        if (c == 0)
            return string(r, 'V');

        if (r == 0)
            return string(c, 'H');

        if (k <= chooses[r+c-1][c-1])
            return "H" + help(r, c-1, k);
        
        return "V" + help(r-1, c, k - chooses[r+c-1][c-1]);
    }
public:
    string kthSmallestPath(vector<int>& destination, int k) {
        chooses = vector<vector<long long int>>(40, vector<long long int>(40));
        for (int i = 0; i <= 35; ++i){
            chooses[i][0] = chooses[i][i] = 1;
        }
        for (int i = 2; i <= 35; ++i){
            for (int j = 1; j <= i/2; ++j){
                chooses[i][j] = chooses[i-1][j] + chooses[i-1][j-1];
                chooses[i][i-j] = chooses[i][j];
            }
        }
        return help(destination[0], destination[1], k);
    }
};
