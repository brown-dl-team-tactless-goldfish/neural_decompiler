typedef struct {
    int n;
    pthread_mutex_t lock;
    pthread_cond_t cond;
    int flag;
} FooBar;

FooBar* fooBarCreate(int n) {
    FooBar* obj = (FooBar*) malloc(sizeof(FooBar));
    obj->n = n;
    pthread_mutex_init(&obj->lock, NULL);
    pthread_cond_init(&obj->cond, NULL);
    obj->flag = 0;
    return obj;
}

void foo(FooBar* obj) {
    
    for (int i = 0; i < obj->n; i++) {
        pthread_mutex_lock(&obj->lock);
        while (obj->flag == 1) {
            pthread_cond_wait(&obj->cond, &obj->lock);
        }
        
        printFoo();
        obj->flag = 1;
        pthread_cond_signal(&obj->cond);
        pthread_mutex_unlock(&obj->lock);
    }
}

void bar(FooBar* obj) {
    
    for (int i = 0; i < obj->n; i++) {
        pthread_mutex_lock(&obj->lock);
        while (obj->flag == 0) {
            pthread_cond_wait(&obj->cond, &obj->lock);
        }
        
        printBar();
        obj->flag = 0;
        pthread_cond_signal(&obj->cond);
        pthread_mutex_unlock(&obj->lock);
    }
}

void fooBarFree(FooBar* obj) {
    pthread_mutex_destroy(&obj->lock);
    pthread_cond_destroy(&obj->cond);
    free(obj);
}