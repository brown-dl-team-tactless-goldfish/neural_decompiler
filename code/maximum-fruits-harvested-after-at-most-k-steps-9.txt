class Solution {
public:
    int maxTotalFruits(vector<vector<int>>& arr, int startPos, int k) {
        
        int n = arr.size();
        
        int m = 2e5 + 1;
        
        vector<int> pos(m, 0);
        
        // insert the no. of fruits at its position
        
        for(int i = 0; i < n; i++)
        {
            pos[arr[i][0]] = arr[i][1];
        }
        
        // left[i] will store the no. of fruits [ith pos to startPos]
        
        vector<int> left(m, 0);
        
        // right[i] will store the no. of fruits from [startPos to ith pos]
        
        vector<int> right(m, 0);
        
        // fill left array
        
        left[startPos] = pos[startPos];
        
        for(int i = startPos - 1; i >= 0; i--)
        {
            left[i] = left[i + 1] + pos[i];
        }
        
        // fill right array
        
        right[startPos] = pos[startPos];
        
        for(int i = startPos + 1; i < m; i++)
        {
            right[i] = right[i - 1] + pos[i];
        }
        
        long long maxi = 0;
        
        // now we have two cases :- 
        
        // case 1 :- move l steps left and (k - 2 * l) steps right
        
        for(int l = 0; l <= min(k, startPos); l++)
        {
            int r = min(k - 2 * l, m - startPos + 1);
            
            // now calculate no. of harvested fruits
            
            if(startPos + r < m)
            {
                long long curr_max = left[startPos - l] + right[startPos + r] - pos[startPos];
                
                maxi = max(maxi, curr_max);
            }
        }
        
        // case 2 :- move r steps right and (k - 2 * l) steps left
        
        for(int r = 0; r <= min(k, m - startPos - 1); r++)
        {
            int l = min(k - 2 * r, startPos);
            
            // now calculate no. of fruits harvested
            
            if(startPos - l >= 0)
            {
                long long curr_max = left[startPos - l] + right[startPos + r] - pos[startPos];
                
                maxi = max(maxi, curr_max);
            }
        }
        
        return maxi;
    }
};