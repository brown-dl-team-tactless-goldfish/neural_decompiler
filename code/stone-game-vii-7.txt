// Bawwal Question 
    
    // A -> only one element , ans = 0;
    
    // AB -> if we will remove A , we will take B 
            // if we will remove B , we will take A , ans=max(A , B) in this case
    
    // ABC -> Case 1 if we will remove A , then it will be like B + C - max(func(BC))
          // Case 2  If we will remove C , then it will be like A + C -max(func(AB))
       // answer will be max(case1 , case2) in this .
	   
	     // ABCD-> Case 1 if we will remove A , then it will be like B + C + D - max(func(BCD))
          // Case 2  If we will remove D , then it will be like A + B + C -max(func(ABC))
		  // answer will be max(case1 , case2) in this .
    
    // See there are 2 components First -> Adding B+C  , Second -> Substracting 
    
    //max(its smaller subproblem) , First Components represents taking Alice sum by
    //removing the value , Bob wants to minimise the diff thus by taking max value of 
    //its smaller problem(func(BC)) , Our answer will be max (of all the 
    //possibiliies) as Alice wants to maximise the diff of the scores , ans will be 
    //max( B + C - max(func(BC)) , A + C -max(func(AB)) ).    
    
    
    int dp[1004][1004];
    
    
    int func(vector<int> &nums , int i , int j , vector<int> &psum , int n)
    {
        if(i==j)
        {
            // only one stone left , so we have to remove it 
            // diff will be zero in this case 
            
            return 0;
        }
        
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        
        // Alice remove from left side 
        int Alice_pos1 = psum[j]-psum[i] - func(nums , i+1 , j , psum , n);
        // this func calls which we a re substracting doing the job of BOb ,   
        //(substracting maximal value of the smaller problem)
        
        // Alice removes from end
        
        int Alice_pos2 = psum[j-1]-psum[i]+nums[i] - func(nums , i , j-1 , psum , n);
        
        int ans=max(Alice_pos1 , Alice_pos2);// Alice wants will take max of 2 possibilty
        
        return dp[i][j]=ans;
            
    }
    
    int stoneGameVII(vector<int>& nums) {
        
          int n=nums.size();
        
          vector<int> psum(n , 0);
        
          psum[0]=nums[0];
        
          for(int i=1;i<n;i++)
          {
              psum[i]=psum[i-1]+nums[i];
          }
          
           memset(dp , -1 , sizeof(dp));
        
          int res=func(nums , 0 , n-1 , psum , n );
        
          return res;
          
        
    }