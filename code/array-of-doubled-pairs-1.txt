int cmp(void* a,void* b){
    return *(int*)a-*(int*)b;
}
bool helper(int* A, int ASize){
    if(ASize%2!=0){
        return false;
    }
    qsort(A,ASize,sizeof(A[0]),cmp);
    int* stack=(int*)calloc(ASize,sizeof(int));
    int left=0;
    int right=0;
    for(int i=0;i<ASize;i++){
        if(left==right){
            stack[right++]=A[i];
            if(right-left>ASize-i-1){
                return false;
            }
            continue;
        }
        if(A[i]==2*stack[left]){
            left++;
        }else if(A[i]<2*stack[left]){
            stack[right++]=A[i];
            if(right-left>ASize-i-1){
                return false;
            }
        }else{
            return false;
        }
    }
    return left==right;
}
bool canReorderDoubled(int* A, int ASize){
    int* array1=(int*)calloc(ASize,sizeof(int));
    int count1=0;
    int* array2=(int*)calloc(ASize,sizeof(int));
    int count2=0;
    for(int i=0;i<ASize;i++){
        if(A[i]<=0){
            array1[count1++]=-A[i];
        }else{
            array2[count2++]=A[i];
        }
    }
    return helper(array1,count1)&&helper(array2,count2);
}