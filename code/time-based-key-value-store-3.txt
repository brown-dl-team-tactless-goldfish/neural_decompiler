typedef struct Value {
    char* key;
    char* value;
}ValueMap;

typedef struct timemap {
    char* key;
    int num;
    ValueMap* val[100000];
    int timestamp[100000];
    struct timemap* next;
} TimeMap;


TimeMap* timeMapCreate() {
    TimeMap* root = (TimeMap*)malloc(1 * sizeof(TimeMap));
    root->key = "";
    root->next = NULL;
    return root;
}
int binarySearch(int* timestamp,int timestampNum,int goal) {
    int mid = timestampNum / 2;
    int left = 0;
    int right = timestampNum;
    while (left <= right) {
        mid = left+(right-left) / 2;
        if (goal > timestamp[mid]) {
            left = mid+1;
        }
        else {
            right = mid-1;
        }
    }
    if(timestamp[mid]>goal && mid>0){
        mid = mid - 1;
    }
    return mid;
}
void timeMapSet(TimeMap* obj, char* key, char* value, int timestamp) {
    TimeMap* temp = NULL;
    while (obj != NULL) {
        if (!(strcmp(obj->key, key))) {
            ValueMap* nodeVal = (ValueMap*)malloc(1 * sizeof(ValueMap));
            nodeVal->key = key;
            nodeVal->value = value;
            (obj->timestamp)[++(obj->num)] = timestamp;
            (obj->val)[(obj->num)] = nodeVal;
            return;
        }
        temp = obj;
        obj = obj->next;
    }
    TimeMap* node = (TimeMap*)malloc(1 * sizeof(TimeMap));
    ValueMap* nodeVal = (ValueMap*)malloc(1 * sizeof(ValueMap));
    nodeVal->key = key;
    nodeVal->value = value;
    node->key = key;
    node->num = 0;
    (node->timestamp)[0] = timestamp;
    (node->val)[0] = nodeVal;
    temp->next = node;
    node->next = NULL;
}

char* timeMapGet(TimeMap* obj, char* key, int timestamp) {
    while (obj != NULL) {
        if (!strcmp(obj->key, key)) {
            int index = binarySearch(obj->timestamp, obj->num, timestamp);
            if (obj->timestamp[index] <= timestamp)return obj->val[index]->value;
            return "";
        }
        obj = obj->next;
    }
    return "";
}
void timeMapFree(TimeMap* obj) {
    //if (obj == NULL) { return; }
    //timeMapFree(obj->next);
    free(obj);
}



/**
 * Your TimeMap struct will be instantiated and called as such:
 * TimeMap* obj = timeMapCreate();
 * timeMapSet(obj, key, value, timestamp);
 
 * char * param_2 = timeMapGet(obj, key, timestamp);
 
 * timeMapFree(obj);
*/