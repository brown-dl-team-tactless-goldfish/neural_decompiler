public class Solution
{
    public int MaxPerformance(int n, int[] speed, int[] efficiency, int k)
    {
        var BigMod = (int)Math.Pow(10, 9) + 7;
        var candidates = new List<List<int>>();
        for (int i = 0; i < n; i++)
        {
            candidates.Add(new List<int> { efficiency[i], speed[i] });
        }
        candidates = candidates.OrderByDescending(x => x[0]).ToList();
        var pq = new PriorityQueue<int, int>();
        long currentSum = 0;
        long result = 0;
        for (int i = 0; i < candidates.Count; i++)
        {
            if (pq.Count == k)
            {
                var num = pq.Dequeue();
                currentSum -= num;
            }
            pq.Enqueue(candidates[i][1], candidates[i][1]);
            currentSum += candidates[i][1];
            result = Math.Max(result, currentSum * candidates[i][0]);
        }
        return (int)(result % BigMod);
    }
}