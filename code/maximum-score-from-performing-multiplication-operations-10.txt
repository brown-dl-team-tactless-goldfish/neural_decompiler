vector<vector<int>> dp;

int  help(vector<int>& n, vector<int>& m, int i, int k)
{
    if(k >= m.size())
    {
        return 0;
    }
    
    if(dp[i][k] != -1)
    {
        return dp[i][k];
    }
        
    int j = n.size()-(k-i)-1;
    
    int a1 = n[i]*m[k] + help(n,m,i+1,k+1);
    
    int a2 = n[j]*m[k] + help(n,m,i,k+1);
    
    return dp[i][k] = max(a1,a2);
    
}
int maximumScore(vector<int>& nums, vector<int>& multipliers)
{
    int m = multipliers.size();
    
    dp.resize(m+1,vector<int>(m+1,-1));
    
    return help(nums,multipliers, 0 ,0);
}