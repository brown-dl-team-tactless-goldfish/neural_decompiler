int n;

map<int,int> m;

vector<vector<int>> dp;

vector<vector<int>> jmp;

int vis ( int n, int j ) {
    
    if (dp[n][j]==-1) {
        if (jmp[n][j]==-1) dp[n][j] = 0;
        else dp[n][j] = vis( jmp[n][j], 1-j );
    }
    return dp[n][j];
}

int oddEvenJumps(vector<int>& a) {
    
    n = a.size();
    
    if (n==1)   return 1;
    
    m[a[n-1]] = n-1;
    
    dp = vector<vector<int>> (n, vector<int>(2, -1));
    dp[n-1][0] = 1;
    dp[n-1][1] = 1;
    
    jmp = vector<vector<int>> (n, vector<int>(2, -1));
    
    for ( int i=n-2; i>=0; i-- )
    {
        auto k = m.lower_bound(a[i]);
        
        jmp[i][1] = k==m.end()? -1:k->second; 
        
        if (k!=m.end())
        {
            if (k->first==a[i]) 
               jmp[i][0] = k->second;
            else {
                if (k!=m.begin()) {
                    k--;
                    jmp[i][0] = k->second;
                }
            }                
        }
        else {
            k--;
            jmp[i][0] = k->second;
        }
        m[a[i]] = i;
    }
    int c=1;
    for ( int i=0; i<n-1; i++ )
        c += vis( i, 1 );
    return c;
}