class Solution {
public:
    using VI = vector<int>;
    using Memo = unordered_map<int, int>;
    int maxJumps(VI& A, int K, Memo m = {}, int ans = 0) {
        for (auto i = 0; i < A.size(); ++i)
            ans = max(ans, go(A, K, m, i));
        return ans;
    }
private:
    int go(VI& A, int K, Memo& m, int i) {
        if (m[i])
            return m[i];
        int L = 0, R = 0, N = A.size();
        for (auto j = i - 1; j >= max(i - K, 0    ) && A[j] < A[i]; --j) L = max(L, 1 + go(A, K, m, j)); // ðŸ‘ˆ to-the-(L)eft
        for (auto j = i + 1; j <= min(i + K, N - 1) && A[j] < A[i]; ++j) R = max(R, 1 + go(A, K, m, j)); //    to-the-(R)ight ðŸ‘‰
        return m[i] = max({L, R, 1});
    }
};