class Solution {
public:
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        for(int i=0;i<times.size();i++)
           times[i].push_back(i);
        int time=1,a,b;
        set<int>free;
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>>busy,avail;
        for(int i=0;i<times.size();i++)
            avail.push(times[i]);
        for(int i=0;i<times.size();i++)
            free.insert(i);
        while(true)
        {
            if(!busy.empty() && time==busy.top()[0])
            {
                free.insert(busy.top()[1]);
                busy.pop();
            }
            if(time==avail.top()[0] && targetFriend==avail.top()[2])
                return *free.begin();
            else if(time==avail.top()[0])
            {
                int t=avail.top()[1];
                busy.push({t,*free.begin()});
                avail.pop();
                free.erase(*free.begin());
            }
            a=busy.empty()?INT_MAX:busy.top()[0];
            b=avail.empty()?INT_MAX:avail.top()[0];
            time=min(a,b);
        }
        return times.size()-1;
        
    }
};