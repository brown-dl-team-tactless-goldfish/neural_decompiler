class Solution {
public:
    int dx[4] = {-1,0,1,0};
    int dy[4] = {0,1,0,-1};
    vector<pair<int,int>> v[3];
    int m,n;
    int check(int i, int j, vector<vector<int>>& A){
        for(int k=0;k<4;k++){
            int xx = i+dx[k];
            int yy = j+dy[k];
            if(xx<0 || yy<0 || xx>=m || yy>=n) continue;
            if(A[xx][yy]==0) return 1;
        }
        return 0;
    }
    void dfs(int i, int j, vector<vector<int>>& A,vector<vector<int>>& vis, int cnt){
        vis[i][j]=cnt;
        if(check(i,j,A))
            v[cnt].push_back({i,j});
        for(int k=0;k<4;k++){
            int xx = i+dx[k];
            int yy = j+dy[k];
            if(xx<0 || yy<0 || xx>=m || yy>=n) continue;
            if(A[xx][yy]==1 && vis[xx][yy]==0){
                dfs(xx,yy,A,vis,cnt);
            }
        }
    }
    int shortestBridge(vector<vector<int>>& A) {
        m = A.size();
        n = A[0].size();
        vector<vector<int>> vis(m,vector<int>(n));
        int cnt;
        cnt=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]==0 && A[i][j]==1){
                    dfs(i,j,A,vis,cnt);
                    cnt++;
                }
            }
        }
        int ans=INT_MAX;
        for(int i=0;i<v[1].size();i++){
            int a = v[1][i].first;
            int b = v[1][i].second;
            for(int j=0;j<v[2].size();j++){
                int c = v[2][j].first;
                int d = v[2][j].second;
                ans=min(ans,abs(c-a)+abs(b-d)-1);
            }
        }
        return ans;
    }
};