    int maxJumps(vector<int>& arr, int d) {
        int res(1);
        vector<int>dp(arr.size(),-1);
        for(int i(0);i<arr.size();++i)   res = max(res,f(arr,d,dp,i));
        return res;
    }
    int f(vector<int>&arr,int d,vector<int>&dp,int idx){
        //if cached, return cached result
        if(dp[idx]>-1)  return dp[idx];
        
        int l(idx), r(idx), m(0);
        //figure out left and right bound
        while(l>0&&arr[l-1]<arr[idx]&&(idx-l)<d)    --l;
        while(r<arr.size()-1&&arr[r+1]<arr[idx]&&(r-idx)<d)    ++r;
        
        for(int i(l); i<=r; ++i){
            if(i==idx)  continue;
            m = max(m, f(arr,d,dp,i));
        }
        //write cache
        return dp[idx]=m+1;
    }