typedef struct map_ {
	int idx;
	int cnt[26];
} map_st;

int get_root (int *parent, int a) {
	if (parent[a] != a) parent[a] = get_root(parent, parent[a]);
	return parent[a];
}

void union_find (int *parent, int a, int b) {
	parent[get_root(parent, a)] = get_root(parent, b);
}

char * smallestStringWithSwaps (char * s, int** pairs, int pairsSize, int* pairsColSize) {
	int      i, root, len = strlen(s);
	int     *parent = calloc(len, sizeof(int));
	map_st **maps = calloc(len, sizeof(map_st *));

	for (i = 0; i < len; i++) {
		parent[i] = i;
	}

	for (i = 0; i < pairsSize; i++) {
		union_find(parent, pairs[i][0], pairs[i][1]);
	}

	for (i = 0; i < len; i++) {
		root = get_root(parent, i);
		if (maps[root] == NULL) {
			maps[root] = calloc(1, sizeof(map_st));
		}
		maps[root]->cnt[s[i]-'a']++;
	}

	for (i = 0; i < len; i++) {
		root = get_root(parent, i);
		while (maps[root]->cnt[maps[root]->idx] == 0) maps[root]->idx++;
		s[i] = 'a' + maps[root]->idx;
		maps[root]->cnt[maps[root]->idx]--;
	}

	for (i = 0; i < len; i++) {
		if (maps[i]) free(maps[i]);
	}

	free(maps);
	free(parent);
	return s;
}