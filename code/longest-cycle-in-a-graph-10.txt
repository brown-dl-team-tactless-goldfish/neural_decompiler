int ans;

void dfs(int node, vector<int>& edges,vector<bool>& visited,vector<int>& dist,int d)
{
    if(!visited[node])
    {
        visited[node] = true;
        
        dist[node] = d;
        
        if(edges[node] != -1)
        {
            dfs(edges[node],edges,visited,dist,d+1);
        }
        
        dist[node] = -1;
    }
    else
    {
        if(dist[node] != -1)
        {
            ans = max(ans, d - dist[node]);
        }
    }
}

int longestCycle(vector<int>& edges) {
    
    ans = -1;
    
    int n = edges.size();
    
    vector<int> dist(n,-1);
    
    vector<bool> visited(n, false);
    
    for(int i=0; i<n; i++)
    {
        if(!visited[i])
        {
            dfs(i,edges,visited,dist, 0);
        }
    }
    
    return ans;
    
}