int maxNonOverlapping(int* nums, int numsSize, int target){
    int n = numsSize;
    int N = n * 5;
    int** hash = calloc(N , sizeof(int*));
    hash[0] = malloc(2 * sizeof(int));
    hash[0][0] = 0;
    hash[0][1] = -1;
    int* dp = malloc((n+1) * sizeof(int)) ;
    dp[0] = 0;
    int sum = 0;
    for(int i = 0; i < n; i++){
        sum += nums[i];
        dp[i+1] = dp[i];
        int remain = sum - target;
        int d = abs(remain);
        int t = INT_MIN;
        while(1){
            if(hash[d % N] == NULL){
                break;
            }
            else if(hash[d % N][0] == remain){
                t = hash[d % N][1];
                break;
            }
            else
                d++;
        }
        if(t != INT_MIN)
            dp[i+1] = fmax(dp[i], 1 + dp[t+1]);
         d =  abs(sum);
        while(1){
            if(hash[d % N] == NULL){
                hash[d % N] = malloc(2 * sizeof(int));
                hash[d % N][0] = sum;
                hash[d % N][1] = i;
                break;
            }
            else if(hash[d % N][0] == sum){
                hash[d % N][1] = i;
                break;
            }
            else
                d++;
        }
    }
    int ans = dp[n];
    for(int i = 0; i < N; i++){
        if(hash[i])
            free(hash[i]);
    }
    free(hash);
    free(dp);
    return ans;
}