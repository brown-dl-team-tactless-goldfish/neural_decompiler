class Solution {
public:
    const int INF = 1e9 + 7;
    vector<string> splitMessage(string message, int limit) {
        int n = message.size();
        vector<int> size(n + 1);
        for (int i = 1; i <= n; i++) {
            size[i] = (int) to_string(i).size();
        }
        auto check = [&] (int length) -> int {
            int len = (int) to_string(length).size();
            int sz = n;
            for (int i = 1; i < length; i++) {
                int l = size[i] + len + 3;
                if (limit <= l) {
                    return 1;
                }
                int rest = limit - l;
                sz -= rest;
                if (sz <= 0) {
                    return 1;
                }
            }
            int rest = limit - size[length] - len - 3;
            if (sz > 0 && sz <= rest) {
                return 0;
            }
            return -1;
        };
        int sol = INF;
        for (int i = 1; i <= 10000; i *= 10) {
            int low = i;
            int high = i * 10 - 1;
            while (low <= high) {
                int mid = (low + high) / 2;
                int val = check(mid);
                if (val == 0) {
                    sol = min(sol, mid);
                    high = mid - 1;
                } else if (val < 0) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        if (sol == INF) {
            return {};
        }
        int len = (int) to_string(sol).size();
        vector<string> res;
        int pos = 0;
        string re = to_string(sol);
        for (int i = 1; i <= sol; i++) {
            int l = size[i] + len + 3;
            int rest = limit - l;
            int left = n - pos;
            string s = message.substr(pos, min(rest, left)) + "<" + to_string(i) + "/" + re + ">";
            pos += min(rest, left);
            res.push_back(s);
        }
        return res;
    }
};