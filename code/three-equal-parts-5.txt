class Solution {
public:
  vector<int> threeEqualParts(vector<int>& arr) {
    int ones = 0, N = arr.size();
    for(auto &x: arr) if(x) ones++;
    if(ones%3 != 0) return{-1,-1};                //check ones
    if(ones == 0) return {0,2};
    ones /= 3;
    
    int zeroes = 0, i = N - 1;                       //last contigious zerous
    while(arr[i--] == 0) zeroes++;
 ///////////////////////////////////////////(splitting)   
    int si = -1, sj, j, id = 0, n;
    
    while(arr[id] == 0) si++, id++;           //"si"
    
    n = ones;
    while(n) if(arr[id++] == 1) n--;          // "i" without zerous
    i = id-1;
    
    int nz = 0;
    while(arr[id] == 0) nz++, id++;
    if(nz < zeroes) return {-1,-1};
    i += zeroes, sj = id;                     // "i" and "sj" 
    
    n = ones;
    while(n) if(arr[id++] == 1) n--;          // "j"   without zerous
    j = id;
    
    nz = 0;
    while(arr[id] == 0) nz++, id++;
    if(nz < zeroes) return {-1,-1};           // "j" and id
    j += zeroes;
    
  /////////////////////////////////////////////////// second part(if we can split)  
    if(i - si != N - id || i - si != j - sj ) return {-1,-1};              //if three word havent the same length
    
    int limit = j - sj - zeroes;                              //old version ->         int limit = j - sj;   
    for(int a = si + 1, b = sj, c = id; limit; a++, b++, c++, limit--)
      if(arr[a] != arr[b] || arr[a] != arr[c]) return {-1,-1};
    
    return {i,j};
  }
};