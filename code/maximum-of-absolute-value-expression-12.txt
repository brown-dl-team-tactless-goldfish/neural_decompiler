    int * a1 = new int [DIM + 1];
    int * a2 = new int [DIM + 1];
    int * a3 = new int [DIM + 1];
    int * a4 = new int [DIM + 1];
    
    int min1 = std::numeric_limits<int>::max();
    int min2 = std::numeric_limits<int>::max();
    int min3 = std::numeric_limits<int>::max();
    int min4 = std::numeric_limits<int>::max();
    
    int max1 = std::numeric_limits<int>::min(); 
    int max2 = std::numeric_limits<int>::min();
    int max3 = std::numeric_limits<int>::min();
    int max4 = std::numeric_limits<int>::min();
    
    for(int i = 0; i < DIM; i++)
    {
        a1[i] =  A[i] + B[i] + i;
        a2[i] =  A[i] - B[i] + i;
        a3[i] =  B[i] - A[i] + i;
        a4[i] = -B[i] - A[i] + i;
        
        min1 = std::min(min1, a1[i]); 
        min2 = std::min(min2, a2[i]); 
        min3 = std::min(min3, a3[i]); 
        min4 = std::min(min4, a4[i]);
        
        max1 = std::max(max1, a1[i]);
        max2 = std::max(max2, a2[i]);
        max3 = std::max(max3, a3[i]);
        max4 = std::max(max4, a4[i]);
    }
    
    int v1 = max1 - min1;
    int v2 = max2 - min2; 
    int v3 = max3 - min3; 
    int v4 = max4 - min4;
    
    delete [] a1;
    delete [] a2;
    delete [] a3;
    delete [] a4;
    
    return std::max(std::max(v1, v2), std::max(v3, v4));
}