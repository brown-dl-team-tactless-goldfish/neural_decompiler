class Solution {
public:
    // 1xxxx -> 00000
    // 1xxxx -> ...  -> 1(1000) -> 0(1000)-> ... -> 0(0000)
    //  helper(xxxx)  +         1        +  minimumOneBitOperations(1000)
    // helper(xxxx) : # of ops to convert xxxx to 1000
    // if xxxx is 0000, then helper(xxxx) is minimumOneBitOperations(1000)
    // which means minimumOneBitOperations(10000) = 2*  minimumOneBitOperations(1000) + 1
    
    // then minimumOneBitOperations(2^k) is 2^(k+1)-1   
    
    // helper(xxxx)
    // if xxxx is 1xxx, then return minimumOneBitOperations(xxx)
     // if xxxx is 0xxx, then 
     //  0xxx   -> ... -> 0100 -> 1100... -> 1000 is 
      // helper(xxx) + 1 + minimumOneBitOperations(100)  => minimumOneBitOperations(1xxx)
    // so helper(xxxx) is basically minimumOneBitOperations(xxxx ^ 1000 )  
      // which is equal to minimumOneBitOperations(1xxxx^11000)
    
    
    //so minimumOneBitOperations(1xxxx) = 2^4 + minimumOneBitOperations(1xxxx^11000)
    

    int minimumOneBitOperations(int n) {
        if(n==0)
            return 0;
        if(n==1)
            return 1;
        int len = 0;
        int cur = n;
        while(cur){
            len++;
            cur = cur>>1;
        }
        int res =  (1<<(len-1)) + minimumOneBitOperations( n ^ ( 3 << (len-2) ) );
        return res;
    }
};