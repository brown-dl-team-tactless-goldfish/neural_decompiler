void dfs(char** grid, int gridSize, int gridColSize, int rowIdx, int colIdx){
    
    grid[rowIdx][colIdx] = '0';
    
    if(((rowIdx - 1) >= 0) && (grid[rowIdx-1][colIdx] == '1'))  dfs(grid, gridSize, gridColSize, rowIdx-1, colIdx);
    
    if(((rowIdx + 1) < gridSize) && (grid[rowIdx + 1][colIdx] == '1')) dfs(grid, gridSize, gridColSize, rowIdx+1, colIdx);
    
    if(((colIdx - 1) >= 0) && (grid[rowIdx][colIdx-1] == '1'))  dfs(grid, gridSize, gridColSize, rowIdx, colIdx-1);
    
    if(((colIdx + 1) < gridColSize) && (grid[rowIdx][colIdx+1] == '1')) dfs(grid, gridSize, gridColSize, rowIdx, colIdx+1);
    
}

int numIslands(char** grid, int gridSize, int* gridColSize){
    
    if((gridSize == 0) || (gridColSize == 0))   return 0;
    size_t numOfIslands = 0;
    for(int i=0; i<gridSize; i++){
        for(int j=0; j< (*gridColSize); j++){
            if(grid[i][j] == '1'){
                numOfIslands++;
                dfs(grid, gridSize, *gridColSize, i, j);
            }
        }
    }
    
    return numOfIslands;
}