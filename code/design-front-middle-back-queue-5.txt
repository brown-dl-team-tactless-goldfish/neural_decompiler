public class FrontMiddleBackQueue {
            private LinkedList<int> list = null;

            public FrontMiddleBackQueue()
            {
                list = new LinkedList<int>();
            }

            public void PushFront(int val)
            {
                list.AddFirst(val);
            }

            public void PushMiddle(int val)
            {
                if (list.Count == 0)
                    list.AddFirst(val);
                else
                {
                    int i = 0;
                    LinkedListNode<int> node = list.First;
                    
                    while (i++ < list.Count / 2)
                        node = node.Next;
                    
                    list.AddBefore(node, val);
                }
            }

            public void PushBack(int val)
            {
                list.AddLast(val);
            }

            public int PopFront()
            {
                if (list.Count == 0)
                    return -1;
                
                int cur = list.First();
                
                list.RemoveFirst();
                
                return cur;
            }

            public int PopMiddle()
            {
                if (list.Count == 0)
                    return -1;
                
                int i = 0;
                LinkedListNode<int> node = list.First;

                while (i++ < (list.Count % 2 == 0 ? list.Count / 2 - 1 : list.Count / 2))
                    node = node.Next;

                list.Remove(node);

                return node.Value;
            }

            public int PopBack()
            {
                if (list.Count == 0)
                    return -1;
                
                int cur = list.Last();

                list.RemoveLast();

                return cur;
            }
}