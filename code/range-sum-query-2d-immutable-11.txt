
typedef struct NumMatrix {
    int row;
    int** prf;    
} NumMatrix;


NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {
    NumMatrix* obj = (NumMatrix* )malloc(sizeof(NumMatrix));
    obj->row = matrixSize+1;
    obj->prf = (int**)malloc(sizeof(int*) * obj->row);
    
    int i, j;
    for (i = 0; i <= matrixSize; i++) {
        obj->prf[i] = (int* )malloc(sizeof(int) * ((*matrixColSize)+1));
        for (j = 0; j <= *matrixColSize; j++) {
            if (i == 0 || j == 0) 
                obj->prf[i][j] = 0; 
            else {
                obj->prf[i][j] = obj->prf[i-1][j] 
                                + obj->prf[i][j-1] 
                                - obj->prf[i-1][j-1]
                                + matrix[i-1][j-1];   
            }
        }
    }  
    return obj;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
    return obj->prf[row2+1][col2+1]
         - obj->prf[row2+1][col1]
         - obj->prf[row1][col2+1]
         + obj->prf[row1][col1];
}

void numMatrixFree(NumMatrix* obj) {
    for (int i = 0; i < obj->row; i++) {
        free(obj->prf[i]);
    }
    free(obj);
}

/**
 * Your NumMatrix struct will be instantiated and called as such:
 * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);
 * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);
 
 * numMatrixFree(obj);
*/