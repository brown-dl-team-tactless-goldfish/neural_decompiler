class Node {
public:
    int val{0};
    Node *pre{nullptr}, *next{nullptr};
    Node(int val) : val(val) {}
};

class FrontMiddleBackQueue {
public:
    FrontMiddleBackQueue() {}
    
    void pushFront(int val) {
        count++;
        auto tmp = new Node(val);
        if (count == 1) {
            head = middle = tail = tmp;
            return;
        }
        head->pre = tmp;
        tmp->next = head;
        head = tmp;
        if (count % 2 == 0) {
            middle = middle->pre;
        }
    }
    
    void pushMiddle(int val) {
        count++;
        auto tmp = new Node(val);
        if (count == 1) {
            head = middle = tail = tmp;
        } else if (count == 2) {
            head->pre = tmp;
            tmp->next = head;
            head = tmp;
            middle = middle->pre;
        } else if (count % 2 == 0) {
            middle->pre->next = tmp;
            tmp->pre = middle->pre;
            middle->pre = tmp;
            tmp->next = middle;
            middle = middle->pre;
        } else {
            middle->next->pre = tmp;
            tmp->next = middle->next;
            middle->next = tmp;
            tmp->pre = middle;
            middle = middle->next;
        }
    }
    
    void pushBack(int val) {
        count++;
        auto tmp = new Node(val);
        if (count == 1) {
            head = middle = tail = tmp;
            return;
        }
        tail->next = tmp;
        tmp->pre = tail;
        tail = tmp;
        if (count % 2 == 1) {
            middle = middle->next;
        }
    }
    
    int popFront() {
        if (count == 0) return -1;
        count--;
        int res = head->val;
        if (count == 0) {
            head = tail = middle = nullptr;
            return res;
        }
        head->next->pre = nullptr;
        head = head->next;
        if (count % 2 == 1)
            middle = middle->next;
        return res;
    }
    
    int popMiddle() {
        if (count == 0) return -1;
        count--;
        int res = middle->val;
        if (count == 0) {
            head = tail = middle = nullptr;
        } else if (count == 1) {
            tail->pre = nullptr;
            head = middle = tail;
        } else if (count % 2 == 0) {
            middle->pre->next = middle->next;
            middle->next->pre = middle->pre;
            middle = middle->pre;
        } else {
            middle->pre->next = middle->next;
            middle->next->pre = middle->pre;
            middle = middle->next;
        }
        return res;
    }
    
    int popBack() {
        if (count == 0) return -1;
        count--;
        int res = tail->val;
        if (count == 0) {
            head = tail = middle = nullptr;
            return res;
        }
        tail->pre->next = nullptr;
        tail = tail->pre;
        if (count % 2 == 0)
            middle = middle->pre;
        return res;
    }
private:
    Node *head{nullptr}, *middle{nullptr}, *tail{nullptr};
    int count{0};
};