class Solution {
public:
    long long maxPoints(vector<vector<int>>& points) {
        int m = points.size(), n = points[0].size();
        vector<long long> dp(begin(points[m - 1]), end(points[m - 1]));
        vector<long long> left(n, 0), right(n, 0);
        for (int i = m - 2; i >= 0; --i) {
            for (int j = 0; j < n ; ++j) {
                left[j] = dp[j] - (n - 1 - j);
                right[j] = dp[j] - j;
            }
            for (int j = 1; j < n; ++j) {
                left[j] = max(left[j], left[j - 1]);
                right[n - 1 - j] = max(right[n - 1 - j], right[n - j]);
            }
            for (int j = 0; j < n; ++j) {
                long long l = left[j] + n - 1 - j;
                long long r = right[j] + j;
                dp[j] = points[i][j] + max(l, r);
            }
        }
        return *max_element(begin(dp), end(dp));
    }
};