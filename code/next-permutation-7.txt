int comparator(const void * a, const void * b){
    int c = *(int *)a;
    int d = *(int *)b;
    if(c < d) {return -1;}            //  -1, a < b
    else if (c == d) {return 0;}      //  0 , a = b
    else return 1;                    //  1 , a > b
}


void nextPermutation(int* nums, int numsSize){

  int i, indexLeft=-1, indexRight=0,temp, numsMin;
    

  //Step1 : search first nums[i-1] < num[i] save indexLeft and indexRight
  //                  indexRight
  //        __________V______________
  //        | 1 | 2 | 4 | 3 | 2 | 1 |
  //        ------^------------------
  //              indexLeft  
  i = numsSize-1;
  while(i>0)
  {
    if(nums[i-1] < nums[i])
    {
      indexLeft = i-1;
      indexRight = i;
      numsMin = nums[indexRight];
      break;
    }          
    i--;
  }
  
  //Step2 :  if indexleft != -1 (step1 has been seaching an indexleft), 
  //          search indexRight that an element > nums[indexLeft] && find the Min of them 
  //                      indexRight
  //        ______________V__________
  //        | 1 | 2 | 4 | 3 | 2 | 1 |
  //        ------^------------------
  //              indexLeft   
  if(indexLeft!=-1)
  {
    i = numsSize-1;
    while(i>indexLeft)
    {
      if((numsMin > nums[i]) && (nums[i] > nums[indexLeft] ))
      {
        indexRight = i;
        numsMin = nums[indexRight];
      }    
      i--;
    }
    // swap indexLeft and indexRight
    //                       indexRight
    //        ______________V__________
    //        | 1 | 3 | 4 | 2 | 2 | 1 |
    //        ------^------------------
    //              indexLeft     
    temp = nums[indexLeft];
    nums[indexLeft] = nums[indexRight];
    nums[indexRight] = temp;
  }
  
  //Step3 : Resort all elemets from indexLeft to numSize-1 by increasing
  //                  qsort from here    
  //        __________V_____________
  //        | 1 | 3 | 1 | 2 | 2 | 4 |
  //        ------^------------------
  //              indexLeft     
  qsort(&nums[indexLeft+1], numsSize-(indexLeft+1) ,sizeof(nums[0]), comparator);
}
