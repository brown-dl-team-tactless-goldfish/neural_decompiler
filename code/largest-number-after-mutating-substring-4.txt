class Solution {
public:
    string maximumNumber(string num, vector<int>& change) {
        int f,f1;
 bool flag = false;
        for(int i=0;i<num.size();i++)
        {
            f = num[i] - '0'; //convert char to corresponding integer
           
            if(f<change[f])  // finding the first digit from the left that can be replaced by a greater digit
            {
                flag = true;
             
                char c = change[f] +'0';
                num[i] =  c;
                
                for(int j=i+1;j<num.size();j++)  //it is only optimal to change the substring starting from the first replaced digit
                {
                    f1 = num[j] - '0';
                    
                    if(f1<=change[f1])       //here it is optimal to change a digit even if is equal to corresponding change
                    {
                        char c1 = change[f1] + '0';      // converting int to char****
                        num[j] = c1;
                    }
                    else break;
                }
                
            }
            if(flag) return num;  //once the left most digits and its corresponding substring have been altered, break;
            
        }
        return num;
    }
};