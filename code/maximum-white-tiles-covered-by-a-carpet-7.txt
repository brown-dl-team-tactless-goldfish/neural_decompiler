class Solution {
public:
    int maximumWhiteTiles(vector<vector<int>>& t, int c) {
         
        sort(t.begin(),t.end());
        
        vector<int> v;
        v.push_back(0);
        for(int i = 1;i<t.size();i++)
        {
            v.push_back(t[i][0]-t[i-1][1]-1);//storing range of not white tiles 
        }
        
        for(int i=1;i<v.size();i++)
        {
            v[i]+=v[i-1]; // prefix sum
        }
        vector<int> sec_sec;
        for(int i=0;i<t.size();i++)
        {
            sec_sec.push_back(t[i][1]);
          
        }
        
        int res = 0;
        for(int i=0;i<t.size();i++)
        {
            
            int ans = 0;
            int tk = t[i][0] + c - 1;// total length that could be cover from current index
        
            int idx = lower_bound(sec_sec.begin(),sec_sec.end(),tk) - sec_sec.begin();//max index till where it could cover
        
            if(idx==sec_sec.size())
            {
                idx--;
                
            }
            
            if(tk>=t[idx][0])
            {
            tk = min(tk,t[idx][1]);
            ans+=(tk-t[idx][0]+1);// white tiles covered at last index
            
            }
      
           
            idx--;
            if(idx>=0)
            {
                ans+=t[idx][1]-t[i][0]+1; // total length cover before last max index
        
                ans-=(v[idx]-v[i]); // subtracting not white tiles covered as v[idx] storing value of number not white till till idx
              
            }
            
           
            res = max(ans,res);
        
            
            
        }
        
        
        return res;
        
        
        
            
        
        
    }
};