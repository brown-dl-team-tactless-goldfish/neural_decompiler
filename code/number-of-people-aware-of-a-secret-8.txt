class Solution {
public:
   int Mod=1e9+7;
    int dp[1001];
    // t is the time time when this person gets a secret

   int helper(int t,int d,int f,int n){
       if(dp[t]!=-1) return dp[t];
      int ans=1;
     if(t==n) return 1;
     // it can share secret to other till he forget (x<t+f)
      for(int x=t+d;x<t+f && x<=n;x++){
         ans=((long long)ans+helper(x,d,f,n))%Mod;
      }
      return dp[t]=ans;
   }
    int peopleAwareOfSecret(int n, int delay, int forget) {
        dp[0]=0;
        for(int i=1;i<=n;i++) dp[i]=-1;
         // total new person who has known or currently know the secret till n
        int total=helper(1,delay,forget,n);
        if(n==forget)
        return total;
        for(int i=1;i<=n;i++) dp[i]=-1;
          // total new person who has known or currently know the secret till n-forget
     int rest=helper(1,delay,forget,n-forget);

  // we want total person who currently know the secret till n=total-rest
     return ((long long)total-rest+Mod)%Mod;
    }
};