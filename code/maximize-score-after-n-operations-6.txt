class Solution {
public:
    int dp[16400];
    int n;
    int get(int mask,vector<int>&nums)
    {
        if(mask==((1<<n)-1))
            return 0;
        if(dp[mask]!=-1)
            return dp[mask];
        int op=__builtin_popcount(mask);
        op=op/2+1;
        int res=0;
        for(int i=0;i<n;i++)
        {
            if((1&(mask>>i))==0)
            {
                for(int j=i+1;j<n;j++)
                {
                    if((1&(mask>>j))==0)
                    {
                        int gcd=__gcd(nums[i],nums[j]);
                        int mask2=mask;
                        mask2^=(1<<i);
                        mask2^=(1<<j);
                        res=max(res,gcd*op+get(mask2,nums));
                    }
                }
            }
        }
        return dp[mask]=res;
    }
    int maxScore(vector<int>& nums) 
    {
        n=nums.size();
        memset(dp,-1,sizeof(dp));
        return get(0,nums);
    }
};