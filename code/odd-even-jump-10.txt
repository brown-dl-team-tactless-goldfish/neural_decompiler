class Solution {
public:
    int oddEvenJumps(vector<int>& arr) {
     
        int n=arr.size();
        vector<int>odd(n,0);
        vector<int>even(n,0);
        map<int,int>m;
        odd[n-1]=1;
        even[n-1]=1;
        m[arr[n-1]]=n-1;
        int ans=1;
        for(int i=n-2;i>=0;i--){
            auto it = m.lower_bound(arr[i]);//odd jump--->taking the odd numbered jump from this pos
            auto it2= m.upper_bound(arr[i]);//even jump--->taking the even numbered jump from this pos 
            
            int idx;
            if(it!=m.end()){
                //since this jump was odd next jump would be even
                idx= it->second;
                if(even[idx])odd[i]=1;
            }
            if(it2!=m.begin() ){
                //since this jump was even next jump would be odd
                it2--;
                //it2 was the upperbound and one number before it would be less or equal to the current number
                idx= it2->second;
                if(odd[idx])even[i]=1;
            }
            m[arr[i]]=i;
            if(odd[i]){
            //since the starting position will always be odd therfore incrementing only at odd position
                ans++;
            }
        }
        return ans;
        
    }
};

