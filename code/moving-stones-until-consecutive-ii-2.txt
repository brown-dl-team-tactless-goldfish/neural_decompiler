class Solution {
public:
    vector<int> numMovesStonesII(vector<int>& stones) {
        if(stones.empty()||stones.size()==1){
            return {0,0};
        }
        if(stones.size() == 2){
            return {0,0};
        }
        sort(stones.begin(),stones.end());
        deque<int> window; 
        window.push_back(stones[0]);
        int n = stones.size();
        int count = 0;
        int _min = INT_MAX; 
        int total = 0;
        for(int i = 1;i<n;i++){
            total += stones[i] - stones[i-1]-1;
            int r = window[0] + n - 1; 
            if(stones[i]<=r){
                count += stones[i] - window.back() - 1; 
                window.push_back(stones[i]);
            } else {
                if(window.back() == r) {
                     _min = min(_min,count);
                }
                else if(window.size() + 1 != n) {
                    _min = min(_min,count + r - window.back());
                }
                int front = window.front();
                window.pop_front();
                if(window.size()){
                    total -= stones[i] - stones[i-1] -1;
                    count -= window.front() - front - 1; 
                    i--;
                } else {
                    count = 0; 
                    window.push_back(stones[i]);
                }
               
            }
        }
        int l = window.back() - n + 1; 
        if(window.front() == l){
            _min = min(_min,count);
        } else if(window.size() + 1 != n){
            _min = min(_min,count + window.front() - l);
        }
        int x = min(stones[1] - stones[0] - 1, stones[stones.size()-1] - stones[stones.size()-2] - 1);
        int _max = total - x;
        return {_min,_max};
    }
};
const int _ = [](){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    return 0;
}();