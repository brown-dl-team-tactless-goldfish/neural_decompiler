    int mostBooked(int n, vector<vector<int>>& meetings) {
        vector<int> cnt(n);
        priority_queue<int> freeRooms; 
        priority_queue<pair<long long,int>> usedRooms; //free time, id
        sort(meetings.begin(), meetings.end());
        for(int i=0;i<n;i++) freeRooms.emplace(-i);
        for(auto& meeting : meetings){
            long long start = meeting[0], dur = meeting[1] - start, id = -1;
            while(!usedRooms.empty()){
                auto [t, id] = usedRooms.top();
                if(-t <= start) {
                    usedRooms.pop();
                    freeRooms.push(id);
                }
                else break;
            }
            if(!freeRooms.empty()){
                id = freeRooms.top(); freeRooms.pop();
            }
            else{
                auto [t, id_] = usedRooms.top(); usedRooms.pop();
                id = id_;
                start = -t;
            }
            cnt[-id]++;
            usedRooms.emplace(-start - dur, id);          
        }
        return max_element(cnt.begin(), cnt.end()) - cnt.begin();
    }