class Solution {
private:
    void hierholzer(stack<int>&path,unordered_map<int,vector<int>>&graph,unordered_map<int,int>&out,int vertex){
        while(out[vertex]>0){
            hierholzer(path,graph,out,graph[vertex][--out[vertex]]);
        }
        path.push(vertex);
    }
public:
    vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {
        unordered_map<int,vector<int>>graph;
        unordered_map<int,int>out,in;
        for(vector<int>pair:pairs){
            graph[pair[0]].push_back(pair[1]);
            out[pair[0]]++;
            in[pair[1]]++;
        }
        int start=-1;
        for(pair<int,int>deg:out){
            if(deg.second-in[deg.first]==1){
                start=deg.first;
                break;
            } else if(deg.second==in[deg.first] and start==-1){
                start=deg.first;
            }
        }
        stack<int>path;
        vector<int>vpath;
        hierholzer(path,graph,out,start);
        while(path.size()){
            vpath.push_back(path.top());
            path.pop();
        }
        vector<vector<int>>ans;
        for(int i=0;i+1<vpath.size();i++){
            ans.push_back({vpath[i],vpath[i+1]});
        }
        return ans;
    }
};