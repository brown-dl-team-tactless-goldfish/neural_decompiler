/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> ans;
        if(root == nullptr) {
            return ans;
        }
        vector<pair<Node*, int>> que;
        que.emplace_back(root, 0);
        vector<int> f;
        int color = 0;
        for(int i = 0; i < (int) que.size(); i++) {
            int c = que[i].second;
            Node* temp = que[i].first;
            if(c != color) {
                ans.push_back(f);
                f.clear();
                color = c;
            }
            f.push_back(temp->val);
            for(Node* child : temp->children) {
                if(child != nullptr) {
                    que.emplace_back(child, c ^ 1);
                }
            }
        }
        ans.push_back(f);
        return ans;
    }
};