class Solution {
    void better(int &x, int y) {
        if (x < 0 || x > y) x = y;
    }
public:
    int minNumberOfSemesters(int n, vector<vector<int>>& dependencies, int k) {
        vector<int> d(n);
        for (const auto& dep : dependencies) {
            d[dep[1] - 1] |= 1 << (dep[0] - 1);
        }
        vector<int> must(1 << n);
        vector<int> one(1 << n);
        for (int i = 1; i < must.size(); ++i) {
            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    must[i] |= d[j];
                    ++one[i];
                }
            }
        }
        vector<int> dp(1 << n, -1);
        dp[0] = 0;
        for (int i = 1; i < dp.size(); ++i) {
            for (int j = i;; j = (j - 1) & i) {
                if (dp[j] >= 0) {
                    const int select = i ^ j;
                    if (one[select] <= k && (must[select] & j) == must[select]) {
                        better(dp[i], dp[j] + 1);
                    }
                }
                if (j == 0) break;
            }
        }
        return dp.back();
        
    }
};