class Solution {
public:
    long long minCost(vector<int>& nums, int n){
    long long ans = 0;
    sort(nums.begin(), nums.end());
    long long K = nums[n / 2];
    for (int i = 0; i < n; ++i)
        ans += abs(nums[i] - K);

    if (n % 2 == 0) {
        long long tmp = 0;
        K = nums[(n / 2) - 1];
        for (int i = 0; i < n; ++i)
            tmp += abs(nums[i] - K);
        ans = min(ans, tmp);
    }
    return ans;
}
    
    long long makeSubKSumEqual(vector<int>& arr, int k) {
        long long n = arr.size();
        if(__gcd(n,(long long)k) == 1) return minCost(arr,n);
        else {
            long long ans=0;
            for(int i=0; i<__gcd(n,(long long)k); i++){
                vector<int>v1;
                for(int j=i; j<arr.size(); j+=__gcd(n,(long long)k))
                    v1.push_back(arr[j]);
                ans+=minCost(v1,v1.size());
            }
            return ans;
        }
        return 0;
    }
};