static int MODULO_LIMIT = (int) (1e9) + 7;
    
int countOrders(int n) {
    if (n < 1) {
        return 0;
    }

    /*

    We can build the recurrence relation as follows:
    1. Base case (n = 1)
    We can only have one possible combination which is P1,D1, so the answer here will be 1.

    2. Analyze the next two n's (n = 2 and n = 3)
    Given that n = 1 has only one possible combination, then we can insert P2 into any of the spaces below.
    _, P1, _ D1, _
    If we insert P2 into the first space, then we have three possible positions to insert D2 as below:
    _, P1, _ D1, _ (note that one of the possible combinations is P2, D2, P1, _ D1, _)
    Then, if we insert P2 into the second space, then we could insert D2 into two possible spaces
    (we cannot insert into the first space, because that would violate the rule that the delivery must come after the pickup)
    _, P1, P2, _, D1, _
    Similarly, if we insert P2 into the third space, then we have only one possible space for inserting D2
    Based on the analysis above, we can conclude that there are 3 + 2 + 1 = 6 possibilities to insert P2 and D2
    given a previous sequence.
    Because there is only one combination for n = 1, so there are a total of 6 possible combinations for n = 2.

    Now, if we have n = 3, and given one of the six possible sequences below:
    _, P1, _, P2, _, D1, _, D2, _
    We have 5 spaces for inserting D3 if we insert P3 into the first space, 4 spaces for inserting into the second space, etc.
    Then the number of possible combinations to build the combinations for one of the six possible previous combinations would be
	5 + 4 + 3 + 2 + 1 = 15
	From here, we can observe that to derive the begnning number 5 from n = 3 would be 2 * n - 1, which is applicable for every n.
	(ex. When n = 1, 2 * 1 - 1 = 1, when n = 2, 2 * 2 - 1 = 3, etc.)
    In order to derive the total number of possible combinations for n = 3, we have to multiply 15 obtained from the sum with 6,
	which is the number of possible combinations for n = 2. So the answer would come up with 15 * 6 = 90

    3. Figure out the formula
    By now we should be able to see the relations among n = 1, n = 2 and n = 3. To come up with a formula, we can start as below:
    C(n) = total number of combinations for n orders
    C(n + 1) = [Total number of combinations for the previous n orders] * [Number of ways to insert the new order into a previous sequence of n orders]
		     = C(n) * [(2n - 1) + (2n - 2) + ... + 2 + 1]
             = C(n) * [(2n - 1) * (2n)] / 2   <-- using the formula where 1 + 2 + ... + n = [n * (n + 1)] / 2
             = C(n) * n * (2n - 1)

    Once we have this formula, then it becomes easy to translate the relation into the short code below.

    */
    long combinations = 1L;
    for (long i = 2; i <= n; i++) {
        combinations = (combinations * i * (2 * i - 1)) % MODULO_LIMIT;
    }

    return (int) (combinations);
}