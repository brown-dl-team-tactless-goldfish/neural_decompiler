char * complexNumberMultiply(char * a, char * b){
    
int i,c1=0,c2=0,temp1=0,temp2=0,temp3=0,temp4=0,s1=0,s2=0,c=0,k=0,temp5=0;
int temp6=0,beg=0,end=0,rem=0;    
char temp[1000],ans[1000],temp0='\0';
temp[0]='\0',ans[0]='\0';
    
if(a[0]=='-')
++c1;
    
for(i=0;i<strlen(a);i++)
{
if(a[i]=='+'&&i!=0||a[i]=='i')
{
if(a[i]=='+'&&a[i+1]=='-') 
++s1;
temp[k]='\0';
k=0;
if(c==0)
{
temp1=atoi(temp);
++c;    
}
if(c!=0)
temp2=atoi(temp);

if(a[i]=='i')
break;
}

if(a[i]>='0'&&a[i]<='9')
{
    temp[k]=a[i];
    ++k;
}
}
 
k=0;
c=0;
 
if(b[0]=='-')
++c2;    

for(i=0;i<strlen(b);i++)
{
if(b[i]=='+'&&i!=0||b[i]=='i')
{
if(b[i]=='+'&&b[i+1]=='-') 
++s2;
temp[k]='\0';
k=0;
if(c==0)
{
temp3=atoi(temp);
++c;    
}
if(c!=0)
temp4=atoi(temp);

if(b[i]=='i')
break;
}

if(b[i]>='0'&&b[i]<='9')
{
    temp[k]=b[i];
    ++k;
}
}
 
if(c1>0)
temp1=temp1*(-1);
if(s1>0)
temp2=temp2*(-1);
if(c2>0)
temp3=temp3*(-1);
if(s2>0)
temp4=temp4*(-1);
    
printf("temp1-->%d\ntemp2-->%d\ntemp3-->%d\ntemp4-->%d\n",temp1,temp2,temp3,temp4);

    
temp5=((temp1*temp3)-(temp2*temp4));
temp6=((temp1*temp4)+(temp2*temp3));
    
printf("temp5-->%d\ntemp6-->%d\n",temp5,temp6);


k=0;
if(temp5<0)
{
temp5=temp5*(-1);
ans[0]='-';
k=1;
}
if(temp5>=0)
{
    if(temp5>0)
    {
    beg=k;
    while(temp5>0)
    {
    rem=temp5%10;
    ans[k]=rem+'0';
    temp5=temp5/10;
    ++k;
    }
    end=k-1;
    while(beg<=end)
    {
        temp0=ans[beg];
        ans[beg]=ans[end];
        ans[end]=temp0;
        ++beg;
        --end;
    }
    }
    else if(temp5==0)
    {
        ans[k]='0';
        ++k;
    }
ans[k]='+';
++k;
}
    
if(temp6<0)
{
temp6=temp6*(-1);
ans[k]='-';    
++k;
}
if(temp6>=0)
{
    if(temp6>0)
    {
    beg=k;
    while(temp6>0)
    {
    rem=temp6%10;
    ans[k]=rem+'0';
    temp6=temp6/10;
    ++k;
    }
    end=k-1;
    while(beg<=end)
    {
        temp0=ans[beg];
        ans[beg]=ans[end];
        ans[end]=temp0;
        ++beg;
        --end;
    }
    }
    else if(temp6==0)
    {
        ans[k]='0';
        ++k;
    }
    ans[k]='i';
    ++k;
ans[k]='\0';
}    

puts(ans);

char *result=(char*)malloc((strlen(ans)+1)*sizeof(ans));
int* returnSize=(strlen(ans)+1);

strcpy(result,ans);

return result;
}
