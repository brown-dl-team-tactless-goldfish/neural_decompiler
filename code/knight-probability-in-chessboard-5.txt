public class Solution {
    private int[,] moves = {{2, 1}, {-2, 1}, {2, -1}, {-2, -1}, {1, 2}, {-1, 2}, {1, -2}, {-1, -2}};
    public double KnightProbability(int N, int K, int r, int c) {
        var dp0 = new double[N][];
        
        for(var i = 0; i < N; i++) dp0[i] = new double[N];
        
        dp0[r][c] = 1;
        
        for(var l = 1; l <= K; l++){
            var dp1 = new double[N][];
            
            for(var n = 0; n < N; n++) dp1[n] = new double[N];
            
            for(var i = 0; i < N; i++){
                for(var j = 0; j < N; j++){
                    if(dp0[i][j] == 0) continue;
                    
                    for(var m = 0; m < moves.GetLength(0); m++){
                        int row = i + moves[m, 0], col = j + moves[m, 1];
                        
                        if(IsInBoard(N, row, col)) dp1[row][col] += dp0[i][j];
                    }
                }
            }
            
            dp0 = dp1;
        }
        
        return dp0.Sum(a => a.Sum(b => b)) / Math.Pow(8, K);
    }
    
    private bool IsInBoard(int N, int r, int c) => r >= 0 && c >= 0 && r < N && c < N;
}