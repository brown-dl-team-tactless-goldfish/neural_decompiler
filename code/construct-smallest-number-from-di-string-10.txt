bool fun(int ind,map<int,int> mp,string temp,string &ans,string &pattern)
{
    if(ind==pattern.size())                                      // when index reaches size of pattern then temp will
    {                                                            // contain the answer and we will return true
        ans = temp;
        return true;
    }
    
    for(int i=1;i<=9;i++)
    {
            int last = temp[temp.size()-1]-'0';                                            // finding last element which is added in temp string
            char c = i+'0';
            string t = temp+c;                                                             //adding current integer in t string 
                
            if(pattern[ind]=='I' && last<i &&(mp.find(i)==mp.end() || mp[i]==0))           // when element found is 'I'
            {
                mp[i]++;                                                                  // updating the map so that this integer will not be used anymore
                
                if( fun(ind+1,mp,t,ans,pattern) )
                    return true;
                
                mp[i]--;                                                                  // again decrementing the count to zero so that it can be used later 
            }
            else if(pattern[ind]=='D' && last>i && (mp.find(i)==mp.end() || mp[i]==0) )    // when element found is 'D'
            {
                mp[i]++;
                
                if( fun(ind+1,mp,t,ans,pattern) )
                    return true;
                
                mp[i]--;
            }   
    }
    
    return false;
}


string smallestNumber(string pattern) {
    
    string ans;
    map<int,int> mp;                                            // map is used for checking if given integer is available to use or already used
    
    for(int i=1;i<=9;i++)
    {
        string temp;
        temp += (i+'0');                                        // we are adding element one by one and passing it to fun 
        mp[i]++;                             
        
        if(fun(0,mp,temp,ans,pattern)                           // answer string size is n+1 so we are passing index = 0
            return ans;                   
      
        mp[i]--;
    }
    
    return ans;
}