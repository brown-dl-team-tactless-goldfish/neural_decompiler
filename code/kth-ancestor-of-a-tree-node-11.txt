class TreeAncestor {
private:
int n_;
vector<vector<int>> mult_;
int get_msb_count(int k){
	int i = 0;
	while(k != 0){
		i++;
		k >>= 1;
	}
	return (--i);
}
public:
	TreeAncestor(int n, vector<int>& parent) {
		n_ = n;
		mult_ = vector<vector<int>>(n_, vector<int>());
		for(int i = 0; i < n; ++i){
			mult_[i].push_back(parent[i]);
		}
	}
	// recursively making of sparse table  as and when required.

	int getJumpAncestor(int node, int i){
		if(node == -1){
			return -1;
		}
		if(mult_[node].size() > i){
			return mult_[node][i];
		}
		else{
			while(mult_[node].size() <= i){
				if(mult_[node].back() == -1){
					return -1;
				}

				mult_[node].push_back(getJumpAncestor(mult_[node].back(), (mult_[node].size() - 1)));
			}
			return mult_[node][i];
		}
	}
	int getKthAncestor(int node, int k) {
		if(node == -1){
			return -1;
		}
		if(k == 0){
			return node;
		}
		int msb = get_msb_count(k);
		return getKthAncestor(getJumpAncestor(node, msb), k - (1 << msb));
	}
};