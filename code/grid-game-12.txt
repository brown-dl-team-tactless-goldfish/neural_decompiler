//neetcode video
//here the secondrobot can take either remaining top elements or remaining bottom elements only
//so we'll keep prefix of top and bottom

class Solution {
public:
     
    long long gridGame(vector<vector<int>>& grid) 
    {
        int n=grid[0].size();
      vector<long long>ps1(n,0);
      vector<long long>ps2(n,0);
      ps1[0]=grid[0][0];
      ps2[0]=grid[1][0];
      for (int i=1;i<n;i++)
      {
         ps1[i]=ps1[i-1]+(long long)grid[0][i];
         ps2[i]=ps2[i-1]+(long long)grid[1][i];
      }
      long long ans=LLONG_MAX;
      for (int i=0;i<n;i++)
      {
         long long top=ps1[n-1]-ps1[i];
         long long bottom=0;
         if (i>0) bottom=ps2[i-1];
         long long secondRobot=0;
         if (top>bottom) secondRobot=top;
         else secondRobot=bottom;
         if (ans>secondRobot) ans=secondRobot;
      }
      return ans;

    }
};