class Solution {
public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> pref(n + 1);
        for (int i = 1; i < n + 1; ++i) {
            pref[i] = pref[i - 1] + nums[i - 1];
        }
        vector<vector<int>> dp(n + 1, vector<int>(4));
        dp[k][1] = pref[k];
        vector<vector<bool>> prev(n + 1, vector<bool>(4));
        prev[k][1] = true;
        for (int i = k + 1; i < n + 1; ++i) {
            if (pref[i] - pref[i - k] > dp[i - 1][1]) {
                prev[i][1] = true;
            }
            dp[i][1] = max(dp[i - 1][1], pref[i] - pref[i - k]);
            if (pref[i] - pref[i - k] + dp[i - k][1] > dp[i - 1][2]) {
                prev[i][2] = true;
            }
            dp[i][2] = max(dp[i - 1][2], pref[i] - pref[i - k] + dp[i - k][1]);
            if (pref[i] - pref[i - k] + dp[i - k][2] > dp[i - 1][3]){
                prev[i][3] = true;
            }
            dp[i][3] = max(dp[i - 1][3], pref[i] - pref[i - k] + dp[i - k][2]);
        }
        vector<int> ans;
        int last = n, cur = 3;
        while (last > 0 && cur >= 1) {
            if (prev[last][cur]) {
                ans.push_back(last - k);
                last -= k;
                cur--;
            } else {
                last--;
            }
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};