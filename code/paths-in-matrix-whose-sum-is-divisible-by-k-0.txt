class Solution {
    const int mod = 1e9+7;
public:
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int m = grid.size(), n = grid[0].size();
        
        auto dp = new int*[n];
        auto dptmp = new int*[n];
        for (int i = 0; i < n; i++) {
            dp[i] = new int[k];
            fill_n(dp[i], k, 0);
            dptmp[i] = new int[k];
            fill_n(dptmp[i], k, 0);
        }
        
        dptmp[0][grid[0][0]%k] = 1;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int prevR = 0; prevR < k; prevR++) {
                    int curR = (prevR+grid[i][j])%k;  // iterate all prevR to enumerate all curR
                    if (i) dptmp[j][curR] = (dptmp[j][r]+dp[j][prevR])%mod;
                    if (j) dptmp[j][curR] = (dptmp[j][r]+dptmp[j-1][prevR])%mod;
                }
            }
            swap(dp, dptmp);
            for (int c = 0; c < n; c++) {
                fill_n(dptmp[c], k, 0);
            }
        }
        
        return dp[n-1][0];
    }
};