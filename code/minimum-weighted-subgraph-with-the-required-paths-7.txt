class Solution {
public:
    
    // Dijkstra algo to get all node's minimum distance from start node
    void Dijksrta(int start, vector<vector<pair<int,int>>>&graph, vector<long long>& dist)
    {
        dist[start] = 0;
        priority_queue<pair<long long, int>,vector<pair<long long, int>>,greater<pair<long long, int>>>pQ;
        pQ.push({dist[start],start});
        
        long long cost;
        int node;
        while(!pQ.empty())
        {
            cost = pQ.top().first;
            node = pQ.top().second;
            pQ.pop();
            
            if(dist[node]<cost)continue;
            
            for(int i=0;i<graph[node].size();i++)
            {
                if(dist[graph[node][i].first]>(long long)graph[node][i].second+cost)
                {
                    dist[graph[node][i].first] = (long long)graph[node][i].second+cost;
                    pQ.push({dist[graph[node][i].first],graph[node][i].first});
                }
            }
        }
    }
    
    long long minimumWeight(int n, vector<vector<int>>& edges, int src1, int src2, int dest) {
        
        // distance vector of both source and destiantion
        vector<long long>ds1(n,LLONG_MAX);
        vector<long long>ds2(n,LLONG_MAX);
        vector<long long>dd(n,LLONG_MAX);
        
        // create graph and reverse graph
        vector<vector<pair<int,int>>>graph(n);
        vector<vector<pair<int,int>>>revgraph(n);
        for(int i=0;i<edges.size();i++)
        {
            graph[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            revgraph[edges[i][1]].push_back({edges[i][0],edges[i][2]});            
        }

        // run Dijkstra for both source and destination
        Dijksrta(src1,graph,ds1);
        Dijksrta(src2,graph,ds2);
        Dijksrta(dest,revgraph,dd);
        
        // return -1 if any source to destination is not possible
        if(ds1[dest]==LLONG_MAX || ds2[dest]==LLONG_MAX) return -1;
        
        // loop through all node's distance from both source and destination
        long long res = LLONG_MAX;
        for(int i=0;i<n;i++)
        {
            if(ds1[i]==LLONG_MAX || ds2[i]==LLONG_MAX || dd[i]==LLONG_MAX)continue;
            res = min(res,ds1[i]+ds2[i]+dd[i]);
        }
        
        return res;
    }
};