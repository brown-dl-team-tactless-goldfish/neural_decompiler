class Solution:
    def largestPalindromic(self, num: str) -> str:
        count = [0] * 10

        for char in num:
            count[int(char)] += 1

        even = [0] * 10
        odd = [0] * 10

        for i, c in enumerate(count): #build even and odd occurances in palindrome
            even[i] += c // 2
            odd[i] += c % 2

        outer = ""; mid = "" #some people may not like this but pythons is less intuitive

        for i in range(9, 0, -1): #build the even outside
            outer = outer + str(i) * even[i]
        if len(outer) > 0:
            outer = outer + str(0) * even[0]

        for i in range(9, -1, -1): #build the odd inside, if it exists
            if odd[i]:
                mid = mid + str(i) #creamy creamy nuget
                break

        #pita edge case
        if len(outer) == 0 and len(mid) == 0 and even[0] > 0:
            return "0"

        return outer + mid + outer[::-1]

        
        

        