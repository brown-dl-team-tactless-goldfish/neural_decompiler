/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


int get_size(struct ListNode *l1){
    
    int num = 0;
    
    while(l1 != NULL){
        num++;
        l1 = l1->next;
    }
    
    return num;
}


struct ListNode* add_same(struct ListNode* l1, struct ListNode* l2, int* carry){
    
    if(l1 == NULL) return NULL;
    
    struct ListNode *result = malloc(sizeof(struct ListNode));
    
    result->next = add_same(l1->next, l2->next, carry);
    
    int sum = l1->val + l2->val + *carry;
    
    result->val = sum%10;
    
    *carry = sum/10;
    
    return result;
    
}

struct ListNode* add_remain(struct ListNode* l1, struct ListNode* cur, int* carry){
    
    if(l1 != cur){
    
        struct ListNode *new_node = malloc(sizeof(struct ListNode));
        
        new_node->next = add_remain(l1->next, cur, carry);
        
        
        int sum = l1->val + *carry;
        
        new_node->val = sum % 10;
        
        *carry = sum/10;
        
        return new_node;
    }
    else return NULL;
}
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    
    int size_1 = get_size(l1);
    int size_2 = get_size(l2);
    
    if(l1 == NULL) return l2;
    if(l2 == NULL) return l1;
    
    int diff = abs(size_1 - size_2);
    
    //call normal 
    int carry = 0;
    struct ListNode* result = NULL;
    if (!diff)
    {
        result = add_same(l1, l2, &carry);
        
    }
    
    else{
        
        //move the list acccordingly
        if(size_1 < size_2){
            struct ListNode *temp = l2;
            l2 = l1;
            l1 = temp;
        }
        
        //now l1 will be the longer list always
        struct ListNode *cur = l1;
        for(int i = 0; i < diff; i++) cur = cur->next;
        
        result = add_same(cur, l2, &carry);
        
        struct ListNode *temp = NULL;
        struct ListNode *trav = NULL;
        temp = add_remain(l1, cur, &carry);
        trav = temp;
        while(temp!= NULL && temp->next != NULL) temp = temp->next;
        temp->next = result;
        result = trav;
    }
    
    if(carry){
        // printf("carry %d\n", carry);
        struct ListNode* leading = malloc(sizeof(struct ListNode));
        leading->next = result;
        leading->val = carry;
        result = leading;
    }
    return result;
}