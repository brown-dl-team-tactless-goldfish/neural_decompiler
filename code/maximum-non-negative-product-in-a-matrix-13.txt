class Solution {
public:
    int m,n ;
    int maxProductPath(vector<vector<int>>& grid) {
         n = grid.size() ;
         m = grid[0].size() ;
        vector<vector<pair<long long,long long>>> dp(n,vector<pair<long long,long long>>(m)) ;        
        dp[0][0] = {grid[0][0],grid[0][0]} ;
        for (int i=1;i<m;i++)  dp[0][i] = {dp[0][i-1].first*grid[0][i],dp[0][i-1].second*grid[0][i]};
        for (int i=1;i<n;i++) dp[i][0] = {dp[i-1][0].first*grid[i][0],dp[i-1][0].second*grid[i][0]} ;
        for (int i=1;i<n;i++){
            for (int j=1;j<m;j++){
                dp[i][j].first = grid[i][j]*min(min(dp[i-1][j].first,dp[i][j-1].first),min(dp[i-1][j].second,dp[i][j-1].second)) ;
                dp[i][j].second = grid[i][j]*max(max(dp[i-1][j].first,dp[i][j-1].first),max(dp[i-1][j].second,dp[i][j-1].second)) ;
            }
        }
        if (dp[n-1][m-1].second<0 &&dp[n-1][m-1].first<0 ) return -1 ;
        return max(dp[n-1][m-1].second,dp[n-1][m-1].first)%1000000007 ;
    }
};