class Solution {
public:
    int countPyramids(vector<vector>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int count = 0;

        // count inverted
        vector<vector<int>> dp = grid;
        for(int i=1; i<m; ++i)
            for(int j=1; j<n-1; ++j)
                if(dp[i][j]) {
                    dp[i][j] += min(dp[i-1][j], min(dp[i-1][j-1], dp[i-1][j+1]));
                    count += dp[i][j] - 1;
                }
    
        // count normal
	    dp = grid;
        for(int i=m-2; i>=0; --i)
            for(int j=1; j<n-1; ++j)
                if(dp[i][j]) {
                    dp[i][j] += min(dp[i+1][j], min(dp[i+1][j-1], dp[i+1][j+1]));
                    count += dp[i][j] - 1;
                }
    
        return count;
    }
};