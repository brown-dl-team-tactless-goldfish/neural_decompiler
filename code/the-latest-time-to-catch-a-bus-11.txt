class Solution {
public:
    int latestTimeCatchTheBus(vector<int>& b, vector<int>& p, int capacity) {
        sort(b.begin(), b.end());
        sort(p.begin(), p.end());
        int c = capacity;
        int pi = 0;
        int res = p.front() - 1;
        // Consider each bus, one by one
        for (int bi = 0; bi < b.size(); bi++) {
            // If we have passengers waiting who have arrived in time for this
            // bus, allow in as much of them as possible
            while (c && pi < p.size() && p[pi] <= b[bi]) {
                // One (more) passenger gets on this bus
                c--;
                // If we can squeeze in between two passengers
                if (pi > 0 && p[pi] - p[pi - 1] > 1)
                    res = p[pi] - 1;
                // Or, if we have room before the first passenger
                else if (pi == 0 && p[pi] > 0)
                    res = p[pi] - 1;
                pi++;
            }
            // If nobody got on this bus at all, then we definitely can
            // get on this bus
            if (c == capacity)
                res = b[bi];
            // If there are seats available on this bus, and if we can get in 
            // after the last passenger who got on this bus
            else if (c && p[pi - 1] != b[bi])
                res = b[bi];
            // Reset capacity
            c = capacity;
        }
        return res;
    }
};