/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode *helper(struct ListNode *head, int k, int left) {
    int count=0;
    struct ListNode *next;
    struct ListNode *prev=NULL;
    struct ListNode *curr = head;
    if(left < k)
        return head;
    
    
    while(curr != NULL && count < k) {
        count++;
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    
    head->next = helper(next,k,left-k);
    return prev;
    
}

struct ListNode* reverseKGroup(struct ListNode* head, int k){
    
    int count = 0;
    struct ListNode *curr;
    curr = head;
    
    while(curr!=NULL) {
        count++;
        curr = curr->next;
    }
    
    //base condition
    if(count == 0 || count < k)
            return head;
    
    else
        return helper(head,k,count);
}