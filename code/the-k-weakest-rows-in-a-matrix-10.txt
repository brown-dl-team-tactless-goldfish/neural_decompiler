typedef struct
{
    int strength;
    int idx;
} Entry_t;

int cmp(const void* a, const void* b)
{
    const Entry_t e1 = *(const Entry_t*)a;
    const Entry_t e2 = *(const Entry_t*)b;
    
    if (e1.strength == e2.strength)
    {
        return e1.idx - e2.idx;
    }
    
    return e1.strength - e2.strength;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* kWeakestRows(int** mat, int matSize, int* matColSize, int k, int* returnSize){
    Entry_t* table = malloc(sizeof(Entry_t) * matSize);
    
    for (int i = 0; i < matSize; i++)
    {
        int j = 0;
        int sum = 0;
        while (j < matColSize[i] && mat[i][j])
        {
            sum++;
            j++;
        }
        table[i].strength = sum;
        table[i].idx = i;
    }
       
    qsort(table, matSize, sizeof(Entry_t), cmp);
    
    // for (int i = 0; i < matSize; i++)
    // {
    //     printf("%d, %d\n", table[i].strength, table[i].idx);
    // }    
    
    int* ans = malloc(sizeof(int) * k);
    *returnSize = k;
    
    for (int i = 0; i < k; i++)
    {
        ans[i] = table[i].idx;
    }
    
    free(table);
    
    return ans;
}