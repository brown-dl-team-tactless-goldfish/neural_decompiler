class Solution {
public:
    int maxStudents(vector<vector<char>>& seats) {
        if(seats.empty() || seats[0].empty())return 0;
        int m = seats.size(), n = seats[0].size();
        map<string, int>memo;
        string str = "";
        for(auto a:seats){
            for(auto aa:a)str+=aa;
        }
        return dfs(str, memo, m, n);
    }
    
    int dfs(string& str, map<string, int>&memo, int m, int n){
        if(memo.count(str))return memo[str];
        string res = str;
        int cnt = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(str[i*n + j] == '.'){
                    res[i*n + j] = 'x';
                    cnt = max(cnt, dfs(res, memo, m, n));
                    
                    if(j+1 < n){
                        if(res[i*n + j+1] == '.')res[i*n + j+1] = 'x';
                        if(i+1 < m && res[(i+1)*n + j+1] == '.')res[(i+1)*n + j+1] = 'x';
                    }
                    if(j-1 >= 0){
                        if(res[i*n + j-1] == '.')res[i*n + j-1] = 'x';
                        if(i+1 < m && res[(i+1)*n + j-1] == '.')res[(i+1)*n + j-1] = 'x';
                    }
                    cnt = max(cnt, 1+dfs(res, memo, m, n));
                }
            }
        }
        memo[str] = cnt;
        return cnt;
    }
};