class Solution {

public:
    int maximumWhiteTiles(vector<vector<int>>& tiles, int carpetLen) {
        sort(tiles.begin(), tiles.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] < b[0];} );
        
        int ret= 0 ;
        int n = tiles.size() ;
        vector<int>preSum(n+1, 0) ;
        
        for(int i = 1; i <= n; i++)
            preSum[i] = preSum[i-1] + tiles[i-1][1] - tiles[i-1][0] + 1 ;
        
        int left = 0, right = 0 ;
        while(left < n && right < n){
            int end = tiles[left][0] +  carpetLen - 1;
            while(right < n && tiles[right][1] <= end)
                right++ ;

            int count = preSum[right] - preSum[left] ;
            
            if(right < n && tiles[right][0] <= end)
                count += end -tiles[right][0] + 1 ;
            ret = max(ret, count) ;
            left++ ;
        }
        return ret ;
    }
};