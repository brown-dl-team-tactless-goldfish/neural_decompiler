class Solution {
public:
    long long dp[1001][1001];
    int mod = 1000000007;
    int kInversePairs(int N, int K) {
        memset(dp,0,sizeof(dp));
        for(int n=0; n<=N; n++) dp[n][0] = 1;
        for(int n=1; n<=N; n++) {
            for(int k=1; k<=K; k++) {
                 // take all k values from previous size of elements & remove k-n values , additional values when they exist 
                 dp[n][k] = (dp[n-1][k] + dp[n][k-1] - (k-n>=0 ? dp[n-1][k-n] : 0) + mod)%mod;
            }
        }
        return dp[N][K] % mod;
    }
};


/*

(n,k) 

i0  , (i1 - 1 == i0) , 


5 , 4 , 1 2 3 = 3 + 4

4 , 5  , 1 3 2  = 3 + 4 

3 5 4 , 1 2 

*/
