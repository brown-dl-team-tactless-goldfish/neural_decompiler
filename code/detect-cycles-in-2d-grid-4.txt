class Solution
{
public:
    bool containsCycle(vector<vector<char>> &grid)
    {
        int m = grid.size(), n = grid[0].size(), i, j, k;
        bool ans = false;
        queue<vector<int>> q;
        vector<int> tmp;
        char c;
        for (i = 0; i < m; i++)
        {
            for (j = 0; j < n; j++)
            {

                if (grid[i][j] != '#')
                {
                    // cout<<i<<" "<<j<<endl;
                    q.push({i, j});
                    c = grid[i][j];
                    while (!q.empty())
                    {
                        k = q.size();
                        while (k--)
                        {
                            tmp = q.front();
                            if (grid[tmp[0]][tmp[1]] == '#')
                            {
                                ans = true;
                            }
                            grid[tmp[0]][tmp[1]] = '#';
                            q.pop();
                            if (tmp[0] + 1 < m && grid[tmp[0] + 1][tmp[1]] == c)
                            {
                                q.push({tmp[0] + 1, tmp[1]});
                            }
                            if (tmp[0] - 1 >= 0 && grid[tmp[0] - 1][tmp[1]] == c)
                            {
                                q.push({tmp[0] - 1, tmp[1]});
                            }
                            if (tmp[1] + 1 < n && grid[tmp[0]][tmp[1] + 1] == c)
                            {
                                q.push({tmp[0], tmp[1] + 1});
                            }
                            if (tmp[1] - 1 >= 0 && grid[tmp[0]][tmp[1] - 1] == c)
                            {
                                q.push({tmp[0], tmp[1] - 1});
                            }
                        }
                    }
                }
            }
        }
        return ans;
    }
};