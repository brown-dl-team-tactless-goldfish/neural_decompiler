class Solution {
public:
    vector<int> topStudents(vector<string>& P, vector<string>& N, vector<string>& R, vector<int>& S, int k) {
        unordered_set<string> pos(begin(P), end(P)), neg(begin(N), end(N));
        priority_queue<pair<int, int>> pq;
        for(int i = 0; i < R.size(); i++) {
            int v = 0;
            for(int j = 0, k = 0; j <= R[i].size(); j++) {
                if(j == R[i].size() || R[i][j] == ' ') {
                    string ss = R[i].substr(k, j-k + (j == R[i].size() ? 1 : 0));
                    if(pos.find(ss) != pos.end()) v += 3;
                    else if(neg.find(ss) != neg.end()) v += -1;
                    k = j+1;
                }
            }
            pq.push({-v, S[i]});
            if(pq.size() > k) pq.pop();
        }

        vector<int> res(k);
        while(!pq.empty()) res[--k] = pq.top().second, pq.pop();
        return res;
    }
};