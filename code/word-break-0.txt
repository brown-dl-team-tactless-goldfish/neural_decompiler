bool process(char * s, char ** wordDict, int wordDictSize, int* lenWordDict, int len){
    bool ans =  false;
    if(len == 0){
        return true;
    }
    for(int i = 0; i < wordDictSize; i++){
        if(strncmp(s, wordDict[i], lenWordDict[i]) == 0){
            if(process(&s[lenWordDict[i]], wordDict, wordDictSize, lenWordDict, len-lenWordDict[i])){
                ans = true;
                break;
            }
        }        
    }
    return ans;    
}

static int stringCompare(const void *p1, const void *p2)
{
   // return strcmp(* (char * const *) p1, * (char * const *) p2);  //都可
  //   return strcmp(* (char **) p1, * (char **) p2);                 //都可    
    return strlen(* (char **) p1)-strlen(* (char **) p2);
}


bool wordBreak(char * s, char ** wordDict, int wordDictSize){
    int i, j;
    int lenS = strlen(s);
    bool* flag = (bool*)calloc((lenS+1) , sizeof(bool));
    
    qsort(wordDict, wordDictSize, sizeof(char *), stringCompare); 
    int* wordDictLen = (int*)malloc(wordDictSize * sizeof(int));
    for(i = 0; i < wordDictSize; i++){
        wordDictLen[i] = strlen(wordDict[i]);   
    }
    int size;
    int begin;

    flag[0] = true;
    for(i = 1; i <= lenS; i++){
        for(j = 0; j < wordDictSize; j++){
            if(wordDictLen[j] > i)
                break;
            else{
              begin = i-wordDictLen[j];
              if(strncmp(wordDict[j], &s[begin], wordDictLen[j]) == 0 ){
                  if(flag[begin] == true){
                    flag[i] = true;
                    break;
                  }
              }
            }
        }    
    }
    bool ans = flag[lenS];
    free(flag);
    free(wordDictLen);
    return ans;
    
}