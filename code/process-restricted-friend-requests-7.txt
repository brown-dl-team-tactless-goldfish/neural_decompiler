public class Solution {
    public bool[] FriendRequests(int n, int[][] rests, int[][] reqs) {
        UnionFind uf = new UnionFind(n);
        
        bool[] r = new bool[reqs.Length];
        
        for (int i = 0; i < reqs.Length; ++i) {
            r[i] = true;
            int[] req = reqs[i];
            int pf = uf.Find(req[0]);
            int ps = uf.Find(req[1]);
            
            if (pf != ps) {
                foreach (int[] rest in rests) {
                    int px = uf.Find(rest[0]);
                    int py = uf.Find(rest[1]);
                    if ((pf == px && ps == py) || (pf == py && ps == px)) {
                        r[i] = false;
                        break;
                    }
                }
            }
            
            if (r[i]) {
                uf.Union(req[0], req[1]);
            }
        }
        
        return r;
    }
}

public class UnionFind {
    int[] Parents;
    
    public UnionFind(int n) {
        Parents = new int[n];
        for (int i = 0; i < n; ++i) Parents[i] = i;
    }
    
    public void Union(int u, int v) {
        int pu = Find(u);
        int pv = Find(v);
        
        Parents[pu] = pv;
    }
    
    public int Find(int u) {
        while (u != Parents[u]) {
            Parents[u] = Parents[Parents[u]];
            u = Parents[u];
        }
        
        return u;
    }
    
    public bool IsConnected(int u, int v) {
        return Find(u) == Find(v);
    }
    
    public void ResetParent(int u) {
        Parents[u] = u;
    }
}