class Solution {
    int dp[256][9]{};
    vector<int> c;
    
public:
    
    int aux(int bits, int k) {
        if(dp[bits][k]) return dp[bits][k];
        if(k == 1) {
            int res = 0;
            for(int i = 0; i < 8; i++) if((1 << i) & bits) res += c[i];
            return dp[bits][k] = res;
        } else if(__builtin_popcount(bits) == k) {
            int res = 0;
            for(int i = 0; i < 8; i++) if((1 << i) & bits) res = max(res, c[i]);
            return dp[bits][k] = res;
        } else {
            int res = INT_MAX;
            for(int x = bits & (bits - 1); x; x = bits & (x - 1)) {
                if(__builtin_popcount(x) < k - 1) continue;
                res = min(res, max(aux(bits - x, 1), aux(x, k - 1)));
            }
            return dp[bits][k] = res;
        }
    }
    
    int distributeCookies(vector<int>& cookies, int k) {
        c = cookies;
        return aux((1 << c.size()) - 1, k);
    }
};