class Solution {
public:
    
    int child[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
    int row;
    int col;
    
    void dfs(int x, int y, vector<vector<int>>&land, vector<int>&t)
    {
        // mark cell of the farmland as forest
        land[x][y] = 0;
        
        // get the max row and col
        if(x > t[0])t[0]=x;
        if(y > t[1])t[1]=y;
        
        int px,py;
        for(int i=0;i<4;i++)
        {
            px = x + child[i][0];
            py = y + child[i][1];
            
            // call DFS for the child nodes
            if(px>=0 && px<row && py>=0 && py<col && land[px][py])
            {
                dfs(px,py,land,t);
            }
        }
    }
    
    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        
        vector<vector<int>>res;
        row = land.size();
        col = land[0].size();
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                // call DFS for a  farmland
                if(land[i][j])
                {
                    vector<int>t =  {i,j};
                    dfs(i,j,land,t);
                    res.push_back({i,j,t[0],t[1]});
                }
            }
        }
        
        return res;
    }
};