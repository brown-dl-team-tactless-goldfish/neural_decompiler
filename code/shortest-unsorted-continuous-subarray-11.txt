typedef struct {
    int min_val;
    int max_val;
} neg_slope_extremum_t;

int findUnsortedSubarray(int *nums, int numsSize) {
    if(numsSize < 2) return 0;

    neg_slope_extremum_t slope_neg = {
        .min_val = INT32_MAX,
        .max_val = INT32_MIN,
    };

    /* collect the slope < 0, max and min val */
    for(int i=1;i<numsSize;i++) {
        if(nums[i] < nums[i-1]) {
            if(nums[i] < slope_neg.min_val) slope_neg.min_val = nums[i];
            if(nums[i-1] > slope_neg.max_val) slope_neg.max_val = nums[i-1];
        }
    }

    /* If there is no slope < 0, return 0 */
    if(slope_neg.max_val == INT32_MIN && slope_neg.min_val == INT32_MAX) return 0;

    /* Find the left and right index */
    int i_l = 0;
    int i_r = 0;
    for(int i=0;i<numsSize;i++) {
        if(nums[i] >= slope_neg.min_val) {
            i_l = i;
            break;
        }
    }
    for(int i=numsSize-1;i>=0;i--) {
        if(nums[i] <= slope_neg.max_val) {
            i_r = i;
            break;
        }
    }
    
    /* Handle duplicated value */
    while(true) {
        if(nums[i_r] == slope_neg.max_val) {
            i_r--;
        }
        else if(nums[i_l] == slope_neg.min_val) {
            i_l++;
        } 
        else {
            break;
        }
    }
    
    return i_r - i_l + 1;
}
