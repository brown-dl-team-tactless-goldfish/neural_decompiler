class DetectSquares {
public:
    unordered_map<int,int> map;
    DetectSquares() {
        
    }
    
    void add(vector<int> point) {
        map[point[0] * 10000 + point[1]]++;
    }
    
    int count(vector<int> point) {
        int ret = 0;
        
        int x = point[0];
        int y = point[1];
        
        for(int i = 1; i <= 1000; i++) {
            if(x - i >= 0  && y - i >= 0 && 
               map.count((x - i)*10000 + y) && map.count((x - i)*10000 + y - i) && map.count(x*10000 + y - i)){
                ret += map[(x - i)*10000 + y] * map[(x - i)*10000 + y - i] * map[x*10000 + y - i];
            }
            
            if(x - i >= 0 && y +  i <= 1000 &&
               map.count((x - i)*10000 + y) && map.count((x - i)*10000 + y + i) && map.count(x*10000 + y + i)){
                ret += map[(x - i)*10000 + y] * map[(x - i)*10000 + y + i] * map[x*10000 + y + i];
            }
            
            if(x + i <= 1000 && y + i <= 1000 &&
               map.count((x + i)*10000 + y) && map.count((x + i)*10000 + y + i) && map.count(x*10000 + y + i)){
                ret += map[(x + i)*10000 + y] * map[(x + i)*10000 + y + i] * map[x*10000 + y + i];
            }
            
            if(x + i <= 1000 && y - i >= 0  && 
               map.count((x + i)*10000 + y) && map.count((x + i)*10000 + y - i) && map.count(x*10000 + y - i)){
                ret += map[(x + i)*10000 + y] * map[(x + i)*10000 + y - i] * map[x*10000 + y - i];
            }
            
        }
        
        return ret;
    }
};