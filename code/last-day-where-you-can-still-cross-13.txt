class Solution {
public:
    map<int, int> arr;
    int hash(int i, int j) {
        return i * 30000 + j;
    }
    int find(int h) {
        int f = arr[h];
        if(f == h) return h;
        if(f == 0) return arr[h] = h;
        return arr[h] = find(arr[h]);
    }
    bool combine(int a, int b) {
        a = find(a); b = find(b);
        if(a != b) {
            arr[a] = b;
            return true;
        }
        return false;
    }
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        for(int i = 1; i <= row; i++) {
            combine(hash(i - 1, 0), hash(i, 0));   //build left border
            combine(hash(i - 1, col + 1), hash(i, col + 1));  //build right border
        }
        int dx[8] = {0, 0, 1, -1, 1, -1, 1, -1};
        int dy[8] = {1, -1, 0, 0, 1, -1, -1, 1};
        int k = 0;
        for(auto &cell : cells) {
            int x = cell[0], y = cell[1];
            int h = hash(x, y);
            find(h);
            for(int i = 0; i < 8; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                int h1 = hash(nx, ny);
                if(arr.count(h1)) {
                    combine(h1, h);
                }
            }
            if(find(hash(1, 0)) == find(hash(1, col + 1))) return k;
            k++;
        }
        return cells.size();
    }
};