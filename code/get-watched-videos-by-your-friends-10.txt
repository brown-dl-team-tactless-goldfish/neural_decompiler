using Person = System.Int32;
using Video = System.String;
public class Solution {
    public IList<string> WatchedVideosByFriends(IList<IList<Video>> watchedVideos, Person[][] friends, Person id, int level) {
        IEnumerable<Person> GetFriends(Person p) => friends[p];
        IEnumerable<Video> GetVideos(Person p) => watchedVideos[p];
        IEnumerable<Person> GetFriendsAtLevel(Person p, int levelToGet)
        {
            HashSet<Person> seen = new HashSet<Person>();

            var bfs = new Queue<(Person, int)>(new[] { (p, 0) });
            
            List<Person> ret = new List<Person>();
            while(bfs.Any())
            {
                var (currentPerson, currentLevel) = bfs.Dequeue();
                
                if (seen.Contains(currentPerson) || currentLevel > levelToGet) { continue; }
                
                seen.Add(currentPerson);
                
                if(currentLevel == levelToGet)
                {
                    ret.Add(currentPerson);
                }
                else
                {
                    foreach(var friend in GetFriends(currentPerson))
                    {
                        bfs.Enqueue((friend, currentLevel+1));
                    }
                }
            }
            
            return ret;
        }
        
        var movies = GetFriendsAtLevel(id, level).SelectMany(GetVideos);
        var histogram = movies.ToLookup(x => x);
        //order by count then alphabetically.
        return histogram.OrderBy(x => x.Count()).ThenBy(x => x.Key).Select(x => x.Key).ToList();
    }
}