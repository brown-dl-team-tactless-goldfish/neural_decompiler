class Solution {
public:
    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        int n = numCourses ;
        vector<vector<int>>graph(n) ;
        vector<int>inDegree(n) ;
        vector<unordered_set<int>>preClass(n) ;
        
        for(auto& p : prerequisites){
            graph[p[0]].push_back(p[1]) ;
            inDegree[p[1]]++ ;
            preClass[p[1]].insert(p[0]) ;
        }
        queue<int>q ;
        for(int i = 0; i < n; i++){
            if(inDegree[i] == 0)
                q.push(i) ;
        }
        
        while(!q.empty()){
            int cur = q.front() ;
            q.pop() ;
            for(auto& next : graph[cur]){
                for(auto& c : preClass[cur]){
                    preClass[next].insert(c) ;
                }
                inDegree[next]-- ;
                if(inDegree[next] == 0)
                    q.push(next) ;
            }
        }
        
        vector<bool>ret(queries.size()) ;
        for(int i = 0; i < queries.size(); i++){
            ret[i] = preClass[queries[i][1]].find(queries[i][0]) != preClass[queries[i][1]].end() ;
        }
        return ret ;
    }
};