public class Solution
{
    public int CountSpecialNumbers(int n)
    {
        if(n < 11){
            return n;
        }
        int[] speed = new int[] { 0, 9, 90, 738, 5274, 32490, 168570, 712890, 2345850, 5611770 };
        int ans = 0; long p = 1;
        List<int> pos = new();
        while (p <= n)
        {
            pos.Add((int)(n % (p * 10) / p));
            p *= 10;
        }
        for (int i = pos.Count - 1; i > 0; --i)
        {
            int cut = 0;
            ISet<int> distint = new HashSet<int>();
            bool flag = false;
            for (int j = i + 1; j < pos.Count; j++)
            {
                if (distint.Contains(pos[j]))
                {
                    flag = true;
                    break;
                }
                distint.Add(pos[j]);
                if (pos[i] > pos[j])
                {
                    cut++;
                }
            }
            if (flag)
            {
                break;
            }
            int c = 10 - pos.Count + i;
            int temp = pos[i] - cut;
            if (i == pos.Count - 1)
            {
                ans += speed[i];
                temp--;
            }
            for (int j = i - 1; c > 1 && j >= 0; j--, c--)
            {
                temp *= c;
            }
            ans += temp;               
        }
        int cuts = 0;
        ISet<int> hs = new HashSet<int>();
        for (int j = 1; j < pos.Count; j++)
        {
            hs.Add(pos[j]);
            if (pos[0] >= pos[j])
            {
                cuts++;
            }
        }
        if (hs.Count == pos.Count - 1)
        {
            ans += pos[0] + 1 - cuts;
        }  
        return ans;
    }
}