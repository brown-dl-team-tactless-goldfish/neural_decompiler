class Solution {
public:
    int minimumTime(vector<vector<int>>& grid) {
        int m = grid.size(), n =grid[0].size();
        
        if(grid[0][1]-grid[0][0] > 1 && grid[1][0]-grid[0][0] > 1) return -1;
        
        vector<vector<int>> time(m,vector<int>(n,INT_MAX));
        time[0][0] = 0;
        
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0,0,0}); 
        
        vector<pair<int,int>> directions{{0,1},{0,-1},{1,0},{-1,0}};
        vector<int> pos;
        
        int i,j,x,y;
        while(!pq.empty()){
            pos = pq.top();
            pq.pop();
            i = pos[1], j = pos[2];
            for(auto& [a,b] : directions){
                x = i+a, y = j+b;
                if(x >= 0 && x < m && y >= 0 && y < n){
				// (time[i][j]%2) == (grid[x][y]%2) T(A) & Grid_val(B) both are even or odd
                    if(grid[x][y] > time[i][j]+1 && 
                       time[x][y] > grid[x][y]+((time[i][j]%2) == (grid[x][y]%2))){
                        time[x][y] = grid[x][y]+((time[i][j]%2) == (grid[x][y]%2));
                        pq.push({time[x][y],x,y});
                    }
                    else if(grid[x][y] <= time[i][j]+1 && time[x][y] > time[i][j]+1){
                        time[x][y] = time[i][j]+1;
                        pq.push({time[x][y],x,y});
                    }
                }
            }
        }
        return time[m-1][n-1];
    }
};