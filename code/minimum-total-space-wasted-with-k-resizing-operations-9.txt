int dp[205][205];
    
    int fnd(int i, int k, vector<int>& nums)
    {
        if(k==0)
        {
            int mx=nums[i],sum=0;
            for(int j=i;j<nums.size();j++)
            {
                mx=max(mx,nums[j]);
                sum+=nums[j];
            }
            
            return (nums.size()-i)*mx-sum;
        }
        
        if(dp[i][k]!=-1)
            return dp[i][k];
        
        int mx=nums[i],sum=0,ans=1e8;
        for(int j=i;j<nums.size()-k;j++)
        {
            mx=max(mx,nums[j]);
            sum+=nums[j];
            ans=min(ans,mx*(j-i+1)-sum+fnd(j+1,k-1,nums));
        }
        
        return dp[i][k]=ans;
    }
    
    int minSpaceWastedKResizing(vector<int>& nums, int k) {
        memset(dp,-1,sizeof(dp));
        return fnd(0,k,nums);
    }