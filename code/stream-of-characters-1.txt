typedef struct {
} StreamChecker;


typedef struct node{
    int cnt;
    struct node *sons[27];
}Node;

Node *root;

Node *newNode(){
    Node *tmp;
    tmp = (Node *)malloc(sizeof(Node));
    tmp->cnt = 0;
    int i;
    for(i=0; i<27; i++)tmp->sons[i] = NULL;
    return tmp;
}
int sz(char *str){
    int ret = 0;
    while(str[ret])ret++;
    return ret;
}
void insert(char *str){
    int len = sz(str);
    Node *node = root;
    int i;
    for(i=len-1; i>=0; i--){
        int index = str[i]-'a';
        if(node->sons[index] == NULL) node->sons[index] = newNode();
        node = node->sons[index];
    }
    node->cnt=1;
}

bool search(char *str, int sze){
    int len = sze;
    Node *node = root;
    int i;
    int curr = 0;
    for(i=len-1; i>=0; i--){
        if(curr == 2002) return false;
        int index = str[i]-'a';
        if(node->sons[index]==NULL) return false;
        node = node->sons[index];
        if(node->cnt!=0) return true;
        curr++;
    }
    if(node->cnt) return true;
    return false;
}

StreamChecker* streamCheckerCreate(char ** words, int wordsSize) {
    StreamChecker *T;
    root = newNode();
    int i;
    for(i = 0; i<wordsSize; i++){
        insert(words[i]);
    }
    return T;
}

char query[40004];
int idx = 0;
bool streamCheckerQuery(StreamChecker* obj, char letter) {
  query[idx]=letter;
  query[++idx]='\0';
  return search(query, idx);
}

void streamCheckerFree(StreamChecker* obj) {
   idx = 0;
}

/**
 * Your StreamChecker struct will be instantiated and called as such:
 * StreamChecker* obj = streamCheckerCreate(words, wordsSize);
 * bool param_1 = streamCheckerQuery(obj, letter);
 
 * streamCheckerFree(obj);
*/