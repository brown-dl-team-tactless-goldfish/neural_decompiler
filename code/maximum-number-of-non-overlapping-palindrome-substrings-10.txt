class Solution {
public:

    vector<vector<bool>> ispal;
    vector<int> dpp;
    int ans = 0;
    
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));
        for(int gap=0; gap<n; gap++){
            for(int i=0,j=gap; j<n; i++,j++){
                if(gap==0)
                    dp[i][j] = true;
                else if(gap==1)
                    dp[i][j] = (s[i]==s[j]);
                else
                    dp[i][j] = (s[i]==s[j]) && dp[i+1][j-1];
            }
        }
        ispal = dp;
        return s.substr(r,c-r+1);
    }
    
    int solve(string& s, int k, int idx){
        if(idx == s.size())
            return 0;
        if(dpp[idx] != -1) return dpp[idx];
        int n = s.size();
        int res = solve(s,k,idx+1);
        for(int i=idx; i<n; ++i){
            if(i-idx+1 >= k && ispal[idx][i])
                res = max(res,solve(s,k,i+1)+1);
            res = max(res,solve(s,k,i+1));
        }
        ans = max(ans,res);
        return dpp[idx] = res;
    }
    
    int maxPalindromes(string s, int k) {
        int n = s.size();
        dpp.resize(n,-1);
        longestPalindrome(s);
        solve(s,k,0);
        return ans;
    }
};