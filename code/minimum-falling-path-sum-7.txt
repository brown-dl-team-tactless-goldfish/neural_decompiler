class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        int n = (int)matrix.size();
        if(n == 0)return 0;
        if(n == 1)return matrix[0][0];
        vector<vector<int>>dist(n+1, vector<int>(n+1, INT_MAX));
        
        for(int i = 0; i<n+1; i++){
            dist[0][i] = 0;
        }
        for(int i = 0; i<n+1; i++)dist[i][0] = 0;
        
        for(int i = 1; i<=n; i++){
            for(int j = 1; j<=n; j++){
                if(j == 1){
                    dist[i][j] = min(dist[i-1][j] + matrix[i-1][j-1], dist[i-1][j+1]+ matrix[i-1][j-1]);
                }else if(j == n){
                    dist[i][j] = min(dist[i-1][j]+ matrix[i-1][j-1], dist[i-1][j-1]+ matrix[i-1][j-1]);
                }else{
                    dist[i][j] = min({dist[i-1][j-1] + matrix[i-1][j-1], dist[i-1][j] + matrix[i-1][j-1], dist[i-1][j+1]+ matrix[i-1][j-1]}) ;
                }
            }
        }
            int mn = INT_MAX;
            for(int i = 1; i<n+1; i++)mn = min(mn, dist[n][i]);
            return mn;
    }
};