class Solution {
public:
    int dp[1001];
    int n;
    int get(int i,int d,vector<int>&arr)
    {
        if(dp[i]!=-1)
            return dp[i];
        int res=1;
        for(int j=i+1;j<=min(i+d,n-1);j++)
        {
            if(arr[j]<arr[i])
                res=max(res,1+get(j,d,arr));
            else
                break;
        }
        for(int j=i-1;j>=max(i-d,0);j--)
        {
            if(arr[j]<arr[i])
                res=max(res,1+get(j,d,arr));
            else
                break;
        }
        return dp[i]=res;
    }
    int maxJumps(vector<int>& arr, int d) 
    {
        n=arr.size();
        memset(dp,-1,sizeof(dp));
        int res=0;
        for(int i=0;i<n;i++)
            res=max(res,get(i,d,arr));
        return res;
    }
};