class Solution {
public:
    int unhappyFriends(int n, vector<vector<int>>& preferences, vector<vector<int>>& pairs) {
        int res = 0, size = preferences.size();
        unordered_map<int, int> pp; // store each person and its pair
        vector<unordered_map<int, int>> prefIndices(size); // store each person and its preferred friends' indices
        
        for (const auto& v : pairs)
        {
            pp[v[0]] = v[1];
            pp[v[1]] = v[0]; // initialize variable pp
        }
        
        for (int i = 0; i < size; ++i)
        {
            auto& p = preferences[i];
            for (int j = 0; j < p.size(); ++j)
            {
                prefIndices[i][p[j]] = j; // initialize variable prefIndices
            }
        }
        
        for (int x = 0; x < n; ++x)
        {
            int y = pp[x], i = 0;
            auto& p = preferences[x];
            for (; i < p.size() && p[i] != y; ++i) // check all u such that x prefers u than y
            {
                int u = p[i], v = pp[u];
                if (prefIndices[u][x] < prefIndices[u][v])
                {
                    break; // there exists u such that u prefers x than its pair v
                }
            }
            
            res += i < p.size() && p[i] != y ? 1 : 0;
        }
        
        return res;
    }
};