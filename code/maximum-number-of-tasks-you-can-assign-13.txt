int maxTaskAssign(vector<int>& tasks, vector<int>& ws, int pills, int strength) {
        sort(tasks.begin(), tasks.end());
        sort(ws.begin(), ws.end());
        
        
        int l = 0, r = min(tasks.size(), ws.size());
        while(l<r){
            int m = (l+r+1)/2, need = 0;
            
            // using multiset bcz it's optimal for removing elements
            // creating set of the strongest 'm' workers in multiset
            multiset<int> ms(ws.end() - m, end(ws)); 
            
            for(int i=m-1; i>=0; --i){
                // iterating over 'm' smallests tasks
                
                auto it = ms.end();
                it--;   // itr of last element of multiset; 
                
                if(*it >= tasks[i]){
                    // without pill, worker strong enough to do task
                    ms.erase(it);
                }
                else{
                    // checking if possible with using magic-pill
                    it = ms.lower_bound(tasks[i]-strength);
                    if(it == end(ms) || ++need > pills)
                        break;
                    ms.erase(it);
                }
                
            }

            if(ms.empty())
                // All 'm' tasks got a worker assigned to them
                l = m;
            else
                r = m-1;
        }
        return l;       
    }