void process(char** board, int m, int n, int row, int col){
    int dirs[8][2] = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};
    if(board[row][col] == 'M' || board[row][col] == 'X')
    {
        board[row][col] = 'X';
        return;
    }    
    
    int bom = 0;
    board[row][col] = 'B';
    for(int i = 0; i < 8; i++){
        int newRow = row + dirs[i][0];
        int newCol = col + dirs[i][1];
        if(newRow >= 0 && newRow < m && newCol >=0 && newCol < n){
            if(board[newRow][newCol] == 'M')
                bom++;
        }
    }
    if(bom > 0){
        board[row][col] = (char)bom + '0';
        return;
    }
    else{
        for(int i = 0; i < 8; i++){
            int newRow = row + dirs[i][0];
            int newCol = col + dirs[i][1];
            if(newRow >= 0 && newRow < m && newCol >=0 && newCol < n){
                if(board[newRow][newCol] == 'E')
                   process(board, m, n, newRow,  newCol);
            }
        }
    }    
}
char** updateBoard(char** board, int boardSize, int* boardColSize, int* click, int clickSize, int* returnSize, int** returnColumnSizes){
    int m = boardSize, n = *boardColSize;
    *returnSize = m ;
    returnColumnSizes[0] = malloc(m * sizeof(int));
    
    for(int i = 0; i < m; i++){
        returnColumnSizes[0][i] = n;
    }
    
    process(board, m, n, click[0], click[1]);
    
    return board;
}