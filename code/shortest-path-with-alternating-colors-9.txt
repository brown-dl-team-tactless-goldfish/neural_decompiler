class Solution {
public:
    
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        if(redEdges.size() == 0 && redEdges.size() ==0 && n ==1 )
            return {0};
        vector < pair <int ,int> > arr[n];
        
        for(int i = 0 ; i < redEdges.size() ; i++){
            
            int x = redEdges[i][0];
            int y = redEdges[i][1];
            arr[x].push_back({y, 1});
        }
        for(int i = 0 ; i < blueEdges.size() ; i++){
            
            int x = blueEdges[i][0];
            int y = blueEdges[i][1];
            arr[x].push_back({y, 0});
        }
        
        queue < vector <int> > q;
        
        vector <int> dis(n, INT_MAX);
        for(auto x: arr[0]) {
            
            q.push({x.first, x.second, 1});
            dis[x.first] = min(dis[x.first], 1);
            
        }
        vector <vector <int> > vis(n, vector <int> (n, 0));
        vis[0][1] = 1;
        vis[0][0] = 1;
        dis[0] = 0;
        while(!q.empty()) {
            
            vector <int>  p = q.front();
            q.pop();
            
            int u = p[0];
            int c = p[1];

            int d = p[2];

            
            
            
            for(int i = 0 ;  i < arr[u].size() ; i++) {
                int c_new = arr[u][i].second;
                int v = arr[u][i].first;
                
            
                if(!vis[v][c_new]  && ( (c_new ^1)  == c))
                {
                    
                    
                    dis[v] = min(dis[v], d + 1);
                    vis[v][c_new] = 1;
                    q.push({v, c_new, d + 1});
                }
            }
        }
        
        for(int i = 0 ; i < n ; i++)
            if(dis[i] == INT_MAX)
                dis[i] = -1;
         
        return dis;
    }
};