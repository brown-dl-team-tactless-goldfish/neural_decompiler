class Solution {
public:
    string rankTeams(vector<string>& votes) {
        int teamSize = votes[0].size();
        unordered_map<char, unordered_map<int, int>> teamVotes;
        for (string& v : votes)
        {
            for (int i = 0; i < v.size(); ++i)
            {
                ++teamVotes[v[i]][i]; // store the number of nominations for each rank for all the teams 
            }
        }
        
        auto comp = [&](char c1, char c2)
        {
            int i = 0;
            while (i < teamSize && teamVotes[c1][i] == teamVotes[c2][i])
            {
                ++i;
            }

            return i >= teamSize ? c1 > c2 : teamVotes[c1][i] < teamVotes[c2][i]; // sort those teams based on their number of nominations from 1 to n (n is the last rank)
        };
            
        priority_queue<char, vector<char>, decltype(comp)> sortedTeams(comp);
        for (char c : votes[0])
        {
            sortedTeams.push(c); // insert each team into the heap
        }
        
        string res(teamSize, ' ');
        for (int i = 0; i < res.size(); ++i)
        {
            res[i] = sortedTeams.top();
            sortedTeams.pop(); // get the result
        }
        
        return res;
    }
};