class Solution {
public:
    int findValidSplit(vector<int>& nums) {
        ios_base::sync_with_stdio(0);
        int n = nums.size(),bnd = 0,i = 0; vector<int>divs; map<int,int>mp;
        while(i < n && i <= bnd){
            int c = 0;
            while(nums[i] % 2 == 0){
                c++;
                nums[i] /= 2;
            }
            if(c){
                if(mp[2] == 0){
                    divs.push_back(2);
                    mp[2]++;
                }
            }
            for(int j = 3; j * j <= nums[i]; j += 2){
                c = 0;
                while(nums[i] % j == 0){
                    c++;
                    nums[i] /= j;
                }
                if(c){
                    if(mp[j] == 0){
                        divs.push_back(j);
                        mp[j]++;
                    }
                }
            }
            if(nums[i] > 1){
                if(mp[nums[i]] == 0){
                    divs.push_back(nums[i]);
                    mp[nums[i]]++;
                }
            }
            int upd = bnd;
            for(auto k : divs){
                for(int j = bnd; j < n; j++){
                    if(nums[j] % k == 0){
                        upd = max(upd,j);
                    }
                }
            }
            bnd = upd;
            i++; divs.clear();
        }
        return i == n ? -1 : bnd;
    }
};