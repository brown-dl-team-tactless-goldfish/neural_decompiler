#define CAR_TYPE_BIG          1
#define CAR_TYPE_MED          2
#define CAR_TYPE_SML          3

#define FIELD_MASK            0x3ff
#define FIELD_WIDTH           10

#define OFS_AVAIL_BIG         0 * FIELD_WIDTH
#define OFS_AVAIL_MED         1 * FIELD_WIDTH
#define OFS_AVAIL_SML         2 * FIELD_WIDTH
#define OFS_OCCUP_BIG         3 * FIELD_WIDTH
#define OFS_OCCUP_MED         4 * FIELD_WIDTH
#define OFS_OCCUP_SML         5 * FIELD_WIDTH

#define GET_FIELD(o, ofs)     (((*(o)) >> (ofs)) & FIELD_MASK)
#define GET_AVAIL(o, tp)      GET_FIELD(o, OFS_AVAIL_##tp)
#define GET_OCCUP(o, tp)      GET_FIELD(o, OFS_OCCUP_##tp)

#define SET_FIELD(o, ofs, n)  ((*(o)) = (((*(o)) & (~(((uint64_t)FIELD_MASK) << (ofs))) \
                                                 | ((((uint64_t)n) & FIELD_MASK) << (ofs)))))
#define SET_AVAIL(o, tp, n)   SET_FIELD(o, OFS_AVAIL_##tp, n)
#define SET_OCCUP(o, tp, n)   SET_FIELD(o, OFS_OCCUP_##tp, n)


typedef uint64_t ParkingSystem;


ParkingSystem *parkingSystemCreate(int big, int medium, int small) {
  ParkingSystem *ps = calloc(1, sizeof(ParkingSystem));
  SET_AVAIL(ps, BIG, (uint64_t)big);
  SET_AVAIL(ps, MED, (uint64_t)medium);
  SET_AVAIL(ps, SML, (uint64_t)small);
  return ps;
}

bool parkingSystemAddCar(ParkingSystem *ps, int carType) {
#define INC_OCCUP_IF_ABLE(tp)                       \
  do {                                              \
    if (carType == CAR_TYPE_##tp) {                 \
      if (GET_OCCUP(ps, tp) < GET_AVAIL(ps, tp)) {  \
        SET_OCCUP(ps, tp, GET_OCCUP(ps, tp) + 1);   \
        return true;                                \
      }                                             \
      return false;                                 \
    }                                               \
  } while (0)

  if (ps) {
    INC_OCCUP_IF_ABLE(BIG);
    INC_OCCUP_IF_ABLE(MED);
    INC_OCCUP_IF_ABLE(SML);
  }

#undef INC_OCCUP_IF_ABLE
  return false;
}

void parkingSystemFree(ParkingSystem *ps) {
  free(ps);
}
