public class Solution 
{
    public IList<int> FindMinHeightTrees(int n, int[][] edges) 
    {
        if(n == 1) return new List<int>{0};
        if(n < 2 || edges.Length == 0)
            return new List<int>();
        
        var graph = new Dictionary<int, HashSet<int>>();
        for(int i = 0; i < n; i++) 
            graph[i] = new HashSet<int>();
        
        foreach(var edge in edges)
        {
            int u = edge[0], v = edge[1];
            graph[u].Add(v);
            graph[v].Add(u);
        }
        
        var leafs = new Queue<int>(graph.Where(d => d.Value.Count == 1).Select(item => item.Key));
        
        while(graph.Count > 2)
        {
            var nextLeafs = new Queue<int>();
            while(leafs.Count != 0)
            {
                int currNode = leafs.Dequeue(), nextNode = graph[currNode].FirstOrDefault();
                graph.Remove(currNode);
                graph[nextNode].Remove(currNode);
                if(graph[nextNode].Count == 1)
                    nextLeafs.Enqueue(nextNode);
            }
            
            leafs = nextLeafs;
        }
        
        return leafs.ToList();
    }
}