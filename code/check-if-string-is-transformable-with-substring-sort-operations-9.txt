class Solution {
public:
    bool isTransformable(string s, string t) {
        int n=s.size();
        queue<int>q[10];   //indexes of every digit 
        for(int i=0;i<n;i++)q[s[i]-'0'].push(i);
        for(int j=0;j<n;j++)
        {
            int k=t[j]-'0';
            if(q[k].empty())return 0;
            for(int i=0;i<k;i++)if(q[i].size() and q[i].front()<q[k].front())return 0;   //if smaller digit has lower index it will come first hence the arrangement isn't possible
            q[k].pop();
        }
        return 1;
    }
};