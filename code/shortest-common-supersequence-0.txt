
int min(int a,int b)
{
	return a>b?b:a;
}
void reverse(char *str)
{
	int len=strlen(str);
	for(int i=0;i<len/2;i++)
	{
		char tmp=str[i];
		str[i]=str[len-1-i];
		str[len-1-i]=tmp;
	}
}
 
char * shortestCommonSupersequence(char * str1, char * str2)
{ 
    int m = strlen(str1); 
    int n = strlen(str2); 
  
    // dp[i][j] contains length of shortest supersequence 
    // for X[0..i-1] and Y[0..j-1] 
    int dp[m + 1][n + 1]; 
  
    // Fill table in bottom up manner 
    for (int i = 0; i <= m; i++) 
    { 
        for (int j = 0; j <= n; j++) 
        { 
            // Below steps follow recurrence relation 
            if(i == 0) 
                dp[i][j] = j; 
            else if(j == 0) 
                dp[i][j] = i; 
            else if(str1[i - 1] == str2[j - 1]) 
                dp[i][j] = 1 + dp[i - 1][j - 1]; 
            else
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]); 
        } 
    } 
  
    // Following code is used to print shortest supersequence 
  
    // dp[m][n] stores the length of the shortest supersequence 
    // of X and Y 
    //int index = dp[m][n]; 
  
    // string to store the shortest supersequence 
    char* str=calloc(4000,1); 
  	int idx=0;
    // Start from the bottom right corner and one by one 
    // push characters in output string 
    int i = m, j = n; 
    while (i > 0 && j > 0) 
    { 
        // If current character in X and Y are same, then 
        // current character is part of shortest supersequence 
        if (str1[i - 1] == str2[j - 1]) 
        { 
            // Put current character in result 
            str[idx++]=str1[i - 1]; 
  
            // reduce values of i, j and index 
            i--, j--; 
        } 
  
        // If current character in X and Y are different 
        else if (dp[i - 1][j] > dp[i][j - 1]) 
        { 
            // Put current character of Y in result 
            str[idx++]=str2[j - 1]; 
  
            // reduce values of j and index 
            j--; 
        } 
        else
        { 
            // Put current character of X in result 
            str[idx++]=str1[i - 1]; 
  
            // reduce values of i and index 
            i--; 
        } 
    } 
  
    // If Y reaches its end, put remaining characters 
    // of X in the result string 
    while (i > 0) 
    { 
        str[idx++]=str1[i - 1]; 
        i--; 
    } 
  
    // If X reaches its end, put remaining characters 
    // of Y in the result string 
    while (j > 0) 
    { 
        str[idx++]=str2[j - 1]; 
        j--; 
    } 

    // reverse the string and return it 
    reverse(str); 

    return str; 
} 