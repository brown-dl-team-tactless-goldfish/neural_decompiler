void findtag(int *tag,int *tag_appear,int *tagsize,int target){
    int i;
    for(i=0;i<*tagsize;i++){
        if(tag[i]==target&&tag_appear[i]>0){
            tag_appear[i]++;
            return;
        }
    }
    
    tag[*tagsize]=target;
    tag_appear[*tagsize]=1;
    (*tagsize)++;
    
}

int findShortestSubArray(int* nums, int numsSize) {
    
    int tag[50000]={0},tag_appear[50000]={0},tagsize=0,i;
    
    for(i=0;i<numsSize;i++){
        findtag(tag,tag_appear,&tagsize,nums[i]);
    }
    
    int max=tag_appear[0];
    int freq_ele=tag[0];
    int t=0;
    
    for(i=1;i<tagsize;i++){
    if(tag_appear[i]>max){
        t=i;
        freq_ele=tag[i];
        max=tag_appear[i];
    }   
    }
      int max_array[50000],max_arraysize=1;
    max_array[0]=tag[t];
    
     for(i=0;i<tagsize;i++){
    if(tag_appear[i]==max&&i!=t){
      max_array[max_arraysize++]=tag[i];
    }   
    }
 
    int j=0;
    int start=-1,end=0, subarray_length[50000]={0},subarray_lengthsize=0;
    

    
    for(i=0;i<max_arraysize;i++){
        for(j=0;j<numsSize;j++){
            if(start==-1&&nums[j]==max_array[i]){
                start=j;
            }
            else if(nums[j]==max_array[i]){
                end=j;
            }
           
        }
     
            subarray_length[subarray_lengthsize++]=end-start+1;
            start=-1;
            end=i+1;
    }
    
   int min=subarray_length[0];
    for(i=1;i<subarray_lengthsize;i++){
        if(subarray_length[i]<min)
            min=subarray_length[i];
    }
    
    return min;
}