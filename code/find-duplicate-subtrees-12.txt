/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*>ret ;
        unordered_map<string, int>Map ; //{tree, count}
        helper(root, Map, ret) ;
        return ret ;
    }
    
    string helper(TreeNode* node, unordered_map<string, int>&Map, vector<TreeNode*>&ret){
        if(node == NULL)
            return "#" ;
        string s = to_string(node->val) + ' ' + helper(node->left, Map, ret) + helper(node->right, Map, ret) ;
        if(Map[s] == 1)
            ret.push_back(node) ;
        Map[s]++ ;
        return s ;
    } 
};