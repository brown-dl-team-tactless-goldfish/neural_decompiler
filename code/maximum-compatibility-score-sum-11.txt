class Solution {
public:
    int res=0;
    int maxCompatibilitySum(vector<vector<int>>& stu, vector<vector<int>>& men) {
        int n=stu.size();
        vector<bool> vis(n, false);
        dfs(stu, men, 0, 0, vis);
        return res;
    }
    
    void dfs(vector<vector<int>>& stu, vector<vector<int>>& men, int partSum, int idx, vector<bool>& vis)
    {
        int n=stu.size();
        if(idx==stu.size())
        {
            res=max(res, partSum);
            return;
        }
        
        for(int j=0;j<n;j++)
        {
            if(vis[j]) continue;
            vis[j]=true;
            dfs(stu, men, partSum+cal(stu[idx], men[j]), idx+1, vis);
            vis[j]=false;
        }
    }
    
    int cal(vector<int>& a, vector<int>& b)
    {
        int sum=0;
        for(int i=0;i<a.size();i++)
        {
            sum+=(a[i]==b[i]);
        }
        return sum;
    }
};