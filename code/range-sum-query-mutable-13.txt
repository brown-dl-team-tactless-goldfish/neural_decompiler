class NumArray {
public:
    vector<int> data;
    int n;
    NumArray(vector<int>& nums) {
        int s = nums.size();
        double l = log(s)/log(2);
        n = pow(2,(int) l);
        if(l != (int) l){
            n *= 2;
        }
        this->data = vector<int>(2*n,0);
        for(int i = 0; i < nums.size(); i++){
            this->data[n+i] = nums[i]; 
        }
        for(int i = n-1; i >= 1; i--){
            this->data[i] = this->data[2*i] + this->data[2*i+1]; 
        }
    }
    
    void update(int index, int val) {
        int i = index+n;
        int o = data[i];
        while(i > 0){
            data[i] = data[i] - o + val;
            i = i/2;
        }
    }
    
    int _sum(int i){
        int r = 0;
        int c = 1;
        int s = 0;
        int e = this->data.size()/2-1;
        if(i > e){
            return 0; 
        }
        while(c < n){
            
            int m = (s+e)/2;
            if(i == m+1){
                r = r + data[2*c+1];
                c = this->data.size()+1;
                break;
            }
            else if(i <= m){
                r = r + data[2*c+1];
                c = 2*c;
                e = m;
            }
            else{
                c = 2*c+1;
                s = m;
            }
        }
        if(c < this->data.size()){
            r += data[c];
        }
        return r;
    }
    
    int sumRange(int left, int right) {
        int l = _sum(left);
        int r = _sum(right+1);
        return l-r;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */