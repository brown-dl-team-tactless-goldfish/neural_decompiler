class Solution {
public:
    bool isPossible(int n, vector<vector<int>>& edges) {
        unordered_map <int,int> ump;
        vector <int> oddNode;
        vector <vector<int>> matrix(n+1);
        for(auto &it:edges){
            ump[it[0]]++;
            ump[it[1]]++;
            matrix[it[1]].push_back(it[0]);
            matrix[it[0]].push_back(it[1]);
        }
        int odd = 0;
        for(auto &it:ump){
            if(it.second % 2){
                odd++;
                oddNode.push_back(it.first);
            }
        }
        if(!odd)
            return true;
        else if(odd == 2){
            int a = oddNode[0];
            int b = oddNode[1];
            for(int i=1;i<n;i++){
                vector<int>::iterator it;
                it = find(matrix[i].begin(),matrix[i].end(),a);
                bool f1 = it != matrix[i].end();
                it = find(matrix[i].begin(),matrix[i].end(),b);
                bool f2 = it != matrix[i].end();
                if(!f1 && !f2)
                    return true;
            }
            return false;
        }
        else if(odd == 4){
            int a = oddNode[0];
            int b = oddNode[1];
            int c = oddNode[2];
            int d = oddNode[3];
            vector<int>::iterator it;
            it = find(matrix[a].begin(),matrix[a].end(),b);
            bool f1 = it != matrix[a].end();
            it = find(matrix[c].begin(),matrix[c].end(),d);
            bool f2 = it != matrix[c].end();
            it = find(matrix[a].begin(),matrix[a].end(),c);
            bool f3 = it != matrix[a].end();
            it = find(matrix[b].begin(),matrix[b].end(),d);
            bool f4 = it != matrix[b].end();
            it = find(matrix[a].begin(),matrix[a].end(),d);
            bool f5 = it != matrix[a].end();
            it = find(matrix[b].begin(),matrix[b].end(),c);
            bool f6 = it != matrix[b].end();
            if((!f1 && !f2) || (!f3 && !f4) || (!f5 && !f6))
                return true;
            return false;
        }
        return false;
    }
};