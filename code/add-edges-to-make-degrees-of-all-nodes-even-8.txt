class Solution {
    unordered_set<int> adj[100001];
public:
    bool isConnected(int a, int b){
        if(adj[a].count(b)) return true;
        return false;
    }
    
    bool isPossible(int n, vector<vector<int>>& edges) {
        for(auto edge : edges){
            int a = edge[0], b = edge[1];
            adj[a].insert(b), adj[b].insert(a);
        }
        
        vector<int> oddNodes;
        for(int i = 1; i <= n; i++){
            int deg = adj[i].size();
            if(deg % 2) oddNodes.push_back(i);
        }
        
        int oddcnt = oddNodes.size();
        if(oddcnt == 0) return true;
        
        /* if there are 2 nodes with odd degree, and they are not connected to each other, we can connect them */
        /* if the 2 nodes are connected, we need to find another node in the graph which does not have an edge with either of these 2 nodes */
        if(oddcnt == 2){
            int a = oddNodes[0], b = oddNodes[1];
            for(int k = 1; k <= n; k++)
                if(!isConnected(a,k) && !isConnected(b,k)) return true;
            return false;
        } 
        /* if there are 4 odd nodes, the only way to connect them is by connecting them among themselves */
        else if(oddcnt == 4){
            int a = oddNodes[0], b = oddNodes[1], c = oddNodes[2], d = oddNodes[3];
            if((!isConnected(a,b) && !isConnected(c,d)) || (!isConnected(a,c) && !isConnected(b,d)) || (!isConnected(a,d) && !isConnected(b,c))) return true;
            return false;
        }
        return false;
    }
};