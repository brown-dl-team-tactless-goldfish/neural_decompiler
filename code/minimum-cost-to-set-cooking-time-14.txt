public class Solution 
{
    public int MinCostSetTime(int startAt, int moveCost, int pushCost, int targetSeconds)
    {
        int result = int.MaxValue;
        
        for (int i = 0; i <= 99 && i <= targetSeconds; i++)
        {           
            if ((targetSeconds - i) % 60 == 0)
            {
                int m = ((targetSeconds - i) / 60) * 100 + i;

                int onM = m switch
                {
                    < 10 => oneDigit(startAt, moveCost, pushCost, m),
                    < 100 => twoDigit(startAt, moveCost, pushCost, m),
                    < 1000 => threeDigit(startAt, moveCost, pushCost, m),
                    < 10000 => fourDigit(startAt, moveCost, pushCost, m),
                    _ => int.MaxValue
                };

                result = Math.Min(result, onM);
            }
        }
        
        return result;
    }

    private int oneDigit(int startAt, int moveCost, int pushCost, int num)
    {
        int digit = num % 10;
        return (startAt == digit ? 0 : moveCost) + pushCost;
    }

    private int twoDigit(int startAt, int moveCost, int pushCost, int num)
    {
        int first = num / 10;
        int second = num % 10;
        return (startAt == first ? 0 : moveCost) + (first == second ? 0 : moveCost) + 2 * pushCost;
    }

    private int threeDigit(int startAt, int moveCost, int pushCost, int num)
    {
        List<int> digits = new List<int>();
        while (num > 0)
        {
            digits.Add(num % 10);
            num /= 10;
        }

        int first = digits[^1];
        int second = digits[^2];
        int third = digits[^3];
        int current = (startAt == first ? 0 : moveCost) + (first == second ? 0 : moveCost)
                 + (second == third ? 0 : moveCost) + 3 * pushCost;

        return current;
    }

    private int fourDigit(int startAt, int moveCost, int pushCost, int num)
    {
        List<int> digits = new List<int>();
        while (num > 0)
        {
            digits.Add(num % 10);
            num /= 10;
        }

        int first = digits[^1];
        int second = digits[^2];
        int third = digits[^3];
        int fourth = digits[^4];
        int current = (startAt == first ? 0 : moveCost) + (first == second ? 0 : moveCost)
                 + (second == third ? 0 : moveCost) + (third == fourth ? 0 : moveCost)
                 + 4 * pushCost;

        return current;
    }
}