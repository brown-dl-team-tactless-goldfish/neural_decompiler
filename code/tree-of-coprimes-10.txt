class Solution {
public:
    #define pii pair<int,int>
    int time = 0; 
    vector<int>nums, visited, res;
    vector<vector<int>> adj; 
    vector<vector<pii>> ancestors; 
    
    void postOrder(int root, int parent){
        if(parent!= -1) ancestors[nums[parent]].push_back({parent, time}); 
        time++; 
        for(auto child:adj[root]){
            if(!visited[child]){
                visited[child] = 1; 
                postOrder(child, root);
            }
        }
        int prevTime = -1; 
        for(int i=1; i<51; i++){
            if(__gcd(nums[root], i)  == 1 && 
               ancestors[i].size() > 0 && (ancestors[i].back().second > prevTime)
              )
                res[root] = ancestors[i].back().first, prevTime = ancestors[i].back().second; 
        }
        
        if(parent!= -1) ancestors[nums[parent]].pop_back(); 
        time --; 
    }
        
    vector<int> getCoprimes(vector<int>& nums, vector<vector<int>>& edges) {
        int n = nums.size(); 
        adj.resize(n), visited.resize(n, 0), res.resize(n, -1), ancestors.resize(51); 
        visited[0] = 1;
        for(auto & x: edges) adj[x[0]].push_back(x[1]), adj[x[1]].push_back(x[0]); 
        this->nums = nums; 
        postOrder(0, -1); 
        return res; 
    }
};