class Solution {
public:
    string base = "abc";

    void backtrack(vector<string>& strSet, int& n, string& curr, char last)
    {
        if(curr.size() == n)
        {
            strSet.push_back(curr);
            return;
        }
        else
        {
            for(int i = 0; i < base.size(); i++)
            {
                if(base[i] != last)
                {
                    curr.push_back(base[i]);
                    backtrack(strSet, n, curr, base[i]);
                    curr.pop_back();
                }
            }
        }
    }
    
    
    string getHappyString(int n, int k) {
        vector<string> strSet;
        char c =' ';
        string curr = "";
        backtrack(strSet, n, curr, c);
        return (strSet.size() >= k ? strSet[k-1] : "" );
    }
};