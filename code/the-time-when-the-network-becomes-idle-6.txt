#define pr pair<int,int>
class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {
    int n=patience.size();
    vector<vector<pr>> graph(n);
    for(auto &it:edges) 
    {
        graph[it[0]].push_back({it[1],1});
        graph[it[1]].push_back({it[0],1});
    }
    priority_queue<pr,vector<pr>,greater<pr>> pq;   
    vector<int> dist(n,INT_MAX);
    dist[0]=0;
    pq.push({0,0});
    while(!pq.empty())
    {
        int d=pq.top().first,v=pq.top().second;
        pq.pop();
        for(auto &it:graph[v])
        {
            int dis=it.second,cur=it.first;
            if(dis+d < dist[cur])
            {
                dist[cur]=d+dis;
                pq.push({dist[cur],cur});
            }
        }
    }
    int ans=0;
    for(int i=1;i<n;i++)
    {
        int time=2*dist[i],cur;
        if(patience[i]>=time) cur=time;
        else
        {
            cur=((time-1)/patience[i]) * patience[i];
            cur+=time;
        }
        ans=max(ans,cur+1);
    }
    return ans;
    }
};