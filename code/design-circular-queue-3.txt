typedef struct {
    int *buffer;
    int ridx; // Use for front
    int widx; // Use for rear
    int size;
    int current_size;
} MyCircularQueue;

/** Initialize your data structure here. Set the size of the queue to be k. */
MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue *queue = malloc(sizeof(MyCircularQueue));
    queue->buffer = malloc(sizeof(int) * k);
    queue->size = k;
    queue->ridx = 0;
    queue->widx = -1;
    queue->current_size = 0;
    return queue;
}

/** Checks whether the circular queue is empty or not. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    return obj->current_size <= 0;
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) {
    return obj->current_size > obj->size-1;
}


/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if(!myCircularQueueIsFull(obj)) {
        obj->widx++;
        obj->widx = obj->widx % (obj->size);
        obj->buffer[obj->widx] = value;
        obj->current_size++;
        return true;
    }
    return false;
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if(!myCircularQueueIsEmpty(obj)) {
        obj->ridx++;
        obj->ridx = obj->ridx % (obj->size);
        obj->current_size--;
        return true;
    }
    return false;    
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj)) return -1;
    return obj->buffer[obj->ridx];
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj)) return -1;
    return obj->buffer[obj->widx];
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->buffer);
    free(obj);
}
