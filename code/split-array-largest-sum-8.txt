
void max_and_sum_of_array(int *nums, int n, int *start, int *end)
{
    int max = INT_MIN;
    int sum = 0;
    
    for (int i = 0; i < n; i++) {
        max = fmax(max, nums[i]);
        sum += nums[i];
    }
    
    *start = max;
    *end = sum;
}


bool can_split(int *nums, int n, int m, int target)
{
    int num_of_subarray = 1;
    int currSum = 0;
    
    for (int i = 0; i < n; i++) {
        currSum += nums[i];
        
        if (currSum > target) {
            num_of_subarray++;
            currSum = nums[i];
        }
    }
    
    return (num_of_subarray <= m);
}


int splitArray(int* nums, int numsSize, int m)
{
    int l, r;
    max_and_sum_of_array(nums, numsSize, &l, &r);
    int res = r;
    
    while (l <= r) {
        int mid = l + (r - l) / 2;
        
        if (can_split(nums, numsSize, m, mid)) {
            res = mid;
            r = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    
    return res;
}