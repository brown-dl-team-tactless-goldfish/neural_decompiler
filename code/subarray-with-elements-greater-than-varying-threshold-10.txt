class Solution {
public:
    int validSubarraySize(vector<int>& nums, int threshold) {
        stack<int> st;
        int n = nums.size();
        vector<int> left(n,0),right(n,n-1);
        st.push(n-1);
        for(int i = n-2; i>=0;--i){
            while(st.size() && nums[st.top()]>=nums[i]) st.pop();
            if(st.size()) right[i] = st.top()-1;
            st.push(i);
        }
        while(st.size()) st.pop();
        st.push(0);
        for(int i = 0; i<nums.size(); ++i){
            while(st.size()>0 && nums[st.top()]>=nums[i]) st.pop();
            if(st.size()) left[i] = st.top()+1;
            st.push(i);
        }
        long long re = -1;
        for(int i = 0; i<nums.size();++i){
            long long d = right[i]-left[i]+1;
            if((long long)nums[i]*d>threshold) re = max(re,d);
        }
        return re;
    }
};