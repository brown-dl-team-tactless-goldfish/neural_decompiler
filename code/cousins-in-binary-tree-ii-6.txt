/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        unordered_map<int, int> mp;
        popDepths(root, 0, mp);
        root->val = 0;
        updateVals(root, 0, mp);
        return root;
    }

    void popDepths(TreeNode* node, int d, unordered_map<int, int>& mp){
        mp[d] += node->val;
        if(node->left) popDepths(node->left, d+1, mp);
        if(node->right) popDepths(node->right, d+1, mp);
        return;
    }

    void updateVals(TreeNode* node, int d, unordered_map<int, int>& mp){
        if(node->left == nullptr && node->right == nullptr) return;
        int lval = 0;
        int rval = 0;
        if(node->left) lval = node->left->val;
        if(node->right) rval = node->right->val;
        if(node->left){
            node->left->val = mp[d+1] - lval - rval;
            updateVals(node->left, d+1, mp);
        }
        if(node->right){
            node->right->val = mp[d+1] - lval - rval;
            updateVals(node->right, d+1, mp);
        }
        return;
    }
};