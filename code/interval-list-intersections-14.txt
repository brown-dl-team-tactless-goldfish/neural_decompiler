
class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A , vector<vector<int>>& B ) {
        
        int i = 0 ;  
        int j = 0 ; 
        
        int M = A.size() ; 
        int N = B.size() ;
        
        if( M == 0 || N == 0 ) return {};
        
        sort( A.begin() , A.end() );
        sort( B.begin() , B.end() );
        
        vector< vector< int > > res; 
       
        while( i < M && j < N )
        {
        
            auto x = A[i] ; 
            auto y = B[j] ; 
            
            int a = x[0] ; 
            int b = x[1] ; 
            
            int c = y[0] ; 
            int d = y[1] ; 
            
            
            if( max( a , c ) <= min( b ,d ) )
            {
                vector<int> np = { max(a,c) , min(b,d) } ; 
                
                res.push_back( np );
                
                if( np[1] == b && np[1] == d )
                {
                    i++ ;
                    j++ ; 
                }
                
                else if ( np[1] == b )
                {
                    i++ ;
                }
                else if ( np[1] == d )
                {
                    j++ ;
                }
                
            }
            
            else
            {
               if( b < c )
               {
                   i++;
               }
               else if( d < a )
               {
                   j++;
               }
                
            }
            
        }
      
        
        return res ;
    }
};