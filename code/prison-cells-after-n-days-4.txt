/**
 * Note: The returned array must be malloced, assume caller calls free().
 */


void print(int* arr , int cellsSize){
    for(int i=0;i<cellsSize;i++){
        printf("%d ",arr[i]);
    }
    printf("\n");
}


void helper(int* copy,int* temp,int size){
    copy[0] = 0;
    copy[size-1] = 0;
    for(int i=1;i<size-1;i++){
        copy[i] = (~(temp[i-1]^temp[i+1]))&0x01;
    }
}



int* prisonAfterNDays(int* cells, int cellsSize, int N, int* returnSize){
    
    int* copy = (int*)malloc(sizeof(int)*cellsSize);
    int* temp = (int*)malloc(sizeof(int)*cellsSize);
    bool compare = true;
    int count = 0;
    *returnSize = cellsSize;
    memcpy(copy,cells,sizeof(int)*cellsSize);
    if(cells[0] == 1 || cells[cellsSize-1] == 1){
        memcpy(temp,copy,sizeof(int)*cellsSize);
        helper(copy,temp,cellsSize);
        memcpy(cells,copy,sizeof(int)*cellsSize);
        N--;
    }
    
    while(compare){
        memcpy(temp,copy,sizeof(int)*cellsSize);
        helper(copy,temp,cellsSize);
        compare = memcmp(cells,copy,sizeof(int)*cellsSize);
        count++;
    }
    memcpy(cells,copy,sizeof(int)*cellsSize);
    N = N%count;
    while(N){
        memcpy(temp,copy,sizeof(int)*cellsSize);
        helper(copy,temp,cellsSize);
        N--;
    }
    return copy;
}
