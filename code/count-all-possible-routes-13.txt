class Solution {
public:
    vector<vector<int>> dp;
    int MOD = 1000000007;
   
int dfs(vector<int>& locations, int start, int finish,int fuel){
        
        int path=0;                         
        
        if(start==finish) path+= 1;         // path completed inc 1 count
               
        if(dp[start][fuel]!=-1)             // already visited now need to visit 
            return dp[start][fuel];
        
        for(int i=0 ; i<locations.size() ; i++){        // travel all the loactions
            if(i!=start){                               // start cannot be visited again
                int currentFuel = abs(locations[start]-locations[i]);      // fuel cost    
                if(currentFuel>fuel)                     // fuel cost more than our budget skip this loaction
                    continue;
                path = (path+dfs(locations,i,finish,fuel-currentFuel))%MOD;
                // all path count are adding in this path
                // now start is next location with fuel left
            }
        }
        
        dp[start][fuel]=path;   // mark as visited
        
        return path;  // return the total path till now
        
    }
    
    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {
        dp.resize(201,vector<int>(201,-1));
        return dfs(locations,start,finish,fuel);
    }
    
  
};