class MovieRentingSystem {
public:
    unordered_map<int, set<pair<int, int>>> store;
    map<pair<int, int>, int> price;
    set<vector<int> > rented;
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        for(auto e : entries) {
            store[e[1]].insert({e[2], e[0]});
            price[{e[0], e[1]}] = e[2];
        }
    }
    
    vector<int> search(int movie) {
        vector<int> ans;
        int cnt = 0;
        for(auto it = store[movie].begin(); it != store[movie].end() && cnt < 5; it++, cnt++) {
            pair<int, int> p = *it;
            ans.push_back(p.second);
        }
        return ans;
    }
    
    void rent(int shop, int movie) {
        int p = price[{shop, movie}];
        auto it = store[movie].find({p, shop});
        if(it != store[movie].end()) {
            store[movie].erase({p, shop});
            rented.insert({p, shop, movie});
        }
    }
    
    void drop(int shop, int movie) {
        int p = price[{shop, movie}];
        auto it = rented.find({p, shop, movie});
        if(it != rented.end()) {
            rented.erase(it);
            store[movie].insert({p, shop});
        }
    }
    
    vector<vector<int>> report() {
        vector<vector<int> > res;
        int cnt = 0;
        for(auto it = rented.begin(); it != rented.end() && cnt < 5; it++, cnt++) {
            vector<int> v = *it;
            res.push_back({v[1], v[2]});
        }
        return res;
    }
};