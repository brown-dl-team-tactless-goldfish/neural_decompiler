int maxScore(vector<int>& nums) {
    int n = nums.size();
    std::priority_queue<vector<int>, vector<vector<int>>> pq;
    int localmax = 0;
    for(int i = 0; i < n - 1; ++i) {
        for(int j = i + 1; j < n; ++j) {
            int c = std::gcd(nums[i], nums[j]);
            localmax = std::max(localmax, c);
            pq.push({c, i, j});
        }
    }
    
	 // we only choose current max for step n/2 as gready,
	 // if there are multiple, we will try every pair of them with recursive
    int step = n / 2;
    int res = 0;
    while(!pq.empty()) {
        auto cur = pq.top();
        pq.pop();
        if (cur[0] < localmax) break;
        
        vector<int> next = nums;
        next.erase(next.begin() + cur[2]);
        next.erase(next.begin() + cur[1]);
        
        res = std::max(res, step* cur[0] + maxScore(next));
    }
    
    
    return res;
}