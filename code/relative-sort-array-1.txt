/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* relativeSortArray(int* arr1, int arr1Size, int* arr2, int arr2Size, int* returnSize){
    int arr1_in_arr2[1001];
    int arr1_not_in_arr2[1001];
    int arr2_set[1001];
    
    int *res = malloc(sizeof(int) * 1001);
    if (!res) {
        *returnSize = 0;
        return NULL;
    }
    int i, j;
    
    *returnSize = arr1Size;

    for (i = 0; i <= 1000; i++) {
        arr2_set[i] = 0;
        arr1_in_arr2[i] = 0;
        arr1_not_in_arr2[i] = 0;
        res[i] = 0;
    }
    
    for (i = 0; i < arr2Size; i++) {
        arr2_set[arr2[i]] += 1;
    }
    
    for (i = 0; i < arr1Size; i++) {
        int n1 = arr1[i];
        if (arr2_set[n1] > 0) {
            arr1_in_arr2[n1] += 1;
        } else {
            arr1_not_in_arr2[n1] += 1;
        }
    }
    
    int res_idx = 0;
    for (i = 0; i < arr2Size; i++) {
        int n2 = arr2[i];
        for (j = 0; j < arr1_in_arr2[n2]; j++) {
            res[res_idx++] = n2;
        }
    }
    
    for (i = 0; i <= 1000; i++) {
        for (j = 0; j < arr1_not_in_arr2[i]; j++) {
            res[res_idx++] = i;
        }
    }
    
    return res;
}