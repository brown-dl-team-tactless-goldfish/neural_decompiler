class Solution {
public:
    
    vector<vector<int>> graph;
    vector<bool> vis;
    
    int dfs(int root, vector<bool>&hasApple)
    {
        int ans=0;
        vis[root]=true;
        for(auto child:graph[root])
        {
            if(vis[child]) continue;
            ans+=dfs(child,hasApple);
        }
        if( root!=0 && (hasApple[root] || ans!=0) ) ans+=2;
        return ans;
    }
    
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        graph.resize(n);
        vis.resize(n,false);
        for(vector<int> &e:edges)
        {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        return dfs(0,hasApple);
    }
};