    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if (grid[0][0]==1)
            return -1;
        queue<pair<int,int>> q;
        q.push({0,0});
        grid[0][0]=1;
        int step = 1;
        while(!q.empty()){
            for(int i=0, qs = q.size(); i<qs;i++){
                auto[r,c]=q.front();
                q.pop();
                if (r == n-1 && c == n-1)
                    return step;
                int nei[8][2] = {
                    {r-1,c-1},{r-1,c},{r-1,c+1},
                    {r  ,c-1},        {r  ,c+1},
                    {r+1,c-1},{r+1,c},{r+1,c+1}
                };
                for(auto[rr,cc]:nei){
                    if (rr>=0 && rr<n && cc>=0 && cc<n && grid[rr][cc] == 0){
                        grid[rr][cc]=1;
                        q.push({rr,cc});
                    }
                }
            }
            ++step;
        }
        return -1;
    }