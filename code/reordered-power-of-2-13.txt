class Solution {
public:
    bool check(vector<int>&xp,vector<int>&mp)
    {
       
        for(int i=0;i<11;i++)
            if(xp[i]!=mp[i])
                return false;
        return true;
    }
    bool reorderedPowerOf2(int n) {
       // Sort the digit and store in a <vector>
       vector<int>v;
     vector<int>mp(11,0);
        int count1=0;
        while(n)
        {  
            v.push_back(n%10);
           
            mp[n%10]++;
            n/=10;
            count1++;
        }
        sort(v.begin(),v.end());
    
    // Make bigger possible number
      double num=0;
        for(int i=v.size()-1;i>=0;i--)
            num=num*10+v[i];
    cout<<"num="<<num<<endl;
    while(num)
    {
        double power=log2(num);
        cout<<"power="<<power<<endl;
        cout<<"int power="<<(int)power<<endl;
        if(((int)power==power))
        {cout<<"power"<<endl;
         return true;}
        int x=pow(2.0,(int)power);
         vector<int>xp(11,0);
        int count2=0;
         while(x)
        {  
            
            xp[x%10]++;
            x/=10;
             count2++;
        }
        if(count1!=count2)
            return false;
        if(check(xp,mp))
        {cout<<"Check"<<endl;
         return true;}
        num/=2.0;
    }
        return false;
            
        
        
    }
};

Time Complexity: O((logn)^2)
Space Complexity: O(k)