class Solution {
public:
    
    bool makesquare_helper(vector<int>& matches, const long long sideLen, long long len, int side, int used, int pos)
    {
        if (len == sideLen)
        {
            len = 0;
            pos = 0;
            ++side;
            
            if (side == 4) return true; // square complete.
        }
        
        for (auto i = pos; i < matches.size(); ++i)
        {
            if (((used >> i) & 1) == 0 && len + matches[i] <= sideLen)
            {
                if (makesquare_helper(matches, sideLen, len + matches[i], side, used + (1 << i), i + 1)) return true;
                else if (len == 0) return false; // Could not use this match at all.
            }
        }
        
        return false;
    }

    bool makesquare(vector<int>& nums) 
    {
        long long sum = 0;
        int longest = 0;

        for (auto n : nums)
        {
            sum += n;
            longest = max(longest, n);
        }
        
        if (sum == 0 || sum % 4 != 0 || sum / 4 < longest) return false;

        return makesquare_helper(nums, sum / 4, 0, 0, 0, 0);
    }
};