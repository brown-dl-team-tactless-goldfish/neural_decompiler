int minimumJumps(vector<int>& forbidden, int a, int b, int x) {
    int farthest = (x+a+b)*2;
    set<int> forbid(forbidden.begin(), forbidden.end());
    //visited[x][0] = visited x moving forward
    //visted[x][1] = visited x moving backward
    vector<vector<bool> > visited(farthest, vector<bool> (2, false));
    queue<int> q;
    queue<int> lastMove;//(0 forward, 1 back)
    q.push(0);
    lastMove.push(0);
    int dist = 0;
    while(q.size()) {
        int size = q.size();
        for(int i=0; i<size; i++) {
            int curr = q.front();
            int mv = lastMove.front();
            q.pop();
            lastMove.pop();
            if(visited[curr][mv]) {
                continue;
            }
            if(curr==x) {
                return dist;
            }
            visited[curr][mv] = true;
            //jump to children
            if(mv==0) {
                //left
                int next = curr-b;
                if(next>=0 && forbid.count(next)==0 ) {
                    q.push(next);
                    lastMove.push(1);
                }
            }
            //right
            int next = curr+a;
            if(next>=0 && next<farthest && forbid.count(next)==0 ) {
                q.push(next);
                lastMove.push(0);
            }
        }
        dist++;
    }
    return -1;
}