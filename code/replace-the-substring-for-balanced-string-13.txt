class Solution {
public:
    int balancedString(string s) {
        //we will use sliding window approach to solve the problem
        //when will we increase the size of sliding window ?
        //when we find out that the freq of every character outside is greater than  s.length()/4;
        //if all the characters freq outside the window are less than or equal to s.length()/4 we try to minimize the window length
        //since in such case we can replace the substring to make all char freq equal to s.length()/4
        
        //store the frequency of each charcter in vector
        vector<int> freq(26,0);
        
        int len=s.length();
        int target=len/4;
        for(int k=0;k<len;k++)
            freq[s[k]-'A']++;
        
        //if the string is already balanced
        if(isBalanced(freq,target))
            return 0;
        int i=0;
        int mini=len;
        for(int j=0;j<len;j++)
        {
            //dec the character frequency
            freq[s[j]-'A']--;
            if(isBalanced(freq,target))
            {
                //if all char outside the window have freq  less than or equal to target
            
                mini=min(mini,j-i+1);
                
                //get the minimum length of sliding window
                while(i<=j)
                {
                    freq[s[i]-'A']++;
                    i++;
                    if(isBalanced(freq,target))
                        mini=min(mini,j-i+1);
                    else
                        break;
                }
            
            }
        }
        return mini;
    }
    
    //returns true if every character freq is less than or equal to target
    bool isBalanced(vector<int> freq,int target )
    {
        vector <char> letters={'Q','W','E','R'};
        for(int i=0;i<4;i++)
            if(freq[letters[i]-'A']>target)
                return false;
        return true;
    }
};