 public class Solution
    {
        public int MinSumOfLengths(int[] arr, int target)
        {
            checked
            {
                IDictionary<long, int> map = new Dictionary<long, int>();
                long sum = 0;

                int[] left = new int[arr.Length];
                int[] right = new int[arr.Length];


                for (int i = 0; i < arr.Length; i++)
                {
                    sum += arr[i];

                    if (i > 0)
                    {
                        left[i] = left[i - 1];
                    }

                    if (sum == target)
                    {
                        if (left[i] == 0)
                        {
                            left[i] = i + 1;
                        }
                        else
                        {
                            left[i] = Math.Min(i + 1, left[i]);
                        }
                    }
                    else
                    {
                        if (map.ContainsKey(sum - target))
                        {
                            if (left[i] == 0)
                            {
                                left[i] = i - map[sum - target];
                            }
                            else
                            {
                                left[i] = Math.Min(i - map[sum - target], left[i]);
                            }
                        }

                        map[sum] = i;
                    }
                }

                map.Clear();
                sum = 0;

                for (int i = arr.Length - 1; i >= 0; i--)
                {
                    sum += arr[i];

                    if (i < arr.Length - 1)
                    {
                        right[i] = right[i + 1];
                    }

                    if (sum == target)
                    {
                        if (right[i] == 0)
                        {
                            right[i] = arr.Length - i;
                        }
                        else
                        {
                            right[i] = Math.Min(arr.Length - i, right[i]);
                        }
                    }
                    else
                    {
                        if (map.ContainsKey(sum - target))
                        {
                            if (right[i] == 0)
                            {
                                right[i] = map[sum - target] - i;
                            }
                            else
                            {
                                right[i] = Math.Min(map[sum - target] - i, right[i]);
                            }
                        }

                        map[sum] = i;
                    }
                }

                int res = int.MaxValue;
                for (int i = 0; i < arr.Length - 1; i++)
                {
                    if (left[i] != 0 && right[i + 1] != 0)
                    {
                        res = Math.Min(res, left[i] + right[i + 1]);
                    }
                }


                return res == int.MaxValue ? -1 : res;
            }
        }
    }