int minJumps(vector<int>& nums) {
    int n = nums.size();
    unordered_map<int,vector<int>>m;
    vector<int>vis(n,0);
    for(int i=0;i<n;i++){
        m[nums[i]].push_back(i);
    }
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    bool f = false;
    int c = 0;
    while(!q.empty()){
        int sz = q.size();
        while(sz--){
            int i = q.front();
            q.pop();
            if(i==n-1){
                f = true;
                break;
            }
            if(i+1<n && vis[i+1]==0){
                q.push(i+1);
                vis[i+1] = 1;
            }
            if(i-1>=0 && vis[i-1]==0){
                q.push(i-1);
                vis[i-1] = 1;
            }
            if(m.count(nums[i])){
                for(auto x:m[nums[i]]){
                    if(vis[x]==0){
                        q.push(x);
                        vis[x] = 1;
                    }
                }
                m.erase(nums[i]);
            }
        }
        if(f) break;
        else c++;
    }
    return c;
}