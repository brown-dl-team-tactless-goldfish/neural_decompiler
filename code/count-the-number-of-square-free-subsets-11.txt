class Solution {
public:
    int squareFreeSubsets(vector<int>& nums) {
        vector<int>v(30,0);
        int index = 0 ;
        for(auto it : vector<int>{1,2,3,5,7,11,13,17,19,23,29}){
            v[it] = index , index += 1 ;
        }
    
        vector<vector<long long int>>dp((1<<11),vector<long long>(nums.size(),-1ll));
        int mask = 0 ;
        const int M = 1e9 + 7 ;
        function<long long int(int)>recur = [&](int i){
            if(i == nums.size()) return 1ll ;
            if(dp[mask][i] != -1) return dp[mask][i];
            int cur = 0 ;
            int repeat = 0, x = nums[i] ;
            for(int i = 2 ; i <= x ; i++){
                if(x%i == 0){
                    x /= i ; 
                    if(x%i == 0){ repeat = 1 ; break ;}
                    if((mask & (1<<v[i])) != 0) repeat = 1 ;
                    cur |= (1<<v[i]);
                }
            }
            long long int ans = recur(i+1) ;
            if(!repeat){
                mask |= cur ; ; 
                ans = (ans % M + recur(i+1) % M) % M; 
                mask ^= cur ;
            }
            return dp[mask][i] = ans ;    

        };

        return recur(0)-1 ;





    }
};