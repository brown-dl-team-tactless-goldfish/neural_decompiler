public class Solution 
{
    private int[][] rects;
    private int[] sums;
    private Random random;

    public Solution(int[][] rects) 
    {
        this.rects = rects;
        sums = new int[rects.Length];
        for(int i = 0; i <rects.Length; i++)
        {
            var area = RectAreaPoints(rects[i]);
            sums[i] = i == 0 ? area : sums[i - 1] + area;
        }

        random = new Random();
    }
    
    public int[] Pick() 
    {
        int index = random.Next(sums[sums.Length - 1]) + 1;
        int left = Array.BinarySearch(sums, index);
        if(left < 0) left = ~left;
        int rect_index = sums[left] - index;
        int rect_long = rects[left][2] - rects[left][0] + 1;
        return new int[]{rects[left][0] + rect_index % rect_long, rects[left][1] + rect_index / rect_long};
    }
    
    private int RectAreaPoints(int[] p)
    {
        return (p[2] - p[0] + 1) * (p[3] - p[1] + 1); 
    }
}