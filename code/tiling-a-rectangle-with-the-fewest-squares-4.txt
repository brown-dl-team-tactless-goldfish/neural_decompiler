class Solution {
public:
    int tilingRectangle(int n, int m) {
        int min_ = n*m;
        dfs(vector<int>(m, 0), n, min_, 0);
        return min_;
    }
    static void dfs(vector<int>&& height, const int n, int& min_, const int count) {
        if(count > min_) return;
        int minInd = 0, m = height.size(), maxL = 1;
        for(int i = 0; i < m; ++i) if(height[i] < height[minInd]) minInd = i;
        while(minInd+maxL < m && height[minInd + maxL] == height[minInd]) ++maxL;
        maxL = min(maxL, n - height[minInd]);
        
        if(maxL == 0) {
            min_ = min(min_, count);
            return;
        }
        
        vector<int> copy{height};
        for(int i = maxL; i >= 1; --i) {
            for(int j = 0; j < i; ++j) height[minInd + j] += i;
            dfs(move(height), n, min_, count+1);
            height = copy;
        }
    }
};