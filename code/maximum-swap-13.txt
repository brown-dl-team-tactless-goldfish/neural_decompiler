void swap(int* a,int* b){
    *a=(*a)^(*b);
    *b=(*a)^(*b);
    *a=(*a)^(*b);
}
int cmp(void* a,void* b){
    int ret=((int**)a)[0][0]-((int**)b)[0][0];
    if(ret==0){
        return ((int**)b)[0][1]-((int**)a)[0][1];
    }
    return ret;
}
int maximumSwap(int num) {
    if(num<12){
        return num;
    }
    int temp=num;
    int* array=(int*)calloc(10,sizeof(int));
    int count=0;
    while(temp!=0){
        array[count++]=temp%10;
        temp/=10;
    }
    int** map=(int**)malloc(10*sizeof(int*));
    for(int i=0;i<count;i++){
        map[i]=(int*)calloc(2,sizeof(int));
        map[i][0]=array[i];
        map[i][1]=i;
    }
    qsort(map,count,sizeof(map[0]),cmp);
    for(int i=count-1;i>-1;i--){
        if(array[i]!=map[i][0]){
            temp=i;
            while(temp<count-1&&map[temp][0]==map[temp+1][0]){
                temp++;
            }
            swap(&array[i],&array[map[temp][1]]);
            break;
        }
    }
    int ret=0;
    for(int i=count-1;i>-1;i--){
        ret=ret*10+array[i];
    }
    return ret;
}