class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        queue<vector<TreeNode*>>q;
        q.push({root});
        int count=1;
        while(!q.empty())
        {   
            vector<TreeNode*>nodes;
            for(auto &node:q.back())
            {
                if(node->left)
                    nodes.push_back(node->left);
                if(node->right)
                    nodes.push_back(node->right);
            }
           if(count%2==0)
            reverse_nodes(q.back());
              q.pop();
         if(!nodes.empty())
             q.push(nodes);
            count++;
        }
        return root;
    }
    void reverse_nodes(vector<TreeNode*>&v)
    {
        int left=0;
        int right=v.size()-1;
        while(left<=right)
        {
            int x=v[left]->val;
            v[left]->val=v[right]->val;
            v[right]->val=x;
            left++;
            right--;
            // cout<<"hello"<<endl;
        }
    }
};

Time Complexity: O(n)
Space Complexity: O(n)