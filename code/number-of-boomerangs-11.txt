class Solution {
    inline int dist(vector<int>a, vector<int>b) {
        return ((a[0]-b[0])*(a[0]-b[0]) + (a[1]-b[1])*(a[1]-b[1]));
    }
public:
    int numberOfBoomerangs(vector<vector<int>>& points) {
        int n = points.size();
        int ans  = 0;
        
        unordered_map<int, int>m;
        for (int i = 0; i < n; i++) {
            m.clear();
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    int d = dist(points[i], points[j]);
                    m[d]++;
                }
            }
            
            for (auto it = m.begin(); it != m.end(); it++) {
                if (it->second > 1)
                    ans += (it->second)*(it->second-1);
            }
        }
        
        return ans;
    }
};