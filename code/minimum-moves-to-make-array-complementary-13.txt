class Solution {
public:
	int minMoves(vector<int>& nums, int limit) {
		int n = nums.size();
		int statechangeArr[ 2*limit + 2 ];
		memset(statechangeArr,0,sizeof(statechangeArr));
		int ans = INT_MAX;
		for(int i = 0 ;i < n/2; i++){
            
            // for any i, at most 2 value adjusts can solve the problem;
			statechangeArr[0]+=2;
            
			int cur_sum = nums[i] + nums[n - i - 1];
            
            // assume we know the sum that referenced for adjusting the value within nums;
            //(say x[i]<=x[j]), nums[i]+1 <= sum <  nums[i]+ nums[j] + 1; one less variable(x[j]) needs to adjust once; 
            statechangeArr[ min( nums[i] + 1, nums[n - i - 1] + 1 ) ] -= 1;
            statechangeArr[ cur_sum + 1 ] += 1;
            
            //(say x[i]<=x[j]) nums[j]+limite+1 > sum >=  nums[i]+ nums[j]; one less variable(x[i]) needs to adjust; 
			statechangeArr[ cur_sum ] -= 1;
			statechangeArr[ max( nums[i] + limit, nums[n - i - 1] + limit ) + 1 ] += 1;
			
            // the case (x[j]>=x[j]) is similar and included in above cases.
		}
		int cur_num = 0;
		for(int state: statechangeArr){
			cur_num += state;
			ans = min(ans,cur_num);
		}
		return ans;
	}
};