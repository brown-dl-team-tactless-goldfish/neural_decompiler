class Solution {
public:
    // Check s2 can break s1
    bool canBreak(string& s1, string s2) {
        int f[26] = { 0 };
        for (char& c : s2) f[c-'a']++;
        for (char& c : s1) {
            bool found = false;
            for (char cc = c; cc <= 'z'; cc++) {
                if (f[cc-'a']) {
                    f[cc-'a']--;
                    found = true;
                    break;
                }
            }
            if (!found) return false;
        }
        return true;
    }
    
    bool checkIfCanBreak(string s1, string s2) {
        return canBreak(s1, s2) || canBreak(s2, s1);
    }
};

/**

Runtime: 31 ms, faster than 94.48% of C++ online submissions for Check If a String Can Break Another String.
Memory Usage: 12.9 MB, less than 11.03% of C++ online submissions for Check If a String Can Break Another String.

s1 = abc
s2 = xya

Let's check s2 can break s1

Find letter frequency table of s2:
a -> 1
x -> 1
y -> 1

Traverse s1 -
a -> found a in freq table
b -> b not found but greater than b which is x found
c -> b not found but greater than b which is y found


Let's check s1 can break s2
Find letter frequency table of s2:
a -> 1
b -> 1
c -> 1

Traverse s2 -
x -> Not Found. So break and not possible.

**/