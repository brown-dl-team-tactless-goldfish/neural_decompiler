class Solution {
public:
    template<typename T>
    double dis(vector<T>& a, vector<T>& b){
        double delt_x = a[0] - b[0];
        double delt_y = a[1] - b[1];
        return sqrt(delt_x * delt_x + delt_y * delt_y);
    }
    int numPoints(vector<vector<int>>& points, int r) {
        if(points.empty()){
            return 0;
        }
        double epsilon = 0.001;
        int ret = 1;
        for(int i = 0;i<points.size();i++){
            for(int j = i + 1;j<points.size();j++){
                vector<int>& p1 = points[i];
                vector<int>& p2 = points[j];
                double d = dis(p1,p2);
                if(d<=2*r){
                    double a = (p1[0] - p2[0]);
                    double b = (p1[1] - p2[1]);
                    double x_m = (p1[0] + p2[0])/2.0;
                    double y_m = (p1[1] + p2[1])/2.0;
                    double x, y;
                    if(a == 0){
                        x = sqrt(r*r - d*d/4);
                        y = 0; 
                    } else if(b == 0){
                        x = 0; 
                        y = sqrt(r*r - d*d/4);
                    } else {
                        x = sqrt((r*r - (d*d/4))/(a*a + b*b)*b*b);
                        y = -a/b*x;
                    }
                    vector<double> c1 = {x_m + x ,y_m + y};
                    vector<double> c2 = {x_m - x, y_m - y};
                    int count0 = 0; 
                    int count1 = 0; 
                    for(auto& point : points){
                        vector<double> p = {(double)point[0],(double)point[1]};
                        double t = 0;
                        double d1 = dis(p,c1);
                        if(d1<r || abs(d1-r)<=epsilon){
                            count0++;
                        }
                        double d2 = dis(p,c2);
                        if(d2<r || abs(d2-r)<=epsilon){
                            count1++;
                        }
                    }
                    ret = max(ret,max(count0,count1));
                }
            }
        }
        return ret; 
    }
};