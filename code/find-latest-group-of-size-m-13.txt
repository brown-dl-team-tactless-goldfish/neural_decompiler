class Solution {
public:
    vector<int> parent;
    int find(int i){
        if(parent[i]==-1){
            return i;
        }
        return parent[i]=find(parent[i]);
    }
    void unio(int a,int b){
        int x=find(a);
        int y=find(b);
        if(x!=y){
            parent[x]=y;
        }
    }
    int findLatestStep(vector<int>& arr, int m) {
        int n=arr.size();
        parent.clear();
        parent.resize(n+1,-1);
        map<int,int> mp,mp1;
        vector<int> bin(n+2,0);
        int ans=-1;
        for(int i=0;i<n;i++){
            if(bin[arr[i]-1]==1 && bin[arr[i]+1]==0){
                int val=mp[find(arr[i]-1)];
                mp.erase(find(arr[i]-1));
                if(mp1.find(val)!=mp1.end()){
                    mp1[val]--;
                    if(mp1[val]==0){
                        mp1.erase(val);
                    }
                }
                unio(arr[i]-1,arr[i]);
                mp1[val+1]++;
                mp[find(arr[i])]=val+1;
            }
            else if(bin[arr[i]-1]==0 && bin[arr[i]+1]==1){
                int val=mp[find(arr[i]+1)];
                mp.erase(find(arr[i]+1));
                if(mp1.find(val)!=mp1.end()){
                    mp1[val]--;
                    if(mp1[val]==0){
                        mp1.erase(val);
                    }
                }
                unio(arr[i]+1,arr[i]);
                mp1[val+1]++;
                mp[find(arr[i])]=val+1;
            }
            else if(bin[arr[i]-1]==1 && bin[arr[i]+1]==1){
                int val=mp[find(arr[i]-1)];
                int val1=mp[find(arr[i]+1)];
                mp.erase(find(arr[i]-1));
                mp.erase(find(arr[i]+1));
                if(mp1.find(val)!=mp1.end()){
                    mp1[val]--;
                    if(mp1[val]==0){
                        mp1.erase(val);
                    }
                }
                if(mp1.find(val1)!=mp1.end()){
                    mp1[val1]--;
                    if(mp1[val1]==0){
                        mp1.erase(val1);
                    }
                }
                 unio(arr[i]-1,arr[i]);
                unio(arr[i],arr[i]+1);
                mp1[val+1+val1]++;
                mp[find(arr[i])]=val+1+val1;
               
            }
            else{
                mp[arr[i]]++;
                mp1[1]++;
            }
            bin[arr[i]]=1;
            if(mp1.find(m)!=mp1.end()){
                ans=i+1;
            }
        }
        return ans;
    }
};