class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {
        int n = patience.size();
        vector<int> dist(n, 0);
        vector<bool> used(n, false);
        vector<vector<int>> g(n);
        for(int i = 0; i < edges.size(); i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            g[u].push_back(v);
            g[v].push_back(u);
        }
        
        
        queue<int> q;
        q.push(0);
        used[0] = true;
        while(!q.empty()) {
            int u = q.front();
            q.pop();
            for(int v: g[u]) {
                if(!used[v]) {
                    q.push(v);
                    used[v] = true;
                    dist[v] = 1 + dist[u];
                }
            }
        }
        
        int ans = 0;
        for(int i = 1; i < n; i++) {
            int travel = 2 * dist[i];
            int extra = (travel-1) / patience[i];
            int rem = travel - (extra*patience[i]);
            travel = 2*travel - rem;
            ans = max(ans, travel);
        }
        
        return ans+1;
    }
};