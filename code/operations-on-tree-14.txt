class LockingTree {
    unordered_map<int, int> locks;
    unordered_map<int, vector<int>> children;
    vector<int> pars;
public:
    LockingTree(vector<int>& parent) {
        int n = parent.size();
        for(int i = 0; i < n; ++i) {
            children[parent[i]].push_back(i);
        }
        pars = move(parent);
    }
    
    bool lock(int num, int user) {
        if(locks[num] != 0)
            return false;
        locks[num] = user;
        return true;
    }
    
    bool unlock(int num, int user) {
        if(locks[num] != user)
            return false;
        locks[num] = 0;
        return true;        
    }
    
    bool upgrade(int num, int user) {
        if(locks[num] != 0)
            return false;
        int lock_desc = count_locked(num);
        if(lock_desc < 1)
            return false;
        int p = pars[num];
        while(p != -1) {
            if(locks[p] != 0)
                return false;
            p = pars[p];
        }
        clean_locked(num);
        locks[num] = user;
        return true;
    }
private:
    int count_locked(int num) {
        int ret = (locks[num] != 0) ? 1 : 0;
        for(int desc : children[num]) {
            ret += count_locked(desc);
        }
        return ret;
    }
    void clean_locked(int num) {
        locks[num] = 0;
        for(int desc : children[num]) {
            clean_locked(desc);
        }
    }
};