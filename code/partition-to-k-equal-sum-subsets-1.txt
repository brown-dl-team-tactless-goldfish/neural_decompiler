int cmp(int *a,int *b)
{
    return *b-*a;
}
bool helper(int *nums,int numsSize,int k,int target,int curSum,int start,bool* map)
{
    if(k==1)
        return true;
    if(target<curSum)
        return false;
    if(target==curSum)
        return helper(nums,numsSize,k-1,target,0,0,map);
    for(int i=start;i<numsSize;i++)
    {
        if(map[i])
            continue;
        map[i]=true;
        if(helper(nums,numsSize,k,target,curSum+nums[i],i+1,map))
            return true;
        map[i]=false;
    }
    return false;
}
bool canPartitionKSubsets(int* nums, int numsSize, int k){
    int sum=0;
    for(int i=0;i<numsSize;i++)
        sum+=nums[i];
    if(sum%k)   
        return false;
    qsort(nums,numsSize,sizeof(int),cmp);
    bool *map=calloc(numsSize,sizeof(bool));
    return helper(nums,numsSize,k,sum/k,0,0,map);
}
