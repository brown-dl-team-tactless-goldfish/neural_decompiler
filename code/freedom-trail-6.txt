int m, n;

int dp[101][101];

int helper(string ring, string key, int indx, int ptr)
{
    if(indx == n)
    {
        return 0;
    }
    
    if(dp[ptr][indx] != -1)
    {
        return dp[ptr][indx];
    }
    
    int ans = INT_MAX;
    
    for(int i=0; i<m; i++)
    {
        if(ring[i] == key[indx])
        {
            int x = abs(ptr-i);
            
            ans = min(ans,min(x,m-x)+helper(ring,key,indx+1,i));
        }
    }
    
    return dp[ptr][indx] = ans+1;
    
}
int findRotateSteps(string ring, string key) {
    
    memset(dp,-1,sizeof(dp));
    
    m = ring.size(),n = key.size();
    
    return helper(ring, key, 0, 0);
    
}