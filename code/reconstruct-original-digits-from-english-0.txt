int cmp(const void* a, const void* b){
    return *(char*)a - *(char*)b;
}
char * originalDigits(char * s){
    int n = strlen(s);
    char* str[10] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"} ;
    char num[10] = {'z', 'o', 'w', 't', 'u', 'v', 'x', 's', 'g', 'i'};
    int seq[10] = {4, 6, 2, 0, 7, 5, 1, 8, 9, 3} ;
    int* alpha = calloc(26, sizeof(int));
    for(int i = 0; i < n; i++){
        alpha[s[i] - 'a']++;
    }
    char* ans = malloc((n/3 + 1) * sizeof(char));
    int idx = 0;
    for(int i = 0; i < 10; i++){
        int k = seq[i] ;
        if(alpha[ num[k] - 'a' ] > 0){
            int m = alpha[ num[k] - 'a' ];
            for(int j = 0; j < strlen(str[k]); j++){
                alpha[str[k][j] - 'a'] -= m;
            }
            for(int l = 0; l < m; l++){
                ans[idx] = k + '0';
                idx++;
            }
        }
    }
    qsort(ans, idx, sizeof(char), cmp);
    ans[idx] = '\0';
    free(alpha);
    return ans;
}