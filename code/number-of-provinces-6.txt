int find(int parent[], int i)
{
    if (parent[i] == -1 || i == 0)
        return i;
    return find(parent, parent[i]);
}

int findCircleNum(int**  isConnected, int isConnectedSize, int* isConnectedColSize){
    int groups[isConnectedSize] ;
    memset(groups,-1, isConnectedSize*sizeof(groups[0]) ) ;
    for(int i = 0 ; i < isConnectedSize ; i++) {
        for(int j = i+1 ; j < isConnectedSize ; j++) {
            if(isConnected[i][j] == 1){
                if(groups[j] == -1) {
                    groups[j] = find(groups,i) ;
                }
                else if(groups[i] == groups[j]){
                    continue;
                }
                else{
                    int value = groups[i];
                    if(value == -1){
                        value = i;
                    }
                    int parant = groups[j];
                    groups[value] = parant ;
                    for(int r = 0 ; r < isConnectedSize ; r++) {
                        if(groups[r] == value){
                            groups[r] = parant ;
                        }
                    }
                }
            }
        }
    }
    int count[isConnectedSize] ;
    memset(count, 0, isConnectedSize*sizeof(count[0]) );
    int countGroups = 0;
    for(int i = 0 ; i < isConnectedSize ; i++) {
        if(groups[i] == -1){
            countGroups++;
        }
    }

    return countGroups;
}