class Solution {
public:
	int numSubmat(vector<vector<int>>& mat) {

		if (mat.empty()) return 0;

		int m = mat.size();
		int n = mat[0].size();

		vector<vector<int>>prefix(m, vector<int>(n, 0));
		for(int i = 0; i < m; i++){
			int c = 0;
			for(int j = n-1; j >= 0; j--){
				if(mat[i][j])
					c++;
				else
					c = 0;
				prefix[i][j] = c;
			}
		}

		int res = 0;
		for (int j = 0; j < n; j++) {
			stack<pair<int, int>>stk;
			int sum = 0;
			for (int i = m-1; i >= 0; i--) {
				int count = 0;
				while (!stk.empty() && (stk.top().first > prefix[i][j])) {
					sum -= (stk.top().second + 1)*(stk.top().first - prefix[i][j]);
					count += stk.top().second + 1;
					stk.pop();
				}

				sum += prefix[i][j];
				res += sum;
				stk.push({prefix[i][j], count});
			}
		}

		return res;
	}
};