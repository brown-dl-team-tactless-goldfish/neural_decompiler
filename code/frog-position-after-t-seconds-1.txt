class Solution:
    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:
        
        self.edges = {}
        for edge in edges:
            if edge[0] not in self.edges:
                self.edges[edge[0]] = [edge[1]]
            else:
                self.edges[edge[0]] += [edge[1]]
                
            if edge[1] not in self.edges:
                self.edges[edge[1]] = [edge[0]]
            else:
                self.edges[edge[1]] += [edge[0]]
                
        print ("self.edges = ", self.edges)
        
        self.data = {}
        
        def helper(curTime, curPos, visited, curProbability):
            # print ("curTime = ", curTime, " curPos = ", curPos)
            # print ("curProbability = ", curProbability)
            
            if curTime not in self.data:
                self.data[curTime] = [[curPos, curProbability]]
            else:
                self.data[curTime].append([curPos, curProbability])
                
            if (curTime > t):
                return
            
            visited.append(curPos)
            
            tmpNbs = []
            if curPos in self.edges:
                for nb in self.edges[curPos]:                
                    if (nb not in visited):
                        tmpNbs.append(nb)

                tmpLen = len(tmpNbs)

                if (tmpLen == 0):
                     helper(curTime+1, curPos, visited, curProbability)
                else:


                    # for nb in self.edges[curPos]:
                    for nb in tmpNbs:
                        print ("nb = ", nb)


                        helper(curTime+1, nb, visited, curProbability/tmpLen)


                    # print ("self.data = ", self.data)
            
            else:
                helper(curTime+1, curPos, visited, curProbability)
            
            
            
        helper(0, 1, [], 1)
        print ("end self.data = ", self.data)
        
        if (t not in self.data):
            return 0
        
        res_array = self.data[t]
        
        print ("res_array = ", res_array)
        
        res_pro = 0
        for res in res_array:
            if (res[0] == target):
                res_pro = res[1]
                
        print ("res_pro = ", res_pro)
        
        return res_pro