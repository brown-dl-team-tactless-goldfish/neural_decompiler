void Inorder(TreeNode*&root,vector<int>&arr){
        if(root==NULL){
            return;
        }
        Inorder(root->left,arr);
        arr.push_back(root->val);
        Inorder(root->right,arr);
    }
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>>ans;
        vector<int>inorder;
        Inorder(root,inorder);
        int n=inorder.size();

        for(auto it:queries){
           
            auto itr=lower_bound(inorder.begin(),inorder.end(),it);
            int ind=itr-inorder.begin();
            if(ind==0 && inorder[0]!=it){
                ans.push_back({-1,inorder[ind]});
            }
            else if(itr==inorder.end()){
               
                ans.push_back({inorder[n-1],-1});
            }
            else if(inorder[ind]==it){
                ans.push_back({it,it});
            }
            else{
                ans.push_back({inorder[ind-1],inorder[ind]});
            }
        }
        return ans;
    }