class Solution {
public:
    
    int maxDistance(vector<vector<int>>& grid) {
        
        int r = grid.size();
        int c = grid[0].size();
        
        // BFS queue
        queue<pair<int,int>>Q;
        
        // node visit track vector
        vector<vector<bool>>visited(r,vector<bool>(c,false));
        
        // Loop through all element of grid and insert node 1 positions in to queue and mark them visited
        // visited nodes will not be added in to queue again
        for(int i =0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j])
                {
                    Q.push(make_pair(i,j));
                    visited[i][j]  = true;
                }
            }
        }
        
        // If queue size ==0 or r*c then return -1 as there is no land or no water
        if(Q.size()==0 || Q.size()==(r*c))return -1;
        
        // BFS level count
        int l = -1;     
        int cx,cy,nx,ny;
        int curr;
        
        // row and column offset for generating child node positions -> up, down, left, right
        int rowOffset[] = {-1,1,0,0};
        int colOffset[] = {0,0,-1,1};
        
        // run BFS
        while(!Q.empty())
        {
            l++;
            int count = Q.size();

            // process all nodes of level l
            while(count--)
            {
                cy = Q.front().second;
                cx = Q.front().first;
                Q.pop();
                
                for(int k=0;k<4;k++)
                {
                    nx = cx+rowOffset[k];
                    ny = cy+colOffset[k];
                    
                    // Insert node positions which are not visited
                    if(nx>=0 && ny>=0 && nx<r && ny<c && !visited[nx][ny])
                        visited[nx][ny] = true,Q.push(make_pair(nx,ny));
                }  
            }
        }
                
        return l;
    }
};