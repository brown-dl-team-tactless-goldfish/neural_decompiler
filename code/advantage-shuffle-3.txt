int cmp(const void *a, const void *b) { return (*(int *)a - *(int *)b); }

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int *advantageCount(int *A, int ASize, int *B, int BSize, int *returnSize) {

    int *ans = (int *)malloc(sizeof(int) * ASize);
    int sort_b[BSize][2];  // sort B with original index

    for (int i = 0; i < BSize; i++) {
        sort_b[i][0] = B[i];
        sort_b[i][1] = i;
    }

    qsort(A, BSize, sizeof(int), cmp);
    qsort(sort_b, BSize, sizeof(sort_b[0]), cmp);

    int l = 0, r = BSize - 1;
    for (int i = 0; i < ASize; i++) {
        if (A[i] > sort_b[l][0]) {
            ans[sort_b[l][1]] = A[i];
            l++;
        } else {
            ans[sort_b[r][1]] = A[i];
            r--;
        }
    }

    *returnSize = ASize;
    return ans;
}