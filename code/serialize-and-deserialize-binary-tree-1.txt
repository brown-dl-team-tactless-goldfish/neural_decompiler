void DFS(struct TreeNode* root, char* ans, int* ansIdx, char* tmp)
{
    if(!root)
    {
        ans[(*ansIdx)++] = 'N'; /* means NULL */
        ans[(*ansIdx)++] = '#';
        return;
    }

    sprintf(tmp, "%d#", root->val);
    int len = strlen(tmp);
    memcpy(&ans[*ansIdx], tmp, sizeof(char) * len);
    *ansIdx += len; /* update index */
    DFS(root->left, ans, ansIdx, tmp);    
    DFS(root->right, ans, ansIdx, tmp);
}

/** Encodes a tree to a single string. */
char* serialize(struct TreeNode* root) {
    char* ans = (char*)calloc(100000, sizeof(char));
    char* tmp = (char*)calloc(7, sizeof(char));
    int ansIdx = 0;
    DFS(root, ans, &ansIdx, tmp);
    return ans;
}

struct TreeNode* DeDFS(char* data, int len, int* dataIdx)
{
    if(*dataIdx >= len)
        return NULL;
    
    if(data[*dataIdx] == 'N')
    {
        (*dataIdx) += 2;
        return NULL;        
    }
    
    struct TreeNode* root = (struct TreeNode*)calloc(1, sizeof(struct TreeNode));
    int negative = 0;
    if(data[(*dataIdx)] == '-')
    {
        (*dataIdx)++;
        negative = 1;
    }
    while(data[(*dataIdx)] != '#')
    {
        root->val *= 10;
        root->val += data[(*dataIdx)++] - 0x30;
    }
    if(negative)
        root->val *= -1;
    (*dataIdx)++;

    root->left = DeDFS(data, len, dataIdx);
    root->right = DeDFS(data, len, dataIdx);
    return root;
}

/** Decodes your encoded data to tree. */
struct TreeNode* deserialize(char* data) {
    struct TreeNode* root;
    int dataIdx = 0;    
    root = DeDFS(data, strlen(data), &dataIdx);
    return root;
}