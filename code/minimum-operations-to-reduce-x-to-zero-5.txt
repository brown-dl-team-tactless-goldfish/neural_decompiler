class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int n = nums.size();
        vector<int>ps(n, 0), ss(n, 0);
        ps[0] = nums[0];
        for(int i = 1; i<n; i++)ps[i] = ps[i-1] + nums[i];
        ss[n-1] = nums[n-1];
        for(int i = n-2; i>=0; i--)ss[i] = ss[i+1] + nums[i];
        int ans = INT_MAX;
        for(int i = 0; i<n; i++){
            if(ps[i] == x) ans = min(ans, i+1);
        }
        for(int j = 0; j<n; j++){
            if(ss[j] == x)ans = min(ans, n-j);
        }
        unordered_map<int, int>PS, SS;
        for(int i = 0; i<n; i++){
            PS[ps[i]] = i;
            SS[ss[n-i-1]] = n-i-1;
        }
        for(int i = 0; i<n; i++){
            int value = x - ps[i];
            if(SS.find(value)!=SS.end()){
                // it does find the avlue
                int idx = SS.find(value)->second;
                if(idx>i){
                    ans = min(ans, i + 1+n-idx);
                }
            }
        }
        // for(int i = n-1; i>=0; i--){
        //     int value = x - ss[i];
        //     if(PS.find(value)!=PS.end()){
        //         // it does find the avlue
        //         int idx = PS.find(value)->second;
        //         if(idx<i)
        //             ans = min(n-idx+ i+1, ans);
        //     }
        // }
        if(ans != INT_MAX)return ans;

        return -1;
        
    }
};