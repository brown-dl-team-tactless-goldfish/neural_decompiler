class Solution {
public:
    using vl = vector<long>;
    using vll = vector<vl>;
    int mod = 1e9 + 7;
    int solve(string &num, int e, int len, vll &dp, vll &same) {
        if (!len) return 0;
        if (dp[e][len] >= 0) return dp[e][len];
        
        int s = e - len + 1;
        long ans = solve(num, e, len - 1, dp, same);
        if (num[s] == '0') (void) ans;
        else if (!s) ans = (ans + 1) % mod;
        else if (s >= len && same[s - len][s] >= len)
            ans = (ans + solve(num, s - 1, len, dp, same)) % mod;
        else
            ans = (ans + solve(num, s - 1, min(len - 1, s), dp, same)) % mod;
        return dp[e][len] = ans;
    }
    int numberOfCombinations(string &num) {
        int n = num.size();
        vll dp(n, vl(n + 1, -1)), same(n + 1, vl(n + 1));
        for (int i = n - 1; i >= 0; i--)
            for (int j = i + 1; j < n; j++)
                same[i][j] = num[i] == num[j] ? same[i + 1][j + 1] + 1 : 
                             num[i] > num[j] ? 0 :
                             INT_MAX;
        
        return solve(num, n - 1, n, dp, same);
    }
};