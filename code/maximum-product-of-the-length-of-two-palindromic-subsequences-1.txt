   if(i>=s.size()){
        if(ispalindrome(s1) && ispalindrome(s2)){
            int x = s1.size()*s2.size();
            c = max(x,c);
        }
        return;
    }
    //not pic any 
    dfs(s,i+1,s1,s2,c);
    
    //pic in first string s1
    s1.push_back(s[i]);
    dfs(s,i+1,s1,s2,c);
    s1.pop_back();
    
    //pic in second string s2
    s2.push_back(s[i]);
    dfs(s,i+1,s1,s2,c);
    s2.pop_back();
    
}
bool ispalindrome(string s){
    int i = 0,j = s.size()-1;
    while(i<j){
        if(s[i]!=s[j]) return false;
        i++;
        j--;
    }
    return true;
}
int maxProduct(string s) {
    string s1 = "",s2 = "";
    int c = 0;
    dfs(s,0,s1,s2,c);
    return c;
}