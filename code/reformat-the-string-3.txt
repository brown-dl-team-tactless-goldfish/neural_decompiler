char * reformat(char * s){
    

    int i,n=strlen(s),temp=0,c=0,s1=0,s2=0,k=0,k1=0;
    char a[10000];
    a[0]='\0';

    quick_sort(s,0,n-1);
    
    for(i=0;i<strlen(s);i++)
    {
        if(s[i]>='a'&&s[i]<='z')
        {
            ++s1;
            if(c==0)
            {
                temp=i;
                ++c;
            }
        }
        else if (s[i]>='0'&&s[i]<='9')
            ++s2;
    }
    
    
    if((s1>s2&&s1-s2>1)||(s2>s1&&s2-s1>1))
        return "";
    
    
    if(s1>=s2)
    {
        k1=0;
    for(i=temp;s[i]!='\0';i++)
    {
        a[k]=s[i];
        ++k;
        a[k]=s[k1];
        ++k;
        ++k1;
    }            
    }
    else if(s1<s2)
    {
    for(i=0;s[i]>='0'&&s[i]<='9';i++)
    {
        a[k]=s[i];
        ++k;
        a[k]=s[temp];
        ++temp;
        ++k;
    }         
    }
 

    a[n]='\0';
    strcpy(s,a);
    
    return s;
}


void quick_sort(char nums[],int f, int l) {
  int i, j, p = 0;
    char t='\0';

  if (f < l) {
    p = f;
    i = f;
    j = l;

    while (i < j) {
      while (nums[i] <= nums[p] && i < l)
        i++;
      while (nums[j] > nums[p])
        j--;
      if (i < j) {
        t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
      }
    }

    t = nums[p];
    nums[p] = nums[j];
    nums[j] = t;
    quick_sort(nums,f, j - 1);
    quick_sort(nums,j + 1, l);
  }
}
