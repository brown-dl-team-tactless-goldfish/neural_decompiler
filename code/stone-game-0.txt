// dp[i, j ] = max(p[i] - dp[i+1,j], p[j] - dp[i , j+1]);

int max (int a , int b){
    return a > b ? a : b;
}


bool stoneGame(int* piles, int pilesSize){
   
    int ** arr = (int **)malloc(sizeof(int*)*pilesSize);
    
    for( int i = 0 ; i < pilesSize ; i++){
        int * tmp = (int *)malloc(sizeof(int)*pilesSize);
        memset(tmp, 0 , pilesSize);
        arr[i] = tmp;
    }
    
    for(int i = 0; i < pilesSize; i++){
        arr[i][i] = piles[i];
    }
    
    for( int dis = 1 ; dis < pilesSize ; dis++){
        for( int i = 0 ; i < pilesSize-dis ; i++){
            arr[i][i+dis] = max(piles[i]-arr[i+1][i+dis], piles[i+dis] - arr[i][i+dis]); 
        }
    }
    return arr[0][pilesSize-1] > 0;
}

