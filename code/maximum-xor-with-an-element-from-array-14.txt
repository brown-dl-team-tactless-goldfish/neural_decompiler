class Trie{
    Trie * a[2];
    int ct;
    public:
        Trie(){
            a[0] = NULL;
            a[1] = NULL;
            ct = 0; 
        }
        string get32(int a){
            string s;
            while(a > 0){
                s += (a % 2 + '0');
                a /= 2;
            }
            while(s.size() < 32){
                s += '0';
            }
            reverse(s.begin(), s.end());
            return s;
        }
        void add_(int a){
            string s = get32(a);
            Trie *ptr = this;
            for(int i = 0; i < 32; i++){
                int ind = s[i] - '0';
                if(!ptr -> a[ind]){
                    ptr -> a[ind] = new Trie;
                }
                ptr -> a[ind] -> ct++;
                ptr = ptr -> a[ind];
            }
        }
        void delete_(int a){
            string s = get32(a);
            Trie *ptr = this;
            for(int i= 0; i < 32; i++){
                int ind = s[i] - '0';
                ptr -> a[ind] -> ct--;
                if(ptr -> a[ind] -> ct == 0){
                    ptr -> a[ind] = NULL;
                    break;
                }
                ptr = ptr -> a[ind];
            }
        }
        int max_xor(int n){
            int ans = 0;
            string s = get32(n);
            Trie *ptr = this;
            for(int i= 0; i < 32; i++){
                int ind = (s[i] - '0');
                if(ptr -> a[ind ^ 1]){
                    ans += (1 << (31 - i));
                    ptr = ptr -> a[ind ^ 1];
                }
                else {
                    ptr = ptr -> a[ind];
                }
            }
            return ans;
        }
};
bool comp(vector<int>&a, vector<int>&b){
    return a[1] > b[1];
}
void delete_(Trie &obj, int a, vector<int>&nums){
    int n = nums.size();
    for(int i = n-1; i >= 0; i--){
        if(nums[i] > a){
            obj.delete_(nums[i]);
            nums.pop_back();
            continue;
        }
        break;
    }
}
class Solution {
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        sort(nums.begin(), nums.end());
        int n = queries.size();
        for(int i = 0; i < n; i++){
            queries[i].push_back(i);
        }
        sort(queries.begin(), queries.end(), comp);
        Trie obj;
        int m = nums.size();
        for(int i = 0; i < m; i++){
            obj.add_(nums[i]);
        }
        vector<int>ans(n);
        for(int i = 0; i < n; i++){
            delete_(obj, queries[i][1], nums);
            if(nums.size() == 0){
                ans[queries[i][2]] = -1;
            }
            else{
                int p = obj.max_xor(queries[i][0]);
                ans[queries[i][2]] = p;
            }
        }
        return ans;
    }
};