class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        if len(nums) == 1: return 0
        for i in range(31,-1,-1):
            one, zero = [], [] 
            for num in nums:
                if (num & (1<<i))>>i: one.append(num)
                else: zero.append(num)
            if one and zero: return self.recpart(one,zero,i-1) # initial partition
        return 0 # if no partition succeeded, all nums are identical
    
    def recpart(self,group1,group2,i):
		# recursive partition
        if i == 0 or len(group1)==1 or len(group2) == 1:
            return max(x^y for x in group1 for y in group2)
        g1one, g1zero = [], [] 
        for num in group1:
            if (num & (1<<i))>>i: g1one.append(num)
            else: g1zero.append(num)
        g2one, g2zero = [], [] 
        for num in group2:
            if (num & (1<<i))>>i: g2one.append(num)
            else: g2zero.append(num)
        r1 = self.recpart(g1one,g2zero,i-1) if g1one and g2zero else 0
        r2 = self.recpart(g2one,g1zero,i-1) if g2one and g1zero else 0
        return max(r1,r2) if max(r1,r2)>0 else self.recpart(group1,group2,i-1)