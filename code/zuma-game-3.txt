class Solution {
public:
    int findMinStep(string board, string hand) {
        vector<int> num(6, 0); // num[0] is how many balls we already used ( = hand.size()-(num[1]+...+num[5]) )
        unordered_map<char, int> u;
        u['R']=1, u['Y']=2, u['B']=3, u['G']=4, u['W']=5;
        for (char c : hand) num[u[c]] ++;
        
        // use queue to perform DFS
        queue<pair<string, vector<int>>> q; 
        q.push({board, num});
        while (q.size()) {
            auto tmp = q.front();
            q.pop();
            tmp.first += '#';
            for (int i=0; i<tmp.first.size()-1; i++) {
                if (tmp.first[i] != tmp.first[i+1] && tmp.second[u[tmp.first[i]]]) {
                    auto tmp1 = tmp;
                    tmp1.first.insert(i, 1, tmp.first[i]);
                    tmp1.first = autoremove(tmp1.first);
                    tmp1.second[u[tmp.first[i]]] --;
                    tmp1.second[0] ++;
                    if (tmp1.first.empty()) return tmp1.second[0]; // find a way to remove all letters
                    q.push(tmp1);
                }
            }
        }
        return -1;
    }
    
    // Remove consecutive letters (board[-1] is '#')
    // This could be done simply by recursive way. Here I use stack to do it iteratively.
    string autoremove(string board) { 
        vector<vector<int>> balls;
        for (char c : board) {
            if (balls.empty()) balls.push_back({c, 1});
            else {
                if (balls.back()[0] == c) {
                    if (balls.back()[1] > -1) balls.back()[1] ++;
                    if (balls.back()[1] >= 3) balls.back()[1] = -1; // need to be deleted
                }
                else {
                    if (balls.back()[1] == -1) balls.pop_back(); // delete letters
                    if (balls.empty() || balls.back()[0] != c) balls.push_back({c, 1});
                    else {
                        if (balls.back()[1] > -1) balls.back()[1] ++;
                        if (balls.back()[1] >= 3) balls.back()[1] = -1;
                    }
                }
            }
        }
        balls.pop_back(); // delete '#'
        string str = "";
        for (auto ball : balls)
            while (ball[1]--) str += char(ball[0]);
        return str;
    }
};