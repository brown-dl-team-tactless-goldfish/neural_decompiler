class Solution {
public:
    int n;
    vector<int> segtree;
    
    int BestRange(int start, int end) {
        int res = 0;
        start += 1e5 - 1;
        end += 1e5 - 1;
        
        while (start < end) {
            res = max({segtree[start], segtree[end], res});
            if (start % 2 == 0) start++;
            if (end % 2 == 1) end--;
            start = (start - 1) / 2;
            end = (end - 1) / 2;
        }
        
        if (start == end) res = max(segtree[start], res);
        
        return res;
    }
    
    void Update(int idx, int newlen) {
        idx += 1e5 - 1;
        while (idx >= 0) {
            segtree[idx] = max(newlen, segtree[idx]);
            if (idx == 0) idx = -1;
            else idx = (idx - 1) / 2;
        }
        return;
    }
    
    int lengthOfLIS(vector<int>& nums, int k) {
        int ans = 0;
        n = nums.size();
        segtree.resize(2e5);
        
        for (int i = 0; i < n; i++) nums[i]--;
        
        for (int i : nums) {
            int longest = 1;
            if (i > 0) longest = BestRange(max(i - k, 0), i - 1) + 1;
            ans = max(longest, ans);
            Update(i, longest);
        }
        
        return ans;
    }
};