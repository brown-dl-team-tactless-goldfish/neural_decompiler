# Time complexity: O(NlogN)
# Space complexity: O(N)

class Solution:
    def findMinDifference(self, timePoints: List[str]) -> int:
        timePoints.sort()
        # print("timePoints = ", timePoints)
        n = len(timePoints)

        print("n = ", n)

        times = []
        bench_0 = 0
        bench_24 = 24*60 + 0

        for time in timePoints:
            # print("time = ", time)
            h, m = time.split(":")
            # print("h = ", h, " m = ", m)
            diff_to_0 = int(h)*60 + int(m) - bench_0
            diff_to_24 = bench_24 - (int(h)*60 + int(m))

            # print("diff_to_0 = ", diff_to_0, " diff_to_24 = ", diff_to_24)
            times.append([diff_to_0, diff_to_24])

        # print("times = ", times)

        res = float('inf')
        for i in range(n-1):
            time1 = times[i]
            time2 = times[i+1]

            diff_1 = abs(time2[0]-time1[0])
            diff_2 = abs(time2[1]+time1[0])
            # print("diff_1 = ", diff_1, " diff_2 = ", diff_2)

            res = min(res, diff_1, diff_2)

        time1 = times[0]
        time2 = times[-1]
        diff_1 = abs(time2[0]-time1[0])
        diff_2 = abs(time2[1]+time1[0])
        # print("diff_1 = ", diff_1, " diff_2 = ", diff_2)

        res = min(res, diff_1, diff_2)

        # print("res = ", res)
        return res