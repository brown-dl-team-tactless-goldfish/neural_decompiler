/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* paser(char* s){
    char *c=(char*)malloc(10*sizeof(char));
    int count=0;
    int *array=(int*)malloc(3*sizeof(int));
    array[0]=0;
    array[1]=-1;
    array[2]=-1;
    int len=strlen(s);
    for(int i=0;i<len;i++){
        if(s[i]==':'){
            c[count++]='\0';
            break;
        }else{
            c[count++]=s[i];
        }
    }
    array[0]=atoi(c);
    int has=0;
    for(int i=0;i<len;i++){
        if(s[i]=='s'){
            has=1;
        }
    }
    count=0;
    for(int i=4;i<len;i++){
        if(s[i]==':'){
            count=i;
            break;
        }
    }
    if(has==0){
        array[2]=atoi(&s[count+1]);
    }else{
        array[1]=atoi(&s[count+1]);
    }
    return array;
}
int* exclusiveTime(int n, char** logs, int logsSize, int* returnSize) {
    *returnSize=n;
    int *ret=(int*)calloc(n,sizeof(int));
    int **array=(int**)malloc(logsSize*sizeof(int*));
    int count=0;
    int sum=0;
    for(int i=0;i<logsSize;i++){
        int *tamp=paser(logs[i]);
        if(count>0
           &&tamp[1]==-1){
            int tamp1=tamp[2]-array[count-1][1]+1;
            ret[tamp[0]]+=tamp1;
            
            sum+=tamp1;
            count--;
            for(int j=0;j<count;j++){
                array[j][1]+=tamp1;
            }
        }else{
            array[count++]=tamp;
        }
    }
    return ret;
}