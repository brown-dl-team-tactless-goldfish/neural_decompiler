#pragma GCC optimize("Ofast","inline","fast-math","unroll-loops","no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native","f16c")
static const auto fast = []() {ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); return 0; } ();
class Solution {
public:
    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {
        int n = queries.size();
        vector<int> ans(n, -1);
        vector<pair<int, int>> q(n);
        for (int i = 0; i < n; ++i) {
            q[i] = {queries[i], i};
        }
        sort(q.begin(), q.end());
        sort(intervals.begin(), intervals.end());
        int m = intervals.size(), j = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        for (int i = 0; i < n; ++i) {
            while (j < m && intervals[j][0] <= q[i].first) {
                pq.push({intervals[j][1] - intervals[j][0] + 1, intervals[j][1]});
                ++j;
            }
            while (!pq.empty() && pq.top().second < q[i].first) {
                pq.pop();
            }
            if (!pq.empty()) {
                ans[q[i].second] = pq.top().first;
            }
        }
        return ans;
    }
};