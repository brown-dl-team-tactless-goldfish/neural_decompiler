using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _2062_sliding_window
{
    class Program
    {
        static void Main(string[] args)
        {
            var result = CountVowelSubstrings("cuaieuouac");
        }

        /// <summary>
        /// sliding window 
        /// study code: 
        /// https://leetcode.com/problems/count-vowel-substrings-of-a-string/discuss/1563916/C-Sliding-Window
        /// </summary>
        /// <param name="word"></param>
        /// <returns></returns>
        public static int CountVowelSubstrings(string word)
        {
            if (word == null || word.Length == 0)
            {
                return 0;
            }

            // pad one space char, why? 
            var padding = word + " "; 

            int start = 0;
            var count = 0;

            var map = new Dictionary<char, int>();

            // two loops - outside, inside one is for sliding window left pointer
            for (int outside = 0; outside < padding.Length; outside++)
            {
                var c = padding[outside];
                if ("aeiou".Contains(c))
                {
                    if(!map.ContainsKey(c))
                    {
                        map.Add(c, 0);
                    }

                    map[c]++;

                    if (map.Keys.Count == 5)
                    {
                        count++;
                        var dict1 = new Dictionary<char, int>(map);
                        int left = start;

                        // Find more substrings containing all vowel chars - 
                        // move left pointer - index
                        while (left < outside)
                        {
                            dict1[padding[left]]--;

                            if (dict1[padding[left]] == 0)
                            {
                                break;
                            }

                            count++;
                            left++;
                        }
                    }
                }
                else
                {
                    // reset, start new substring search
                    map.Clear();
                    start = outside + 1;
                }
            }

            return count;
        }
    }
}