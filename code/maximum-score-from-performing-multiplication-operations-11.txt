class Solution {
    int dp[1001][1001];
    int m, n;
    int maximumScoreHelper(vector<int>& nums, int s, int i, vector<int>& multipliers) {
        if (dp[s][i] != INT_MIN) return dp[s][i];
        if (i >= m) return dp[s][i] = 0;
        
        // calculate end by adding (n - i - 1) indexes to start
        int e = s + n - i - 1;
        return dp[s][i] = max(nums[s] * multipliers[i] +
                                 maximumScoreHelper(nums, s + 1, i + 1, multipliers), 
                                 nums[e] * multipliers[i] + maximumScoreHelper(nums, s, i + 1, multipliers));
    }
public:
    int maximumScore(vector<int>& nums, vector<int>& multipliers) {
        n = nums.size();
        m = multipliers.size();
        for (int i = 0; i < 1001; i++) {
            for (int j = 0; j < 1001; j++) {
                dp[i][j] = INT_MIN;
            }
        }
        return maximumScoreHelper(nums, 0, 0, multipliers);
    }
};