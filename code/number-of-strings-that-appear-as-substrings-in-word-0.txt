typedef struct letters
{
    int   id;
    struct letters* next;   
}lets;

int numOfStrings(char ** patterns, int patternsSize, char * word){
    int i;
    
    lets** hTable = (lets**)malloc(26 * sizeof(lets*));
    for(i = 0; i < 26; i ++){
        hTable[i] = (lets*)malloc(sizeof(lets));
        hTable[i]->id = -1;
        hTable[i]->next = NULL;
    }
        
    //build hash table  >>>>
    lets* temp;
    for(i = 0; i < strlen(word); i++){
        lets* node = (lets*)malloc(sizeof(lets));
        node->id =i;
        node->next = NULL;
        temp = hTable[word[i] - 'a'];
        
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next = node;
    }
    //<<<<
    int ans = 0;
    for(i = 0; i < patternsSize; i++){
        int key =  patterns[i][0] - 'a';
        temp = hTable[key];
        
        while(temp->next != NULL){
            if( strncmp(patterns[i], &word[temp->next->id] , strlen(patterns[i])) == 0){
                ans++;
                break;
            }
            temp = temp->next;
        }
    }
    lets* temp2;
    for(i = 0; i < 26; i++){
        temp = hTable[i];
        while(temp){
            temp2 = temp->next;
            free(temp);
            temp = temp2;           
        }

    }
    free(hTable);
    
    return ans; 
}