char * largestPalindromic(char * num){
    int n = strlen(num) ;
    int digit[10] = {0} ;
    char* ans ;
    for(int i = 0; i < n; i++){
        digit[num[i] - '0']++ ;
    }
    
    for(int i = 1; i <10 ; i++){
        if( digit[i] > 1 )
            break ;
        if(i == 9){
            for(int j = 9; j >= 0 ; j--){
                if( digit[j] ){
                    ans = malloc(2) ;
                    ans[1] = '\0' ;
                    ans[0] = j + '0' ;
                    goto exit ;
                }
                    
            }        
        }
    }
    
    int len = 0 ;
    bool flag = false ;
    for(int i = 0; i < 10; i++){
        len += (digit[i]/2) * 2 ;
        if(digit[i] % 2)
            flag = true ;
    }
    len += flag ;    
    ans = malloc( (len + 1) * sizeof(char)) ;
    ans[len] = '\0' ;
    int a_idx = 0 ;
    
    for(int i = 9; i >= 0; i--){
        for(int j = 0; j < digit[i]/2; j++){
            ans[a_idx] = '0' + i ;
            ans[len-1-a_idx] = '0' + i ;
            a_idx++ ;
        }
    }
    if(flag){
        for(int i = 9; i >= 0; i--){
            if(digit[i] % 2){
                ans[a_idx] = '0' + i ;
                a_idx++ ;
                break ;
            }
        }
    }
    exit :
    return ans ;
}