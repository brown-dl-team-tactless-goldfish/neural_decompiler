class Solution {
public:
 // static bool operator(const pair<int,int>&p1, const pair<int,int>& p2)
static bool comp(pair<int,int>&p1, pair<int,int>& p2)
{
    if(p1.first==p2.first)
    {
        if(p1.second<p2.second) return true;
        return false;
    }
    if(p1.first<p2.first)
        return false;
    return true;
}
 
    vector<int> topStudents(vector<string>& positive_feedback, vector<string>& negative_feedback, vector<string>& report, vector<int>& student_id, int k) {
        vector<int> ans;
       vector<pair<int,int>>points;
        map<string,int> p,n;
        for(int i=0;i<positive_feedback.size();i++)
        {
            p[positive_feedback[i]]=1;
        }
        for(int i=0;i<negative_feedback.size();i++)
        {
            n[negative_feedback[i]]=1;
        }
        for(int i=0;i<report.size(); i++)
        {
            int point=0;
            stringstream s(report[i]);
            string word;
             while (s >> word)
             {
                 cout<<word +"  ";
                 if(p[word]) point+=3;
                 if(n[word]) point-=1;
             }
            points.push_back({point,student_id[i]});
        }
        sort(points.begin(),points.end(),comp);
        for(int i=0;i<k;i++)
        {
            pair<int,int> p=points[i];
            int t=p.second;
            ans.push_back(t);
        }
        return ans;
    }
};