int CalculateReturnSize(int** ppnGraph, char cGraphSize, int* pnGraphColSize, char cIndex)
{
    // hit node n-1, return one valid path
    if(cIndex == cGraphSize) return 1;

    // sum up all valid paths
    int nRet = 0;
    for(char i=pnGraphColSize[cIndex]-1; i>=0; i--)
    {
        nRet += CalculateReturnSize(ppnGraph, cGraphSize, pnGraphColSize, ppnGraph[cIndex][i]);
    }

    return nRet;
}

void AllPathsSourceTargetInner(int** ppnGraph, char cGraphSize, int* pnGraphColSize, int* pnReturnSize, int** ppnReturnColumnSizes, int** ppnRet, char cGraphIndex, char* pcBuff, char cBuffIndex)
{
    // hit node n-1, write current path
    if(cGraphIndex == cGraphSize)
    {
        // write previous index
        ppnRet[*pnReturnSize] = (int*) malloc((cBuffIndex+1)*sizeof(int));
        for(char i=0; i<cBuffIndex; i++) ppnRet[*pnReturnSize][i] = pcBuff[i];
        ppnRet[*pnReturnSize][cBuffIndex++] = cGraphSize;

        // write last target index
        (*ppnReturnColumnSizes)[(*pnReturnSize)++] = cBuffIndex;
        return;
    }

    // put current index into buff and trace further next paths
    pcBuff[cBuffIndex] = cGraphIndex;
    for(char i=pnGraphColSize[cGraphIndex]-1; i>=0; i--)
    {
        AllPathsSourceTargetInner(ppnGraph, cGraphSize, pnGraphColSize, pnReturnSize, ppnReturnColumnSizes, ppnRet, ppnGraph[cGraphIndex][i], pcBuff, cBuffIndex+1);
    }
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** allPathsSourceTarget(int** graph, int graphSize, int* graphColSize, int* returnSize, int** returnColumnSizes){
    char cGraphSize = graphSize - 1;
    *returnSize = CalculateReturnSize(graph, cGraphSize, graphColSize, 0);
    *returnColumnSizes = (int*) malloc((*returnSize)*sizeof(int));
    int** ppnRet = (int**) malloc((*returnSize)*sizeof(int*));

    char acBuff[cGraphSize];
    *returnSize = 0;
    AllPathsSourceTargetInner(graph, cGraphSize, graphColSize, returnSize, returnColumnSizes, ppnRet, 0, acBuff, 0);

    return ppnRet;
}