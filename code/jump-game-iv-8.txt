public class Solution
{
    public int MinJumps(int[] arr)
    {
        IDictionary<int, IList<int>> dic = new Dictionary<int, IList<int>>();
        for (int i = arr.Length - 1; i >= 0; i--)
        {
            int x = arr[i];
            if (!dic.ContainsKey(x))
                dic.Add(x, new List<int>());
            dic[x].Add(i);
        }

        bool[] visit = new bool[arr.Length];
        Queue<int> q = new Queue<int>();
        q.Enqueue(0);
        int depth = 0;
        while (q.Count > 0)
        {
            int count = q.Count;
            for (int i = 0; i < count; i++)
            {
                int cur = q.Dequeue();
                if (cur == arr.Length - 1)
                    return depth;
                if (visit[cur]) continue;
                visit[cur] = true;
                var next = dic[arr[cur]];
                if (cur - 1 >= 0) next.Add(cur - 1);
                if (cur + 1 < arr.Length) next.Add(cur + 1);
                foreach (int x in dic[arr[cur]])
                {
                    q.Enqueue(x);
                }
                next.Clear();
            }
            depth++;
        }

        return arr.Length - 1;
    }
}