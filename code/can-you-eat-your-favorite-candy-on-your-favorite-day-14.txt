class Solution {
public:
    vector<bool> canEat(vector<int>& candiesCount, vector<vector<int>>& queries) {
        vector<bool> ans;
        vector<long long> preSum(candiesCount.size(), 0);
        preSum[0] = candiesCount[0];
        for(int i=1; i<candiesCount.size(); i++) {
            preSum[i] = preSum[i-1] + candiesCount[i];
        }
        for(auto x:queries) {
            if(x[0] > x[1]) {
                long long req = preSum[x[0]]-candiesCount[x[0]];
                long long have = (x[1]+1)*(x[2]);
                if(preSum[x[0]] >= x[1]+1 && have>req) {
                    ans.push_back(true);
                } else {
                    ans.push_back(false);
                }
            }
            else {
                if(preSum[x[0]] >= x[1]+1 && (long)(x[1]+1)*x[2] > preSum[x[0]]-candiesCount[x[0]]) {
                    ans.push_back(true);
                } else {
                    ans.push_back(false);
                }
            }
        }
        return ans;
    }
};