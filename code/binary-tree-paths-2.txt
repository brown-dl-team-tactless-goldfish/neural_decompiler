int createpath(char ***arr, char *prefix, int* returnSize) {
	*arr = realloc(*arr, sizeof(char*) * (*returnSize + 1));
   (*arr)[*returnSize] = malloc(strlen(prefix) + 1);
   strcpy((*arr)[*returnSize], prefix);
	*returnSize = *returnSize + 1;
	return *returnSize - 1;
}
void addpath(char ***arr, int pno, int val) {
	char temp[100];
	int len, len_s;
	memset(temp, '\0', 100);
	if(strlen((*arr)[pno]) == 0) {
		len = snprintf(temp, 100, "%d", val);
	}else {
		len = snprintf(temp, 100, "->%d", val);
	}
	temp[len] = '\0';
   len = strlen((*arr)[pno]) + len;
	(*arr)[pno] = realloc((*arr)[pno], len + 1);
	strcat((*arr)[pno], temp);
   (*arr)[pno][len] = '\0';
}
void binaryTreePaths_r(struct TreeNode* root, int* returnSize, int pno, char ***arr) {
	if(root->left == NULL && root->right == NULL) {
		addpath(arr, pno, root->val);
	} else if(root->left == NULL && root->right != NULL) {
		addpath(arr, pno, root->val);
		binaryTreePaths_r(root->right, returnSize, pno, arr);
	} else if(root->right == NULL && root->left != NULL) {
		addpath(arr, pno, root->val);
		binaryTreePaths_r(root->left, returnSize, pno, arr);
	} else if(root->left != NULL && root->right != NULL) {
		addpath(arr, pno, root->val);
		int right_no = createpath(arr, (*arr)[pno], returnSize);
		binaryTreePaths_r(root->left, returnSize, pno, arr);
		binaryTreePaths_r(root->right, returnSize, right_no, arr);
	}
	return;
}
char ** binaryTreePaths(struct TreeNode* root, int* returnSize){
	char **ret = malloc(sizeof(char*));
	*ret = malloc(sizeof(char));
	(*ret)[0] = '\0';
   *returnSize = 0;
	if(root == NULL) 
		return ret;

	*returnSize = 1;
	binaryTreePaths_r(root, returnSize , 0, &ret);
	return ret;
}
