class Solution {
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        int[][] grid = new int[m][n];
        int ans = 0;
        
        for(int[] w : walls){
            grid[w[0]][w[1]] = 2;  // Mark all the walls.
        }
        
        Deque<int[]> q = new ArrayDeque<>();
        for(int[] g : guards){
            grid[g[0]][g[1]] = 1;  // Mark all the guards
            q.add(new int[]{g[0], g[1]});
        }
        
        while(!q.isEmpty()){
            int[] t = q.poll();
            int row = t[0], col = t[1];
            
            int r = row+1, c = col;
            while(r < m && grid[r][c] != 1 && grid[r][c] != 2){
                grid[r++][c] = 3;
            }
            r = row-1; c = col;
            while(r >=0 && grid[r][c] != 1 && grid[r][c] != 2){
                grid[r--][c] = 3;
            }
            r = row; c = col+1;
            while(c < n && grid[r][c] != 1 && grid[r][c] != 2){
                grid[r][c++] = 3;
            }
            r = row; c = col-1;
            while(c >=0 && grid[r][c] != 1 && grid[r][c] != 2){
                grid[r][c--] = 3;
            }
        }
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 0) ans++;
            }
        }
        //System.out.println(Arrays.deepToString(grid));
        return ans;  
    }
}