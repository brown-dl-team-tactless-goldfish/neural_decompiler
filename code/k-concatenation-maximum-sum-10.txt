class Solution {
    long long M = 1e9 + 7 ;
    int maxSum(vector<int>& arr, int round){
        long long sum = 0 ;
        long long ret = 0 ; 
        for(int i = 0; i < round; i++){
            for(int j = 0; j < arr.size(); j++){
                sum = max(0LL , sum + arr[j]) ;
                ret = max(ret, sum) ;
            }
        }
        return ret ;
    }
public:
    int kConcatenationMaxSum(vector<int>& arr, int k) {
        long long total = 0 ;
        for(int i = 0; i < arr.size() ; i++)
        {
            total += arr[i] ;
        }

        if(k == 1)
            return maxSum(arr, 1) ;
        if(k == 2 || total < 0){
            return max( maxSum(arr, 1), maxSum(arr, 2) ) % M ;
        }        
        return (maxSum(arr, 2) + total * (k-2)) % M ;
        
    }
};