int cmp(const void* a, const void* b){
    int* A = *(int**)a;
    int* B = *(int**)b;
    if(A[1] == B[1])
        return A[0] - B[0];
    else
        return A[1] - B[1];
}
int getKth(int lo, int hi, int k){
    int* dp = calloc(9 * hi , sizeof(int));

    dp[1] = 0;
    for(int i = 2; i <= hi; i++){
        int cn = 0;
        int val = i;
        while(val > 1){
            if(val %2 == 0){
                cn++;
                val /= 2;
            }
            else{
                val = val*3 + 1;
                cn++;
            }
            if(val < i){
                dp[i] = cn + dp[val] ;
                break;
            }
        }
    }
    
    int** data = malloc(((hi - lo)+1) * sizeof(int*)) ;
    for(int i = lo;  i <= hi; i++){
        data[i-lo] = malloc(2 * sizeof(int*));
        data[i-lo][0] = i;
        data[i-lo][1] = dp[i];
    }
    qsort(data, hi-lo + 1, sizeof(int*), cmp);
    int ans = data[k-1][0];
    //free momory
    free(dp);
    for(int i = 0; i < hi-lo + 1 ; i++){
        free(data[i]);
    }
    free(data);    
    return ans;
}