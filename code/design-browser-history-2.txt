typedef struct {
    char** url;
    int size;
    int currIdx;
} BrowserHistory;

BrowserHistory* browserHistoryCreate(char * homepage) {
    int len = strlen(homepage);
    BrowserHistory* obj = (BrowserHistory*)calloc(1, sizeof(BrowserHistory));
    obj->url = (char**)calloc(101, sizeof(char*));
    for(int i = 0; i < 101; i++)
        obj->url[i] = (char*)calloc(21, sizeof(char));
    memcpy(obj->url[0], homepage, sizeof(char)*len);
    obj->currIdx = 0;
    obj->size = 1;
    return obj;
}

void browserHistoryVisit(BrowserHistory* obj, char * url) {
    int len = strlen(url);
    memcpy(obj->url[++obj->currIdx], url, sizeof(char) * len);
    obj->url[obj->currIdx][len] = '\0';
    obj->size = obj->currIdx + 1;
}

char * browserHistoryBack(BrowserHistory* obj, int steps) {
    obj->currIdx -= steps;
    if(obj->currIdx < 0)
        obj->currIdx = 0;
    return obj->url[obj->currIdx];
}

char * browserHistoryForward(BrowserHistory* obj, int steps) {
    obj->currIdx += steps;
    if(obj->currIdx >= obj->size)
        obj->currIdx = obj->size - 1;
    return obj->url[obj->currIdx];  
}

void browserHistoryFree(BrowserHistory* obj) {
    for(int i = 0; i < obj->size; i++)
        free(obj->url[i]);
    free(obj->url);
    free(obj);
}