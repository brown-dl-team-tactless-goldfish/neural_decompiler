class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        vector<int> adj[100][2], ans(n, -1);
        for (auto& e: redEdges) {
            adj[e[0]][0].push_back(e[1]);
        }
        for (auto& e: blueEdges) {
            adj[e[0]][1].push_back(e[1]);
        }
        int dis = 0;
        queue<pair<int, int>> q;
        q.emplace(0, 0), q.emplace(0, 1);
        bool visited[100][2] = {};
        visited[0][0] = visited[0][1] = 1;
        while (!q.empty()) {
            int sz = size(q);
            while (sz--) {
                auto [u, c] = q.front(); q.pop();
                if (ans[u] == -1 || dis < ans[u]) {
                    ans[u] = dis;
                }
                c ^= 1;
                for (int v: adj[u][c]) {
                    if (!visited[v][c]) {
                        visited[v][c] = 1;
                        q.emplace(v, c);
                    }
                }
            }
            dis++;
        }
        return ans;
    }
};