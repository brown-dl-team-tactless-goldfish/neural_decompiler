


typedef struct {
    char ** History;
    int current_idx;
    int total_list;
} BrowserHistory;


BrowserHistory* browserHistoryCreate(char * homepage) {
    BrowserHistory* return_history = malloc(sizeof(BrowserHistory));
    return_history->History = malloc(sizeof(char*)*5001);
    return_history->History[0] = malloc(sizeof(char)*21);
    memcpy(return_history->History[0],homepage,strlen(homepage));
    return_history->History[0][strlen(homepage)] = '\0';
    return_history->current_idx = 0;
    return_history->total_list = 1;
    return return_history;
}

void browserHistoryVisit(BrowserHistory* obj, char * url) {
  obj->current_idx++;
  if(obj->History[obj->current_idx]){
    obj->History[obj->current_idx] = malloc(sizeof(char)*21);
  }
  memcpy(obj->History[obj->current_idx],url,strlen(url));
  obj->History[obj->current_idx][strlen(url)] = '\0';
  obj->total_list = obj->current_idx + 1;
}

char * browserHistoryBack(BrowserHistory* obj, int steps) {
  obj->current_idx = fmax(0,obj->current_idx - steps);
  return obj->History[obj->current_idx];
}

char * browserHistoryForward(BrowserHistory* obj, int steps) {
  obj->current_idx = fmin(obj->total_list -1,obj->current_idx + steps);
  return obj->History[obj->current_idx];  
}

void browserHistoryFree(BrowserHistory* obj) {
    while(obj->current_idx > -1){
        free(obj->History[obj->current_idx]);
        obj->current_idx--;
    }
    free(obj);
}

/**
 * Your BrowserHistory struct will be instantiated and called as such:
 * BrowserHistory* obj = browserHistoryCreate(homepage);
 * browserHistoryVisit(obj, url);
 
 * char * param_2 = browserHistoryBack(obj, steps);
 
 * char * param_3 = browserHistoryForward(obj, steps);
 
 * browserHistoryFree(obj);
*/