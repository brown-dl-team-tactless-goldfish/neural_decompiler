int minCost(vector<vector<int>>& grid) {
        priority_queue< pip, vector<pip>, greater<pip>> pq;
        pq.push({0,{0,0}});
        int n = grid.size();
        int m = grid[0].size();
        int dp[n][m];
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) dp[i][j] = m*n;
        }
        dp[0][0]=0;
        int r,c,w;
        vector <int> vr =  {0, 0,1,-1};
        vector <int> vc = {1,-1 ,0 ,0};
        while(!pq.empty()){
            auto it = pq.top(); pq.pop();
            r= it.second.first;
            c = it.second.second;
            if(r==n-1 && c==m-1) return dp[r][c];
            for(int i=0;i<4;i++){
                int k=0;
                int a = r+vr[i];
                int b = c+vc[i];
                if(a<0 || a>=n || b<0 || b>=m) continue;
                if(i+1!=grid[r][c]) k++;
                if(dp[a][b]> dp[r][c]+k){
                    dp[a][b] =  dp[r][c]+k;
                    pq.push({dp[a][b],{a,b}});
                }    
                
            }
        }
        return dp[n-1][m-1];
    }