class Solution {
public:
    struct Info {
        int car;
        int people;
    };
    
    Info dfs(const vector<vector<int>>& graph, int last, int node, int seat, long long &fuel) {        
        long long res = 0;
        
        Info info{0, 1};
        for (int i = 0; i < graph[node].size(); ++i) {
            if (last != graph[node][i]) {
                Info nxt = dfs(graph, node, graph[node][i], seat, fuel);
                info.car += nxt.car;
                info.people += nxt.people;
            }
        }
        
        fuel += info.car;
        info.car = info.people / seat + !!(info.people % seat);
        return info;
    }
    
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        vector<vector<int>> graph(roads.size() + 1);
        for (auto r : roads) {
            graph[r[0]].push_back(r[1]);
            graph[r[1]].push_back(r[0]);
        }

        long long res = 0;
        dfs(graph, -1, 0, seats, res);
        return res;
    }
};