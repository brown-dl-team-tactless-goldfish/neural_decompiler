class LFUCache {
public:
    int ans=0;
    int capacity;
    unordered_map<int,int>m; //Key Value pair
    unordered_map<int,list<int>>f2f; //list of keys having frequency x
    unordered_map<int,int>freq;//frequency of key
    unordered_map<int,list<int>::iterator>adr;//position of key in the list
    LFUCache(int c) {
        capacity=c;
        m.clear();
        f2f.clear();
        freq.clear();
     
    }
    
    int get(int key) {
        if(capacity==0)return -1;
        if(!m.count(key))return -1;
        int x=freq[key];
        if(ans==x && f2f[x].size()==1)ans=x+1;
        auto it =adr[key];
        
        f2f[x].erase(it);
        freq[key]++;
        f2f[x+1].push_front(key);
        adr[key]=f2f[x+1].begin();
        return m[key];
        
    }
    
    void put(int key, int value) {
        if(capacity==0)return ;
        if(!m.count(key)){
        
        if(m.size()==capacity){
          int last=f2f[ans].back();
          f2f[ans].pop_back();
          m.erase(last);
        }
        f2f[1].push_front(key);
         adr[key]=f2f[1].begin();
         m[key]=value;
        freq[key]=1;
        ans=1;
        
      }else{
        int x=freq[key];
        if(ans==x && f2f[x].size()==1)ans=x+1;
         auto it =adr[key];
        f2f[x].erase(it);
        f2f[x+1].push_front(key);
        adr[key]=f2f[x+1].begin();
        freq[key]++;
        m[key]=value;
      }
      
        
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
