class Solution {
public:
    vector<int> busiestServers(int k, vector<int>& arrival, vector<int>& load) {
        vector <array<int, 3>> events;
        int n = arrival.size();
        for (int i = 0; i < n; ++i) {
            events.push_back({arrival[i], 1, i});
            events.push_back({arrival[i] + load[i], 0, i});
        }
        sort(events.begin(), events.end());
        vector <int> cnt(k);
        vector <int> busiest;
        set <int> working;
        set <int> free;
        for (int i = 0; i < k; ++i) {
            free.insert(i);
        }
        vector <int> who(n, -1);
        for (int i = 0; i < events.size(); ++i) {
            int time = events[i][0];
            int type = events[i][1];
            int idx = events[i][2];
            if (type == 0) {
                if (who[idx] != -1) {
                    working.erase(who[idx]);
                    free.insert(who[idx]);
                }
            } else {
                int who_can = idx % k;
                if (free.size() == 0) {
                    who[idx] = -1;
                    continue;
                } else {
                    auto it = free.lower_bound(who_can);
                    if (it == free.end()) {
                        it = free.begin();
                    }
                    who_can = *it;
                    free.erase(who_can);
                    cnt[who_can]++;
                    working.insert(who_can);
                    who[idx] = who_can;
                }
            }
        }
        int mx = 0;
        /*
            For debugging..
        for (int i = 0; i < n; ++i) {
            cout << who[i] << " ";
        }
        cout << '\n';
        */
        for (int i = 0; i < k; ++i) {
            mx = max(mx, cnt[i]);
            //cout << cnt[i] << " ";
        }
        for (int i = 0; i < k; ++i) {
            if (cnt[i] == mx) {
                busiest.push_back(i);
            }
        }
        return busiest;
    }
};