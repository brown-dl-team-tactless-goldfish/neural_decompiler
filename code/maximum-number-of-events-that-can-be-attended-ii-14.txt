bool compare(vector<int> &a, vector<int> &b){
    return a[1]<b[1];
}
class Solution {
public:
    int maxValue(vector<vector<int>>& events, int k) {
        sort(events.begin(), events.end(), compare);
        vector<vector<int>> dp(events.size(), vector<int> (k+1, 0));
        vector<int> nearest_finished_event(events.size(), -1);
        for(int i=0; i<events.size(); i++){
            int low = 0;
            int high = i-1;
            while(low<=high){
                int mid = (low+high)/2;
                if(events[i][0]>events[mid][1]){
                    nearest_finished_event[i] = mid;
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
        }
        for(int i=1; i<=k; i++){
            for(int j=0; j<events.size(); j++){
                dp[j][i] = events[j][2];
                if(j!=0){
                    dp[j][i] = max(dp[j-1][i], dp[j][i]);
                }
                if(nearest_finished_event[j]!=-1){
                    dp[j][i] = max(dp[j][i], dp[nearest_finished_event[j]][i-1]+events[j][2]);
                }
            }
        }
        return dp[events.size()-1][k];
    }
};