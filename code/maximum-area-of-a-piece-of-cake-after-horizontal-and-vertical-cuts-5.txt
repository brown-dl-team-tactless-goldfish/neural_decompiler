        sort(horizontalCuts.begin(),horizontalCuts.end());   // sort both vectors so that cuts are consecutive
        sort(verticalCuts.begin(),verticalCuts.end());
        
        
        int maxV = max(w - *(verticalCuts.end()-1),verticalCuts[0])  ;  // maxV stores the longest edge in horizontal direction(as cuts are vertical)
        for(int i =1;i<verticalCuts.size();i++){
            maxV = max(maxV,(verticalCuts[i]-verticalCuts[i-1]));
        }
        
         int maxh = max(h - *(horizontalCuts.end()-1),horizontalCuts[0]) ; // this is max(cakes's end - last cut , first cut - cake's start(start is 0) )
        for(int i =1;i<horizontalCuts.size();i++){
            maxh = max(maxh,(horizontalCuts[i]-horizontalCuts[i-1]));
        }
        
        
        int mod = 1e9+7;
        return  ((long)(maxV%mod)*(maxh%mod))%mod;
        