class Solution {
    class node {
        public:
        int val;
        node *nxt[26];
        node() : val(0), nxt{0} {}
    };
    
public:
    static vector<int> sumPrefixScores(const vector<string>& words) {
        const int m = size(words);
        size_t fullSize = 0;
        for (auto& s : words)
            fullSize += size(s);
        auto memPool = new node[fullSize];
        auto mem = memPool;
        vector<int> ret;
        node root;
        for (auto& s : words) {
            auto p = &root;
            for (auto c : s) {
                if (nullptr == p->nxt[c - 'a'])
                    p->nxt[c - 'a'] = mem++;
                p = p->nxt[c - 'a'];
                p->val += 1;
            }
        }
        for (auto& s : words) {
            auto p = &root;
            int res = 0;
            for (auto c : s) {
                p = p->nxt[c - 'a'];
                res += p->val;
            }
            ret.push_back(res);
        }
        delete[] memPool;
        return ret;
    }
};