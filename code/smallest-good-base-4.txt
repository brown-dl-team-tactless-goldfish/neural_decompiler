public class Solution {
    
    private static BigInteger AllOnes(int count, BigInteger radix) {
      BigInteger result = 0;
      BigInteger factor = 1;

      for (int i = 1; i <= count; ++i, factor *= radix) 
        result += factor;
      
      return result;
    }

    private static BigInteger SolveForRadix(BigInteger value, int count) {
      BigInteger min = 1;
      BigInteger max = (BigInteger) (Math.Pow((double)value, 1.0 / (count - 1)) + 1);

      while (max - min > 1) {
        BigInteger middle = (max + min) / 2;
        BigInteger actual = AllOnes(count, middle);

        if (actual == value)
          return middle;
        else if (actual > value)
          max = middle;
        else
          min = middle;
      }

      return -1;
    }
    
    public string SmallestGoodBase(string n) {
        BigInteger value = BigInteger.Parse(n);
        
        for (int count = 64; count > 2; --count) {
            BigInteger radix = SolveForRadix(value, count); 

            if (radix > 1)
               return radix.ToString();
        }

        return (value - 1).ToString();
    }
    
}