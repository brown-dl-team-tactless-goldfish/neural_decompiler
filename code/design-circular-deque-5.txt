typedef struct 
{
    int* base;
    int* rp;
    int* wp;
    int  size;
} MyCircularDeque;

/** Initialize your data structure here. Set the size of the deque to be k. */

MyCircularDeque* myCircularDequeCreate(int k) 
{
    MyCircularDeque* create_new_deque = (MyCircularDeque*)malloc(sizeof(MyCircularDeque));
    
    if(k <= 0 || create_new_deque == NULL)
    {
        return NULL;
    }
    
    create_new_deque->size = k;
    create_new_deque->base = (int*)malloc(create_new_deque->size * sizeof(int));
    create_new_deque->wp = create_new_deque->base;
    create_new_deque->rp = create_new_deque->base;  
    
    return create_new_deque;
}

/** Checks whether the circular deque is full or not. */
bool myCircularDequeIsFull(MyCircularDeque* obj) 
{
    return ((obj->wp == obj->rp + 1) ||  
            ((obj->rp == obj->base) && 
             (obj->wp == obj->base + obj->size - 1)));
}

/** Adds an item at the rear of Deque. Return true if the operation is successful. */
bool myCircularDequeInsertLast(MyCircularDeque* obj, int value) 
{
    if(myCircularDequeIsFull(obj))
    {
        return false;
    }
    
    if(obj->rp == obj->base)
    {
        obj->rp += obj->size;
    }
    
    *(--obj->rp) = value;
    
    return true;
}