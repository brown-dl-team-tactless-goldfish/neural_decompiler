class Solution {
public:
    
    void dfs(int src, vector<int> adj[], vector<int> &vis, set<int> &st, int &cnt){

        vis[src] = 1;
        for(auto i: adj[src]){
            if(!vis[i] && !st.count(i)){
                dfs(i, adj, vis, st, cnt);
            }
        }
        cnt++;
    }
    
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        
        vector<int> adj[n];
        
        for(auto i: edges){
            adj[i[1]].push_back(i[0]);
            adj[i[0]].push_back(i[1]);
        }
        
        set<int> st(restricted.begin(), restricted.end());
        
        vector<int> vis(n, 0);
        int c = 0;
        dfs(0, adj, vis, st, c);
        return c;
    }
};