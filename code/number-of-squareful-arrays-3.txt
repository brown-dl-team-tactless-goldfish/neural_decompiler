class Solution {
public:
   int numSquarefulPerms(vector<int>& A) {
      const int n = A.size();
      unordered_map<int, set<int>> g;
      unordered_map<int, int> unvisited;
      const auto isSquare = [](int x) {int y = sqrt(x); return x == y * y; }; 
      for (int x : A) unvisited[x]++;
      for (int x : A) g[-1].insert(x);
      for (int i = 0; i < n; i++) for (int j = 0; j < n; j++)
         if (i != j && isSquare(A[i] + A[j])) g[A[i]].insert(A[j]);      

      int cnt = 0;
      dfs(-1, g, unvisited, n, cnt);
      return cnt;
   }

   void dfs(int i, unordered_map<int, set<int>>& g, unordered_map<int, int>& unvisited, int rest, int& cnt) {
      if (rest == 0) {
         cnt++;
         return;
      }
      for (auto j : g[i]) {
         if (unvisited[j] == 0) continue;
         unvisited[j]--;
         dfs(j, g, unvisited, rest - 1, cnt);
         unvisited[j]++;
      }
   }
};