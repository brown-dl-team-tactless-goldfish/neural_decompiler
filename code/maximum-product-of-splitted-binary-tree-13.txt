/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<TreeNode *,long long>m;
    long long maxi = 0;
    long long mod = 1e9+7;

    long long multiplyModulo(long long a, long long b, long long c)
    {
        long long result = 0;
        a %= c;
        b %= c;
        while(b) {
            if(b & 0x1) {
                result += a;
                result %= c;
            }
            b >>= 1;
            if(a < c - a) {
                a <<= 1;
            } else {
                a -= (c - a);
            }
        }
        return result;
    }


    void Traversal(TreeNode *root)
    {
        if(root == NULL) return;
        m[root] = 0;
        Traversal(root->left);
        Traversal(root->right);
    }

    void preComp(TreeNode *root)
    {
        if(root == NULL)
        {
            return;
        }
        preComp(root->left);
        if(root->left != NULL)
        {
            m[root] = m[root] + m[root->left];
        }
        preComp(root->right);
        if(root->right != NULL)
        {
            m[root] = m[root] + m[root->right];
        }
        m[root] += root->val;
    }

    int maxProduct(TreeNode* root) {
        Traversal(root);
        preComp(root);
        long long tot_sum = m[root];
        // cout<<tot_sum<<"\n";
        for(auto it = m.begin(); it!= m.end(); it++)
        {
            // az mod m = a(z mod q) âˆ’ r[z / q]
            long long a = it->second;
            long long b = tot_sum - it->second;
            // long long sum = ((it->second%mod) * ((tot_sum - it->second)%mod))%mod;
            // long long sum = multiplyModulo(a,b,mod);
            // cout<<sum<<"\n";
            long long sum = a * b;
            if(sum > maxi)
            {
                maxi = sum;
            }
        }
        return maxi%mod;
    }
};