class Solution {
public:
    #define ll long long 
    ll ans = 1 ;
    
    struct cmp{
      bool operator()(const vector<int>&v1 , const vector<int>&v2){
          return v1[1] < v2[1] ;
  }  
};
    
    int maximumWhiteTiles(vector<vector<int>>& tiles, int carpetLen) {
        sort(begin(tiles),end(tiles)) ;
        vector<ll>pref ;
		
        for(int i = 0 ; i < tiles.size() ; ++i ){
            if(i==0) pref.push_back(tiles[i][1] - tiles[i][0] + 1) ;
            else pref.push_back(pref.back() + tiles[i][1] - tiles[i][0] + 1 ) ;
        }
        
        //go at every index and see what is the max distance that the carpet can cover 
        for(int i = 0 ; i < tiles.size() ; ++i ){ 
            int maxLen = tiles[i][0] + carpetLen - 1 ;
            int idx = upper_bound(begin(tiles),end(tiles),vector<int>{INT_MAX,maxLen},cmp()) - begin(tiles) ;
            --idx ; 
            if(idx < 0){
                ans = maxLen ;
                continue ;
            }
            ll covered = pref[idx] - (i-1 >=0 ? pref[i-1] : 0LL ) ;
            if(idx + 1 < tiles.size() ) covered += max(0LL,maxLen*1LL - 1LL*tiles[idx + 1][0] + 1LL) ;
            ans = max(ans,covered) ;
        } 
        return ans ;
    }
};