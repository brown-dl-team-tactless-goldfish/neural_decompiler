class Solution {    
public:
    bool vis[105][105];
    int nearestExit(vector<vector<char>>& m, vector<int>& e) {
        int r = m.size();
        int c = m[0].size();
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                vis[i][j] = false;
            }
        }
        vector<vector<int>>vi = {{1,0},{-1,0},{0,1},{0,-1}};
        queue<vector<int>>q;
        q.push({e[0],e[1],0});
        vis[e[0]][e[1]] = true;
        while(!q.empty()){
            auto v = q.front();
            q.pop();
            if(v[0]==0 || v[0] == r-1 || v[1] == 0 || v[1] == c-1){
                if(v[0] == e[0] && v[1] == e[1]){
                    
                }
                else{
                    return v[2];
                }
            }
            for(auto i : vi){
                int x = v[0]+i[0];
                int y = v[1]+i[1];
                if(x >=0 && x < r && y >= 0 && y < c && !vis[x][y] && m[x][y] == '.'){
                    q.push({x,y,v[2]+1});
                    vis[x][y] = true;
                }
            }
            
        }
        return -1;
    }
};