class Solution {
public:
    vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) {
        int k = req_skills.size() ,n = people.size();
        int N = 1<<k;
        vector<int> dp(N,-1);
        vector<vector<int>> prev(N,vector<int> (2,-1));
        unordered_map<string,int> skillMap;
        for (int i=0;i<k;i++){
            skillMap[req_skills[i]] = i;
        }
        dp[0] = 0;
        for (int mask = 0; mask<N;mask++){
            if(dp[mask]==-1) continue;
            for (int j=0;j<n;j++){
                int newmask = mask;
                for (auto skill : people[j]){
                    newmask |= (1<<skillMap[skill]);
                }
                if (dp[newmask]==-1){
                    dp[newmask] = dp[mask] + 1;
                    prev[newmask] = {mask,j};
                }
                else if (dp[newmask] > dp[mask] + 1){
                    dp[newmask] = dp[mask] + 1;
                    prev[newmask] = {mask,j};
                }
            }
        }
        vector<int> res ;
        int which = N-1;
        int prevmask,person;
        person = prev[N-1][1];
        while (which!=-1){
            prevmask = prev[which][0] , person = prev[which][1];
            which = prevmask;
            if (which==-1) break;
            res.push_back(person);
        }
        return res;
    }
};