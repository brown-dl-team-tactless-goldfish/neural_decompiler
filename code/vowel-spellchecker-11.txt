class Solution {
private:
    string lowerAndRemoveVowels(std::string word, bool doLower, bool removeVowels) {
        for (auto &c: word) {
            if (doLower)
               c = std::tolower(c);
            if (removeVowels && (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'))
                c = '-';
        }
        return word;
    }
    vector<string> lowerAndRemoveVowels(vector<string> &myList, bool doLower, bool removeVowels) {
        vector<string> ret;
        for (auto word: myList) {
            word = lowerAndRemoveVowels(word, doLower, removeVowels);
            ret.push_back(word);
        }
        return ret;
    }
    std::unordered_map<string, int> mapValues(std::vector<string> words) {
        std::unordered_map<string, int> wordLoc;
        for (int ii = 0; ii < words.size(); ii++)
            if (wordLoc.find(words[ii]) == wordLoc.end())
                wordLoc[words[ii]] = ii;
        return wordLoc;
    }
    
public:
    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries) {    
        std::unordered_map<string, int> wordLocAsIs = mapValues(lowerAndRemoveVowels(wordlist, false, false));
        std::unordered_map<string, int> wordLocLower = mapValues(lowerAndRemoveVowels(wordlist, true, false));
        std::unordered_map<string, int> wordLocNoVowels = mapValues(lowerAndRemoveVowels(wordlist, true, true));
        
        vector<string> ret;
        for (auto query: queries) {
            int loc = -1;
            std::string queryLower = lowerAndRemoveVowels(query, true, false);
            std::string queryLowerNoVowels = lowerAndRemoveVowels(query, true, true);
            if (wordLocAsIs.find(query) != wordLocAsIs.end())
                loc = wordLocAsIs[query];
            else if (wordLocLower.find(queryLower) != wordLocLower.end())
                loc = wordLocLower[queryLower];
            else if (wordLocNoVowels.find(queryLowerNoVowels) != wordLocNoVowels.end()) 
                loc = wordLocNoVowels[queryLowerNoVowels];
            ret.push_back(loc != -1 ? wordlist[loc] : "");
        }
        return ret;
    }
};