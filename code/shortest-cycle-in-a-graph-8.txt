class Solution {
public:
    static int findShortestCycle(const int n, vector<vector<int>> const& edges) {
        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        int ret = INT_MAX;

        auto bfs = [&] (int i) {
            vector<int> dists(n, INT_MAX);
            queue<pair<int, int>> q;
            q.emplace(i, -1);
            dists[i] = 0;
            for (int dist = 1, sz; (sz = size(q)) && 2 * dist <= ret; ++dist)
                while (sz-- > 0) {
                    auto [i, from] = q.front();
                    q.pop();
                    for (int j : adj[i]) {
                        if (j == from)
                            continue;
                        if (dists[j] <= dist)
                            ret = min(ret, dist + dists[j]);
                        dists[j] = dist;
                        q.emplace(j, i);
                    }
                }
        };

        for (int i = 0; i < n; ++i)
            bfs(i);
        return ret == INT_MAX ? -1 : ret;
    }
};