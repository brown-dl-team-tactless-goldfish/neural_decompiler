

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** letterCombinations(char * digits, int* returnSize){
    
    int len = strlen(digits);
    if(len == 0){
        * returnSize = 0;
        return NULL;
    }
    char pattern[10][5] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    
    int* order = malloc(len * sizeof(int));  //each digits size
    int* curr  = calloc(len , sizeof(int));  //current digits
    curr[0] = -1;

    int L;
    int size = 1;  //total ans's size
    int i, j;
    
    //count ans's size and order[i] (each digits size)
    for(i = 0; i < len ; i++){
        L = strlen(pattern[digits[i] - '0']);
        size *= L;
        order[i] = L; 
    }

    //create ans
    char** ans = (char**)malloc( size * sizeof(char*));
    for(i = 0; i < size; i++){
        ans[i] = malloc((len+1) * sizeof(char));
        curr[0]++;
        int id = 0;
        while(1){
            if(curr[id] < order[id])
                break;
            else{
                curr[id + 1]++;
                curr[id] = curr[id] % order[id];
                id++;
            }
        }
        for(j = 0; j < len; j++){
            ans[i][j] = pattern[digits[j] - '0'][curr[j]];
        }
        ans[i][len] = '\0';
    }
    
    * returnSize = size;
    free(order);
    free(curr);
    return ans;
}