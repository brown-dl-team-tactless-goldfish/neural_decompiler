class Solution {
public:
  int makeArrayIncreasing(vector<int> &arr1, vector<int> &arr2) {
    sort(arr2.begin(), arr2.end());
    const int n = arr2.size();
    unordered_map<int, State> pre, cur;
    pre[0] = State{-1, 0};
    for (auto y : arr1) {
      for (auto [numOp, state] : pre) {
        auto [x, j] = state;
        if (x < y) { 
          auto &[x1, j1] = cur[numOp];
          if (y < x1) { x1 = y, j1 = j; }
        }
        // assign y from arr2
        while (j != n && arr2[j] <= x) j++;
        if (j == n) continue;
        auto &[x1, j1] = cur[numOp + 1];
        if (x < x1) { x1 = arr2[j], j1 = j; }
      }
      pre = move(cur);
    }

    if (pre.empty()) return -1;
    int minOp = 99999;
    for (auto [numOp, state] : pre) minOp = min(minOp, numOp);
    return minOp;
  }

  struct State {
    int x = 2e9; // last element in current array
    int j = 0;       // arr2 index;
  };
};