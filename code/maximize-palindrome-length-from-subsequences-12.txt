    int longestPalindrome(string word1, string word2) {
        const auto s = word1+word2;
        const int n = word1.size(), m = word2.size(), l = s.size();
        //dp[len][i], dp2 is the max len of palindrome that non-empty in both word1 and word2
        auto dp1 = vector(l+1, vector(l, 0)), dp2 = dp1; 
        dp1[1] = vector(l, 1); // all the substr with len == 1 is a palindrom
        
        for(int len = 2;len <= l; len++){
            for(int i=0;i+len<=l;i++){
                dp1[len][i] = max(dp1[len-1][i], dp1[len-1][i+1]);
                dp2[len][i] = max(dp2[len-1][i], dp2[len-1][i+1]);
                if(s[i] == s[i+len-1]){
                    dp1[len][i] = max(dp1[len][i], 2 + dp1[len-2][i+1]);
                    if(i<n && i+len-1 >= n) dp2[len][i] = dp1[len][i];
                }
            }
        }
        return dp2[l][0];
    }