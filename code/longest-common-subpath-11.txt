class Solution {
public:
    
    typedef long long ll;
    typedef pair<ll,ll> pii;
    const int p1 = 31;
    const int p2 = 37;
    const ll m = 1e9+7;
    
    ll pow(ll x, ll n)
    {
        ll ans = 1; x%=m;
        while(n){
            if(n&1) ans = (ans*x)%m;
            x = (x*x)%m;      n >>= 1;
        }
        return ans%m;
    }
    
    ll inv(ll x) {
        return pow(x,m-2);
    }
    
    set<pii> hash(vector<int> v, int ws)
    {
        int n = v.size();
        set<pii> master;
        ll hash1 = 0, hash2 = 0;
        
        for(int j = 0; j < ws; j++) {
            hash1 = (hash1 + ( (ll)(v[j]) * pow(p1,j) )%m ) % m;
            hash2 = (hash2 + ( (ll)(v[j]) * pow(p2,j) )%m ) % m;
        }
       
        ll f1 = pow(p1,ws-1);
        ll f2 = pow(p2,ws-1);
        ll inv1 = inv(p1) , inv2 = inv(p2);
        master.insert({hash1,hash2});
        
        for(int j = ws; j < v.size(); j++){
            
            hash1 = (hash1 - v[j-ws] + m)%m;
            hash1 = (hash1 * inv1)%m;
            hash2 = (hash2 - v[j-ws] + m)%m;
            hash2 = (hash2 * inv2)%m;
            hash1 = (hash1 + ( (ll)(v[j]) * f1 )%m ) % m;
            hash2 = (hash2 + ( (ll)(v[j]) * f2 )%m ) % m;
             master.insert({hash1,hash2});
         }
       
        return master;
    }
    
    int longestCommonSubpath(int N, vector<vector<int>>& paths) {
        int n = paths.size();
		
        sort(paths.begin(), paths.end(),[&](const vector<int>&a,const vector<int>&b) ->     bool{
            return a.size() < b.size();
        } );
       
        int hi = paths[0].size() , lo = 0 , mid;
        while(hi!=lo){
            mid = (hi+lo+1)/2;       
			
            set <pii> master = hash(paths[0] , mid);
            for(int i = 1; i < n; i++) {
			
                set <pii> slave = hash(paths[i] , mid) , temp;

                for(auto j:master) 
                    if(slave.find(j) == slave.end()) temp.insert(j);
						
                for(auto j:temp)
					master.erase(j);                
            }
			
            if(master.size())    lo = mid;
            else                 hi = mid-1;
        }
		
        return lo;
    }
};