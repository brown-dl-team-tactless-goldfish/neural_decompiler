public class Solution
    {
        private bool Helper(IList<char> unresChars, int unresIdx, int occupied, ISet<char> nonZeroChars, IDictionary<char, int> char2Pow10, long sum)
        {
            if (unresIdx == unresChars.Count)
            {
                return sum == 0;
            }

            for (int i = 0; i < 10; i++)
            {
                if(!(i == 0 && nonZeroChars.Contains(unresChars[unresIdx])) && (occupied & (1 << i)) == 0)
                {
                    occupied ^= (1 << i);
                    long newSum = sum + char2Pow10[unresChars[unresIdx]] * i;

                    if (Helper(unresChars, unresIdx + 1, occupied, nonZeroChars, char2Pow10, newSum))
                    {
                        return true;
                    }

                    occupied ^= (1 << i);
                }
            }

            return false;
        }

        public bool IsSolvable(string[] words, string result)
        {
            ISet<char> nonZeroChars = new HashSet<char>(words.Length + 1);
            ISet<char> unresolvedChars = new HashSet<char>();
            IDictionary<char, int> char2Pow10 = new Dictionary<char, int>();

            foreach (var word in words)
            {
                nonZeroChars.Add(word[0]);
                for (int i = 0; i < word.Length; i++)
                {
                    unresolvedChars.Add(word[i]);
                    if (!char2Pow10.ContainsKey(word[i]))
                    {
                        char2Pow10[word[i]] = 0;
                    }
                    char2Pow10[word[i]] += (int)Math.Pow(10, word.Length - i - 1);
                }
            }

            nonZeroChars.Add(result[0]);
            for (int i = 0; i < result.Length; i++)
            {
                unresolvedChars.Add(result[i]);
                if (!char2Pow10.ContainsKey(result[i]))
                {
                    char2Pow10[result[i]] = 0;
                }
                char2Pow10[result[i]] -= (int)Math.Pow(10, result.Length - i - 1);
            }


            return Helper(unresolvedChars.ToArray(), 0, 0, nonZeroChars, char2Pow10, 0);
        }
    }