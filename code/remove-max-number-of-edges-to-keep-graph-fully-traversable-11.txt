class Solution {
public:
vector<vector<int>>b,f,s;
vector<int>parent;
int find(int a)
{
    return parent[a]<0?a:parent[a]=find(parent[a]);
}
int help(vector<vector<int>>nums)
{
    int ans=0;
    int n=nums.size();
    for(int i=0;i<n;i++)
    {
        int x=find(nums[i][0]);
        int y=find(nums[i][1]);
        if(x==y)ans++;
        else{
            parent[x]+=parent[y];
            parent[y]=x;
        }
    }
    return ans;
}

    int maxNumEdgesToRemove(int n, vector<vector<int>>& nums) {
        parent.resize(n,-1);
        for(auto k:nums)
        {
            if(k[0]==1)
            {
                f.push_back({k[1]-1,k[2]-1});
            }
            else if(k[0]==2)
            {
                s.push_back({k[1]-1,k[2]-1});
            }
            else{
                b.push_back({k[1]-1,k[2]-1});
            }
        }
        int ans=0;
    for(int i=0;i<b.size();i++)
    {
        int x=find(b[i][0]);
        int y=find(b[i][1]);
        if(x!=y)
        {
            parent[x]+=parent[y];
            parent[y]=x;
        }
        if(x==y)ans++;
    }
    
    if(parent[find(0)]==n)return f.size()+b.size()+ans;
    vector<int>memo=parent;
    
    ans+=help(f);
   int mi=*min_element(parent.begin(),parent.end());
   if(abs(mi)!=n)return -1;
    swap(parent,memo);
    ans+=help(s);
     mi=*min_element(parent.begin(),parent.end());
   if(abs(mi)!=n)return -1;
    return ans;
    }
};