class Solution {
private:
    unordered_map<string, priority_queue<string,vector<string>, greater<string> >>map;
    vector<string> res;
public:
    void topSort(string source)
    {
        while(!map[source].empty())
        {
            string to=map[source].top();
            map[source].pop();
            topSort(to);
        }
        res.push_back(source);
    }
    vector<string> findItinerary(vector<vector<string>>& tickets) {
        if(tickets.empty())
        {
            return {};
        }
        for(auto &ticket:tickets)
        {
            map[ticket[0]].push(ticket[1]);
        }
        topSort("JFK");
        reverse(res.begin(),res.end());
        return res;
    }
};