class Solution {
private: 
    int MOD = 1e9 + 7;
    
public:

    vector<int> waysToFillArray(vector<vector<int>>& queries) {
        vector<int> ans;
        int n = 0;
        int k = 0;
        for (const auto& query : queries) {
            n = max(n, query[0]);
            k = max(k, query[1]);
        }
        
        vector<vector<int>> dp = vector(n + 1, vector(k + 1, 0));
        for (int j = 1; j <= n; j++) {
            for (int i = 1; i <= k; i++) {
                if (j == 1 || i == 1) {
                    dp[j][i] = 1;
                    continue;
                }
                int sum = 0;
                for (int l = 1; l <= i / 2; l++) {
                    if ((i % l) == 0) {
                        sum = (sum + dp[j - 1][i / l]) % MOD;
                    }
                }
                sum = (sum + dp[j - 1][1]) % MOD;
                dp[j][i] = sum;
            }
        }
        
        for (const auto& query : queries) {
         ans.push_back(dp[query[0]][query[1]]);   
        }
        
        return ans;
    }
};