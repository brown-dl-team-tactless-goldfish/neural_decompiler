// Transfer the string into an integer and return 0 if string has duplication
int trans(char *str) {
    int i, ret = 0;
    
    for (i=0; i < strlen(str); i++) {
        if (((1 << (str[i] - 'a')) & ret) == 0) {
            ret |= (1 << (str[i] - 'a'));
        } else 
            return 0;
    }
    
    return ret;
}

int bit_count(int i) {
    int count = 0;
    while (i) {
        i &= (i-1);
        count++;
    }
    
    return count;
}
// DFS to access to all permutation in the array
void backtrack(int cur_s, int start, int *ans, int **arr, int arrSize) {
    *ans = (*ans >= bit_count(cur_s)) ? *ans: bit_count(cur_s);
    for (int i = start; i< arrSize; i++) {
        if ((trans(arr[i]) & cur_s) == 0)
            backtrack(trans(arr[i])| cur_s, i+1, ans, arr, arrSize);
    }
}

int maxLength(char ** arr, int arrSize){
    int ans[1] = {0};
    backtrack(0, 0, ans, arr, arrSize);
    
    return *ans;
}