class Solution {
public:
    int palindromePartition(string s, int k) {
        n = s.size();
        this->s = move(s);

        return getdp(0, k);
    }

private:
    int getdp(int i, int k) {
        if (dp[i][k] != -1) {
            return dp[i][k];
        }

        if (n - i < k) {
            return dp[i][k] = inf;
        }
        
        if (k == 1) {
            return dp[i][k] = getChange(i, n - 1);
        }

        int ans = INT_MAX;
        for (int j = i; j <= n - k; ++j) {
            ans = min(ans, getChange(i, j) + getdp(j + 1, k - 1));
        }
        
        return dp[i][k] = ans;
    }
    
    int getChange(int i, int j) {
        if (change[i][j] != -1) {
            return change[i][j];
        }
        
        if (i >= j) {
            return change[i][j] = 0;
        }
        
        return (s[i] == s[j] ? 0 : 1) + getChange(i + 1, j - 1);
    }

    int inf = 1000000;
    int n;
    string s;
    vector<vector<int>> dp{101, vector<int>(101, -1)};
    vector<vector<int>> change{101, vector<int>(101, -1)};
};