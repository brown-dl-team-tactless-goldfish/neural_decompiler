class Solution {
public:
    vector<unordered_map<int, int>> bucket;
    int n;
    int k;
    int minChanges(vector<int>& nums, int k1) {
        n = nums.size();
        k = k1;
        bucket.resize(k);
        for (int i = 0; i < n; i++)
        {
            int id = i % k;
            bucket[id][nums[i]]++;
        }

        vector<int> cnt(1024, -1);
        cnt[0] = 0;
        int base = -1;
        vector<int> tmp(1024, 0);
        for (int i = 0; i < bucket.size(); i++)
        {

            auto& m = bucket[i];
            
            for (auto& p : m)
            {
                int x = p.first;
                int y = p.second;
                for (int mask = 0; mask < 1024; mask++)
                {
                    if (cnt[mask] < 0) continue;
                    int v = x ^ mask;
                    //cout << v << endl;
                    tmp[v] = max(tmp[v], y + cnt[mask]);
                }
            }
            cnt.swap(tmp);
            
            for (auto c : cnt)
            {
                base = max(base, c);
            }
            for (auto& t : tmp)
            {
                t = base;
            }
        }

        return n - cnt[0];

    }
};