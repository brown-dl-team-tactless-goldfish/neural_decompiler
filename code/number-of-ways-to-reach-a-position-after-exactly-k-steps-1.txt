class Solution {
public:
    int numberOfWays(int startPos, int endPos, int k) {
        long long mod = 1e9 + 7;
        vector<vector<long long>> dp(3001, vector<long long>(k + 1, -1));
        return dfs(startPos + 1000, endPos + 1000, k, k, mod, dp);
    }
    
private: 
    long long dfs(int s, int e, int c, int& k, long long& mod, vector<vector<long long>>& dp)
    {
        if (c == 0)
        {
            if (s == e)
                dp[s][0] = 1;
            else
                dp[s][0] = 0;
            return dp[s][c];
        }
        if (dp[s][c] == -1)
            dp[s][c] = (dfs(s - 1, e, c - 1, k, mod, dp) + dfs(s + 1, e, c - 1, k, mod, dp)) % mod;
        return dp[s][c];
    }
};