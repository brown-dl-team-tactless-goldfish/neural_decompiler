class Solution {
public:
    vector<string> findAllRecipes(vector<string>& recipes, vector<vector<string>>& ingredients, vector<string>& supplies) {
        init(recipes, ingredients);
        vector<string> res;
        queue<string> q;
        for(auto& s:supplies) q.emplace(s);
        while(!q.empty()){
            auto s = move(q.front()); q.pop();
            if(reci.count(s)) res.emplace_back(s);
            for(auto& t : g[s] )
                if(--indegree[t] == 0) q.push(t);
        }
        return res;
    }

    void init(vector<string>& recipes, vector<vector<string>>& ingredients){
        reci = unordered_set<string>(recipes.begin(), recipes.end());
        for(int i=0;i<recipes.size();i++){
            indegree[recipes[i]] = ingredients[i].size();
            for(auto& ing : ingredients[i]) g[ing].insert(recipes[i]);
        }
    }

    unordered_set<string> reci;
    unordered_map<string, unordered_set<string>> g;
    unordered_map<string, int> indegree;
};