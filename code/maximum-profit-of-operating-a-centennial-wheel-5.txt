class Solution {
public:
    int minOperationsMaxProfit(vector<int>& customers, int boardingCost, int runningCost) {
        int wait = 0, curProfit = 0, maxProfit = 0, minRotate = -1, size = customers.size();
        vector<int> wheel(4, 0);
        for (int i = 0; (i < size || wait > 0) && !isFull(wheel); ++i)
        {
            int passengers = wheel[i % 4], cust = i < size ? customers[i] : 0;
            int board = min(4 - passengers, wait + cust);
            wait += cust - board;
            curProfit += board * boardingCost - runningCost;
            
            if (curProfit > maxProfit)
            {
                maxProfit = curProfit;
                minRotate = i + 1;
            }
        }
        
        return minRotate;
    }
    
private:
    inline bool isFull(const vector<int>& wheel)
    {
        return wheel == vector<int>{4, 4, 4, 4};
    }
};