class Solution {
private:
    int size;
    int R, C;
    
    int findParent(int *arr, int tar){
        if(arr[tar]!=tar){
            arr[tar] = findParent(arr, arr[tar]);
        }
        
        return arr[tar];
    }
    bool mergeAndCheck(int *low, int* high, int x, int y){
        int xl, yl, xh, yh;
        xl = findParent(low, x);
        yl = findParent(low, y);
        if(xl<yl){
            low[yl] = xl;
        } else{
            low[xl] = yl;
        }
        
        xh = findParent(high, x);
        yh = findParent(high, y);
        if(xh>yh){
            high[yh] = xh;
        } else{
            high[xh] = yh;
        }
        //printf("(%d %d %d %d)\n", xl, yl, xh, yh);
        return ((xl<C)||(yl<C)) && ((xh>=(size-C))||(yh>=(size-C)));
    }
public:
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        // disjoint set
        vector<vector<int>> curr(row, vector<int>(col, 1));
        int low[20001] = {0}, high[20001] = {0};
        size = row*col;
        R = row;
        C = col;
        
        for(int i=0 ; i<20001 ; i++){
            low[i] = i;
            high[i] = i;
        }
        
        bool flag=false;        
        int x, y;
        for(int i = size-1 ; i>=0 ; i--){ 
            //printf("%d:", i);
            x = cells[i][0]-1;
            y = cells[i][1]-1;
            
            curr[x][y] = 0;
            
            flag = false;
            if(x>0 && (curr[x-1][y] == 0)){
                flag = flag || mergeAndCheck(low, high, (x*col)+y, ((x-1)*col)+y);
            }
            if(y>0 && (curr[x][y-1] == 0)){
                flag = flag || mergeAndCheck(low, high, (x*col)+y, (x*col)+y-1);
            }
            if(x<(row-1) && (curr[x+1][y] == 0)){
                flag = flag || mergeAndCheck(low, high, (x*col)+y, ((x+1)*col)+y);
            }
            if(y<(col-1) && (curr[x][y+1] == 0)){
                flag = flag || mergeAndCheck(low, high, (x*col)+y, (x*col)+y+1);
            }
            if(flag){
                return i;
            }
        }
        return 0;
    }
};