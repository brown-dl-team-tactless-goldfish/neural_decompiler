class Solution {
public:
    
    string shortestCommonSupersequence(string text1, string text2) {
       
        int n=text1.size(),m=text2.size();
		
		// Creating dp matrix 
        int dp[n+1][m+1];
		
		//Initializing the matrix
        for(int i = 0 ; i <= n ; i++){
            for(int j = 0 ; j <= m ;j++){
                if( i==0 ||j ==0){
                    dp[i][j] = 0;
                }
            }
        }
		
		//Filling the matrix
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
               if(text1[i-1]==text2[j-1]){
                  dp[i][j]= 1+dp[i-1][j-1];
               }else{
                   dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
               } 
            }
        }
        
        string c = "";
        int i = n , j = m;
        while(i > 0 && j > 0 ){
            if(text1[i-1] ==  text2[j-1]){
                c += (text1[i-1]);
                i--;
                j--;
            }
            else if(dp[i-1][j] < dp[i][j-1]){
                c += (text2[j-1]);
                j--;
            }else{
                c+=(text1[i-1]);
                i--;
            }
        }
        while(i > 0){
            c+=(text1[i-1]);
            i--;
        }
        while(j > 0){
            c+=(text2[j-1]);
            j--;
        }
        reverse(c.begin() , c.end());
        
        return c;
    }
};