public class Solution {
    
    public int NumTilePossibilities(string tiles) {
        if (1 == tiles.Length) return 1;

        int[] arr = new int[26];
        int kind = 0, len = tiles.Length;

        foreach (var c in tiles)
        {
            if (arr[c - 'A'] == 0) kind++;
            arr[c - 'A']++;
        }

        if (kind == 1) return len;

        int sum = kind, member = TakeTheOrder(len);

        foreach (var item in arr)
            for (int i = 2; i <= item; i++)
                member /= i;

        if (len > 2) sum += 2 * member; 
        else return sum + member;

        int[] build = new int[26];

        member = 1;

        for (int i = 2; i < len - 1; i++)
        {
            member *= i;
            sum += Helper(0, i, arr, build, 0, member);
        }

        return sum;
    }
    
    private int Helper(int num, int targetNum, int[] info, int[] arr, int i, int member)
    {
        if (num == targetNum)
        {
            foreach (var item in arr)
                for (int j = 2; j <= item; j++)
                    member /= j;

            return member;
        }

        int sum = 0;

        for (; i < 26; i++)
        {
            if (info[i] <= arr[i]) continue;

            var oldNum = num;
            for (int j = 0; j < targetNum && j < info[i] && num < targetNum; j++)
            {
                arr[i]++;
                sum += Helper(++num, targetNum, info, arr, i + 1, member);
            }
            num = oldNum;
            arr[i] = 0;
        }

        return sum;
    }
    
    private int TakeTheOrder(int num)
    {
        int sum = num;
        for (int i = 2; i < num; i++)
        {
            sum *= i;
        }

        return sum;
    }
    
}