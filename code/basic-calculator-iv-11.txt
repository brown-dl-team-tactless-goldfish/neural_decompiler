public class Solution {
    public IList<string> BasicCalculatorIV(string expression, string[] evalvars, int[] evalints) {
        var tokens = Tokenize(expression);
        var parsed = Parse(tokens, evalvars, evalints);
        var calculated = Calculate(parsed);
        var combined = Combine(calculated);
        
        return combined
            .Select(result => result.Variables.Any()
                ? $"{result.Coefficient}*{String.Join("*", result.Variables)}"
                : result.Coefficient.ToString())
            .ToList();
    }
    
    
    IEnumerable<string> Tokenize(string expression) {
        return expression
            .Split(' ')
            .SelectMany(chunk => chunk
                .TakeWhile(charactor => charactor == '(')
                .Select(_ => "(")
                .Concat(new [] {
                    new String(chunk
                        .SkipWhile(charactor => charactor == '(')
                        .TakeWhile(charactor => charactor != ')')
                        .ToArray())
                })
                .Concat(chunk
                    .SkipWhile(charactor => charactor != ')')
                    .Select(_ => ")")));
    }
    
    
    List<object> Parse(IEnumerable<string> tokens, string[] evalvars, int[] evalints) {
        tokens = ParseVars(tokens, evalvars, evalints);
        var start = 0;
        return ParseToNodes(tokens.ToArray(), ref start);
    }

    IEnumerable<string> ParseVars(IEnumerable<string> tokens, string[] evalvars, int[] evalints) {
        var evals = Enumerable
            .Range(0, evalvars.Count())
            .ToDictionary(index => evalvars[index], index => evalints[index].ToString());

        return tokens.Select(token => evals.ContainsKey(token) ? evals[token] : token);
    }
    
    List<object> ParseToNodes(string[] tokens, ref int index) {
        var result = new List<object>();
        
        while (index < tokens.Count()) {
            if (tokens[index] == "(") {
                index++;
                result.Add(ParseToNodes(tokens, ref index));
            } else if (tokens[index] == ")") {
                break;
            } else {
                int number;
                if (int.TryParse(tokens[index], out number)) {
                    result.Add(number);
                } else {
                    result.Add(tokens[index]);
                }
            }
            
            index++;
        }
        
        return Prioritize(result);
    }
    
    
    List<object> Prioritize(IEnumerable<object> nodes) {
        var result = new List<object>();
        var currentList = result;
        object last = nodes.First();
        
        foreach (var node in nodes.Skip(1)) {
            if (node is string) {
                var calcular = node as string;
                if (calcular == "*" || calcular == "/") {
                    if (currentList == result) {
                        currentList = new List<object>();
                    }
                } else if (calcular == "+" || calcular == "-") {
                    if (currentList != result) {
                        currentList.Add(last);
                        last = currentList;
                        currentList = result;
                    }
                }
            }
            
            currentList.Add(last);
            last = node;
        }

        if (currentList != result) {
            currentList.Add(last);
            last = currentList;
        }
        result.Add(last);
        
        return result;
    }
    
    
    List<(int Coefficient, List<string> Variables)> Calculate(List<object> parsed) {
        List<(int Coefficient, List<string> Variables)> result;
        
        var sets = parsed.Count() / 2;
        if (parsed[0] is int) {
            result = new List<(int Coefficient, List<string> Variables)> {
                (Coefficient: (int)parsed[0], Variables: new List<string>())
            };
        } else if (parsed[0] is string) {
            result = new List<(int Coefficient, List<string> Variables)> {
                (Coefficient: 1, Variables: new List<string> { (parsed[0] as string) })
            };
        } else {
            result = Calculate(parsed[0] as List<object>);
        }
        
        for (var index = 0; index < sets; index++) {
            var calcular = parsed[index * 2 + 1] as string;
            var rightValue = parsed[index * 2 + 2];
            
            if (calcular == "*") {
                if (rightValue is int) {
                    result = result
                        .Select(item => (
                            Coefficient: item.Coefficient *= (int)rightValue,
                            Variables: item.Variables
                        ))
                        .ToList();
                } else if (rightValue is string) {
                    foreach (var item in result) {
                        item.Variables.Add(rightValue as string);
                    }
                } else {
                    var rightMultiCalculated = Calculate(rightValue as List<object>);
                    result = result
                        .SelectMany(item => rightMultiCalculated
                            .Select(subItem => (
                                Coefficient: item.Coefficient * subItem.Coefficient,
                                Variables: item.Variables.Concat(subItem.Variables).ToList()
                            )))
                        .ToList();
                }
            } else {
                if (rightValue is int) {
                    result.Add((Coefficient: (int)rightValue * (calcular == "+" ? 1 : -1), Variables: new List<string>()));
                } else if (rightValue is string) {
                    result.Add((Coefficient: (calcular == "+" ? 1 : -1), Variables: new List<string> { (rightValue as string) }));
                } else {
                    var rightMinusCalculated = Calculate(rightValue as List<object>);
                    if (calcular == "-") {
                        rightMinusCalculated = rightMinusCalculated
                            .Select(item => (
                                Coefficient: -item.Coefficient,
                                Variables: item.Variables
                            ))
                            .ToList();
                    }
                    result.AddRange(rightMinusCalculated);
                }
            }
        }
        
        return result;
    }
    
    
    List<(int Coefficient, string[] Variables, string CombinedVariables)> Combine(List<(int Coefficient, List<string> Variables)> calculated) {
        var result = calculated
            .Select(item => (
                Coefficient: item.Coefficient,
                Variables: item.Variables.OrderBy(word => word).ToArray()
            ))
            .Select(item => (
                Coefficient: item.Coefficient,
                Variables: item.Variables,
                CombinedVariables: String.Join('*', item.Variables)
            ))
            .GroupBy(item => item.CombinedVariables)
            .Select(group => (
                Coefficient: group.Sum(item => item.Coefficient),
                Variables: group.First().Variables,
                CombinedVariables: group.Key
            ))
            .Where(item => item.Coefficient != 0)
            .OrderByDescending(item => item.Variables.Count())
            .ThenBy(item => item.CombinedVariables)
            .ToList();
        
        return result;
    }
}