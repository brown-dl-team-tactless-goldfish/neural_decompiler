class Solution {
public:
    long leastcommonmulti(long s, long l) {
        if (l % s == 0) return s;
        long t = l - s * (l / s);
        return leastcommonmulti(min(s, t), max(s, t));
    }

    int nthMagicalNumber(int N, int A, int B) {
        int magic = 1e9 + 7;
        long left = (long)(min(A, B));
        long right = (long)(max(A, B));

        long common = leastcommonmulti(left, right);
        common = right / common * left;

        right = right * N;
        left = 1;


        while (right > left) {
            long mid = left + (right - left) / 2;
            long curr = mid / A + mid / B - mid / common;

            if (curr >= N) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return (int) (right % magic);
    }
};