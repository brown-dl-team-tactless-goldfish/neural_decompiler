#include <stdarg.h>


typedef struct {
    int* count;
    int* mem;
    int size;
    int curCn;
} Allocator;


Allocator* allocatorCreate(int n) {
    Allocator* ret = malloc(sizeof(Allocator));
    ret->count = calloc(1001, sizeof(int));
    ret->mem = calloc(n, sizeof(int));
    ret->size = n;
    ret->curCn = 0;
    return ret;
}

int allocatorAllocate(Allocator* obj, int size, int mID) {
    if(size > (obj->size - obj->curCn))  
        return -1;
    int k = 0;
    while(1){
        if(obj->mem[k] > 0){
            k++;
            continue;
        }
        if(( k + size) > obj->size)
            return -1;
        for(int i = 0; i < size; i++){
            if(obj->mem[k]){
                k++;
                break;
            }
            if(i == size - 1){
                obj->count[mID] += size;
                for(int j = 0; j < size; j++){
                    obj->mem[k] = mID;                                       
                    k--;
                }
                obj->curCn += size;
                return k+1;
            }
            k++;
        }
    }  
}

//int allocatorFree(Allocator* obj, int mID) {
int allocatorFree(Allocator* obj, ...) {
  va_list argp;
  va_start(argp, obj);
  int mID = va_arg(argp, int);
    int ans = obj->count[mID];
    obj->count[mID] = 0;
    obj->curCn -= ans;
    if(ans == 0)
        return ans;
    int k = 0;  
    for(int i = 0; i < obj->size; i++){
        if(obj->mem[i] == mID){
            obj->mem[i] = 0;
            k++;
            if(k == ans)
                break;
        }
    }
    return ans;
}

//void allocatorFree(Allocator* obj) {
   // free(obj->count);
   // free(obj->mem);
   // free(obj);        
//}

/**
 * Your Allocator struct will be instantiated and called as such:
 * Allocator* obj = allocatorCreate(n);
 * int param_1 = allocatorAllocate(obj, size, mID);
 
 * int param_2 = allocatorFree(obj, mID);
 
 * allocatorFree(obj);
*/