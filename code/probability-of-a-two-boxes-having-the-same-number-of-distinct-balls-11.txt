class Solution {
public:
    long long same;
    long long total;
    double getProbability(vector<int>& balls) {
        
        this->same = 0;
        this->total = 0;
        int bn = balls.size();
        helper(balls, bn, 0, 0, 0, 0, 0, 1);
        return (double)this->same / (double)this->total;
    }
    
    void helper(vector<int>& balls, int bn, int p, int k1, int k2, long q1, long q2, long long weight){
        
        if (p == bn){
            if (q1 == q2){
                if (k1 == k2){
                    this->same += weight;
                }
                this->total += weight;
            }
            return; 
        }
        /*
        regular case: at index p, we have two selections
        1.give the color p to box1;
        2.give the color to box2;
        3.give color to both box1 and box2
        */
        for (long i = 0; i <= (long)balls[p]; i++){
            if (i == 0){
                helper(balls, bn, p + 1, k1, k2 + 1, q1, q2 + balls[p], weight);
            }
            else if (i == balls[p]){
                helper(balls, bn, p + 1, k1 + 1, k2, q1 + balls[p], q2, weight);
            }
            else{
                long cmn = calculate_cmn(i, balls[p]);
                helper(balls, bn, p + 1, k1 + 1, k2 + 1, q1 + i, q2 + balls[p] - i, cmn * weight);
            }
        }
    }
    long long calculate_cmn(long m, long n){
        if (m == 1 || m == n - 1){return n;}
        
        long long bottoms = 1;
        for (long factor = 2; factor <= n - m; factor++){
            bottoms *= factor;
        }
        long long product = 1;
        for (long factor = m + 1; factor <= n; factor++){
            product *= factor;
        }
        return product / bottoms;
    }
};
