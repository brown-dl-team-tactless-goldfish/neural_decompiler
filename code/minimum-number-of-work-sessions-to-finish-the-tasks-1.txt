class Solution {
    int n;
    int dfs(int ctime, vector<vector<int>> &dp, vector<int>& tasks, int stime, int bitmask)
    {
        if(bitmask == (1<<n)-1)
            return 0;
        if(dp[ctime][bitmask] != -1)
            return dp[ctime][bitmask];
        int val = INT_MAX;
        for(int i = 0; i < n; i++)
        {
            if(bitmask & (1 << i))
                continue;
            bitmask = (bitmask | (1<<i));
            if(ctime+tasks[i] <= stime)
            {
                val = min(val,dfs(ctime+tasks[i], dp, tasks, stime, bitmask));
            }
            else
            {
                val = min(val, 1+dfs(tasks[i], dp, tasks, stime, bitmask));
            }
            bitmask = (bitmask ^ (1<<i));
        }
        return dp[ctime][bitmask] = val;
    }
        
public:
    int minSessions(vector<int>& tasks, int sessionTime) {
        n = tasks.size();
        vector<vector<int>> dp(sessionTime+1,vector<int>( (1<<tasks.size())-1 , -1));
        return 1+dfs(0, dp, tasks, sessionTime, 0);
    }
};