class Solution {
public:
    int dx[4] = {0,1,0,-1};
    int dy[4] = {1,0,-1,0};
    bool dfs(vector<vector<char>>& grid, vector<vector<bool>>& vis, int x, int y, int par_x, int par_y, char cur){
        vis[x][y] = true;
        for(int i=0; i<4; ++i){
            int x1 = x+dx[i], y1 = y+dy[i];
            if(x1<0 || x1>=grid.size() || y1<0 || y1>=grid[0].size() || grid[x1][y1]!=cur) continue;
            if(vis[x1][y1] && (x1 != par_x || y1 != par_y)) return true;
            if(vis[x1][y1]) continue;
            if(dfs(grid,vis,x1,y1,x,y,cur)) return true;
        }
        return false;
    }
    
    bool containsCycle(vector<vector<char>>& grid) {
        int r = grid.size(), c = grid[0].size();
        vector<vector<bool>> vis(r,vector<bool>(c,false));
        for(int i=0; i<r; ++i){
            for(int j=0; j<c; ++j){
                if(!vis[i][j]){
                    if(dfs(grid,vis,i,j,-1,-1,grid[i][j])) return true;
                }
            }
        }
        return false;
    }
};