    vector<long long> maximumSegmentSum(vector<int>& nums, vector<int>& removeQueries) {
        const int n = nums.size();
        vector<long long> res, vsum = {0};
        set<int> index = {-1, n};
        for(auto x:nums) vsum.push_back(x+vsum.back());
        multiset<long long, greater<>> sums = {vsum.back()};
        for(int k : removeQueries){
            auto it = index.upper_bound(k);
            int a = *prev(it), b = *it;
            auto preSum = vsum[b] - vsum[a+1];
            sums.erase(sums.find(preSum));
            index.insert(k);
            auto sumLeft = vsum[k] - vsum[a+1], sumRight = vsum[b] - vsum[k+1];
            if(sumLeft>0) sums.insert(sumLeft);
            if(sumRight>0) sums.insert(sumRight);
            res.push_back(*sums.begin());
        }
        return res;        
    }