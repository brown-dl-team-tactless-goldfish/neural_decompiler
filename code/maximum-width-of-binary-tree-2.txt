/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
#define SIZE 2000
double** map;
void order(struct TreeNode* root,double index,int depth){
    if(root==NULL){
        return;
    }
    if(map[depth][0]==0){
        map[depth][0]=index;
    }
    map[depth][1]=index;
    order(root->left,index*2,depth+1);
    order(root->right,index*2+1,depth+1);
}
int widthOfBinaryTree(struct TreeNode* root) {
    if(root==NULL){
        return 0;
    }
    map=(double**)malloc(SIZE*sizeof(double*));
    for(int i=0;i<SIZE;i++){
        map[i]=(double*)calloc(2,sizeof(double));
    }
    map[0][0]=1;
    map[0][1]=1;
    order(root->left,2,1);
    order(root->right,3,1);
    printf("\n");
    int i=0;
    int width=0;
    while(map[i][0]!=0){
        width=width>map[i][1]-map[i][0]?width:map[i][1]-map[i][0];
        i++;
    }
    if(width<0){ // means width is overflow
        return 1;
    }
    return width+1;
}