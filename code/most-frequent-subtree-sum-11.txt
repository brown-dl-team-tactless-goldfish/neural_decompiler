// Runtime: 20 ms, faster than 47.23% of C++ online submissions for Most Frequent Subtree Sum.
// Memory Usage: 24.8 MB, less than 31.53% of C++ online submissions for Most Frequent Subtree Sum.
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        if (!root)
            return {};
        traverse(root);
        vector<int> res {};
        for (auto it : freq)
            if (it.second == maxFreq)
                res.push_back(it.first);
        return res;
    }
private:
    int traverse(TreeNode* root) {
        if (!root)
            return 0;
        int sum = root->val + traverse(root->left) + traverse(root->right);
        maxFreq = max(maxFreq, ++freq[sum]);
        return sum;
    }
    unordered_map<int, int> freq; // sum, frequency
    int maxFreq = 0;
};