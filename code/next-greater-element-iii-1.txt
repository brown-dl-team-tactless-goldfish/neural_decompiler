if(i == num_len)
{
    return -1;
}
//location to swap "digit"
swap_location = i + 1;
//sort char array before swap_location
qsort(buf, swap_location, sizeof(char), comparator);

//find where to swap digit
for(k = 0; k < swap_location ; k++)
{
    if(buf[k] <= buf[swap_location])
    {
        break;
    }
}
// swap digits
temp_num = buf[swap_location];
buf[swap_location] = buf[k - 1];
buf[k - 1] = temp_num;

// restore int
temp = 1;
result = 0;
for(i = 0; i < num_len; i++)
{
    result += (buf[i] * temp);
    if(result > SINT_MAX)
    {
        return -1;
    }
    temp *= 10;
}

return result;