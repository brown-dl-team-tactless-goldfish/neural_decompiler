class Solution {
public:
    int minTaps(int n, vector<int>& ranges) {
        vector<int> dp(n+1, -1);//[i]farthest tap could reach through ith tap with one tap only
        
        for(int i = 0; i <= n; i++)//each tap
        {
            int radius = ranges[i];
            if(radius == 0) continue;
            int left = std::max(0, i-radius);
            int right = std::min(n, i+radius);
            for(int j = left; j <= right; j++)
            {
                dp[j] = std::max(dp[j], right);
            }
        }
        
        int cnt = 0;
        int pos = 0;
        while(pos < n)
        {
            if(dp[pos] == -1) return -1;
            int right = dp[pos];
            if(pos == right) return -1;
            pos = right;
            cnt++;
        }
        return cnt;
    }
};