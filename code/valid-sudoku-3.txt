
// return -> false if there is any duplication found
bool checkRow(char **board, int cellRow)
{
    char cellArr[10] = {0};
    for(int c=0; c < 9; c++){
        char cell = board[cellRow][c];
        if(cell != '.'){
            char idx = cell-'0';
            if(cellArr[idx] == 0){
                cellArr[idx] = cell;
            }else{ 
                return false;
            }
        }
    }
    return true;
}

bool checkCol(char **board, int cellCol)
{
    char cellArr[10] = {0};
    for(int r=0; r < 9; r++){
        char cell = board[r][cellCol];
        if(cell != '.'){
            char idx = cell-'0';
            if(cellArr[idx] == 0){
                cellArr[idx] = cell;
            }else{
                return false;
            }
        }
    }
    return true;
}

/*
gridNo will be like ( 1 grid will contains 9 cells )
    0 | 1 | 2
    3 | 4 | 5
    6 | 7 | 8
*/
bool checkGrid(char **board, int gridNo)
{
    /* always point to the top left corner */
    int row = ( gridNo / 3 ) * 3;
    int col = ( gridNo % 3 ) * 3;
    char cellArr[10] = {0};
    for(int r = row; r < row+3; r ++){
        for(int c = col; c < col + 3; c++){
            char cell = board[r][c];
            if(cell != '.'){
                char idx = cell-'0';
                if(cellArr[idx] == 0){
                    cellArr[idx] = cell;
                }else{
                    return false;
                }
            }
        }
    }
    return true;
}


bool isValidSudoku(char** board, int boardSize, int* boardColSize)
{
    for(int n = 0; n < boardSize; n++){
        if( checkRow(board, n) == false ) return false;
        if( checkCol(board, n) == false ) return false;
        if ( checkGrid(board, n) == false ) return false;
    }
    return true;
}