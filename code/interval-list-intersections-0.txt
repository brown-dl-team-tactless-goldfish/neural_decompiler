
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** intervalIntersection(int** A, int ASize, int* AColSize, int** B, int BSize, int* BColSize, int* returnSize, int** returnColumnSizes){
    int l = (ASize>BSize)?ASize:BSize;
    int** result = malloc(sizeof(int*)*l*2);
    *returnColumnSizes = malloc(sizeof(int*)*l*2);
    int   count = 0;
    int   i=0;
    int   j=0;
    while (i<ASize && j<BSize)
    {
        if  ((A[i])[0] < (B[j])[0])             // [ {
        {
            if ((A[i])[1] < (B[j])[0]) i++;     // []{}
            else if ((A[i])[1] < (B[j])[1])
            {                                   // [{]}
                result[count] = malloc(sizeof(int)*2);
                (result[count])[0] = (B[j])[0];
                (result[count])[1] = (A[i])[1];
                i++;
                (*returnColumnSizes)[count++]=2;
            }  
            else
            {                                   // [{}]
                result[count] = malloc(sizeof(int)*2);
                (result[count])[0] = (B[j])[0];
                (result[count])[1] = (B[j])[1];
                j++;
                (*returnColumnSizes)[count++]=2;
            }
            
        }
        else
        {                                       // { [
            if ((B[j])[1] < (A[i])[0]) j++;     // {}[]
            else if ((B[j])[1] < (A[i])[1])
            {                                   // {[}]
                result[count] = malloc(sizeof(int)*2);
                (result[count])[0] = (A[i])[0];
                (result[count])[1] = (B[j])[1];
                j++;
                (*returnColumnSizes)[count++]=2;
            }
            else
            {                                    // {[]}
                result[count] = malloc(sizeof(int)*2);
                (result[count])[0] = (A[i])[0];
                (result[count])[1] = (A[i])[1];
                i++;
                (*returnColumnSizes)[count++]=2;
            }
            
        }
    }
    *returnSize = count;
    return result;
}