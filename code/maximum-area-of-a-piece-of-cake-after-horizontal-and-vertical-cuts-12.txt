class Solution {
public:
    int maxArea(int h, int w, vector<int>& horizontalCuts, vector<int>& verticalCuts) {
        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        
        int maxHorizontalDiff = max(horizontalCuts[0], h - horizontalCuts.back());
        for (int i = 0; i < horizontalCuts.size() - 1; i++)
            maxHorizontalDiff = max(maxHorizontalDiff,
                                    horizontalCuts[i + 1] - horizontalCuts[i]);
        int maxVerticalDiff = max(verticalCuts[0], w - verticalCuts.back());
        for (int i = 0; i < verticalCuts.size() - 1; i++)
            maxVerticalDiff = max(maxVerticalDiff,
                                  verticalCuts[i + 1] - verticalCuts[i]);
        return ((long)maxHorizontalDiff * maxVerticalDiff % 1000000007);
    }
};