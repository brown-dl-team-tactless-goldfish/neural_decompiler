typedef struct {
    int n;
    pthread_mutex_t lock1,lock2,lock3; 
} ZeroEvenOdd;

ZeroEvenOdd* zeroEvenOddCreate(int n) {
    ZeroEvenOdd* obj = (ZeroEvenOdd*) malloc(sizeof(ZeroEvenOdd));
    obj->n = n;
    
    pthread_mutex_init(&obj->lock1,NULL);
    pthread_mutex_init(&obj->lock2,NULL);
    pthread_mutex_init(&obj->lock3,NULL);
    pthread_mutex_lock(&obj->lock2);
    pthread_mutex_lock(&obj->lock3);
    return obj;
}

// You may call global function `void printNumber(int x)`
// to output "x", where x is an integer.

void zero(ZeroEvenOdd* obj) {

    for(int i=0;i<obj->n;i++)
    {
        pthread_mutex_lock(&obj->lock1);
        printNumber(0);
        
        if (i%2 == 0)
        {
            pthread_mutex_unlock(&obj->lock2);
        }
        else
        {
            pthread_mutex_unlock(&obj->lock3);
        }
    }   
}

void even(ZeroEvenOdd* obj) {
    for(int i=2;i<=obj->n;i+=2)
    {
        pthread_mutex_lock(&obj->lock3);
        printNumber(i);
        pthread_mutex_unlock(&obj->lock1);
    }
}

void odd(ZeroEvenOdd* obj) {
    for(int i=1;i<=obj->n;i+=2)
    {
        pthread_mutex_lock(&obj->lock2);
        printNumber(i);
        pthread_mutex_unlock(&obj->lock1);
    }    
}

void zeroEvenOddFree(ZeroEvenOdd* obj) {
    free(obj);
}