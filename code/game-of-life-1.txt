int* function(int** board, int boardRowSize, int boardColSizes, int i, int j){
    int* ret=(int*)calloc(2,sizeof(int));
    if(i+1<boardRowSize){
        ret[board[i+1][j]]++;
        if(j+1<boardColSizes){
            ret[board[i+1][j+1]]++;
        }
        if(j-1>-1){
            ret[board[i+1][j-1]]++;
        }
    }
    if(i-1>-1){
        ret[board[i-1][j]]++;
        if(j+1<boardColSizes){
            ret[board[i-1][j+1]]++;
        }
        if(j-1>-1){
            ret[board[i-1][j-1]]++;
        }
    }
    if(j+1<boardColSizes){
        ret[board[i][j+1]]++;
    }
    if(j-1>-1){
        ret[board[i][j-1]]++;
    }
    return ret;
}
void gameOfLife(int** board, int boardRowSize, int *boardColSizes) {
   int** result=(int**)malloc(boardRowSize*sizeof(int*));
    for(int i=0;i<boardRowSize;i++){
        result[i]=(int*)calloc(boardColSizes[i],sizeof(int));
    }
    for(int i=0;i<boardRowSize;i++){
        for(int j=0;j<boardColSizes[i];j++){
            int* temp=function(board,boardRowSize,boardColSizes[0],i,j);
            if(board[i][j]==1){
                if(temp[1]<2||temp[1]>3){
                    result[i][j]=0;
                }else{
                    result[i][j]=1;
                }
            }else{
                if(temp[1]==3){
                    result[i][j]=1;
                }
            }
            free(temp);
        }
    }
    for(int i=0;i<boardRowSize;i++){
        for(int j=0;j<boardColSizes[i];j++){
            board[i][j]=result[i][j];
        }
        free(result[i]);
    }
    return board;
}