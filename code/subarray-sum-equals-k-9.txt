
#include <assert.h>

#define HASHSIZE 10000

typedef struct node{
    int key;
    int val;
    struct node *next;
} Hash;

Hash* HashInit() 
{
    Hash *head = malloc(HASHSIZE*sizeof(Hash));
    assert(head != NULL);
    memset(head, 0, HASHSIZE*sizeof(Hash));
    return head;
}

int GetHash(int key) 
{
    while (key < 0) {
        key += HASHSIZE;
    }
    return key % HASHSIZE;
}

void HashAdd(Hash *head, int key) 
{
    int pos = GetHash(key);
    if (head[pos].key == 0 && key != 0) {
        head[pos].key = key;
        head[pos].val = 1;
    } else if (head[pos].key == key) {
        head[pos].val++;
    } else {
        Hash *p = &head[pos];
        while (p->key != key && p->next != NULL) {
            p = p->next;
        }
        if (p->key == key) {
            p->val++;
        } else {
            p->next = malloc(sizeof(Hash));
            p->next->key = key;
            p->next->val = 1;
            p->next->next = NULL;
        }
    }
}

int HashGetVal(Hash *head, int key) 
{
    int pos = GetHash(key);
    Hash node = head[pos];
    Hash *p = &node;
    while (p != NULL && p->key != key) {
        p = p->next;
    }
    if (p == NULL) {
        return 0;
    }
    return p->val;
}

void HashDestroy(Hash *head) 
{
    for (int i = 0; i < HASHSIZE; i++) {
        Hash *p = head[i].next;
        while (p != NULL) {
            Hash *tmp = p;
            p = p->next;
            free(tmp);
        }
    }
    free(head);
}

int subarraySum(int* nums, int numsSize, int k){
    Hash *hashArray = HashInit();
    HashAdd(hashArray, 0);
    int res = 0;
    int sum = 0;
    for (int i = 0; i < numsSize; i++) {
        sum += nums[i];
        res += HashGetVal(hashArray, sum - k);
        HashAdd(hashArray, sum);
    }
    HashDestroy(hashArray);
    
    return res;
}
