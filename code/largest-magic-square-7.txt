class Solution {
private: bool check(vector<vector<int>>& grid, int i, int j, int k, vector<vector<int>>&leftToRight, vector<vector<int>>&topToDown){
    int sum = leftToRight[i+1][j+k] - leftToRight[i+1][j] ;
    for(int row = i+1; row <= i+k; row++){
        if((leftToRight[row][j+k] - leftToRight[row][j]) != sum )
            return false ;
    }
    
    for(int col = j+1; col <= j+k; col++){
        if((topToDown[i+k][col] - topToDown[i][col]) != sum )
            return false ;
    }
    int d = 0 ;
    for(int len = 0; len < k; len++)
        d += grid[i+len][j+len] ;
    if(d != sum)
        return false ;
    d = 0 ;
    for(int len = 0; len < k; len++)
        d += grid[i+len][j+k-1-len] ;    
    if(d != sum)
        return false ;  
    return true ;
}
public:
    int largestMagicSquare(vector<vector<int>>& grid) {
        int m = grid.size() ;
        int n = grid[0].size() ;
        vector<vector<int>>leftToRight(m+1, vector<int>(n+1)) ;
        vector<vector<int>>topToDown(m+1, vector<int>(n+1)) ;
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                leftToRight[i+1][j+1] = leftToRight[i+1][j] + grid[i][j] ;     
            }
        }
        
        for(int j = 0; j < n; j++){
            for(int i = 0; i < m; i++){
                topToDown[i+1][j+1] = topToDown[i][j+1] + grid[i][j] ;        
            }
        }
        
        int ret = 1 ;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                for(int k = ret+1; k <= min(m-i, n-j); k++){
                    if(check(grid, i, j, k, leftToRight, topToDown))
                        ret = k ;
                }
            }
        }
        return ret ;
    }
};