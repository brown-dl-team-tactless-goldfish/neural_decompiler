/*
https://leetcode.com/problems/sorting-the-sentence/
A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.

A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.

For example, the sentence "This is a sentence" can be shuffled as "sentence4 a3 is2 This1" or "is2 sentence4 This1 a3".
Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.

Example 1:
Input: s = "is2 sentence4 This1 a3"
Output: "This is a sentence"
Explanation: Sort the words in s to their original positions "This1 is2 a3 sentence4", then remove the numbers.

Example 2:
Input: s = "Myself2 Me1 I4 and3"
Output: "Me Myself and I"
Explanation: Sort the words in s to their original positions "Me1 Myself2 and3 I4", then remove the numbers.
*/

//Junseok's code

/*
StringArray_ppc[0]: This 
StringArray_ppc[1]: is
StringArray_ppc[2]: a 
StringArray_ppc[3]: sentence
*/

char * sortSentence(char * s){
    char StringArray_ppc[9][200];
    int i=0;
    int j=0;
    int Key_i = 0;
    int StartIndex_i = 0;
    int LengthSubString_i = 0;
    int SizeNonEmptySubString = 0;
    
	// Make a LUT
    StartIndex_i = 0;
    for(i=0; s[i] != '\0'; i++)
    {
        Key_i = s[i]-'1';
        if(0 <= Key_i && Key_i < 9)
        {
            SizeNonEmptySubString++;
            LengthSubString_i = i - StartIndex_i;
            memset(StringArray_ppc[Key_i], '\0', LengthSubString_i + 1);
            memcpy(StringArray_ppc[Key_i], &s[StartIndex_i], LengthSubString_i);
        }
        else if (s[i] == ' ')
        {
            StartIndex_i = i + 1;
        }
        else
        {
            // Do nothing
        }
    }    
        
	// Order the given string based on the LUT
    StartIndex_i = 0;
    for(i=0; i<SizeNonEmptySubString;i++)
    {
        // Update Length of SubString
        LengthSubString_i = 0;
        for(j=0; StringArray_ppc[i][j] != '\0';j++)
        {
            LengthSubString_i = j+1;
        }
        
        // Copy the data from Buffer to Target
        memcpy(&s[StartIndex_i], StringArray_ppc[i], LengthSubString_i);
        
        // Update StartIndex
        StartIndex_i += LengthSubString_i;
        
        // if it doesn't reach the end yet
        if(i < SizeNonEmptySubString - 1)
        {
            s[StartIndex_i++] = ' ';
        }
        
        // if it reaches the end
        else
        {
            s[StartIndex_i++] = '\0';
        }
    }
    
    return s;    
}