class Solution {
public:
    int result = 0;
    vector<int> dfs(TreeNode* node, bool isLeft) {
        if (!node) return vector<int>{1, isLeft ? INT_MIN : INT_MAX, 0};
        if (!node->left && !node->right) return vector<int>{1, node->val, node->val};
        auto l = dfs(node->left, true), r = dfs(node->right, false);
        result = max(result, max(l[2], r[2]));
        if (l[0] == 1 && r[0] == 1 && l[1] < node->val && r[1] > node->val)
            if (isLeft)
                return vector<int>{1, r[1] == INT_MAX ? node->val : r[1], l[2] + r[2] + node->val};
            else
                return vector<int>{1, l[1] == INT_MIN ? node->val : l[1], l[2] + r[2] + node->val};
        else
            return vector<int>{0, 0, max(l[2], r[2])};
    }
    
    int maxSumBST(TreeNode* root) {
        if (!root) return 0;
        auto l = dfs(root->left, true), r = dfs(root->right, false);
        if (l[0] == 1 && r[0] == 1 && l[1] < root->val && r[1] > root->val)
            return max(result, l[2] + r[2] + root->val);
        else
            return max(result, max(l[2], r[2]));
    }
};