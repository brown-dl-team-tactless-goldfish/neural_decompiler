class Solution {
public:
    int findMinimumTime(vector<vector<int>>& tasks) {
        vector<vector<int>> vec;
        int res = 0;
        map<int ,vector<int>> mp;
        
        for(int i=0;i<tasks.size();i++){//break the interval into starting and ending sections with index to mark an element for future refrence
            vec.push_back({tasks[i][0],0,tasks[i][2],i});//0 is indicator of start of a task
            vec.push_back({tasks[i][1],1,tasks[i][2],i});//and 1 is indicator of end of a task
        }
        
        sort(vec.begin(),vec.end());//sort based on time then start of task
        //we inserted values in that order to get the required order when sorting is applied
        
        for(auto x:vec){
            if(x[1]==0)//if starting of interval add it into the map
                mp[x[3]] = {x[0],x[2]};//with starting value and duration
            else{
                int ending = x[0],ind = x[3];
                int curr_dur = mp[ind][1];//get the time remaining to finish the task
                res += curr_dur;//add it to res
                for(auto &j:mp){//go to every element in the map and
                    int use = min(j.second[1],min(ending-j.second[0]+1,curr_dur));//find the minimum duration that can be used from it
                    j.second[1] -= use;//subtract the used duration from duration
                    j.second[0] += use;// and increase the starting time of the task by that amount of time
                }
                mp.erase(ind);//erase the current element from map as it is processed completely
            }
        }
        return res;//return the final result

    }
};
 