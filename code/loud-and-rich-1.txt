/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int comp(const void*a,const void*b)
{
    return (*(int**)a)[1]-(*(int**)b)[1];
}
void function(int** richer, int richerRowSize, int* quiet, int quietSize, int **map, int num,
             int *array){
    if(map[num][0]==-1){
        return;
    }
    for(int i=map[num][0];i<=map[num][1];i++){
        int tamp=richer[i][0];
        if(array[tamp]==-1){
            array[tamp]=tamp;
            function(richer, richerRowSize, quiet, quietSize, map, tamp,array);
        }
        
        if(quiet[array[tamp]]<quiet[array[num]]){
            array[num]=array[tamp];
        }
    }
    return;
}
int* loudAndRich(int** richer, int richerRowSize, int *richerColSizes, int* quiet, int quietSize, int* returnSize) {
    *returnSize=quietSize;
    qsort(richer,richerRowSize,sizeof(int*),comp);
    int **map=(int**)malloc(quietSize*sizeof(int*));
    for(int i=0;i<quietSize;i++){
        map[i]=(int*)malloc(quietSize*sizeof(int));
        map[i][0]=-1;
        map[i][1]=-1;
    }
    for(int i=0;i<richerRowSize;i++){
        if(i==0||richer[i-1][1]!=richer[i][1]){
            map[richer[i][1]][0]=i;
        }
        if(i==richerRowSize-1||richer[i][1]!=richer[i+1][1]){
            map[richer[i][1]][1]=i;
        }
    }
    int *array=(int*)malloc(quietSize*sizeof(int));
    for(int i=0;i<quietSize;i++){
        array[i]=-1;
    }
    for(int i=0;i<quietSize;i++){
        if(array[i]!=-1){
            continue;
        }
        array[i]=i;
        function(richer, richerRowSize, quiet, quietSize, map, i,array);
    }
    return array;
}