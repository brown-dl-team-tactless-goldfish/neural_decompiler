#define N 100005
class Solution {
public:
    int parent[N];
    int size[N];
    int cables[N];
    
    int Find(int a){
        if(parent[a] == a)return a;
        return parent[a] = Find(parent[a]);
    }
    
    void merge(int a, int b){
        int pa = Find(a), pb = Find(b);
        if(pa == pb){
            cables[pa] += 1;
            return;
        }
        cables[pa] += cables[pb] + 1;
        size[pa] += size[pb];
        parent[pb] = pa;
        return;
    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        memset(cables, 0, sizeof cables);
        for(int i = 0; i<N; i++)size[i] = 1;
        
        for(int i = 0; i<=n; i++)parent[i] = i;
        
        int m = (int)connections.size();
        for(int i = 0; i<m; i++){
            int a = connections[i][0], b = connections[i][1];
            merge(a, b);
        }
        
        int con = 0; // the variable to represent the total number of components.
        int total = 0; // the varialbe to represent the total number of extra cables.
        
        for(int i = 0; i<=n-1; i++){
            if(Find(i) == i){
                ++con;
                total += cables[i] - size[i] + 1;
            }
        }
        
        if(total>=con-1)return con-1;
        return -1;
    }
};