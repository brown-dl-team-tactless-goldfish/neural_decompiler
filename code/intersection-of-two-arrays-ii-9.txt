/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
 



int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    insertionSort(nums1, nums1Size);
    insertionSort(nums2, nums2Size);
    int i=0;
    int j=0;
    int k=0;
    int *temp;
    if(nums1Size>nums2Size){
     temp = (int*) malloc(nums1Size*sizeof(int));    
    }
    else{
     temp = (int*) malloc(nums2Size*sizeof(int)); 
    }
    while(i<nums1Size && j<nums2Size){
    if(nums1[i]==nums2[j]){
        temp[k]=nums1[i];
        i++;
        j++;
        k++;
        }
    else if(nums1[i]>nums2[j]){
        j++;
    }
    else if(nums1[i]<nums2[j]){
        i++;
    }

    }
*returnSize= k;
return temp;


}