class Solution {
public:
    int minJumps(vector<int>& arr) {
        if(arr.size() == 1) return 0;
        map<int,vector<int>> m;
        map<int,bool> mv;
        for(int i=0;i<arr.size();i++){
            m[arr[i]].push_back(i);
            mv[arr[i]] = 0;
        }
        queue<int> q;
        vector<bool> vis(arr.size(),0);
        vis[0] = 1;
        int ste = 0; // to store steps
        q.push(0);
        while(!q.empty()){
            int s = q.size();
            ste++;
            for(int i=0;i<s;i++){
                int c = q.front(); q.pop();
                if(c+1<arr.size() && !vis[c+1]){
                    q.push(c+1); vis[c+1] = 1;
                }
                if(c-1 >= 0 && !vis[c-1]){
                    q.push(c-1); vis[c-1] = 1;
                }
                // we should not iterate for visited ar value of m
                if(!mv[arr[c]]){
                    for(int x: m[arr[c]]){
                        if(x != c && !vis[x]){
                            q.push(x); vis[x] = 1;
                        }
                    }
                    mv[arr[c]] = 1;
                }
            }
            if(vis[arr.size()-1]) return ste;
        }
        return -1;
    }
};