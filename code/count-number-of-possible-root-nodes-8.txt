class Solution {
public:
    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {
        int n = size(edges) + 1;
        vector<vector<int>> adj(n);
        for (auto& e: edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<unordered_set<int>> g(n);
        for (auto& e: guesses)
            g[e[0]].insert(e[1]);
        int cnt = 0;
        function<void(int, int)> dfs1 = [&] (int u, int p) {
            for (auto v: adj[u]) {
                if (v != p) {
                    cnt += g[u].count(v);
                    dfs1(v, u);
                }
            }
        };
        dfs1(0, -1);
        int ans = 0;
        function<void(int, int)> dfs2 = [&] (int u, int p) {
            ans += cnt >= k;
            for (auto v: adj[u]) {
                if (v != p) {
                    cnt += g[v].count(u) - g[u].count(v);
                    dfs2(v, u);
                    cnt += g[u].count(v) - g[v].count(u);
                }
            }
        };
        dfs2(0, -1);
        return ans;
    }
};