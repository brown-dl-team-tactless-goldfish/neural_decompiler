class Solution {
public:
    void dfs(vector<int> Graph[], vector<bool>& visited, int start){
        visited[start] = true;
        for(int ver : Graph[start]){
            if(! visited[ver]){
                dfs(Graph, visited, ver);
            }
        }
    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        //make graph
        vector<int> Graph[n];
        for(auto edges : connections){
            Graph[edges[0]].push_back(edges[1]);
            Graph[edges[1]].push_back(edges[0]);
            
        }
        //find connected components
        vector<bool> visited;
        visited.assign(n, false);
        int components = 0;
        
        for(int i = 0; i < n; i++){
            if(! visited[i]){
              dfs(Graph, visited, i);
              components++;
            }
        }
        if(n - 1 <= connections.size()) return components - 1;
        return -1;
    }
};