int minTime(int n, int** edges, int edgesSize, int* edgesColSize, bool* hasApple, int hasAppleSize){
    if (n == 1 || edgesSize == 0) return 0;
    bool flag = false;
    int ans = 0, cur, tmp;
    int *friends = (int *)malloc(sizeof(int) * n);
    friends[0] = 0;
    for (int i = 1; i < n; i ++) {
        friends[i] = -1;
    }
    // friends[]: node i and node friends[i] are connected

    while(!flag) { 
        flag = true;
        for (int i = 0; i < edgesSize; i ++) {
            if (friends[ edges[i][1] ] == -1) {
                if (friends[ edges[i][0] ] != -1)
                    friends[ edges[i][1] ] = edges[i][0];
                else
                    flag = false;
            }
            else if (friends[ edges[i][0] ] == -1) {
                if (friends[ edges[i][1] ] != -1)
                    friends[ edges[i][0] ] = edges[i][1];
            }
        }
    }
    for (int i = 1; i < n; i ++) {
        if (hasApple[i]) {
            cur = i;
            while(cur != 0) {
                ans += 2;
                tmp = friends[cur];
                friends[cur] = -1; // node "cur" has been visited
                cur = tmp;
                if ( hasApple[cur] || friends[cur] == -1) break;
            } 
        }
    }

    return ans;
}