class Solution {
    int gcd(int x, int y) {
        return y ? gcd(y, x % y) : x;
    }
    
    void dfs(int x, int f, const vector<vector<int>> &con, const vector<int>& nums, vector<int> &path, vector<vector<int>> &v, vector<int> &r) {
        int c = -1;
        for (int i = 1; i <= 50; ++i) {
            if (!v[i].empty() && v[i].back() > c && gcd(nums[x], i) == 1) {
                c = v[i].back();
            }
        }
        r[x] = c >= 0 ? path[c] : -1;
        v[nums[x]].push_back(path.size());
        path.push_back(x);
        for (int y : con[x]) {
            if (y != f) {
                dfs(y, x, con, nums, path, v, r);
            }
        }
        v[nums[x]].pop_back();
        path.pop_back();
    }
public:
    vector<int> getCoprimes(vector<int>& nums, vector<vector<int>>& edges) {
        const int n = nums.size();
        vector<vector<int>> con(n);
        for (const auto & e : edges) {
            con[e[0]].push_back(e[1]);
            con[e[1]].push_back(e[0]);
        }
        vector<int> r(n), path;
        vector<vector<int>> v(51);
        dfs(0, -1, con, nums, path, v, r);
        return r;
    }
};