/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    string findDuplicate(TreeNode* root, unordered_map<string, TreeNode*>& mp, set<TreeNode*>& ret) {
        if(!root)
            return "$ ";
        string s = "$" + to_string(root -> val) + findDuplicate(root -> left, mp, ret) + findDuplicate(root -> right, mp, ret);
        
        if(mp.find(s) != mp.end()) {
            ret.insert(mp[s]);
        }
        else {
            mp[s] = root;
        }
        return s;
    }
    
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string, TreeNode*> mp;
        set<TreeNode*> ret;
        findDuplicate(root, mp, ret);
        return vector<TreeNode*>(ret.begin(), ret.end());
    }
};