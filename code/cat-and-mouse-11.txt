class Solution {
public:
    int catMouseGame(vector<vector<int>>& graph) {
        auto n = graph.size();
        vector<vector<array<char,2>>> adj_cnt(n,vector<array<char,2>>(n));
        // adj_cnt[mouse position][cat position][0/1 = mouse/cat to move]
        // is the number of possibly non-losing moves for current player
        // (if zero, means the state has been solved)
        for (auto i = 0; i < n; ++i) for (auto j = 0; j < n; ++j)
            adj_cnt[i][j] = {graph[i].size(), graph[j].size()};
        deque<pair<array<char,2>,pair<bool,bool>>> q;
        // {{mouse pos, cat pos}, {0/1 = mouse/cat, 0/1 = current/previous player wins}}
        for (auto i = 1; i < n; ++i) {
            q.push_back({{i,i},{0,1}});
            q.push_back({{i,i},{1,0}});
            q.push_back({{0,i},{1,1}}); // if mouse reaches 0, it's cat's turn to move and it loses
            q.push_back({{i,0},{0,0}}); // if cat reaches 0 (invalid move), it's mouse's turn to move and it wins
            adj_cnt[i][i] = {0,0};
            adj_cnt[0][i] = adj_cnt[i][0] = {0,0};
            // mark all these states as solved
        }
        while (!q.empty()) {
            auto sz = q.size();
            for (auto i = 0; i < sz; ++i) {
                auto entry = q[0];
                q.pop_front();
                bool curr_player, prev_win;
                tie(curr_player,prev_win) = entry.second;
                
                entry.second.first ^= true, entry.second.second ^= true; // considering last move, switch player and winning side
                auto& lpp_ref = entry.first[!curr_player]; // location of previous player
                auto lpp = lpp_ref;
                for (auto j : graph[lpp]) {
                    // retrograde expansion, generate all possible previous state
                    lpp_ref = j;
                    auto& table_entry = adj_cnt[entry.first[0]][entry.first[1]][!curr_player];
                    if (table_entry) {
                        if (prev_win || --table_entry == 0) { // found one winning move, or all moves have been marked losing
                            table_entry = 0, q.push_back(entry);
                            if (curr_player && entry.first[0] == 1 && entry.first[1] == 2) // initial state is marked
                                return prev_win ? 1 : 2;
                        }
                    }
                }
            }
        }
        return 0; // the initial state belongs to the set of states that are never marked as solved.
        // For each state in this set, the current player can either choose a losing move, or a move that again lands in a state in this set.
        // So the best outcome is a draw.
        // (After making a losing move, the winning strategy of the other player won't make use of any state in the never-marked set.)
    }
};