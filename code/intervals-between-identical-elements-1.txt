class Solution {
public:
    vector<long long> find(vector<long long>nums)
    {
        int n = nums.size();
        vector<long long>res(n,0);
        vector<long long>prefix(n+1,0);
        
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        for (int i = 0; i < n; ++i) {
            res[i] = i * nums[i] - prefix[i] + (prefix[n] -  prefix[i] - (n - i) * nums[i]);
        }
        return res;
        
        
        
        
        // O(1)
        // long long n=nums.size();
        // long long right,left;
        // right=left=0;
        // long long ans=0;
        // vector<long long>v(n,0);
        // right=accumulate(nums.begin(),nums.end(),0ll);
        // for(int i=0;i<n;i++)
        // {
        //     right=right-nums[i];
        //     long long left_sum=i*nums[i]-left;
        //     long long right_sum=right-(n-i-1)*nums[i];
        //     v[i]=left_sum+right_sum;
        //     left+=nums[i];
        // }
        // return v;
    }
    vector<long long> getDistances(vector<int>& arr) 
    {
        unordered_map<long long,vector<long long>>mp;
        for(int i=0;i<arr.size();i++)
        {
            mp[arr[i]].push_back(i);
        }
        vector<long long>ans(arr.size(),0);
        for(auto &it:mp)
        {
            vector<long long>v=find(it.second);
            vector<long long>index=it.second;
            for(int i=0;i<index.size();i++)
            {
                ans[index[i]]=v[i];
            }
        }
        return ans;
    }
};