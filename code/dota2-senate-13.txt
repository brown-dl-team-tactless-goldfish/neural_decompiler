class Solution {
public:
    string predictPartyVictory(string senate)
    {
        int radiant=count(senate.begin(),senate.end(),'R');//count radiant
        int dire=senate.size()-radiant;//count dire
        int isWaitingR=0,isWaitingD=0;//members who haven't voted yet
        vector<bool>isBanned(senate.size(),false);//banned members
        int i=0;
        while(radiant>0 && dire>0)//no party has won yet
        {
            while(isBanned[i])
                i=(i+1)%senate.size();//first non-banned member
            if(senate[i]=='R')
            {
                if(isWaitingD>0)//there exists member of 'D' to ban this person
                {
                    isBanned[i]=true;//ban him
                    radiant--;//reduce eligible voters of 'R' group
                    isWaitingD--;//now one less member of 'D' is waiting
                }    
                else
                    isWaitingR++;//add to waiting list so he can ban a 'D' member later
            }
            else
            {
                if(isWaitingR>0)//there exists member of 'R' to ban this person
                {
                    isBanned[i]=true;//ban him
                    dire--;//reduce eligible voters of 'D' group
                    isWaitingR--;//now one less member of 'R' is waiting
                }
                else
                    isWaitingD++;//add to waiting list so he can ban a 'R' member later
            }
            i=(i+1)%senate.size();
        }
        if(radiant)
            return "Radiant";
        return "Dire";
    }
};