int gcd(int a, int b)
{
	if (a==0)
		return b;
	return gcd(b%a,a);
}
bool func(int n)
{
	bool isPrime = true;
	if (n==0 || n==1) 
	{
		isPrime = false;
	}
	else 
	{
		for (int i=2;i<=n/2;++i) 
		{
			if (n%i==0) 
			{
				isPrime = false;
				break;
			}
		}
	}
	return isPrime;
}
    bool hasGroupsSizeX(vector<int>& deck) {
        if(deck.size()<2) return false;
        map<int,int> mp;
        for(int i=0;i<deck.size();i++)
        {
            if(mp.find(deck[i])==mp.end())
            {
                mp.insert(pair<int,int>(deck[i],1));
            }
            else mp[deck[i]]++;
        }
        
        vector<int> v;
        for(auto itr=mp.begin();itr!=mp.end();itr++)
        {
            v.push_back(itr->second);
        }
        
        if(v.size()==1)
        {
            if(v[0]==2) return true;
            else if(func(v[0])) return false;
            else return true;
        }
        else
        {
            int c = 0;
            for(int i=1;i<v.size();i++)
            {
                c = gcd(v[i-1],v[i]);
                if(c==1) return false;
            }
            return true;
        }
    }
};