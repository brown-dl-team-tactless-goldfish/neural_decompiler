/**
 * Note: The returned array must be malloced, assume caller calls free().
 */


int ispossible(int* temp,int n)
{
    if(temp[1]>=n || temp[1]<0)
        return 0;
    else if(temp[0]<0 || temp[0]>=n)
        return 0;
    return 1;
    
}
int* executeInstructions(int n, int* startPos, int startPosSize, char * s, int* returnSize){
    int possible_move=0;
    int temp[2] = {startPos[0],startPos[1]};    
    *returnSize = strlen(s);
    int p =0;
    int *arr = malloc(strlen(s)*sizeof(int));

    for(int i=0;i<strlen(s);i++)
    {
        possible_move = 0;
        for(int j=i;j<strlen(s);j++)
        {
            if(s[j]=='L')
            {
                temp[1]--;
                int k =ispossible(temp,n); 
                if(k==1)
                    possible_move++;
                else
                    break;               
            }                
            else if(s[j]=='R')
            {
                temp[1]++;
                int k=ispossible(temp,n);
                if(k==1)
                    possible_move++;
                else
                    break;
            }
            else if(s[j]=='U')
            {
                temp[0]--;
                int k=ispossible(temp,n);
                if(k==1)
                    possible_move++;
                else
                    break;
            }
            else if(s[j]=='D')
            {
                temp[0]++;
                int k=ispossible(temp,n);
                if(k==1)
                    possible_move++;
                else
                    break;
            }
            
        }
        temp[0] =startPos[0];
        temp[1]= startPos[1];
        arr[p] = possible_move;
        p++;
    }
    return arr;



}