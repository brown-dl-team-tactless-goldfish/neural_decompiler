typedef struct{
    int sum;
    int min;
    int max;
    bool status;
}Info;

Info check(struct TreeNode* root, int *MaxSum){
    Info ret;

    if(root == NULL){
        return ret; 
    }
    
    if(root->left == NULL && root->right == NULL){
        ret.status = true;
        ret.sum = root->val;
        ret.min = root->val;
        ret.max = root->val;
        *MaxSum = fmax(*MaxSum , root->val);  
        return ret;
    }
    
    Info leftInfo = check(root->left, MaxSum);
    Info rightInfo = check(root->right, MaxSum);
    
    if(root->left == NULL){
        if(rightInfo.status == true && root->val < rightInfo.min){
            ret.sum = root->val + rightInfo.sum;
            ret.status = true;
            ret.max = rightInfo.max;
            ret.min = root->val;
            *MaxSum = fmax(*MaxSum , ret.sum);
        }
        else
            ret.status = false;
        return ret;
    }

    if(root->right == NULL){
        if(leftInfo.status == true && root->val > leftInfo.max){
            ret.sum = root->val + leftInfo.sum;
            ret.status = true;
            ret.max = root->val;
            ret.min = leftInfo.min;
            *MaxSum = fmax(*MaxSum , ret.sum);
        }
        else
            ret.status = false;
        return ret;
    }    


    if(leftInfo.status == true && rightInfo.status == true && root->val > leftInfo.max && root->val < rightInfo.min){
        ret.sum = root->val + leftInfo.sum + rightInfo.sum;
        ret.status = true;
        ret.max = rightInfo.max;
        ret.min = leftInfo.min;
        *MaxSum = fmax(*MaxSum , ret.sum);
    }        
    else
        ret.status = false;
    return ret;        
}

int maxSumBST(struct TreeNode* root){
    int MaxSum = 0;
    Info ret = check(root, &MaxSum);
    return MaxSum;
}