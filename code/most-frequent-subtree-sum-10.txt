#include <unordered_map>

int sum(TreeNode* root,unordered_map<int,int>& m,int& f)
{
    if (root==NULL) return 0;
    
    int s = sum(root->left,m,f)+sum(root->right,m,f)+root->val;
    m[s]+=1;
    f = max(f,m[s]);
    return s;
}

class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        
        unordered_map<int,int> m;
        int f=0;
        int x = sum(root,m,f);
        
        vector<int> ans;
        auto it = m.begin();
        while (it!=m.end())
        {
            if (it->second==f)
            {
                ans.push_back(it->first);
            }
            ++it;
        }
        
        return ans;
    }
};