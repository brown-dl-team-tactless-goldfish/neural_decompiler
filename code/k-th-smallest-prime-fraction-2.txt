/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int cmp(const void *x, const void *y) {
    return (*(int*)x - *(int*)y);
}

int* kthSmallestPrimeFraction(int* arr, int arrSize, int k, int* returnSize){
    int i, j, n = arrSize;
    int *res = malloc(sizeof(int) * 2);
    *returnSize = 2;

    if (k == 1) {
        res[0] = arr[0];
        res[1] = arr[n - 1];
        return res;
    }

    int x = ((n - 1) * n) / 2;
    float temp[x];
    x = 0;

    for (i = 0; i < n; i++)
        for (j = i + 1; j < n; j++)
            temp[x++] = (float)arr[i] / (float)arr[j];

    qsort(temp, x, sizeof(int), cmp);

    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if((float)arr[i] / (float)arr[j] == temp[k - 1]) {
                res[0]=arr[i];
                res[1]=arr[j];
                return res;
            }
            
        }
    }
    return res;

}