typedef struct {
    int* stack;
    int* min;
    int size;
} MinStack;


MinStack* minStackCreate() {
    MinStack * stack = malloc(sizeof(*stack));
    stack->stack = NULL;
    stack->min = NULL;
    stack->size = 0;
    return stack;
}

void minStackPush(MinStack* obj, int val) {
    obj->size++;
    obj->stack = realloc(obj->stack, obj->size*sizeof(*obj->stack));
    obj->min = realloc(obj->min, obj->size*sizeof(*obj->stack));
    obj->stack[obj->size-1] = val;
    if (obj->size <= 1) obj->min[obj->size-1] = val;
    else obj->min[obj->size-1] = obj->min[obj->size-2] < val ? obj->min[obj->size-2] : val;
}

void minStackPop(MinStack* obj) {
    obj->size--;
}

int minStackTop(MinStack* obj) {
    return obj->stack[obj->size-1];
}

int minStackGetMin(MinStack* obj) {
    return obj->min[obj->size-1];
}

void minStackFree(MinStack* obj) {
    free(obj->stack);
    free(obj);
}