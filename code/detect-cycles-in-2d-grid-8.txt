class Solution {
    vector<pair<int, int>> dirs = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
public:
    bool dfs(vector<vector<char>>& grid, vector<vector<int>>& isVisited, int row, int col, int dist, char cVal) {
        if(row < 0 || row >= grid.size() || col < 0 || col >= grid[row].size() || grid[row][col] != cVal) return false;
        
        if(isVisited[row][col]) {
            return (dist - isVisited[row][col]) >= 4 ? true: false;
        }

        isVisited[row][col] = dist;
        int r, c;
        for(pair<int, int> dir: dirs) {
            r = row + dir.first;
            c = col + dir.second;
            if(dfs(grid, isVisited, r, c, dist+1, cVal)) return true;
        }
        return false;
    }
    
    bool containsCycle(vector<vector<char>>& grid) {
        vector<vector<int>> isVisited(grid.size(), vector<int>(grid[0].size()));
        for(int row = 0; row < grid.size(); row++) {
            for(int col = 0; col < grid[row].size(); col++) {
                if(isVisited[row][col]) continue;
                if(dfs(grid, isVisited, row, col, 1, grid[row][col])) return true;
            }
        }
        return false;
    }
};