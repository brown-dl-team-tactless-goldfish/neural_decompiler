class Solution {
public:
    vector<long long> minOperations(vector<int>& nums, vector<int>& queries) {
        sort(nums.begin(), nums.end());
        vector<long long> pref(nums.size(), 0);
        long long sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            pref[i] = nums[i];
        }
        for(int i = 1; i < pref.size(); i++) pref[i] += pref[i-1];
        vector<long long> ans;
        for(auto i : queries){
            long long res = 0;
            auto it = upper_bound(nums.begin(), nums.end(), i);
            int k = it-nums.begin();
            if(k-1 >= 0){ // everything <=
                long long tot = pref[k-1];
                long long need = (long long)i*k;
                res += abs(need-tot);
            }
            long long rest = nums.size()-k;
            long long tot2 = sum;
            if(k-1 >= 0) tot2 -= pref[k-1];
            long long need2 = (long long) i * (nums.size()-k);
            if(rest) res += abs(tot2-need2);
            ans.push_back(res);
        }
        return ans;
    }
};