using LL = long long ;
using PII =  pair<LL,LL> ;
class Solution {
    LL distance[200] ;
    vector<PII> map[200];
    LL count[200] ;
    LL mod = 1e9 + 7 ;
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        
        for(int i = 0; i < 200; i++)
            distance[i] = -1 ;
        for(int i = 0; i < 200; i++)
            count[i] = -1 ;
        
        for(auto road : roads)
        {
            LL a = road[0], b = road[1], c = road[2] ;
            map[a].push_back({b, c}) ;
            map[b].push_back({a, c}) ;
        }
        
        priority_queue <PII, vector<PII>, greater<>> pq;
        pq.push({0, 0}) ;
        while(!pq.empty()){
            auto [dist, cur] = pq.top() ;
            pq.pop() ;
            
            if(distance[cur] != -1 )
                continue ;
            
            distance[cur] = dist ;
            
            if(cur == (n - 1))
                continue ;
            
            for(auto road : map[cur]){
                auto [next , p] = road ;
                if(distance[next] == -1 )
                    pq.push( {dist + p, next } ) ;
            }
        }
        cout<<distance[n-1] << endl ;
        return DFS(n-1, distance[n-1] ) ;
    }
    
    LL DFS(int cur, LL dist){
        if(distance[cur] != dist)
            return 0 ;
        
        if(cur == 0)
            return 1 ;
        
        if(count[cur] != -1)
            return count[cur] ;
        
        LL total = 0 ;
        for(auto node : map[cur])
        {
            auto[next , len] = node ;
            total += DFS(next, dist - len) ;
            total %= mod ;
        }
        count[cur] = total ;
        return total ;
    }
};