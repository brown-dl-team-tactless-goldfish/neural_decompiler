class Solution {
public:
    vector<vector<int>>G;
    vector<set<int>>Guesses;
    int k;
    int valid_cnt;
    int ans;
    void dfs(int cur,int pre)
    {
        for(auto &x:G[cur])
        {
            if(x==pre)continue;
            if(Guesses[cur].count(x))valid_cnt+=1;
            dfs(x,cur);
        }
    }
    void dfs2(int cur,int pre)
    {
        if(valid_cnt>=k)ans+=1;
        for(auto &x:G[cur])
        {
            if(x==pre)continue;
            if(Guesses[cur].count(x))valid_cnt-=1;
            if(Guesses[x].count(cur))valid_cnt+=1;
            dfs2(x,cur);
            if(Guesses[cur].count(x))valid_cnt+=1;
            if(Guesses[x].count(cur))valid_cnt-=1;
        }
    }
    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) 
    {
        int n=edges.size()+1;
        G.resize(n);
        Guesses.resize(n);
        this->k=k;
        valid_cnt=0;
        ans=0;
        for(auto &x:edges)G[x[0]].push_back(x[1]),G[x[1]].push_back(x[0]);
        for(auto &x:guesses)Guesses[x[0]].insert(x[1]);
        dfs(0,-1);
        dfs2(0,-1);
        return ans;
    }
};