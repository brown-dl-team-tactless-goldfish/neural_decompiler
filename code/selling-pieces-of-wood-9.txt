// state is the row and column
long long dp[201][201];
map <pair<int,int>,long long> mp;

// n rows and m columns (in question its m rows and n columns)
long long rec(int n,int m){
    
    // checking if already computed
    if(dp[n][m] != -1) return dp[n][m];
    
    long long ans = 0;
    // if there is a price for rectangle nxm initialize ans with it
    if(mp.find({n,m}) != mp.end()) ans = mp[{n,m}];
    
    // trying to cut horizontally
    for(int mid = 0;mid<n-1;mid++){
    ans = max(ans,1LL*rec(mid+1,m) + 1LL*rec(n-mid-1,m));
    }
    
    // trying to cut vertically
    for(int mid = 0;mid<m-1;mid++){
    ans = max(ans,1LL*rec(n,mid+1)+1LL*rec(n,m-mid-1));
    }
    return dp[n][m] = ans;
}

long long sellingWood(int m, int n, vector<vector<int>>& prices) {
    // storing prices in a map
    for(auto v:prices){
        mp[{v[0],v[1]}] = v[2];
    }
    memset(dp,-1,sizeof(dp));
    return rec(m,n);
}