class Solution {
public:
    int numberOfWays(string s) {
        int n = s.length();
        vector<int>P(n,0);
        int count = 1;
        int seats = 0;
        int total_seat = 0;
        int mod = 1e9 + 7;
        if(s[n - 1] == 'P')
            P[n - 1] = 1;
        else
            total_seat++;
        for(int i = n - 2; i >= 0 ; i--)
        {
            if(s[i] == 'P')
                P[i] = 1 + P[i + 1];
            else
                total_seat++;
        }
        if(total_seat == 2)
            return 1;
        
        if(total_seat % 2 == 1 or total_seat == 0)
            return 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == 'S')
            {
                seats++;
                total_seat--;
                if(seats == 2)
                {
                    seats = 0;
                    count  = (1ll*count % mod * 1ll*(P[i + 1] + 1) % mod ) % mod;
                }
                 if(total_seat == 2)
                     break;
            }   
        }
        return count;
    }
};