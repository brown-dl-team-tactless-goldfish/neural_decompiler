    int findLatestStep(vector<int>& arr, int m) {
        
        int res = -1; unordered_map<int, int> mp;
        vector<int> v(arr.size(), 0);
        
        for(int i = 0 ; i < arr.size() ; i++) {

            int idx = arr[i] - 1;
                        
            if((idx == 0 || v[idx - 1] == 0) && 
               (idx + 1 == v.size() || v[idx + 1] == 0)) {
                
                v[idx] = 1; mp[1]++;
                if(mp[m]) res = i + 1;
                continue;
            }
            
            if((idx > 0 && v[idx - 1]) && 
               (idx + 1 < v.size() && v[idx + 1])) {
                
                int a = v[idx - 1]; int b = v[idx + 1];
                v[idx - a] = a + b + 1;
                v[idx + b] =  a + b + 1;
                mp[a]--; mp[b]--; mp[a + b + 1]++;
                if(mp[m]) res = i + 1;
                continue;
            }
            
            if(idx - 1 >= 0 && v[idx - 1]) {
                
                int a = v[idx - 1];
                v[idx - a] = a + 1; v[idx] = a + 1;
                mp[a]--; mp[a + 1]++;
                if(mp[m]) res = i + 1;
                continue;
            }
            
            if(idx + 1 < v.size() && v[idx + 1]) {
                
                int a = v[idx + 1];
                v[idx + a] = a + 1; v[idx] = a + 1;
                mp[a]--; mp[a + 1]++;
                if(mp[m]) res = i + 1;
                continue;
            }
        }
        
        return res;
    }