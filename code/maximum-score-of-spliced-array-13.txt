        public int MaximumsSplicedArray(int[] nums1, int[] nums2)
        {
            int n = nums1.Length;
            int[] diff1 = new int[n];//nums1[i] - nums2[i];
            int[] diff2 = new int[n];// nums2[i] - nums1[i];
            int sum1 = 0;
            int sum2 = 0;
            for (int i = 0; i < n; i++)
            {
                diff1[i] = nums1[i] - nums2[i];
                diff2[i] = nums2[i] - nums1[i];
                sum1 += nums1[i];
                sum2 += nums2[i];
            }
            int max1 = MaxSubArray(diff1);
            int max2 = MaxSubArray(diff2);
			//swap max1 to nums2 = sum2+max1, or swap max2 to nums1=sum1+max2
            return Math.Max(sum2+max1,sum1+max2);
        }
		
		//leetcode 53. Maximum Subarray, #Kadane
		public int MaxSubArray(int[] nums)
        {
            int sum = 0;
            int max = int.MinValue; //if all negtive num ,return nums.Max()
            for (int i = 0; i < nums.Length; i++)
            {
                sum += nums[i];
                max = Math.Max(max, sum);
                if (sum <= 0) sum = 0;
            }
            return max;
        }