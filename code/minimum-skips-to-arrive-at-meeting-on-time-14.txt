class Solution {
public:
    int minSkips(vector<int>& dist, int speed, int hoursBefore) {
        int n = dist.size();
        long dp[1001] = {0};
        long h = (long)hoursBefore * speed;
        if (accumulate(dist.begin(),dist.end(),0)>h) return -1;
        for (int i=1;i<n;i++){
            dp[i] = dp[i-1] + dist[i-1];
            for (int j=i-1;j>=0;j--){
                dp[j+1] = min(dp[j] + dist[i-1],dp[j+1]);
                dp[j] = round(dp[j]+dist[i-1],speed);
            }
        }
        for (int k=0;k<n;k++) if (dp[k] + dist[n-1] <= h) return k; 
        return -1;
    }
    long round(long x,int s){
        int remainder = x % s;
        return remainder == 0 ? x : x + s - remainder;
    }
    
};