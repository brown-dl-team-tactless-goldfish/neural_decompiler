class Solution {
    const int NUM_LIMIT = 1024;
public:
    int minChanges(vector<int>& nums, int k) {
        int n = nums.size();
        vector<unordered_map<int, int>> freq(k, unordered_map<int, int>());
        vector<vector<int>> dp(k, vector<int>(NUM_LIMIT, n + 1));
        
        
        for(int i=0; i<n; i++) {
            int pos = i % k;
            freq[pos][nums[i]]++;
        }
        int last = 0;
        
        for(int i=0; i<k; i++) {
            int cnt = n / k + ((n % k) > i ? 1 : 0);
            
            int minCur = n + 1;
            for(int j=0; j<NUM_LIMIT; j++) {
                if(i == 0) {
                    dp[i][j] = cnt - freq[i][j];
                } else {
                    for(auto& [key, v] : freq[i]) {
                        dp[i][j] = min(dp[i][j], dp[i-1][j ^ key] + cnt - v);
                    }
                    dp[i][j] = min(dp[i][j], last + cnt);
                }
                minCur = min(minCur, dp[i][j]);
            }
            last = minCur;         
        }
        
        return dp[k-1][0];
    }
};