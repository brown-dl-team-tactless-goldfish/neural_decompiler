struct DataItem {
    int data;   
    int key;
    struct DataItem* next;
};

struct DataItem **init(int size)
{
    struct DataItem** hash=malloc(sizeof(struct DataItem*)*size);
    for (int i=0; i<size; i++)
        hash[i]= 0;
    return hash;
};



int hashCode(int key,int size) {
    if (key<0) key = -key;
   return key % size;
}

void insert(int key,int data, struct DataItem** hashArray,int size) {

   //get the hash 
   int hashIndex = hashCode(key,size);

   struct DataItem** item = &hashArray[hashIndex];
   //move in array until an empty 
   while((*item) != NULL)
   {
       if ((*item)->key == key)
       {
           (*item)->data = -1;
           return;
       }
       
       item = &(*item)->next;
   }
   (*item) = (struct DataItem*) malloc(sizeof(struct DataItem));
   (*item)->data = data;  
   (*item)->key  = key;
   (*item)->next = 0;
}

int destroy(struct DataItem** hashArray,int size)
{
    int result = -1;
    for(int i = 0; i<size; i++)
    {
	
        if(hashArray[i] != NULL)
        {
            struct DataItem* item = hashArray[i];
            while (item)
            {
                if (item->data != -1 && result == -1)
                    result = item->data;
                
                struct DataItem* temp = item;
                item = item->next;
                free(temp);
            }
        }
    }
    free(hashArray);
    return result;
}

int singleNumber(int* nums, int size) 
{
    int result;
    struct DataItem** hashArray = init(size);
    for(int i; i<size; i++)
        insert(nums[i],i,hashArray,size);

    result = destroy(hashArray,size);
    if (result == -1) return -1;
    return nums[result];
}