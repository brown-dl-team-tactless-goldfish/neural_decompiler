class Solution {
public:
    vector<vector<int>> arr;
    string ring,key;
    
    int dp[101][101]={};
    
    int fun(int rl,int kl){
        
        if(kl==key.length()) return 0;
        
        if(dp[rl][kl]) return dp[rl][kl];
        int right=upper_bound(arr[key[kl]-97].begin(),arr[key[kl]-97].end(),rl)-arr[key[kl]-97].begin();
        
        int left;
        
        if(right==0)
            left=arr[key[kl]-97].back();
        else
            left=arr[key[kl]-97][right-1];
        
        if(right==arr[key[kl]-97].size())
            right=arr[key[kl]-97][0];
        else
            right=arr[key[kl]-97][right];
        
        int ans1,ans2;
        
        if(left<=rl)
            ans1=1+(rl-left)+fun(left,kl+1);
        else
            ans1=1+(ring.length()-(left-rl))+fun(left,kl+1);
        
        
        if(right>=rl)
            ans2=1+(right-rl)+fun(right,kl+1);
        else
            ans2=1+(ring.length()-rl+right)+fun(right,kl+1);
        
        return dp[rl][kl]=min(ans1,ans2);
       
   
    }
    int findRotateSteps(string ring, string key) {
        arr.resize(26);
        this->ring=ring;
        this->key=key;
        for(int i=0;i<ring.length();i++)
            arr[ring[i]-97].push_back(i);
        
        return fun(0,0);
    }
};