class Solution {
public:
    vector<bool> canEat(vector<int>& c, vector<vector<int>>& q) {
        vector<long>pre;
        long sum=0;
        for(auto & i:c){
            sum+=long(i);
            pre.push_back(sum);
        }
        vector<bool>ans;
        for(auto & vec:q){
            long type=vec[0],day=vec[1],cap=vec[2];
            long min=day+1,max=cap*(day+1);
            int l=lower_bound(begin(pre),end(pre),min)-begin(pre);
            int h=lower_bound(begin(pre),end(pre),max)-begin(pre);
            if(type>=l && type<=h)
                ans.push_back(true);
            else
                ans.push_back(false);       
        }
        return ans;
    }
};