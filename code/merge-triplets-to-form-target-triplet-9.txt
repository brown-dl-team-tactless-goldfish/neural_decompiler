bool mergeTriplets(vector<vector<int>>& trip, vector<int>& target) {
        vector<vector<vector<int>>> graph(3);
        int i=0;
        for(auto vec: trip){
            if(vec == target)
                return true;
            int a=vec[0], b=vec[1], c=vec[2];
            if(a == target[0])
                if(b <= target[1] && c <= target[2])
                    graph[0].push_back(vec);
            if(b == target[1])
                if(a <= target[0] && c <= target[2])
                    graph[1].push_back(vec);
            if(c == target[2])
                if(a <= target[0] && b <= target[1])
                    graph[2].push_back(vec);
            i++;
        }

        for(int i=0; i<graph[0].size(); i++){
            vector<int> vecA = graph[0][i];
            for(int j=0; j<graph[1].size(); j++){
                vector<int> vecB = graph[1][j];
                if(vecA[0] < vecB[0])
                    continue;
                if(vecA[1] > vecB[1])
                    continue;
                vector<int> ab = {vecA[0], vecB[1], max(vecA[2], vecB[2])};
                
                for(int k=0; k<graph[2].size(); k++){
                    vector<int> vecC = graph[2][k];
                    if(vecC[0] > ab[0] || vecC[1] > ab[1] || vecC[2] < ab[2])
                        continue;
                    else
                        return true;
                }
            }
        }
        return false;
    }
	```