class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int N=edges.size();
        vector<int>v;
        vector<int>res;
        for(int i=0;i<=N;i++)v.push_back(i);
        for(vector<int>&pair:edges){
            int v1=pair[0];
            int v2=pair[1];
            int root1=find(v,v1);
            int root2=find(v,v2);
            if(root1!=root2){
                v[root1]=root2;
            }else{
                res.push_back(v1);
                res.push_back(v2);
            }
        }
        return res;
    }
    
    int find(vector<int>&A,int x){
        if(A[x]==x)return x;
        int root=find(A,A[x]);
        A[x]=root;
        return root;
    }
};