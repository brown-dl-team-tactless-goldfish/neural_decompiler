int helper(int* nums, int n, int left){
    if(n == 0)
        return 0 ;

    long long ans = (long long)(n + 1) * n / 2 ;
    int cn = 0 ;
    for(int i = 0; i < n; i++){
        if(nums[i] < left){
            cn++;
        }
        else{
            ans -= (cn + 1) * cn / 2 ;
            cn = 0 ;
        }
    }
    ans -= (cn + 1) * cn / 2 ; 
    return ans ;
}
int numSubarrayBoundedMax(int* nums, int numsSize, int left, int right){
    int ans = 0; 
    int last = 0 ;
    for(int i = 0; i < numsSize; i++){
        if(nums[i] > right){
            ans += helper(&nums[last], i-last, left) ; 
            last = i+1 ;
        }
    }
    ans += helper(&nums[last], numsSize-last, left) ; 
    return ans ;
}