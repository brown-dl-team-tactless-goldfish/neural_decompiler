
void heapdown(int **room,int *heap,int heapsize){
    int curr = 1;
    int child = curr<<1;
    while(child<=heapsize){
        if(child+1<=heapsize && room[heap[child+1]][0]<room[heap[child]][0])
            child++;
        if(room[heap[child]][0]>=room[heap[curr]][0])
            break;
        heap[curr]^=heap[child];
        heap[child]^=heap[curr];
        heap[curr]^=heap[child];
        curr = child;
        child<<=1;
    }
}
void heapup(int **room,int *heap,int heapidx,int roomidx){
    int curr = heapidx;
    int father = curr>>1;
    while(father>=1){
        if(room[heap[father]][0]<=room[roomidx][0])
            break;
        heap[curr] = heap[father];
        curr = father;
        father>>=1;
    }
    heap[curr] = roomidx;
}
int cmp(const void*a,const void*b){
    return (*(int**)a)[0] - (*(int**)b)[0];
}
int mostBooked(int n, int** meetings, int meetingsSize, int* meetingsColSize){
    long long **room = malloc(n*sizeof(long long*));
    for(int i=0;i<n;i++){
        room[i] = malloc(4*sizeof(long long));
        room[i][0] = i;
        room[i][1] = i;
        room[i][2] = -1;
        room[i][3] = 0;
    }
    qsort(meetings,meetingsSize,sizeof(meetings[0]),cmp);
    int *nonbook = malloc((n+1)*sizeof(int));
    int *booked = malloc((n+1)*sizeof(int));
    int nonbookidx = 0;//1~n
    int bookidx = 0;//1~n
    for(int i=0;i<n;i++){
        heapup(room,nonbook,i+1,nonbookidx++);
    }
    for(int i=0;i<meetingsSize;i++){
        long long poptime = meetings[i][0];
        int target = 0;
        if(nonbookidx==0)
            poptime = fmax(poptime,room[booked[1]][0]);
        //booked ->nonbooked
        while(bookidx>0 && room[booked[1]][0]<=poptime){
            target = booked[1];
            room[target][0] = room[target][1];
            heapup(room,nonbook,++nonbookidx,target);
            booked[1] = booked[bookidx--];
            heapdown(room,booked,bookidx);
        }
        //nonbooked ->booked
        target = nonbook[1];
        room[target][2] = (room[target][2]<=meetings[i][0])?meetings[i][1]:room[target][2]+meetings[i][1]-meetings[i][0];
        room[target][3] += 1;
        room[target][0] = room[target][2];
        heapup(room,booked,++bookidx,target);
        nonbook[1] = nonbook[nonbookidx--];
        heapdown(room,nonbook,nonbookidx);
    }
    int ans = 0;
    int count = -1;
    for(int i=0;i<n;i++){
        if(room[i][3]>count){
            count = room[i][3];
            ans = i;
        }
    }
        
    return ans;
}