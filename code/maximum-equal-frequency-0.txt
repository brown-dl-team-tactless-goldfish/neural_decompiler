typedef struct data{
    int key;
    int cn;
}data;
int maxEqualFreq(int* nums, int numsSize){
    int n = numsSize;
    int N =  n;
    int type = 0;
    int ans = 0;
    int maxFreq = 1;
    data** numFreq = calloc(N, sizeof(data*));
    int* cn = calloc(n+1, sizeof(int));
    for(int i = 0; i < n; i++){
        int val = nums[i];
        int d = val;
        while(1){
            if( numFreq[d % N] == NULL){
                numFreq[d % N] = malloc(sizeof(data));
                numFreq[d % N]->key = val;
                numFreq[d % N]->cn = 1;
                cn[1]++;
                type++;
                break;
            } 
            else if(numFreq[d % N]->key == val){
                numFreq[d % N]->cn++;
                cn[ numFreq[d % N]->cn ]++;
                cn[ (numFreq[d % N]->cn) - 1]--;
                if((numFreq[d % N]->cn) > maxFreq)
                    maxFreq = numFreq[d % N]->cn;
                break;
            }
            else
                d++;
        }
        //case 1 each item all different
        if(type == (i+ 1))
            ans = fmax(ans, i+1);
        //case 2 only one item different, other all the same freq
        else if(cn[1] == 1 && maxFreq * cn[maxFreq] == i )
            ans = fmax(ans, i+1);
        //case 3 maxFreq items is different to others' freq
        else if( (maxFreq - 1) * (cn[maxFreq - 1] + 1) == i )
            ans = fmax(ans, i+1);
    }
    for(int i = 0; i < N; i++){
        if(numFreq[i] != NULL)
            free(numFreq[i]);
    }
    free(numFreq);
    free(cn);
    return ans;
}