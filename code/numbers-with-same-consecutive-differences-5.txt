short WriteReturnSize(char cN, char cK, char cDigit)
{
    short sRet = 0;
    
    if(cN)
    {
        if(cDigit + cK < 10)
        {
            sRet += WriteReturnSize(cN-1, cK, cDigit + cK);
        }

        if(cK && cDigit - cK >= 0)
        {
            sRet += WriteReturnSize(cN-1, cK, cDigit - cK);
        }
    }
    else
    {
        sRet = 1;
    }

    return sRet;
}

void WriteValue(char cN, char cK, int nValue, short* psIndex, int* pnRet)
{
    if(cN)
    {
        char cDigit = nValue % 10;
        if(cDigit + cK < 10)
        {
            WriteValue(cN-1, cK, (nValue*10)+(cDigit+cK), psIndex, pnRet);
        }

        if(cK && cDigit - cK >= 0)
        {
            WriteValue(cN-1, cK, (nValue*10)+(cDigit-cK), psIndex, pnRet);
        }
    }
    else
    {
        pnRet[(*psIndex)++] = nValue;
    }
}


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* numsSameConsecDiff(int n, int k, int* returnSize){
    char cN = n-1, cK = k;
    short sReturnSize = 0;
    for(char i=1; i<=9; i++) sReturnSize += WriteReturnSize(cN, cK, i);

    *returnSize = sReturnSize;
    int* pnRet = (int*) malloc(sReturnSize*sizeof(int));
    sReturnSize = 0;
    for(char i=1; i<=9; i++) WriteValue(cN, cK, i, &sReturnSize, pnRet);

    return pnRet;
}