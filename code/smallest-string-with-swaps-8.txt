class Solution {
    vector<int> parents;
    int find_set(int v)
    {
        if(v == parents[v])
            return v;
        return parents[v] = find_set(parents[v]);
    }
    void union_set(int a, int b)
    {
        a = find_set(a);
        b = find_set(b);
        if(a == b)
            return;
        parents[a] = b;
        return;
    }
public:
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) 
    {
        int n = s.size();
        for(int i = 0; i < n; i++)
            parents.push_back(i);
        for(vector<int> &v : pairs)
        { 
            if(v[0] == v[1])
                continue;
            if(v[0] < v[1])
                union_set(v[0], v[1]);
            else
                union_set(v[1], v[0]);
        }
        //cout << parents[0] << " ";
        vector<int> um[n+1];
        vector<string> st(n,"");
        for(int i = 0; i < n; i++)
        {
            int x = find_set(i);
            //cout << x << " ";
            um[x].push_back(i);
            st[x].push_back(s[i]);
        }
        for(int i = 0; i < n; i++)
        {
            if(st[i] == "")
                continue;
            sort(st[i].begin(), st[i].end());
            for(int j = 0; j < um[i].size(); j++)
                s[um[i][j]] = st[i][j];
        }
        return s;
    }
};