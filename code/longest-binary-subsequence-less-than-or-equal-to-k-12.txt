class Solution {
    string dToB(int n){
        int binaryNum[32];
        int i = 0;
        while (n > 0) {
            binaryNum[i] = n % 2;
            n = n / 2;
            i++;
        }
        string res = "";
        for (int j = i - 1; j >= 0; j--){
            res.push_back(binaryNum[j]+'0');
        }
        return res;
    }
    
public:
    int longestSubsequence(string s, int k) {
        string s1 = s;
        string s2 = dToB(k);
        int n = s1.size();
        int m = s2.size();
        
        while(s2.size() < n) {
            s2 = '0'+s2;
        }
        while(s1.size() < s2.size()) {
            s1 = '0'+s1;
        }
        
        int i = 0;
        int cnt = 0;
        while(i < n and s1 > s2){
            if(s1[i] == '1') {
                s1[i] = '0';
                cnt++;
            }
            i++;
        }
        return n-cnt;
    }
};