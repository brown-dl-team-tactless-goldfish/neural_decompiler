/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* merge(struct ListNode *list1, struct ListNode *list2) {
    struct ListNode head = { .next = NULL }, *tail = &head;

    /* The dummy node trick avoids having to deal with
     * the corner cases of initializating the head and tail
     * of the result list
     */

    while (list1 && list2) {
        if (list1->val < list2->val) {
            tail->next = list1;
            list1 = list1->next;            
        } else {
            tail->next = list2;
            list2 = list2->next;            
        }
        tail = tail->next;
    }

    if (list1) {
        tail->next = list1;
    }

    if (list2) {
        tail->next = list2;
    }

    return head.next;
}

struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    if (!lists || listsSize == 0) {
        return NULL;
    }
    
    while (listsSize > 1) {
        int mergeSize = 0;

        // [l1, l2, l3]
        // (0, 1) => (2, NULL)
        for (int i = 0; i < listsSize; i += 2) {        
            struct ListNode *l1 = lists[i];
            struct ListNode *l2 = ((i+1) < listsSize) ? lists[i+1] : NULL;

            lists[mergeSize++] = merge(l1, l2);
        }
        listsSize = mergeSize;
    }

    return lists[0];
}