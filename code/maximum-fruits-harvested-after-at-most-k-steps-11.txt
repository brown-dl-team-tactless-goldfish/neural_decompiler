class Solution {
    const int INF = (int)1e9 + 7;
public:
    #define all(x) (x).begin(), (x).end()
    using pii = pair<int, int>;
    
    int get_no_fruits(int l, int r, vector<pii> &f) {
        pii p = {l, -INF};
        auto it = lower_bound(all(f), p);
        if (it == f.end()) return 0;
        int L = it - f.begin();
        p = {r, INF};
        it = upper_bound(all(f), p);
        if (it == f.begin()) return 0;
        it = prev(it);
        int R = it - f.begin();
        return f[R].second - (L > 0 ? f[L - 1].second : 0);
        
    }
    
    int maxTotalFruits(vector<vector<int>>& f, int pos, int k) {
        int ans = 0;
        int n = f.size();
        vector<pii> fr(n);
        for (int i = 0; i < n; ++i) fr[i] = {f[i][0], f[i][1]};
        for (int i = 1; i < n; ++i) fr[i].second += fr[i - 1].second;
        
        for (int x = 0; 2 * x <= k; ++x) {
            ans = max(ans, get_no_fruits(pos - x, pos + k - 2 * x, fr));
            ans = max(ans, get_no_fruits(pos - k + 2 * x, pos + x, fr));
        }
        
        return ans;
    }
};