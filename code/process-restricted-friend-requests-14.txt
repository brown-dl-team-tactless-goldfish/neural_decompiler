class Solution {
private:
    void unionSet(int u, int v, vector<int> &parent) {
        int parentU = find(u, parent);
        int parentV = find(v, parent);
        if(parentU == parentV) return;
        if(parentU <= parentV)
            parent[parentV] = parent[u];
        else
            parent[parentU] = parent[v];
    }
    int find(int u, vector<int> &parent) {
        if(parent[u] == u) return u;
        return parent[u] = find(parent[u], parent);
    }
public:
    vector<bool> friendRequests(int n, vector<vector<int>>& restrictions, vector<vector<int>>& requests) {
        vector<int> parent(n);
        iota(parent.begin(), parent.end(), 0);
        vector<bool> ans;
        for(vector<int> request: requests) {
            bool valid = true;
            int x = find(request[0], parent);
            int y = find(request[1], parent);
            if(x != y) {
                for(vector<int> banned: restrictions) {
                    int u = find(banned[0], parent);
                    int v = find(banned[1], parent);
                    if((u == x && v == y) || (u == y && v == x)) {
                        valid = false;
                        break;
                    } 
                }
            }
            ans.push_back(valid);
            if(valid)
                unionSet(request[0],request[1], parent);
        }
        return ans;
    }
};