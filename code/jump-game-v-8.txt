class Solution {
    int step ;
    int n ;
    int dfs(int cur, vector<int>& arr, vector<int>&dp ){
        if(dp[cur] > 0)
            return dp[cur] ;
        int ret = 1 ;
        //forward
        for(int s = cur+1; s <= min(n-1, cur + step); s++){
            if(arr[s] >= arr[cur])
                break ;
            ret = max(ret, dfs(s, arr, dp) + 1) ;
        }
        //backward
        for(int s = cur -1; s >= max(0, cur-step); s--){
            if(arr[s] >= arr[cur])
                break ;
            ret = max(ret, dfs(s, arr, dp) + 1) ;
        }
        dp[cur] = ret ;
        return ret ;
    }
public:
    int maxJumps(vector<int>& arr, int d) {
        this->n = arr.size() ;
        this->step = d ;
        vector<int>dp(n) ;
        int ret = 1 ;
        for(int i = 0; i < n; i++){
            ret = max(ret, dfs(i, arr, dp)  ) ;
        }
        return ret ;
    }
};