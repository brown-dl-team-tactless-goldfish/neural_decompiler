/*
** str_compare: Compare substrings to find the match                   */
*/
int str_compare(char *str, char *ch)
{
    int j;

    /* Loop while the strings are valid. If there is a mismatch, or if
       we encounter '*', then stop */
    for (j = 0; (ch[j] != 0) && (ch[j] != '*'); ++j)
    {
        /* Return if we have finished parsing the main string */
        if (str[j] == '\0')
            break;

        /* If the strings do not match, break */
        if ((str[j] != ch[j]) && (ch[j] != '?'))
            break;
    }

    /* Return the length of the substring */
    return j;
}

/*
** seek_substr: Sequentially seek a character pattern in a string!
*/
char *seek_substr(char *str, char *ch, int *plen)
{
    int i = 0, j;

    /* Loop looking for matching substring */
    while (str[i] != 0)
    {
        /* Check whether the sub-string can be at location i */
        if ((str[i] == ch[0]) || (ch[0] == '?'))
        {
            /* Compare and get the length of the matching substring */
            j = str_compare(&str[i], ch);

            /* If the return offset corresponds to terminating condition,
            then break. */
            if (ch[j] == '\0' || ch[j] == '*')
                break;

            /* Else if we have finished parsing the string,
            then set pointer to terminating address, will exit loop
            during the next iteration. */
            else if (str[i + j] == 0)
                i = i + j - 1;
        }

        /* Increment the counter */
        i++;
    }

    /* Set the length */
    *plen = j;

    /* Return the character offset or the NULL offset */
    return &str[i];
}

/*
** Implement wildcard pattern matching with support for '?' and '*'.
*/
int isMatch(char *str, char *exp)
{
    char *s = str, *e = exp;

    /* Maintain Sanity */
    if (!str || !exp)
        return 0;

    /* While the characters match, simply increment pointers */
    while ((*e != 0) && (*s != 0) && ((*e == '?') || (*e == *s)))
    {
         e++;
         s++;
    }

    /* Loop till the expression is parsed:
       Note that the expression is always going to start with a '*'
       if there was a match.
    */
    while (*e == '*')
    {
        int mc = 0;

        /* Skip consecutive '*'. And if it's end of expression,
           then return TRUE */
        while ((*e == '*') && ++e);
        if (*e == '\0')
            return TRUE;

        /* Seek for string pattern in str which matches with
           substring in *e. Such a substring would contain characters
           sandwiched between two '*', or in case of the end of the
           expression it would be '* and '\0'. Note that if there is
           no match, then we get NULL terminated last location.
        */
        if ((s = seek_substr(s, e, &mc)) && (*s != 0) &&
           ((*(e + mc) == 0) && (*(s + mc) != 0)))
        {
            /* Now we have reached the last instance of the '*',
            so simply move the pointer to the end of the string
            and compare the last mc bytes in the next loop.
            If they match, then we have a hit. */
            while (*(s + mc) != 0)
                ++s;

            /* Move the expression pointer back by one, the next
            iteration would automatically increment */
            e -= 1;
        }

        /* Advance the scanner only if there was a match */
        else if (*s != 0)
        {
            e = e + mc;
            s = s + mc;
        }
    }

    /* Return status */
    return ((*s == 0) && (*e == 0)) ? 1 : 0;
}