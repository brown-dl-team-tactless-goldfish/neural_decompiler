
void RemoveExcessiveOpens(char **ans, int *ansLen) {
    int shift = 0;
    int numClosed = 0;
    char *workingStr = *ans;
    
    for (int i = *ansLen - 1; i >= 0; i--) {
        workingStr[i + shift] = workingStr[i];
        
        if(workingStr[i] == ')') {
            numClosed++;
        } else if (workingStr[i] == '(') {
            if (numClosed > 0) {
                numClosed--;
            } else {
                shift++;
                (*ansLen)--;
            }
        }
    }
    // fix any gap in front of the string
    *ans += shift;
}

void RemoveExcessiveCloses(char *s, int *ansLen) {
    int shift = 0;
    int numOpen = 0;
    const int stringLen = *ansLen;
    
    for(int i = 0; i < stringLen; i++) {
        s[i - shift] = s[i];

        if(s[i] == '(') {
            numOpen++;
        } else if (s[i] == ')') {
            if (numOpen > 0) {
                numOpen--;
            } else {
                shift++;
                (*ansLen)--;
            }
        }
    }
}

char * minRemoveToMakeValid(char * s){
    int ansLen = strlen(s);
    char *ans = s;
    
    RemoveExcessiveOpens(&ans, &ansLen);
    RemoveExcessiveCloses(ans, &ansLen);
    
    ans[ansLen] = 0;
    return ans;
}