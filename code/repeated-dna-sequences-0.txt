/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int helper(char * s,int* map){
    int sum=0;
    for(int i=0;i<10;i++){
        sum+=sum*4+map[s[i]-'A'];
    }
    return sum;
}
int cmp(void* a,void* b){
    return ((int**)a)[0][1]-((int**)b)[0][1];
}
char ** findRepeatedDnaSequences(char * s, int* returnSize){ 
    *returnSize= 0;
    int len=strlen(s);
    if(len<10){
        return NULL;
    }
    int* map=(int*)calloc(26,sizeof(int));
    map['A'-'A']=0;
    map['C'-'A']=1;
    map['G'-'A']=2;
    map['T'-'A']=3;
    char** ret=(char**)malloc(1000*sizeof(char*));
    int size= len-9;
    int** array=(int**)malloc(size*sizeof(int*));
    for(int i=0;i<size;i++){
        array[i]=(int*)calloc(2,sizeof(int));
        int num=helper(&s[i],map);
        array[i][0]=i;
        array[i][1]=num;
    }
    qsort(array,size,sizeof(array[0]),cmp);
    for(int i=1;i<size;i++){
        if(array[i][1]==array[i-1][1]){
            if(i+1==size||array[i+1][1]!=array[i][1]){
                ret[(*returnSize)++]=(char*)malloc(11*sizeof(char));
                int index=array[i][0];
                for(int j=index;j<index+10;j++){
                    ret[(*returnSize)-1][j-index]=s[j];
                }
                ret[(*returnSize)-1][10]='\0';
            }
        }
    }
    return ret;
}