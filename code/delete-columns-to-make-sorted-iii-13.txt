class Solution {

    private : 
        int dp[101][101];// last picked index , current index
   
    public:
    
        Solution() {
            memset(dp,-1,sizeof dp);  
        }

        int solve(int lastPickedindex, int currentIndex,int length, vector<string> &v) {
            if (currentIndex >= length) return 0;
            int &res = dp[lastPickedindex][currentIndex];
            if ( res != -1) return res;
            else {
             
                int ans = solve(lastPickedindex,currentIndex+1,length,v) + 1;
                int rows = v.size();
                
                bool possible = true;
                
                for(int i=0;i<rows;i++) {    
                    if(v[i][lastPickedindex] > v[i][currentIndex]) {
                            possible = false;
                        }
                }
                if (possible) {
                   ans = min(ans, solve(currentIndex,currentIndex+1,length,v)); 
                }
                return res= ans;
                
            }
        }
        int minDeletionSize(vector<string>& A) {
            if(A.empty()) return 0;
            int ans = INT_MAX;
            int length = A[0].size();
            for (int i=0;i<length;i++) {
                ans = min(ans , solve(i,i+1,A[0].size(), A)+i);
            }
            return ans;
        }
};