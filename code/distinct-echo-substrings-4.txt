    int distinctEchoSubstrings(string txt) {
        long mod = 1e10 + 7, d = 26, base = 1;
        
        auto getCode = [](char c) {
            return c-'a'+1;
        };
        
        auto getHash = [&](string & s, int l, int h) {
            long res = 0;
            for(int i = l; i <= h; i++) res = (res*d + getCode(s[i]))%mod;
            return res;
        };
        
        auto updateHash = [&](long h, char pre, char cur) {
            return ((h*d-getCode(pre)*base)%mod + mod + getCode(cur))%mod;
        };
        
        
        unordered_set<int> res;
        for(int l = 1; l + l <= txt.length(); l++) {
            base *= 26, base %= mod;
            
            int idx = 0;
            long h1 = getHash(txt, idx, idx + l-1);
            long h2 = getHash(txt, idx + l, idx + l+ l-1);
            if(h1 == h2 && !res.count(h1)) res.insert(h1);
            
            while(idx + l + l < txt.length()) {
                h1 = updateHash(h1, txt[idx], txt[idx+l]);
                h2 = updateHash(h2, txt[idx+l], txt[idx+l+l]);
                if(h1 == h2 && !res.count(h1)) res.insert(h1);
                idx++;
            }
        }
        return res.size();
    }