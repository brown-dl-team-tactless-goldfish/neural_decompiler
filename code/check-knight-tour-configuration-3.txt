public class Solution {
    int n; //size of board
    int[] curPos = new int[] { 0, 0}; //store row, col of current position. We start at (0, 0)
    
    public bool CheckValidGrid(int[][] grid) {
        if(grid[0][0] != 0) //corner case
            return false;
        
        n = grid.Length;
        int curNum = 0; //start move number
        
        while(curNum < (n * n) - 1) //loop through start move number to last but one
        {
            if(!Check(curNum, grid)) //if valid, increment move number and check again. else return and stop
                return false;
            ++curNum;
        }
        return curNum == (n * n) - 1; //all the moves are valid
    }
    
    private bool Check(int curNum, int[][] g)
    {
        List<(int, int)> next = GetNext(n, curNum); //get the coordinates of next possible 8 moves
        
        foreach((int r, int c) in next)
        {
            if(g[r][c] == curNum + 1) //check if move number is next of current move number
            {
                curPos[0] = r; //update coordinates
                curPos[1] = c;
                return true;
            }
        }
        
        return false; // none of the 8 moves contain the next move number
    }
    
    private List<(int, int)> GetNext(int size, int curNum)
    { //return the coordinates of the next possible 8 moves - if they lie within the board
        List<(int, int)> res = new();
        int r = curPos[0], c = curPos[1];
        
        if(r - 2 >= 0)
        {
            if(c - 1 >= 0)
                res.Add((r - 2, c - 1));
            if(c + 1 < size)
                res.Add((r - 2, c + 1));
        }
        if(r - 1 >= 0)
        {
            if(c - 2 >= 0)
                res.Add((r - 1, c - 2));
            if(c + 2 < size)
                res.Add((r - 1, c + 2));
        }
        if(r + 1 < size)
        {
            if(c - 2 >= 0)
                res.Add((r + 1, c - 2));
            if(c + 2 < size)
                res.Add((r + 1, c + 2));
        }
        if(r + 2 < size)
        {
            if(c - 1 >= 0)
                res.Add((r + 2, c - 1));
            if(c + 1 < size)
                res.Add((r + 2, c + 1));
        }
        
        return res;
    }
}