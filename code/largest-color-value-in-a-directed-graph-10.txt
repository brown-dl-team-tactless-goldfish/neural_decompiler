    vector<vector<int>> graph(n);
    
    vector<int> indegree(n,0);
    
    for(auto &x: edges)
    {
        graph[x[0]].push_back(x[1]);
        
        indegree[x[1]]++;
    }
    
    vector<vector<int>> maxColorCount(n,vector<int>(26,0));
                                      
 //maxColorCount[i][j] gives the max Count of color j to reach ith node
    
    queue<int> q;
    
    for(int i = 0; i<n; i++)
    {
        if(indegree[i] == 0)
        {
            q.push(i);
        }
    }
    
    int total = 0, ans = 0;
    
    while(!q.empty())
    {
        auto node = q.front();
        q.pop();
        
        total++;
        
        maxColorCount[node][colors[node] - 'a']++;
        
        ans = max(ans, maxColorCount[node][colors[node] - 'a']);
        
        for(auto &x: graph[node])
        {
            if(--indegree[x] == 0)
            {
                q.push(x);
             
            }
               
                for(int i=0; i<26; i++)
                {
                    maxColorCount[x][i] = max(maxColorCount[x][i],maxColorCount[node][i]);
                    //update the maxColorCount for each neighbour node
            }
        }
        
    }
    
    return total != n? -1 : ans;
}