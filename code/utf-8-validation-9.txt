#define   ONE_BYTES_MASK    ( 1 << 7)   // 10000000
#define   TWO_BYTES_MASK    ( 7 << 5)   // 11100000
#define THREE_BYTES_MASK    (15 << 4)   // 11110000
#define  FOUR_BYTES_MASK    (31 << 3)   // 11111000
#define FOLLOW_BYTE_MASK    ( 3 << 6)   // 11000000

#define    ONE_BYTES_VALID_PATTERN (0)
#define    TWO_BYTES_VALID_PATTERN ( 6 << 5)    // 110xxxxx
#define  THREE_BYTES_VALID_PATTERN (14 << 4)    // 1110xxxx
#define   FOUR_BYTES_VALID_PATTERN (30 << 3)    // 11110xxx
#define FOLLOW_BYTES_VALID_PATTERN ( 2 << 6)    // 10xxxxxx

int getNumOfBytes(int data);
bool isValidFollowingByte(int data);

bool validUtf8(int* data, int dataSize){
    bool isFirstByte = true;
    int i, numBytes;

    for (i = 0; i < dataSize; i++) {
        if (isFirstByte) {
            numBytes = getNumOfBytes(data[i]);
            if (numBytes == 1) {
                // do nothing
            } else if (numBytes >= 2 && numBytes <= 4) {
                isFirstByte = false;
                numBytes--;
            } else {
                return false;
            }
        } else {
            if (!isValidFollowingByte(data[i])) {
                return false;
            }

            numBytes--;
            if (numBytes == 0) {
                isFirstByte = true;
            }
        }
    }

    return isFirstByte;
}

// @return <int> 1~4(Normal) and 0(error)
int getNumOfBytes(int data)
{
    if ( (data & ONE_BYTES_MASK) == ONE_BYTES_VALID_PATTERN) {
        return 1;
    } else if ( (data & TWO_BYTES_MASK) == TWO_BYTES_VALID_PATTERN) {
        return 2;
    } else if ( (data & THREE_BYTES_MASK) == THREE_BYTES_VALID_PATTERN) {
        return 3;
    } else if ( (data & FOUR_BYTES_MASK) == FOUR_BYTES_VALID_PATTERN) {
        return 4;
    } else {
        return 0;   // error
    }

}

// check data pattern is 10xxxxxx ?
bool isValidFollowingByte(int data)
{
    if ( (data & FOLLOW_BYTE_MASK) == FOLLOW_BYTES_VALID_PATTERN) {
        return true;
    } else {
        return false;
    }
}