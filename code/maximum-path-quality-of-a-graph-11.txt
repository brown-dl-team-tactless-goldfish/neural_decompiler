
class Solution {
public:
    int ans=0;
    void dfs(int src,int curval,int curT,int mxT,vector<pair<int,int>> adj[],vector<int> &values){
        if(curT>mxT) return;
        curval+=values[src];
        int temp=values[src];
        if(src==0){
            ans=max(ans,curval);
        }
        values[src]=0;
        for(auto &child : adj[src]){
            dfs(child.first,curval,curT+child.second,mxT,adj,values);
        }
        values[src]=temp;
    }
    int maximalPathQuality(vector<int>& values, vector<vector<int>>& edges, int maxTime) {
        ans=0;
        int n=values.size();
        vector<pair<int,int>> adj[n];
        for(auto &e:edges){
            adj[e[0]].push_back({e[1],e[2]});
            adj[e[1]].push_back({e[0],e[2]});
        }
        dfs(0,0,0,maxTime,adj,values);
        return ans;
    }
};