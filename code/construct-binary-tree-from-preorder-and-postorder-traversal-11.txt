/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<int, int>preMap ;
    unordered_map<int, int>postMap ;
    TreeNode* buildTree(vector<int>& preorder, int preSrat, int preEnd, vector<int>& postorder, int postStart, int postEnd){    
        if(preEnd < preSrat)
            return nullptr ;

        TreeNode* root = new TreeNode(preorder[preSrat]) ;
        if(preSrat == preEnd)
            return root ;
        int a = postorder[postEnd-1] ;
        int b = preorder[preSrat+1] ;
        root->left = buildTree(preorder, preSrat+1, preMap[a]-1, postorder, postStart, postMap[b]) ;
        root->right = buildTree(preorder, preMap[a], preEnd, postorder, postMap[b]+1, postEnd-1) ;
        return root ;
    }
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        int n = preorder.size() ;
        for(int i = 0; i < n; i++){
            preMap[preorder[i]] = i ;
            postMap[postorder[i]] = i ;
        }
        return buildTree(preorder, 0, n-1, postorder, 0, n-1) ;   
    }
};