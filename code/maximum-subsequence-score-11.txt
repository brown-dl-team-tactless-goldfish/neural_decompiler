class Solution {
public:
    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
        
        int n = nums1.size();
        vector<pair<int,int>> arr;
        for( int i = 0 ; i < n ; ++i  )
        {
            arr.push_back({nums2[i],nums1[i]});
        }
        
        sort(arr.begin(),arr.end());
        
        priority_queue<int,vector<int>,greater<int>> pq;
        
        int i = n-1 , t = k-1;
        long long sum = 0;
        while(t-- && i >= 0 )
        {
            sum += arr[i].second;
            pq.push(arr[i].second);
            --i;
        }
        long long score = 0 , mxsco = LLONG_MIN;
        for( i = n-k ; i >=0 ; --i )
        {
            score = arr[i].first * ( sum + arr[i].second);
            mxsco = max(mxsco , score);
            if(pq.size() > 0 && pq.top() < arr[i].second)
            {   int tp = pq.top();
                pq.pop();
                pq.push(arr[i].second);
                sum -= tp;
                sum += arr[i].second;
            }
        }
        return mxsco;
    }
};