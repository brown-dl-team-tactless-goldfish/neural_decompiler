class Solution {
    
private:
    vector<string> split (string& s, char delimiter)
    {
        istringstream tokens(s);
        
        string token;
        
        vector<string> ans;
        
        while ( getline(tokens, token, delimiter) )
        {
            if (!token.empty())
                ans.push_back(token);
        }
        
        return ans;
    }
    
public:
    string reorderSpaces(string text) {
        
        if (text.size() <= 1)
            return text;
        
        vector<string> words = split(text, ' ');
        
        if (words.size() < 1)
            return text;
        
        int spaceCount = 0;
        
        for (const auto & item : text)
        {
            if (item == ' ')
                spaceCount++;
        }
        
        if (words.size() == 1)
        {
            string tmp;
            
            for (int i = 0; i < spaceCount; i++)
                tmp += ' ';
            
            string ret;
            
            for (const auto & item : words)
                ret += item;
            
            ret += tmp;
            
            return ret;
        }
        
        string ans;
        
        int interval = spaceCount / (words.size() - 1);
        
        string spaceString;
        
        for (int i = 0; i < interval; i++)
            spaceString += ' ';
        
        for (int i = 0; i < words.size(); i++)
        {
            if (i > 0)
                ans += spaceString;
            
            ans += words[i];
        }
        
        int rest = spaceCount % (words.size() - 1);
        string extraSpace;
        
        for (int i = 0; i < rest; i++)
            extraSpace += ' ';
        
        ans += extraSpace;
        
        return ans;        
    }
};