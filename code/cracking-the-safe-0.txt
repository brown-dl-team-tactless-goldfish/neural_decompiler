def crackSafe(self, n, k):
    """
    :type n: int
    :type k: int
    :rtype: str
    """
    class local:
        res = ""
    def dfs(tmp, visited):
        if len(tmp) == total_len:
            local.res = tmp
            return True

        node = tmp[len(tmp)-n+1:]
        for c in range(ord('0'), ord('0')+k):
            c = chr(c)
            node += c
            if node not in visited:
                visited.add(node)
                tmp += c
                if (dfs(tmp, visited)): return True
                visited.remove(node)
                tmp = tmp[0:-1]
            node = node[0:-1]

        return False

    total_len = pow(k, n) + n - 1
    tmp = "0" * n
    visited = {tmp}

    res = dfs(tmp, visited)
    return local.res