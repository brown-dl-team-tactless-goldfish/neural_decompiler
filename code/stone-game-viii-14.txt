class Solution {
public:
    int dp[100000][2],n;
    int solve(vector<int>&stones,int i,int alice)
    {
        if(i==n)
            return 0;
        if(i==n-1) // this means only two stones are left so player have to take both
            return alice==1?stones[i]:-stones[i];
        if(dp[i][alice]!=-1)
            return dp[i][alice];
        if(alice) // Player can either take the current i stones and give turn to other player or
                // Continue taking more stones
            return dp[i][alice] = max(stones[i] + solve(stones,i+1,!alice),solve(stones,i+1,alice));
        return dp[i][alice] = min(-stones[i] + solve(stones,i+1,!alice),solve(stones,i+1,alice));
    }
    int stoneGameVIII(vector<int>& stones) {
        memset(dp,-1,sizeof(dp));
        n = stones.size();
        // Prefix sum to calculate sum in O(1)
        for(int i = 1;i<n;i++)
            stones[i] += stones[i-1];
        return solve(stones,1,1); // start i from 1 as x>1
    }
};