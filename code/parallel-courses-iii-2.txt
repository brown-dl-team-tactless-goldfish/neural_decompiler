class Solution {
public:
    int ans = 0;
    int minimumTime(int n, vector<vector<int>>& relations, vector<int>& time) {
        
        vector<vector<int>> indeg(n+1);
        vector<int> outdeg(n+1,0);
        
        for(int j=0;j<relations.size();j++){            
            indeg[relations[j][1]].push_back(relations[j][0]); 
            outdeg[relations[j][0]] = -1;
           
        }
        
        for(int j=1;j<n+1;j++){
            if(outdeg[j]==0) /*end*/{
                dfs(j,indeg,time,outdeg);
            }
        }
        return ans;
    }
    
    void dfs(int course, vector<vector<int>>&in, vector<int>& time,vector<int> &out){
        if(out[course]>0) return;
        int m = 0;
        for(auto c : in[course]){
            dfs(c,in,time,out);
            m = max(m, out[c]);
        }
        out[course] = m + time[course-1];
       ans = max(ans,out[course]);
         
    }
    
};