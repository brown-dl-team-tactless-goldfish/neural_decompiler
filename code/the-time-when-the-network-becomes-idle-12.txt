class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {
        int n = patience.size();
        vector<vector<int>> graph(n);
        for(auto edge : edges){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        
        queue<int> queue;
        vector<bool> visited(n,false);
        vector<int> dist(n);
        queue.push(0);
        visited[0]=true;
        int d=0;
        while(!queue.empty()){
            int maxSize=queue.size();
            for(auto i=maxSize;i>0;i--){
                int u=queue.front();
                queue.pop();
                dist[u]=d;
                for(auto v: graph[u]){
                    if(!visited[v]){
                        queue.push(v);
                        visited[v]=true;
                    }
                }
            }
            d++;
        }

        int slowest =0;
        
        for(int i=1;i<n;i++){
            int twoD = 2*dist[i];
            int pat = patience[i];
            int time = twoD + ((twoD-1)/pat)*pat;
            slowest= max(slowest,time);
        }
        
        return slowest+1;
    }
};