typedef long long ll;
int binarySearch ( int * potions,int potionsSize,int spell,long long success){
    int lo = 0, hi = potionsSize -1 ;
    while (lo <= hi){
        int mid = (lo+hi)/2 ;
        ll prod = (ll) potions[mid] * spell;
        if ( prod >= success && (mid == potionsSize-1||(ll)potions[mid+1]*spell <success )){
            return mid+1;
        }
        else if (prod < success ){
            hi = mid -1;
        }
        else {
            lo = mid +1 ;
        }
    }
    return 0;
}
int cmpfunc (const void * a, const void * b) {
   return ( *(int*)b - *(int*)a );
} 
int* successfulPairs(int* spells, int spellsSize, int* potions, int potionsSize, long long success, int* returnSize){
    
    
    int * res = malloc(spellsSize*sizeof(int));
    *returnSize = spellsSize;
    
    //sort potions in descending order
    qsort(potions, potionsSize,sizeof(int),cmpfunc);
    
    for ( int i = 0 ;i<spellsSize;i++){
        if ( (ll) spells[i] * potions[potionsSize-1] >=success )
            res[i] = potionsSize;
        else if ( (ll) spells[i] * potions[0] < success)
            res[i] = 0;
        else 
            res[i] = binarySearch(potions,potionsSize,spells[i],success);
        
    }
    return res;

}