const int MAX_N = 1e5 ;

class Solution {
    long long M = 1e9+7;
public:    
    long long bitArr[MAX_N+1];
    void update(int idx, int diff) {
        while (idx <= MAX_N)
        {
            bitArr[idx] += diff;
            bitArr[idx] %= M;
            idx = idx +  (idx & -idx);
        }
    }

    int getPreSum(int idx){
        long long ret = 0;
        while (idx > 0){
            ret += bitArr[idx];
            ret %= M;
            idx = idx - (idx & -idx);
        }
        return ret;
    }

    int sumRange(int i, int j) {
        return getPreSum(j) - getPreSum(i-1);
    }
    
    int createSortedArray(vector<int>& instructions) 
    {        
        long long ret = 0;
        
        for (auto& x:instructions)
        {
            update(x, 1);
            int a = sumRange(1, x-1);
            int b = sumRange(x+1, MAX_N);
            ret += min(a,b);
            ret %= M;
        }
        return ret;
    }
};