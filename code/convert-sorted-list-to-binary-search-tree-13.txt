struct Node{
    int key;
    struct Node* left;
    struct Node* right;
    int height;
};

struct Node* createNode(int key){
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return node;
}

int getHeight(struct Node* node){
    if(node == NULL) return 0;
    return node->height;
}

int getBalancedFactor(struct Node* node){
    if(node == NULL) return 0;
    return getHeight(node->left) - getHeight(node->right);
}

struct Node* rightRotate(struct Node* y){
    struct Node* x = y->left;
    struct Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    x->height = fmax(getHeight(x->left), getHeight(x->right))+1;
    y->height = fmax(getHeight(y->left), getHeight(y->right))+1;
    return x;
}

struct Node* leftRotate(struct Node* x){
    struct Node* y = x->right;
    struct Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = fmax(getHeight(x->left), getHeight(x->right))+1;
    y->height = fmax(getHeight(y->left), getHeight(y->right))+1;
    return y;
}

struct Node* insert(struct Node* node, int key){
    if(node == NULL) return createNode(key);
    if(key < node->key) 
        node->left = insert(node->left, key);
    else if(key > node->key)
        node->right = insert(node->right, key);
    node->height = fmax(getHeight(node->left), getHeight(node->right))+1;
    int bf = getBalancedFactor(node);
    
    //Left Left Case
    if(bf > 1 && key < node->left->key)
        return rightRotate(node);
    
    //Right Right Case
    if(bf < -1 && key > node->right->key)
        return leftRotate(node);
    
    //Left Right Case
    if(bf > 1 && key > node->left->key){
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    //Right Left Case
    if(bf < -1 && key < node->right->key){
        node->right = rightRotate(node->right);
        return leftRotate(node->left);
    }
    return node;
}

struct TreeNode* sortedListToBST(struct ListNode* head){
    struct Node* root = NULL;
    while(head != NULL){
        root = insert(root, head->val);
        head = head->next;
    }
    return root;
}