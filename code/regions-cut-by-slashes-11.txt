class Solution {
public:
    int regionsBySlashes(vector<string>& grid) {
        int ans = 0;
        int n = grid.size();
        vector<int> root(4 * n * n);
        for (int i = 0; i < root.size(); ++i)
            root[i] = i;
        
        for (int r = 0; r < n; ++r)
        {
            int start = 0;
            for (int c = 0; c < n; ++c)
            {
                int base =  4 * n * r + 4 * c;
                if (grid[r][start] == ' ')
                {
                    merge(root, base + 0, base + 1);
                    merge(root, base + 1, base + 2);
                    merge(root, base + 2, base + 3);
                    start += 1;
                }
                else if (grid[r][start] == '/')
                {
                    merge(root, base + 0, base + 3);
                    merge(root, base + 1, base + 2);
                    start += 1;
                }
                else if (grid[r][start] == '\\')
                {
                    merge(root, base + 0, base + 1);
                    merge(root, base + 2, base + 3);
                    start += 1;
                }
                
                if (c < n - 1)
                {
                    merge(root, base + 1, base + 7);
                }
                
                if (r < n - 1)
                {
                    merge(root, base + 2, 4 * n * (r + 1) + 4 * c);
                }
            }
        }
        
        for (int i = 0; i < root.size(); ++i)
        {
            if (root[i] == i)
                ans += 1;
        }
        
        return ans;
    }
    
    void merge(vector<int>& root, int a, int b)
    {
        int root_a = find(root, a), root_b = find(root, b);
        if (root_a != root_b)
        {
            root[root_a] = root_b;
        }
    }
    
    int find(const vector<int>& root, int node)
    {
        return root[node] == node ? node : find(root, root[node]);
    }
};