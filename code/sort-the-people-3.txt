void merge(int *A, int *B, char **C, char **D, int l, int r, int c) {
    int i, j, k;

    for (i = l, j = c + 1, k = l; i <= c && j <= r;) {
        if (A[i] >= A[j]) {
            D[k] = strdup(C[i]);
            B[k++] = A[i++];
        } 
        else {
            D[k] = strdup(C[j]);
            B[k++] = A[j++];
        }
    }

    while (i <= c) {
        D[k] = strdup(C[i]);
        B[k++] = A[i++];
    }
        
    while (j <= r) {
        D[k] = strdup(C[j]);
        B[k++] = A[j++];
    }
        
    for (k = l; k <= r; k++) {
        A[k] = B[k];
        C[k] = D[k];
    }
    return;
}

void merge_sort_r(int *A, int *B, char **C, char **D, int l, int r) {
    int c;

    if (r <= l)
        return;
    c = (l + r) / 2;
    merge_sort_r(A, B, C, D, l, c);
    merge_sort_r(A, B, C, D, c + 1, r);
    merge(A, B, C, D, l, r, c);
}

void merge_sort(int *A, char **C, int N) {
    int l = 0, r = N - 1;
    int *B = (int *) malloc(N * sizeof(int));
    char **D = (char **) malloc(N * sizeof(char *));
    if (B == NULL || D == NULL) {
        fprintf(stderr, "Error allocating memory!\n");
        exit(EXIT_FAILURE);
    }
    merge_sort_r(A, B, C, D, l, r);
    free(B);
    free(D);
}

char **sortPeople(char **names, int namesSize, int *heights, int heightsSize, int *returnSize){
    char **ans = (char **) malloc(namesSize * sizeof(char *));
    for (int i = 0; i < namesSize; i++) {
        ans[i] = strdup(names[i]);
    }
    *returnSize = namesSize;
    merge_sort(heights, ans, namesSize);
    return ans;
}