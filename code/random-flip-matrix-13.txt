public class Solution {
    private Queue<int> m_Available = new();
    private HashSet<int> m_Used = new();

    private int m_N = -1;
    private int m_M = -1;

    public Solution(int m, int n) {
        m_N = n; 
        m_M = m; 

        Reset();
    }
    
    public int[] Flip() {
        if (m_Available is not null) {
            var item = m_Available.Dequeue();

            return new int[] {item / m_N, item % m_N };
        }

        while (true) {
            int n = Random.Shared.Next(m_N);
            int m = Random.Shared.Next(m_M);

            if (m_Used.Add(m + n * m_M)) {
                return new int[] { m, n };
            }
        }
    }
    
    public void Reset() {
        if (m_N  * m_M > 100_000) {
            m_Available = null;

            m_Used = new HashSet<int>();

            return;
        }

        m_Used = null;

        m_Available = new Queue<int>(Enumerable
            .Range(0, m_N * m_M)
            .OrderBy(_ => Random.Shared.NextDouble()));
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(m, n);
 * int[] param_1 = obj.Flip();
 * obj.Reset();
 */