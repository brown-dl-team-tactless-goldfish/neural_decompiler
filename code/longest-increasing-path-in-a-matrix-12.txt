class Solution {
public:
    int dp[1000][1000];
    
    int longestPathHelper(int i, int j,vector<vector<int>>& matrix,int prev) {
       
        
        if(i<0 || j<0 || i>=matrix.size() || j>=matrix[0].size() ||  matrix[i][j] <= prev) {
             return 0;
        }
        
        if(dp[i][j]!=-1) return dp[i][j];
       
        int a = longestPathHelper(i+1,j,matrix,matrix[i][j]);
        int b = longestPathHelper(i-1,j,matrix,matrix[i][j]);
        int c = longestPathHelper(i,j+1,matrix,matrix[i][j]);
        int d = longestPathHelper(i,j-1,matrix,matrix[i][j]);
        int e = max(a,b);
        int f = max(c,d);
        
        return dp[i][j] = 1+max(e,f);
        
       
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        int ans = INT_MIN;
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                ans = max(ans,longestPathHelper(i,j,matrix,-1));
            }
        }
        
        
        return ans;
    }
};