class Solution:
    def largestVariance(self, s: str) -> int:
        ans = 0
        S = set(s)
        for c1, c2 in combinations(S, 2):
            c1_c2_v1 = 0
            c1_c2_v2 = 0
            c2_c1_v1 = 0
            c2_c1_v2 = 0
            c1_c2_max = 0
            c2_c1_max = 0
            c1_c2_flag = False
            c2_c1_flag = False
            for c in s:
                if c == c1:
                    c2_c1_flag = True
                    c1_c2_v1 += 1
                    c2_c1_v2 += 1
                elif c == c2:
                    c1_c2_flag = True
                    c1_c2_v2 += 1
                    c2_c1_v1 += 1
                else:
                    continue

                if c1_c2_v2 > c1_c2_v1:
                    c1_c2_v1 = c1_c2_v2 = 0
                if c2_c1_v2 > c2_c1_v1:
                    c2_c1_v1 = c2_c1_v2 = 0    
                    
                if c1_c2_v2 > 0:
                    c1_c2_max = max(c1_c2_max, c1_c2_v1-c1_c2_v2)
                if c2_c1_v2 > 0:
                    c2_c1_max = max(c2_c1_max, c2_c1_v1-c2_c1_v2)
            
            if c1_c2_v1 > 0 and c1_c2_v2 == 0:
                if c1_c2_v1 == len(s):
                    return 0
                if c1_c2_flag:
                    c1_c2_max = max(c1_c2_max, c1_c2_v1-1)
            if c2_c1_v1 > 0 and c2_c1_v2 == 0:
                if c2_c1_v1 == len(s):
                    return 0
                if c2_c1_flag:
                    c2_c1_max = max(c2_c1_max, c2_c1_v1-1)

            ans = max(ans, c1_c2_max)
            ans = max(ans, c2_c1_max)
        
        return ans