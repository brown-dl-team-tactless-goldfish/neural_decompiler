/*
reverse() reverse the list starts from startNode until endNode (endNode is not reversed)
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* reverse(struct ListNode* startNode, struct ListNode* endNode)
{
    struct ListNode* p = startNode->next;
    struct ListNode* s = startNode;
    
    while (p != endNode)
    {
        struct ListNode* tmp = p->next;
        p->next = s;
        s = p;
        p = tmp;
    }
    startNode->next = p; // connect to next group
    return s; // return first node of reversed group
}

struct ListNode* reverseEvenLengthGroups(struct ListNode* head){
    struct ListNode* pre = NULL;
    struct ListNode* p = head;
    struct ListNode* pGroup = NULL; // pinter to the node before a "need reverse group"
    int numGroup = 1;
    int gStart = 1;
    int gEnd = (1 + numGroup) * numGroup / 2;
    int cnt = 0;
    
    while (p)
    {
        cnt++;
        
        if (cnt == gEnd + 1) // check and do reverse when current pointer in start of a group
        {
            if ((gEnd - gStart + 1) % 2 == 0)
            {
                struct ListNode* tmp = pGroup->next; // save first node of a "need reverse group"
                pGroup->next = reverse(pGroup->next, p);
                pGroup = tmp; // the saved node is next pGroup
            }
            else
            {
                pGroup = pre;
            }
            numGroup++;
            gStart = gEnd + 1;
            gEnd = (1 + numGroup) * numGroup / 2;
        }
        pre = p;
        p = p->next;
    }
    
    if ((cnt - gStart + 1) % 2 == 0)
    {
        pGroup->next = reverse(pGroup->next, NULL);
    }
    
    return head;
}