/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void shiftDown(int* arr, int idx, int size) {
    int maxId = idx;
    int left = 2*idx + 1;
    int right = 2*idx + 2;
    
    if (left < size && arr[left] > arr[maxId]) maxId = left;
    if (right < size && arr[right] > arr[maxId]) maxId = right;
    
    if (idx != maxId) {
        swap(&arr[idx], &arr[maxId]);
        shiftDown(arr, maxId, size);
    }
}

// use heap sort and check if the given array satisfies arithmetic.
bool sortAndCheck(int* arr, int size) {
    int i;
    for (i = size/2 - 1; i >= 0; i--) {
        shiftDown(arr, i, size);
    }
    
    for (i = size-1; i > 0; i--) {
        swap(&arr[i], &arr[0]);
        shiftDown(arr, 0, i);
    }
    
    int temp = arr[1] - arr[0];
    for (i = 2; i < size; i++) {
        if (arr[i] - arr[i-1] != temp) return false;
    }
    return true;
}

// Copy the target array from given array and check if it satisfies arithmetic or not.
bool checkArithmetic(int* nums, int lIdx, int rIdx) {
    int size = rIdx - lIdx + 1;
    int* temp = (int*)malloc(sizeof(int) * size);
    int i, j = 0;
    for (i = lIdx; i <= rIdx; i++) {
        temp[j++] = nums[i];
    }
    bool res = sortAndCheck(temp, size);
    free(temp);
    
    return res;
}

bool* checkArithmeticSubarrays(int* nums, int numsSize, int* l, int lSize, int* r, int rSize, int* returnSize){
    assert(lSize == rSize);
    bool* res = (bool*)malloc(sizeof(bool) * lSize);
    int i = 0, temp;
    
    for (i = 0; i < lSize; i++) {
        res[i] = checkArithmetic(nums, l[i], r[i]);   
    }
    
    *returnSize = lSize;
    return res;
}