#define UP_TO_LOW 1
#define LOW_TO_UP 0
int* findDiagonalOrder(int** mat, int matSize, int* matColSize, int* returnSize){
    
    int row = matSize;
    int col = *matColSize;
    int idx=0;
    int *res = (int *)malloc(sizeof(int) * row * col);
    memset(&res[0],0,sizeof(int)*row*col);
    int i=0,j=0;
    res[0] = mat[0][0];
    idx+=1;
    bool dir=UP_TO_LOW;
    i=0;j=1; // i is row and j is col
    int v_i=0,v_j=0;  
    // if there is only one element in matrix
    if (v_i == row-1 && v_j == col-1)
    {
        *returnSize=1;
        return &res[0];
    }
    while (i!=row-1 || j!=col-1)
    {
        while (i>=0 && j>=0 && i<row && j<col)
        {
            res[idx] = mat[i][j];
            idx+=1;
            v_i=i;v_j=j;
            if (dir == UP_TO_LOW)
            {
                i++;j--;
            }
            else
            {
                j++;i--;
            }
        }
        i=v_i;j=v_j;
        if (dir == UP_TO_LOW)
        {
            if (i >= row-1)
            {
                j++;
            }
            else
            {
                i++;
            }
        }
        else
        {
            if (j >= col-1)
            {
                i++;
            }
            else
            {
                j++;
            }
        }
        if (dir == UP_TO_LOW)
        {
            dir = LOW_TO_UP;
        }
        else
        {
            dir = UP_TO_LOW;
        }
    }
    res[idx] = mat[i][j];
    *returnSize = idx+1;
    return &res[0];
}