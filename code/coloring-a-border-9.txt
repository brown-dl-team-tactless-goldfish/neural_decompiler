public class Solution {
    
    public int[][] ColorBorder(int[][] grid, int row, int col, int color) {
        int[][] result = Enumerable
            .Range(0, grid.Length)
            .Select(r => grid[r].ToArray())
            .ToArray();
        
        Queue<(int r, int c)> agenda = new ();
                
        int hue = grid[row][col]; 
        
        agenda.Enqueue((row, col));
        
        HashSet<(int r, int c)> visited = new () { (row, col) };
        
        while (agenda.Count > 0) {
            (int r, int c) = agenda.Dequeue();
            
            for (int d = 0; d < 4; ++d) {
                int nr = r + (d - 1) % 2;
                int nc = c + (d - 2) % 2;
                
                if (nr >= 0 && nc >= 0 && nr < grid.Length && nc < grid[nr].Length && grid[nr][nc] == hue)
                    if (visited.Add((nr, nc)))
                        agenda.Enqueue((nr, nc));
            }
        }
        
        foreach (var (r, c) in visited) {
            bool edge = (r == 0 || r == grid.Length - 1 || c == 0 || c == grid[r].Length - 1);
            
            if (!edge)
                for (int d = 0; d < 4; ++d)
                    if (grid[r + (d - 1) % 2][c + (d - 2) % 2] != grid[r][c])
                        edge = true;
            
            if (edge)
                result[r][c] = color;
        }
        
        return result;
    }
    
}