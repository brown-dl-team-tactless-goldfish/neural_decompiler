class BIT{
    public:
    int N;    
    vector<long long>bitArr; // Note: all arrays are 1-index
    long long M = 1e9+7;
    
    BIT(int n)
    {
        this->N = n;
        bitArr.resize(N+1);        
    }

    void update(int i, int diff) {
        int idx = i;
        while (idx <= N)
        {
            bitArr[idx] += diff;
            bitArr[idx] %= M;
            idx += idx & -idx;
        }
    }

    long long getPreSum(int idx){
        long long ret = 0;
        while (idx){
            ret += bitArr[idx];
            ret %= M;
            idx -=  idx & -idx;
        }
        return ret;
    }

    long long sumRange(int i, int j) {    
        return getPreSum(j)-getPreSum(i-1);
    } 
};

class Solution {
public:    
    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) 
    {
        int n = nums1.size();
        unordered_map<int,int>Map;
        for (int i=0; i<n; i++)
            Map[nums1[i]] = i;
        
        for (int i=0; i<n; i++)
            nums2[i] = Map[nums2[i]]+1;
        
        vector<int>smallerBefore(n);
        BIT prefixBIT(n);
        for (int i = 0; i < n; i++)
        {
            smallerBefore[i] = prefixBIT.sumRange(1,nums2[i]-1);
            prefixBIT.update(nums2[i], 1);
        }
        
        vector<int>largerAfter(n);
        BIT suffixBIT(n);
        for (int i = n-1; i >= 0; i--)
        {
            largerAfter[i] = suffixBIT.sumRange(nums2[i]+1, n);
            suffixBIT.update(nums2[i], 1);
        }
        
        long long ret = 0; 
        for (int i=0; i < n; i++)
            ret += (long long)smallerBefore[i] * largerAfter[i];
        return ret;
    }    
};