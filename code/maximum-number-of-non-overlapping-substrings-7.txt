class Solution {
public:
    vector<string> maxNumOfSubstrings(string s) {
        vector<pair<int,int>> v(26, pair{1000000, -1});
        for(int i=0;i<s.size();i++){
            auto& [l, r] = v[s[i]-'a'];
            l = min(i, l), r = max(i, r);
        }
                
        auto u = v;
        for(char c='a'; c<='z';c++){
            auto& [l, r] = u[c-'a'];
            if(r == -1) continue;
            for(int i = l, j=l; i<=r || j>=l;){         
                if(i <= r){
                    auto [l1, r1] = v[s[i]-'a'];
                    r = max(r, r1);
                    l = min(l, l1);
                    i++;
                }
                if(j>=l){
                    auto [l1, r1] = v[s[j]-'a'];
                    r = max(r, r1);
                    l = min(l, l1);
                    j--;
                }
            }
        }       
        u.erase(remove(u.begin(), u.end(), pair{1000000, -1}), u.end());
        sort(u.begin(), u.end());
        
        vector<pair<int,int>> w = {u.front()};
        for(auto [l, r] : u){
            auto& [l0, r0] = w.back();
            if(l > r0) w.push_back(pair{l,r});
            else if(l<r0 && r > r0) r0 = r;
            else w.back() = pair{l,r};
        }        
        
        vector<string> res;
        for(auto [l, r] : w) res.push_back(s.substr(l, r-l+1));
        return res;
    }
};