class Solution {
public:
    int balancedString(string s) {
        Window win(s);
        int res = INT_MAX;
        while(!win.isEnd()){
            while(!win.isEnd() && !win.isGood()) win.moveR();
            while(win.isGood()){
                res = min(res, win.len());
                win.moveL();
            }
        }
        return res;
    }
    
    struct Window{
        Window(string& t) : s(move(t)), cnt(128,-m), cntCur(128,0), n(s.size()), m(n/4){
            for(auto c:s) cnt[c]++;
            for(auto c : "QWER") cnt[c] = max(0, cnt[c]);
            for(auto c : "QWER") numChange += cnt[c];
        }
        
        void moveR(){
            cntCur[s[r++]]++;
        }
        
        void moveL(){
            cntCur[s[l++]]--;
        }
        
        bool isGood() const{
            int numChangeCur = 0;
            for(auto c : "QWER") numChangeCur += min(cntCur[c], cnt[c]);
            return numChangeCur == numChange;
        }
        
        int len() const{
            return r-l;
        }
        
        bool isEnd() const{
            return r == n;
        }
        
        string s;
        int n;
        int m;
        vector<int> cnt;
        vector<int> cntCur;
        int numChange =0;
        int l = 0;
        int r = 0;
    };
};