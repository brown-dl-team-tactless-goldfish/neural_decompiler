class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int h = heightMap.size();
        int w = heightMap[0].size();
        vector<vector<int>> moves = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        vector<vector<bool>> visit(h, vector<bool>(w, false));
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        for(int i = 0; i < w; i++) 
        {
            pq.push({heightMap[0][i], 0, i});
            visit[0][i] = true;
        }
        for(int i = 0; i < w; i++) 
        {
            pq.push({heightMap[h-1][i], h-1, i});
            visit[h-1][i] = true;
        }
        for(int i = 0; i < h; i++) 
        {
            pq.push({heightMap[i][0], i, 0});
            visit[i][0] = true;
        }
        for(int i = 0; i < h; i++) 
        {
            pq.push({heightMap[i][w-1], i, w-1});
            visit[i][w-1] = true;
        }
        int out = 0;
        while(!pq.empty())
        {
            vector<int> v = pq.top();
            pq.pop();
            for(vector<int> move : moves)
            {
                int r = v[1] + move[0];
                int c = v[2] + move[1];
                if(r >= 0 && r < h && c >= 0 && c < w && visit[r][c] == false)
                {                 
                    visit[r][c] = true;

                    if(heightMap[r][c] < v[0])
                    {
                        out += v[0]-heightMap[r][c];
                        pq.push({v[0], r, c});
                    }
                    else
                    {
                        pq.push({heightMap[r][c], r, c});
                    }
                }
            }
        }
        return out;
    }
};