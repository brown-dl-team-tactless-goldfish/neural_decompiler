class Solution {
public:
    
    int count_cycle = 0;
    
    int find_parent(int a, vector<int>& parent)
    {
        if(parent[a] == -1)
        {
            parent[a] = a;
            return a;
        }
        
        int p = parent[a];
        
        while( p != parent[p])
            p = parent[p];
        
        parent[a] = p;
        
        return p;
    }
    
    void join(int a, int b, vector<int>& parent, vector<int>& rank)
    {
        int p_a = find_parent(a,parent);
        int p_b = find_parent(b,parent);
        
        if(p_a == p_b)
        {
            count_cycle++;
            return;
        }
            
        
        if(rank[p_a] > rank[p_b])
            parent[p_b] = p_a;
        
        else if(rank[p_a] < rank[p_b])
            parent[p_a] = p_b;
        
        else
        {
            parent[p_a] = p_b;
            rank[p_b]++;
        }
    }
    
    int regionsBySlashes(vector<string>& grid) {
        
        int n = grid[0].length();
        
        int size = (n+1)*(n+1);
        int column = n+1;
        vector<int> v(size);
        vector<int> parent(size,-1);
        vector<int> rank(size,1);
        rank[0] = 2;
        
        int k=0;
        for(int i=0; i<column; i++)
            for(int j=0; j<column; j++)
            {
                if(i==0 || j==0 || i==n || j==n)
                    parent[k] = 0;
                    
                v.push_back(k++);
            }
        
        for(int i=0; i<n; i++)
            for(int j=0; j<n; j++)
            {
                char c = grid[i][j];
                
                switch(c)
                {
                    case '/' : 
                        join( (i+1)*column+j, i*column + j+1, parent, rank);
                            break;
                        
                    case '\\' :
                        join( i*column+j, (i+1)*column+(j+1), parent, rank);
                            break;
                }
            }
        
        return count_cycle+1;
        
    }
};