#define NUM_DIGITS 10

int countDigits(int num, int* count)
{
    memset(count, 0, sizeof(int) * NUM_DIGITS);
    
    int numDigits = 0;
    
    while (num)
    {
        int digit = num % 10;
        count[digit]++;
        num /= 10;
        numDigits++;
    }
    
    return numDigits;
}

bool compare(int* count, int* count2)
{
    for (int i = 0; i < NUM_DIGITS; i++)
    {
        if (count[i] != count2[i])
        {
            return false;
        }
    }
    
    return true;
}

// void printCount(int* count)
// {
//     for (int i = 0; i < NUM_DIGITS; i++)
//     {
//         printf("count[%d] = %d\n", i, count[i]);
//     }
// }

bool reorderedPowerOf2(int N){
    // printf("%d\n", (int)log2(1000));
    // printf("%d\n", (int)log2(100));
    // printf("%d\n", (int)log2(10));
    // printf("%d\n", (int)log2(1));
    
    int count[NUM_DIGITS]; // number of 0 ~ 9
    int count2[NUM_DIGITS]; // number of 0 ~ 9
    
    int numDigits = countDigits(N, count);
    
    int low = (int)log2(pow(10, numDigits-1));
    int high = (int)log2(pow(10, numDigits));
    
    if (high > 30)
    {
        high = 30;
    }
    
//     printf("numDigits = %d, low = %d, high = %d\n", numDigits, low, high);
    
//     printf("count\n");
//     printCount(count);
    
    for (int i = low; i <= high; i++)
    {
        int power2 = 1 << i;
        
        (void)countDigits(power2, count2);

        // printf("count2\n");    
        // printCount(count2);
        
        if (compare(count, count2))
        {
            return true;
        }
    }
    
    return false;
}