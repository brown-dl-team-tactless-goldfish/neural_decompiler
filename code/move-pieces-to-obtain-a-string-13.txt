bool checkRelativeOrder(string start, string target){
    int i,j,num1=0,num2=0,n=start.size();
    for(i=0,j=0;i<n && j<n;i++,j++){
        while (j<n && target[j]=='_') j++;
        if(target[j]=='L') num2--;
        else num2++;
        if(j<n){
            while (i<n && start[i]=='_') i++;
            if(i<n){
                if(start[i]=='L') num1--;
                else num1++;
                if(num1!=num2){
                    return false;
                }
            }else{
                return false;
            }
        }else{
            break;
        }
    }
    return true;
}

bool checkR(string start, string target){
    vector<int> r1,r2;
    for(int i=0;i<target.size();i++){
        if(start[i]=='R') r1.push_back(i);
        if(target[i]=='R') r2.push_back(i);
    }
    if(r1.size()!=r2.size()) return false;
    for(int i=0;i<r1.size();i++) if(r2[i]<r1[i]) return false;
    return true;
}

bool checkL(string start, string target){
    vector<int> l1,l2;
    for(int i=0;i<target.size();i++){
        if(start[i]=='L') l1.push_back(i);
        if(target[i]=='L') l2.push_back(i);
    }
    if(l1.size()!=l2.size()) return false;
    for(int i=0;i<l1.size();i++) if(l2[i]>l1[i]) return false;
    return true;
}

bool canChange(string start, string target) {
    return checkL(start,target)&&checkR(start,target)&&checkRelativeOrder(start,target);
}