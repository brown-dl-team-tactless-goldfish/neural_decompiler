class Graph {
public:
    vector<vector<pair<int,int>>> adj;
    int n;
    Graph(int n, vector<vector<int>>& edges) {
        this->n = n;
        adj.clear();
        adj.resize(n);
        for(auto &e : edges){
            addEdge(e);
        }
    }
    
    void addEdge(vector<int> e) {
        adj[e[0]].push_back({e[2], e[1]});
    }
    
    int shortestPath(int node1, int node2) {
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        pq.push({0, node1});
        
        vector<int> dist(n, INT_MAX);
        dist[node1] = 0;
        
        while(!pq.empty()){
            int wt = pq.top().first, u=pq.top().second;
            pq.pop();
            for(auto &child : adj[u]){
                int wt2 = child.first, v = child.second;
                if(dist[v] > dist[u]+wt2){
                    dist[v] = dist[u]+wt2;
                    pq.push({dist[v], v});
                }
            }
        }
        
        return dist[node2]==INT_MAX ? -1 : dist[node2];
    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */