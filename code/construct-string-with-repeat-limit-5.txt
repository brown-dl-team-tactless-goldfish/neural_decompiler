public string RepeatLimitedString(string s, int repeatLimit) {
    // count the frequencies of each character
    var freq = new int[26];
    foreach (char c in s) {
        freq[c - 'a']++;
    }
    // create a stack with small charaters on the bottom and large on top
    var stack = new Stack<(char c, int v)>();
    for (int i = 0; i < 26; i++) {
        if (freq[i] > 0) {
            stack.Push(((char)(i + 'a'), freq[i]));
        }
    }
    var sb = new StringBuilder();
    // pop the largest character from the top
    while (stack.TryPop(out var top)) {
        // determine how many times we can repeat it
        int v = Math.Min(top.v, repeatLimit);
        for (int i = 0; i < v; i++) {
            sb.Append(top.c);
        }
        // if the largest charater has more than the repeat limit and
        // another character is on the stack, we can use it as a separator
        if (top.v > v && stack.TryPop(out var nextTop)) {
            sb.Append(nextTop.c);
            if (nextTop.v > 1) {
                // push the rest of the separator characters for later use
                stack.Push((nextTop.c, nextTop.v - 1));
            }
            // the current character can be used again
            stack.Push((top.c, top.v - v));
        }
    }
    return sb.ToString();
}