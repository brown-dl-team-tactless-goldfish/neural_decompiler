class Solution {
public:
    int stoneGameVII(vector<int>& stones) {
        // DP: define size == stones.size(), sums[size] where sums[i] is sum of stones[0:i], 
        // and dp[size][size] where dp[i][j] = difference by playing stones[i:j].
        // 
        // The formula is:
        // 1) dp[i][j] = sums[j] - sums[i] - dp[i + 1][j] OR
        // 2) dp[i][j] = sums[j - 1] - sums[i - 1] - dp[i][j - 1].
        // We choose the maximum value b/w those 2 as dp[i][j].
        //
        // Finally, return dp[0][size - 1], and also deal with the edge cases.
        int size = stones.size();
        vector<int> sums(size, stones[0]);
        vector<vector<int>> dp(size, vector<int>(size));
        
        for (int i = 1; i < size; ++i)
        {
            sums[i] = sums[i - 1] + stones[i]; // initialize sums array
        }
        
        for (int i = 0; i < size; ++i)
        {
            for (int j = 0, k = i; k < size; ++j, ++k)
            {
                int d1 = j + 1 < size ? dp[j + 1][k] : 0; // difference by picking the leftmost element
                int d2 = k > 0 ? dp[j][k - 1] : 0; // diff by picking the rightmost element
                
                int s1 = sums[k] - sums[j]; // score of picking the left
                int s2 = (k > 0 ? sums[k - 1] : 0) - (j > 0 ? sums[j - 1] : 0); // score of picking the right
                dp[j][k] = max(s1 - d1, s2 - d2); // update dp[j][k]
            }
        }
        
        return dp[0][size - 1];
    }
};