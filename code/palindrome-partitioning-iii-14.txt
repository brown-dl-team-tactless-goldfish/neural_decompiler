class Solution {
public:
    int palindromePartition(string s, int k) {
    int n = s.size();
    vector<vector<int>> table(n+1, vector<int>(n+1, 0));

    for(int j = 0; j < n; ++j) {
        for(int i = 0; i <= j; ++i) {
            if(i == j) {
                table[i][j] = 0;
                continue;
            }
            
            if(s[i] == s[j]) {
                table[i][j] = table[i+1][j-1];
            } else {
                table[i][j] = table[i+1][j-1] + 1;
            }
        }
    }
    
    vector<vector<int>> dp(n, vector<int>(k+1, 0));
    for(int i = 0; i < n; ++i) {
        dp[i][1] = table[0][i];
    }
    
    
    for(int cnt = 2; cnt <= k; ++cnt) {
        
        for(int i = 0; i < n; ++i) {
            dp[i][cnt] = i;
            
            for(int l = 0; l <= i; ++l) {
                dp[i][cnt] = min(dp[i][cnt], dp[l][cnt-1] + table[l+1][i]);
            }
        }
        
    }
    return dp[n-1][k];
    }
};