class Solution {
public:
	int countPyramids(vector<vector<int>>& grid) {


		int rows = grid.size(); int cols = grid[0].size();
		if (rows < 2 || cols < 2) return 0;

		vector<vector<int>> dp(rows, vector<int> (cols, 0));
		int ans = 0;



		for (int i = rows - 2; i >= 0; i--) {
			for (int j = 1; j < cols - 1; j++) {
				if (grid[i][j] == 0) continue;
				if (grid[i + 1][j] == 1 && grid[i + 1][j + 1] == 1 && grid[i + 1][j - 1] == 1) dp[i][j] = 1 + min(dp[i + 1][j], min(dp[i + 1][j + 1], dp[i + 1][j - 1]));
				ans += dp[i][j];
			}
		}


		vector<vector<int>> dp2(rows, vector<int> (cols, 0));



		for (int i = 1; i < rows; i++) {
			for (int j = 1; j < cols - 1; j++) {
				if (grid[i][j] == 0) continue;

				if (grid[i - 1][j] == 1  && grid[i - 1][j - 1] == 1 && grid[i - 1][j + 1] == 1) {
					dp2[i][j] = 1 + min(dp2[i - 1][j + 1], min(dp2[i - 1][j - 1], dp2[i - 1][j]));
				} ans += dp2[i][j];
			}
		}

		return ans;

	}
};