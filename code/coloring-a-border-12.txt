class Solution {
public:
    const array<array<int,2>,4> d{{{0,1},{1,0},{0,-1},{-1,0}}};
    
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int row, int col, int color) {
        queue<array<int,2>> q;
        q.push({row,col});
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> visited(m,vector<int>(n,0));
        visited[row][col] = true;
        int c = grid[row][col];
        
        while(!q.empty()) {
            auto fnode = q.front();
            q.pop();
            
            auto [x,y] = fnode;
            for(auto [dx,dy]:d) {
                if(x+dx >= 0 and x+dx < m and y+dy >= 0 and y+dy < n and
                  grid[x+dx][y+dy] == c and visited[x+dx][y+dy] == 0
                  ) {
                    q.push({x+dx,y+dy});
                    visited[x+dx][y+dy] = 1;
                } else if(x+dx < 0 or x+dx >= m or y+dy < 0 or y+dy >= n or
                          grid[x+dx][y+dy] != c
                         ) {
                    visited[x][y] = 2;
                }
            }
        }
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(visited[i][j] == 2) 
                    grid[i][j] = color;
            }
        }
        
        return grid;
    }
};