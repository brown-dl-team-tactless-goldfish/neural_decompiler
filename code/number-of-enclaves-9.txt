// run through edge inbound cells, DFS to replace 1 to 0
// run through internal non-edge cells, DFS find island
int direction[5] = {0, 1, 0, -1, 0};

void DFS (int **grid, int posX, int posY, \
          int gridSize, int *gridColSize) 
{
    // base case
    if (posX < 0 || posX >= gridSize ||     \
        posY < 0 || posY >= *gridColSize || \
        grid[posX][posY] == 0)
        return;
    // recursive steps
    grid[posX][posY] = 0; // replace 1 -> 0
    for (int k = 0; k < 4; k++) // (0,1) (1,0) (0,-1) (-1,0)
        DFS(grid, posX + direction[k], posY + direction[k + 1], \
            gridSize, gridColSize);
    return;
}

int DFS_count (int **grid, int posX, int posY, \
               int gridSize, int *gridColSize) 
{
    // base case
    if (posX < 0 || posX >= gridSize ||     \
        posY < 0 || posY >= *gridColSize || \
        grid[posX][posY] == 0)
        return 0;
    // recursive steps
    int count = 1;
    grid[posX][posY] = 0; // replace 1 -> 0
    for (int k = 0; k < 4; k++) // (0,1) (1,0) (0,-1) (-1,0)
        count += DFS_count(grid, posX + direction[k], posY + direction[k + 1], \
                           gridSize, gridColSize);
    return count;
}

int numEnclaves(int **grid, int gridSize, int *gridColSize){
    // run through edge inbound cells, DFS to replace 1 to 0
    for (int i = 0; i < gridSize; i++) {
        if ((i == 0) || (i == gridSize - 1)) {
            for (int j = 0; j < *gridColSize; j++)
                if (grid[i][j] == 1)
                    DFS(grid, i, j, gridSize, gridColSize); // printf("%d ", grid[i][j]);
        }
        else {
            if (grid[i][0] == 1)
                DFS(grid, i, 0, gridSize, gridColSize); // printf("%d ", grid[i][0]);
            if (grid[i][*gridColSize - 1] == 1)
                DFS(grid, i, *gridColSize - 1, gridSize, gridColSize); // printf("%d ", grid[i][*gridColSize - 1]);
        }
        //printf("\n");
    }
    
    // run through internal non-edge cells, DFS find island
    int island_count = 0;
    for (int i = 1; i < gridSize - 1; i++) {
        for (int j = 1; j < *gridColSize - 1; j++) {
            if (grid[i][j] == 1) {
                island_count += DFS_count(grid, i, j, gridSize, gridColSize);
            }
        }
        
    }
    
    /* print matrix
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < *gridColSize; j++) {
            printf("%d ", grid[i][j]);
        }
        printf("\n");
    }
    */
    
    return island_count;
}