public class TrieNode
{
    public List<string> Suggestion;
    public TrieNode[] Children;
    public TrieNode()
    {
        Suggestion = new List<string>();
        Children = new TrieNode[26];
    }
}

public class Solution {
    public IList<IList<string>> SuggestedProducts(string[] products, string searchWord) {
        
        // Sort products to store product names in lexicographic order
        Array.Sort(products);
        
        // Load product names into Trie, each TrieNode stores at most 3 suggested word
        TrieNode root = new TrieNode();
        foreach(string prod in products)
        {
            TrieNode curr = root;
            foreach(char c in prod)
            {
                if(curr.Children[c - 'a'] == null)
                    curr.Children[c - 'a'] = new TrieNode();
                curr = curr.Children[c - 'a'];
                if(curr.Suggestion.Count < 3)
                    curr.Suggestion.Add(prod);
            }
        }
        
        // Build result based on searchWord
        List<IList<string>> res = new List<IList<string>>();
        TrieNode curr2 = root;
        foreach(char c in searchWord)
        {
            if(curr2 != null)
                curr2 = curr2.Children[c - 'a'];
            
            res.Add(curr2 == null? new List<string>() : curr2.Suggestion);
        }
        
        return res;
    }
}