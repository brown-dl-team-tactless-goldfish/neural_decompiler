/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    
 vector<int> numbers;
     vector<int> depth;
    TreeNode* find(int d, int& c){
        if(c==numbers.size()) return NULL;
        
        if(depth[c]==d){
            TreeNode* root = new TreeNode(numbers[c]);
            c++;
            root->left = find(d+1,c);
            root->right = find(d+1, c);
          return root;
        }
         
        return NULL;
        
    }
    
    TreeNode* recoverFromPreorder(string S) {
    
        
    int cur_depth = 0;
        for(int i=0;i<S.size();i++){
            if(S[i]=='-') cur_depth++;
            else{
                depth.push_back(cur_depth);
                cur_depth=0;
                int num = 0;
                while(S[i]!='-'&&i<S.size()){
                    num=num*10 + (S[i]-'0');
                    i++;
                }
                numbers.push_back(num);
                
                i--;
            }
        }
        
            
           
            
        
        
        /*for(auto x: numbers) cout<<x<<" ";
        cout<<endl;
        for(auto y:depth)  cout<<y<<" ";
        */
        
       int c =0;
        return find(0,c);
        
        
    }
};