class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
        
        int rowLen = M.size();
        int colLen = M[0].size();
        
        vector<vector<int>> result(rowLen, vector<int>(colLen, 0));
        
        for (int row = 0; row < rowLen; row++)
        {
            for (int col = 0; col < colLen; col++)
            {
                int tmpSum = M[row][col];
                int count  = 1;
                
                if (row - 1 >= 0)
                {
                    tmpSum += M[row-1][col];
                    count++;
                }
                
                if (row + 1 < rowLen)
                {
                    tmpSum += M[row+1][col];
                    count++;
                }
                
                if (row - 1 >= 0 && col - 1 >= 0)
                {
                    tmpSum += M[row-1][col-1];
                    count++;
                }
                
                
                if (row - 1 >= 0 && col + 1 < colLen)
                {
                    tmpSum += M[row-1][col+1];
                    count++;
                }
                
                if (col - 1 >= 0)
                {
                    tmpSum += M[row][col-1];
                    count++;
                }
                
                if (col + 1 < colLen)
                {
                    tmpSum += M[row][col+1];
                    count++;
                }
                
                
                if (col - 1 >= 0 && row + 1 < rowLen)
                {
                    tmpSum += M[row+1][col-1];
                    count++;
                }
                
                
                if (col + 1 < colLen && row + 1 < rowLen)
                {
                    tmpSum += M[row+1][col+1];
                    count++;
                }
                
                result[row][col] = floor(tmpSum / count);
            }
        }
        
        return result;
        
    }
};