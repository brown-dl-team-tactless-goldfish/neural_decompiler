using VI=vector<int>;
using VVI=vector<VI>;
class Solution {
public:
    int robotSim(VI& commands, VVI& obstacles, int dir=U, VI pos={0,0}, int ans=0) {
        for (auto& obs: obstacles)
            OBS.insert(hash(obs[0],obs[1]));
        for (auto cmd: commands){
            if (cmd<0) turn(dir,cmd); else move(pos,dir,cmd);
            ans=max(ans,pos[0]*pos[0]+pos[1]*pos[1]);
        }
        return ans;
    }
private:
    unordered_set<string> OBS;
    enum DIRS {U=0,R=1,D=2,L=3}; const VVI MOVES {{0,1},{1,0},{0,-1},{-1,0}}; // UP,RIGHT,DOWN,LEFT
    string hash(int x, int y){ return to_string(x)+","+to_string(y); }
    void turn(int& dir, int cmd){
        if      (cmd==-1) dir=(dir==L) ? U : dir+1; // right (clockwise)
        else if (cmd==-2) dir=(dir==U) ? L : dir-1; // left (counter-clockwise)
    }
    void move(VI& pos, const int dir, int N){
        while (N--){
            int x=pos[0]+MOVES[dir][0],y=pos[1]+MOVES[dir][1];
            if (OBS.find(hash(x,y))==OBS.end()) pos[0]=x,pos[1]=y; else return;
        }
    }
};