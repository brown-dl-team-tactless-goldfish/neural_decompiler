/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> grid ;
    vector<vector<int>> spiralMatrix(int r , int c, ListNode* head) {
        grid.resize(r,vector<int>(c,-1)) ;
        int top = 0 , left = 0 , right = c - 1 , bottom = r - 1 ,dir = 0 ;
        
        while(top <= bottom and left <= right){
            if(dir == 0){
                //go left to right ;
                for(int i = left ; i <= right ; ++i ){
                    if(head){
                        grid[top][i] = head->val ;
                        head = head->next ;
                    }
                }
                ++top ;
                
            } 
            else if(dir == 1){
                //go top to bottom
                for(int i = top ; i <= bottom ; ++i ){
                    if(head){
                        grid[i][right] = head->val ;
                        head = head->next ;
                    }
                }
                --right ;
            } 
            else if(dir == 2){
                //go right to left 
                for(int i = right ; i >= left ; --i ){
                    if(head){
                        grid[bottom][i] = head->val ;
                        head = head->next ;
                    }
                }
                --bottom ;
            } 
            else{
                //go bottom to top
                for(int i = bottom ; i >= top ; --i ){
                    if(head){
                        grid[i][left] = head->val ;
                        head = head->next ;
                    }
                }
                ++left ;
            }
            //change of directions
            dir = (dir + 1) % 4 ;
        }
        
        return grid ;
    }
};