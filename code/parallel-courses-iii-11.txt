class Solution {
public:
    int minimumTime(int n, vector<vector<int>>& edges, vector<int>& time) 
    {
        vector<int>dist(n,0);
        vector<int>deg(n,0);   //indegree
        vector<vector<int>>adj(n);
        for(auto v:edges)
        {
            adj[v[0]-1].push_back(v[1]-1);
            deg[v[1]-1]++;
        }
        queue<int>q;
        for(int i=0;i<n;i++)
        {
            if(deg[i]==0)
            {
                q.push(i);
                dist[i]=time[i];
            }
        }
        while(!q.empty())
        {
            int i=q.front();
            q.pop();
            for(auto j:adj[i])
            {
                deg[j]--;
                dist[j]=max(dist[j],dist[i]+time[j]);
                if(deg[j]==0)
                    q.push(j);
            }
        }
        int res=*max_element(dist.begin(),dist.end());
        return res;
    }
};