public class ThroneInheritance {
    private Dictionary<string, IList<string>> children;
    private Dictionary<string, bool> dead;
    private string king;

    public ThroneInheritance(string kingName) {
        this.king = kingName;
        children = new Dictionary<string, IList<string>>();
        children[kingName] = new List<string>();
        dead = new Dictionary<string, bool>();
    }
    
    public void Birth(string parentName, string childName) {
        if (!children.ContainsKey(parentName)) {
            children[parentName] = new List<string>();
        }
        children[parentName].Add(childName);
    }
    
    public void Death(string name) {
        dead[name] = true;
    }
    
    public IList<string> GetInheritanceOrder() {
        var order = GetList(king);
        var res = new List<string>();
        foreach (var p in order) {
            if (!(dead.ContainsKey(p) && dead[p])) {
                res.Add(p);
            }
        }
        return res;
    }
    
    // recursion to get the children and build the inheritance order, start from p
    public IList<string> GetList(string p) {
        var res = new List<string>();
        res.Add(p);
        
        var cc = new List<string>();
        if (children.ContainsKey(p)) {
            cc = children[p].ToList();
        }
        foreach (var c in cc) {
            var tmp = GetList(c);
            res.AddRange(tmp);
        }
        return res;
    }
}