class Solution 
{
    public:
    struct Trie
    {
        map<int,Trie*> next;
        Trie* p;
        int c;
        int v;
        bool isEnd;
    };
    typedef struct Trie Trie;
    Trie* root;
    vector<int> largestDivisibleSubset(vector<int>& nums) 
    {
        vector<int> result;
        if(nums.size()==0)
        {
            return result;
        }
        sort(nums.begin(),nums.end());
        root=new Trie();
        root->isEnd=false;
        root->c=0;
        root->v=-1;
        root->p=root;
        int M=0;
        Trie* r;
        map<int,map<int,int>> m;
        for(int i=0;i<nums.size();i++)
        {
            deque<Trie*> q;
            deque<int> k;
            q.push_back(root);
            k.push_back(0);
            while(q.size()>0)
            {
                Trie* node=q.front();
                int counter=k.front();
                q.pop_front();
                k.pop_front();
                unordered_set<Trie*> overall;
                for(map<int,Trie*>::iterator it=node->next.begin();it!=node->next.end();it++)
                {
                    if(nums[i]%it->first==0&&overall.find(it->second)==overall.end())
                    {
                        q.push_back(it->second);
                        k.push_back(counter+1);
                    }
                    else if(overall.find(it->second)==overall.end()&&m[counter].find(nums[i])==m[counter].end())
                    {
                        node->next[nums[i]]=new Trie();
                        node->next[nums[i]]->c=counter+1;
                        node->next[nums[i]]->v=nums[i];
                        node->next[nums[i]]->p=node;
                        m[counter][nums[i]]=1;
                        if(counter+1>M)
                        {
                            M=counter+1;
                            r=node->next[nums[i]];
                        }
                        overall.insert(node->next[nums[i]]);
                    }
                }
                if(node->next.size()==0)
                {
                    node->next[nums[i]]=new Trie();
                    node->next[nums[i]]->c=counter+1;
                    node->next[nums[i]]->v=nums[i];
                    node->next[nums[i]]->p=node;
                    m[counter][nums[i]]=1;
                    if(counter+1>M)
                    {
                        M=counter+1;
                        r=node->next[nums[i]];
                    }                    
                }
            }
        }
        while(r!=r->p)
        {
            result.insert(result.begin(),r->v);
            r=r->p;
        }
        return result;
    }
};