class Solution {
public:
    vector<int> busiestServers(int k, vector<int>& arrival, vector<int>& load) {
        set<int> available_servers;
        multimap<int,int> next_free_servers;
        vector<int> res;
 	    vector<int> top_servers(k, 0);
 
        for(int i = 0; i < k; ++i)
		    available_servers.insert(i);

	    for(int i = 0; i < arrival.size(); ++i) {
		    int exec_time = arrival[i] + load[i];
            
            for(it = next_free_servers.begin(); it != next_free_servers.end(); ++it) {
                if(it->first > arrival[i])
                    break;
                available_servers.insert(it->second);
            }
            next_free_servers.erase(next_free_servers.begin(), it);
           
            if(!available_servers.size())
                continue;
            
            auto exec_server = available_servers.lower_bound(i % k);
            if(exec_server == available_servers.end())
                exec_server = available_servers.begin();

            next_free_servers.insert(make_pair(exec_time, *exec_server));
            ++top_servers[*exec_server];
            available_servers.erase(exec_server);
        }
         
        int max_handled_server = *max_element(top_servers.begin(), top_servers.end());
        for(int i = 0; i < top_servers.size(); ++i) {
            if(top_servers[i] == max_handled_server)
                res.emplace_back(i);
        }
        return res;
    }
};