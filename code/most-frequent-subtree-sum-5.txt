unordered_map<int ,int > mp;
int max_in_map=0;
int dfs(TreeNode*  root){
    if(root==NULL) return 0;
    
    int total=dfs(root->left) + dfs(root->right) + root->val;
    max_in_map=max(max_in_map , ++mp[total]);
    return total;
    
}

vector<int> findFrequentTreeSum(TreeNode* root) {
    dfs(root);
    vector<int> ans;
    for(auto &i: mp){
        
        if(max_in_map==i.second){
            cout<<"MAX: "<<max_in_map<<" : "<<i.first<<endl;
            ans.push_back(i.first);
        }
    }
    return ans;
}