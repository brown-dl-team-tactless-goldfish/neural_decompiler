

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findDiagonalOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){
    int row = 0, col = 0;
    int direction = 0;
    int count = 0;
    int *result = NULL;
    int idx = 0;
    
    if((matrix==NULL) || (matrixSize == 0) || (matrixColSize==NULL))
    {
        * returnSize = 0;
        return NULL;
    }
    
    count = matrixSize * matrixColSize[0];
    result = (int*)malloc(count*sizeof(int));
    while(idx < count)
    {
        //printf("\n row=%d,col=%d",row,col);
        result[idx++] = matrix[row][col];
        if(direction == 0)
        {
            row--;
            col++;
            if((row<0) && (col>=matrixColSize[0]))
            {
                row = 1;
                col = matrixColSize[0]-1;
                direction = (direction==0)?1:0;
            }
        }
        else
        {
            row++;
            col--;
            if((row>=matrixSize) && (col<0))
            {
                row = matrixSize-1;
                col = 1;
                direction = (direction==0)?1:0;
            }
        }
        if(row < 0)
        {
            row = 0;
            direction = (direction==0)?1:0;
        }
        else if(row>=matrixSize)
        {
            row = matrixSize - 1;
            col += 2;
            direction = (direction==0)?1:0;
        }
        if(col < 0)
        {
            col = 0;
            direction = (direction==0)?1:0;
        }
        else if(col>=matrixColSize[0])
        {
            row += 2;
            col = matrixColSize[0] - 1;
            direction = (direction==0)?1:0;
        }
    }
    
    * returnSize = count;
    return result;
}