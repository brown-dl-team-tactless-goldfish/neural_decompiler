int numSpecialEquivGroups(char** A, int ASize) {
    int i = 0;
    int j = 0;
    int k = 0;
    int sqr = 0;
    int group = 0;
    int* even_idx_sqr_sum = (int*) malloc( sizeof(int) * ( ASize ) );
    int* odd_idx_sqr_sum = (int*) malloc( sizeof(int) * ( ASize ) );
    int is_new_group = 1;
    
    for( i = 0; i < ASize; i++ )
        {
        even_idx_sqr_sum[i] = 0;
        odd_idx_sqr_sum[i] = 0;
        is_new_group = 1;
        
        for( j = 0; j < strlen(A[i]); j = j + 2 )
            {           
            sqr = A[i][j] * A[i][j];
            even_idx_sqr_sum[i] = even_idx_sqr_sum[i] + sqr;
            }
        
        for( j = 1; j < strlen(A[i]); j = j + 2 )
            {
            sqr = A[i][j] * A[i][j];
            odd_idx_sqr_sum[i] = odd_idx_sqr_sum[i] + sqr;
            }
        
        for( k = 0; k < i; k++ )
            {
            if( even_idx_sqr_sum[i] == even_idx_sqr_sum[k] && odd_idx_sqr_sum[i] == odd_idx_sqr_sum[k] )
                {
                is_new_group = 0;
                break;
                }
            }
        
        if( 1 == is_new_group )
            {
            group++;
            }
        }

    free(even_idx_sqr_sum);
    free(odd_idx_sqr_sum);

    return group;
}