class Solution {
public:
    int dp[1001][1010];
    int solve(vector<pair<int,int>>& v, int idx, int prev = 1009){
        int n = v.size();
        if(idx >= n){
            return 0;
        }
        if(dp[idx][prev] != -1) return dp[idx][prev];
        
        int inc = 0, exc = 0;
        if(prev == 1009){
            inc = v[idx].first + solve(v, idx+1, idx);
            exc = solve(v, idx+1, prev);
        }else{
            if(v[idx].second != v[prev].second && v[idx].first < v[prev].first){
                // do not include it
            }else inc = v[idx].first + solve(v, idx+1, idx);
            exc = solve(v, idx+1, prev);
        }
        return dp[idx][prev] = max(inc, exc);
    }
    
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        int n = ages.size();
        vector<pair<int,int>> v;
        for(int i=0; i<n; ++i){
            v.push_back({scores[i], ages[i]});
        }
        sort(v.begin(), v.end(), [&](pair<int,int>& p1, pair<int,int>& p2){
            if(p1.second == p2.second) return p1.first < p2.first;
            return p1.second < p2.second;
        });
        
        memset(dp, -1, sizeof(dp));
        return solve(v, 0);
    }
};