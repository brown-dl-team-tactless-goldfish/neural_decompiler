#define MAX(a,b) (((a) > (b)) ? (a) : (b))
int dfs(int** grid, int gridSize, int gridColSize, int rowIdx, int colIdx){
    
    // edge cases
    if((rowIdx < 0) || (rowIdx>=gridSize) || (colIdx >=gridColSize) || (colIdx < 0) || (grid[rowIdx][colIdx] == 0)){
        return 0;
    }

    // since we're visiting this island, make it 0
    grid[rowIdx][colIdx] = 0;
    
    // count in all the 4 directions of current island, see if there is an island
    // add 1 to the count, since currently we're already on an island, count its area
    return (1 + dfs(grid, gridSize, gridColSize, rowIdx-1, colIdx) + 
                dfs(grid, gridSize, gridColSize, rowIdx+1, colIdx) +
                dfs(grid, gridSize, gridColSize, rowIdx, colIdx-1) +
                dfs(grid, gridSize, gridColSize, rowIdx, colIdx+1));

}

int maxAreaOfIsland(int** grid, int gridSize, int* gridColSize){
    
    if((gridSize == 0) || (gridColSize == 0))   return 0;
    int maxArea = 0;

    for(int i=0; i<gridSize; i++){
        for(int j=0; j< (*gridColSize); j++){
            // if current index has an island, lets find out its area
            if(grid[i][j] == 1){
                int currenArea = dfs(grid, gridSize, *gridColSize, i, j);
                maxArea = MAX(maxArea, currenArea);
            }
        }
    }
    
    return maxArea;
}