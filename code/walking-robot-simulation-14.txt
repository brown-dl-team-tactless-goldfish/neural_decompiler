class Solution {
    
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        vector<int> dir {0, 1}, loc {0, 0}, next{0, 0};
        int temp, maxDist = 0;
        
        // create a set for obstacles
        set<vector<int>> s;
        for (int i = 0; i < obstacles.size(); i++){
            if (s.find(obstacles[i]) == s.end()) {
                s.insert(obstacles[i]);
            }
        }
        
        for (int i = 0; i < commands.size(); i++) {
            switch (commands[i]) {
                // rotation ccw
                case -2:
                    temp = dir[0];
                    dir[0] = -dir[1];
                    dir[1] = temp;
                    break;
                // rotation cw
                case -1:
                    temp = dir[0];
                    dir[0] = dir[1];
                    dir[1] = -temp;
                    break;
                default:
                    for (int c = 0; c < commands[i]; c++) {
                        next[0] = loc[0] + dir[0];
                        next[1] = loc[1] + dir[1];
                        if (s.find(next) != s.end()) {
                            break;
                        }
                        loc = next;
                    }
                    maxDist = max(maxDist, loc[0]*loc[0] + loc[1]*loc[1]);
            }
            
        }
        // return dir[1];
        return maxDist;
        
        
        
    }
};