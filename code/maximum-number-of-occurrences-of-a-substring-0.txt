// JS Hash Function
int JSHash(char *str, int n)
{
    unsigned int hash = 1315423913;
    int t = 0;
    while (t < n)
    {
        hash ^= ((hash << 5) + str[t] + (hash >> 2));
        t++;
    }

    return (hash & 0x7FFFFFFF);
}
int process(char* s,  int maxLetters, int k){
    int n = strlen(s);
    int* alpha = calloc(26, sizeof(int));
    int type = 0;
    int** hash = calloc(n, sizeof(int*));
    int max = 0;
    int key;
    for(int i = 0; i < k; i++){
        alpha[s[i] - 'a']++;
        if(alpha[s[i] - 'a'] == 1)
            type++;
    }
    if(type <= maxLetters){
        key =  JSHash(s, k);
        hash[key % n] = malloc(2 * sizeof(int));
        hash[key % n][0] = key;
        hash[key % n][1] = 1;
        max = 1;
    }
    for(int i = k; i < n; i++){
        alpha[s[i] - 'a']++;
        if(alpha[s[i] - 'a'] == 1)
            type++;
        alpha[s[i-k] - 'a']--;
        if( alpha[s[i-k] - 'a'] == 0)
            type--;
        if(type <= maxLetters){
            key = JSHash(&s[i-k+1], k);
            int d = key;
            while(1){
                if(hash[d % n] == NULL){
                    hash[d % n] = malloc(2 * sizeof(int) );
                    hash[d % n][0] = key;
                    hash[d % n][1] = 1;
                    break;
                }
                else{
                    if(hash[d % n][0] == key){
                        hash[d % n][1]++;
                        break;
                    }
                    else
                        d++;
                }
            }
            max = fmax( max , hash[d % n][1]);
        }
    }    
    return max;
}

int maxFreq(char * s, int maxLetters, int minSize, int maxSize){
    return process(s, maxLetters, minSize);
}