public class Solution
{
    public string LongestDupSubstring(string s)
    {
        int left = 1;
        int right = s.Length - 1;
        string lastFoundString = "";

        while (left <= right) // Binary Search
        {
            int mid = left + (right - left) / 2;
            var a = Contains(s, mid);
            if (a != "")
            {
                lastFoundString = a;
                left = mid + 1;
            }
            else
                right = mid - 1;
        }

        return lastFoundString;
    }

    string Contains(string s, int length)
    {
        int q = 100007; // prime number
        int h = 1;
        var d = 26; // number of letters in alphabet

        for (int i = 0; i < length - 1; i++)
            h = (h * d) % q;

        int hash = 0;
        for (int i = 0; i < length; i++)
            hash = (d * hash + s[i] - 'a') % q;
        if (hash < 0) hash += q;

        var dictHashToPos = new Dictionary<int, List<int>>(); // Hash -> List of start positions of string with this hash
        dictHashToPos[hash] = new List<int>() { 0 };

        for (int i = 0; i < s.Length - length; i++)
        {
            hash = (d * (hash - (s[i] - 'a') * h) + s[i + length] - 'a') % q;
            if (hash < 0) hash += q;

            if (dictHashToPos.TryGetValue(hash, out var listOfStartPositions))
            {
                foreach (var startPosition in listOfStartPositions)
                {
                    // works much faster than (string.Compare(s, startPosition, s, i + 1, length) == 0)
                    bool equal = true;
                    for (int k = 0; k < length; k++)
                    {
                        if (s[startPosition + k] != s[i + 1 + k])
                        {
                            equal = false;
                            break;
                        }
                    }
                    if (equal)
                        return s.Substring(i + 1, length);
                }

                listOfStartPositions.Add(i + 1);
            }
            else
                dictHashToPos[hash] = new List<int>() { i + 1 };
        }

        return "";
    }
}