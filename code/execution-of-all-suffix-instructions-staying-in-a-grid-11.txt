class Solution {
public:
    unordered_map<char, pair<int, int>> mp {
        {'L', {0, -1}},
        {'R', {0, 1}},
        {'U', {-1, 0}},
        {'D', {1, 0}}
    };
    
    bool isSafe(int n, int r, int c) {
        return r >= 0 && r < n && c >= 0 && c < n;    
    }
    
    vector<int> executeInstructions(int n, vector<int>& startPos, string &s) {
        int m = s.length();
        vector<int> ans(m);
        for(int i=0; i<m; i++) {
            int len = 0;
            int r = startPos[0], c = startPos[1];
            for(int j=i; j<m; j++) {
                r = r + mp[s[j]].first, c = c + mp[s[j]].second;
                if(isSafe(n, r, c))
                    len++;
                else
                    break;
            }
            ans[i] = len;
        }
        return ans;
    }
};