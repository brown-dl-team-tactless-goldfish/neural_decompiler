/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int checkBarItems(char * s){
    int n = strlen(s);
    int ans = 0;
    for(int i = 0; i < n; i++){
        if(s[i] == '|')
            ans++;
    }
    return ans;
}
int BfsSmall(int* arr, int n, int val){
    if(arr[n-1] < val)
        return -1;
    int left = 0, right = n-1;
    int mid;
    while(left < right){
        mid = left + (right - left)/2;
        if(arr[mid] >= val)
            right = mid;
        else
            left = mid + 1;
    }
    return left;
}

int BfsBig(int* arr, int n, int val){
    if(arr[0] > val)
        return -1;
    int left = 0, right = n-1;
    int mid;
    while(left < right){
        mid = right - (right - left)/2;
        if(arr[mid] <= val)
            left = mid;
        else
            right = mid - 1;
    }
    return left;
}
int* platesBetweenCandles(char * s, int** queries, int queriesSize, int* queriesColSize, int* returnSize){
    int n = strlen(s);
    int l = checkBarItems(s);
    *returnSize = queriesSize;
    int* ans = calloc(queriesSize , sizeof(int));
    if(l <= 1){
        return ans;
    }

    int* candle = malloc(l * sizeof(int));
    int* cn = malloc(l * sizeof(int));
    cn[0] = 0;
    int c_idx = 0;
    for(int i = 0; i < n; i++){
        if(s[i] == '|'){
            candle[c_idx] = i;
            c_idx++;
        }
    }
    for(int i = 1; i < l; i++){
        cn[i] = cn[i-1] + (candle[i] - candle[i-1] - 1) ;
    }

    for(int i = 0; i < queriesSize; i++){
        int a = BfsSmall(candle, l, queries[i][0]);
        if(a == -1)
            continue;
        int b = BfsBig(candle, l, queries[i][1]);
        if( b <= a)
            continue;
        ans[i] = cn[b] - cn[a] ;
    }
    free(cn);
    free(candle);
    return ans;
}