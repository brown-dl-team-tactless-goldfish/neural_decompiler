 struct ListNode {
     int val;
     struct ListNode *next;
 };

typedef struct solution{
	int len;
	struct ListNode *head;
} Solution;

/** @param head The linked list's head.
Note that the head is guaranteed to be not null, so it contains at least one node. */
Solution* solutionCreate(struct ListNode* head) {
	if (!head) return NULL;
	else{
		 Solution *obj = (Solution *)malloc(sizeof(Solution));
		obj->len = 1;
		obj->head = head;
		while (head->next) {
			obj->len++;
			head = head->next;
		}
		return obj;
	}
	return NULL;
}

/** Returns a random node's value. */
int solutionGetRandom(Solution* obj) {
	int i=0,num = (rand()%(obj->len));
	struct ListNode *pc = (obj->head);
	for (i = 0; i < num; i++){
		pc = pc->next;
	}
	return pc->val;
}

void solutionFree(Solution* obj) {    
	if (obj){
		struct ListNode *pc = obj->head;
		free(obj);
		while (pc){
			struct ListNode *pd = pc->next;
			free(pc);    
			pc = pd;
		}
	}
}

void main(){
	struct ListNode l = { 1 };
	struct ListNode ll = { 22 };
	struct ListNode lll = { 3 };
	struct ListNode *head = &l;
	struct ListNode *tail = &lll;
	head->next = &ll;
	head->next->next = &lll;
	tail->next = NULL;
	struct solution* obj = solutionCreate(head);
	struct ListNode *ret = obj->head;
	while (ret){
		printf("%d\n", ret->val);
		ret = ret->next;
	}
	int a1 = solutionGetRandom(obj);
	int a2 = solutionGetRandom(obj);
	int a3 = solutionGetRandom(obj);
	printf("%d,%d,%d\n", a1,a2,a3);
	solutionFree(obj);
}