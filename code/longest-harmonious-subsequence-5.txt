int partition(int* array,int low,int high)
{
    int temp_1=array[low];
    while(low<high)
    {
        while(low<high&&array[high]>=temp_1)
            high--;
        if(low<high) 
        {
            array[low]=array[high];
            low++;
        }
        while(low<high&&array[low]<temp_1)
            low++;
        if(low<high)
        {
            array[high]=array[low];
            high--;
        }
    }
    array[low]=temp_1;
    return low;
}
void quick_sort(int* array,int s,int t)
{   
    int i=0;
    if(s<t)
    {
        i=partition(array,s,t);
        quick_sort(array,s,i-1);
        quick_sort(array,i+1,t);
    }
}
int findLHS(int* nums, int numsSize) {
    if(numsSize==0||numsSize==1)
    {return 0;}
    quick_sort(nums,0,numsSize-1);
    int temp1_count=1;
    int result=0;
    int temp2_count=0;
    bool flag=false;
    for(int i=1;i<numsSize;i++)
    {
        if(nums[i]==nums[i-1])
        {temp1_count++;}
        else if(nums[i]==nums[i-1]+1)
        { 
            if(flag)
            {
                if(result<temp1_count+temp2_count)
                {result=temp1_count+temp2_count;}
            }
            flag=true;
            temp2_count=temp1_count;temp1_count=1;
        }
        else
        {
            if(flag)
            {
                if(result<temp1_count+temp2_count)
                {result=temp1_count+temp2_count;}
            }
            flag=false;
            temp1_count=1;temp2_count=0;
        }
    }
    if(flag)
    {
         if(result<temp1_count+temp2_count)
         {result=temp1_count+temp2_count;}       
    }
    return result;
}