    vector<string> braceExpansionII(string expression) {
        stack<string> stk;
        unordered_set<string> seen;
        vector<string> res;      
        
        stk.push(expression);
        while(!stk.empty()) {
            string s = stk.top(); stk.pop();

            auto b = s.find("{", 0);
            if(b == string::npos) {
                if(!seen.count(s)) {
                    seen.insert(s);
                    res.push_back(s);
                }
                continue;
            }
            
            int r = 0, l = 0;
            while(s[r] != '}') if(s[r++] == '{') l = r-1;
            
            string p1 = s.substr(0, l), p2 = s.substr(l+1, r-l-1), p3 = s.substr(r+1);
            int i = 0, j = 0;
            while(j < p2.length()) {
                if(p2[j+1] == ',' || j + 1 == p2.length()) {
                    stk.push(p1 + p2.substr(i, j-i+1) +p3);
                    i = j+2;
                }
                j++;
            }
        }
        
        sort(res.begin(), res.end());
        return res;
    }