class Solution {
public:
    long long minSumSquareDiff(vector<int>& nums1, vector<int>& nums2, int k1, int k2) {
        int k = k1+k2;
        map<long long,long long> mp;
        long long sum = 0;
        for(int i = 0; i<nums1.size();++i){ 
            mp[abs(nums1[i]-nums2[i])]++;
            sum+=abs(nums1[i]-nums2[i]);
        }
        if(sum<=k) return 0;
        for(auto it = mp.rbegin(); it!=mp.rend() && k>0; ++it){
            auto j = it; j++; int n = it->second;
            int d = it->first;
            if(j!=mp.rend()) d = it->first - j->first;
            if(d*n<=k){
                it->second = 0; k-=n*d;
                mp[j->first]+=n;
            }
            else{
                int t = k/n, r = k%n; 
                if(t>0){
                    mp[it->first-t]+=n-r;
                    it->second = 0;
                }
                else it->second-=r;
                mp[it->first-t-1]+=r;
                k = 0;
            }
        }
        long long re = 0;
        for(auto it = mp.begin(); it!=mp.end(); ++it){
             re+= ((long long)it->first*it->first)*it->second;
        }
        return re;
    }
};