class Solution {
public:
    int dp[201][201];
    int dfs(int i, int j, int n, int m, vector<vector<int>> &arr, int prev) {
        if(i < 0 || j < 0 || i >= n || j >= m || arr[i][j] <= prev) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int a = dfs(i+1, j, n, m, arr, arr[i][j]);
        int b = dfs(i-1, j, n, m, arr, arr[i][j]);
        int c = dfs(i, j+1, n, m, arr, arr[i][j]);
        int d = dfs(i, j-1, n, m, arr, arr[i][j]);
        return dp[i][j] = max({a, b, c, d}) + 1;
    }
    int longestIncreasingPath(vector<vector<int>>& a) {
        int i, j, n = a.size(), m = a[0].size();
        int ans=-1e9;
        memset(dp, -1, sizeof(dp));
        for(i=0; i<n; i++) {
            for(j=0; j<m; j++) {
                ans = max(ans, dfs(i, j, n, m, a, -1));
            }
        }
        return ans;
    }
};