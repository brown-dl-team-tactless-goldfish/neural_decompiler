class MapSum {
private:
    class TreeNode {
        public:
            int val;
            unordered_map<char, TreeNode*> children;
            TreeNode():val(0){}
            ~TreeNode() {
                for(auto&p : children) {
                    delete p.second;
                }
            }
    };
    TreeNode* root;
public:
    /** Initialize your data structure here. */
    MapSum() {
        root = new TreeNode();
    }
    
    void insert(string key, int val) {
        TreeNode* node = root;
        for(auto c : key) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TreeNode();
            }
            node = node->children[c];
        }
        node->val = val;
    }
    
    int sum(string prefix) {
        TreeNode* node = root;
        for(auto c : prefix) {
            if (node->children.find(c) == node->children.end()) {
                return 0;
            }
            node = node->children[c];
        }
        return traverse(node);
    }
    
    int traverse(TreeNode* node) {
        if (node == nullptr) {
            return 0;
        }
        int sum = node->val;
        for(auto&p : node->children) {
            sum += traverse(p.second);
        }
        return sum;
    }
    
    ~MapSum() {
        delete root;
    }
};

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum* obj = new MapSum();
 * obj->insert(key,val);
 * int param_2 = obj->sum(prefix);
 */