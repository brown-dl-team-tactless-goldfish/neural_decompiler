/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

struct q {
    struct TreeNode* node;
    struct q* next;
};

struct q* New_Node (struct TreeNode* node) {
    struct q* new_node = (struct q*) malloc(sizeof (struct q));
    memset(new_node,0, sizeof(struct q));
    new_node->node = node;
    new_node->next = NULL;
    return new_node;
}

void enqueue (struct q** root, struct TreeNode* node) {
    struct q* new_node = New_Node(node);
    if (*root == NULL) {
        *root = new_node;
        return;
    }
    struct q* iter = *root;
    while (iter->next)
        iter = iter->next;
    
    iter->next = new_node;
    return;
}

struct TreeNode* dequeue (struct q** root) {
    if (*root == NULL)
        return NULL;
    struct q* temp = *root;
    *root = temp->next;
    struct TreeNode* ret = temp->node;
    free(temp);

    return ret;
}

bool is_q_empty (struct q* root) {
    return root  == NULL ? true : false;
}

int q_size (struct q* root) {
    
    int count = 0;
    while (root != NULL) {
        count++;
        root = root->next;
    }
    
    return count;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* rightSideView(struct TreeNode* root, int* returnSize){
    
    int* a = (int*) malloc (100*sizeof(int));
    memset(a, 0, 100*sizeof(int));
    unsigned int arr_len = 0;
    unsigned int len = 0;
    if (root == NULL) {
        *returnSize = arr_len;
        return a;
    }
    
    struct q* new_q = NULL;
    enqueue (&new_q, root);
    
    while (!is_q_empty(new_q)) {
        len = q_size(new_q);
        for (int i = 0; i < len; i++) {
            root = dequeue(&new_q);
            
            if (root->left)
                enqueue(&new_q, root->left);
            if (root->right)
                enqueue(&new_q, root->right);
            
            if (i == len-1) {
                a[arr_len++] = root->val;
            }
        }
    }

    *returnSize = arr_len;
    return a;
}