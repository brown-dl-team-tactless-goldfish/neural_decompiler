typedef struct node{
    struct node* next;
    int val;
    int times;
} NODE;
NODE *head;

int numberOfBoomerangs(int** points, int pointsSize, int* pointsColSize){
    
    int length, i, j, x, y;
    int answer = 0;
    head = NULL;
    for(i = 0; i < pointsSize; i++){
        for(j = 0; j < pointsSize; j++){
            x = points[i][0] - points[j][0];
            y = points[i][1] - points[j][1];
            length = x * x + y * y;
            insertNode(length);
        }
        answer += viewNode();
        clearNode();
    }
    
    return answer;
}

void insertNode(int length){
    
    NODE* tempHead;
    tempHead = head;
    if(head == NULL){
        head = (NODE*)malloc(sizeof(NODE));
        head -> val = length;
        head -> times = 1;
        head -> next = NULL;
    }else{
        while(tempHead -> val != length){
            if(tempHead -> next == NULL) break;
            tempHead = tempHead -> next;
        }
        if(tempHead -> val == length) tempHead -> times = tempHead -> times + 1;
        else{
            NODE* temp;
            temp = (NODE*)malloc(sizeof(NODE));
            temp -> val = length;
            temp -> times = 1;
            temp -> next = NULL;
            tempHead -> next = temp;
        }
    }
}

int viewNode(){

    if(head == NULL) return 0;
    else{
        int sum = 0;
        NODE* temp;
        temp = head;
        while(temp != NULL){
            if(temp -> times >= 2) sum += ((temp -> times) * (temp -> times -1));
            temp = temp -> next;
        }
        return sum;
    }
}

void clearNode(){
    NODE* temp;
    temp = head;
    while(head != NULL){
        head = head -> next;
        free(temp);
        temp = head;
    }
}