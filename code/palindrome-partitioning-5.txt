bool IsPalindrom(string s)
{
    int low = 0, high=s.size()-1;
    
    while(low<high)
    {
        if(s[low]!=s[high]) return 0;
        low++;high--;
    }
    return 1;
}

void palindrom_partition(string s,  vector<string> &temp,vector<vector<string>>& ans)
{
    if(s=="")
    {
        ans.push_back(temp);
        return;
    }
    
    for(int i=1;i<=s.size();i++)
    {
        string left = s.substr(0,i);
        string right = s.substr(i);
        
        if(IsPalindrom(left))
        {
            temp.push_back(left);
           palindrom_partition(right, temp, ans); 
            temp.pop_back();
            
        }
    }
    
}

vector<vector<string>> partition(string s) 
{
    vector<string> temp;
    vector<vector<string>> ans;
    
    palindrom_partition(s, temp, ans);
    
    return ans;
}