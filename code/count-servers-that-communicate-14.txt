public class Solution {
    private int res = 0;
    
    public int CountServers(int[][] grid) {
        if (grid == null || grid.Length == 0)
            return res;
        
        for (int i = 0; i < grid.Length; i++)
            for (int j = 0; j < grid[0].Length; j++)
                if (grid[i][j] == 1)
                {
                    int cnt = DFS(grid, i, j, new bool[grid.Length, grid[0].Length]);
                    
                    if (cnt > 1)
                        res += cnt;
                }
        
        return res;
    }
    
    private int DFS(int[][] grid, int i, int j, bool[,] visited)
    {
        int cnt = 0;
        
        grid[i][j] = -1;
        visited[i, j] = true;
        
        int newX = i - 1;
        
        while (newX > -1 && !visited[newX, j] && grid[newX][j] != 1)
            newX--;
        
        if (newX > -1 && !visited[newX, j] && grid[newX][j] == 1)
            cnt += DFS(grid, newX, j, visited);
        
        newX = i + 1;
        
        while (newX < grid.Length && !visited[newX, j] && grid[newX][j] != 1)
            newX++;
        
        if (newX < grid.Length && !visited[newX, j] && grid[newX][j] == 1)
            cnt += DFS(grid, newX, j, visited);
        
        int newY = j - 1;
        
        while (newY > -1 && !visited[i, newY] && grid[i][newY] != 1)
            newY--;
        
        if (newY > -1 && !visited[i, newY] && grid[i][newY] == 1)
            cnt += DFS(grid, i, newY, visited);
        
        newY = j + 1;
        
        while (newY < grid[0].Length && !visited[i, newY] && grid[i][newY] != 1)
            newY++;
        
        if (newY < grid[0].Length && !visited[i, newY] && grid[i][newY] == 1)
            cnt += DFS(grid, i, newY, visited);
        
        return ++cnt;
    }
}