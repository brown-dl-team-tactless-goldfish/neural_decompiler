bool isValidSudoku(char** board, int boardSize, int* boardColSize){
    bool retVal = false;

    int i, j;
#define MAX_SIZE    9
    int HASHTABLE[MAX_SIZE];
    int idx;

    // check each row
    for (i=0; i<boardSize; ++i)
    {
        memset(HASHTABLE, 0, sizeof(HASHTABLE));
        for (j=0; j<boardColSize[i]; ++j)
        {
            if (board[i][j] == '.')
            {
                continue;
            }
            idx = (board[i][j]-'0') - 1;
            if (HASHTABLE[idx] != 0)
            {
                return retVal;
            }
            ++HASHTABLE[idx];
        }
    }

    // check each column
    for (j=0; j<boardColSize[0]; ++j)
    {
        memset(HASHTABLE, 0, sizeof(HASHTABLE));
        for (i=0; i<boardSize; ++i)
        {
            if (board[i][j] == '.')
            {
                continue;
            }
            idx = (board[i][j]-'0') - 1;
            if (HASHTABLE[idx] != 0)
            {
                return retVal;
            }
            ++HASHTABLE[idx];
        }
    }

    // check 3x3 sub-boxes
    int rowShift;
    int colShift;
    for (rowShift=0; rowShift<boardSize; rowShift+=3)
    {
        for (colShift=0; colShift<boardColSize[0]; colShift+=3)
        {
            memset(HASHTABLE, 0, sizeof(HASHTABLE));
            for (i=0; i<3; ++i)
            {
                for (j=0; j<3; ++j)
                {
                    if (board[i+rowShift][j+colShift] == '.')
                    {
                        continue;
                    }
                    idx = (board[i+rowShift][j+colShift]-'0') - 1;
                    if (HASHTABLE[idx] != 0)
                    {
                        return retVal;
                    }
                    ++HASHTABLE[idx];
                }
            }
        }
    }

    retVal = true;

    return retVal;
}