vector<string> findAllRecipes(vector<string>& recipes, 
							  vector<vector<string>>& ingredients, 
							  vector<string>& supplies) {
	unordered_set<string> supl(supplies.begin(), supplies.end());
	unordered_map<string, int> indegree;
	unordered_map<string, vector<string>> adj;
	for (int i = 0; i < recipes.size(); i++) {
		for (int j = 0; j < ingredients[i].size(); j++) {
			if (!supl.count(ingredients[i][j])) {
				adj[ingredients[i][j]].push_back(recipes[i]);
				indegree[recipes[i]]++;
			}
		}
	}
	queue<string> q;
	for (auto& rec : recipes) {
		if (indegree[rec] == 0) q.push(rec);
	}
	vector<string> res;
	while (!q.empty()) {
		string temp = q.front(); q.pop();
		res.push_back(temp);
		for (auto& next : adj[temp]) {
			if (--indegree[next] == 0) {
				q.push(next);
			}
		}
	}
	return res;
}