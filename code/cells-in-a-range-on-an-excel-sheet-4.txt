

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** cellsInRange(char * s, int* returnSize){
    //Get the values needed from the input
    int row_start = (s[1]-'0');
    int row_end = (s[4]-'0');
    int rows = (row_end - row_start) + 1;
    int cols = ((s[3] % 65) - (s[0] % 65)) + 1;
    int size = (rows * cols);
    //printf("row_start = %d | row_end = %d | rows = %d | cols = %d | size = %d\n", row_start, row_end, rows, cols, size);
    
    //Declare the resultant array and allocate memory
    char **result = (char**)malloc(sizeof(char*) * size);
    for(int i = 0; i < size; i++){
        result[i] = (char*)malloc(sizeof(char) * 3);
    }
    
    
    //Add elements to the resultant array
    char ch = s[0];
    int i = 0;
    while(i < size){
        for(int j = row_start; j <= row_end; j++){
            result[i][0] = ch;
            result[i][1] = '0' + j;
            result[i][2] = '\0';
            //printf("result[%d][0] = %c | result[%d][1] = %c\n", i, result[i][0], i, result[i][1]);
            
            i++;
        }
        ch = ((ch % 65) + 1) + 65;
    }
    
    *returnSize = size;
    return result;
}