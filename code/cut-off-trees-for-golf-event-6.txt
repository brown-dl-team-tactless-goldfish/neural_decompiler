class Solution {
public:
    int cutOffTree(vector<vector<int>>& forest) {
        vector<int> h;
        int r = forest.size();
        int c = forest[0].size();
        bool visit[r][c];
        memset(visit,0,sizeof(visit));
        for(int i=0;i<r;i++)
        {
            for(int j = 0; j<c; j++)
            {
                if(forest[i][j] != 0 && forest[i][j] != 1)
                {
                    h.emplace_back(forest[i][j]);
                }
            }
        }
        sort(h.begin(),h.end());
        queue<pair<int,int>> q;
        q.push({0,0});
        int cnt  = 0,ans=0; //cnt represent the current element to be searched in sorted array
        int f = h[cnt];
        int step = 0; //total steps taken
        while(!q.empty())
        {
            int n = q.size();
            while(n>0)
            {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                if(x<0 || y<0 || x>=c || y>=r || visit[y][x] || forest[y][x] == 0)
                {
                    n--;
                    continue;
                }
                if(forest[y][x] == f)
                {
                    forest[y][x] = 1;
                    memset(visit,0,sizeof(visit));
                    ans += step;
                    cnt++;
                    if(cnt == h.size()) return ans;
                    while(!q.empty()) q.pop();
                    n = 0,step=0;
                    f = h[cnt];
                }
                visit[y][x] = true;
                q.push({x+1,y});
                q.push({x-1,y});
                q.push({x,y+1});
                q.push({x,y-1});
                n--;
            }
            step++;
        }
        return -1;
    }
};