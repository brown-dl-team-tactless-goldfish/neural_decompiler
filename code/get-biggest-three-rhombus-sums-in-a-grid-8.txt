class Solution {
public:
    vector<int> getBiggestThree(vector<vector<int>>& grid) {
        const auto m = grid.size();
        const auto n = grid[0].size();
        
        vector<int> maxs;
        
        for (int i = 0; i != m; ++i) {
            for (int j = 0; j != n; ++j) {
                for (int d = 0; d != min(m, n); ++d) {
                    const auto s = calc(grid, i, j, d);
                    if (s != -1) {
                        insert(maxs, s);
                    }
                }
            }
        }
        return maxs;
    }
    
    void insert(vector<int>& maxs, int s) {
        if (count(maxs.cbegin(), maxs.cend(), s)) {
            return;
        }
        maxs.push_back(s);
        sort(maxs.begin(), maxs.end(), greater<>{});
        if (maxs.size() == 4) {
            maxs.pop_back();
        }
    }
    
	// rhombus sum of the rhombus with center `(i, j)` and side length `d`
    int calc(const vector<vector<int>>& grid, int i, int j, int d) {
        if (d == 0) {
            return grid[i][j];
        }
        
        if (!(j - d >= 0
              && i - d >= 0
              && j + d < grid[0].size()
              && i + d < grid.size())) {
            return -1;
        }
        
        int s = grid[i][j - d] + grid[i][j + d] + grid[i - d][j] + grid[i + d][j];
        for (int k = 1; k != d; ++k) {
            s += grid[i + k][j - d + k];
            s += grid[i + k][j + d - k];
            s += grid[i - k][j - d + k];
            s += grid[i - k][j + d - k];
        }
        return s;
    }
};