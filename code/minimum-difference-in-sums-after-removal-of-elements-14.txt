class Solution {
public:
    long long minimumDifference(vector<int>& nums)
    {
        priority_queue<int> l;// storing smallest n element from left
        priority_queue<int,vector<int>,greater<int>> r; // storing greatest n element from right
        long long  n=nums.size()/3,left=0,right=0;
        vector<long long > dp(nums.size()); //like dp;
        long long ans=LLONG_MAX;
        for(int i=nums.size()-1;i>=n;i--)
        {
            r.push(nums[i]);
            right+=nums[i];
            if(r.size()>n)
            {
                right-=r.top();
                r.pop();
            }
            if(r.size()==n)
            {
                dp[i]=right;
            }
        }
        for(int i=0;i<nums.size()-n;i++)
        {
            l.push(nums[i]);
            left+=nums[i];
            if(l.size()>n)
            {
                left-=l.top();
                l.pop();
            }
            if(l.size()==n)
            {
                ans=min(ans,left-dp[i+1]);
            }
        }
        return ans;
        
    }
};
// if you like the  solution plz upvote.