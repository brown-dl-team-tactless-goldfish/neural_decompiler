class Solution {
public:
    int r,c,k;
    int dp[50][50][11];
    vector<string> p;
    bool any(int a, int a1, int b, int b1){
        int i,j;
        for(i=a;i<a1;i++){
            for(j=b;j<b1;j++){
                if(p[i][j] == 'A')
                    return true;
            }
        }
        return false;
    }
    int doit(int a, int b, int k)
    {
        int i,j,i1,j1;
        int s1,s2;
        s1 = r-a;
        s2 = c-b;
        if (k==1){
            for(i=a;i<a+s1;i++){
                for(j=b;j<b+s2;j++){
                    if(p[i][j] == 'A')
                        return 1;
                }
            }
            return 0;
        }
        if (dp[a][b][k] != -1)
            return dp[a][b][k];
        int ans = 0;
        if (s1 > 1){
            for (i1=a;i1<a+s1-1;i1++){
                if (any(a, i1+1, b, b+s2))
                    ans = (ans+doit(i1+1, b, k-1))%1000000007;   
            }
        }
        if (s2 > 1){
            for (j1=b;j1<b+s2-1;j1++){
                if (any(a, a+s1, b, j1+1))
                    ans = (ans+doit(a, j1+1, k-1))%1000000007;
            }
        }
        dp[a][b][k] = ans;
        return ans;
    }
    int ways(vector<string>& pizza, int k1) 
    {
        k = k1;
        p = pizza;
        r = pizza.size();
        c = pizza[0].size();
        memset(dp,-1, sizeof(dp));
        return doit(0,0,k);
    }
};