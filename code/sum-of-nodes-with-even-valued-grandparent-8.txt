/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
        public int SumEvenGrandparent(TreeNode root)
        {
            int rollingSum = inOrderTraversal(root);
            Console.WriteLine(rollingSum);
            return rollingSum;
        }

        public int inOrderTraversal(TreeNode node)
        {
            int rollingLeftSum = 0;
            int rollingRightSum = 0;
            int rollingSum = 0;
            if (node != null)
            {
                rollingLeftSum += inOrderTraversal(node.left);
                visit(node, out rollingSum);
                rollingRightSum += inOrderTraversal(node.right);
            }

            return rollingRightSum + rollingLeftSum + rollingSum;
        }

        public void visit(TreeNode node, out int rollingSum)
        {
            rollingSum = 0;
            //Console.WriteLine(node.val);
            bool hasRightRightGrandChildren = (node.right != null && node.right.right != null);
            bool hasRightLeftGrandChildren = (node.right != null && node.right.left != null);
            bool hasLeftRightGrandChildren = (node.left != null && node.left.right != null);
            bool hasLeftLeftGrandChildren = (node.left != null && node.left.left != null);

            if (hasRightRightGrandChildren && node.val % 2 == 0)
            {
                Console.WriteLine("I {0} have a right right grandChild, {1}", node.val, node.right.right.val);
                rollingSum += node.right.right.val;
            }

            if (hasRightLeftGrandChildren && node.val % 2 == 0)
            {
                Console.WriteLine("I {0} have a right left grandChild, {1}", node.val, node.right.left.val);
                rollingSum += node.right.left.val;
            }
            if (hasLeftRightGrandChildren && node.val % 2 == 0)
            {
                Console.WriteLine("I {0} have a left right grandChild, {1}", node.val, node.left.right.val);
                rollingSum += node.left.right.val;
            }
            if (hasLeftLeftGrandChildren && node.val % 2 == 0)
            {
                Console.WriteLine("I {0} have a left left grandChild, {1}", node.val, node.left.left.val);
                rollingSum += node.left.left.val;
            }
        }
}