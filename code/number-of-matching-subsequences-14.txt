 TrieNode{
    int end;
    map<char, TrieNode*> ch;
    TrieNode(){
        end = 0;
    }
};
class Solution {
public:
    int numMatchingSubseq(string S, vector<string>& words) {
        TrieNode* root = new TrieNode;
        
        for(auto w : words){
            TrieNode* node = root;
            for(auto c : w){
                if(node->ch.count(c) == false){
                    node->ch[c] = new TrieNode;
                }
                node = node->ch[c];
            }
            node->end++;
        }
        //printNode(root);
        vector<queue<TrieNode*>> nlist(26);
        for(auto ch : root->ch){
            nlist[ch.first - 'a'].push(ch.second); 
        }
        
        int res = 0;
        for(auto c : S){
            int n = nlist[c - 'a'].size();
            for(int i = 0; i < n; i++){
                TrieNode* node = nlist[c - 'a'].front();
                nlist[c - 'a'].pop();
                res += node->end;
                for(auto ch : node->ch){
                    nlist[ch.first - 'a'].push(ch.second);
                }
            }
        }
        
        return res;
    }
};