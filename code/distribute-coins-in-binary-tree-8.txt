/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int ans;
    int sub[105];
    int coins[105];
    bool visited[105];
    void dfs(TreeNode *root,int num){
        if(root==NULL) return;
        if(visited[num]){
            int i=1;
            for(int i=1;i<105;i++){
                if(!visited[i]){
                    num = i;
                    break;
                }
            }
        }
        coins[num] = root->val;
        visited[num] = 1;
        root->val = num;
        dfs(root->left,num+1);
        dfs(root->right,num+1);
    }
    
    int dfs1(TreeNode *root){
        if(root==NULL) return 0;
        int cnt = 0;
        cnt += dfs1(root->left);
        cnt += dfs1(root->right);
        sub[root->val] = cnt;
        return cnt;
    }
    
    int dfs2(TreeNode *root){
        if(root==NULL) return 0;
        // cout<<root->val<<endl;
        int l = dfs2(root->left);
        int r = dfs2(root->right);
        // cout<<l<<" "<<r<<endl;
        ans += abs(l)+abs(r);
        int val = coins[root->val]-sub[root->val]-1+l+r;
        return val;
    }
    
    int distributeCoins(TreeNode* root) {
        ans = 0;
        if(root==NULL) return 0;
        memset(sub,0,sizeof(sub));
        memset(coins,0,sizeof(coins));
        memset(visited,0,sizeof(visited));
        dfs(root,1);
        dfs1(root);
        dfs2(root);
        return ans;
    }
};