struct cmp
{
    bool operator() (long long l, long long r)
    {
        return l > r;
    }
};
class Solution {
public:
    int n;
    int m;
    vector<vector<long long>> dp;
    vector<vector<long long>> dp1;
    bool valid(int x, int y)
    {
        if (x >= 0 && x < n && y >= 0 && y < m)
        {
            return true;
        }
        return false;
    }
    vector<int> getBiggestThree(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        dp = vector<vector<long long>>(n, vector<long long>(m, 0));
        dp1 = vector<vector<long long>>(n, vector<long long>(m, 0));
        //cout << "ep1" << endl;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                int x = i -1;
                int y = j -1;
                long long cur = grid[i][j];
                if (valid(x, y))
                {
                    cur += dp[x][y];
                }
                dp[i][j] = cur;
                
                
            }
        }
        
        for (int i = 0; i < n; i++)
        {
            for (int j = m -1; j >= 0; j--)
            {
                int x1 = i - 1;
                int y1 = j + 1;
                long long cur = grid[i][j];
                if (valid(x1, y1))
                {
                    cur += dp1[x1][y1];
                }
                dp1[i][j] = cur;
            }
        }
         //cout << "ep1" << endl;
        set<int> q;
        
        for (int l = 0; l < n; l += 2)
        {
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    int i1 = i + l;
                    int j1 = j;
                    int d = l / 2;
                    
                    int x = (i + i1) / 2;
                    int y = j - d;
                    
                    int x1 = x;
                    int y1 = j + d;
                    long long sum = 0;
                    if (l == 0)
                    {
                        sum = grid[i][j];
                    }
                    else if (
                        valid(i1, j1) &&
                        valid(x, y) &&
                        valid(x1, y1)
                    )
                    {
                        sum = dp[i1][j1] + dp[x1][y1] - dp[x][y] - dp[i][j]; 
                        sum += dp1[x][y] + dp1[i1][j1] - dp1[x1][y1] - dp1[i][j];
                        sum += grid[i][j] - grid[i1][j1];
                    }
                    if (sum > 0)
                    {
                        q.insert(sum);
                        if (q.size() > 3)
                        {
                            // int sm = *q.begin();
                            q.erase(q.begin());
                        }
                    }
                }
            }
        }

        int s = q.size();
        vector<int> ans;
        int i = 0;
        auto iter = q.rbegin();
        while (iter != q.rend())
        {
            i++;
            ans.push_back(*iter);
            iter++;
            if (i >=3)
            {
                break;
            }
        }
        
        return ans;
    }
};