class Solution {
public:
    int waysToSplit(vector<int>& nums) {
        //leftSum <= midSum <= 1/2(Sum - leftSum)
        int n = nums.size();
        //Build prefix sum array 
        vector<int> preSum(n + 1);
        int sum = 0;
        int res = 0;
        int mod = 1e9 + 7;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            preSum[i + 1] = sum;
        }
        //Iterate from 0 to n - 3(Because there are at least two elements for mid and right part)
        for(int i = 0; i < n - 2; i++){
            int leftSum = preSum[i + 1];
            int remain = preSum[n] - leftSum;
            if(remain < leftSum * 2) break;
            //Binary search the the position for the mid wall with lower_bound of 2 * leftSum and upper_bound of leftSum + 1/2 * remain
            int first = (int) (lower_bound(preSum.begin() + i + 2, preSum.end() - 1, leftSum * 2) - preSum.begin());
            int second = (int) (upper_bound(preSum.begin() + i + 2, preSum.end() - 1, leftSum + remain / 2) - preSum.begin() - 1);
            
            res += max(second - first + 1, 0);
            res %= mod;
        }
        return res;
    }
};