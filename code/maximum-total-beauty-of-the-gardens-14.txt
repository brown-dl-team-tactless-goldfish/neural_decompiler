typedef long long ll;
class Solution {
public:
    long long maximumBeauty(vector<int>& flowers, long long newFlowers, int target, int full, int partial) 
    {
        int n=flowers.size();
        sort(flowers.begin(),flowers.end());
        vector<ll>suffix(n,0),prefix(n,0);
        prefix[0]=flowers[0];
        for(int i=1;i<n;i++)prefix[i]=prefix[i-1]+flowers[i];
        suffix[n-1]=max(0,target-flowers[n-1]);
        for(int i=n-2;i>=0;i--)suffix[i]=suffix[i+1]+max(0,target-flowers[i]);
        ll ans=0;
        if(suffix[0]<=newFlowers)ans=1ll*n*full;
        for(int i=0;i<target;i++)
        {
            auto it=upper_bound(flowers.begin(),flowers.end(),i);
            if(it==flowers.begin()&&*it>i)
            {
                continue;
            }else if(it==flowers.end())
            {
                if(prefix[n-1]>newFlowers)continue;
                ll left=newFlowers-(1ll*i*n-prefix[n-1]);
                if(left<0)continue;
                ll need=target-i;
                ll have=min(n-1ll,left/need);
                ans=max(ans,1ll*i*partial+1ll*have*full);
            }else
            {
                if(*it>i)it--;
                int idx=it-flowers.begin();
                ll left=newFlowers-(1ll*i*(idx+1)-prefix[idx]);
                if(left<0)continue;
                auto it2=upper_bound(suffix.rbegin(),suffix.rend(),left);
                if(it2==suffix.rbegin())
                {
                    ans=max(ans,1ll*i*partial);
                }else if(it2==suffix.rend())
                {
                    ans=max(ans,1ll*(n-1)*full+1ll*partial*i);
                }else
                {
                    if(*it2>left)it2--;
                    int idx2=it2-suffix.rbegin();
                    idx2=n-1-idx2;
                    if(idx2>idx)ans=max(ans,1ll*(n-idx2)*full+1ll*partial*i);
                    else
                    {
                        left-=suffix[idx+1];
                        ll need=target-i;
                        ll have=min(1ll*idx,1ll*left/need);
                        ans=max(ans,1ll*(have+n-idx-1)*full+1ll*partial*i);
                    }
                }
            }
        }
        return ans;
    }
};