class Solution {
    struct compare {
        bool operator() (vector<int>v1, vector<int>v2) {
            return v1[1] < v2[1] || (v1[1] == v2[1] && v1[0] < v2[0]);
        }
    };
public:
    vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance) {
        
        int n = restaurants.size();
        
        vector<vector<int>>filter;
        for (int i = 0; i < n; i++) {
            if ((!veganFriendly || restaurants[i][2] == veganFriendly) && restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance)
                filter.push_back(restaurants[i]);
        }
        
        priority_queue<vector<int>, vector<vector<int>>, compare>pq(filter.begin(), filter.end());
        
        vector<int>res;
        while (!pq.empty()) {
            vector<int>t = pq.top();
            res.push_back(t[0]);
            pq.pop();
        }
        
        return res;
    }
};