typedef struct Node {
    int city;
    int forward;
    struct Node *next;
} Node;

Node **buildAdjacencyList(int numCities, int **roads, int roadSize) {
    int i;
    Node *n, **cities = malloc((numCities) * sizeof(Node*));
    for (i = 0; i < numCities; ++i) {
        cities[i] = malloc(sizeof(Node));
        cities[i]->city = i;
        cities[i]->forward = 0;
        cities[i]->next = NULL;
    }
    for (i = 0; i < roadSize; ++i) {
        n = malloc(sizeof(Node));
        n->city = roads[i][1];
        n->forward = 1;
        n->next = cities[roads[i][0]]->next;
        cities[roads[i][0]]->next = n;
        n = malloc(sizeof(Node));
        n->city = roads[i][0];
        n->forward = 0;
        n->next = cities[roads[i][1]]->next;
        cities[roads[i][1]]->next = n;
	}
    return cities;
}

void dfs(int city, Node **adjList, int *reverses, int *visited) {
	if (!visited[city]) {
		visited[city] = 1;
		Node *n = adjList[city]->next;
		while (n != NULL)  {
			if( !visited[n->city]) {
				*reverses += n->forward;
			}
			dfs(n->city, adjList, reverses, visited);
            n = n->next;
        }
    }
}


int minReorder(int n, int** connections, int connectionsSize, int* connectionsColSize){
    Node **adjacencyList = 
        buildAdjacencyList(n, connections, connectionsSize);
    int visited[n];
    for (int i=0; i < n; ++i) {
		visited[i] = 0;
	}
    int reversals = 0;
    dfs(0, adjacencyList, &reversals, visited);
    return reversals;
}
