int cmpfunc(const void* a, const void* b){
    return *(int*)b - *(int*)a;
}
long long minSumSquareDiff(int* nums1, int nums1Size, int* nums2, int nums2Size, int k1, int k2){
    int n = nums1Size;
    int k = k1 + k2 ;
    int* diff = malloc(n * sizeof(int));
    for(int i = 0; i < n; i++){
        diff[i] = abs(nums1[i] - nums2[i]);
    }
    qsort(diff, n, sizeof(int), cmpfunc) ;
    long long* presum = malloc(n * sizeof(long long)) ;
    presum[0] = diff[0] ;
    for(int i = 1; i < n; i++){
        presum[i] = presum[i-1] + diff[i] ;
    }
    if(presum[n-1] <= k)
        return 0 ;
    int p = 0 ;
    while(p < n && (presum[p] - (long long)diff[p]*(p+1)) <= k )
        p++ ;
    p-- ;

    int left = k - (presum[p] - (long long)diff[p]*(p+1)) ;
    int extra = left / (p+1) ;
    int r = left % (p+1) ;
    for(int i = 0; i < r ; i++)
        diff[i] = diff[p] - (extra + 1) ;
    for(int i = r; i <= p; i++)
        diff[i] = diff[p] - extra ;
    long long ans = 0; 
    for(int i = 0; i < n; i++)
        ans += (long long)diff[i] * diff[i] ;
    return ans;
}