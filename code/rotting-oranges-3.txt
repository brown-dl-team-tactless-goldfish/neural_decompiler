
struct node {
        int r;
        int c;
};

bool is_all_rotten(int **grid, int w, int h)
{
        int i, j;
        for (i = 0; i < h; i++) {
                for (j = 0; j < w; j++)
                        if (grid[i][j] == 1)
                                return false;
        }
        return true;
}

void rot_around(int **grid, int w, int h, int r, int c, struct node *q, int *head)
{
        if (r > 0 && grid[r - 1][c] == 1) {
                (*head)++;
                q[*head].r = r - 1;
                q[*head].c = c;
                grid[r - 1][c] = 3; // stat 3, rotting
        }
        if (r + 1 <  h && grid[r + 1][c] == 1) {
                (*head)++;
                q[*head].r = r + 1;
                q[*head].c = c;
                grid[r + 1][c] = 3;
        }
        if (c > 0 && grid[r][c - 1] == 1) {
                (*head)++;
                q[*head].r = r;
                q[*head].c = c - 1;
                grid[r][c - 1] = 3;
        }
        if (c + 1 < w && grid[r][c + 1] == 1) {
                (*head)++;
                q[*head].r = r;
                q[*head].c = c + 1;
                grid[r][c + 1] = 3;
        }
}


int orangesRotting(int** grid, int gridSize, int* gridColSize)
{
        int h = gridSize;
        int w = gridColSize[0];
        struct node q[100];
        int head = -1;
        int tail = -1;
        
        int i, j;
        for (i = 0; i < h; i++) {
                for (j = 0; j < w; j++) {
                        if (2 == grid[i][j])
                                rot_around(grid, w, h, i, j, q, &head);
                }
        }
        
        if (head == -1)
                if (is_all_rotten(grid, w, h))
                        return  0;
                else
                        return -1;
        
        int m = 0;
        while (tail < head) {
                ++m;
                int tmp_tail = tail;
                int tmp_head = head;
                while (++tmp_tail <= tmp_head) {
                        rot_around(grid, w, h, q[tmp_tail].r, q[tmp_tail].c, q, &head);
                }
                tail = tmp_head;
        }
        
        if (is_all_rotten(grid, w, h))
                return m;
        return -1;
}