class TimeLimitedCache {
    c // key->value map
    timeouts // key->timeoutID map

    constructor() {
        this.c = {}
        this.timeouts = {}
    }

    set(key: number, value: number, duration: number): boolean {
        // Track whether we already had this key
        const out = key in this.c

        // Set the value and schedule the expiration
        this.c[key] = value
        const id = setTimeout(() => {
            delete this.c[key]
        }, duration)

        // Cancel any in-flight expiration
        if (key in this.timeouts) {
            clearTimeout(this.timeouts[key])
        }

        // Track this expiration for a future call to this.set
        // with the same key
        this.timeouts[key] = id

        // Return whether we initially had a value for this key
        return out
    }

    get(key: number): number {
        if (!(key in this.c)) {
            return -1
        }
        return this.c[key]
    }

	count(): number {
        return Object.keys(this.c).length
    }
}