class Solution {
public:
    vector<vector<int>> palindromePairs(vector<string>& words) {
        auto checkPalindrome = [](string s, int dir){
            long long forward = 0, backward = 0, p = 101, M = 1e9+7, f = 1, n = size(s);
            vector<bool> ok(n);
            for (int j = dir==1?0:n-1; ~j && j < n; j += dir){
                int c = s[j] - 'a' + 1;
                forward += f * c % M;
                backward = p * backward + c;
                f = f * p % M;
                backward %= M;
                forward %= M;
                ok[j] = backward == forward;
            }
            return ok;
        };

        vector<array<int, 26>> trie(2);
        vector<vector<int>> palin(2);
        vector<vector<int>> end(2);
        int last = 1;
        for (int i = 0; i < words.size(); ++i){
            vector<bool> ok = checkPalindrome(words[i], 1);
            int cur = 1;
            for (int j = (int)size(words[i])-1; ~j; --j){
                if (!trie[cur][words[i][j]-'a']){
                    trie[cur][words[i][j]-'a']=++last;
                    trie.emplace_back();
                    palin.emplace_back();
                    end.emplace_back();
                }
                if (ok[j]){
                    palin[cur].push_back(i);
                }
                cur = trie[cur][words[i][j]-'a'];
            }
            end[cur].push_back(i);
        }
        vector<vector<int>> ans;
        for (int i = 0; i < size(words); ++i){
            vector<bool> ok = checkPalindrome(words[i], -1);
            int cur = 1;
            for (int j = 0; j < size(words[i]) && cur; ++j){
                if (ok[j]) for (int e : end[cur]){
                    ans.push_back({i, e});
                }
                cur = trie[cur][words[i][j]-'a'];
            }
            if (cur) for (int j : palin[cur]){
                ans.push_back({i, j});
            }
            if (cur) for (int j : end[cur]) if (i != j){
                ans.push_back({i, j});
            }
        }
        return ans;
    }
};