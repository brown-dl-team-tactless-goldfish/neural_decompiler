struct hash_entry {
    int id;            /* we'll use this field as the key */
    int frequency;     // frequency of charecters
    UT_hash_handle hh; /* makes this structure hashable */
};

struct hash_entry *users = NULL;

void add_user(struct hash_entry *s) {
    HASH_ADD_INT(users, id, s);
}
 
struct hash_entry *find_user(int user_id) {
    struct hash_entry *s;
    HASH_FIND_INT(users, &user_id, s);
    return s;
}
 
void delete_user(struct hash_entry *user) {
    HASH_DEL(users, user);  
}

int by_id(const struct hash_entry *a, const struct hash_entry *b) {
    return (b->frequency - a->frequency);
}
void sort_by_id() {
    HASH_SORT(users, by_id);
}

char * frequencySort(char * str){
int i=0,count;
struct hash_entry *s, *find;
char *arr;
arr=malloc(sizeof(char)*(strlen(str)+1));
while(str[i]!='\0')
{
    s=malloc(sizeof(struct hash_entry));
    s->id=str[i]-'A';
    s->frequency=1;
    find=find_user(s->id);
    if(find==NULL)  // if the give charecter is added for the first time
        add_user(s);
    else            // if the charecter already exists in the hashmap
    {
        s->frequency=find->frequency+1; // updating the new element and deleting the old
        delete_user(find);
        add_user(s);
    }
    i++;
}
    sort_by_id(); // sorting the hashmap by the frequency of characters
    i=0;
    for (s = users; s != NULL; s = s->hh.next) //adding elements in the returning array 
    {
        count=s->frequency;
        while(count--)
            arr[i++]=s->id+'A';
    }
    arr[i]='\0';
    users=NULL; // instead of deleting the elements of hashmap setting users to NULL wastes memory but faster and clean(does the job :)
    return arr;
}