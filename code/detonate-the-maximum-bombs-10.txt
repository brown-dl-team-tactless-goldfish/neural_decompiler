class Solution {
public:
    int maximumDetonation(vector<vector<int>>& b) {
        int N = b.size();
        vector<vector<int>> g(N, vector<int>());
        for(int i = 0; i < N; i++) {
            for(int j = i+1; j < N; j++) {
                long dist = (long)(b[i][0]- b[j][0])*(b[i][0]- b[j][0]) + (long)(b[i][1]- b[j][1])*(b[i][1]- b[j][1]);
                long ri = (long)b[i][2]*b[i][2], rj = (long)b[j][2]*b[j][2];
                if(ri >= dist) {
                    g[i].push_back(j);
                }
                if(rj >= dist) {
                    g[j].push_back(i);
                }
            }
        }

        auto dfs = [&](auto&& self, int i, bitset<100>& seen)->int {
            seen[i] = 1;
            for(auto nxt : g[i]) {
                if(!seen[nxt]) {
                    self(self, nxt, seen);
                }
            }
            return 0;
        };

        int ans = 0;
        for(int i = 0; i < N; i++) {
            bitset<100> seen= {};
            dfs(dfs, i, seen);
            ans = max(ans, (int)seen.count());
        }
        return ans;        
    }
};