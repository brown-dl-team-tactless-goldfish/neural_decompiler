int cmp(const void* a, const void* b){
    return *(char*)a - *(char*)b;
}

typedef struct _data{
    char c;
    int count;
}data;

char * sortString(char * s){
    int n = strlen(s) ;
    qsort(s, n, sizeof(char), cmp);
    data** map = calloc(26 , sizeof(data*));
    int idx = 0;
    map[idx] = malloc(sizeof(data));
    map[idx]->c = s[0] ;
    map[idx]->count = 1;
    for(int i = 1; i < n; i++){
        if( s[i] == s[i-1] )
            map[idx]->count++;
        else{
            idx++;
            map[idx] = malloc(sizeof(data));
            map[idx]->c = s[i];
            map[idx]->count = 1;
        }
    }
    idx++;
    char* ans = malloc( (n+1) * sizeof(char) ) ;
    ans[n] = '\0' ;
    int p = 0;
    bool reverse = false;
    while( p < n ){
        if(reverse == false){
            for(int i = 0; i < idx; i++){
                if(map[i]->count){
                    ans[p] = map[i]->c ;
                    map[i]->count--;
                    p++;
                }
            }
            reverse = true;
        }
        else{
            for(int i = idx - 1; i >= 0; i--){
                if(map[i]->count){
                    ans[p] = map[i]->c ;
                    map[i]->count--;
                    p++;
                }
            }
            reverse = false;
        }
    }
    for(int i = 0; i < 26 ;i++){
        if(map[i] != NULL)
            free(map[i]) ;
    }
    free(map) ;
    return ans;
}