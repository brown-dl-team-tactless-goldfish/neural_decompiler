char ** wordSubsets(char ** words1, int words1Size, char ** words2, int words2Size, int* returnSize){
    char aacCharCounts[26], aacCharCountsTmp[26];
    memset(aacCharCounts, 0, 26*sizeof(char));

    // parse words2 first can store all necessary subset char into aacCharCounts
    short sWordsSize = words2Size;
    for(short i=0; i<sWordsSize; i++)
    {
        memset(aacCharCountsTmp, 0, 26*sizeof(char));

        while(*words2[i])
        {
            aacCharCountsTmp[(*words2[i])-'a']++;

            words2[i]++;
        }

        for(char j=0; j<26; j++)
        {
            if(aacCharCountsTmp[j] > aacCharCounts[j]) aacCharCounts[j] = aacCharCountsTmp[j];
        }
    }

    // trace words1
    sWordsSize = words1Size;
    for(short i=0; i<sWordsSize; i++)
    {
        memcpy(aacCharCountsTmp, aacCharCounts, 26*sizeof(char));

        char cStrLen = strlen(words1[i]);
        for(char j=0; j<cStrLen; j++) aacCharCountsTmp[words1[i][j]-'a']--;

        for(char j=0; j<26; j++)
        {
            if(aacCharCountsTmp[j] > 0)
            {
                words1[i--] = words1[--sWordsSize];
                break;
            }
        }
    }

    // return final sWordsSize into *returnSize
    *returnSize = sWordsSize;

    return words1;
}