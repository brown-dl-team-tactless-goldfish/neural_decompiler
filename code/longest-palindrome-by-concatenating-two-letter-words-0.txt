int longestPalindrome(char ** words, int wordsSize){
    int n = wordsSize;
    int N = 10 * n;
    int** hash = calloc(N , sizeof(int*)) ;
    int* doubleAlpha = calloc(26, sizeof(int));
    int ans = 0;
    for(int i = 0; i < n; i++){
        if(words[i][0] == words[i][1]){
            doubleAlpha[words[i][0] - 'a']++;
            continue;
        }
        int val1 = (words[i][0] - 'a') *100 + words[i][1] - 'a' ; //org
        int val2 = (words[i][1] - 'a') *100 + words[i][0] - 'a' ; //reverse
        int d = val2;
        while(1){
            if(hash[d % N] == NULL){
                int d1 = val1;
                while(1){
                    if(hash[d1% N] == NULL){
                        hash[d1% N] = malloc(2 * sizeof(int)) ;
                        hash[d1% N][0] = val1;
                        hash[d1% N][1] = 1;
                        break;
                    }
                    else if(hash[d1% N][0] == val1){
                        hash[d1% N][1]++;
                        break;
                    }
                    else
                        d1++;
                }
                break;
            }
            else if(hash[d % N][0] == val2){
                hash[d % N][1]--;
                if(hash[d % N][1] == 0)
                    hash[d % N][0] = 0;
                ans += 4;
                break;
            }
            else
                d++;
        }
    }
    bool flag = false;
    for(int i = 0; i < 26; i++){
        ans += (doubleAlpha[i]/2) * 4 ;
        if(doubleAlpha[i] % 2)
            flag = true;
    }
    if(flag)
        ans += 2;
    free(doubleAlpha);
    for(int i = 0; i < N; i++){
        if(hash[i])
            free(hash[i]) ;
    }
    free(hash);
    return ans;
}