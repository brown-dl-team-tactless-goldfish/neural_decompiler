    int minimumDeletions(vector<int>& nums) {
        auto max_it = std::max_element(nums.begin(), nums.end());
        auto min_it = std::min_element(nums.begin(), nums.end());
        
        // delete both from left
        int left_max = std::distance(nums.begin(), max_it) + 1;
        int left_min = std::distance(nums.begin(), min_it) + 1;
        int both_left = 0;
        if  (left_max>left_min) {
            both_left = left_max;
        } else {
            both_left = left_min;
        }
        
        // delete both from right
        int both_right = 0;
        int right_max = std::distance(max_it, nums.end());
        int right_min = std::distance(min_it, nums.end());
        if (right_max>right_min) {
            both_right = right_max;
        } else {
            both_right = right_min;
        }
        
        // delete from either end
        // 1) delete left from left, right from right
        int a = left_min + right_max;
        // 2) delete right from left and left from right
        int b = left_max + right_min;
        return std::min(std::initializer_list<int>{both_left, both_right, a, b});
    }