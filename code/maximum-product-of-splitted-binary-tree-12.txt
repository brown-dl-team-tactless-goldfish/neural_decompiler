/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxProduct(TreeNode* root) {
        int mod = 1e9 + 7;
        
        function<int(TreeNode*)> accumulate = 
        [&](TreeNode* root) {
            if (root) {
                int l = accumulate(root->left);
                int r = accumulate(root->right);
                return root->val += l + r;
            }
            return 0;
        };
        
        long long sum = accumulate(root);

        function<long long(TreeNode*)> maxPdt = 
        [&](TreeNode* root) {
            if (root)
            {
                long long l = maxPdt(root->left);
                long long r = maxPdt(root->right);
                long long c = root->val * (sum - root->val);
                return max(c, max(l, r));
            }
            return 0LL;
        };
        
        return maxPdt(root) % mod;
    }
};