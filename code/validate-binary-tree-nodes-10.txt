class Solution {
public:
    int flag = 0;

    void dfs(int v, vector<int>& leftChild, vector<int>& rightChild, vector<int>& vis)
    {
        vis[v] = 1;
        if(leftChild[v]!=-1)
        {
            if(vis[leftChild[v]]==1)
            {
                flag = 1;
                return;
            }
            else dfs(leftChild[v], leftChild, rightChild, vis);
        }
        
        if(rightChild[v]!=-1)
        {
            if(vis[rightChild[v]]==1)
            {
                flag = 1;
                return;
            }
            else dfs(rightChild[v], leftChild, rightChild, vis);
        }
    }
    
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        int root = 0;
        
        vector<int> vis(n,0);
        vector<int> in(n,0);
        for(int i=0;i<n;i++)
        {
            if(leftChild[i]!=-1) in[leftChild[i]]++;
            if(rightChild[i]!=-1) in[rightChild[i]]++;
        }
        
        int c = 0;
        for(int i=0;i<n;i++)
        {
            if(in[i]==0)
            {
                c++;
                root = i;
            }
        }
        
        if(c!=1) return false;
        
        dfs(root, leftChild, rightChild, vis);
        
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0) return false;
        }
        if(flag==1) return false;
        return true;
    }
};