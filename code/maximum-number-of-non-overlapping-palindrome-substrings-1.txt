class Solution {
public:
    unordered_map<int,int> dp; // ind , ans
    int sol(string &s, int& k,vector<vector<bool>> &pal, int ind){
        if(ind == s.length()) return 0;
        if(dp.find(ind) != dp.end()) return dp[ind];
        int ans = 0;
        // we only have to solve for at least k length and palindrome
        ans = max(ans,sol(s,k,pal,ind+1));
        for(int i=ind;i<s.length();i++){
            if(pal[ind][i] && i >= ind+k-1){ ans = max(ans, 1 + sol(s,k,pal,i+1)); break; }
        }
        return dp[ind] = ans;
    }

    int maxPalindromes(string s, int k) {
        vector<vector<bool>> pal(s.length(),vector<bool>(s.length(),0));
        for(int i=0;i<s.length();i++){
            for(int r = 0, c = i; c < s.length(); c++, r++){
                if(r == c || (s[r] == s[c] && (pal[r+1][c-1] || r+1 >= c-1))) pal[r][c] = 1;
            }
        }
        // Now we have palindromes
        return sol(s,k,pal,0);
    }
};