/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
void calculateSum(struct TreeNode* root, int sum, 
                int* returnSize, int** returnColumnSizes,
                int tmpSum,int* tmp, int tmpCnt, int** retArr)
{
    if(root==NULL)
        return;
    /* update tmpSum, tmp, tmpCnt based on root->val */
    tmp[tmpCnt]=root->val;
    tmpSum+=root->val;
    tmpCnt++;
    if(root->left==NULL && root->right==NULL){
        /* check if tmpSum matches sum; if so,
        update returnSize, returnColumnSizes, retArr */
        if(sum==tmpSum){
            (*returnColumnSizes)[*returnSize]=tmpCnt;
            int *tmpArr=calloc((tmpCnt+1),sizeof(int));
            memcpy(tmpArr,tmp,tmpCnt*sizeof(int));
            retArr[*returnSize]=tmpArr;
            (*returnSize)++;
        }
        return;
    }

    calculateSum(root->left, sum, returnSize, returnColumnSizes,
                tmpSum, tmp, tmpCnt, retArr);
    calculateSum(root->right, sum, returnSize, returnColumnSizes,
                tmpSum, tmp, tmpCnt, retArr);
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#define MAXRETARYSIZE 6000
int** pathSum(struct TreeNode* root, int sum, int* returnSize, int** returnColumnSizes){
    int tmpCnt=0;
    int tmp[5000];
    int tmpSum=0;
    int **retArr=calloc(MAXRETARYSIZE,sizeof(int *));
    *returnColumnSizes=calloc(MAXRETARYSIZE,sizeof(int));
    *returnSize=0;

    calculateSum(root, sum, returnSize, returnColumnSizes,
                tmpSum, tmp, tmpCnt, retArr);

    return retArr;
}

