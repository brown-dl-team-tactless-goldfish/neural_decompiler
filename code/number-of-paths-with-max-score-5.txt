class Solution {
    const int mod = 1000000007;
public:
    vector<int> pathsWithMaxScore(vector<string>& board) {
        size_t n = board.size();
        board[0][0] = '0';
        board[n-1][n-1] = '0';
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(2,0)));
        dp[n-1][n-1][1] = 1;
        
        // last col
        size_t r = n - 2;
        do {
            if (board[r][n-1] == 'X')
                break;
            dp[r][n-1][0] = (dp[r+1][n-1][0] + board[r][n-1] - '0') % mod;
            dp[r][n-1][1] = 1;
        } while (r --);

        // last row
        size_t c = n - 2;
        do {
            if (board[n-1][c] == 'X')
                break;
            dp[n-1][c][0] = (dp[n-1][c+1][0] + board[n-1][c] - '0') % mod;
            dp[n-1][c][1] = 1;
        } while (c --);
        
        // remaining rows and cols
        r = n - 2;
        do {
            c = n - 2;
            do {
                if (board[r][c] == 'X')
                    continue;
                
                const vector<int>& v1 = dp[r+1][c]; // down
                const vector<int>& v2 = dp[r][c+1]; // right
                const vector<int>& v3 = dp[r+1][c+1]; // bottom right

                dp[r][c] = v1;

                if (v2[0] > dp[r][c][0])
                    dp[r][c] = v2; // a better sol
                else if (v2[0] == dp[r][c][0])
                    dp[r][c][1] += v2[1]; // a new way

                if (v3[0] > dp[r][c][0])
                    dp[r][c] = v3; // a better sol
                else if (v3[0] == dp[r][c][0])
                    dp[r][c][1] += v3[1]; // a new way

                dp[r][c][0] = (dp[r][c][0]  + board[r][c] - '0') % mod;
                dp[r][c][1] = dp[r][c][1] % mod;
            } while (c--);
        } while (r--);
        
        if (dp[0][0][1] == 0)
            return {0,0};
        return dp[0][0];
    }
};