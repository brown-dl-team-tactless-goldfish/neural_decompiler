class Solution {
public:
    double fact(int n)
    {
        double ret=1;
        for(int i=2;i<=n;i++)
            ret=ret*i;
        return ret;
    }
    
    double perm(vector<int> &A) {
        double ans = 1;
        int sum=accumulate(A.begin(),A.end(),0);
        double ret=fact(sum);
        for(int i=0;i<A.size();i++)
            ret/=fact(A[i]);
        return ret;
    }
    int sum=0;
    
    double dfs(vector<int>& A,vector<int>& a,vector<int>& b,int suma,int sumb,int i)
    {
        if(suma>sum/2||sumb>sum/2)
            return 0;
        if(i==A.size())
        {
            int cnta=0;
            int cntb=0;
            for(int j=0;j<i;j++)if(a[j])cnta++;
            for(int j=0;j<i;j++)if(b[j])cntb++;
            if(cnta==cntb)
                return perm(a)*perm(b);
            else
                return 0;
        }
        double ans=0;
        for(int j=0;j<=A[i];j++)
        {
            a[i]=j;
            b[i]=A[i]-j;
            ans+=dfs(A,a,b,suma+a[i],sumb+b[i],i+1);
        }
        return ans;
    }

    double getProbability(vector<int>& A) {
        int suma=0;
        int sumb=0;
        sum=accumulate(A.begin(),A.end(),0);
        vector<int> a(A.size());
        vector<int> b(A.size());
        return dfs(A,a,b,0,0,0)/perm(A);
    }
};