void dfs(int **graph, int n, int i, int *colors, int c)
{
    colors[i] = c;
    for (int j = 0; j < n; j++ ) {
        if (graph[i][j] == 1 && !colors[j]) {
           dfs(graph, n, j, colors, c);
        }
    }   
}

int minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize){
    
    int *colors, n = graphSize, c = 1, *size, i, *count, ans = -1;
    
    if (!graph || !graphSize || !initial || !initialSize)
        return -1;
    
    // color each node
    colors = calloc(1, n * sizeof(int));
    for (i = 0; i < n; i++) {
        if (!colors[i])
            dfs(graph, n, i, colors, c++);
    }
    
    // Find how many nodes of each color in the graph
    size = calloc(1, c * sizeof (int));
    for (i = 0; i < n; i++) {
        size[colors[i]]++;
    }
    
    // Find occurence of each color in the initial
    count = calloc(1, c * sizeof (int));
    for (i = 0; i < initialSize; i++) {
        count[colors[initial[i]]]++;
    }
    
    /* find unique colors with max size value */
    for (i = 0; i < initialSize; i++) {
        if (count[colors[initial[i]]] == 1) {
            if (ans == -1 || size[colors[initial[i]]] > size[colors[ans]] ||
                (size[colors[initial[i]]] == size[colors[ans]] && initial[i] < ans))
                ans = initial[i];
        }
    }
    
    if (ans == -1)
        for (i = 0; i < initialSize; i++) {
            if (ans == -1)
                ans = initial[i];
            else if (initial[i] < ans)
                ans = initial[i];
        }
                
    
    return ans;
       

}