class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int n = nums.size();
        if(n == 0 || n == 1)return 0;
        // maximum power of 2 required?
        int mx = *max_element(nums.begin(), nums.end());
        long long base = 1;
        int count = 0;
        while(mx){
            count++;
            mx  = mx/2;
        }
        // so count -> is the requried number of bits.
        vector<int>cnt(count, 0);
        for(auto&it:nums){
            int temp = it;
            int idx = 0;
            while(temp){
                if(temp&1){
                    cnt[idx]++;
                }
                ++idx;
                temp = temp>>1;
            }
        }
        
        int total = 0;
        for(int i = 0; i<count; i++){
            if(cnt[i] == 0)continue;
            else{
                total += (n-cnt[i])*cnt[i];
            }
        }
        return total;
    }
};