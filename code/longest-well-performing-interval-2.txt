class Solution {
public:
    using VI = vector< int >;
    using Map = unordered_map< int,int >;
    int longestWPI( VI& A, Map M={}, int ans=0 ){
        for( auto j{ 0 }, sum{ 0 }; j < A.size(); ++j ){
            sum += ( A[ j ] > 8 )? 1 : -1;
            if( 0 < sum )
                ans = j+1; // asbsolute, from index i == 0 inclusive to index j inclusive
            if( M.find( sum ) == M.end() )
                M[ sum ] = j; // store the index of the first occurrence of each unique sum
            if( M.find( sum-1 ) != M.end() )
                ans = max( ans, j - M[ sum-1 ] ); // relative from index i == M[ sum-1 ] non-inclusive to index j inclusive ( j == M[ sum ] for each first occurrence of sum )
        }
        return ans;
    }
};