class Solution {
    bool dfs(int mid, int i, vector<int>& cookies, int k, vector<int> &children)
    {
        if(i == cookies.size())
            return true;
        for(int j = 0; j < k; j++)
        {
            if(children[j] + cookies[i] <= mid)
            {
                children[j] += cookies[i];
                if(dfs(mid, i+1, cookies, k, children))
                {
                    children[j] -= cookies[i];
                    return true;
                }
                children[j] -= cookies[i];
            }
            if(children[j] == 0)
                return false;
        }
        return false;
    }
public:
    int distributeCookies(vector<int>& cookies, int k) {
        sort(cookies.begin(), cookies.end());
        int l = *max_element(cookies.begin(), cookies.end());
        int r = accumulate(cookies.begin(), cookies.end(), 0);
        vector<int> children(k,0);
        int ans = r;
        while(l <= r)
        {
            int mid = l + (r-l)/2;
            if(dfs(mid, 0, cookies, k, children))
            {
                ans = mid;
                r = mid-1;
            }
            else
            {
                l = mid+1;
            }
        }
        return ans;
    }
};