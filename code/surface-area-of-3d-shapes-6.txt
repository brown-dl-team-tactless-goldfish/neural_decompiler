class Solution {
public:
    int surfaceArea(vector<vector<int>>& grid) {
        ComputeIndividual(grid);
        ComputeGlue(grid);
        return sum_surface_ - glue_surface_;
    }
private:
    int sum_surface_ = 0;
    int glue_surface_ = 0;
    
    std::vector<int> dx_ = {-1, 0, 1, 0};
    std::vector<int> dy_ = {0, -1, 0, 1};
    
    void ComputeIndividual(vector<vector<int>>& grid) {
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                sum_surface_ += (grid[i][j]) ? 2 : 0;
                sum_surface_ += 4 * grid[i][j];
            }
        }
    }
    
    void ComputeGlue(vector<vector<int>>& grid) {
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                for (int k = 0; k < dx_.size(); ++k) {
                    int r = i + dy_[k];
                    int c = j + dx_[k];
                    
                    if (r < 0 || r >= grid.size() ||
                        c < 0 || c >= grid[0].size()) continue;
                    
                    glue_surface_ += std::min(grid[i][j], grid[r][c]);
                }
            }
        }
    }
};