class Solution {
public:
    vector<long long> distance(vector<int>& nums) {
        unordered_map<int, long long> leftFreq, rightFreq, leftSum, rightSum, lastOccurrence;

        // Populate rightFreq, rightSum
        for (int i = 0; i < nums.size(); ++i) {
            if (!lastOccurrence.count(nums[i])) {
                lastOccurrence[nums[i]] = i;
            } else {
                rightFreq[nums[i]]++;
                rightSum[nums[i]] +=  i - lastOccurrence[nums[i]];
            }
        }

        vector<long long> res;
        for (int i = 0; i < nums.size(); ++i) {
            leftSum[nums[i]] = leftSum[nums[i]] + (i - lastOccurrence[nums[i]]) * (leftFreq[nums[i]]);
            rightSum[nums[i]] = rightSum[nums[i]] - (i - lastOccurrence[nums[i]]) * (rightFreq[nums[i]] + 1);
            leftFreq[nums[i]]++;
            rightFreq[nums[i]]--;
            lastOccurrence[nums[i]] = i;
            res.push_back(leftSum[nums[i]] + rightSum[nums[i]]);
        }

        return res;
    }
};