class Solution:
    def minSessions(self, tasks: List[int], sessionTime: int) -> int:
        
        n = len(tasks)
        #use greddy to find upper bond
    
        print ("tasks = ", tasks)
        
        sessions = []
        
        for t in tasks:
            print ("t = ", t)
            print ("sessions = ", sessions)
            
            if (sessions != [] and sessionTime >= sessions[-1] +  t):
                print ("if")
                sessions[-1] += t                

            else:
                print ("else")
                sessions.append(t)
                
        print ("sessions = ", sessions)
        
        self.res =  len(sessions)
    
        #backtracking
        def helper(curIdx, curSessions):
            
            if (self.res < len(curSessions)):
                return
            
            if (curIdx == n):
                self.res = min(self.res, len(curSessions))
                return
                
            t = tasks[curIdx]
            
            #create new session
            helper(curIdx + 1, curSessions +[t])
            
            #use old session
            tmpN = len(curSessions)
            for i in range(tmpN):
                if (t +curSessions[i] <= sessionTime):
                    helper(curIdx+1, curSessions[:i] + [curSessions[i] + t] + curSessions[i+1:])
                    
        helper(0, [])
        
        return self.res