    public class Solution
    {

        public int MinimumTimeRequired(int[] jobs, int k)
        {
            int[,] dp = new int[1 << jobs.Length, k + 1];

            int[] sums = new int[1 << jobs.Length];
            IList<int>[] mask2Candidates = new IList<int>[1 << jobs.Length];

            for (int i = 0; i < 1 << jobs.Length; i++)
            {
                mask2Candidates[i] = new List<int>();

                for (int j = 0; j < 1 << jobs.Length; j++)
                {
                    if ((i & j) == 0)
                    {
                        mask2Candidates[i].Add(j);
                    }
                }
            }

            for (int i = 0; i < 1 << jobs.Length; i++)
            {
                for (int j = 0; j < jobs.Length; j++)
                {
                    if ((i & (1 << j)) != 0)
                    {
                        sums[i] += jobs[j];
                    }
                }
            }

            for (int i = 0; i < 1 << jobs.Length; i++)
            {
                for (int j = 0; j <= k; j++)
                {
                    dp[i, j] = int.MaxValue;
                }
            }

            for (int i = 0; i <= k; i++)
            {
                dp[(1 << jobs.Length) - 1, i] = 0;
            }

            for (int remainingWorkers = 1; remainingWorkers <= k; remainingWorkers++)
            {
                for (int assignedJobs = 0; assignedJobs < 1 << jobs.Length; assignedJobs++)
                {
                    var ignore = dp[assignedJobs, remainingWorkers - 1];
                    dp[assignedJobs, remainingWorkers] = Math.Min(dp[assignedJobs, remainingWorkers], ignore);

                    for (int l = 0; l < mask2Candidates[assignedJobs].Count; l++)
                    {
                        var m = mask2Candidates[assignedJobs][l];
                        var next = dp[assignedJobs | m, remainingWorkers - 1];
                        dp[assignedJobs, remainingWorkers] = Math.Min(dp[assignedJobs, remainingWorkers], Math.Max(sums[m], next));
                    }
                }
            }

            return dp[0, k];
        }
    }