    static bool compareUtil(const vector<int>& m1, const vector<int>& m2) {
        return 1L * m2[1] * m1[0] < 1L * m1[1] * m2[0];
    }
	
    // O(n) space O(nlogn) time;
    int eliminateMaximum(vector<int>& dist, vector<int>& speed) {
        vector<vector<int>> minutes;
        for (int i = 0; i < dist.size(); i++) {
            vector<int> t = {dist[i], speed[i]};
            minutes.push_back(t);
        }
        
        sort(minutes.begin(), minutes.end(), compareUtil);
        
        // we can always kill the first monster
        for (int i = 0; i < minutes.size(); i++) {
            // minutes[i][0] / minutes[i][1] <= i, lose at the ith monster
            if (minutes[i][0] <= 1L * minutes[i][1] * i) {
                return i;
            }
        }
        
        return minutes.size();
    }