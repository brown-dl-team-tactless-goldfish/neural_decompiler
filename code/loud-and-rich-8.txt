class Solution {
    int helper(unordered_map<int, vector<int>>&Map, vector<int>&ret, vector<int>& quiet, int cur ){
        if(ret[cur])
            return ret[cur] ;
        ret [cur] = cur ;
        for(auto& nxt : Map[cur]){
            int a = helper(Map, ret, quiet, nxt);
            if(quiet[a] < quiet[ret[cur]])
                ret[cur] = a ;
        }
        return ret[cur] ;
    }
public:
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        unordered_map<int, vector<int>>Map ; //{person, richer}
        for(auto& rich : richer){
            Map[rich[1]].push_back(rich[0]) ;
        }
        
        int n= quiet.size() ;
        vector<int>ret(n) ;
        for (int i = 0; i < quiet.size(); ++i) {
            helper(Map, ret, quiet, i);
        }
        return ret ;
    }
};