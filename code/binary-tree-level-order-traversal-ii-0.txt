struct Node {
    struct TreeNode *treeNode;
    struct Node *next;
 };

bool queueNotEmpty(struct Node* head){  
    if(head->next==NULL){
        return false;
    }else{
        return true;
    }
}
struct Node* outqueue(struct Node** head,struct Node** end){
    
    if((*head)->next!=*end){
        struct Node* tmp = (*head)->next;
        struct Node* tmpnext = ( (*head)->next)->next;
         (*head)->next = tmpnext;
        return tmp;
    }else{
        struct Node* tmp1 =  (*head)->next;
         (*head)->next = NULL;
        (*end) = (*head);
        return tmp1;      
    }   
}

int numInque(struct Node* head){
    struct Node*  p = head->next;
    int num=0;
    while(p!=NULL){
        num++;
        p=p->next;
    }
    return  num;
}
void inqueue(struct Node** head,struct Node** end,struct Node* a){  
    if( (*head)->next == NULL){        
        (*head)->next= a;
        (*end) = (*head)->next;
    }else{
        (*end)->next = a;
        (*end) = (*end)->next;
    } 
}

int** levelOrderBottom(struct TreeNode* root, int** columnSizes, int* returnSize) {
    if(root==NULL){
        return NULL;
    }
   
    int result[1000][1000];
  
    struct Node* end;
    struct Node* head = (struct Node*)malloc(sizeof(struct Node));
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->treeNode = root;
    node->next = NULL;
    head->next = node;
    end = node;
  
    
    int u = 0;
    result[u][0] = root->val;
    
    int col[1000];
    
    col[u] = 1;
    u++;
    
    while(queueNotEmpty(head)){
        int num = numInque(head);
       
        
        int i;
        int t = 0;
        for(i = 0;i<num;i++){
            struct Node* a = outqueue(&head,&end);
           
            if((a->treeNode)->left !=NULL){
                struct Node* b = (struct Node*)malloc(sizeof(struct Node));
                b->treeNode = (a->treeNode)->left;
                b->next  = NULL;
                inqueue(&head,&end,b);
                result[u][t++] = (a->treeNode)->left->val;
            }
            if((a->treeNode)->right !=NULL){
                struct Node* c = (struct Node*)malloc(sizeof(struct Node));
                c->treeNode = (a->treeNode)->right;
                c->next  = NULL;
                inqueue(&head,&end,c);
                result[u][t++] = (a->treeNode)->right->val;
            }
            
        }
        
        col[u] = t;
        u++;
        
    }
    u--;
    
    
    *returnSize = u;
    int** result2 = (int **)malloc(u * sizeof(int*) ); 
    int y;
    (*columnSizes) = (int *)malloc((*returnSize)*sizeof(int));
    for(y = 0; y<u;y++){
        int x;
        result2[u-y-1] = (int *)malloc(col[y] * sizeof(int));
        for(x = 0; x<col[y];x++){
            result2[u-y-1][x] =result[y][x];
        }
        (*columnSizes)[u-y-1] = col[y];
    }
    int i;
   
    return result2;
    
    
    
}