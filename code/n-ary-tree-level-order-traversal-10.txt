   if(root == NULL || returnSize == NULL )
   {
       *returnSize = 0;
       return NULL;
   }

int size = CalSize(root);
int**ret = (int**)calloc(size, sizeof(int*));
int* level = (int*)calloc(size, sizeof(int));
Queue* queue = CreateQueue();

*returnColumnSizes = level;
if(queue == NULL || ret == NULL || level == NULL)
{
    *returnSize = 0;
    *(*returnColumnSizes+*returnSize) = level[*returnSize];
    level[*returnSize] =0;
     return NULL;
}

*returnSize = 0;  

if(root->children == NULL)
 {       
     *returnSize = 1;
     returnColumnSizes[0][0] = 1;
     level = root->val;
     ret[0][0] = *level;
     return ret;   
 }
 else if(root->children!=NULL )
 { 
     ret[*returnSize] = (int*)calloc(1, sizeof(int));
     ret[*returnSize][0] = root->val;
     *(*returnColumnSizes+*returnSize) = level[*returnSize];
     level[(*returnSize)++] = 1;
     Enqueue(queue, root); 
     Enqueue(queue, NULL); 
     TraverseLevelOrder(root, returnSize, ret, returnColumnSizes, queue, level);
 }
 DeleteQueue(queue);
(*returnSize)--;
return ret;