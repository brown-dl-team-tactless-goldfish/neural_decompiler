class Solution {
public:
    
    int minOperations(vector<int>& nums, int x) {
        // Approach: FInd the longest subarray length with sum -> totalSum - x
        int totalSum = 0;
        for(int val: nums) totalSum += val;
        if(totalSum - x == 0) return nums.size();
        
        int i = 0, j = 0, k = totalSum - x;
        int maxLength = 0;
        int currSum = 0;
        
        while(j < nums.size()) {
            currSum += nums[j];
            
            if(currSum < k) {
                j++;
            }
            
            else if(currSum == k) {
                maxLength = max(maxLength, j - i + 1);
                j++;
            }
            
            else if(currSum > k) {
                while(currSum > k and i < j) {
                    currSum -= nums[i];
                    i++;
                }
                
                if(currSum == k) maxLength = max(maxLength, j - i + 1);
                j++;
            }
        }
        
        return maxLength == 0 ? -1 : nums.size() - maxLength;
    }
};