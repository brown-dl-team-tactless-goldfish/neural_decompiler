int* addToArrayForm(int* A, int ASize, int K, int* returnSize){
    //put K into array
    int grade = 1, grade_num = 1, ck = K;
    while (ck >= 10){
        grade *= 10;
        ck /= 10;
    }
    int grade_copy = grade;
    while (grade > 1){
        grade_num++;
        grade /= 10;
    }
    int *kA = (int*)malloc(sizeof(int)*grade_num);
    ck = K;
    int i = grade_num-1;
    while (i >= 0 && ck > 0){
        kA[i] = ck%10;
        ck /= 10;
        i--;
    }
    if (K == 0)
        kA[0] = 0;
    
    //test kA
    for (int p=0; p<grade_num; p++)
        printf ("%d", kA[p]);
    
    int max, counter;
    if (ASize > grade_num){
        counter = ASize;
        max = ASize;
    }
    else{
        counter = grade_num;
         max = grade_num;
    }
    //ret array
    int *res = (int*)malloc(sizeof(int)*(max+1));
    for (int y=0; y<=max; y++)
        res[y] = 0;
    
    int r = 0, l;
    
    for (i=ASize-1, l=counter, grade_num--; i>=0 || grade_num>=0; i--, grade_num--, l--){
        if (grade_num < 0 && i >= 0){
            int j;
            for (j=i; j>=0; j--){
                res[j+1] = A[j]+r;
                if (res[j+1] < 10 && r == 1)
                    r = 0;
                if (res[j+1] >= 10){
                    r = 1;
                    res[j+1] = res[j+1]-10;
                }
                if (j == 0 && r == 1)
                    res[0] = r;
            }
            break;
        }
        else if (grade_num >= 0 && i < 0){
            int j;
            for (j=grade_num; j>=0; j--){
                res[j+1] = kA[j]+r;
                if (res[j+1] < 10 && r == 1)
                    r = 0;
                if (res[j+1] >= 10){
                    r = 1;
                    res[j+1] = res[j+1]-10;
                }
                if (j == 0 && r == 1)
                    res[0] = r;
            }
            break;
        }
        res[l] = A[i]+kA[grade_num]+r;
        if (res[l] < 10 && r == 1)
            r = 0;
        if (res[l] >= 10){
            r = 1;
            res[l] = res[l]-10;
        }
        if (i == 0 && grade_num == i && r == 1){
            res[0] = r;
        }
    }
    if (res[0] == 0){
        int *res_b = (int*)malloc(sizeof(int)*max);
        for (i=0; i<max; i++)
            res_b[i] = 0;
        for (i=0; i<max; i++){
            res_b[i] = res[i+1];
        }
        *returnSize = max;
        return res_b;
    }
    *returnSize = max+1;
    return res;
}