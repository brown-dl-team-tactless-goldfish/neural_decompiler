#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** matrixBlockSum(int** mat, int matSize, int* matColSize, int K, int* returnSize, int** returnColumnSizes){
    int** res=malloc(matSize*sizeof(int *));
    (*returnColumnSizes)=malloc(matSize*sizeof(int));
    for(int i=0;i<matSize;i++){
        res[i]=calloc((matColSize[i]),sizeof(int));
        (*returnColumnSizes)[i]=matColSize[i];
    }
    for(int i=0;i<matSize;i++){
        int sum=0;
        for(int j=0; j<matColSize[i];j++){
            sum+=mat[i][j];
            if(i>0){
                int m=i-1;
                mat[i][j]=sum+mat[m][j];
            }else{
                mat[i][j]=sum;
            }
        }
    }
    
    for(int i=0;i<matSize;i++){
        for(int j=0;j<matColSize[i];j++){
            int o=min(matSize-1,i+K);
            int p=min(matColSize[i]-1,j+K);
            int m=i-K-1;
            int n=j-K-1;
            int tmp=mat[o][p];
            if(m>=0){
                tmp-=mat[m][p];
            }
            if(n>=0){
                tmp-=mat[o][n];
            }
            if(m>=0 && n>=0){
                tmp+=mat[m][n];
            }
            res[i][j]=tmp;
        }
    }
    
    *returnSize=matSize;
    return res;
}