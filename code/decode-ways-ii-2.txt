class Solution {
    int mod = 1e9 + 7;
    int memo[100001];
public:
    
    long f(string &s, int i) {
        if (memo[i] != -1) return memo[i];
        if (i >= s.size()) return 1;
        char c = s[i];
        long ans;
        if (c == '*') {
            ans = 9 * f(s, i+1);
            if (i + 1 < s.size()) {   
                if (s[i+1] == '*') ans += 9 * f(s, i+2);
                else ans += f(s, i+2);
                if (s[i+1] == '*') ans += 6 * f(s, i+2);
                else if (s[i+1] <= '6') ans += f(s, i+2);
            }
        } else if (c == '0') {
            ans = 0;
        } else if (c == '1') {
            ans = f(s, i+1);
            if (i + 1 < s.size()) {
                if (s[i+1] == '*') ans += 9 * f(s, i+2);
                else ans += f(s, i+2);
            }
        } else if (c == '2') {
            ans = f(s, i+1);
            if (i + 1 < s.size()) {   
                if (s[i+1] == '*') ans += 6 * f(s, i+2);
                else if (s[i+1] <= '6') ans += f(s, i+2);
            }
        } else {
            ans = f(s, i+1);
        }
        return memo[i] = ans % mod;
    }
    
    int numDecodings(string s) {
        fill_n(memo, s.size() + 1, -1);
        return f(s, 0);
    }
};