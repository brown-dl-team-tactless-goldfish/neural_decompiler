class Solution {
private:
    int possible(int n, int num, vector<vector<int>>& requests, vector<int> &in, vector<int> &out) {
        int size = requests.size();
        for(int i = 0; i < n; i++)
            in[i] = out[i] = 0;
        
        for(int i = 0; i < size; i++) {
            if((1<<i)&num) {
                out[requests[i][0]] += 1;
                in[requests[i][1]] += 1;
            }
        }
        
        int total = 0;
        for(int i = 0; i < n; i++) {
            if(in[i] != out[i])
                return 0;
            else 
                total += in[i] + out[i];
        }
        
        return total / 2;
    }
    
public:
    int maximumRequests(int n, vector<vector<int>>& requests) {
        int size = requests.size();
        int N = 1 << size;
        int ans = 0;
        
        vector<int> in(n, 0), out(n, 0);
        
        for(int i = 1; i < N; i++) {
            ans = max(ans, possible(n, i, requests, in, out));
        }
        
        return ans;
    }
};
