signed heapsize = 0;

static void swap(unsigned *heap, unsigned a, unsigned b)
{
    unsigned temp = heap[a];
    heap[a] = heap[b];
    heap[b] = temp;
}

static void bubbleup(unsigned *heap, unsigned index)
{
    if (index == 0) return;
 
    unsigned parent = ((index-1)/2);
    if (heap[index] > heap[parent]) swap(heap, index, parent);
   
    bubbleup(heap, parent);  
}

static void bubbledown(unsigned *heap, unsigned index)
{
    // Smallest at the top
    unsigned left = (index *2) + 1;
    unsigned right = (index *2) + 2;
    unsigned parent = index;
   
    unsigned largest = parent;
   
    if (left < heapsize && heap[left] > heap[parent])
        largest = left;
    if (right < heapsize && heap[right] > heap[largest])
        largest = right;
   
    if (largest == index)  return;
   
    swap(heap, parent, largest);

    bubbledown(heap, largest);
}

static void insertintoheap(unsigned *heap, unsigned element)
{
    heap[heapsize++] = element;
    bubbleup(heap, heapsize-1);
}

static unsigned popheap(unsigned *heap)
{
    unsigned retval = heap[0];
   
    swap(heap, heapsize-1, 0);

    heapsize--;

    bubbledown(heap, 0);

    return retval;
}


int lastStoneWeight(int* stones, int stonesSize){

    unsigned heap[40];
    for (int i = 0; i < stonesSize; i++)
    {
        insertintoheap(heap, stones[i]);
    }
    while (heapsize>0)
    {
        unsigned y = popheap(heap);
        if (heapsize == 0) 
            return y;
        
        unsigned x = popheap(heap);

        if (x == y)
            insertintoheap(heap, 0);
        
        if (x !=y)
            insertintoheap(heap, y-x);
       
    }
    // unhit
    return 999;
    

}