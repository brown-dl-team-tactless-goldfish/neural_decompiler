class Solution {
public:
    void dfs(int anc,int node,vector<bool>& vis,vector<vector<int>>& graph,vector<vector<int>>& ans)
    {
        vis[node]=true;
        for(auto x:graph[node])
        {
            if(!vis[x])
            {
                //add the anc to result of x as it is ancestor
                ans[x].push_back(anc);
                dfs(anc,x,vis,graph,ans);
            }
        }
    }
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> ans(n),graph(n);
        for(auto arr:edges)
        {
            graph[arr[0]].push_back(arr[1]);
        }
        //now start every node as a ancestor and find out all the reachable nodes 
        //add the node to the result
        for(int i=0;i<n;i++)
        {
            vector<bool> vis(n,false);
            dfs(i,i,vis,graph,ans);
        }
        return ans;
    }
};