class Solution {
public:
    int maxFreq(string s, int maxLetters, int minSize, int maxSize) {
        unordered_map <char, int> charCount;
        unordered_map <string, int> occurrenceCount;
        
        int l = 0, r = 0, len = s.length(), uniqueChars = 0, c = 0;
        
        while(r < len) {
            charCount[s[r]]++;
            if(charCount[s[r]] == 1) {
                uniqueChars++;
            }
            r++;
            
			// If invalid increase l to find valid strings
            while(uniqueChars > maxLetters or (r - l) > maxSize) {
                charCount[s[l]]--;
                if(charCount[s[l]] == 0) {
                    uniqueChars--;
                } 
                l++;
            }
            
			// If valid find smaller valid strings by increasing l 
            while((uniqueChars <= maxLetters) and ((r - l) >= minSize and (r - l) <= maxSize)) {
                string subString = s.substr(l, r - l);
                occurrenceCount[subString]++;
                
                charCount[s[l]]--;
                if(charCount[s[l]] == 0) {
                    uniqueChars--;
                } 
                l++;
            }
        }
        
        int maxOccurrence = 0;
        for(auto it : occurrenceCount) {
            maxOccurrence = max(maxOccurrence, it.second);
        }
        
        return maxOccurrence;
    }
};