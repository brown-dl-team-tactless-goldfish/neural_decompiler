class Solution {
public:
    long long countExcellentPairs(vector<int>& nums, int k) {
        unordered_set<int> remove_duplicate(nums.begin(), nums.end());
        vector<int> use = convertor(remove_duplicate);
        sort(use.begin(), use.end());
        
        long long ans = 0;
        for(int i = use.size() - 1; i >= 0; -- i){
            if(use[i] >= k){
                ans += 2 * i + 1;
            }else{
                int get = k - use[i];
                int idx = lower_bound(use.begin(), use.end(), get) - use.begin();
                if(idx <= i){
                    ans += (i - idx) * 2 + 1;
                }
            }
        }
        
        return ans;
    }
    
    vector<int> convertor(unordered_set<int>& nums){
        vector<int> ans;
        for(auto it: nums){
            ans.push_back(get(it));
        }
        return ans;
    }
    
    int get(int& num){
        int count = 0;
        for(int i = 0; i < 32; ++ i){
            if(num & (1 << i)){
                count ++;
            }
        }

        return count;
    }
};