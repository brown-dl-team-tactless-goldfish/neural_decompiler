class Solution {
private:
    vector<int> path, amount;   
    bool dfs1(int node,int par,int dist,vector<int> adj[]){
        bool dec = false;
        for(auto child : adj[node]){
            if(child == par) continue;
            dec |= dfs1(child,node,dist+1,adj);
        }
        if(dec or !node) path[node] = min(path[node],dist);
        return !node or dec;
    }
    int dfs2(int node,int par,int dist,vector<int> adj[]){
        int ans = -1e9;
        for(auto child : adj[node]){
            if(child == par) continue;
            ans = max(ans,dfs2(child,node,dist+1,adj));
        }
        int net_profit;
        if(path[node] < dist){
            net_profit = 0;
        }else if(path[node] == dist){
            net_profit = amount[node]/2;
        }else{
            net_profit = amount[node];
        }
        return net_profit + (ans == -1e9 ? 0 : ans);
    }
public:
    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        path.resize(edges.size()+1,1e9);
        this->amount = amount;
        vector<int> adj[edges.size()+1];
        for(auto e : edges){
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        dfs1(bob,-1,0,adj);
        return dfs2(0,-1,0,adj);
    }
};