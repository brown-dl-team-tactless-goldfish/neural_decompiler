int search(int size, int num){
    return size-num;
}

int numPairsDivisibleBy60(int* time, int timeSize){
    int diff = 0, res = 0, k = 60, max = time[0], toFill, n = 16;
    int multiplier[16] = {60,120,180,240,300,360,420,480, 540, 600, 660, 720, 780, 840, 900, 960};
    
    for (int i=0; i<timeSize; i++){
        if (time[i] > max)
            max = time[i];
    }
    
    int *map = (int*)malloc(sizeof(int)*(max+1));
    if (map == NULL)
        return 0;
    for (int i=0; i<=max; i++)
        map[i] = 0;
    for (int i=0; i<timeSize; i++){
        map[time[i]]++;
    }
    
    for (int i=0; i<=max; i++){
        if (map[i] == 0)
            continue;
        k = map[i];
        while (k > 0){
            for (int j=0; j<n; j++){
                if (multiplier[j] < i)
                    continue;
                toFill = search(multiplier[j], i);
                if (toFill < 0)
                    toFill *= -1;
                if (toFill > 0 && toFill <= max && map[toFill] > 0 && toFill != i){
                    if (map[toFill] > 1)
                        res += (map[toFill]);
                    else
                        res++;
                }
                else if (toFill > 0 && toFill <= max && map[toFill] > 0 && toFill == i){
                    if (map[toFill] > 1)
                        res += (map[toFill]-1);
                }
            }
            k--;
        }
    }
    return res/2;
}