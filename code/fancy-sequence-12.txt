public class Fancy {
    List<int> ls;
    List<long> inc;
    List<long> mul;
    int mod = 1000000007;
    public Fancy()
    {
        ls = new List<int>();           // to store values
        inc = new List<long>() { 0 };   // to store cumulative additions
        mul = new List<long>() { 1 };   // to store cumulative multiplications
    }

    public void Append(int val)
    {
        ls.Add(val);                    // add value
        // update last values for curr index
        inc.Add(inc[inc.Count - 1]);
        mul.Add(mul[mul.Count - 1]);
    }

    public void AddAll(int incBy) => inc[inc.Count - 1] = (inc[inc.Count - 1] + incBy)%mod;

    public void MultAll(int m)
    {
        inc[inc.Count - 1] = (inc[inc.Count - 1] * m)%mod;
        mul[mul.Count - 1] = (mul[mul.Count - 1] * m)%mod;
    }

    public int GetIndex(int idx)
    {
        if (idx >= ls.Count) return -1;
        long m = mul[mul.Count - 1] * PowMod(mul[idx], mod - 2, mod) % mod;
        long sum = inc[inc.Count - 1] + mod - inc[idx] * m % mod;
        
        long computed = (ls[idx] * m + sum) % mod;
        //Console.WriteLine($" Computed Value at '{idx}' is: '{computed}'");
        return (int)computed;
    }
	// For PowMod explanation check this great explanation by https://leetcode.com/problems/fancy-sequence/discuss/900010/C-O(1)-Solution
    private long PowMod(long x, long y, long mod)
    {
        long res = 1;
        while (y > 0)
        {
            if ((y & 1) == 1)
                res = res * x % mod;
            x = x * x % mod;
            y >>= 1;
        }

        return res;
    }
}
/**
 * Your Fancy object will be instantiated and called as such:
 * Fancy obj = new Fancy();
 * obj.Append(val);
 * obj.AddAll(inc);
 * obj.MultAll(m);
 * int param_4 = obj.GetIndex(idx);
 */