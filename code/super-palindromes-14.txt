class Solution {
public:
    vector<string> fun(int d){
        if(d==0){
            return {};
        }
        if(d==1){
            vector<string> vec;
            for(int i=0;i<=9;i++){
                string st;
                st.push_back(i+'0');
                vec.push_back(st);
            }
            return vec;
        }
        if(d==2){
            vector<string> vec;
            for(int i=0;i<=9;i++){
                string s(2,i+'0');
                vec.push_back(s);
            }
            return vec;
        }
        vector<string> rem=fun(d-2);
        vector<string> ret;
        for(auto s:rem){
            for(int i=0;i<=9;i++){
                string sr;
                sr.push_back(i+'0');
                sr.append(s);
                sr.push_back(i+'0');
                ret.push_back(sr);
            }
        }
        return ret;
    }
    vector<string> nst(int d){
        if(d==0){
            return {};
        }
        if(d==1){
            vector<string> vec;
            for(int i=0;i<=9;i++){
                string st;
                st.push_back(i+'0');
                vec.push_back(st);
            }
            return vec;
        }
        if(d==2){
            vector<string> vec;
            for(int i=1;i<=9;i++){
                string s(2,i+'0');
                vec.push_back(s);
            }
            return vec;
        }
        vector<string> re=fun(d-2);
        vector<string> ret;
        for(auto s:re){
            for(int i=1;i<=9;i++){
                string sr;
                sr.push_back(i+'0');
                sr.append(s);
                sr.push_back(i+'0');
                ret.push_back(sr);
            }
        }
        return ret;
    }
    bool ispal(long long n){
        vector<int> di;
        while(n){
            di.push_back(n%10);
            n/=10;
        }
        for(int i=0;i<di.size()/2;i++){
            if(di[i]!=di[di.size()-1-i]){
                return false;
            }
        }
        return true;
    }
    int superpalindromesInRange(string L, string R) {
        int digr=ceil((double)R.size()/(double)2);
        int digl=L.size()/2;
        long long lv=stoll(L);
        long long rv=stoll(R);
        int c=0;
        for(int i=digl;i<=digr;i++){
            vector<string> vec=nst(i);
            for(auto s:vec){
                long long val=stoll(s);
                val*=val;
                if(val>=lv && val<=rv && ispal(val)){
                    c++;
                }
            }
        }
        return c;
    }
};