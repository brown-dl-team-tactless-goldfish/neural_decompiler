int** intervalIntersection(int** firstList, int firstListSize, int* firstListColSize, int** secondList, int secondListSize, int* secondListColSize, int* returnSize, int** returnColumnSizes){
    *returnSize = 0;
    if(firstListSize == 0 || secondListSize == 0)
        return NULL;
    int i = 0, j = 0, idx = 0;
    int ** result = (int **)malloc(1000*sizeof(int *));
    while(i < firstListSize && j < secondListSize)
    {
        if(firstList[i][1] >= secondList[j][0] && firstList[i][0] <= secondList[j][1])
        {
            int l = firstList[i][0] > secondList[j][0] ? firstList[i][0] : secondList[j][0];
            int h = firstList[i][1] < secondList[j][1] ? firstList[i][1] : secondList[j][1];
            result[idx] = (int *)malloc(2*sizeof(int));
            result[idx][0] = l;
            result[idx++][1] = h;
        }
        firstList[i][1] < secondList[j][1] ? i++ : j++;   
    }
    *returnSize = idx;
    (*returnColumnSizes) = (int *)malloc(idx*sizeof(int));
    for(int k = 0; k < idx; k++)
         (*returnColumnSizes)[k] = 2;
    return result;
}