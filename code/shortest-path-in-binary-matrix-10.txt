class Solution {
public: 
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        const int n = grid.size();
        if(n == 0 || grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        queue<int> q{{0}};
        grid[0][0] = -1;        
        vector<vector<int> > dirs{{-1, 0}, {-1, 1},{0,1},{1,1}, {1,0}, {1, -1}, {0, -1}, {-1,-1}};
        for(int step = 1; !q.empty(); step++)
            for(auto sz = q.size(); sz > 0; sz--){
                const auto cur = q.front(); q.pop();
                int r = cur / n, c = cur % n;
                if(r == n - 1 && c == n - 1) return step;
                for(const auto& dir: dirs){
                    int nr = r + dir[0], nc = c + dir[1];                    
                    if(nr < 0 || nr >= n || nc < 0 || nc >= n || grid[nr][nc] != 0 ) continue;
                    q.push(nr*n + nc);
                    grid[nr][nc] = -1;
                }
            }
        return -1;
    }
};