class Solution {
public:
    vector<vector<string>> printTree(TreeNode* root) {
        // Recursion, m = depth, n = 2^depth - 1
        int depth = findDepth(root), rows = depth, cols = pow(2, depth) - 1;
        vector<vector<string>> res(rows, vector<string>(cols));
        printTree(root, res, 0, 0, cols - 1);
        return res;
    }
    
private:
    int findDepth(TreeNode* root)
    {
        if (!root)
        {
            return 0;
        }
        
        return max(findDepth(root->left), findDepth(root->right)) + 1;
    }
    
    void printTree(TreeNode* root, vector<vector<string>>& res, int row, int startCol, int endCol)
    {
        if (!root)
        {
            return;
        }
        
        int midCol = startCol + (endCol - startCol) / 2;
        res[row][midCol] = to_string(root->val);
        
        printTree(root->left, res, row + 1, startCol, midCol - 1);
        printTree(root->right, res, row + 1, midCol + 1, endCol);
    }
};