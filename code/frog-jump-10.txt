int dp[2010][2010];
bool func(map<int, int> &map, vi& pos, int i, int k)
{
	if(i == pos.size()-1) return 1;

	if(dp[i][k] != -1) return dp[i][k];

	bool a = 0, b= 0, c = 0;
	if(k+1 > 0 and map.find(pos[i]+k+1) != map.end())
		a = func(map, pos, map[pos[i] + k +1], k+1);
	
	if(k>0 and map.find(pos[i]+k) != map.end())
		b = func(map, pos, map[pos[i] + k ], k);
	
	if( k-1 > 0 and map.find(pos[i]+k-1) != map.end())
		c = func(map, pos, map[pos[i] + k -1], k-1);

	// cout << i << " " << pos[i]<< " " << k <<  " " << max({a,b,c});br;

	return dp[i][k] = max({a, b, c});
}

bool canCross(vector<int>& pos) 
{
	memset(dp, -1, sizeof(dp));
	std::map<int, int> map;
	for(int i=0; i<pos.size(); i++)
	{
		map.insert({pos[i], i});
	}

	return func(map, pos, 0, 0);
}
