static bool  dfsCycle(char **grid, int gridSize, int* gridColSize, int row, int col, int pre_row, int pre_col, int key, int **visited);
static void doFree(int **visited, int gridSize);

bool containsCycle(char** grid, int gridSize, int* gridColSize){
    int **visited = malloc(gridSize * sizeof(int *));
    for (int i = 0; i < gridSize; i++) {
        visited[i] = malloc(*gridColSize*sizeof(int));
        for (int j = 0; j < *gridColSize; j++) {
            visited[i][j] = -1;
        }
    }
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < *gridColSize; j++) {
            if (visited[i][j] == -1) {
                int key = i * gridSize + j;
                if (dfsCycle(grid, gridSize, gridColSize, i, j, -1, -1, key, visited)) {
                    doFree(visited, gridSize);
                    return true;
                }
            }
        }
    }
    doFree(visited, gridSize);
    return false;
}

static bool  dfsCycle(char **grid, int gridSize, int* gridColSize, int row, int col, int pre_row, int pre_col, int key, int **visited) {
    visited[row][col] = key;
    if (col + 1 <= *gridColSize - 1 && col + 1 != pre_col) {
        if (grid[row][col + 1] == grid[row][col]) {
            if (visited[row][col + 1] == visited[row][col])
                return true;
            if (dfsCycle(grid, gridSize, gridColSize, row, col + 1, row, col, key, visited))
                return true;
        }
    }
    if (col - 1 >= 0 && col - 1 != pre_col) {
        if (grid[row][col - 1] == grid[row][col]) {
            if (visited[row][col - 1] == visited[row][col])
                return true;
            if (dfsCycle(grid, gridSize, gridColSize, row, col - 1, row, col, key, visited))
                return true;
        }
    }
    if (row + 1 <= gridSize - 1 && row + 1 != pre_row) {
        if (grid[row + 1][col] == grid[row][col]) {
            if (visited[row + 1][col] == visited[row][col])
                return true;
            if (dfsCycle(grid, gridSize, gridColSize, row + 1, col, row, col, key, visited))
                return true;
        }
    }
    if (row - 1 >= 0 && row - 1 != pre_row) {
        if (grid[row - 1][col] == grid[row][col]) {
            if (visited[row - 1][col] == visited[row][col])
                return true;
            if (dfsCycle(grid, gridSize, gridColSize, row - 1, col, row, col, key, visited))
                return true;
        }
    }
    return false;
}

static void doFree(int **visited, int gridSize) {
    for (int i  = 0; i < gridSize; i ++)
        free(visited[i]);
    free(visited);
    return;
}