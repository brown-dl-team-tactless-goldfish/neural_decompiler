class Solution {
    void numTilePossibilitiesUtil(string &tiles, int l, string curr, unordered_set<string>&res) {
        
        if (curr.length() > 0 && curr.length() <= tiles.size())
                res.insert(curr);
        
        for (int i = l; i < tiles.size(); i++) {
            curr += tiles[i];
            swap(tiles[i], tiles[l]);
            numTilePossibilitiesUtil(tiles, l+1, curr, res);
            swap(tiles[i], tiles[l]);
            curr.pop_back();
        }
    }
public:
    int numTilePossibilities(string tiles) {
        
        int n = tiles.length();
        string curr;
        unordered_set<string>res;
        numTilePossibilitiesUtil(tiles, 0, curr, res);
        return res.size();
    }
};