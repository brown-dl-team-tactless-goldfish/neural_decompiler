/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** onesMinusZeros(int** grid, int gridSize, int* gridColSize, int* returnSize, int** returnColumnSizes){
    int m = gridSize ;
    int n = *gridColSize ;
    int** ans = malloc(m * sizeof(int*) ) ;
    for(int i = 0; i < m; i++){
        ans[i] = malloc(n * sizeof(int) ) ;
    }
    int* rowOne = calloc(m , sizeof(int) ) ;
    int* colOne = calloc(n , sizeof(int) ) ;
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if( grid[i][j] == 1 ){
                rowOne[i]++;
                colOne[j]++;
            }
        }
    }
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            ans[i][j] = 2*rowOne[i] + 2*colOne[j] - m - n ;
        }
    }
    *returnSize = m ;
    *returnColumnSizes = malloc( m * sizeof(int) ) ;
    for(int i = 0; i < m; i++){
        returnColumnSizes[0][i] = n ;
    }
    free(rowOne) ;
    free(colOne) ;
    return ans ;
}