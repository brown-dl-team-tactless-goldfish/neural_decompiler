class Solution {
public:
    
    void lca(int &a , int &b)
    {
        vector<int> pa;
        
        while(a>=1)
        {
            pa.push_back(a);
            a/=2;
        }
        
        vector<int> pb;
        
        while(b >= 1)
        {
            pb.push_back(b);
            b/=2;
        }
        
        int i = pa.size() - 1, j = pb.size() - 1;
        
        
        while(pa[i] == pb[j])
        {
            if(i == 0 || j == 0)
            {
                a=i;b=j;
                return;
            }
            i--;
            j--;
        }                                                                  
        i++;j++;
        a=i;b=j;
    }
    
    vector<int> cycleLengthQueries(int n, vector<vector<int>>& queries) {
        vector<int> ans;
        int i = 0;
        for(auto it : queries)
        {
            if(it[0] == 1)
            {
                int c = 0;
                while(it[1] >= 1)
                {
                    c++;
                    it[1]/=2;
                }
                
                ans.push_back(c);
            }
            else if(it[1] == 1)
            {  
                int c = 0;
                while(it[0] >= 1)
                {
                    c++;
                    it[0]/=2;
                }
                
                ans.push_back(c);
            }
            
            else
            {
             lca(it[0] , it[1]);
             ans.push_back(it[0] + it[1] + 1);
            }
            cout<<ans[i++]<<endl;
            }
        return ans;
    }
};