int get_tail_byte_count (int c)
{
    int count = 0;
    while (1)
    {
        if ((c & 0x80) == 0)
            break;
        c <<= 1;
        count++;
    }
    if ((count < 1) || (count > 4))
        return -1;
    // exclude head byte
    return count - 1;
}

bool validUtf8(int* data, int dataSize)
{
    int head_seen = 0;
    int tails = 0;
    int i = 0;

    while (i < dataSize)
    {
        if (head_seen)
        {
            // Is valid tail byte
            if ((data[i] & 0xC0) == 0x80)
                tails--;
            else
                // invalid tail byte
                return 0;
        }
        else
        {
            // Check if this is a single byte head.
            if ((data[i] & 0x80) == 0)
            {
                // The following block of code is no-op, 
                // since eventually both head_seen and tails are cleared.
                // But good to understand the code flow.

                // Single byte head is seen.
                head_seen = 1;
                tails = 0;
            }
            // else check if this a multi byte head.
            else
            {
                // Validate multi-byte head.
                // Must have at least 2 MSB bits set
                if ((data[i] & 0xC0) != 0xC0)
                    return 0;

                // Get count of trailing tail bytes
                tails = get_tail_byte_count (data[i]);

                // Bad head byte
                if (tails < 0)
                    return 0;
                head_seen = 1;
            }
        }

        // If all tail bytes are parsed, clear head seen flag.
        if ((head_seen == 1) && (tails == 0))
            head_seen = 0;
        i++;
    }
    if (tails)
        return 0;
    return 1;
}