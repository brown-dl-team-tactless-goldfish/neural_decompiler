class Solution {
public:
    vector<double> getCollisionTimes(vector<vector<int>>& cars) {
        const int n = cars.size();
        vector<double> res(n, -1);
        priority_queue<tuple<double, int, int>> q; //time, i, j
        unordered_map<int,int> pairs; //right -> left
        vector<bool> removed(n, false);
        for(int i=0;i<n-1;i++){
            q.emplace(-time(i, i+1, cars), i, i+1);
            pairs[i+1] = i;
        } 
        while(!q.empty()){
            auto [t, i, j] = q.top(); q.pop();
            t = -t;
            if(removed[j]) continue;
            removed[i] = true;
            if(t > 1e99) continue;
            res[i] = t;
            if(pairs.count(i)){
                int pre = pairs[i];
                if(res[pre] > -1) continue;
                pairs[j] = pre;
                pairs.erase(i);
                q.emplace(-time(pre, j, cars), pre, j);
            }          
        }
        return res;
    }

    double time(int i, int j, vector<vector<int>>& cars){
        int speed = cars[i][1] - cars[j][1];
        double dis = cars[j][0] - cars[i][0];
        if(speed <= 0) return 1e100;
        return dis / speed;
    }
};
