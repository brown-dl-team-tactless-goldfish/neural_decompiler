    vector<vector<string>> findDuplicate(vector<string>& paths) {
        vector<vector<string>> res;
        unordered_map<string, vector<string>> dic;
        for (auto& str : paths) {
            bool searchingPath = true;
            bool searchingName = false;
            bool searchingContent = false;
            string path = "";
            string name = "";
            string content = "";
            for (int i = 0; i <= str.size(); i++) {
                char c = str[i];
                if (searchingPath) {
                    if (c != ' ') {
                        path += c;
                    } else {
                        searchingPath = false;
                        searchingName = true;
                    }
                } else if (searchingName) {
                    if (c != '(') {
                        name += c;
                    } else {
                        searchingName = false;
                        searchingContent = true;
                    }
                } else {
                    if (c == ' ' || c == '\0') {
                        content.pop_back();
                        dic[content].push_back(path + '/' + name);
                        searchingName = true;
                        searchingContent = false;
                        name = "";
                        content = "";
                    } else {
                        content += c;
                    }
                }
            }
        }
        
        for (auto it = dic.begin(); it != dic.end(); it++) {
            if (it->second.size() > 1) {
                res.push_back(it->second);
            }
        }
        
        return res;
    }