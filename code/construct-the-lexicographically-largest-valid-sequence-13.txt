class Solution {
public:
    bool help(vector<int> &v,int x, int k,int n,vector<bool>&visited)
    {
        
        if(v[k]!=0)
            return false;
        else if(( (x!=1) && (k+x<(2*n - 1)) && v[k+x]!=0)||((x!=1) &&(k+x>=(2*n - 1))))
            return false;
        visited[x]=true;
        v[k]=x;
        if(x!=1)
            v[k+x]=x;
        bool flag=true;
        for(int i=n;i>0;i--)
        {
            flag=flag&&visited[i];
        }
        if(flag)
            return true;
        int j=k;
        while(j<(2*n - 1)&&v[j]!=0)
                j++;
        for(int i=n;i>0;i--)
        {
            if(!visited[i])
            {
                if(help(v,i,j,n,visited))
                    return true;
            }
        }
        v[k]=0;
        if(x!=1)
        {
            v[k+x]=0;
        }
        visited[x]=false;
        return false;
    }
    
    
    vector<int> constructDistancedSequence(int n) {
        vector<int>res(2*n -1,0);
        vector<bool>visited(n+1,false);
        visited[0]=true;
        help(res,n,0,n,visited);
        return res;
    }
};