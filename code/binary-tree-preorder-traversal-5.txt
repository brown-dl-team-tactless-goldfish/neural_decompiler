/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
// Pre-order Root, Left, Right
// First find the number of elements in order to allocate array of appropriate size

int returnNumElementsInTree(struct TreeNode* root)
{
    if(root == NULL)
        return 0;
    return returnNumElementsInTree(root->left) + returnNumElementsInTree(root->right) + 1;
}

void addPreorderListToArray(struct TreeNode* node, int* preorderArray, int* index)
{
    if(node == NULL)
        return;
    
    preorderArray[(*index)++] = node->val;
    addPreorderListToArray(node->left, preorderArray, index);
    addPreorderListToArray(node->right, preorderArray, index);
    
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* preorderTraversal(struct TreeNode* root, int* returnSize)
{
    int index = 0;
    
    int numElements = returnNumElementsInTree(root);
    
    int *preorderArray = (int *)malloc(sizeof(int) * numElements);
    
    addPreorderListToArray(root, preorderArray, &index);
    
    *returnSize = numElements;
    return preorderArray;
}