struct lands{
    int x;
    int y;
    int val;
    struct lands* next;
};
struct lands* head;
struct lands* tail;
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int queue_land(int x, int y, int val){
    struct lands* temp = malloc(sizeof(struct lands));
    temp->x = x;
    temp->y = y;
    temp->val= val;
    temp->next = NULL;
    //printf("++++ %d, %d, %d ++++\n",x,y,val);
    if(head==NULL){
        head = temp;
        tail = temp;
    }
    else{
        tail->next = temp;
        tail = temp;
    }
    return 0;
}

int bfs(int** isWater, int row, int col, struct lands* curr){
    if(curr->val)
        isWater[curr->x][curr->y] = curr->val;
    else
        isWater[curr->x][curr->y] = -1; // -1 for water
    
    if(curr->x-1 >= 0){
        if(!isWater[curr->x-1][curr->y]){ //0 means not visited.
            isWater[curr->x-1][curr->y] = -1; // set -1 for queued.
            queue_land(curr->x-1, curr->y, curr->val+1);
        }
    }
    if(curr->x+1 < row){
        if(!isWater[curr->x+1][curr->y]){ //0 means not visited.
            isWater[curr->x+1][curr->y] = -1; // set -1 for queued.
            queue_land(curr->x+1, curr->y, curr->val+1);
        }
    }
    if(curr->y-1 >= 0){
        if(!isWater[curr->x][curr->y-1]){ //0 means not visited.
            isWater[curr->x][curr->y-1] = -1; // set -1 for queued.
            queue_land(curr->x, curr->y-1, curr->val+1);
        }
    }
    if(curr->y+1 < col){
        if(!isWater[curr->x][curr->y+1]){ //0 means not visited.
            isWater[curr->x][curr->y+1] = -1; // set -1 for queued.
            queue_land(curr->x, curr->y+1, curr->val+1);
        } 
    }
    //printf("---- %d, %d, %d ----\n", curr->x, curr->y, curr->val);
    if(curr->next != NULL)
        bfs(isWater, row, col, curr->next);
    free(curr);
    return 0;
}

int** highestPeak(int** isWater, int isWaterSize, int* isWaterColSize, int* returnSize, int** returnColumnSizes){
    int i, j;
    head = NULL;
    tail = NULL;

    for(i=0;i<isWaterSize;i++){
        for(j=0;j<*isWaterColSize;j++){
            if(isWater[i][j])
                queue_land(i,j,0);
        }
    }
    int col = *isWaterColSize;
    bfs(isWater,isWaterSize,col,head);
    
    for(i=0;i<isWaterSize;i++){
        for(j=0;j<col;j++){
            if(isWater[i][j]==-1)
                isWater[i][j] = 0;  // set water back.
        }
    }
    *returnSize = isWaterSize;
    *returnColumnSizes = malloc(sizeof(int)*isWaterSize);
    for(i=0;i<*returnSize;i++){
        (*returnColumnSizes)[i] = *isWaterColSize;
    }
    return isWater;
}```