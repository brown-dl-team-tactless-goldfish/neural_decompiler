class Solution {
public:
    
    typedef long long ll;
    
    int minMoves(vector<int>& nums, int k) {
        
       ll n=nums.size();
        
        vector<ll>A;
        
        for(int i=0;i<n;i++){
            if(nums[i]==1){
                A.push_back((ll)i);
            }
        }
        
        n=A.size();
        
        if(n<=1 || k==1){
            return 0;
        }
        
        vector<ll>prefix(n,0);
        
        prefix[0]=A[0];
        
        for(ll i=1;i<n;i++){
            prefix[i]=prefix[i-1]+A[i];
        }
        
        ll ans=1e18;
        
        ll subtract=0;
        
        if(k%2!=0){
            
            subtract=(k/2)*((k/2)+1);
        
        }
        
        else{
            
            ll a=(k/2)*((k/2)+1);
            a/=2;
            
            ll b=((k/2)-1)*(k/2);
            b/=2;
            
            subtract=(a+b);
            
        }
        
     
        for(ll i=0;i<=n-k;i++){
            
            ll right=0;
            ll left=0;
            
            if(k%2==0){
                
                right = prefix[i+k-1] - prefix[i+(k/2)] + A[i+(k/2)];
                
                left  = prefix[i+(k/2)-1] - (i-1>=0 ? prefix[i-1] : 0);
                
            }
            
            
            else{
                
                right = prefix[i+k-1] - prefix[i+(k/2)];
                
                left  = prefix[i+(k/2)-1] - (i-1>=0 ? prefix[i-1] : 0);
                
            }
            
//             ll right=prefix[i+k-1]-prefix[i+((k+1)/2)-1];
//             ll left =prefix[i+((k-1)/2)-1]-(i-1>=0 ? prefix[i-1] : 0);
            
            ans=min(ans,right-left-subtract);
            
           // cout<<left<<" "<<right<<" "<<subtract<<endl;
            
        }
        
        return ans;
        
    }
};