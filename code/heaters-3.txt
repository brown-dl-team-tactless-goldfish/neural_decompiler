class Solution {
public:
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        if (heaters.empty()) return INT_MAX;
        if (houses.empty())  return 0;
        
        int result = 0;
        
        std::sort(heaters.begin(), heaters.end());
        
        for (auto& c : houses) {
            auto iter = std::lower_bound(heaters.begin(), heaters.end(), c);
            if (iter == heaters.end()) {
                result = std::max(result, c - heaters.back());
            } else if (iter == heaters.begin()) {
                result = std::max(result, heaters.front() - c);
            } else if (*iter == c) {
                continue;
            } else {
                int left = *(iter - 1), right = *iter;
                int mid = left + (right - left) / 2;
                int radius = c <= mid ? c - left : right - c;
                result = std::max(result, radius);
            }
        }
        return result;
    }
};