class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {
        int n = patience.size() ;
        vector<vector<int>>graph(n) ;
        vector<int>dist(n, -1) ;
        for(auto& e : edges){
            graph[e[0]].push_back(e[1]) ;
            graph[e[1]].push_back(e[0]) ;
        }
        dist[0] = 0 ;
        queue<int>q{{0}} ;
        while(!q.empty()){
            int cur = q.front() ;
            q.pop() ;
            for(auto& next : graph[cur]){
                if(dist[next] >= 0)
                    continue ;
                dist[next] = dist[cur] + 1 ;
                q.push(next) ;
            }
        }
        for(int i = 0 ;i < n; i++)
            cout << dist[i] << "," ;
        int ret = 0; 
        for(int i = 1; i < n; i++){
            int time = 2*dist[i] ;
            if(2*dist[i]/patience[i] == 0)
                time += 1 ;
            else if(2*dist[i]%patience[i] == 0)
                time += (2*dist[i]/patience[i] - 1) * patience[i] + 1 ;
            else
                time += (2*dist[i]/patience[i]) * patience[i] + 1;
                
            ret = max(ret, time) ;
        }
        
        return ret ;
    }
};