
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* pancakeSort(int* A, int ASize, int* returnSize){

    int i,j;
    int is_sorted = 0;
    int *arr = malloc(ASize*2*sizeof(int));
    *returnSize = 0;
    
    //num of overall double flips
    for (i=0; i<ASize; i++)
    {
        //find the max per each iteration
        int max = A[0]; int max_idx=0;
        for (j=0; j<ASize-i; j++) {
            if (max < A[j]) {
                max = A[j]; max_idx = j;
            }
        }
        
        //perform the double flip
        for (j=0; j<max_idx/2; j++) {
            int temp = A[j];
            A[j] = A[max_idx-j];
            A[max_idx-j] = temp;
        }
        
        
        for (j=0; j<(ASize-1-i)/2; j++) {
            int temp = A[j];
            A[j] = A[ASize-1-i-j];
            A[ASize-1-i-j] = temp;
        }
        
        arr[*returnSize] = max_idx;
        *returnSize +=1;
    
        arr[*returnSize] = ASize-i;
        *returnSize +=1;
        
        
    }
    
    return arr;
    
}

