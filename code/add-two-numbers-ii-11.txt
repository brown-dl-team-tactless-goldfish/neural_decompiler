typedef struct ListNode ListNode;

ListNode* Reverse(ListNode* head){
    ListNode* pre_node=NULL, *cur_node = head, *next_node;
    
    while(cur_node){
        //Move pointer
        next_node = cur_node->next;
        
        //process
        cur_node->next = pre_node;
        
        //Move pointer
        pre_node = cur_node;
        cur_node = next_node;
    }
    return pre_node;
}

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    l1 = Reverse(l1);
    l2 = Reverse(l2);
    
    //Calculate
    ListNode *head, *cur;
    cur = head;
    int carry = 0, flag = 1;
    while(l1 != NULL || l2 != NULL || carry){
        //New node
        ListNode* node = (ListNode*)malloc(sizeof(ListNode));
        
        //Sum
        if(l1 != NULL && l2 != NULL){
            node->val = (l1->val + l2->val + carry)%10;
            carry = (l1->val + l2->val + carry)/10;
            l1 = l1->next;
            l2 = l2->next;
        }
        else if(l1 != NULL){
            node->val = (l1->val + carry)%10;
            carry = (l1->val + carry)/10;
            l1 = l1->next;
        }
        else if(l2 != NULL){
            node->val = (l2->val + carry)%10;
            carry = (l2->val + carry)/10;
            l2 = l2->next;
        }
        else if(carry>0){
            node->val = 1;
            carry = 0;
        }
        
        node->next = NULL;
        
        //Link
        if(flag){
            flag = 0;
            head = node; //This node is head.
            cur = node;
        }else{
            cur->next = node;
            cur = cur->next;
        }
    }
    
    return Reverse(head);
}