/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long kthLargestLevelSum(TreeNode* root, int k) {
        if(root == NULL)
            return -1 ;
        vector<long long>sum ; 
        queue<TreeNode*>q ;
        q.push(root) ;
        while(!q.empty()){
            int size = q.size() ;
            long long total = 0;
            for(int i = 0; i < size; i++){               
                auto node = q.front() ;
                q.pop() ;
                total += node->val ;
                if(node->left)
                    q.push(node->left) ;
                if(node->right)
                    q.push(node->right) ;
            }
            sum.push_back(total) ;
        }
        
        int d = sum.size() - k ;
        cout << d ;
        if(d < 0)
            return -1 ;
        sort(sum.begin(), sum.end()) ;
        return sum[d] ;
    }
};