class Solution {
public:
    vector<int> threeEqualParts(vector<int>& arr) {
        int ones = 0;
        for (int i : arr)
            ones += i;
            
        if (ones == 0) return {0, 2}; // if all zero the indexes don't matter
        
        if (ones % 3 != 0) return {-1, -1};
        
        int n = arr.size(), cnt = 0, front = 0, end = 0;
        
        for (int i = n - 1; i >= 0; i--) {
            if (arr[i]) break;
            end++;
        }
        vector<int> res;
        for (int i = 0; i < n; i++) {
            cnt += arr[i];
            if (cnt == ones / 3) {
                if (front++ == end) {
                    res.push_back(i);
                    cnt = 0, front = 0;
                }
            }
        }
        if (res.size() < 3 ) return {-1, -1};
        
        int i = res[0], j = res[1], k = n - 1;
        while (k > res[1] && j > res[0] && i >= 0) {
            if (arr[i] != arr[j] || arr[j] != arr[k])
                return {-1, -1};
            i--, j--, k--;
        }
        return {res[0], res[1] + 1};
    }
};