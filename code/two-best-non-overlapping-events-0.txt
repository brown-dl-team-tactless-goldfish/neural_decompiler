class Solution {
public:
    int maxTwoEvents(vector<vector<int>>& events) {
        int n = events.size();
        vector<pair<int,int>>start;
        for(auto it :  events){
            start.push_back({it[0],it[2]}); //. save start time and value
        }
        sort(start.begin(),start.end()); // sort to use binary search
        vector<int>max_from_right(n);
        max_from_right[n-1] = start[n-1].second; // to get maximum value from i to n in O(1)
        for(int j = n-2;j>=0;j--){  
            max_from_right[j] = max(max_from_right[j+1],start[j].second);
        }
        vector<int>startTimes;
        for(int i = 0;i<n;i++){
            startTimes.push_back(start[i].first);
        }
        int ans = 0;
        for(int i = 0;i<n;i++){
            auto next_available = upper_bound(startTimes.begin(),startTimes.end(),events[i][1]);
            if(next_available!=startTimes.end()){
               ans = max(ans,events[i][2] + max_from_right[next_available - startTimes.begin()]); 
            }
            else{
                ans = max(ans,events[i][2]);
            }
                
        }
        return ans;
    }
};