    public class Solution
    {
        private const int MODULO = 1000000007;

        public int CountPairs(int[] deliciousness)
        {
            IDictionary<int, List<int>> map = new Dictionary<int, List<int>>();
            for (int i = 0; i < deliciousness.Length; i++)
            {
                if (!map.ContainsKey(deliciousness[i]))
                {
                    map[deliciousness[i]] = new List<int>();
                }

                map[deliciousness[i]].Add(i);
            }

            int res = 0;

            for (int i = 0; i < deliciousness.Length; i++)
            {
                //maximum sum will be 2^20 + 2^20 = 2^21
                //iterate through all possible powers of two
                for (int j = 0; j <= 21; j++)
                {
                    var target = 1 << j;
                    var other = target - deliciousness[i];

                    if (map.ContainsKey(other))
                    {
                        //to calculate unique pairs we should kepp indices order: in pair[idx1, idx2] idx2 > idx1
                        var list = map[other];
                        var found = list.BinarySearch(i);
                        if (found >= 0)
                        {
                            //we can't use the same index twice for one pair
                            found++;
                        }
                        else
                        {
                            found++;
                            found = -found;
                        }

                        res += (list.Count - found);
                        res %= MODULO;
                    }
                }
            }

            return res;
        }
    }