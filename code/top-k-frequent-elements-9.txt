

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int cmp(void *a, void *b)
{
    return *(int *)a - *(int *)b; 
}
struct Idx
{
    int count;
    int idx;
};
int* topKFrequent(int* nums, int numsSize, int k, int* returnSize){
    
    
    qsort(nums,numsSize,sizeof(int),cmp);
    struct Idx *tmp;
    tmp = (struct Idx *)malloc(sizeof(struct Idx) * numsSize);
    memset(tmp,0,sizeof(struct Idx) * numsSize);
    int i;
    int p = 0;
    tmp[p].idx = p;
    tmp[p].count++;
    
    for(i=1; i < numsSize; i++)
    {
        if(nums[i] != nums[i-1])
        {
            p++;
            tmp[p].idx = i;
        }
        tmp[p].count++;
        
    }

    int j;
    int c;
    int x;
    int e;
	//Sort the frequencies in decreasing order
    for(i=0; i <= p; i++)
    {
        c = tmp[i].count;
        x = i;
        for(j=i+1; j <= p; j++)
        {
            if(c < tmp[j].count)
            {
                c = tmp[j].count;
                x = j;
            }
        }
        c = tmp[i].count;
        e = tmp[i].idx;
        tmp[i].count = tmp[x].count;
        tmp[i].idx   = tmp[x].idx;
        tmp[x].count = c;
        tmp[x].idx   = e;
    }

    int * ret = (int *)malloc(sizeof(int) *k);
    memset(ret,0,sizeof(int) * k);
    for(i=0; i < k; i++)
    {
        ret[i] = nums[tmp[i].idx];
    }
    *returnSize = k;
    return &ret[0];
    
}