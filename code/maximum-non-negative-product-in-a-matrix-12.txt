class Solution {
public:
    int maxProductPath(vector<vector<int>>& grid) {
        int m = grid.size(); 
        int n = grid[0].size();
                
        vector<vector<pair<long,long>>> dp(m, vector<pair<long,long>>(n, {INT_MIN, INT_MAX}));
        
        for(int i = m-1; i >= 0; i--)
        {
            for(int j = n-1; j >= 0; j--)
            {
                //Last row, last col.
                if(i == m-1 && j == n-1)
                    dp[i][j] = {long(grid[i][j]),long(grid[i][j])};
                else if(i == m-1)//Last row
                    dp[i][j] = {long(grid[i][j]) * dp[i][j+1].first, long(grid[i][j]) * dp[i][j+1].first};
                else if( j == n - 1)//Last col
                    dp[i][j] = {long(grid[i][j]) * dp[i+1][j].first, long(grid[i][j]) * dp[i+1][j].first};
                else
                {
                    long m1 = long(grid[i][j]) * max(dp[i+1][j].first,   dp[i][j+1].first) ;
                    long m2 = long(grid[i][j]) * min(dp[i+1][j].second,  dp[i][j+1].second);

                    dp[i][j] = {max(m1,m2), min(m1,m2)};
                }
            }
        }
            
        return dp[0][0].first < 0 ? -1: dp[0][0].first%1000000007;
    }
};