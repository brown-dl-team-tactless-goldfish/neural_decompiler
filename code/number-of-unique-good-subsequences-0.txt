class Solution {
public:
    int mod = 1e9 + 7;
    #define ll long long
    int numberOfUniqueGoodSubsequences(string binary) {
        int len = binary.length();
        vector<ll> dp(len + 1);
        ll ans = 0;
        
        int last_occ_1 = 0;
        int last_occ_0 = 0;
        
        int i = 0;
        while(binary[i] == '0') i++;
        
        i = max(i, 1);
        for(i; i <= len; i++) {
            dp[i] = (2*dp[i - 1]) % mod;
            
            if(binary[i - 1] == '0') {
                if(last_occ_0) dp[i]-=dp[last_occ_0 - 1];
                
                last_occ_0 = i;
            } else {
                if(last_occ_1) dp[i]-=dp[last_occ_1- 1];
                else dp[i] = (dp[i] % mod + 1) % mod;
                
                last_occ_1 = i;
            }
            if(dp[i] < 0) dp[i]+=mod;
        }
        
        for(char c : binary) {
            if(c == '0') {
                dp[len]++;
                break;
            }
        }
        
        return dp[len];
    }
};