int add(int*** list, int i, int j, int last_time, int m, int n){
    long long k = 0;
    if (i + 1 < m){
        k += list[i+1][j][last_time];
    } else {
        k++;
    }
    if (i > 0){
        k += list[i-1][j][last_time];
    } else {
        k++;
    }
    if (j + 1 < n){
        k += list[i][j+1][last_time];
    } else {
        k++;
    }
    if (j > 0){
        k += list[i][j-1][last_time];
    } else {
        k++;
    }
    return k % 1000000007;
}

int findPaths(int m, int n, int maxMove, int startRow, int startColumn){
    if (maxMove == 0){
        return 0;
    }
    if (maxMove == 1){
        int ans = 0;
        if (startRow == 0){
            ans++;
        }
        if (startColumn == 0){
            ans++;
        }
        if (startRow == m-1){
            ans++;
        }
        if (startColumn == n-1){
            ans++;
        }
        return ans;
    }
    maxMove--;
    
    int*** list = malloc(sizeof(int**)*m);
    for (int i = 0 ; i < m ; i++){
        list[i] = malloc(sizeof(int*)*n);
        for (int j = 0 ; j < n ; j++){
            list[i][j] = calloc(2,sizeof(int));
        }
    }
    int count = 1;
    for (int i = 0 ; i < m ; i++){
        list[i][0][0]++;
        list[i][n-1][0]++;
    }
    for (int i = 0 ; i < n ; i++){
        list[0][i][0]++;
        list[m-1][i][0]++;
    }
    int last_time = 0;
    
    while (count < maxMove){
        int now = count%2;
        for (int i = 0 ; i < m ; i++){
            for (int j = 0 ; j < n ; j++){
                list[i][j][now] = add(list, i, j, last_time, m, n);
            }
        }
        last_time = now;
        count++;
    }
    int ans = add(list, startRow, startColumn, last_time, m, n);
    
    for (int i = 0 ; i < m ; i++){
        for (int j = 0 ; j < n ; j++){
            free(list[i][j]);
        }
        free(list[i]);
    }
    free(list);
    return ans;
}