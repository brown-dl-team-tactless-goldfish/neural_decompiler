class Solution {
public:
    long long totalCost(vector<int>& costs, int k, int candidates) {
         auto compare_func = [&](vector<int>& a, vector<int>& b){
             if(a[0] != b[0]){
                 return a[0] > b[0];
             }else{
                 return a[1] > b[1];
             }
         };   

         priority_queue<vector<int>, vector<vector<int>>,  decltype(compare_func)> pq(compare_func);

         int left = 0;
         int right = costs.size()-1;
         while(left<candidates && left<=right){
            vector<int> ele = {costs[left], left};
            pq.push(ele);
            left++;
         }
         while(right>=left && costs.size()-right<=candidates){

              pq.push({costs[right], right});
              right--;
         }

         long long res = 0;

         while(k--!=0){
             auto& pop_ele = pq.top();
             int cur_val = pop_ele[0];
             res += cur_val;
             int pop_index = pop_ele[1];

             pq.pop();

             if(left>right){
                 continue;
             }

             if(pop_index<left && left<=right){
                 pq.push({costs[left], left});
                 left++;
             }else if(pop_index>right && right>=left){
                 pq.push({costs[right], right});
                 right--;
             }
         }

         return res;
    }
};