    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k) {
        int low = pricing[0], high = pricing[1];
        const int n = grid.size(), m = grid[0].size();
        const vector<pair<int,int>> dirs = {{0,1}, {0, -1}, {-1,0}, {1,0}};
        queue<tuple<int,int,int>> q; //x, y, dis
        q.emplace(start[0], start[1], 0);
        vector<vector<int>> res;
        set<tuple<int,int,int, int>> st; //price, x, y
        while(!q.empty()){
            auto [i, j, d] = q.front(); q.pop();
            if(grid[i][j] == -1) continue; //visited;
            int& p = grid[i][j];
            if(low <= p && p <= high) st.insert(tuple(d, p, i, j));
            p = -1;
            for(auto [di, dj] : dirs){                
                int x = i+di, y = j+dj;
                if(x<0 || x>=n || y<0 || y>= m || grid[x][y] < 1) continue;
                q.emplace(x, y, d+1);
            }
        }
        for(auto [d, p, i, j] : st){
            if(res.size() == k) break;
            res.emplace_back(vector{i, j});
        }
        return res;
    }