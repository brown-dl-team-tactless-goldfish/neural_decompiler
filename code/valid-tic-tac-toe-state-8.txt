class Solution {
public:
    enum class RESULT;
    bool validTicTacToe(vector<string>& board) {
        int xNum = count(board, 'X'), oNum = count(board, 'O');
        
        if (xNum-oNum==1 || xNum-oNum==0) {
            RESULT res = judge(board);
            
            return res==RESULT::WINNONE || res==RESULT::WIN1 && xNum-oNum==1 || res==RESULT::WIN2 && xNum==oNum;
        } else {
            return false;
        }
    }
    
private:
    enum class RESULT {WIN1, WIN2, WINBOTH, WINNONE};
    int count(const vector<string>& board, char target) {
        int cnt = 0;
        
        for (const string& r:board) {
            for (char ch:r) {
                if (ch == target) {
                    cnt++;
                }
            }
        }
        return cnt;
    }
    RESULT judge(const vector<string>& board) {
        vector<int> rows(3, 0), cols(3, 0), diag(2, 0);
        bool is1Win = false, is2Win = false;
        
        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                if (board[r][c] == 'X') {
                    rows[r]++;
                    cols[c]++;
                    if (r == c) {
                        diag[0]++;
                    }
                    if (r+c == 2) {
                        diag[1]++;
                    }
                } else if (board[r][c] == 'O') {
                    rows[r]--;
                    cols[c]--;
                    if (r == c) {
                        diag[0]--;
                    }
                    if (r+c == 2) {
                        diag[1]--;
                    }
                }
            }
        }
        for (int idx = 0; idx < 3; idx++) {
            is1Win = is1Win || rows[idx]==3 || cols[idx]==3;
            is2Win = is2Win || rows[idx]==-3 || cols[idx]==-3;
        }
        is1Win = is1Win || diag[0]==3 || diag[1]==3;
        is2Win = is2Win || diag[0]==-3 || diag[1]==-3;
        if (is1Win) {
            if (is2Win) {
                return RESULT::WINBOTH;
            } else {
                return RESULT::WIN1;
            }
        } else {
            if (is2Win) {
                return RESULT::WIN2;
            } else {
                return RESULT::WINNONE;
            }
        }
    }
};