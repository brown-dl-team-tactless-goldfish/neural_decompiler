class Solution {
public:
    int firstDayBeenInAllRooms(vector<int>& nextVisit) {
        int n = nextVisit.size();
        vector<long long> daysToGetPast(n, 0);
        long long day = 0;
        int MOD = 1e9+7;
        
        for (int i = 0; i < n-1; ++i) {
            if (nextVisit[i] == i) {
                day = (day+2)%MOD;
            }
            else {
                
				long long p = 0; // p:= time to go from beginning to enter room#nextVisit[i]
                if (nextVisit[i] > 0) p = daysToGetPast[nextVisit[i]-1];
				
				// additional time to go from room#nextVisit[i]->entering room#[i]
                day = (((2*(day%MOD))%MOD-(p%MOD))+MOD)%MOD;
				// we visit room#i twice, so need to add that to total time
                day = (day+2)%MOD;
            }
			// cache the number of days required to get past room[i-1]
            daysToGetPast[i] = day%MOD;
        }
		
		// time to visit all rooms = time required to enter last (n-1) room = time required to get past second-last (n-2th) room
        return (int) daysToGetPast[n-2];
    }
};