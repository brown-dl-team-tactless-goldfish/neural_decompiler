class Solution {
public:
    vector<int>pr;
    int dp[501][501];
    int solve(int i,int j){
        if(i>=j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        dp[i][j]=0;
        for(int k=i+1;k<=j;++k){
            int ls=pr[k]-pr[i],rs=pr[j+1]-pr[k];
            if(ls<rs)dp[i][j]=max(dp[i][j],ls+solve(i,k-1));
            else if(ls>rs)dp[i][j]=max(dp[i][j],rs+solve(k,j));
            else dp[i][j]=max(dp[i][j],max(ls+solve(i,k-1),rs+solve(k,j)));
        }
        return dp[i][j];
    }
    int stoneGameV(vector<int>& stoneValue) {
        memset(dp,-1,sizeof(dp));
        pr.resize(stoneValue.size()+1);
        for(int i=0;i<size(stoneValue);++i)pr[i+1]=pr[i]+stoneValue[i];
        return solve(0,size(stoneValue)-1);
    }
};