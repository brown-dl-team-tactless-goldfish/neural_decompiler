class Solution {
public:
    vector<int> parent, g[100005];
    int ans, color[100005];
    void dfs(int u) {
        color[u] = 1;
        for(auto v: g[u]) {
            if(color[v] == 0) {
                parent.push_back(v);
                dfs(v);
                parent.pop_back();
            }
            else if(color[v] == 1) {
                int fl = 0, cnt = 0;
                for(auto x: parent) {
                    if(x == v) fl = 1;
                    if(fl) cnt++; 
                }
                ans = max(ans, cnt);
            }
        }
        color[u] = 2;
    }
    int longestCycle(vector<int>& edges) {
        for(int i=0; i<edges.size(); i++) {
            if(edges[i] != -1) g[i].push_back(edges[i]);
        }
        ans = -1;
        for(int u=0; u < edges.size(); u++) {
            if(color[u] == 0) {
                parent.push_back(u);
                dfs(u);
                parent.pop_back();
            }
        }
        return ans;
    }
};