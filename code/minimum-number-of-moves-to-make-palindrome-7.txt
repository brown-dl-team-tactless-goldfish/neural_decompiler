class Solution {
public:
    int minMovesToMakePalindrome(string s) {
        int res = 0;
        while(s.size() > 1) res += oneStep(s);
        return res;
    }

    int oneStep(string& s){
        vector<int> left(26, 9999), right(26, -1);
        const int n = s.size();
        for(int i=0;i<n;i++){
            left[s[i]-'a'] = min(left[s[i]-'a'], i);
            right[s[i]-'a'] = max(right[s[i]-'a'], i);
        }
        int bestChar = -1, minMove = 9999999;
        for(int i=0;i<26;i++){
            if(left[i] == right[i]) continue;
            int numMove = left[i] + n-1-right[i];
            if(numMove < minMove){
                minMove = numMove;
                bestChar = i;
            }
        }
        string t;
        for(int i=0;i<n;i++){
            if(i!= left[bestChar] && i!=right[bestChar])
            t += s[i];
        }
        s = move(t);
        return minMove;
    }
};