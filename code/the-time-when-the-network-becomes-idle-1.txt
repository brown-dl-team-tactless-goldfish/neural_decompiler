// OJ: https://leetcode.com/problems/the-time-when-the-network-becomes-idle/
// Author: github.com/lzl124631x
// Time: O(N + E)
// Space: O(N + E)
class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& E, vector<int>& P) {
        int N = P.size(), step = 0, ans = 0;
        vector<vector<int>> G(N);
        for (auto &e : E) {
            int u = e[0], v = e[1];
            G[u].push_back(v);
            G[v].push_back(u);
        }
        vector<bool> seen(N);
        seen[0] = true;
        queue<int> q{{0}};
        while (q.size()) {
            int cnt = q.size();
            while (cnt--) {
                int u = q.front();
                q.pop();
                for (int v : G[u]) {
                    if (seen[v]) continue;
                    seen[v] = true;
                    q.push(v);
                    int d = (step + 1) * 2; // the round-trip distance
                    ans = max(ans, 1 + (d - 1) / P[v] * P[v] + d); // `1 + (d - 1) / P[v] * P[v] + d` is the earliest second starting from which there is no messages from this server left in the network
                }
            }
            step++;
        }
        return ans;
    }
};