from collections import deque


class Solution:
    def minimumOperations(self, nums, start: int, goal: int) -> int:
        """
        Given an array of integers (nums), a start value (start),
        and a target value (goal), this program uses breadth-
        first search (BFS) with the help of a queue to determine
        the minimum number of operations needed to convert start
        to goal using nums and the add, subtract, xor operations.
        If it is not possible to reach goal, the program will
        return -1.

        :param nums: array of integers
        :type nums: list[int]
        :param start: start value
        :type start: int
        :param goal: target value
        :type goal: int
        :return: minimum operations needed to convert start
                 to goal, or -1 if conversion is not possible
        :rtype: int
        """
        
        """
        Initialize:
        - queue will contain entries with the following:
          - a value that will be converted using nums and the
            operations in this problem.
          - number of operations that it took to get to this
            value.
        - visited will contain previously converted values. It
          is used to prevent redundant conversion of the same
          values.
        """
        queue = deque()
        visited = set()
        
        """
        Breadth-First Search (BFS):
        - Begin with the start value (start).
        - Continue BFS while there is at least one entry in the
          queue or until the target value (goal) is reached.
        - If the queue becomes empty without goal being reached,
          return -1.
        """
        queue.append((start, 0))
        visited.add(start)
        while queue:
            x, ops = queue.popleft()
            for num in nums:
                for next_x in (x + num, x - num, x ^ num):
                    if next_x == goal:
                        return ops + 1
                    if 0 <= next_x <= 1000 and next_x not in visited:
                        visited.add(next_x)
                        queue.append((next_x, ops + 1))
        return -1