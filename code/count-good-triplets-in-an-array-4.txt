class Solution {
public:
    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
        vector<int> pos(nums1.size());
        vector<long long> presum(nums2.size() + 1, 0);
        vector<long long> before;
        
        for(int i = 0; i < nums1.size(); i++) {
            pos[nums1[i]] = i;
        }
        
        for(int i : nums2) {
            int j = pos[i] + 1;
            long long sum = 0;
            while(j) {
                sum += presum[j];
                j -= j & -j;
            }
            before.push_back(sum);
            j = pos[i] + 1;
            while(j < presum.size()) {
                presum[j]++;
                j += j & -j;
            }
        }

        long long res = 0;
        presum.assign(nums2.size() + 1, 0);
        for(int k = 0; k < nums2.size(); k++) {
            int i = nums2[k];
            int j = pos[i] + 1;
            long long sum = 0;
            while(j) {
                sum += presum[j];
                j -= j & -j;
            }
            res += sum;
            j = pos[i] + 1;
            while(j < presum.size()) {
                presum[j] += before[k];
                j += j & -j;
            }
        }
        
        return res;

    }
};