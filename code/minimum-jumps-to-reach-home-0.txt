class Solution {
public:
    int minimumJumps(vector<int>& forbidden, int a, int b, int x) {
        queue<pair<int,bool>> qs;
        bool r[6002][2] = {false};
        int n = forbidden.size();
        for(int i = 0; i<n; i++)
            r[forbidden[i]][0] = r[forbidden[i]][1] = true;
        qs.push(make_pair(0,true));
        r[0][0] = r[0][1] = true;
        int size = 1;
        int c = -1;
        while(!qs.empty())
        {
            size = qs.size();
            c++;
            while(size-- > 0)
            {
                auto q = qs.front();
                if (q.first == x)
                    return c;
                qs.pop();
                if (q.first + a <= 6001 && !r[q.first+a][0]) 
                {
                    qs.push(make_pair(q.first + a, true));
                    r[q.first + a][0] = true;
                }
                if (q.second && q.first - b >= 0 && !r[q.first - b][1])
                {
                    qs.push(make_pair(q.first - b, false));
                    r[q.first - b][1] = true;
                }
            }
        }
        return -1;
    }
};