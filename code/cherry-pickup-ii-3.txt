public class Solution 
{
    public int CherryPickup(int[][] grid) 
    {
        int r = grid.Length, c = grid[0].Length,  max = 0;
        var matrix = new int[c + 2, c + 2];
        for(int i = 0; i < matrix.GetLength(0); i++)
            for(int j = 0; j < matrix.GetLength(1); j++)
                matrix[i, j] = int.MinValue;
        
        var dp = (int[,]) matrix.Clone();
        dp[0, c + 1] = 0;
        
        for(int count = 0; count < r; count++)
        {
            var dpTemp = (int[,]) matrix.Clone();
            for(int i = 1; i <= c; i++)
            {
                for(int j = 1; j  <= c; j++)
                {
                    dpTemp[i, j] = new int[] {dp[i - 1, j - 1], dp[i - 1, j], dp[i - 1, j + 1], dp[i, j - 1], dp[i, j], dp[i, j + 1], dp[i + 1, j - 1], dp[i + 1, j], dp[i + 1, j + 1]}.Max();
                    dpTemp[i, j] += (i == j) ? grid[count][i - 1] : (grid[count][i - 1] + grid[count][j - 1]);
                    max = Math.Max(max, dpTemp[i, j]);
                }
            }
            
            dp = dpTemp;
        }
        
        return max;
    }
}