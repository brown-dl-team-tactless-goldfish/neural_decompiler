class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        std::vector<std::vector<std::pair<int,double>>> adj(n);
        for(int i{0}; i < edges.size(); ++i) adj[edges[i][0]].emplace_back(edges[i][1], succProb[i]), adj[edges[i][1]].emplace_back(edges[i][0], succProb[i]);
        std::priority_queue<std::pair<double,int>, std::vector<std::pair<double,int>>, Cmp> pq;
        pq.emplace(1.0, start);
        std::bitset<10001> visited;
        while(!pq.empty()) {
            auto [p, n]{pq.top()}; pq.pop();
            if(visited[n]) continue;
            if(n == end) return p;
            visited[n] = true;
            for(const auto &[e, c]: adj[n]) {
                if(!visited[e]) pq.emplace(p*c, e);
            }
        }
        
        return 0;
    }
};