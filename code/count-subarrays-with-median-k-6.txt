class Solution {
public:
    int countSubarrays(vector<int>& nums, int k) {
        
        //First find the index of the element k
        int id = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] == k ) {
                id = i;
                break;
            }
        }
        
        // Now create left array to store the number which may be the part of the left subarray 
        //     and tells the postion of number 'k' from the left
        //     increment for the number which are less than 'k' and decrement for the number which are greater than 'k'
        // Now create right array to store the number which may be the part of the right subarray 
        //     and tells the postion of number 'k' from the right                
        //     increment for the number which are greater than 'k' and decrement for the number which are less than 'k' 
        
        vector<int>left , right;
        left.push_back(0);
        right.push_back(0);
        
        int ct = 0;
        for(int i = id-1; i>=0; i--){
            if(nums[i] < k) ct++;
            else ct--;
            
            left.push_back(ct);
        }
        
        ct = 0;
        for(int i = id+1; i<nums.size(); i++){
            if(nums[i] > k) ct++;
            else ct--;
            
            right.push_back(ct);
        }
        
        //Sort both the left and right array
        sort(left.begin() , left.end());
        sort(right.begin() , right.end());

//         After sorting the subarray 
//         Let there are 'x' element in right
//         then for the MEDIAN to be 'k' there should be 'x' or 'x-1'element in left
        
//         For example array = [3, 4, 5, 6, 7]
//         Here for element '5' to be MEDIAN, there are 2 element in the right and 2 element in the left
                
//         array = [3, 4, 5, 6, 7, 8]                
//         Here for element '5' to be MEDIAN, there are 3 element in the right and 2 element in the left
        
        
        
        // For each element 'x' in right array 
        // find how many element are there in left array which are equal to 'x'
        //     +  how many element are there in left array which are equal to 'x-1'
        // Apply Binary Search to find in O(logn) for each element 
        int ans  = 0;
        for(auto i : right){
            vector<int>::iterator lower, upper;
            lower = lower_bound(left.begin(), left.end() , i);
            upper = upper_bound(left.begin(), left.end() , i);            
            ans += upper - lower;            
            
            lower = lower_bound(left.begin(), left.end() , i-1);
            upper = upper_bound(left.begin(), left.end() , i-1);            
            ans += upper - lower;
        }
        return ans;        
    }
    
};