class Solution {
public:
    int n;
    vector<int> cycleLengthQueries(int n, vector<vector<int>>& queries) {
        this->n = n;
        vector<int> res;
        for(auto& ele: queries){
            if(ele[0] == ele[1]){
                res.push_back(1);
                continue;
            }

            int num = getNumEdges(ele[0], ele[1]);
            res.push_back(num);
        }

        return res;
    }

    int getNumEdges(int a, int b){
         vector<int> list_a;
         while(a!=0){
             list_a.push_back(a);
             a >>= 1;
         }

        vector<int> list_b;
        while(b!=0){
            list_b.push_back(b);
            b >>= 1;
        }

        reverse(list_a);
        reverse(list_b);

        int i = 0;
        while(i<list_a.size() && i < list_b.size()){
            if(list_a[i] != list_b[i]){
                break;
            }
            i++;
        }

        int h1 = list_a.size() - i;
        int h2 = list_b.size() - i;
        return h1 + h2 + 1; 
    }

    void reverse(vector<int>& a){
        int i = 0;
        int j = a.size()-1;
        while(i<j){
            int t = a[i];
            a[i] = a[j];
            a[j] = t;
            i++;
            j--;
        }
    }


    
};