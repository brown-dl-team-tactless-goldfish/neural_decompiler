class Solution {
public:
    int kthSmallest(vector<vector<int>>& mat, int k) {
        int res = 0;
        unordered_set<string> uset;
        auto cmp = [&](vector<int> &a, vector<int> &b){
            int suma = 0, sumb = 0;
            for(int i = 0 ; i < mat.size(); i++) {
                auto idx = a[i];
                suma += mat[i][idx];
            }
            for(int i = 0 ; i < mat.size(); i++) {
                auto idx = b[i];
                sumb += mat[i][idx];
            }
            return suma > sumb;
        };
        priority_queue<vector<int>, vector<vector<int>>, decltype(cmp)> pq(cmp);
        vector<int> curr(mat.size(), 0);
        pq.push(curr);
        uset.insert(vec2str(curr));
        k--;
        while(k > 0) {
            curr = pq.top();
            pq.pop();
            for(auto &idx : curr) {
                if(idx < mat[0].size()-1) {
                    idx++;
                    if(!uset.count(vec2str(curr)))
                        pq.push(curr);
                    uset.insert(vec2str(curr));
                    idx--;
                }
            }
            k--;
        }
        curr = pq.top();
        for(int i = 0; i < curr.size(); i++) {
            auto idx = curr[i];
            res += mat[i][idx];
        }
        return res;
    }
    string vec2str(vector<int> &vec) {
        string str;
        for(auto v: vec)
            str += to_string(v);
        return str;
    }
};