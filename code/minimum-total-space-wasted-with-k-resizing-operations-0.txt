class Solution {
public:
    int minSpaceWastedKResizing(vector<int>& nums, int k) {
        int n = nums.size() ;
        vector<vector<int>>dp(n, vector<int>(k+1, INT_MAX/2)) ;
        int mx = 0 ;
        int sum = 0 ;
        for(int i = 0; i < n; i++){
            mx = max(mx, nums[i]) ;
            sum += nums[i] ;
            dp[i][0] = (i+1)*mx - sum ;
        }
    
        for(int i = 1 ; i < n ; i++){
            for(int j = 1; j <= min(i, k); j++){
                int mx = 0 ;
                int sum = 0 ;
                for(int s = i; s >= 1; s--){
                    mx = max(mx, nums[s]) ;
                    sum += nums[s] ;
                    dp[i][j] = min(dp[i][j], dp[s-1][j-1] + mx*(i-s+1) - sum) ;
                }
            }
        }
        return *min_element(dp[n-1].begin(), dp[n-1].end()) ;
    }
};