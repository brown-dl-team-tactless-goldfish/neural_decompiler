// min : i + 2*(prefix[j] - prefix[i-1]) + n-j-1
//  ==>  [2* prefix[j] - j ] - [2 * prefix[i-1] -(i-1)] + n
//  ==>  Fn(j) - Fn(i-1) + n
//  ==>  Fn(0) = 1;  since prefix[-1] = 0;
int minimumTime(char * s){
    int n = strlen(s);
    int ans = n;
    int* prefix = malloc(n * sizeof(int));
    prefix[0] = (s[0] == '1');
    for(int i = 1; i <n; i++){
        prefix[i] = prefix[i-1] + (s[i] == '1');
    }
    int MaxFn = 1;  //so far, max of Fn
    for(int j = 0; j < n ; j++){
        int new = 2*prefix[j] - j;
        ans = fmin(ans, new - MaxFn + n);
        MaxFn = fmax(MaxFn, new);
    }
    return ans;
}