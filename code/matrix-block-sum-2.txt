int** matrixBlockSum(int** mat, int matSize, int* matColSize, int K, int* returnSize, int** returnColumnSizes){
    int n=matSize,m=*matColSize;
    *returnSize=n;
    (*returnColumnSizes)=(int*)malloc(sizeof(int)*n);
    int dp[n+1][m+1];
    for(int i=0;i<=n;i++)
        for(int j=0;j<=m;j++)
            dp[i][j]=0;
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
            dp[i][j]=mat[i-1][j-1]+dp[i][j-1]+dp[i-1][j]-dp[i-1][j-1];
    for(int i=1;i<=n;i++){
        (*returnColumnSizes)[i-1]=m;
        for(int j=1;j<=m;j++){
            int c1=(j-K>0)? j-K : 1;
            int r1=(i-K>0)? i-K : 1;
            int c2=(j+K>m)? m : j+K;
            int r2=(i+K>n)? n : i+K;
            mat[i-1][j-1]=dp[r2][c2]+dp[r1-1][c1-1]-dp[r2][c1-1]-dp[r1-1][c2];
        }
    }
    return mat;
}