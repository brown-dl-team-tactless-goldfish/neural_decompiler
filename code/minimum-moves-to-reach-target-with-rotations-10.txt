class Solution {
public:
    int minimumMoves(const vector<vector<int>>& grid) {
        int row = grid.size(), col = grid.front().size();
        if (grid[row - 1][col - 1] == 1 || grid[row - 1][col - 2] == 1) return -1;
        vector<vector<vector<bool>>> vi(row, vector<vector<bool>>(col, vector<bool>(2, false)));
        queue<int> q;
        q.emplace(0 * 10000 + 0 * 10 + 0);
        vi[0][0][0] = true;
        int step = 0;
        while (q.size()) {
            int len = q.size();
            while (len-- > 0) {
                int cr = q.front() / 10000;
                int cc = (q.front() % 10000) / 10;
                int cd = q.front() % 10;
                q.pop();

                if (cr == row - 1 && cc == col - 2 && cd == 0) return step;

                if (cd == 0) {
                    //if (check(grid, cr, cc - 1)) put(q, cr, cc - 1, 0, vi); // left
                    if (check(grid, cr, cc + 2)) put(q, cr, cc + 1, 0, vi); // right
                    //if (check(grid, cr - 1, cc) && check(grid, cr - 1, cc + 1)) put(q, cr - 1, cc, 0, vi); // top
                    if (check(grid, cr + 1, cc) && check(grid, cr + 1, cc + 1)) put(q, cr + 1, cc, 0, vi); // bottom
                    if (check(grid, cr + 1, cc) && check(grid, cr + 1, cc + 1)) put(q, cr, cc, 1, vi); // rotate
                } else {
                    //if (check(grid, cr, cc - 1) && check(grid, cr + 1, cc - 1)) put(q, cr, cc - 1, 1, vi); // left
                    if (check(grid, cr, cc + 1) && check(grid, cr + 1, cc + 1)) put(q, cr, cc + 1, 1, vi);; // right
                    //if (check(grid, cr - 1, cc)) put(q, cr - 1, cc, 1, vi); // top
                    if (check(grid, cr + 2, cc)) put(q, cr + 1, cc, 1, vi); // bottom
                    if (check(grid, cr, cc + 1) && check(grid, cr + 1, cc + 1)) put(q, cr, cc, 0, vi); // rotate
                }
            }
            step++;
        }
        return -1;
    }

    bool check(const vector<vector<int>>& g, int row, int col) {
        if (row < 0 || col < 0 || row >= g.size() || col >= g.front().size()) return false;
        if (g[row][col]) return false;
        return true;
    }

    void put(queue<int>& q, int row, int col, int dir, vector<vector<vector<bool>>>& vi) {
        if (vi[row][col][dir]) return;
        vi[row][col][dir] = true;
        q.emplace(row * 10000 + col * 10 + dir);
    }
};