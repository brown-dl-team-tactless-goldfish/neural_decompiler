int backtrack(int *nums, int n, int i, int target, int **map)
{
    bool r1=0,r2=0;
    int t;
    if (target == 0)
        return 1;
    
    if (i>=n || target < 0)
        return 0;
    
    if (map[i][target] != -1)
        return map[i][target];
    
    r1 = backtrack(nums,n,i+1,target-nums[i],map);
    r2 = backtrack(nums,n,i+1,target,map);
    map[i][target] = r1 || r2;
    return map[i][target];
}
bool canPartition(int* nums, int numsSize){
    
    int i,j;
    int target=0;
    int **map = (int **)malloc(sizeof(int *) * numsSize);

    for (i=0; i < numsSize; i++)
    {
        target = target + nums[i];
    }
    
    if ((target%2) != 0)
        return 0;
    else
    {  
         target/=2;
         for (i=0; i < numsSize; i++)
         {
             map[i] = (int *)malloc(sizeof(int) * target);
         }
         for (i=0; i < numsSize; i++)
         {
             for (j=0; j < target; j++)
             {
                 map[i][j]=-1;
             }
         }
         return backtrack(nums,numsSize,1,target-nums[0],map);
    }
}