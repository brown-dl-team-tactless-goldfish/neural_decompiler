class Solution {
    int dfs1(int node, int pre, vector<int> adj[], vector<int> &cnt) {
        int c = 1;
        for(int ad : adj[node]) {
            if(ad == pre) continue;
            c += dfs1(ad, node, adj, cnt);
        }
        return cnt[node] = c;
    }
    void dfs2(int node, int pre, vector<int> adj[], vector<int> &cnt, int n, unordered_map<long long, int> &m) {
        long long p = 1;
        for(int ad : adj[node]) {
            if(ad == pre) {
                p *= n - cnt[node];
                continue;
            }
            p *= cnt[ad];
            dfs2(ad, node, adj, cnt, n, m);
        }
        m[p]++;
    }

public:
    int countHighestScoreNodes(vector<int>& parents) {
        int n = parents.size(), ans;
        long long mx = 0;
        vector<int> adj[n];
        for(int i=1; i<n; i++) adj[i].push_back(parents[i]), adj[parents[i]].push_back(i);

        vector<int> cnt(n);
        dfs1(0, -1, adj, cnt);
        
        unordered_map<long long, int> m;
        dfs2(0, -1, adj, cnt, n, m);

        for(auto i : m) {
            if(i.first > mx) ans = i.second, mx = i.first;
        }
        return ans;
    }
};