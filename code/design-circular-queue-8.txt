typedef struct {
    int head, tail, count, size;
    int* q;
} MyCircularQueue;

/** Initialize your data structure here. Set the size of the queue to be k. */

MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue* queue = malloc(sizeof *queue);
    queue->q = malloc(sizeof(int) * k);
    queue->head = queue->tail = queue->count = 0;
    queue->size = k;
    return queue;
}

/** Checks whether the circular queue is empty or not. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    return obj->count == 0;
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) {
    return obj->count == obj->size;
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj)) return -1;
    return obj->q[obj->head]; 
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj)) return -1;
    int id = (obj->tail - 1 + obj->size) % obj->size;
    return obj->q[id];
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj);
}

/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if (myCircularQueueIsFull(obj)) return false;
    obj->q[obj->tail] = value;
    obj->tail = (obj->tail+1) % obj->size;
    obj->count++;
    return true;
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj)) return false;
    obj->count--;
    obj->head = (obj->head + 1) % obj->size;
    return true;
}