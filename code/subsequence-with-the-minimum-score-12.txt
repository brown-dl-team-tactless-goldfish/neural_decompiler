class Solution {
public:
    int minimumScore(string s, string t) {
        vector<int> left, right;
        int idx = 0; int n = t.size();
        
        // Scan for left to right get the maxiumm matches
        for (int i = 0; (i < s.size()) && (idx < n); i++) {
            if (s[i] == t[idx]) {
                left.push_back(i);
                idx++;
            }
        }
        // initial result will be unmatached characters from the left
        int result = n-left.size();
        idx = n-1;
        
        // try matching characters from right to left
        for (int i = s.size()-1; (i >= 0) && (idx >= 0) && (result != 0); i--) {
            if (s[i] == t[idx]) {
                // in order to push to right, left wipe out the matches from left part
                // greater than equal to current index
                while (left.size() && (left.back() >= i)) {
                    // if moving from right to left we found this character earlier
                    // then we pop from left and let right proceed further 
                    left.pop_back();
                }
                right.push_back(i);
                // compute the current state of the unmatched character 
                int cur = (n - (left.size() + right.size()));
                result = min(result,cur);
                idx--;
            }
        }
        
        return result;
    }
};