int cmpfunc(const void* a, const void* b){
    int* arr1 = *(int**)a;
    int* arr2 = *(int**)b;
    return arr2[0] - arr1[0];
}

int largestValsFromLabels(int* values, int valuesSize, int* labels, int labelsSize, int numWanted, int useLimit){
    int n = valuesSize;
    int** data = malloc(n * sizeof(int*));
    for(int i = 0; i < n; i++){
        data[i] = malloc(2 * sizeof(int));
        data[i][0] = values[i];
        data[i][1] = labels[i];
    }
    qsort(data, n, sizeof(int*), cmpfunc);
    int N = numWanted;
    int** hash = calloc(N, sizeof(int*));
    int sum = 0;
    int items = 0;
    for(int i = 0; i < n; i++){
        int d = data[i][1];
        while(1){
            if(hash[ d % N ] == NULL){
                hash[ d % N ] = malloc(2 * sizeof(int));
                hash[ d % N ][0] = data[i][1];
                hash[ d % N ][1] = 1;
                sum += data[i][0];
                items++;
                if(items == numWanted  )
                    return sum;
                break;
            }    
            else{
                if(hash[ d % N ][0] == data[i][1]){
                    if(hash[ d % N ][1] < useLimit ){ 
                        hash[ d % N ][1]++;
                        items++;
                        sum += data[i][0];
                        if(items == numWanted  )
                            return sum;
                    }
                    break;
                }
                else
                    d++;
            }
        }
    }
    return sum;
}