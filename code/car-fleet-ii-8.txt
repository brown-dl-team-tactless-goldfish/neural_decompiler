class Solution {
public:
    std::vector<double> getCollisionTimes(std::vector<std::vector<int>>& cars) {
        const int len = cars.size();
        std::vector<double> results(len, INFINITY);
        
        std::stack<int> carStack;
        
        if (len >= 2) {
            // only process them if there are >= 2 cars
            carStack.push(len - 1);
            for (int i = len - 2; i >= 0; --i) {
                // cars[i][0]: position
                // cars[i][1]: speed
                
                // Rationale: keep track of cars to consider in a stack.
                // If there are cars A, B, C in a sequence,
                // then car A cannot hit car C before it hits car B, since when two cars
                // hit together, the faster car slows down to the speed of the slower car.
                // Also if B hits C first, then the time for A to hit B is equal to the time
                // for A to hit C.
                while (!carStack.empty()) {
                    int nextCar = carStack.top();
                    
                    if (cars[i][1] <= cars[nextCar][1]) {
                        // cannot catch next car due to speed
                        carStack.pop();
                        continue;
                    }
                    
                    double dist = cars[nextCar][0] - cars[i][0];
                    double speedDiff = cars[i][1] - cars[nextCar][1];
                    double catchTime = dist / speedDiff;
                    if (catchTime > results[nextCar]) {
                        // car i cannot hit nextCar
                        // before nextCar hits any car in front of it
                        carStack.pop();
                        continue;
                    }
                    else {
                        results[i] = catchTime;
                        break;
                    }
                }
                carStack.push(i);
            }
        }
        
        for (auto& result: results) {
            if (result == INFINITY) {
                result = -1;
            }
        }
        return results;
    }
};