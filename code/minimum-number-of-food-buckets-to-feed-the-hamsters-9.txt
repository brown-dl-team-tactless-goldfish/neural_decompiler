class Solution {
public:
int isSubstring(string s1, string s2) {
    if (s2.find(s1) != string::npos)
        return s2.find(s1);
    return -1;
}
    int minimumBuckets(string &s) {
        int n = s.size();
        int res = isSubstring("HHH", s);
        if(res != -1) return -1;
        int h = isSubstring("H",s);
        if(h == -1) return 0;
        int dot = isSubstring(".", s);
        if(dot == -1) return -1;
        for(int i = 0; i < n; i++) {
            if(i == 0 && s[i]=='H' && i + 1 < n && s[i + 1]=='H') return -1;
            if(i == n-2 && s[i]=='H' && s[i+1]=='H') return -1;
        }
        int c = 0;
        vector<int>vis(n, 0);
        for(int i = 0; i < n; i++) {
            if(s[i]=='.' || vis[i]) continue;
            if(i+2 < n && s[i]=='H' && s[i+1]=='.' && s[i+2]=='H') {
                c++;
                vis[i]=vis[i+2]=1;
            }
        }
        for(int i = 0; i < n; i++) {
            if(s[i]=='H' && !vis[i]) c++;
        }
        return c;
    }
};