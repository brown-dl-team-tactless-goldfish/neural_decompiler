void swap(int *a,int *b)
{
    int t;
    t=*a;
    *a=*b;
    *b=t;
}

                                        /* Quick Sort Algo */
int partition(int *arr,int l,int h)
{
    int i=l,j=h;
    int pivot=arr[l];
    do{
        while(i<h && pivot>=arr[i])
            i++;
        while(j>0 && pivot<arr[j])
            j--;
        if(i<j)
            swap(&arr[i],&arr[j]);
    }while(i<j);
    swap(&arr[j],&arr[l]);
    return j;
}

void sort(int *arr,int l,int h)
{
    if(l<h)
    {
        int index=partition(arr,l,h);
        sort(arr,l,index-1);
        sort(arr,index+1,h);
    }
}

                                             /* Recurssive Function */


int lastStoneWeight(int* stones, int stonesSize){  
    
    if(stonesSize==0)                               //if no elements in array return 0
        return 0;
    if(stonesSize==1)                               //if only one elememt remains return that
        return stones[stonesSize-1];
    
    else
    {
        sort(stones,0,stonesSize-1);                            //first sort array
        
        if(stones[stonesSize-1]==stones[stonesSize-2])          //then check biggest two elements if equal then remove both from array by calling function with stonesSize-2
        {
            return(lastStoneWeight(stones,stonesSize-2));
        }
        else
        {
            int diff=abs(stones[stonesSize-1]-stones[stonesSize-2]);        //if not equal then find difference
            stones[stonesSize-2]=diff;                                      //put in last second element
            return(lastStoneWeight(stones,stonesSize-1));                   //and remove last element by calling function with stonesSize-1
        }
    }
}