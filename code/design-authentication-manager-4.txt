struct Cmp {
    bool operator()(const std::pair<string,int>& a, const std::pair<string,int>& b) const {
        return a.second < b.second;
    }
};

class AuthenticationManager {
public:
    AuthenticationManager(int timeToLive): timeSpan{timeToLive} {}
    
    void generate(string tokenId, int currentTime) {
        tokens.emplace(tokenId, currentTime+timeSpan);
        lastTime[tokenId] = currentTime+timeSpan;
    }
    
    void renew(string tokenId, int currentTime) {
        if(!tokens.count(std::pair(tokenId, lastTime[tokenId]))) return;
        if(lastTime[tokenId] <= currentTime) return;
        tokens.erase(std::pair(tokenId, lastTime[tokenId]));
        lastTime[tokenId] = currentTime+timeSpan;
        tokens.emplace(tokenId, currentTime+timeSpan);
    }
    
    int countUnexpiredTokens(int currentTime) {
        if(tokens.empty()) return 0;
        int count{0};
        auto it{tokens.begin()};
        while(it != tokens.end() && it->second <= currentTime) {
            lastTime.erase(it->first);
            it = tokens.erase(it);
        }

        return tokens.size();
    }
    
    int timeSpan;
    std::set<std::pair<string, int>, Cmp> tokens;
    std::unordered_map<string, int> lastTime;
};