#define INVALID INT_MAX 
int g_matrix[101][101];
int min_sum(int i, int j, int col, int row, int ** matrix);
int give_min(int a, int b, int c);
int minFallingPathSum(int** matrix, int matrixSize, int* matrixColSize){
    
    int i,j;
    int a,b,c,min=INVALID;
    int k;
    i=j=0;
    for (i=0; i < matrixSize; i++)
    {
        for (j=0; j < *matrixColSize; j++)
        {
            g_matrix[i][j] = INVALID;
        }
    }
    i=0;j=0;

    for (;j < *matrixColSize; j++)
    {
        k = min_sum(i,j,*matrixColSize,matrixSize,matrix); 
        if (k < min)
        {
            min = k;
        }
        
    }
    return min;
}


int min_sum(int i, int j, int col, int row, int ** matrix)
{
    
    int a,b,c,min;
    
    if (j < 0 || j >= col || i >= row)
    {
        return INVALID;
    }
    if (g_matrix[i][j] != INVALID)
    {
        return g_matrix[i][j];
    }
    a = min_sum(i+1,j-1,col,row,matrix);
    b = min_sum(i+1,j,col,row,matrix);
    c = min_sum(i+1,j+1,col,row,matrix);
    
    if ((min = give_min(a,b,c)) == INVALID)
    {
        min = 0;
    }
    g_matrix[i][j] = matrix[i][j] + min;
    
    return  g_matrix[i][j];
}

int give_min(int a, int b, int c)
{
    if (a < b && a < c)
    {
        return a;
    }
    else if (b < c)
    {
        return b;
    }
    else
    {
       return c;
    }
}