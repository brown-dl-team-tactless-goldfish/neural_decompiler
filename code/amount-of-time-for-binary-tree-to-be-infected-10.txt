/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*,TreeNode*> parent;
    unordered_set<int> set;
    TreeNode* target;
    int res=0;
    int amountOfTime(TreeNode* root, int start) {
        //find the parent node for every node
        find(root,start);
        dfs(target,0);
        return res;
        // return 0;
    }
    //find the total time 
    void dfs(TreeNode* curr,int time)
    {
        if(!curr || set.count(curr->val))
            return ;
        set.insert(curr->val);
        res=max(res,time);
        dfs(curr->left,time+1);
        dfs(curr->right,time+1);
        if(parent.find(curr)!=parent.end())
            dfs(parent[curr],time+1);
    }
    //map the parents node and also find the start node 
    void find(TreeNode* curr,int& start)
    {
        if(!curr)
            return ;
        if(curr->val==start)
            target=curr;
        if(curr->left)
            parent[curr->left]=curr;
        if(curr->right)
            parent[curr->right]=curr;
        find(curr->left,start);
        find(curr->right,start);
    }
};