typedef struct{
    int id;
     int s;
    int e;   
    char depart[11];
    char destination[11];

}travelinfo;

typedef struct {
    travelinfo  data[20000];
    int custom;
} UndergroundSystem;


UndergroundSystem* undergroundSystemCreate() {
    UndergroundSystem* obj =(UndergroundSystem*)malloc(sizeof(UndergroundSystem));
    memset(obj->data, 0, sizeof(travelinfo)*20000);
    obj->custom=0;
    return obj;
}

void undergroundSystemCheckIn(UndergroundSystem* obj, int id, char * stationName, int t) {
    obj->data[obj->custom].id = id;
    strncpy(obj->data[obj->custom].depart, stationName, strlen(stationName));
    obj->data[obj->custom].depart[strlen(stationName)]=NULL;
    obj->data[obj->custom].s = t;
    obj->data[obj->custom].destination[0]=NULL;
    obj->data[obj->custom].e = 0;
    obj->custom+=1;        

}

void undergroundSystemCheckOut(UndergroundSystem* obj, int id, char * stationName, int t) {
    for(int i=0;i<obj->custom;i++){
        if(obj->data[i].id==id && obj->data[i].e==0){
            strncpy(obj->data[i].destination, stationName, strlen(stationName));
            obj->data[obj->custom].destination[strlen(stationName)]=NULL;
            obj->data[i].e= t;
            break;
        }
    }
}

double undergroundSystemGetAverageTime(UndergroundSystem* obj, char * startStation, char * endStation) {
    int  ret=0, i=0,cnt=0;

    for(i=0;i<obj->custom;i++){
        if(!strcmp(obj->data[i].depart,startStation ) && !strcmp(obj->data[i].destination, endStation)){
            cnt++;
            ret+=(obj->data[i].e - obj->data[i].s);
        }
    }

    return (double)ret/cnt;
}

void undergroundSystemFree(UndergroundSystem* obj) {
    free(obj);
}
