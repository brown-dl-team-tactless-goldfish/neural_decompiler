class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& nums) {
        sort(nums.begin(),nums.end());
        
        priority_queue<long,vector<long>,greater<long>> time;
        priority_queue<int,vector<int>,greater<int>> q;
        priority_queue<pair<long,long>,vector<pair<long,long>>,greater<pair<long,long>>> mp;
        queue<long> line;
        
        for(int i = 0; i<nums.size();++i)  time.push(nums[i][0]);
        
        vector<long> re(n+1,0);
        for(long i = 0; i<n;++i) q.push(i);
        
        long k = 0, i = 0;
        while(k<nums.size() || mp.size()){
            i = time.top(); time.pop(); 
            if(k<nums.size() && nums[k][0]<=i){
                line.push(k); k++;
            }
            while(mp.size() && mp.top().first<=i){
                q.push(mp.top().second); mp.pop();
            }
            while(line.size() && q.size()){
                long l = q.top(); q.pop();
                re[l]++; 
                long in = line.front(); line.pop();
                mp.push({i+(nums[in][1]-nums[in][0]),l});
                time.push(i+(nums[in][1]-nums[in][0]));
            }
        }
        long ans = 0, m = 0;
        for(long i = 0; i<n;++i){
            if(m<re[i]){
                m = re[i];
                ans = i;
            }
        }
        return ans;
    }
};