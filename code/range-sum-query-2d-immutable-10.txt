typedef struct {
    int** matrix;
    int cols;
    int rows;
} NumMatrix;

NumMatrix* numMatrixCreate(int** matrix, int matrixRowSize, int matrixColSize) {
    if(matrix && matrixColSize && matrixRowSize)
    {
        NumMatrix* m = malloc(sizeof(NumMatrix));
        m->matrix = malloc(matrixRowSize * sizeof(int*));
        for(int i = 0; i < matrixRowSize; ++i)
            m->matrix[i] = calloc(matrixColSize, sizeof(int));
        m->cols = matrixColSize;
        m->rows = matrixRowSize;
        for(int i = 0; i < matrixRowSize; ++i)
            for(int j = 0; j < matrixColSize; ++j)
                if(j == 0)
                    m->matrix[i][j] = matrix[i][j] + m->matrix[i][j];
                else
                    m->matrix[i][j] = matrix[i][j] + m->matrix[i][j-1];
        for(int i = 1; i < matrixRowSize; ++i)
            for(int j = 0; j < matrixColSize; ++j)
                m->matrix[i][j] += m->matrix[i-1][j];

        return m;
    }
    return NULL;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
    int sum = obj->matrix[row2][col2];
    if(col1 != 0)
        sum -= obj->matrix[row2][col1 - 1];
    if(row1 != 0)
        sum -= obj->matrix[row1 - 1][col2];
    if(row1 != 0 && col1 != 0)
        sum += obj->matrix[row1 - 1][col1 - 1];
    return sum;
}

void numMatrixFree(NumMatrix* obj) {
    if(obj)
    {
        for(int i = 0; i < obj->rows; ++i)
            free(obj->matrix[i]);
        free(obj->matrix);
        free(obj);
    }
}

/**
 * Your NumMatrix struct will be instantiated and called as such:
 * struct NumMatrix* obj = numMatrixCreate(matrix, matrixRowSize, matrixColSize);
 * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);
 * numMatrixFree(obj);
 */