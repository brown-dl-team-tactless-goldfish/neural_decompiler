class Solution {
public:
    using VS = vector<string>;
    using VVS = vector<VS>;
    using VVI = vector<vector<int>>;
    using Queue = queue<int>;
    using Seen = unordered_set<int>;
    using Count = unordered_map<string, int>;
    using Pairs = vector<pair<int, string>>;
    VS watchedVideosByFriends(VVS& watchedVideos, VVI& friends, int id, int target, Count cnt = {}, Pairs p = {}, VS ans = {}) {
        Queue q{{id}};
        Seen seen{id};
        for (auto depth = 0; !q.empty() && depth < target; ++depth)
            for (auto n = q.size(); n--; q.pop())
                for (auto i: friends[q.front()])
                    if (seen.insert(i).second)
                        q.push(i);
        for (; !q.empty(); q.pop())
            for (auto k: watchedVideos[q.front()])
                ++cnt[k];
        for (auto& pair: cnt)
            p.push_back({pair.second, pair.first});
        sort(p.begin(), p.end());
        transform(p.begin(), p.end(), back_inserter(ans), [](auto& pair) { return pair.second; });
        return ans;
    }
};