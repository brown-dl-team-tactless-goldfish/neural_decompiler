class Solution {
public:
    int kthSmallest(vector<vector<int>>& mat, int k) {
        int m=mat.size();
        int n=mat[0].size();        
        int sum=0;
        for (int i=0;i<m;i++)
            sum+=mat[i][0];
        multimap<int,vector<int>> qmap;
        
        vector<int> dp(m,0);
        qmap.insert(std::pair<int,vector<int>>(sum,dp));        
        map<vector<int>,bool> used;
        used[dp]=true;
        while (k--){            
            std::multimap<int,vector<int>>::iterator it=qmap.begin();
            sum=(*it).first;
                     
            vector<int> pos=(*it).second;
            for (int i=0;i<m;i++)
                if (pos[i]<n-1)
                {
                    pos[i]++;
                    int newsum=sum+mat[i][pos[i]]-mat[i][pos[i]-1];
                    if (used.find(pos)==used.end())
                    {
                       
                       qmap.insert(std::pair<int,vector<int>>(newsum,pos));
                        used[pos]=true;
                    }
                    pos[i]--;
                }
            qmap.erase(it);
          
        }
      
        return sum;
                    
    }
};