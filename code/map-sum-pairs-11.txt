     public class MapSum
    {
        private class TrieNode
        {
            public int? Value;
            public readonly Dictionary<char, TrieNode> Next = new Dictionary<char, TrieNode>();
        }

        private class Trie
        {
            private TrieNode _root = new TrieNode();

            private void AddValue(TrieNode node, ref string key, int idx, int value)
            {
                if (idx == key.Length)
                {
                    node.Value = value;
                    return;
                }

                char c = key[idx];
                TrieNode nextNode = null;

                if (node.Next.ContainsKey(c))
                {
                    nextNode = node.Next[c];
                }
                else
                {
                    nextNode = new TrieNode();
                    node.Next[c] = nextNode;
                }

                AddValue(nextNode, ref key, idx + 1, value);
            }

            public void AddValue(string key, int val)
            {
                AddValue(_root, ref key, 0, val);
            }

            private int CollectAll(TrieNode node)
            {
                int currentSum = node.Value.GetValueOrDefault();

                foreach (var next in node.Next)
                {
                    currentSum += CollectAll(next.Value);
                }

                return currentSum;
            }

            private int Sum(TrieNode node, ref string prefix, int idx)
            {
                if (idx == prefix.Length)
                {
                    return CollectAll(node);
                }

                char c = prefix[idx];
                if (node.Next.ContainsKey(c))
                {
                     return Sum(node.Next[c], ref prefix, idx + 1);
                }

                return 0;
            }

            public int Sum(string prefix)
            {
                return Sum(_root, ref prefix, 0);
            }
        }

        private readonly Trie _trie;

        public MapSum()
        {
            _trie = new Trie();
        }

        public void Insert(string key, int val)
        {
            _trie.AddValue(key, val);
        }

        public int Sum(string prefix)
        {
            return _trie.Sum(prefix);
        }
    }