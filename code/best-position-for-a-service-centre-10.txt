class Solution {
public:
    
    vector<pair<double, double>> p;

    double dist(double x1, double y1, double x2, double y2) {
        return hypot(x1 - x2, y1 - y2);
    }

    double dist(double x, double y) {
        double res = 0;
        for (int i = 0; i < p.size(); i++)
            res += dist(x, y, p[i].first, p[i].second);
        return res;
    }

    pair<double, double> findY(double x) {
        double yl = -1e6, yr = 1e6;
        for (int i = 0; i < 70; i++) {
            double ym1 = yl + (yr - yl) / 3;
            double ym2 = yr - (yr - yl) / 3;
            double d1 = dist(x, ym1);
            double d2 = dist(x, ym2);
            if (d1 < d2)
                yr = ym2;
            else
                yl = ym1;
        }
        return { yl, dist(x, yl) };
    }

    pair<double, double> findXY() {
        double xl = -1e6, xr = 1e6;
        for (int i = 0; i < 70; i++) {
            double xm1 = xl + (xr - xl) / 3;
            double xm2 = xr - (xr - xl) / 3;
            auto [y1, d1] = findY(xm1);
            auto [y2, d2] = findY(xm2);
            if (d1 < d2)
                xr = xm2;
            else
                xl = xm1;
        }
        return { xl, findY(xl).first };
    }
    
    double getMinDistSum(vector<vector<int>>& positions) {
        p.clear();
        for (int i=0;i<positions.size();i++){
            p.push_back({positions[i][0], positions[i][1]});
        }
        
        auto [x,y] = findXY();
        return dist(x, y);
    }
};