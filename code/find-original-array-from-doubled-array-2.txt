int cmp(const void *a, const void *b)
{
    return *(int *)a - *(int *)b;
}
int* findOriginalArray(int* changed, int changedSize, int* returnSize){
    *returnSize = 0;
    if(changedSize % 2 != 0)
        return NULL;
    int * result = (int *)malloc(changedSize/2 * sizeof(int));
    int checkNum[200002] = {0};
    int idx = 0;
    qsort(changed, changedSize, sizeof(int), cmp);
    for(int i = 0; i < changedSize; i++)
        checkNum[changed[i]]++;
    for(int i = 0; i < changedSize; i++)
    {
        if(changed[i] != 0 && checkNum[changed[i]] > 0 && checkNum[changed[i] * 2] > 0)
        {
            result[idx++] = changed[i];
             checkNum[changed[i]]--;
            checkNum[changed[i] * 2]--;
        }
        else if(changed[i] == 0 && checkNum[changed[i]] >= 2)
        {
            result[idx++] = changed[i];
            checkNum[changed[i]] -= 2;
        }
    }
    if(idx * 2 == changedSize)
        *returnSize = idx;
    else
        return NULL;
    return result;
}