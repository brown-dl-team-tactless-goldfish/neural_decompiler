class Solution {
    bool isPalindrome(string word) {
        int n = word.length();
        
        for (int i = 0; i < n / 2; i++)
            if (word[i] != word[n - 1 - i])
                return false;
        
        return true;
    }
    
    bool helper(string& word1, string& word2) {
        int word1_ptr = 0, word2_ptr = word2.length() - 1;
        bool switchFlag = false;
        
        while (word1_ptr < word2_ptr) {
            if (word1[word1_ptr] != word2[word2_ptr])
                return isPalindrome(word2.substr(word1_ptr, word2_ptr - word1_ptr + 1)) or
                       isPalindrome(word1.substr(word1_ptr, word2_ptr - word1_ptr + 1));
            
            word1_ptr++, word2_ptr--;
        }
        
        return true;
    }
public:
    bool checkPalindromeFormation(string a, string b) {        
        return helper(a, b) or helper(b, a);
    }
};