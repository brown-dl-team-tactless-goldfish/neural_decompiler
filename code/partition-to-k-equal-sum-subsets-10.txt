class Solution {
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int total=0;
        for(auto& num:nums)
        {
            total+=num;
        }
        if(total%k>0) return false;
        
        sort(nums.rbegin(),nums.rend());
        
        vector<int> sums(k,0);
        return backtrack(sums,nums,total/k,0,nums.size(),k);
    }
    
    bool backtrack(vector<int>& sums, vector<int>& nums, int target, int cur, int n, int k)
    {
        if(cur==n)
        {
            for(auto& sum:sums)
            {
                if(sum!=target)
                    return false;
            }
            return true;
        }
        
        for(int i=0;i<k;i++)
        {
            if(sums[i]+nums[cur]>target)
                continue;
            
            sums[i]+=nums[cur];
            
            if(backtrack(sums,nums,target,cur+1,n,k))
                return true;
            
            sums[i]-=nums[cur];
            
            if(sums[i]==0)
                return false;
        }
        
        return false;
    }
};