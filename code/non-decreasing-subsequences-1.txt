/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

void backtrack(int **res,int* nums, int numsSize, int* returnSize, int** returnColumnSizes,int *temp,int pos,int start){
    
    if(pos>=1){
        printf("start : %d | pos : %d |",start,pos);
        for(int i=0;i<=pos;i++) printf(" %d ",temp[i]);
        printf("\n");    
        int *copy=(int*)calloc((pos+1),sizeof(int));
        memcpy(copy,temp,sizeof(int)*(pos+1));
        res[*returnSize]=copy;
        (*returnColumnSizes)[*returnSize]=pos+1;
        (*returnSize)++;
    }
    // printf("start : %d | pos : %d |",start,pos);
    // for(int i=0;i<=pos;i++) printf(" %d ",temp[i]);
    // printf("\n");
    bool used[201]={false};
    for(int i=start;i<numsSize;i++){
        
        if((pos!=-1 && nums[i]<temp[pos]) || used[nums[i]+100]==true){
            continue;
        }
        used[nums[i]+100]=true;
        temp[++pos]=nums[i];
        backtrack(res,nums,numsSize,returnSize,returnColumnSizes,temp,pos,i+1);
        pos--;
        
    }
}

int** findSubsequences(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    *returnSize=0;
    *returnColumnSizes=(int*)calloc(100000,sizeof(int));
    int **res=(int**)malloc(sizeof(int*)*100000);
    int *temp=(int*)calloc(numsSize,sizeof(int));
    backtrack(res,nums,numsSize,returnSize,returnColumnSizes,temp,-1,0);
    res=(int**)realloc(res,sizeof(int*)*(*returnSize));
    *returnColumnSizes=(int*)realloc(*returnColumnSizes,sizeof(int)*(*returnSize));
    free(temp);
    
    return res;
}