class Solution {
public:
    map<int,int> mp;
    
    int helper(int n)
    {
        if(n<=1) return 0;
        if(mp.find(n)!=mp.end()) return mp[n];
        else if(n%2==0) return mp[n] = 1 + helper(n/2);
        else return mp[n] = 1 + helper(3*n + 1);
    }
    
    static bool comp(pair<int,int>& a, pair<int,int>& b)
    {
        if(a.first==b.first) return a.second<b.second;
        return a.first<b.first;
    }
    
    int getKth(int lo, int hi, int k) {
        mp.clear();
        vector<pair<int,int>> v;
        for(int i=lo;i<=hi;i++)
        {
            int c;
            if(mp.find(i)==mp.end()) c = helper(i);
            else c = mp[i];
            v.push_back({c,i});
        }
        sort(v.begin(),v.end(),comp);
        return v[k-1].second;
    }
};