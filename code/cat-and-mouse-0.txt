struct Node {
	bool isDefined;
	int* result;
};
int mainFunction(int** graph, int graphRowSize, int *graphColSizes, int Cat, int Mouse, int playerNo, struct Node*** resultMap) {
	int result = -1;//-1 means unknown
	if (resultMap[Cat][Mouse][playerNo - 1].isDefined == false) {
		resultMap[Cat][Mouse][playerNo - 1].isDefined = true;
		if (Cat == Mouse) {// Cat meets Mouse
			*(resultMap[Cat][Mouse][playerNo - 1].result) = 2;
			return 2;
		}
		else if (Mouse == 0) {//Mouse is at 0
			*(resultMap[Cat][Mouse][playerNo - 1].result) = 1;
			return 1;
		}
		else {
			int result_i = 0;
			int *result_i_ptr = NULL;
			if (playerNo == 1) { // Mouse
				for (int i = 0; i < graphColSizes[Mouse]; i++) {
					result_i = mainFunction(graph, graphRowSize, graphColSizes, Cat, graph[Mouse][i], 2, resultMap);
					if (result_i == 1) { // if win, just win
						result = 1;
						break;
					}
					else if (result_i == 2 && result == -1) { // if all is lose, then lose
						result = 2;
					}
					else if (result_i == 0 || result_i == -1) { //if there are some unknown items
						result = 0;
						result_i_ptr = resultMap[Cat][graph[Mouse][i]][1].result;
					}
				}
				if (result != 0)
					*(resultMap[Cat][Mouse][playerNo - 1].result) = result;
				else resultMap[Cat][Mouse][playerNo - 1].result = result_i_ptr;
			}
			else { // Cat
				for (int i = 0; i < graphColSizes[Cat]; i++) {
					if (graph[Cat][i] != 0) {
						result_i = mainFunction(graph, graphRowSize, graphColSizes, graph[Cat][i], Mouse, 1, resultMap);
						if (result_i == 2) { 
							result = 2;
							break;
						}
						else if (result_i == 1 && result == -1) {
							result = 1;
						}
						else if (result_i == 0 || result_i == -1) {
							result = 0;
							result_i_ptr = resultMap[graph[Cat][i]][Mouse][0].result;
						}
					}
				}
				if (result != 0)
					*(resultMap[Cat][Mouse][playerNo - 1].result) = result;
				else resultMap[Cat][Mouse][playerNo - 1].result = result_i_ptr;
			}
		}
	}
	else result = *(resultMap[Cat][Mouse][playerNo - 1].result);
	return result;
}
int catMouseGame(int** graph, int graphRowSize, int *graphColSizes) {
	struct Node*** resultMap = (struct Node***)malloc(sizeof(struct Node**) * graphRowSize);
	for (int i = 0; i < graphRowSize; i++) {
		resultMap[i] = (struct Node**)malloc(sizeof(struct Node*) * graphRowSize);
		for (int j = 0; j < graphRowSize; j++) {
			resultMap[i][j] = (struct Node*)malloc(sizeof(struct Node) * 2);

			resultMap[i][j][0].result = (int*)malloc(sizeof(int));
			resultMap[i][j][0].isDefined = false;
			*(resultMap[i][j][0].result) = -1;

			resultMap[i][j][1].result = (int*)malloc(sizeof(int));
			resultMap[i][j][1].isDefined = false;
			*(resultMap[i][j][1].result) = -1;
		}
	}
	int result = mainFunction(graph, graphRowSize, graphColSizes, 2, 1, 1, resultMap);
	for (int i = 0; i < graphRowSize; i++) {
		free(resultMap[i]);
	}
	free(resultMap);
	return result;
}