class Solution {
public:
    int maxRepOpt1(string text) {
        vector<int> cnt(26, 0);
        for(auto& ch : text) {
            cnt[ch - 'a']++;
        }
        
        // Compress the "text" string into pair of {letter, occurance}
        vector<pair<char, int> > letters;
        int num = 1;
        char c = text[0];
        for(int i=1; i<text.size(); ++i) {
            if(text[i] == text[i-1]) {
                ++num;
            } else {
                letters.push_back({c, num});
                c = text[i];
                num = 1;
            }
        }
        letters.push_back({c, num});
        
        int ans = 0;
        for(int i=0; i<letters.size(); ++i) {
            // repeated characters without any swap (or swap inside this substring).
            ans = max(ans, letters[i].second);
            
            // repeated characters with one substring + 1 character swapped to the beginning or end.
            if(letters[i].second < cnt[letters[i].first - 'a']) {
                ans = max(ans, letters[i].second+1);
            }
            
            // two substrings with one single other character in the middle.
            if(i + 2 < letters.size() && (letters[i].first == letters[i+2].first) && letters[i+1].second == 1)  {
                int add = letters[i].second + letters[i+2].second < cnt[letters[i].first - 'a'] ? 1 : 0;
                ans = max(ans, letters[i].second + letters[i+2].second + add);
            }
        }
        return ans;
    }
};