class Solution {
public:
    int removeBoxes(vector<int>& boxes) {
        int n = boxes.size();
        unordered_map<int, int> dp;
        return dfs(boxes, dp, 0, n-1, 0);
    }
private:
    int dfs(vector<int>& boxes, unordered_map<int, int>& dp, int l, int r, int k){
        if (l > r) return 0;
        while (l < r && boxes[r] == boxes[r-1]) r--, k++;        
        int key = (l*100+r)*100+k;
        if (dp.count(key)) return dp[key];
        int ans = dfs(boxes, dp, l, r-1, 0) + (k+1)*(k+1);
        for (int i = l; i < r; i++){
            if (boxes[i] == boxes[r]) {
               //while (boxes[i+1] == boxes[r]) i++;
               ans = max(ans, dfs(boxes, dp, l, i, k+1) + dfs(boxes, dp, i+1, r-1, 0));
            }
        }
        dp[key] = ans;
        return ans;
    }
};