class Solution {
public:
    int n;
    int geti(char c) {
        return c - 'a';
    }
    long long distinctNames(vector<string>& ws) {
        n = ws.size();
        vector<long long> cnt(26, 0);
        // e.g.  a can not paire with word start with b
        vector<vector<long long>> dp(26, vector<long long>(26, 0));
        vector<int> dp1(n, 0);
        for (auto& w : ws) {       
            reverse(w.begin(), w.end());            
        }
        sort(ws.begin(), ws.end(), [](const string& l, const string& r){
            if (l.size() != r.size()) return l.size() < r.size();
            return l < r;
        });
        
        int i = 0;
        while (i < n) {
            int s = i;
            auto& w = ws[i];
            int mask = 1 << geti(w.back());
            i++;
            while (i < n) {
                auto& cur = ws[i];
                if (cur.size() != w.size()) break;
                
                bool diff = false;
                for (int x = 0; x < w.size() -1; x++) {
                    if (w[x] == cur[x]) continue;
                    else { diff = true; break;}
                }
                if (diff) break;
                mask |= 1 << geti(cur.back());
                i++;
            } 
            
            int e = i;
            for (int x = s; x < e; x++) { 
                dp1[x] = mask;
                int j = geti(ws[x].back());
                cnt[j]++;
                for (int y = 0; y < 26; y++) {
                    int bit = 1 << y;
                    if ((bit & mask) != bit) continue;
                    dp[j][y]++;
                }
            }
        }
        long long ans = 0;
        for (int i = 0;  i< n; i++) {
            auto& w = ws[i];
            int j = geti(ws[i].back());
            int m = dp1[i];
            for (int y = 0; y < 26; y++) {
                int bit = 1 << y;
                if ((bit & m) == bit) continue;
                long long c = cnt[y] - dp[y][j];
                ans += c;
            }
        }
        return ans;
    }
};