int gcd(int n1, int n2){

    while(n1 != 0 && n2 != 0){
        if(n1 >= n2)
            n1 %= n2;
        else
            n2 %= n1;
    }
    return fmax(n1, n2);
}

int* replaceNonCoprimes(int* nums, int numsSize, int* returnSize){
    int* ans = malloc(numsSize * sizeof(int));
    int idx = 0;
   for (int i = 0; i < numsSize; i++) {
      if(nums[i] == 1){
          ans[idx] = 1;
          idx++;
          continue;
      }
      if(i > 0 && nums[i] == nums[i-1])
           continue;
      ans[idx] = nums[i];
      idx++;
      while (idx > 1) {
        const int n1 = ans[idx - 1]; 
        const int n2 = ans[idx - 2]; 
        const int d = gcd(n1, n2);
        if (d == 1) break;
        if(d == n1){
            idx--;
            continue;
        }
        if(d == n2){
            ans[idx-2] = n1;
            idx--;
            continue;
        }
        idx -= 2;
        ans[idx] = (n1 / d * n2);
        idx++;
      }
    }
    *returnSize = idx;
    return ans;
}