/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    string dfs(TreeNode* root, unordered_map<string, int> &m, vector<TreeNode*> &ans) {
        string l = root -> left ? dfs(root -> left, m, ans) : "L";
        string r = root -> right ? dfs(root -> right, m, ans) : "R";
        if(++m[l + to_string(root -> val) + r] == 2) ans.push_back(root);
        return l + to_string(root -> val) + r;
    }
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string, int> m;
        vector<TreeNode*> ans;
        dfs(root, m, ans);
        return ans;
    }
};