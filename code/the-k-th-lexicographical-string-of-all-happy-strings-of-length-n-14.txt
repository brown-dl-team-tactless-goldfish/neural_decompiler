    public class Solution
    {
        public string GetHappyString(int n, int k)
        {
            checked
            {
				//dp[i,j] is count of happy strings with length i started with char j
                ulong[,] dp = new ulong[n + 1, 3];
                dp[1, 0] = 1;
                dp[1, 1] = 1;
                dp[1, 2] = 1;

                for (int i = 2; i <= n; i++)
                {
                    for (int j = 0; j < 3; j++)
                    {
                        for (int l = 0; l < 3; l++)
                        {
                            if (j != l) //skip char to make string happy
                            {
                                dp[i, j] += dp[i - 1, l];
                            }
                        }
                    }
                }

                StringBuilder sb = new StringBuilder(n);

				//fill result
                for (int i = 0; i < n; i++)
                {
                    var remains = n - i;
                    bool append = false;

                    for (int j = 0; j < 3; j++) //try to use lexicographically smallest char (greedy approach)
                    {
                        var c = (char) ('a' + j);

                        if (i > 0 && sb[i - 1] == c) //skip to make result happy
                        {
                            continue;
                        }

                        var count = dp[remains, j];
                        if ((ulong)k <= count)
                        {
							//we can use current char because count of variants that starts with char j >= k
                            sb.Append(c);
                            append = true;
                            break;
                        }
                        else
                        {
							//try to use next char
                            k -= (int)count;
                        }
                    }

                    if (!append)
                    {
						//it means that k is so far from all count of possible strings
                        return "";
                    }
                }

                return sb.ToString();
            }
        }
    }