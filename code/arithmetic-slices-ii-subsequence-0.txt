struct sequence_hash {
  long long int diff;
  int count;
  UT_hash_handle hh;
};

int numberOfArithmeticSlices(int* nums, int numsSize){
  int ret = 0;
  struct sequence_hash** const dp = calloc(numsSize, sizeof(struct sequence_hash*));
  for (int end = 1; end < numsSize; ++end) {
    for (int i = 0; i < end; ++i) {
      const long long int diff = ((long long int) nums[end]) - nums[i];
      struct sequence_hash* end_entry;
      HASH_FIND(hh, dp[end], &diff, sizeof(diff), end_entry);
      if (!end_entry) { /* First time this diff has been seen at this index */
        end_entry = malloc(sizeof(struct sequence_hash));
        end_entry->diff = diff;
        end_entry->count = 0;
        HASH_ADD(hh, dp[end], diff, sizeof(end_entry->diff), end_entry);
      }

      struct sequence_hash* prev_entry;
      HASH_FIND(hh, dp[i], &diff, sizeof(diff), prev_entry);
      if (!prev_entry) {
        /* First two elements in the sequence that end at this index */
        ++end_entry->count;
      } else {
        /* There exists at least one partial sequence ending at index i, end makes the required minimum three. */
        end_entry->count += prev_entry->count + 1;
        ret += prev_entry->count;
      }
    }
  }
  
  /* Free up all our hashmaps */
  for (int i = 0; i < numsSize; ++i) {
    struct sequence_hash* entry;
    struct sequence_hash* tmp;
    HASH_ITER(hh, dp[i], entry, tmp) {
      HASH_DEL(dp[i], entry);
      free(entry);
    }
  }
  free(dp);
  
  return ret;
}