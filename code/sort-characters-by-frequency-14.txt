char * frequencySort(char * s){
    // Array Structure:
    //  0 - 25 ---> a-z
    // 26 - 51 ---> A-z
    // 52 - 61 ---> 0-9
    uint32_t alphabet[62] = {0};
    char* ptr = s;
    uint32_t max = 0;
    int pos = 0;
    
    // Collect all information - frequency of characters - A-Z, a-z, 0-9
    while (*ptr != NULL) {
        if ((*ptr >= 'A') && (*ptr <= 'Z')) {
            // Character - hex to 0 offset + 26 for array position
            alphabet[*ptr-0x41+26]++;
        } else if ((*ptr >= 'a') && (*ptr <= 'z')){
            // Character - hex to 0 offset
            alphabet[*ptr-0x61]++;
        } else {
            // Character - hex to 0 offset + array position 52
            alphabet[*ptr-0x30+52]++;
        }
        ptr++;
    }
    
    // Reset ptr to use s as an output string
    ptr = s;
    
    // Ensure all values within the array are evaluated
    for (int i = 0; i < 62; i++) {
        // Initial starting condition
        max = 0;
        // Each run, loop through array to find max value
        for (int j = 0; j < 62; j++) {
            if (max < alphabet[j]) {
                // Assign max value and position of that max value
                max = alphabet[j];
                pos = j;
            }
        }
        
        // End early if max is 0. No need to further loop through the array.
        if (!max) {
            return s;
        // If a max value has been found
        } else {
            for (uint32_t i = 0; i < max; i++) {
                // Uppercase
                if (pos > 25 && pos < 52) {
                    *ptr = (char)(pos-26+0x41);
                // Lowercase
                } else if (pos <= 25) {
                    *ptr =  (char)(pos+0x61);
                // Numbers
                } else {
                    *ptr =  (char)(pos-52+0x30);
                }
                ptr++; 
            }
            // Clear value so it's not re-evaluated for max value
            alphabet[pos] = 0;
        }
    }    
    
    return s;
}