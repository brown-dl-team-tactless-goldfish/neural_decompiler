class Solution {
public:
    vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) {
        //convert data
        int numSkills = req_skills.size();
        map <string, int> m;
        for(int i = 0; i < numSkills; i++) m[req_skills[i]] = i;
        vector<int> leute(people.size(), 0);
        for(int i = 0; i < people.size(); i++)
        {
            for(string skill : people[i])
            {
                if(skill.size() != 0 && m.find(skill) != m.end())
                    leute[i] = leute[i] | (1<<m[skill]);
            }
        }

        int numPeople = leute.size();
        //dp
        vector<vector<int>> dp(1<<numSkills);
        //dp[i][j] for status i, vector of people needed
        for(int p = 0; p < numPeople; p++)        
        {        
             for(int state = 0; state < (1 << numSkills); state++)
            {
                if((state | leute[p]) == leute[p] && dp[state].size() == 0)
                {
                   dp[state].push_back(p);
                }
            }
        }
                   
        for(int state = 1; state < (1 << numSkills); state++)
        {
            for(int p = 0; p < numPeople; p++)   
            {
                int skill = leute[p];
                int nextState = (state | skill);
                if(nextState != state)
                {
   
                    if(dp[state].size() != 0 && (dp[nextState].size() == 0 || dp[nextState].size() > dp[state].size()+1))
                    {
                        dp[nextState] = dp[state];
                        dp[nextState].push_back(p);
                    }
  
                }
            }
        }
        return dp[(1<<numSkills)-1];
    }
};