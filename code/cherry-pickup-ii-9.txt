class Solution {
public:
    int f(int i,int j1,int j2,int r,int c,vector<vector<int>>& grid,vector<vector<vector<int>>>& dp){
        if(j1 <0 || j2<0 || j1>=c || j2>=c ) return -1e8; // out of bound check if at any time j1 or j2 is goind out of grid
        
        if(i == r-1){  // base condition check if we are at last row
            if(j1 == j2) return grid[i][j1];  // if last row element is same we take it only one time
            else return grid[i][j1] + grid[i][j2];
        }
        
        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];  // checking if value exists in our dp
        
        int maxi = -1e8; // maintaining a maxi variable to return in the end the maximum value
		//at a single  i , j1 , j2 we have to check 9 boxes and find the maximum
		//dj1 ,dj2 represent loop for j1 ,j2 respectively 
		//in the recurstion call j1  = j-1 and j2= j2-1
		//next j1 = j1-1 and j2 = j2
		//next j1 = j1-1 and j2 = j2+1
		//next j1 = j1 and j2 = j2-1
		//next j1 = j1 and j2 = j2
		// next j1 = j1 and j2 = j2 +1
		
		//next j1 = j1+1 and j2 = j2-1
		//next j1 = j1 +1and j2 = j2
		// next j1 = j1 +1and j2 = j2 +1
		
		// i = i+1 because we move to next row

		
        for(int dj1 = -1; dj1 <= +1 ;dj1++){
            for(int dj2 = -1;dj2 <= +1; dj2++){
                int value = 0;
                if(j1 == j2) value = grid[i][j1];
                else value = grid[i][j1] + grid[i][j2];
                
                value += f(i+1,j1+dj1,j2+dj2,r,c,grid,dp); 
                
                maxi = max(maxi,value);
                
            }
        }
        
        return dp[i][j1][j2] = maxi;
    }
    
    int cherryPickup(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        
        
        
        vector<vector<vector<int>>> dp(r,vector<vector<int>>(c,vector<int>(c,-1))); // 3D array because row will be same for both the robots and j1 & j2 for both robots columns
        
        return f(0,0,c-1,r,c,grid,dp); 
        
        
    }
};