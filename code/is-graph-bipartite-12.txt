enum Colour { Uncoloured, Red, Blue }
public bool IsBipartite(int[][] graph) 
{
	int n = graph.Length;
	var nodes = Enumerable.Range(0, n).ToList();
	Dictionary<int, Colour> d = nodes.ToDictionary(x => x, x => Colour.Uncoloured);

	Colour SwapColour(Colour c) => c == Colour.Red ? Colour.Blue : Colour.Red;

	bool TryColour(int node, Colour colour)
	{
		if(d[node] == colour) { return true; }

		if(d[node] == Colour.Uncoloured)
		{
			d[node] = colour;
			foreach(var sib in graph[node])
			{
				if(!TryColour(sib, SwapColour(colour)))
				{
					return false;
				}
			}
			return true;
		}
		else
		{
			return false;
		}
	}

	bool DFS(int node)
	{
		if(d[node] != Colour.Uncoloured) { return true; }

		return TryColour(node, Colour.Blue);
	}

	return nodes.All(DFS);
}