#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

class Solution {
public:    
    int pos[100010], totLeft[100010];
    ordered_set SLeft, SRight;
           
    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
        long long ans = 0;
        for (int i = 0; i < int(nums2.size()); i++)
            pos[nums2[i]] = i;
        for (int i = 0; i < int(nums1.size()); i++) {
            totLeft[i] = SLeft.order_of_key(pos[nums1[i]]);
            SLeft.insert(pos[nums1[i]]);
        }
        for (int i = int(nums1.size()) - 1; i >= 0; i--) {            
            long long totRight = int(SRight.size()) - SRight.order_of_key(pos[nums1[i]]);
            ans += totLeft[i] * totRight;
            SRight.insert(pos[nums1[i]]);
        }
        return ans;
    }
};