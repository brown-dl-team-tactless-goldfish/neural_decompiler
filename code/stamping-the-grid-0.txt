bool possibleToStamp(int** grid, int gridSize, int* gridColSize, int stampHeight, int stampWidth){
    int occupied[gridSize][gridColSize[0]];
    bool stamps[gridSize][gridColSize[0]];
    
    // Count number of occupied cells up-left of a cell
    memset(occupied, 0, sizeof(occupied));    
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridColSize[i]; j++) {
            occupied[i][j] = grid[i][j];
            if (i > 0) {
                occupied[i][j] += occupied[i - 1][j];
            }
            if (j > 0) {
                occupied[i][j] += occupied[i][j - 1];
            }
            if (i > 0 && j > 0) {
                occupied[i][j] -= occupied[i-1][j-1];
            }
        }
    }
    
    // Determine which cells can have stamps in them (marking top-left corner)
    memset(stamps, 0, sizeof(stamps));
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridColSize[i]; j++) {
            if (grid[i][j] == 0) {
                const int xStamp = i + stampHeight - 1;
                const int yStamp = j + stampWidth - 1;
                
                if (xStamp < gridSize && yStamp < gridColSize[i]) {
                    int numOnes = occupied[xStamp][yStamp];
                    if (j > 0) {
                        numOnes -= occupied[xStamp][j - 1];
                    }
                    if (i > 0) {
                        numOnes -= occupied[i - 1][yStamp];
                    }
                    if (i > 0 && j > 0) {
                        numOnes += occupied[i - 1][j - 1];
                    }
                    if (numOnes == 0) {
                        stamps[i][j] = true;
                    }
                }
            }
        }
    }
    
    // Count number of stamps up-left of a cell
    memset(occupied, 0, sizeof(occupied));
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridColSize[i]; j++) {
                occupied[i][j] = stamps[i][j] ? 1 : 0;
                if (i > 0) {
                    occupied[i][j] += occupied[i - 1][j];
                }
                if (j > 0) {
                    occupied[i][j] += occupied[i][j - 1];
                }
                if (i > 0 && j > 0) {
                    occupied[i][j] -= occupied[i - 1][j - 1];
                }
        }
    }
    
    // Determine number of stamps covering each cell
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridColSize[i]; j++) {
            if (grid[i][j] == 0) {
                const int xStamp = i - stampHeight;
                const int yStamp = j - stampWidth;

                int numStamps = occupied[i][j];
                if (xStamp >= 0) {
                    numStamps -= occupied[xStamp][j];
                }
                if (yStamp >= 0) {
                    numStamps -= occupied[i][yStamp];
                }
                if (xStamp >= 0 && yStamp >= 0) {
                    numStamps += occupied[xStamp][yStamp];
                }
                
                if (numStamps == 0) {
                    return false;
                }
            }
        }
    }
    
    return true;
}