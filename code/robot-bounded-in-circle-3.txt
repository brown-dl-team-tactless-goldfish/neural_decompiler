
static inline void step(int *x, int *y, int dir)
{
    if (0 == dir)
        *y = *y + 1;
    else if (1 == dir)
        *x = *x + 1;
    else if (2 == dir)
        *y = *y - 1;
    else
        *x = *x - 1;
}

static inline void instruct_one(int *x, int *y, int *dir, char c)
{
        switch (c) {
            case 'G': {
                step(x, y, *dir);
                break;
            }
            case 'L': {
                *dir = (*dir + 1) % 4;
                break;
            }
            case 'R': {
                *dir = (*dir + 4 - 1) % 4;
                break;
            }
            default:
                /* nothing */
                break;
        }
}

bool isRobotBounded(char * instructions){

    int dir = 0;  /* dirs[4] = { 'w', 'e', 's', 'w' } */
    int x = 0;
    int y = 0;
    char *c = instructions;

    while (*c) {
        instruct_one(&x, &y, &dir, *c);
        c++;
    }
    
    if ((!x && !y) || (0 != dir))
        return true;

    return false;
}