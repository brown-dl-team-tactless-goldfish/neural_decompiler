public class Solution {

    private static int[][] PossibleSums(int[] array) {
        List<HashSet<int>> data = Enumerable
           .Range(0, array.Length + 1)
           .Select(_ => new HashSet<int>())
           .ToList();

        for (int mask = 0; mask < 1 << array.Length; ++mask) {
            int sum = 0;
            int index = 0;

            for (int bits = mask, i = 0; bits > 0; bits /= 2, ++i) {
                index += (bits % 2); 
                sum += (bits % 2) * array[i];
            }

            data[index].Add(sum);
        }

        return data
            .Select(item => item.OrderBy(x => x).ToArray())
            .ToArray();
    }

    public int MinimumDifference(int[] nums) {
        int[] left = nums.Take(nums.Length / 2).ToArray();
        int[] right = nums.Skip(nums.Length / 2).ToArray();

        int leftSum = left.Sum();
        int rightSum = right.Sum();

        int result = Math.Abs(leftSum - rightSum);

        var leftSums = PossibleSums(left);
        var rightSums = PossibleSums(right);

        for (int i = 0; i < leftSums.Length; ++i) {
            int[] lArr = leftSums[i];
            int[] rArr = rightSums[i];

            for (int l = 0; l < lArr.Length; ++l) {
                int AA = leftSum - lArr[l];
                int BB = rightSum + lArr[l];

                int toFind = (BB - AA) / 2;

                int index = Array.BinarySearch(rArr, toFind);

                if (index >= 0) 
                    result = Math.Min(result, Math.Abs(AA - BB + 2 * rArr[index]));    
                else {
                    int index1 = Math.Clamp(~index, 0, rArr.Length - 1);
                    int index2 = Math.Clamp(~index + 1, 0, rArr.Length - 1);

                    result = Math.Min(result, Math.Abs(AA - BB + 2 * rArr[index1]));  
                    result = Math.Min(result, Math.Abs(AA - BB + 2 * rArr[index2])); 
                }  
            }
        }  

        return result;    
    }
}