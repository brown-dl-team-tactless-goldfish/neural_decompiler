class Solution {
public:
    int miceAndCheese(vector<int>& A, vector<int>& B, int k) {
        int n = A.size();
        
        std::vector<std::pair<int, int>> C(A.size());
        for (int i = 0; i < A.size(); i++) {
            C[i] = std::make_pair(A[i] - B[i], i);
        }

        // Sort vector C in descending order based on the first element of each pair
        std::sort(C.begin(), C.end(), [](const std::pair<int, int>& a, const std::pair<int, int>& b) {
            return a.first > b.first;
        });

        // Create vectors A_sorted and B_sorted aligned with sorted C
        std::vector<int> A_sorted(A.size());
        std::vector<int> B_sorted(B.size());
        for (int i = 0; i < C.size(); i++) {
            int index = C[i].second;
            A_sorted[i] = A[index];
            B_sorted[i] = B[index];
        }
        
        int ans = 0;
        for(int i = 0 ; i < k ; i++) {
            ans = ans + A_sorted[i];
        }
        for(int i = k ; i < n ; i++) {
            ans = ans + B_sorted[i];
        }
        
        // for (int i = 0; i < A_sorted.size(); i++) {
        //     std::cout << A_sorted[i] << " ";
        // }
        // std::cout << std::endl;
        // for (int i = 0; i < B_sorted.size(); i++) {
        //     std::cout << B_sorted[i] << " ";
        // }
        
        
//         int ans = 0;
//         int n = vector2.size();
//         vector<size_t> idx(vector1.size());
//         iota(idx.begin(), idx.end(), 0); // Fill with 0, 1, ..., n-1
//         sort(idx.begin(), idx.end(),
//               [&vector1, &vector2](size_t i, size_t j) {
//                   if (vector1[i] > vector1[j]) {
//                       return true;
//                   } else if (vector1[i] == vector1[j]) {
//                       return vector2[i] < vector2[j];
//                   } else {
//                       return false;
//                   }
//               });
        
//         vector<int> sorted_vector1(vector1.size());
//         vector<int> sorted_vector2(vector2.size());
//         transform(idx.begin(), idx.end(), sorted_vector1.begin(),[&vector1](size_t i) { return vector1[i]; });
//         transform(idx.begin(), idx.end(), sorted_vector2.begin(),[&vector2](size_t i) { return vector2[i]; });
        
//         // for (const auto& elem : sorted_vector1) {
//         //     std::cout << elem << " ";
//         // }
//         // std::cout << std::endl;
//         // for (const auto& elem : sorted_vector2) {
//         //     std::cout << elem << " ";
//         // }
        
//         for(int i = 0 ; i < k ; i++) {
//             ans = ans + sorted_vector1[i];
//         }
//         for(int i = k ; i < n ; i++) {
//             ans = ans + sorted_vector2[i];
//         }

    
//         return ans;
        return ans;
    }
};