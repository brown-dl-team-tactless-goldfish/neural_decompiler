class Solution {
    
    struct compare {
        bool operator() (pair<int, int>p1, pair<int, int>p2) {
            return (p1.first == p2.first) ? p1.second < p2.second : p1.first < p2.first;
        }
    };
public:
    vector<int> getStrongest(vector<int>& arr, int k) {
        
        int n = arr.size();
        
        sort(arr.begin(), arr.end());
        int median = arr[(n-1)/2];
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, compare>pq;
        
        for (int i = 0; i < n; i++)
            pq.push({abs(arr[i]-median), arr[i]});
        
        vector<int>res;
        while (!pq.empty() && k--) {
            res.push_back(pq.top().second);
            pq.pop();
        }
    
        return res;
    }
};