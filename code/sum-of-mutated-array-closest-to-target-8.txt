class Solution {
public:
    int findBestValue(vector<int>& arr, int target) {
        int sum = accumulate(arr.begin(), arr.end(), 0);
        if (sum <= target)
        {
            return *max_element(arr.begin(), arr.end());
        }
        
        return findBestValue(arr, target, 0, sum);
    }
    
private:
    int findBestValue(vector<int>& arr, int target, int left, int right)
    {
        if (left >= right)
        {
            return left;
        }
        
        int mid = left + (right - left) / 2, sum = 0;
        for (int i = 0; i < arr.size(); ++i)
        {
            sum += arr[i] > mid ? mid : arr[i];
        }
        
        if (sum >= target)
        {
            int leftVal = findBestValue(arr, target, left, mid - 1);
            int leftSum = 0;
            for (int i = 0; i < arr.size(); ++i)
            {
                leftSum += arr[i] > leftVal ? leftVal : arr[i];
            }
            
            return sum - target < abs(leftSum - target) ? mid : leftVal;
        }
        
        int rightVal = findBestValue(arr, target, mid + 1, right);
        int rightSum = 0;
        for (int i = 0; i < arr.size(); ++i)
        {
            rightSum += arr[i] > rightVal ? rightVal : arr[i];
        }
        
        return target - sum <= abs(target - rightSum) ? mid : rightVal;
    }
};