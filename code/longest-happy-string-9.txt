class Solution {
public:
    string longestDiverseString(int a, int b, int c) {
        // When a > 0 && b > 0 && c > 0, we can write the string as 'abc' group, e.g. 'abcabcabc...abc'. 
        // Then if c == 0, we can add 'ab' at the end, e.g. 'abc..abcab...abc'.
        // Finally if b == 0, we can add a into the string as long as it has no consecutive 'aaa'.
        // We will get the longest string via this way.
        string res;
        while (a > 0 && b > 0 && c > 0)
        {
            res += "abc";
            --a, --b, --c;
        }
        
        while (a > 0 && b > 0)
        {
            res += "ab";
            --a, --b;
        }
        
        while (a > 0 && c > 0)
        {
            res += "ac";
            --a, --c;
        }
        
        while (b > 0 && c > 0)
        {
            res += "bc";
            --b, --c;
        }
        
        if (a == 0 && b == 0 && c == 0)
        {
            return res;
        }
        
        char ch = a > 0 ? 'a' : b > 0 ? 'b' : 'c';
        int num = a > 0 ? a : b > 0 ? b : c;
        for (int i = 0; i < res.size() && num > 0;)
        {
            if (res[i] == ch && i + 1 < res.size() && res[i + 1] == ch)
            {
                i += 2;
            }
            else if (res[i] == ch)
            {
                res = res.substr(0, i + 1) + ch + res.substr(i + 1);
                i += 2, --num;
            }
            else if (i + 1 < res.size() && res[i + 1] != ch)
            {
                res = res.substr(0, i + 1) + ch + res.substr(i + 1);
                ++i, --num;
            }
            else
            {
                ++i;
            }
        }
        
        res = res[0] != ch && num > 0 ? string(min(num, 2), ch) + res : res;
        res = res[res.size() - 1] != ch && num > 0 ? res + string(min(num, 2), ch) : res;
        return res;
    }
};