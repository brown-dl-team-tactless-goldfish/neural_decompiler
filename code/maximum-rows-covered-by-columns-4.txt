class Solution {
public:
    int maximumRows(vector<vector<int>>& matrix, int numSelect) {
        int row = matrix.size();
        int col = matrix[0].size();
        vector<vector<int>> dp(1 << col, vector<int> (numSelect + 1, -1));
        
        auto count = [&](int idx) {
            int res = 0;
            
            for(int r = 0; r < row; r++) {
                int cnt = 0;
                
                for(int c = 0; c < col; c++) {
                    if(idx & (1 << c) || !matrix[r][c]) continue;
                    else { cnt++; break; }
                }
                
                res += !cnt;
            }
            
            return res;
        };
        
        function<int(int, int)> dfs = [&](int idx, int choice) {
            if(dp[idx][choice] != -1) return dp[idx][choice];
            if(!choice) return dp[idx][choice] = count(idx);
            
            for(int i = 0; i < col; i++) {
                if(idx & (1 << i)) continue;
                
                int nextIdx = idx + (1 << i);
                dp[idx][choice] = max(dp[idx][choice], dfs(nextIdx, choice - 1));
            } 
            
            return dp[idx][choice];
        };
        
        return dfs(0, numSelect);
    }
};