
```public:
    struct trie
    {
       trie *child[2]={0};  
    };
    trie *root=new trie();
    int solve(int num)
    {
        int j;
       trie *curr=root;
            long long int sum=0;
            for(j=31;j>=0;j--)
            {
                int bit=num&(1<<j);
                if(bit)
                {
                    bit=1;
                }
                if(curr->child[!bit])
                {
                    sum=sum+(1<<j);
                    curr=curr->child[!bit];
                }
                else
                {
                    curr=curr->child[bit];
                }
            }
            return sum;
    }
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        vector<pair<int,int>>v;
        sort(nums.begin(),nums.end());
        vector<int>res(queries.size(),0);
        int i,j;
        for(i=0;i<queries.size();i++)
        {
            v.push_back({queries[i][1],i});
        }
        sort(v.begin(),v.end());
        int k=0;
        for(i=0;i<nums.size();i++)
        {
            while(1)
            {
            if(k<v.size()&&nums[0]>v[k].first)
              {
                res[v[k].second]=-1;
                k++;
              }
            else if(k<v.size()&&nums[i]>v[k].first)
               {
                int ans=solve(queries[v[k].second][0]);
                res[v[k].second]=ans;
                k++;
               }
                else
                {
                    break;
                }
            }
            trie *curr=root;
            for(j=31;j>=0;j--)
            {
                int bit=nums[i]&(1<<j);
                if(bit)
                {
                    bit=1;
                }
                if(!curr->child[bit])
                {
                   curr->child[bit]=new trie();   
                }
                curr=curr->child[bit];
            }
        }
        while(k<v.size())
        {
            if(k<v.size()&&nums[0]>v[k].first)
            {
                res[v[k].second]=-1;
                k++;
            }
            else
            {
                int ans=solve(queries[v[k].second][0]);
                res[v[k].second]=ans;
                k++;
            }
        }
        return res;
    }
};