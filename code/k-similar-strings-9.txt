class Solution {
private:
    int diff(string& A, string& B) {
        int k = 0;
        for (int i = 0; i < A.length(); i++) {
            if (A[i] != B[i])
                k++;
        }
        return k;
    }
public:
    int kSimilarity(string A, string B) {
        if (A == B)
            return 0;
        unordered_set<string> visit;
        queue<string> q;
        visit.insert(A);
        q.push(A);
        int k = 0;
        int minT = diff(A, B);
        while (!q.empty()) {
            int size = q.size();
            k++;
            while (size--) {
                string tmp = q.front();
                q.pop();
                for (int i = 1; i < tmp.length(); i++) {
                    if (tmp[i] == B[i])
                        continue;
                    for (int j = 0; j < i; j++) {
                        if (tmp[j] == B[j])
                            continue;
                        if (tmp[i] != B[j])
                            continue;
                        swap(tmp[i], tmp[j]);
                        if (visit.find(tmp) == visit.end()) {
                            if (tmp == B)
                                return k;
                            int m = diff(tmp, B);
                            if (m <= minT) {
                                minT = m;
                                visit.insert(tmp);
                                q.push(tmp);
                            }
                        }
                        swap(tmp[i], tmp[j]);
                    }
                }
            }
        }
        
        return -1;
    }
};