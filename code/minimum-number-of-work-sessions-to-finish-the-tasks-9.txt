class Solution {
public:
    int dp[1<<14][150];
    int done;
    int solve(int mask, int sum, vector<int> &nums, int st) {
        if(mask == done) return 1;
        if(dp[mask][sum] != -1) return dp[mask][sum];
        int ans = INT_MAX;
        for(int i = 0; i<nums.size(); i++) {
            if(mask & (1<<i)) continue;
            if(sum + nums[i] > st) {
                ans = min(ans, 1 + solve(mask|(1<<i), nums[i], nums, st));
            } else {
                ans = min(ans, solve(mask|(1<<i), sum + nums[i], nums, st));
            }
        }
        return dp[mask][sum] = ans;
    }
    int minSessions(vector<int>& nums, int st) {
        memset(dp, -1, sizeof dp);
        done = (1<<nums.size())-1;
        return solve(0, 0, nums, st);
    }
};