class BST{
    public:
     long long val;
    BST *left;
    BST *right;
   
    BST(int v){
        val=v;
        left=NULL;
        right=NULL;
    }
    
};

class Solution {
public:
    long long md=1e9+7;
    int dp[1001][1001];
    BST *insert(BST *root,int &val){
        
        if(!root) return new BST(val);
        
        if(root->val>val)
            root->left=insert(root->left,val);
        else
            root->right=insert(root->right,val);
        
        return root;
    }
    
    long long cal(long long n, long long k)
    {
      
        if (k > n or k<0)
            return 0;
        if (k == 0 || k == n)
            return 1;
        if(dp[n][k]!=-1) return dp[n][k];
        
        return dp[n][k]=(cal(n - 1, k - 1)
               + cal(n - 1, k))%md;
    }
    pair<long long,long long> fun(BST *root){
        
        if(!root) return {0,1};
        
        if(!root->left and !root->right) return {1,1};
        
        pair<long long,long long> left=fun(root->left);
        pair<long long,long long> right=fun(root->right);
        
        int total=left.first+right.first;
      
        
        long long ans=(cal(total-1,right.first-1)+cal(total-1,left.first-1))%md;
                       
        ans=(ans*right.second)%md; 
        
        ans=(ans*left.second)%md;
         
        return {total+1,ans%md};
    }
    int numOfWays(vector<int>& nums) {
        
        BST *root=NULL;
        
        for(int i=0;i<1001;i++)
            for(int j=0;j<1001;j++)
                dp[i][j]=-1;
        for(auto &n:nums)
            root=insert(root,n);
        
        int t=nums.size()-2;

        return (fun(root).second-1)%md;
    }
};