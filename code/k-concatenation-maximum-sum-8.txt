class Solution {
    typedef long long ll;
public:
    int kConcatenationMaxSum(vector<int>& arr, int k) {
        ll sum = accumulate(arr.begin(), arr.end(), 0);
        ll big = 1e9 + 7;
        
        vector<int> twice = arr;
        twice.insert(twice.end(), arr.begin(), arr.end());
        ll max_partial_sum = 0, tmp_sum = 0;
        for(int i=0; i<twice.size(); ++i) {
            tmp_sum = max(tmp_sum + (ll)twice[i], (ll)twice[i]);
            max_partial_sum = max(max_partial_sum, tmp_sum);
            if(k == 1 && i ==arr.size() - 1) {
                return max_partial_sum % big;
            }
        }
		
        ll res = max_partial_sum + (sum > 0 ? (k-2) * sum : 0);
        return res % big;
    }
};