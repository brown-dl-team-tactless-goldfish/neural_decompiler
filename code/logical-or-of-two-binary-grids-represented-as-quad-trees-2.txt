class Solution {
public:
    Node* intersect(Node* quadTree1, Node* quadTree2) {
        if(!quadTree1 || !quadTree2) {}
        else if(quadTree1->isLeaf && quadTree2->isLeaf) {
            quadTree1->val |= quadTree2->val;
        } else if(quadTree1->isLeaf) {
            if(!quadTree1->val) {
                std::swap(quadTree1, quadTree2);
                quadTree1->topLeft = intersect(quadTree1->topLeft, quadTree2);
                quadTree1->topRight = intersect(quadTree1->topRight, quadTree2);
                quadTree1->bottomLeft = intersect(quadTree1->bottomLeft, quadTree2);
                quadTree1->bottomRight = intersect(quadTree1->bottomRight, quadTree2);
            }
        } else if(quadTree2->isLeaf) {
            quadTree1->topLeft = intersect(quadTree1->topLeft, quadTree2);
            quadTree1->topRight = intersect(quadTree1->topRight, quadTree2);
            quadTree1->bottomLeft = intersect(quadTree1->bottomLeft, quadTree2);
            quadTree1->bottomRight = intersect(quadTree1->bottomRight, quadTree2);
        } else {
            quadTree1->topLeft = intersect(quadTree1->topLeft, quadTree2->topLeft);
            quadTree1->topRight = intersect(quadTree1->topRight, quadTree2->topRight);
            quadTree1->bottomLeft = intersect(quadTree1->bottomLeft, quadTree2->bottomLeft);
            quadTree1->bottomRight = intersect(quadTree1->bottomRight, quadTree2->bottomRight);
        }
        
        if(!quadTree1->isLeaf && 
           quadTree1->topLeft->isLeaf &&
           quadTree1->topRight->isLeaf &&
           quadTree1->bottomLeft->isLeaf &&
           quadTree1->bottomRight->isLeaf &&
           quadTree1->topLeft->val == quadTree1->topRight->val &&
           quadTree1->topLeft->val == quadTree1->bottomLeft->val &&
           quadTree1->topLeft->val == quadTree1->bottomRight->val) {
            quadTree1->val = quadTree1->topLeft->val, quadTree1->isLeaf = true;
            quadTree1->topLeft = quadTree1->topRight = quadTree1->bottomLeft = quadTree1->bottomRight = nullptr;
        }
        
        return quadTree1;
    }
};