class Solution {
    const int MOD = 1e9+7;
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int, int>>> mat(n);
        for (vector<int> road : roads) {
            mat[road[0]].push_back(make_pair(road[1], road[2]));
            mat[road[1]].push_back(make_pair(road[0], road[2]));
        }
        priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
        vector<long long> dist(n, LLONG_MAX), count(n);
        pq.push(make_pair(0, 0));
        dist[0] = 0; count[0] = 1;
        while (!pq.empty()) {
            int u = pq.top().second;
            if (u==n-1)
                break;
            pq.pop();
            for (pair<int, int> dest : mat[u]) {
                int v = dest.first;
                long long weight = dest.second;
                if (dist[v] == dist[u] + weight) {
                    count[v] = (count[v] + count[u]) % MOD;
                }
                else if (dist[v] > dist[u] + weight) {
                    dist[v] = dist[u] + weight;
                    pq.push(make_pair(dist[v], v));
                    count[v] = count[u];
                }
            }
        }
        return count[n-1] % MOD;
    }
};