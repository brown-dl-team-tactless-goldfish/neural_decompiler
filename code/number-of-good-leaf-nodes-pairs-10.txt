    int countPairs(TreeNode* root, int distance) {
        auto res = 0;
        dfs(root, distance,res);
        return res;
    }
    vector<int> dfs(TreeNode* root, int distance,int& res) {
        if (!root) return {};
        if (!root->left && !root->right) return {1};
        const auto& left, right = dfs(root->left, distance, res), dfs(root->right, distance, res);
        res += accumulate(left.begin(),left.end(),0,[&](auto sum,auto l_val){
               return sum + count_if(right.begin(),right.end(),[&](auto r_val){
                   return r_val + l_val <= distance; 
                   });
               });
        vector<int> root_dis;
            for(const auto& val :left) if (val < distance) root_dis.push_back(val+1);
            for(const auto& val :right) if (val < distance) root_dis.push_back(val+1);
        return root_dis;
    }