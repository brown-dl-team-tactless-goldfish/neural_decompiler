class Solution {
public:
    int minCost(vector<int>& nums, int k) {
        int n = nums.size();

        // trimmed length
        vector<vector<int>> trl(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++) {
            vector<int> mp(n, 0);
            int unique = 0;
            for(int j = i; j < n; j++) {
                int num = nums[j];
                if(mp[num] == 1) 
                    unique -= 1;
                else if(mp[num] == 0) 
                    unique += 1;

                mp[num] += 1;
                trl[i][j] = (j-i+1) - unique;
            }
        }

        // for(int i = 0; i < n; i++) {
        //     for(int j = 0; j < n; j++) 
        //         cout << trl[i][j] << " ";
        //     cout << endl;
        // }

        vector<int> dp(n, INT_MAX);
        for(int i = 0; i < n; i++) {
            for(int j = i; j < n; j++) {
                if(i == 0)
                    dp[j] = min(dp[j], k+trl[i][j]);
                else 
                    dp[j] = min(dp[j], k+trl[i][j]+dp[i-1]);
            } 
        }

        return dp[n-1];
    }
};


