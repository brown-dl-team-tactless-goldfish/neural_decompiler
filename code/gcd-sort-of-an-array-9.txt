class Solution {
public:
    int ds[100001] = {[0 ... 100000] = -1};
    int find (int i) {
        return ds[i] < 0 ? i : ds[i] = find(ds[i]);
    }
    void _union (int i, int j) {
        int p1 = find(i), p2 = find(j);
        if (p1 != p2) ds[p2] = p1;
    }
    bool gcdSort(vector<int>& nums) {
        int n = nums.size(), mx = *max_element(begin(nums), end(nums));
        vector<long> p(mx + 1);
        for (long i = 2; i < mx + 1; i++) {
            if (p[i]) continue;
            p[i] = i;
            for (long j = i * i; j < mx + 1; j += i)
                p[j] = i;
        }
        
        for (auto t : nums)
            for (int j = t; j > 1; j /= p[j]) 
                _union(p[j], t);

        
        vector<int> sorted(nums);
        sort(begin(sorted), end(sorted));
        
        for (int i = 0; i < n; i++)
            if (find(nums[i]) != find(sorted[i])) return false;
        return true;
    }
};