bool possibleBipartition(int n, int** dislikes, int dislikesSize, int* dislikesColSize){
    if(dislikesSize == 0)
        return true;
    int* cn = calloc(n+1, sizeof(int));
    for(int i = 0; i < dislikesSize; i++){
        int x = dislikes[i][0];
        int y = dislikes[i][1];
        cn[x]++;
        cn[y]++;
    }
    
    int** map = malloc( (n + 1) * sizeof(int*));
    for(int i = 1; i <= n; i++){
        map[i] = malloc((cn[i] + 1) * sizeof(int));
        map[i][0] = 0;
    }
    
    for(int i = 0; i < dislikesSize; i++){
        int x = dislikes[i][0];
        int y = dislikes[i][1];
        int pos;
        map[x][0]++;
        pos = map[x][0];
        map[x][pos] = y;
        
        map[y][0]++;
        pos = map[y][0];
        map[y][pos] = x;
    }
    int* stack1 = malloc(n * sizeof(int));
    int* stack2 = malloc(n * sizeof(int));
    
    int* color = calloc(n+1, sizeof(int));
    bool* visit = calloc(n+1, sizeof(bool));
    //BFS
    for(int m = 1; m <=n; m++){
        if(map[m][0] == 0 || color[m] != 0)
            continue;
        stack1[0] = m;
        color[ m ] = 1;
        int idx1 = 1, idx2 = 0 ;
        while(idx1 > 0 || idx2 > 0){
            if(idx1 > 0){
                for(int i = 0; i < idx1; i++){
                    int k = stack1[i];
                    for(int j = 1; j <= map[k][0]; j++){
                        int t = map[k][j] ;
                        if(color[t] == 0){
                            color[t] = -1*color[k];
                            stack2[idx2] = t;
                            idx2++;
                        }
                        if(color[t] == color[k])
                            return false;
                    }
                }
                idx1 = 0;
            }
            else{
                for(int i = 0; i < idx2; i++){
                    int k = stack2[i];
                    for(int j = 1; j <= map[k][0]; j++){
                        int t = map[k][j] ;
                        if(color[t] == 0){
                            color[t] = -1*color[k];
                            stack1[idx1] = t;
                            idx1++;
                        }
                        if(color[t] == color[k])
                            return false;
                    }
                }
                idx2 = 0;
            }
        }
    }
    return true;
}