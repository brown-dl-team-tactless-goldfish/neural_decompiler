struct TrieNode{
    char val;
    TrieNode * next[26];
    bool isWord;
    TrieNode(){
        for(int i = 0;i < 26; ++i){
            this->next[i] = NULL;
        }
        this->isWord = false;
    }
};

bool insertTrie(TrieNode * root,string word){
    reverse(word.begin(),word.end());
    TrieNode * node = root;
    
    for(auto c : word){
        if(node->next[c-'a'] == NULL){
            node->next[c-'a'] = new TrieNode();
        }
        node = node->next[c-'a'];
    }
    node->isWord = true;
    
    return true;
}

bool searchTrie(TrieNode * root,string & word){
    TrieNode * node = root;
    
    for(int i = word.size()-1; i >= 0; --i){
        if(node->next[word[i]-'a'] == NULL){
            return false;
        }
        node = node->next[word[i]-'a'];
        if(node->isWord){
            return true;
        }
    }
    
    return false;
}

class StreamChecker {
public:
    StreamChecker(vector<string>& words) {
        root = new TrieNode();
        for(auto w : words){
            insertTrie(root,w);
        }
    }
    
    bool query(char letter) {
        str.push_back(letter);
        return searchTrie(root,str);
    }
private:
    TrieNode * root;
    string str;
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */