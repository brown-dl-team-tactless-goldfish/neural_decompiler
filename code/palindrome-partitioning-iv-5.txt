class Solution {
public:
    int dp[2001][4];
    int paldp[2001][2001];
    bool ispal(string &s, int i, int j)
    {
        if(i>=j) return paldp[i][j] = true;
        if(paldp[i][j]!=-1) return paldp[i][j];
        if(s[i]!=s[j]) return paldp[i][j] = false;
        return paldp[i][j] = ispal(s, i+1, j-1);
    }
    bool solve(string &s, int start, int k)
    {
        if(start==s.length() && k==3)
        {
            return true;
        }
        if(k>3 || start>=s.length()) return false;
        if(dp[start][k]!=-1) return dp[start][k];
        bool ans = false;
        for(int i = start;i<s.length();i++)
        {
            if(ispal(s, start, start+(i-start)))
            {
                ans |= solve(s, i+1, k+1);
            }
        }
        return dp[start][k] = ans;
    }
    bool checkPartitioning(string s) {
        memset(dp, -1, sizeof(dp));
        memset(paldp, -1, sizeof(paldp));
        return solve(s, 0, 0);
    }
};