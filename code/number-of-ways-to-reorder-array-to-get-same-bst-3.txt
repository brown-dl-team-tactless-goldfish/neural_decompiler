class Solution {
    typedef long long ll;
    ll big;
    vector<vector<ll>> dp;
public:
    int numOfWays(vector<int>& nums) {
        big = 1e9 + 7;
        dp.resize(nums.size(), vector<ll>(nums.size(), 0));
        return helper(nums) - 1;
    }
    
    ll helper(vector<int>& nums) {
        if(nums.size() <= 1) return 1;
        
        int root = nums[0];
        vector<int> smaller, bigger;
        for(int i=1; i<nums.size(); ++i) {
            if(nums[i] < root) {
                smaller.push_back(nums[i]);
            } else {
                bigger.push_back(nums[i]);
            }
        }
        
        ll left = helper(smaller);
        ll right = helper(bigger);
        int m = smaller.size() + bigger.size();
        int n = smaller.size() < bigger.size() ? smaller.size() : bigger.size();
        
        ll c = combination(m, n);
        
        ll res = (left * right) % big;
        res = (res * c) % big;
        return res;
    }
    
    ll combination(ll m, ll n) {
        if(n == m) return 1;
        else if(n == 0) return 1;
        if(dp[m][n] != 0) return dp[m][n];
        
        ll res = (combination(m-1, n) + combination(m-1, n-1)) % big;
        dp[m][n] = res;
        return res;
    }
};