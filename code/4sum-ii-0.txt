int cmpfunc(const void* a, const void* b);
int countBarray(int* nums, int numsSize, int k);
    
int fourSumCount(int* nums1, int nums1Size, int* nums2, int nums2Size, int* nums3, int nums3Size, int* nums4, int nums4Size){
    int i, j;
    int aSize = nums1Size * nums2Size;
    int bSize = nums3Size * nums4Size;
    
    int* aArray = malloc(aSize * sizeof(int));
    int* bArray = malloc(bSize * sizeof(int));
    int idx = 0;
    for(i = 0; i < nums1Size; i++){
        for(j = 0; j < nums2Size; j++){
            aArray[idx] = nums1[i] + nums2[j];
            idx++;
        }
    }
    idx = 0;
    for(i = 0; i < nums3Size; i++){
        for(j = 0; j < nums4Size; j++){
            bArray[idx] = nums3[i] + nums4[j];
            idx++;
        }
    }
    qsort(aArray, aSize, sizeof(int), cmpfunc);
    qsort(bArray, bSize, sizeof(int), cmpfunc);
    int temp;
    int ans = 0;
    for(i = 0; i < aSize; i++){
        if(i > 0 && aArray[i] == aArray[i-1]){
            ans += temp;   
        }
        else{
           // temp = 0;
            temp = countBarray(bArray, bSize, -1 * aArray[i]);
            ans += temp;
        }
    }
    
    free(aArray);
    free(bArray);
    return ans;
}

int countBarray(int* nums, int numsSize, int k){
    int cn = 0;
    int left = 0; 
    int right = numsSize -1;
    int mid;
    bool find = false;
    while(left <= right){
        mid = (left + right)/2;
        if(nums[mid] == k){
            find = true;
            cn =  1;
            break;
        }
        
        else if(nums[mid] < k){
            left = mid + 1;
        }
        else{
            right = mid - 1;
        }
    }
    int i;
    if(find){
        for(i = mid + 1; i < numsSize; i++){
            if(nums[i] == k)
                cn++;
            else
                break;
        }
        
        for(i = mid -1; i >= 0; i--){
            if(nums[i] == k)
                cn++;
            else
                break;
        }
    }

    return cn;
}

int cmpfunc(const void* a, const void* b){
    
    return *(int*)a - *(int*)b;
        
}