typedef long long ll;
class BookMyShow {
public:
    const static int maxn=1e5+10;
    ll seg[maxn<<2],mx[maxn<<2],lzy[maxn<<2],len[maxn<<2];
    int n,m;
    void init(int cur,int l,int r,int val)
    {
        if(l+1==r)
        {
            seg[cur]=val;
            mx[cur]=val;
            len[cur]=1;
            return;
        }
        len[cur]=r-l;
        int mid=(l+r)>>1;
        init(cur<<1,l,mid,val);
        init(cur<<1|1,mid,r,val);
        seg[cur]=seg[cur<<1]+seg[cur<<1|1];
        mx[cur]=max(mx[cur<<1],mx[cur<<1|1]);
        return;
    }
    void pushdown(int cur)
    {
        if(lzy[cur])
        {
            int l=cur<<1,r=cur<<1|1;
            if(lzy[cur]==1)
            {
                seg[l]=seg[r]=mx[l]=mx[r]=0;
                lzy[l]=lzy[r]=1;
            }else
            {
                seg[l]-=lzy[l]*len[l];
                mx[l]-=lzy[l];
                seg[r]-=lzy[r]*len[r];
                mx[r]-=lzy[r];
                lzy[l]=lzy[cur];
                lzy[r]=lzy[cur];
            }
            lzy[cur]=0;
        }
        return;
    }
    pair<int,int> query_mx(int cur,int l,int r,int target)
    {
        if(l+1==r)
            return {l,mx[cur]};
        int mid=(l+r)>>1;
        pushdown(cur);
        if(mx[cur<<1]>=target)return query_mx(cur<<1,l,mid,target);
        return query_mx(cur<<1|1,mid,r,target);
    }
    void update(int cur,int l,int r,int ql,int qr,int val)
    {
        if(ql<=l&&r<=qr)
        {
            if(val==1)
            {
                seg[cur]=0;
                lzy[cur]=1;
                mx[cur]=0;
            }else
            {
                seg[cur]+=val*len[cur];
                lzy[cur]+=val;
                mx[cur]+=val;
            }
            return;
        }
        if(ql>=r||qr<=l)return;
        int mid=(l+r)>>1;
        pushdown(cur);
        update(cur<<1,l,mid,ql,qr,val);
        update(cur<<1|1,mid,r,ql,qr,val);
        seg[cur]=seg[cur<<1]+seg[cur<<1|1];
        mx[cur]=max(mx[cur<<1],mx[cur<<1|1]);
        return;
    }
    int query_tot(int cur,int l,int r,int target)
    {
        if(l+1==r)return l;
        int mid=(l+r)>>1;
        if(seg[cur<<1]>=target)return query_tot(cur<<1,l,mid,target);
        return query_tot(cur<<1|1,mid,r,target-seg[cur<<1]);
    }
    ll get_tot(int cur,int l,int r,int ql,int qr)
    {
        if(ql<=l&&r<=qr)return seg[cur];
        if(l>=qr||r<=ql)return 0;
        int mid=(l+r)>>1;
        return get_tot(cur<<1,l,mid,ql,qr)+get_tot(cur<<1|1,mid,r,ql,qr);
    }
    BookMyShow(int n, int m) {
        this->n=n;
        this->m=m;
        init(1,1,n+1,m);
    }
    
    vector<int> gather(int k, int maxRow) {
        maxRow+=1;
        if(mx[1]<k)return {};
        pair<int,int>res=query_mx(1,1,n+1,k);
        if(res.first>maxRow)return {};
        update(1,1,n+1,res.first,res.first+1,-k);
        return {res.first-1,m-res.second};
    }
    
    bool scatter(int k, int maxRow) {
        if(seg[1]<k)return false;
        maxRow+=1;
        int layer=query_tot(1,1,n+1,k);
        ll total=get_tot(1,1,n+1,1,layer);
        k-=total;
        if(layer>maxRow)return false;
        update(1,1,n+1,1,layer,1);
        update(1,1,n+1,layer,layer+1,-k);
        return true;
    }
};
