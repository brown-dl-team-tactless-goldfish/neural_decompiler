class Solution {
 private:
  int Sum(vector<vector<int>>&dp, int r1, int c1, int r2, int c2) {
    return dp[r2 + 1][c2 + 1] - dp[r1][c2 + 1] - dp[r2 + 1][c1] +
           dp[r1][c1];
  }
public:
    int maxSideLength(vector<vector<int>>& mat, int threshold) {
        int m = mat.size() ;
        int n = mat[0].size() ;
        vector<vector<int>>dp(m+1, vector<int>(n+1)) ;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                dp[i+1][j+1] = mat[i][j] + dp[i][j+1] + dp[i+1][j] - dp[i][j] ;
            }
        }
        int ans = 0 ;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                for(int k = ans; k < min(m-i, n-j); k++){
                    if( Sum(dp, i, j, i+k, j+k) > threshold )
                        break ;
                    ans = k + 1 ;
                }
            }
        }
        return ans ;
    }
};