class Solution {
public:
    
    // recursively mark the genetic value of the subtree nodes
    void dfs(int index, vector<vector<int>>&tree, vector<int>&nums, vector<bool>&visited, vector<bool>&vals)
    {
        visited[index] = true;
        if(nums[index]<vals.size())
            vals[nums[index]]=true;
        
        for(int i=0;i<tree[index].size();i++)
            if(!visited[tree[index][i]])
                dfs(tree[index][i],tree,nums,visited,vals);        
    }
    
    vector<int> smallestMissingValueSubtree(vector<int>& parents, vector<int>& nums) {
        
        // create tree from the given parent list
        int n = parents.size();
        vector<vector<int>>tree(n);
        
        for(int i=1;i<n;i++)
            tree[parents[i]].push_back(i);
        

        // all nodes result is 1 initially
        vector<int>ans(n,1);        
        
        // find the index of node which has genetic value 1
        int oneIndex = -1;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==1)
            {
                oneIndex = i;
                break;
            }            
        }
        
        // if there is no node with genetic value 1 then all nodes result is 1
        if(oneIndex==-1)return ans;
        
        // node visiting track for DFS
        vector<bool>visited(n,false); 
        
        // mark taken genetic value
        vector<bool>vals(n+2,false);
        
        // first missing value is 1
        int miss = 1;
        
        // starting from node with genetic value 1 move upward to the root        
        while(oneIndex!=-1)
        {
            // each step run DFS to mark the genetic value of all its descendant nodes
            dfs(oneIndex,tree,nums,visited,vals);
            
            // get first unmarked value which is the missing value for current node
            while(vals[miss])miss++;
            
            ans[oneIndex] = miss;
            
            // move upward to parent node
            oneIndex = parents[oneIndex];
        }
        
        return ans;
    }
};