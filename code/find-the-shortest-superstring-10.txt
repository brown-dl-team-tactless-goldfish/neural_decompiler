class Solution {
public:
    
    string GetOverLapping(string a, string b){
        
        int M=0;
        
        int aplusb=0;
            
        int bplusa=0;
        
        //string ans="";
        
        for(int i=1;i<=min(a.length(),b.length());i++){
            if(a.compare(a.length()-i,i,b,0,i)==0){
                if(i>M){
                    M=i;
                    bplusa=0;
                    aplusb=1;
                }
            }     
        }
        
        for(int i=1;i<=min(a.length(),b.length());i++){
            if(b.compare(b.length()-i,i,a,0,i)==0){
                if(i>M){
                    M=i;
                    bplusa=1;
                    aplusb=0;
                }
            }     
        }
        
        //cout<<aplusb<<" "<<bplusa<<endl;
        if(aplusb){
            //cout<<a.substr(0,a.length()-M)+b.substr(M)<<endl;
            //cout<<a<<" "<<b<<" "<<M<<endl;
            return a+b.substr(M);
        }
        else
        {
            //cout<<b.substr(0,b.length()-M)+a.substr(M)<<endl;
            //cout<<b<<" "<<a<<" "<<M<<endl;
            return b+a.substr(M);
        }
    }
    
    
    string shortestSuperstring(vector<string>& A) {
        
        
        vector <string> collection = A;
        
        while(1){
            
            if(collection.size()==1)
                break;
            
            int maxSize = -1;
            
            int x = -1;
            int y = -1;
            
            string mystr;
            
            for(int i=0;i<collection.size();i++){
                for(int j=i+1;j<collection.size();j++){
                    string f =  collection[i];
                    string s = collection[j];
                    
                    string ovl = GetOverLapping(f,s);
                    
                    int saved = f.length()+s.length() - ovl.length();
                    
                    //maxSize = max(maxSize, saved);
                    
                    if(saved > maxSize){
                        maxSize = saved;
                        x=i;
                        y=j;
                        
                        mystr = ovl;
                    }
                }
            }
            
            
            
            string str1 = collection[x];
            string str2 = collection[y];
            
            //cout<<str1<<" "<<str2<<endl;
            collection.erase(collection.begin()+min(x,y));
            collection.erase(collection.begin()+(max(x,y)-1));
        
            collection.push_back(mystr);
            /*
            for(auto x: collection)
                cout<<x<<" ";
            cout<<endl;
            */
            
            
            
            
        }
        return collection[0];
        
    }
};