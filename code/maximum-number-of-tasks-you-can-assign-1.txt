public class Solution {
    public int MaxTaskAssign(int[] t, int[] w, int p, int s) {
        Array.Sort(t);
        Array.Sort(w);
        
        int l = 0, r = Math.Min(t.Length, w.Length);
        while (l + 1 < r) {
            int m = l + (r - l) / 2;
            if (CanAssign(t, w, p, s, m)) {
                l = m;
            } else {
                r = m;
            }
        }
        
        if (CanAssign(t, w, p, s, r)) return r;
        else return l;
    }
    
    public bool CanAssign(int[] t, int[] w, int p, int s, int cnt) {
        List<int> dq = new List<int>();
        int end = w.Length - 1;
        for (int i = cnt - 1; i >= 0; --i) {
            while (end >= w.Length - cnt && w[end] + s >= t[i]) {
                dq.Add(w[end]);
                end--;
            }
            
            if (dq.Count == 0) return false;
        
            if (dq[0] >= t[i]) {
                dq.RemoveAt(0);
            } else {
                dq.RemoveAt(dq.Count - 1);
                p--;
                if (p < 0) return false;
            }
        }
        
        return true;
    }
}