class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int i=0;
        int j=0;
        int k=1;
        int result=INT_MIN;
        int count=0;
        // Variable Window Size Problem
        while(j<nums.size())
        {
           // Pre-calculation
            if(nums[j]==0)
                count++;
           
            // Play With Condition
            if(count<k)
                j++;
            else
            {
                if(count==k)
                {
                    // Store the Result
                    result=max(result,j-i);
                    j++;
                }
                else
                {
                    while(count>k)
                    {
                        // Remove Calculation for i
                        if(nums[i]==0)
                            count--;
                        i++;
                    }
                    j++;
                }
            }
            
        }
        return result==INT_MIN?nums.size()-1:result;
    }
};

Time Complexity: O(n)
Space Compelxity: O(1)