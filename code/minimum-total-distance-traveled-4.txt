class Solution {
public:
    long long MAX_V = 200000000001;
    long long minimumTotalDistance(vector<int>& R, vector<vector<int>>& F) {
        sort(begin(R), end(R));
        sort(begin(F), end(F));

        vector<vector<long long>> dp(R.size(), vector<long long>(F.size(), MAX_V));
        return helper(R, F, 0, 0, dp);
    }

    long long helper(vector<int>& R, vector<vector<int>>& F, int i, int j, vector<vector<long long>>& dp) {
        if(i >= R.size()) return 0LL;
        if(j >= F.size()) return MAX_V;

        if(dp[i][j] != MAX_V) return dp[i][j];

        long long res = helper(R, F, i, j+1, dp), dist = 0;
        for(int k = 1; k <= F[j][1] && i+k-1 < R.size(); k++) {
            dist += abs(R[i+k-1]-F[j][0]);
            res = min(res, dist + helper(R, F, i+k, j+1, dp));
        }
        dp[i][j] = res;
        return res;
    }
};