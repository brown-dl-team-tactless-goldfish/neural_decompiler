class Solution {
    
    void dfs(vector<int> &v, int num, int from, const int to, map<vector<int>, int> &all, const vector<vector<int>>& requests) {
        if (from > to) {
            const auto t = all.find(v);
            if (t == all.end() || t->second < num) {
                all[v] = num;
            }
            return;
        }
        --v[requests[from][0]];
        ++v[requests[from][1]];
        dfs(v, num + 1, from + 1, to, all, requests);
        ++v[requests[from][0]];
        --v[requests[from][1]];
        dfs(v, num, from + 1, to, all, requests);
    }
public:
    int maximumRequests(int n, vector<vector<int>>& requests) {
        vector<int> v(n);
        const int mid = requests.size() >> 1;
        map<vector<int>, int> all1, all2;
        dfs(v, 0, 0, mid, all1, requests);
        dfs(v, 0, mid + 1, requests.size() - 1, all2, requests);
        int r = 0;
        for (const auto &p : all1) {
            v = p.first;
            for (int &x : v) {
                x = -x;
            }
            const auto t = all2.find(v);
            if (t != all2.end()) {
                r = max(r, t->second + p.second);
            }
            
        }
        return r;
        
    }
};