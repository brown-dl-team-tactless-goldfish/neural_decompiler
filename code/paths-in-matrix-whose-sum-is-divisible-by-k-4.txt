using LL = long long ;
class Solution {
    int M = 1e9 + 7 ;
public:
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int m = grid.size() ;
        int n = grid[0].size() ;
        auto dp = vector<vector<vector<LL>>>(m, vector<vector<LL>>(n, vector<LL>(k))) ;
        LL sum = 0 ;
        for(int i = 0; i < m; i++){
            sum = (sum + grid[i][0]) % k ;
            dp[i][0][sum]++ ;
        }

        sum = grid[0][0] ;
        for(int j = 1; j < n; j++){
            sum = (sum + grid[0][j]) % k ;
            dp[0][j][sum]++ ;
        }

        for(int i  = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                for(int r = 0; r < k ; r++){
                    int t = ((r - grid[i][j])%k + k)%k ;
                    dp[i][j][r] = (dp[i-1][j][t] + dp[i][j-1][t]) % M ;
                }
            }
        }
        return dp[m-1][n-1][0] ;
    }
};