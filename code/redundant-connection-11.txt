class UnionFind{
private :
    vector<int> parent;
    vector<int> rank;
    
public :
    UnionFind(int n){
        parent = vector<int>(n,-1);
        rank = vector<int> (n,0);
    }
    int find(int i){
        if(parent[i]==i)
            return i;
        return parent[i] = find(parent[i]);
    }
    bool Union(int x,int y){
        int x_root= find(x), y_root = find(y);
        if(x_root ==y_root)
            return false;
        if(rank[x_root]<rank[y_root]){
            parent[x_root] = y_root;
        }
        else if(rank[x_root]>rank[y_root]){
            parent[y_root] = x_root;
        }
        else{
            parent[x_root] = y_root;
            rank[y_root]+=1;
        }
        return true;
    }
    void setParent(int i){
        if(parent[i]==-1){
            parent[i] = i;
        }
    }
};
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        UnionFind uf(n+1);
        
        for(auto e : edges){
            uf.setParent(e[0]);
            uf.setParent(e[1]);
            if(uf.Union(e[0],e[1]) == false)
                return e;
        }
        return {};
    }
};