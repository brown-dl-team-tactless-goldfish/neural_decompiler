/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
///// Create string using PreOrder traversal 
///// Deserialize using PreOrder 
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if (!root)
            return "NULL";
        
        string output;
        serializeHelper(root,output);
        
        return output;
        
    }
    
    void serializeHelper(TreeNode* root, string &output)
    {
        if (!root)
        {
            output =  output + " "+ "NULL";
            return;
        }
        output = output + " " + std::to_string(root->val);
        
        serializeHelper(root->left, output);
        serializeHelper(root->right,output); 
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        
    vector<string> result;
    istringstream iss(data);
    for (string s; iss >> s; )
        result.push_back(s);
        
        int i = 0;
        return deserializeHelper(result, i);
    }
    
    TreeNode* deserializeHelper(vector<string> data, int &i)
    {
      if (data.at(i) == "NULL")
      {
          i++;
        return NULL;
      }
        
        TreeNode* root = new TreeNode(stoi(data.at(i)));
        i++;
        root->left = deserializeHelper(data,i);
        root->right = deserializeHelper(data,i);
        
        return root;
    }
    
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));