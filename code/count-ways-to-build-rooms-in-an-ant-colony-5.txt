vector<long long> perm(100001);
const long long mod=1e9+7;
class Solution {
public: 
    long long power(long long a,long long b,long long m)
    {
        long long res=1;
        while(b!=0)
        {
            if(b%2==1)
                res=(res%mod*a%mod)%mod;
            b=b/2;
            a=(a%mod*a%mod)%mod;
            
        }
        return res;
    }
    pair<int,long long> dfs(int i,vector<vector<int>>&v)
    {
       
        vector<int> num;
        vector<long long> prod;
        int sum=0;
        for(auto it:v[i])
        {
         
            pair<int,long long> x=dfs(it,v);
            num.push_back(x.first);
            prod.push_back(x.second);
            sum+=x.first;
           
        }
        long long ans=perm[sum];
       
        for(auto it:num)
        {
            ans=(ans*power(perm[it],mod-2,mod))%mod;
        }
     
        for(auto it:prod)
            ans=(ans*it)%mod;
        
        return {sum+1,ans};
    }
    int waysToBuildRooms(vector<int>& prevRoom) {
        
        perm[0]=1;
        int n=prevRoom.size();
        for(int i=1;i<=n;i++)
        {
            perm[i]=(perm[i-1]*i)%mod;
        }
    
        vector<vector<int>> v(n);
        for(int i=1;i<prevRoom.size();i++)
        {
            v[prevRoom[i]].push_back(i);
        }
        
        pair<int,long long> ans=dfs(0,v);
        return ans.second;
    }
};