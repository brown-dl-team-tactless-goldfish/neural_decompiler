/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

/* Define count as a global variable that needs to be set to zero
   every time the *averageOfSubtree* function is entered.*/
int count = 0;

//Calculate the number of tree nodes
int TreeSize(struct TreeNode* root)
{
    if(root == NULL) return 0;
    return TreeSize(root->left) + TreeSize(root->right) + 1;
}

// Calculate the sum of node and its subtrees
int get_sum(struct TreeNode* root)
{
    if(root == NULL) return 0;
    return root->val + get_sum(root->left) + get_sum(root->right);
}

// Calculate the average value of node and its subtree
void get_average(struct TreeNode* root)
{
    if(root == NULL) return;
    // If the average is equal to the node valueï¼Œcount++
    if((get_sum(root) / TreeSize(root)) == root->val) count++;
    get_average(root->left);
    get_average(root->right);
}

int averageOfSubtree(struct TreeNode* root){
    count = 0;
    if(root == NULL) return 0;
    get_average(root);
    return count;
}
