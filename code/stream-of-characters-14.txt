class TrieNode{
    public:
      bool isWord = false;
      TrieNode* children[26];
};
class StreamChecker {
public:
    TrieNode *root;
    string querystr;
    StreamChecker(vector<string>& words) {
        root = new TrieNode();
        for(auto w: words){
            TrieNode * cur = root;
            for(int i = w.size()-1; i>=0; i--){
                char c = w[i];
                if (cur->children[c-'a'] == nullptr){
                    cur->children[c-'a'] = new TrieNode();
                }
                cur = cur->children[c-'a'];
            }
            cur->isWord = true;
        }
    }
    
    bool query(char letter) {
        querystr.push_back(letter);
        TrieNode * cur = root;
        for(int i=querystr.size() -1; i>=0; i--){
            char c = querystr[i];
            
            if(cur->children[c-'a'] != nullptr){
                cur = cur->children[c-'a'];
            }else{
                return false;
            }
            if(cur->isWord) return true;
        }
        return false; 
        
    }
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */