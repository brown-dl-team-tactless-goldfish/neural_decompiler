class Solution {
public:
//Helper function
    void stringBuilder(vector<string> &res,string str, int n, int k){
//Abort if kth string is already built
        if (res.size() == k)
            return;
// Check if current string is of size n, if yes then push to vector and return
        if (str.size() == n){
            res.push_back(str);
            return;
        }
// In Lexicographical  order, iterate over all the letters
        for (char c : {'a','b','c'}){
            if (str.back() != c) {
                stringBuilder(res,str+c,n,k);
            }
        }
    } 
    string getHappyString(int n, int k) {
        vector<string> res;
        string str;
        stringBuilder(res,str,n,k);
//Check if k is bigger than maximum possible string
        if(res.size() < k){
            return "";   
        }
        return res[k-1];
    }
};