typedef struct {
    int* stack;
    int head;
    int tail;
    int maxSize;
} CustomStack;


CustomStack* customStackCreate(int maxSize) {
    CustomStack* ret = malloc(sizeof(CustomStack));
    ret->stack = malloc(1000 * sizeof(int));
    ret->head = 0;
    ret->tail = 0;
    ret->maxSize = maxSize;
    return ret;
}

void customStackPush(CustomStack* obj, int x) {
    if( (obj->tail - obj->head) == obj->maxSize)  //full
        return;
    else{
        obj->stack[obj->tail] = x;
        obj->tail++;
    }
}

int customStackPop(CustomStack* obj) {
    if(obj->head == obj->tail)
        return -1;
    
    obj->tail--;
    return obj->stack[obj->tail];
}

void customStackIncrement(CustomStack* obj, int k, int val) {
    int cn = obj->tail - obj->head;  
    for(int i = 0; i < fmin(k, cn); i++){
        obj->stack[obj->head + i] += val;
    }
}

void customStackFree(CustomStack* obj) {
    free(obj->stack);
    free(obj);
}