// set invalid elements to empty string ""
int cleanInvalid(char ** ops, int opsSize){
    int count = 0;
    for(int i=0; i<opsSize; i++){
        if(ops[i][0]=='C'){
            count++;
            for(int j=i-1; j>=0; j--){
                if(ops[j][0]){
                    ops[j][0] = 0;
                    break;
                }
            }
            ops[i][0] = 0;
        }
    }
    return opsSize-2*count;  // return length
}

int calPoints(char ** ops, int opsSize){
    int len = cleanInvalid(ops, opsSize);
    int * arr = malloc(len * sizeof(int));
    for(int i=0; i<len; i++){
        arr[i] = 0;
    }
    int sum = 0;
    int index = 0;
    for(int i=0; i<opsSize; i++){
        if(!ops[i][0]) continue;
        if(ops[i][0] == 'D') arr[index] = 2*arr[index-1];
        else if(ops[i][0] == '+') arr[index] = arr[index-2] + arr[index-1];
        else arr[index] = atoi(ops[i]);
        sum += arr[index++];
    }
    return sum;
}