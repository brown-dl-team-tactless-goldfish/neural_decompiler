class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        if(arr.size()==1)return 1;
        int i=0;
        int j=0;
        int result=0;
        int prev_sign=0;
        
        int current_sign=0;
        // Variable size window problem
        while(j<arr.size()-1)
        {  
            // Do previous calculation
                if(j%2==0)
                {
                    if(arr[j]<arr[j+1])
                        current_sign=1;
                    else
                    if(arr[j]>arr[j+1])
                        current_sign=2;
                    else
                        current_sign=0;
                    
                }
                else
                {if(arr[j]<arr[j+1])
                        current_sign=2;
                 else
                     if(arr[j]>arr[j+1])
                         current_sign=1;
                 else current_sign=0;
                }
            
            // Play with condition
            if(prev_sign==0)
                prev_sign=current_sign;
          
            if(current_sign==0)
            {prev_sign=current_sign;
             i=j+1;}
               
             else
                if(current_sign!=prev_sign)
                {
                    prev_sign=current_sign;
                    i=j;
                }
                
             
               
                
            // Store result
            if(current_sign!=0)
            {result=max(result,j-i+1);}
                 j++;  
               
                    // cout<<"result="<<result<<endl;
            
        }
        
        return result+1;
    }
};

Time Complexity: O(n)
Space Complexity: O(1)