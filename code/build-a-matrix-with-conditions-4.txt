class Solution {
public:
    void kahn(vector<int> &a, vector<vector<int>> &cond, int k) {
        vector<vector<int>> adj(k+1);
        vector<int> in(k+1);
        for(auto c : cond) {
            in[c[1]]++;
            adj[c[0]].push_back(c[1]);
        }
        queue<int> q;
        for(int i=1; i<=k; i++) if(in[i]==0) q.push(i);
        
        while(!q.empty()) {
            int n = q.size();
            for(int i=0; i<n; i++) {
                int t = q.front(); q.pop();
                a.push_back(t);
                for(auto &ad: adj[t]) {
                    if(--in[ad] == 0) q.push(ad);   
                }
            }
        }
    }
    
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
        vector<int> rows, cols;
        kahn(rows, rowConditions, k);
        if(rows.size() < k) return {};
        kahn(cols, colConditions, k);
        if(cols.size() < k) return {};
        
        vector<vector<int>> res(k, vector<int>(k));
        vector<int> idxCol(k+1);
        for(int i=0; i<k; i++) idxCol[cols[i]] = i;
        for(int i=0; i<k; i++) res[i][idxCol[rows[i]]] = rows[i];
        return res;
    }
};