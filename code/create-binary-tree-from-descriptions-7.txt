class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_map<int, TreeNode*> mp; 
        unordered_set<int> seen; 
        for (auto& desc : descriptions) {
            int p = desc[0], c = desc[1], left = desc[2]; 
            if (!mp.count(p)) mp[p] = new TreeNode(p); 
            if (!mp.count(c)) mp[c] = new TreeNode(c); 
            if (left) mp[p]->left = mp[c]; 
            else mp[p]->right = mp[c]; 
            seen.insert(c); 
        }
        for (auto& desc : descriptions) 
            if (!seen.count(desc[0])) return mp[desc[0]]; 
        return nullptr; 
    }
};