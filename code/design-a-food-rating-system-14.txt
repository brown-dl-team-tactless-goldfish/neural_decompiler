 class FoodRatings {
public:

//comparator function
struct cmp{
    bool operator() (const pair<int, string> &p1, const pair<int, string> &p2) const{
        if (p1.first != p2.first){
            return p1.first > p2.first;  // sort acc to decreasing rating
        }
        else {
            return p1.second < p2.second;  //sort acc to lexicographically shortest letter
        }
    }
};

unordered_map<string, set<pair<int, string>, cmp> > cuisinToFood;
unordered_map<string, string> foodToCuisin;
unordered_map<string, int> foodToRate;

FoodRatings(vector<string>& f, vector<string>& c, vector<int>& r) {
    for (int i=0 ; i<f.size() ; i++){
        cuisinToFood[c[i]].insert({r[i], f[i]});
        foodToCuisin.insert({f[i], c[i]});
        foodToRate.insert({f[i], r[i]});
    }
}

void changeRating(string f, int nr) {
    string c = foodToCuisin[f];
    int r = foodToRate[f];
    foodToRate[f] = nr;
    cuisinToFood[c].erase({r, f});
    cuisinToFood[c].insert({nr, f});
}

string highestRated(string c) {
    pair<int, string> p = *(cuisinToFood[c].begin());  //iterator returned
    return p.second;
}
};