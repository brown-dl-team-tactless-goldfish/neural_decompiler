#define MAP_BITS (15)
#define MAP_SIZE (1 << MAP_BITS)
#define MAP_MASK (MAP_SIZE - 1)

struct keyval {
	int key;
	int val;
};

struct keyval *
mapget(const struct keyval *const map, const int key)
{
	unsigned long h, s;

	h = (unsigned long)((unsigned int)key * 2654435761u) >> 32 - MAP_BITS;
	s = 0;
	while (map[h].val != 0 && map[h].key != key)
		h = h + (++s) & MAP_MASK;

	return (struct keyval *)(map + h);
}

int
max(const int a, const int b)
{

	return a > b ? a : b;
}

int
findLHS(const int *const nums, const int numsSize)
{
	static struct keyval map[MAP_SIZE];
	int i, res, cnt;
	struct keyval *kv;

	for (i = 0; i < MAP_SIZE; ++i)
		map[i].val = 0;
	res = 0;
	for (i = 0; i < numsSize; ++i) {
		kv = mapget(map, nums[i]);
		kv->key = nums[i];
		cnt = ++(kv->val);
		if ((kv = mapget(map, nums[i] + 1))->val != 0)
			res = max(res, cnt + kv->val);
		if ((kv = mapget(map, nums[i] - 1))->val != 0)
			res = max(res, cnt + kv->val);
	}

	return res;
}