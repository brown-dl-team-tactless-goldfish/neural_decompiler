public class Solution {
    private int h = 0;
    
    public TreeNode SubtreeWithAllDeepest(TreeNode root) {
        if (root == null || root.left == null && root.right == null)
            return root;
        
        h = DetectHeight(root);
        
        return FindLCA(root, 1);
    }
    
    private int DetectHeight(TreeNode node)
    {
        if (node == null)
            return 0;
        
        int l = DetectHeight(node.left),
            r = DetectHeight(node.right);
        
        return l >= r ? l + 1 : r + 1;
    }
    
    private TreeNode FindLCA(TreeNode node, int i)
    {
        if (i == h)
            return node;
        
        TreeNode l = null, 
                 r = null;
        
        if (node.left != null)
            l = FindLCA(node.left, i + 1);
        
        if (node.right != null)
            r = FindLCA(node.right, i + 1);
        
        if (l != null && r != null)
            return node;
        else if (l != null)
            return l;
        else
            return r;
    }
}