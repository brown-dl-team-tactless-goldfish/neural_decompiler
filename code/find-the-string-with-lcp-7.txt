class Solution {
public:
    vector<int>fa;
    int findFather(int x)
    {
        if(fa[x]==x)return x;
        return fa[x]=findFather(fa[x]);
    }
    void Union(int x,int y)
    {
        x=fa[x];
        y=fa[y];
        fa[y]=x;
        return;
    }
    string findTheString(vector<vector<int>>& lcp)
    {
        int n=lcp.size();
        fa.resize(n);
        for(int i=0;i<n;i++)fa[i]=i;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
            {
                if(lcp[i][j]==0)continue;
                if(findFather(i)!=findFather(j))Union(i,j);
                if(i==j&&(lcp[i][j]!=n-i))return "";
            }
        set<int>Set;
        for(int i=0;i<n;i++)Set.insert(findFather(i));
        if(Set.size()>26)return "";
        map<int,char>Map;
        char c='a';
        string res="";
        for(int i=0;i<n;i++)
        {
            if(Map.count(fa[i])==false)
            {
                Map[fa[i]]=c;
                c++;
            }
            res.push_back(Map[fa[i]]);
        }
        vector<vector<int>>f(n,vector<int>(n,0));
        for(int i=n-1;i>=0;i--)
            for(int j=n-1;j>=0;j--)
            {
                if(res[i]!=res[j])f[i][j]=0;
                else if(i+1<n&&j+1<n)f[i][j]=f[i+1][j+1]+1;
                else f[i][j]=1;
            }
        for(int i=0;i<n;i++)for(int j=0;j<n;j++)if(f[i][j]!=lcp[i][j])return "";
        return res;
    }
};