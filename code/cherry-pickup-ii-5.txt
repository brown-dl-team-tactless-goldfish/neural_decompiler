class Solution {
public:
    static int cherryPickup(const vector<vector<int>>& grid) {
        int R{(int)grid.size()}, C{(int)grid[0].size()}, dp[2][70][70]{0}, dif[3]{-1, 0, 1};
        dp[0][0][C-1] = grid[0][0] + grid[0][C-1];
        for(int i{1}; i < R; ++i) {
            for(int j{0}; j < min(C, i+1); ++j) {
                for(int k{C-1}; k >= max(0, C-i-1); --k) {
                    int jj{0}, kk{0};
                    for(const int jd: dif) {
                        for(const int kd: dif) {
                            jj = j+jd, kk = k+kd;
                            if(jj >= 0 && jj < C && kk >= 0 && kk < C) dp[1][j][k] = max(dp[1][j][k], dp[0][jj][kk]);
                        }
                    }
                    dp[1][j][k] += j == k ? grid[i][j] : grid[i][j] + grid[i][k];
                }
            }
            swap(dp[0], dp[1]);
        }
        
        int max_{0};
        for(int j{0}; j < C; ++j)
            for(int k{0}; k < C; ++k)
                max_ = max(max_, dp[0][j][k]);

        return max_;
    }
};