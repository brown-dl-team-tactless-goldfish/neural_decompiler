public class Solution 
{
    int[] dx = new int[] {0, 1, 0, -1};
    int[] dy = new int[] {1, 0, -1, 0};
    
    public int ShortestPath(int[][] grid, int k) 
    {
        if(grid == null || grid.Length == 0 || grid[0].Length == 0) return -1;
        int r = grid.Length, c = grid[0].Length;
        var queue = new Queue<int[]>();
        var visited = new bool[r, c, k + 1];
        var length = new int[r, c, k + 1];
        queue.Enqueue(new int[] {0, 0, 0});
        visited[0, 0, 0] = true;
        length[0, 0, 0] = 0;
        
        while(queue.Count != 0)
        {
            var curr = queue.Dequeue();
            int x = curr[0], y = curr[1], obs = curr[2];
            for(int i = 0; i < 4; i++)
            {
                int nx = x + dx[i], ny = y + dy[i];
                if(nx >= 0 && nx < r && ny >= 0 && ny < c)
                {
                    if(grid[nx][ny] == 1)
                    {
                        if(obs + 1 <= k && !visited[nx, ny, obs + 1])
                        {
                            visited[nx, ny, obs + 1] = true;
                            queue.Enqueue(new int[] {nx, ny, obs + 1});
                            length[nx, ny, obs + 1] = length[x, y, obs] + 1;
                        }
                    }
                    else
                    {
                        if(!visited[nx, ny, obs])
                        {
                            visited[nx, ny, obs] = true;
                            queue.Enqueue(new int[] {nx, ny, obs});
                            length[nx, ny, obs] = length[x, y, obs] + 1;
                        }
                    }
                }
            }
        }
        
        int result = int.MaxValue;
        for(int i = 0; i <=k; i++)
            if(visited[r - 1, c - 1, i])
                result = Math.Min(result, length[r - 1, c - 1, i]);

        return result == int.MaxValue ? -1 : result;
    }
}