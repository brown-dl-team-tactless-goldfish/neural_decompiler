class Solution {
public:
    vector<pair<int, int>> dp;
    
    pair<int, int> dfs(vector<vector<int>>& graph, vector<int>& quiet, vector<int>& ans, int parent) {
        pair<int, int> res = make_pair(parent, quiet[parent]);
        if (!graph[parent].size()) {
            ans[parent] = res.first;
            return dp[parent] = res;
        }
        if (dp[parent] != make_pair(-1, -1)) {
            return dp[parent];
        }
        for (auto child : graph[parent]) {
            auto temp = dfs(graph, quiet, ans, child);
            if (temp.second < res.second) {
                res.first = temp.first;
                res.second = temp.second;
            }
        }
        ans[parent] = res.first;
        return dp[parent] = res;
    } 
    
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        dp.resize(quiet.size(), make_pair(-1, -1));
        vector<vector<int>> graph(quiet.size(), vector<int>{});
        for (auto &node : richer) {
            graph[node[1]].push_back(node[0]);
        }
        vector<int> ans(quiet.size(), -1);
        for (int i=0; i<quiet.size(); i++) {
            if (ans[i] == -1)
                dfs(graph, quiet, ans, i);
        }
        return ans;
    }
};