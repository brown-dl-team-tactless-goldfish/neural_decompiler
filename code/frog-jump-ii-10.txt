public class Solution {

    private static bool CanDo(int[] stones, int max) {
      bool[] used = new bool[stones.Length];

      int at = 0;

      for (int i = 0; i < stones.Length; ++i) {
        if (stones[stones.Length - 1] - stones[at] <= max) {
          at = stones.Length - 1;

          break;
        }

        if (stones[i] - stones[at] > max) {
          if (i - 1 == at)
            return false;

          used[i - 1] = true;
          at = i == stones.Length - 1 ? i : i - 1;
        }
      }

      if (at < stones.Length - 1)
        return false;

      at = stones.Length - 1;

      for (int i = stones.Length - 1; i >= 0; --i) {
        if (stones[at] - stones[0] <= max)
          return true;

        if (used[i])
          continue;

        if (stones[at] - stones[i] > max)
          return false;

        at = i;
      }

      return false;
    }

    public int MaxJump(int[] stones) {
        int never = 0;
        int ever = stones[stones.Length - 1] - stones[0];

        while (ever - never > 1) {
            int middle = (ever + never) / 2;

            if (CanDo(stones, middle))
                ever = middle;
            else
                never = middle;
        }   

        return ever;   
    }
}