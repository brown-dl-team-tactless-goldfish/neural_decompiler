vector<vector<int>> graph;

int dfs(int src, int parent, int target, vector<int>& nums)
{
    int sum = nums[src];
    
    for(auto &x: graph[src])
    {
        if(x != parent)
        {
            sum += dfs(x,src,target, nums);
        }
    }
    
    if(sum == target)
    {
        return 0;
    }
    
    return sum;
}
int componentValue(vector<int>& nums, vector<vector<int>>& edges) 
{
    
    int n =  nums.size();
    
    graph.resize(n);
    
    for(auto &x: edges)
    {
        graph[x[0]].push_back(x[1]);
        graph[x[1]].push_back(x[0]);
    }
    
    int sum = accumulate(nums.begin(),nums.end(), 0);
    
    for(int i=sum; i>=1; i--)
    {
        if(sum % i == 0)
        {
            if(dfs(0,-1, sum/ i, nums) == 0)
            {
                return i-1;
            }
        }
    }
    
    return 0;
}