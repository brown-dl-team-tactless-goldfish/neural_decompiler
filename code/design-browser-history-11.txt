
struct node {
    
    char arr[21];
    struct node *prev;
    struct node *next;
    
};

typedef struct {
    
  struct node *curr;
    
} BrowserHistory;


BrowserHistory* browserHistoryCreate(char * homepage) {
    
    BrowserHistory * start = malloc(sizeof(BrowserHistory));
    start->curr = malloc(sizeof(struct node));
    start->curr->next = NULL;
    start->curr->prev = NULL;
    strcpy(start->curr->arr,homepage);
    return start;
}

void browserHistoryVisit(BrowserHistory* obj, char * url) {
  
    struct node *tmp;
    tmp = malloc(sizeof(struct node));
    tmp->next = NULL;

    strcpy(tmp->arr,url);
    tmp->prev = obj->curr;
    obj->curr->next = tmp;
    obj->curr = tmp;
}

char * browserHistoryBack(BrowserHistory* obj, int steps) {
    
    struct node *curr = obj->curr;

    while(steps-- && curr->prev != NULL)
        curr = curr->prev;

    obj->curr = curr;
    return curr->arr;
}

char * browserHistoryForward(BrowserHistory* obj, int steps) {
    
     
    struct node *curr = obj->curr;
    
    while(steps-- && curr->next != NULL)
        curr = curr->next;
    obj->curr = curr;
    return curr->arr;

}

void browserHistoryFree(BrowserHistory* obj) {
    
    struct node *next = obj->curr->next;
    struct node *prev = obj->curr;
    struct node *tmp;
    while(next != NULL) {
        tmp = next;
        next = next->next;
        free(tmp);
        
    }
    
    while(prev != NULL) {
        tmp = prev;
        prev= prev->prev;
        free(tmp);
    }
    
    free(obj);
}
