public class Solution
{
    private struct CarInfo
    {
        public readonly int StartPosition;
        public readonly int Speed;

        public CarInfo(int startPosition, int speed)
        {
            StartPosition = startPosition;
            Speed = speed;
        }

        public override string ToString() => $"StartPos: {StartPosition}; Speed: {Speed}";
    }

    public int CarFleet(int target, int[] position, int[] speed)
    {
        CarInfo[] cars = new CarInfo[position.Length];
        for (int i = 0; i < position.Length; i++)
        {
            cars[i] = new CarInfo(position[i], speed[i]);
        }

        Array.Sort(cars, (c1, c2) =>
        {
            int positionCmp = (target - c1.StartPosition).CompareTo(target - c2.StartPosition);
            if (positionCmp != 0)
            {
                return positionCmp;
            }

            return c1.Speed.CompareTo(c2.Speed);
        });

        if (cars.Length <= 1)
        {
            return cars.Length;
        }

        int res = cars.Length;
        for (int i = 0; i < cars.Length - 1; i++)
        {
            var posDiff = cars[i].StartPosition - cars[i + 1].StartPosition;
            var speedDiff = cars[i + 1].Speed - cars[i].Speed;

            if (speedDiff == 0)
            {
                continue;
            }

            float time = ((float)posDiff) / speedDiff;
            if (time < 0 || time * cars[i].Speed + cars[i].StartPosition > target)
            {
                continue;
            }

            cars[i + 1] = cars[i];
            res--;
        }

        return res;
    }
}