int** reconstructMatrix(int upper, int lower, int* colsum, int colsumSize, int* returnSize, int** returnColumnSizes){
    
    int total = 0;
    int up = upper;
    int low = lower;
    int twoCount = 0;
    for(int i = 0; i < colsumSize; i++){
        total += colsum[i];
        if(colsum[i] == 2)
            twoCount++;
    }
    //fail case 1: total != (upper + lower) 
    //fail case 2: colsum = 2 > min{upper, lower} 
    if(total != (upper + lower) || twoCount > fmin(upper, lower) ){
        *returnSize = 0;
        return NULL;
    }

    int** ans = malloc(2 * sizeof(int*));
    for(int i = 0; i < 2; i++)
        ans[i] = malloc(colsumSize * sizeof(int));
        
    //step 1: deal with colsum = 2;
    for(int i = 0; i < colsumSize; i++){
        if(colsum[i] == 2){
            ans[0][i] = 1;
            ans[1][i] = 1;
            up--;
            low--;
        }
    }
    //step 1: deal with colsum = 1 and 0;
    for(int i = 0; i < colsumSize; i++){
        if(colsum[i] == 1){
            if(up > 0){
                ans[0][i] = 1;
                ans[1][i] = 0;
                up--;
            }
            else{
                ans[0][i] = 0;
                ans[1][i] = 1;
                low--;
            }
        }
        else if(colsum[i] == 0){
            ans[0][i] = 0;
            ans[1][i] = 0;
        }
    }
    
    *returnSize = 2;
    returnColumnSizes[0] = malloc(2 * sizeof(int));
    returnColumnSizes[0][0] = colsumSize;
    returnColumnSizes[0][1] = colsumSize;
    return ans;
}