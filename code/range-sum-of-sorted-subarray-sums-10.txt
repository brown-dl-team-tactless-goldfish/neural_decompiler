class Solution {
public:
    int rangeSum(vector<int>& nums, int n, int left, int right) {
        map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) {
            mp[nums[i]]++;
            int v = nums[i];
            for (int j = i + 1; j < nums.size(); j++) {
                v += nums[j];
                mp[v]++;
            }
        }
        int count = 0, val = 0, mod = pow(10, 9) + 7;
        for (map<int, int> :: iterator it = mp.begin(); it != mp.end(); it++) {
            //cout << it->first << "::" << it->second << endl;
            if (count + it->second < left)  count += it->second;
            else {
                if (count < left && (count + it->second) <= right) {
                    val += (it->first * (count + it->second - left + 1));
                } else if (count < left && (count + it->second) > right) {
                    val += (it->first * (right - left + 1));
                } else if (count >= left && count < right) {
                    if (count + it->second > right) {
                        val += (it->first * (right - count));
                    } else val += (it->first * it->second);
                }
                val %= mod;
                count += it->second;
            }
            if (count >= right) break;
        }
        return val;
    }
};