struct hashMap{
    int key;
    int value;
    struct hashMap *next;
};

#define MAXSIZE 100
int getIndex(long i){
    if(i<0)
        i=-i;
    
    return i%MAXSIZE;
}

int majorityElement(int* nums, int numsSize){
    struct hashMap **hashM=calloc(MAXSIZE, sizeof(struct hashMap *));
    for(int i=0;i<numsSize;i++){
        int index=getIndex(nums[i]);
        struct hashMap *iter=hashM[index];
        struct hashMap *prev=iter;
        while(iter!=NULL){
            if(iter->key==nums[i]){
                iter->value++;
                break;
            }
            prev=iter;
            iter=iter->next;  
        }
        if(iter==NULL){
            struct hashMap *tmp=malloc(sizeof(struct hashMap));
            tmp->key=nums[i];
            tmp->value=1;
            tmp->next=NULL;
            if(hashM[index]==NULL)
                hashM[index]=tmp;
            else
                prev->next=tmp;
        }
    }

    for(int j=0;j<MAXSIZE;j++){
        struct hashMap *iter=hashM[j];
        while(iter!=NULL){
            if(iter->value > numsSize/2)
                return iter->key;
            iter=iter->next;
        }
    }
    
    return -1;
}
