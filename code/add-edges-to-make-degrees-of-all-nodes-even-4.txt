class Solution {
public:
    bool isPossible(int n, vector<vector<int>>& edges) {
        vector<unordered_set<int>> adj(n+1);
        for(auto x : edges)
        {
            adj[x[0]].insert(x[1]);
            adj[x[1]].insert(x[0]);
        }
        
        vector<int> odds; 
        for(int i = 0; i<=n; i++)
        {
            if(adj[i].size() % 2 != 0)
            {
                odds.push_back(i);
            }
        }
        
        if(odds.size() == 0)
        {
            return true;
        }
        
        if(odds.size()%2!=0 || odds.size() > 4)
        {
            return false; 
        }
        
        if(odds.size() == 2)
        {
            int a = odds[0]; 
            int b = odds[1];
            if(adj[a].find(b) == adj[a].end())
            {
                return true;
            }
            for(int i = 1; i<=n; i++)
            {
                if(a!=i && b!=i && adj[a].find(i) == adj[a].end() && adj[b].find(i) == adj[b].end())
                {
                    return true;
                }
            }
        }
        
        if(odds.size() == 4)
        {
            int a = odds[0];
            int b = odds[1];
            int c = odds[2];
            int d = odds[3];
            
            return (adj[a].find(d) == adj[a].end() && adj[b].find(c) == adj[b].end() || 
                    adj[a].find(b) == adj[a].end() && adj[c].find(d) == adj[c].end() || 
                    adj[a].find(c) == adj[a].end() && adj[b].find(d) == adj[b].end());
        }
        return false;
        
    }
};