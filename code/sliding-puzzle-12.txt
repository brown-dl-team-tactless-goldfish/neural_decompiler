int slidingPuzzle(vector<vector<int>>& board) {
    
    string label;
    for(int i = 0; i < 2; ++i) {
        for(int j = 0; j < 3; ++j) {
            label += std::to_string(board[i][j]);
        }
    }
    
    std::map<int, vector<int>> position; // if find 0 in label string, which other position this 0 could switch with
    position[0] = {1,3};
    position[1] = {0, 2, 4};
    position[2] = {1, 5};
    position[3] = {0, 4};
    position[4] = {1, 3, 5};
    position[5] = {2, 4};
    
    
    std::queue<string> q;
    q.push(label);
    int step = 0;
    std::set<string> visited;
    visited.insert(label);
    while(!q.empty()) {
        int cnt = q.size();
        
        while(cnt-- > 0) {
            auto current = q.front();
            q.pop();
            
            if (current == "123450") {
                return step;
            }
            
            size_t pos = current.find('0');
            auto switchto = position[pos];
            
            for(auto& c : switchto) {
                string next = current;
                std::swap(next[pos], next[c]);
                
                if (visited.count(next) > 0) continue;                    
                visited.insert(next);
                q.push(next);

            }                
        }
        
        ++step;            
    }
    
    return -1;
}