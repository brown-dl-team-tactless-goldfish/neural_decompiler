class Solution {
public:
    pair<int, int> getCoordinates(int val, int n) {
        int quotient = (val-1)/n;
        int remainder = (val-1)%n;
        int r = n - 1 - quotient;
        int c = quotient % 2 == 0 ? remainder : n- 1 - remainder;
        return {r, c};
    }
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        int N = n*n;
        vector<bool> visited(N+1, false);
        queue<pair<int, int>> Q;
        Q.push({1, 0});
        while(!Q.empty()) {
            pair<int, int> p = Q.front(); Q.pop();
            int currentPos = p.first, numThrowsTillNow = p.second;
            if(currentPos == N) return numThrowsTillNow;
            for(int i = 1; i<=6 ; i++) {
                int nextPos = currentPos + i;
                if(nextPos > N)
                    break;
                pair<int, int> coordinates = getCoordinates(nextPos, n);
                int r = coordinates.first, c = coordinates.second;
                if(board[r][c] != -1) {
                    nextPos = board[r][c];
                }
                if(visited[nextPos] == false) {
                    Q.push({nextPos, numThrowsTillNow + 1});
                    visited[nextPos] = true;
                }
            }
        }
        return -1;
    }
};