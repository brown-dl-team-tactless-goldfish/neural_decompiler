typedef struct {
    int size;
    int *original;
    int *array;
} Solution;

Solution* solutionCreate(int* nums, int size) {
    Solution *solution = (Solution *) malloc(sizeof(Solution));
    solution->original = (int *) malloc((sizeof(int) * size));
    solution->size = size;
    memcpy(solution->original, nums, sizeof(int) * size);
    solution->array = nums;
    return solution;
}

/** Resets the array to its original configuration and return it. */
int* solutionReset(Solution* obj, int *returnSize) {
    *returnSize = obj->size;
    obj->array = (int *) malloc((sizeof(int) * obj->size));
    memcpy(obj->array, obj->original, sizeof(int) * obj->size);
    return obj->array;
}

/** Returns a random shuffling of the array. */
int* solutionShuffle(Solution* obj, int *returnSize) {
    int t, n_rand;
    for (int i = 0; i < obj->size; i++) {
        t = obj->array[i];
        n_rand = rand() % (obj->size - i) + i;
        obj->array[i] = obj->array[n_rand];
        obj->array[n_rand] = t;
    }
    *returnSize = obj->size;
    return obj->array;
}

void solutionFree(Solution* obj) {
    free(obj->original);
    free(obj->array);
    free(obj);
}