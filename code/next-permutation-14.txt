void quicksort(int *number,int first,int last);

void nextPermutation(int* nums, int numsSize);

/* this function makes the swapping of the values at indexes i and j, and then
returns straight away */
void swap(int *nums, int i, int j);
/******************************************************************************/
void nextPermutation(int* nums, int numsSize) {
  if (numsSize <= 1 || nums == NULL) {
    return;
  }
  int i, aux=0, min, minI, j;
  for (i = numsSize-1; i > 0; --i) {
    if (nums[i-1] < nums[i]) {
      aux = 1;
      break;
    }
  }
  j = i-1;
  if (aux == 1) {
    /* found a match, search next index such that nums[aux] < nums[i] */
    for (i = j+1; i < numsSize; ++i) {
      if (i == j+1 || (nums[i] < min && nums[i] > nums[j])) {
        min = nums[i];
        minI = i;
      }
    }
    /* swap values */
    swap(nums, j, minI);
    /* order in ascending order from i until j index */
    i = j+1;
    j = numsSize-1;
    quicksort(nums, i, j);
  } else {
    /* reverse data */
    for (i = 0; i < numsSize/2; ++i) {
      swap(nums, i, numsSize-i-1);
    }
  }
  return;
}
/******************************************************************************/
void swap(int *nums, int i, int j) {
  /* this function makes the swapping of the values at indexes i and j, and then
  returns straight away */
  int aux;
  /* aux = i */
  aux = nums[i];
  /* i = j */
  nums[i] = nums[j];
  /* j = aux */
  nums[j] = aux;
  return;
}
/******************************************************************************/
void quicksort(int *number,int first,int last) {
   int i, j, pivot, temp;
   if(first<last){
      pivot=first;
      i=first;
      j=last;
      while(i<j){
         while(number[i]<=number[pivot]&&i<last)
            i++;
         while(number[j]>number[pivot])
            j--;
         if(i<j){
            temp=number[i];
            number[i]=number[j];
            number[j]=temp;
         }
      }
      temp=number[pivot];
      number[pivot]=number[j];
      number[j]=temp;
      quicksort(number,first,j-1);
      quicksort(number,j+1,last);
   }
}
/******************************************************************************/
