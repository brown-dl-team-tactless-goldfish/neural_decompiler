public class Solution 
{
    public IList<string> InvalidTransactions(string[] transactions) 
    {
        var invalid = new List<string>();
        
        var dict = new Dictionary<string, List<Transaction>>();
        
        foreach (string s in transactions)
        {
            var trans = new Transaction(s);
            
            if (dict.ContainsKey(trans.Name))
            {
                dict[trans.Name].Add(trans);
            }
            else
            {
                var list = new List<Transaction>();
                list.Add(trans);
                
                dict.Add(trans.Name, list);
            }
        }
        
        foreach (var kvp in dict)
        {
            for (int i = 0; i < kvp.Value.Count; i++)
            {
                if (!IsValid(i, kvp.Value[i], kvp.Value))
                {
                    invalid.Add(kvp.Value[i].ToString());
                }
            }
        }
        
        return invalid;
    }
    
    private bool IsValid(int idx, Transaction t, List<Transaction> trans)
    {
        if (t.Amount > 1000)
        {
            return false;
        }
        
        for (int i = 0; i < trans.Count; i++)
        {
            if (i != idx && 
                t.City != trans[i].City && 
                Math.Abs((t.Time - trans[i].Time)) <= 60)
            {
                return false;
            }
        }
        
        return true;
    }
    
    private struct Transaction
    {   
        private readonly string Original;
        
        public Transaction(string transaction)
        {
            Original = transaction;
            
            var t = transaction.Split(',');
            Name = t[0];
            Time = Convert.ToInt32(t[1]);
            Amount = Convert.ToInt32(t[2]);
            City = t[3];
        }
        
        public string Name { get; }
        public int Time { get; }
        public int Amount { get; }
        public string City { get; }
        
        public override string ToString()
        {
            return Original;
        }
    }
}


