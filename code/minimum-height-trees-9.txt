class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) 
    {
        if(edges.size()==0)
            return {0};
        vector<int>indeg(n,0);
        vector<int>visit(n,0);
        vector<vector<int>>adj(n);
        for(auto v:edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
            indeg[v[0]]++;
            indeg[v[1]]++;
        }
        queue<int>q;
        for(int i=0;i<n;i++)
        {
            if(indeg[i]==1)
            {
                q.push(i);
                visit[i]=1;
            }
        }
        vector<int>res;
        int qn=q.size();
        while(qn)
        {
            int a=q.front();
            cout<<a<<" ";
            q.pop();
            qn--;
            res.push_back(a);
            for(auto e:adj[a])
            {
                if(visit[e]==0)
                {
                    indeg[e]--;
                    if(indeg[e]==1)
                    {
                        visit[e]=1;
                        q.push(e);
                    }
                }
            }
            if(qn==0 && !q.empty())   //still we didn't get centroid .....
            {
                res.clear();
                qn=q.size();
            }
        }
        return res;
    }
};