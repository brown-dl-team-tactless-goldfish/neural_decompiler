class Solution {
public:
    
    const int mod = 1e9 + 7;
    
    long power(long x, long y)
    {
        int result = 1;
        while (y > 0) {
            if (y % 2 == 0) // y is even
            {
                x =( x * x)%mod;
                y = y / 2;
            }
            else // y isn't even
            {
                result = (result * x)%mod;
                y = y - 1;
            }
        }
        return result%mod;
    }
    
    int numSubseq(vector<int>& arr, int target) {
        
        int n = arr.size();
        sort(arr.begin(), arr.end());
        
        long sum = 0;
        
        for(int i=0; i<n; i++) {
            
            int temp = -1, low = i, high = n - 1;
            int curr = target - arr[i];
            
            while(low <= high) {
                int mid = low + (high - low)/2;
                
                if(arr[mid] <= curr) {
                    temp = mid;
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
            
            if(temp == -1) break;
            sum  = (sum + power(2, temp - i)%mod)%mod;
        }
        
        return sum;
    }
};