public class Solution {
    List<string> resultList = new List<string>(50);
    public string LongestNiceSubstring(string s) {
        Helper(s);

        string result = "";
        foreach (string st in resultList)
        {
            if (st.Length > result.Length)
            {
                result = st;
            }
        }

        return result;
    }
    
    
    
    public void Helper(string s)
    {
        // go through string, find the bad characters and add them to a hashset of bad
        HashSet<char> BadSet = new HashSet<char>(10);
        HashSet<char> AllSet = new HashSet<char>(10);
        for (int i = 0; i < s.Length; i++)
        {
            if (!AllSet.Contains(s[i]))
            {
                AllSet.Add(s[i]);
            }
        }
        FillBadSet(AllSet, BadSet);
        if (BadSet.Count == 0)        // base case (current string has no bad chars)
        {
            resultList.Add(s);           
        }
        else
        {
            StringBuilder sb = new StringBuilder(10);
            for(int i = 0; i < s.Length; i++)       // recurse on each substring size 2 or greater
            {
                if (!BadSet.Contains(s[i]))
                {
                    sb.Append(s[i]);
                }
                else
                {
                    if (sb.Length >= 2)
                    {
                        Helper(sb.ToString());     // Recurse on substring
                    }
                    sb.Clear();
                }   
            }
            // if reached the end, process sb 
            if (sb.Length >= 2)
            {
                Helper(sb.ToString());  // Recurse on substring
                sb.Clear();
            }
        }
    }

    public void FillBadSet(HashSet<char> AllSet, HashSet<char> BadSet)
    {
        foreach(char c in AllSet)
        {
            if (c >= 'A' && c <= 'Z') // if it's uppercase
            {
                if (!AllSet.Contains((char) (c + 32)))
                {
                    BadSet.Add(c);
                }
            }
            else  // it's lowercase
            {
                if (!AllSet.Contains((char)(c - 32)))
                {
                    BadSet.Add(c);
                }
            }
        }
    }
    
    
    
}