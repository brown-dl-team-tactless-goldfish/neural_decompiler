class Solution {
public:
    const int INF = 1e9 + 7;
    int minDistance(vector<int>& houses, int k) {
        int n = houses.size();
        sort(houses.begin(), houses.end());
        vector<vector<int>> dp(n, vector<int> (k + 1, INF));
        auto getSum = [&] (int l, int r) {
            int m = (l + r) / 2;
            int total = 0;
            for (int i = l; i <= r; i++) {
                total += abs(houses[i] - houses[m]);
            }
            return total;
        };
        for (int i = 0; i < n; i++) {
            dp[i][1] = getSum(0, i);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int l = 0; l + 1 <= i; l++) {
                    dp[i][j] = min(dp[i][j], dp[l][j - 1] + getSum(l + 1, i));
                }
            }
        }
        return dp[n - 1][k];
    }
};