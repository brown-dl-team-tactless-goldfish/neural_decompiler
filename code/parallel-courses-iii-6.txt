class Solution {
public:
    int minimumTime(int n, vector<vector<int>>& relations, vector<int>& time) {
        
        vector < int > adj[n];
        vector < int > indegree(n,0);
        vector < int > dist(n,0);
        int relen = relations.size();
        int ans = 0;
        int currMax = INT_MIN;
        
        for(int i = 0; i < relen; i++){
            adj[relations[i][0]-1].push_back(relations[i][1]-1);
            indegree[relations[i][1]-1] += 1;
        }
        
        queue < int > q;
        for(int i = 0; i < n; i++){
            if(indegree[i] == 0){
                q.push(i);
                dist[i] = time[i];
            }
        }
        
        while(!q.empty()){
            int c = q.size();
            for(int i = 0; i < c; i++){
                int front = q.front();
                q.pop();
                for(int x : adj[front]){
                    dist[x] = max(dist[front] + time[x], dist[x]);
                    indegree[x] -= 1;
                    if(indegree[x] == 0)
                        q.push(x);
                }  
            }
        }
        for(int i = 0; i < n; i++)ans = max(ans, dist[i]);
        return ans;
    }
};