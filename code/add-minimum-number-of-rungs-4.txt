    def helper(curRungs, curInserts):
        # print ("curRungs = ", curRungs)
        # print ("curInserts = ", curInserts)
        if (curInserts > self.res):
            return
        tmpN = len(curRungs)
        if (tmpN == 0):
            return
        elif (tmpN == 1):
            if (curRungs[0] == rungs[-1]):
                self.res = min(self.res, curInserts)
            return
        else:
            if (curRungs[0] + dist >= curRungs[1]):
                helper(curRungs[1:], curInserts)
            else:
                # helper([curRungs[0] + dist] + curRungs[1:], curInserts + 1)
                newInserts = curInserts + floor((curRungs[1] - curRungs[0]) / dist)
                if ((curRungs[1] - curRungs[0]) % dist == 0):
                    newInserts -= 1
                    
                helper(curRungs[1:], curInserts + floor((curRungs[1] - curRungs[0]) / dist))
                    
                helper(curRungs[1:], newInserts)
                
    helper(rungs, 0)
    
    return self.res