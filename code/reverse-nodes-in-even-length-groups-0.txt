void reverse(struct ListNode** data , int begin, int end){
    struct ListNode* temp;
    int Begin = begin, End = end;
    while(Begin < End){
        temp = data[Begin];
        data[Begin] = data[End];
        data[End] = temp;
        Begin++;
        End--;
    }
    for(int i = begin; i < end; i++){
        data[i]->next = data[i+1];
    }
    data[end]->next = NULL;
}

int getListSize(struct ListNode* head){
    struct ListNode* temp = head;
    int ans = 0;
    while(temp){
        ans++;
        temp = temp->next;
    }
    return ans;
}

struct ListNode* reverseEvenLengthGroups(struct ListNode* head){
    int ListSize =  getListSize(head); 
    struct ListNode** data = malloc(ListSize * sizeof(struct ListNode* ));
    struct ListNode* temp = head;
    for(int i = 0; i < ListSize; i++){
        data[i] = temp;
        temp = temp->next;
    }
    
    int k = 1;
    int cur = 0;
    int begin, end;
    while(cur < ListSize){
        //exception 1:if last is odd group, but items are even, then reverse it 
        //break
        if((ListSize - cur) < k ){
            if((ListSize - cur) % 2 == 0){
                begin = cur;
                end = ListSize - 1;
                reverse(data, begin, end);
                data[begin-1]->next = data[begin];
            }
            break;            
        }
        
        begin  = cur + k , end = cur + 2*k ;
        //exception 2:last is even group, but itmes are odd, the keep it and break
        if(begin >= ListSize || (end >= ListSize && (ListSize - begin) %2 == 1) )
              break;        
        if(end >= ListSize){
            end = fmin(end, ListSize-1);    
        }
         
        reverse(data, begin, end);
        data[begin-1]->next = data[begin];
        //last item beyond the bound, no need link to next, it already link to NULL
        if((cur + 2*k + 1) >= ListSize)
            break;
        data[end]->next = data[cur + 2*k + 1];
        cur = cur + 2*k+1;
        k += 2;
    }
    return data[0];
}