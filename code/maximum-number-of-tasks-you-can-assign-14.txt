class Solution {
public:
    bool possible(const int M, vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        
        if (M + 1 > workers.size())
            return false;
        
        multiset<int> S;

        for (auto& w : workers)
            S.insert(w);
        
        for (int i = M; i >= 0; i--) {
            if (S.empty())
                return false;
            
            auto worker = lower_bound(S.begin(), S.end(), tasks[i]);
            if (worker == S.end()) {
                worker = lower_bound(S.begin(), S.end(), tasks[i] - strength);
                if (worker == S.end())
                    return false;
                pills--;
                if (pills < 0)
                    return false;                
            }
            S.erase(worker);
        }
        return true;        
    }
    
    
    
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        int L = 0;
        int R = int(tasks.size()) - 1;
        int ans = -1;
        
        sort(tasks.begin(), tasks.end());
        
        while (L <= R) {
            int M = (R + L) / 2;
            if (possible(M, tasks, workers, pills, strength)) {
                ans = M;
                L = M + 1;
            }
            else {
                R = M - 1;
            }
        }
        
        return ans + 1;
    }
};