class Solution {
public:
    TreeNode* sufficientSubset(TreeNode* root, int limit, int pathsum = 0) 
    {
        if (root == NULL)
            return NULL;
        
        // 1. if this is a leaf to being with, then it has to form a path > limit. otherwise it has to go.
        if (root->left == NULL && root->right == NULL)
            return (pathsum + root->val) < limit ? NULL : root;
        
        // delete insufficient nodes from children. only then we can know if root is insufficient.
        root->left = sufficientSubset (root->left, limit, pathsum + root->val);
        root->right = sufficientSubset (root->right, limit, pathsum + root->val);
        
        // 2. if root has become a leaf, then it has to go.
        return root->left || root->right ? root : NULL;
    }
};