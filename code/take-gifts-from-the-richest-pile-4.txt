template<class T, class C = std::vector<T>, class P = std::less<typename C::value_type> >
struct iterpq :priority_queue<T,C,P> {
    typename C::iterator begin() { return priority_queue<T, C, P>::c.begin(); }
    typename C::iterator end() { return priority_queue<T, C, P>::c.end(); }
};

class Solution {
public:
    long long pickGifts(vector<int> &gifts, int k) {
        // support variables
        long long res = 0;
        iterpq<int> pq;
        for (int val: gifts) pq.push(val);
        // getting the first k out
        while (k--) {
            pq.push(sqrt(pq.top()));
            pq.pop();
        }
        // summing the remaining ones
        for (int val: pq) {
            res += val;
        }
        return res;
    }
};