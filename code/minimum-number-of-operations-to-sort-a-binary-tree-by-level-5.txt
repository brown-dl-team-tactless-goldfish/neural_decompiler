/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minimumOperations(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        int res = 0;
        while(!q.empty()) {
            vector<int> v;
            for(int i = q.size(); i > 0; i--) {
                TreeNode* t = q.front();
                v.push_back(t->val);
                if(t->left != nullptr) q.push(t->left);
                if(t->right != nullptr) q.push(t->right);
                q.pop();
            }
            res += getCnt(v);
        }
        return res;
    }

    int getCnt(vector<int>& v) {
        vector<int> v1 = v;
        sort(begin(v1), end(v1));
        unordered_map<int, int> mp;
        for(int i = 0; i < v1.size(); i++) mp[v1[i]] = i;

        int res = 0;
        for(int i = 0; i < v.size(); i++) {
            while(mp[v[i]] != i) {
                swap(v[i], v[mp[v[i]]]);
                res++;
            }
        }
        return res;
    }
};