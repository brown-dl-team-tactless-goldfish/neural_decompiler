class Solution {
    bool dfs(int i, int j, int preX, int preY, vector<vector<char>>& grid, vector<vector<int>>& vis, vector<int>& dr, vector<int>& dc, char prnt) {
        vis[i][j] = 1;
        for(int p=0; p<4; p++) {
            int x = i + dr[p], y = j + dc[p];
            if(x >= 0 && x < grid.size() && y >= 0 && y < grid[0].size() && !(x == preX && y == preY) && grid[x][y] == prnt) {
                if(vis[x][y] || dfs(x, y, i, j, grid, vis, dr, dc, prnt)) return true;
            }
        }
        return false;
    }
    
public:
    bool containsCycle(vector<vector<char>>& grid) {
        vector<vector<int>> vis(grid.size(), vector<int>(grid[0].size(), 0));
        vector<int> dr = {-1, 0, 1, 0}, dc = {0, 1, 0, -1};
        
        for(int i=0; i<grid.size(); i++) {
            for(int j=0; j<grid[0].size(); j++) {
                if(!vis[i][j]) {
                    if(dfs(i, j, -1, -1, grid, vis, dr, dc, grid[i][j])) return true;
                }
            }
        }
        return false;
    }
};