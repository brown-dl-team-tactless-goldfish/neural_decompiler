int cmpfunc(int** a, int** b)
{
    int* pa = (*a);
    int* pb = (*b);
    
    if(pa[1] != pb[1])
    {
        return pb[1] - pa[1];
    }
    else
    {
        return pa[0] - pb[0];
    }
}

char * frequencySort(char * s){
    int** buffer = (int**)malloc(256*sizeof(int*));
    int i, len = strlen(s);
    char* result = (char*)malloc((len+1)*sizeof(char));
    int idx=0;
    
    for(i=0;i<256;i++)
    {
        buffer[i] = (int*)calloc(2,sizeof(int));
        buffer[i][0] = i;
    }
    
    for(i=0;i<len;i++)
    {
        buffer[s[i]][1]++;
    }
    
    qsort(buffer,256,sizeof(int*),cmpfunc);
    
    for(i=0;i<256;i++)
    {
        if(buffer[i][1] == 0)
            break;
        while(buffer[i][1])
        {
            result[idx++] = buffer[i][0];
            buffer[i][1]--;
        }
    }
    
    for(i=0;i<256;i++)
        free(buffer[i]);
    free(buffer);
    
    result[idx] = '\0';
    return result;
}