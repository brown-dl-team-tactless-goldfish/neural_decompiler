class LFUCache {
    struct r
    {
        int k,v,c;
    };

    unordered_map<int,list<r>::iterator> m;
    unordered_map<int,pair<list<r>,list<int>::iterator>> c;
    list<r> v;
    list<int> adjc;
    int cap, count;
    
    list<r>::iterator moveit(list<r>::iterator it, int tc = -1)
    {
        int k = it->k;
        int currc = it->c;
        if (tc == -1)
            tc = it->c+1;
        auto& curr = c[currc];
        if (c.count(tc) == 0)
            c[tc] = pair<list<r>,list<int>::iterator>{list<r>(),
                            adjc.insert(tc<currc?curr.second:next(curr.second), tc)};
        auto& next = c[tc];
        next.first.splice(next.first.end(), curr.first, it);
        it = prev(next.first.end());
        if (curr.first.size() == 0 && currc != -1)
        {
            adjc.erase(curr.second);
            c.erase(currc);
        }

        m[k] = it;   
        it->c = tc;
        return it;
    }
    
public:
    LFUCache(int capacity) {
        cap = capacity;
        count = 0;   
        adjc.push_front(-1);
        c[-1] = pair<list<r>,list<int>::iterator>{list<r>(),adjc.begin()};
    }
    
    int get(int key) {
        if (m.count(key) > 0)
            return moveit(m[key])->v;  //move item to count +1
        else
            return -1;
    }
    
    void put(int key, int value) {
        if (cap == 0) return;
        if (m.count(key) > 0)
            moveit(m[key])->v = value;  //move item to count +1
        else 
        {
            if (count >= cap)   
            {
                auto tmp = c[*next(adjc.begin())].first.begin();
                m.erase(tmp->k);
                tmp->k = key;
                tmp->v = value;
                moveit(tmp, 0);     //move item to count 0 
            }
            else
            {
                auto& tmp = c[-1].first;
                moveit(tmp.insert(tmp.end(),{key,value,-1}));  //move item to count +1
                count++;
            }
        }
    }
};
/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);