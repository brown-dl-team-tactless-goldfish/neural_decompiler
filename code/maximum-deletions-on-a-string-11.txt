
class Solution {
public:
    
    int find(string& s,int start,vector<int>&dp,vector<vector<int>>&pre)
    {
        if(dp[start]!=-1)
          return dp[start];
        if(start>=s.length())
            return 0;
        for(int i=start;i<s.length();i++)
        {
           int l1 =start;
           int r1 =i;
           int l2 =i+1;
           int r2 =i+(i-start+1);
            
           if(r2>=s.length())
                break;
            
           if(pre[l1][l2]>=(i-start+1)) // if s[l1...r1]==s[l2.....r2]
           {
               dp[start] = max(dp[start],1+find(s,i+1,dp,pre));
           }
        }
        dp[start]=max(dp[start],1);
        return dp[start];
    }
    
    int deleteString(string s) 
    {
        int n = s.length();
        vector<vector<int>>pre(n+1,vector<int>(n+1,0));
        
        for (int i = n - 1; i >= 0; i--) // pre[i][j] stores length of longest common prefix between s[i....n-1] and s[j....n-1]
        {
            for (int j = i + 1; j < n; j++) 
            {
                if (s[i] == s[j])
                pre[i][j] = pre[i + 1][j + 1] + 1;
                
            }
        }
        
        vector<int>dp(n,-1);
        
        return find(s,0,dp,pre);
    }
};