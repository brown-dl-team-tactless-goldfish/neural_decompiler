class Solution {
public:
    string result;
    string crackSafe(int n, int k) {
        
        queue<string> units;    units.push(string(n, '*'));
        int p = 0;
        while(p < n){
            int round_size = units.size(); 
            for (int i = 0; i < round_size; i++){
                string unit = units.front();    units.pop();
                for (char value = '0'; value < k + '0'; value++){
                    unit[p] = value;
                    units.push(unit);
                }
            }
            p++;
        }
        unordered_set<string> candidates;
        while(!units.empty()){
            string word = units.front(); units.pop();
            candidates.insert(word);
        }        
        string s;
        helper(n, k, s, candidates);
        return this->result;
    }
    void helper(int n, int k, string& s, unordered_set<string>& candidates){
        
        if (!this->result.empty()) return;
        
        if (candidates.empty()){
            // if s is a best one? n=1, k=2, pow(2,1)
            if (pow(k, n) + n - 1 == s.size()){
                this->result = s;
            }
            return;
        }
        for (char c='0'; c < k + '0'; c++){
            s.push_back(c);
            if (s.size() < n){
                helper(n, k, s, candidates);
            }
            else{
                // 2345 6
                string sub = s.substr(s.size() - n, n);
                if (candidates.count(sub) == 1){
                    candidates.erase(sub);
                    helper(n, k, s, candidates);
                    candidates.insert(sub);
                }
            }
            s.pop_back();
        }
    }
};

/*
how long for the best solution
n = 2, k = 2, k^n
xx xx xx xx
xx
 xx
  xx
   xx
2^2 + 1 
n=3, k=2, k^n=8
xxx
 xxx
  xxx
   xxx
    xxx
     xxx
      xxx
       xxx
2^3+2=10

n=2, k=3, k^n=9
xx
 xx
  xx
   xx
    xx
     xx
      xx
       xx
        xx
2^3 + 1
*/