bool dfs(int** graph, int graphSize, int* graphColSize, int* queue, int begin, int end, int* node, bool* paint){
    int END = end ;
    for(int i = begin ; i < end ; i++){
        int pos = queue[i] ;
        int color = ( node[pos] == 1 ) ? 2 : 1 ;
        for(int j = 0; j < graphColSize[pos]; j++ ){
            int itr = graph[pos][j];
            if(node[ itr ] == node[pos] )
                return false;
            else if(paint[ itr ] == false){
                node[itr] = color;
                paint[itr] = true;
                queue[END] = itr ;
                END++;
            }
        }
        if( dfs(graph, graphSize, graphColSize, queue, end, END , node, paint ) == false )
            return false; 
    }
    return true;
}

bool isBipartite(int** graph, int graphSize, int* graphColSize){
    int* node = calloc( graphSize , sizeof(int) );
    bool* paint = calloc( graphSize , sizeof(int) );
    int* queue = malloc(graphSize * sizeof(int));
    int idx = 0 ;
    for(int i = 0; i < graphSize; i++){
        if( paint[i] == false ){
            node[i] = 1;
            paint[i] = true;
            for(int j = 0; j < graphColSize[i]; j++){
                int itr = graph[i][j];
                if(node[itr] == node[i])
                    return false;
                else if(paint[itr] == false){
                    node[itr] = 2 ;
                    paint[itr] = true;
                    queue[idx] = itr;
                    idx++;
                }   
            }
            if( dfs(graph, graphSize, graphColSize, queue, 0, idx , node, paint ) == false )
                return false;
        }   
    }
    return true;
}