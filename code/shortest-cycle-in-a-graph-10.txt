class Solution {
public:
    int findShortestCycle(int n, vector<vector<int>>& edges) {
        vector<vector<int>>adj(n);
        for(int i=0;i<edges.size();i++){
             adj[edges[i][0]].push_back(edges[i][1]);
             adj[edges[i][1]].push_back(edges[i][0]);
        }
        int ans=INT_MAX;
        for(int i=0;i<n;i++){
            vector<int>dist(n,(int)1e9);
            vector<int>par(n,-1);
            dist[i]=0;
            queue<int>q;
            q.push(i);
            while(!q.empty()){
                int node=q.front();
                q.pop();
                for(auto it:adj[node]){
                    if(dist[it]==(int)1e9){
                        dist[it]=1+dist[node];
                        par[it]=node;
                        q.push(it);
                    }
                    else if(par[node]!=it && par[it]!=node){
                        ans=min(ans,dist[node]+dist[it]+1);
                    }
                }
            }
        }
        if(ans==INT_MAX) return -1;
        else return ans;
        
    }
};