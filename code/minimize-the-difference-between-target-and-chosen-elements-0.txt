int cmp(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

int minimizeTheDifference(int** mat, int matSize, int* matColSize, int target){
    int m = matSize ;
    int n = *matColSize ;
    for(int i = 0; i < m; i++){
        qsort(mat[i], n, sizeof(int), cmp) ;
    }
    bool* exist = calloc((target+1), sizeof(bool)) ;
    
    int* set = malloc((target+1) * sizeof(int)) ;
    int* tmp = malloc((target+1) * sizeof(int)) ;
    int s_idx = 0, t_idx = 0 ;
    int great = INT_MAX ;
    for(int i = 0; i < n; i++){
        if(i > 0 && mat[0][i] == mat[0][i-1])
            continue;
        if( mat[0][i] > target ){
            great = fmin(great, mat[0][i]) ;
            continue ;
        }
        if( exist[ mat[0][i] ] == true )
            continue ;
        exist[ mat[0][i]] = true ;
        set[s_idx] = mat[0][i] ;
        s_idx++;
    }
    
    if(great != INT_MAX){
        set[s_idx] = great ;
        s_idx++;
    }

    for(int i = 1; i < m; i++){
        exist = calloc((target + 1), sizeof(bool)) ;
        great = INT_MAX;
        t_idx = 0;
        for(int j = 0; j < n; j++){
            if(j > 0 && mat[i][j] == mat[i][j-1])
                continue;
            for(int k = 0; k < s_idx; k++){
                int capacity = set[k] + mat[i][j] ;
                if( capacity > target ){
                    great = fmin(great, capacity ) ;
                    continue;
                }
                if(exist[capacity] == true)
                    continue;
                exist[capacity] = true;
                tmp[t_idx] = capacity; 
                t_idx++;
            }       
        }

        if(great != INT_MAX){
            tmp[t_idx] = great ;
            t_idx++;
        }
        //swap : have to do this
        int* T = tmp;
        tmp = set;
        set = T;
        s_idx = t_idx;
    }

    int ans = INT_MAX;
    for(int i = 0; i < s_idx; i++){
        ans = fmin(ans, abs( target - set[i] )) ;
    }
    free(exist);
    free(set);
    free(tmp);
    return ans;
}