#define LAND 0

bool isBorder(int width, int height, int i, int j) {
    if ( (j == 0) ||
         (j == height-1) ||
         (i == 0) ||
         (i == (width-1)) ) {
        return true;
    } else {
        return false;
    }
}

// return true: there was a sucessful run
//        false: there was no run at all and nothing got visited
// from: to tell recusive the direction we do not need to go, otherwise it's a dead loop
bool dfs(int** grid, bool * visited, int width, int height, int i, int j, bool * checkBorder) {
    // this vertex might be visited before, do nothing
    if (grid[j][i] != LAND || visited[j*width+i]) {
        return false;
    }

    if (*checkBorder) {
        // checkBorder is set to false once isBorder is true
        // and will never be updated anymore, and stay as false
        *checkBorder = !isBorder(width, height, i, j);
    }
    // mark this vertex as visited and return
    visited[j*width+i] = true;

    // any LAND around it might not be visited, so we have to check all of them
    // not just right, bottom, also left, top might not be visited for indirect visit
    // since we only check unvisited node, there won't be a loop
    // left
    if (i > 0 && grid[j][i-1] == LAND && !visited[j*width+i-1]) {
        dfs(grid, visited, width, height, i-1, j, checkBorder);
    }

    // top
    if (j > 0 && grid[j-1][i] == LAND && !visited[(j-1)*width+i]) {
        dfs(grid, visited, width, height, i, j-1, checkBorder);
    }

    // there is a right LAND you can visit
    // right has not been visited, and we do not even need check
    if (i < (width -1) && grid[j][i+1] == LAND && !visited[j*width+i+1]) {
        dfs(grid, visited, width, height, i+1, j, checkBorder);
    }
    // there is a bottom LAND you can visit
    // bottom must not be visited, and we do not even need to check
    if (j < (height -1) && grid[j+1][i] == LAND && !visited[(j+1)*width+i]) {
        dfs(grid, visited, width, height, i, j+1, checkBorder);
    }

    return true;
}

int closedIsland(int** grid, int gridSize, int* gridColSize){
    int height = gridSize;
    int width = gridColSize[0];

    bool * visited = malloc(width * height * sizeof(bool));
    if (visited == NULL) {
        return -1;
    }
    // set all of them to false
    memset(visited, 0, width * height * sizeof(bool));

    bool checkBorder;
    int counter = 0;
    for (int j=0; j< height; j++) {
        for (int i=0; i< width; i++) {
            checkBorder = true;  // need to make checkborder true for the beginning
            if (dfs(grid, visited, width, height, i, j, &checkBorder)) {
                // if checkBorder is not true anymore, means the tranverse hit a broder
                // and we do not count this tranverse
                if (checkBorder) {
                    counter++;
                }
            }
        }
    }

    return counter;
}