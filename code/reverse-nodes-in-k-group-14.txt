/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode * reverse(struct ListNode *head, int k) {
    
    struct ListNode *curr, *prev, *next;
    curr = head;
    prev = NULL;
    int count = 0;
    
    while(curr != NULL && count < k ) {
        
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        count++;
        
    }
    
    return prev;
    
}

struct ListNode* reverseKGroup(struct ListNode* head, int k){

    struct ListNode *ans=NULL, *curr = head, *prev;
    int count = 0;
    struct ListNode *next, *temp;
    
    while( curr != NULL) {
    
            count = 0;
            temp = curr;
           
            //check whether k nodes are left or not
            while(temp != NULL && count < k){
                temp = temp->next;
                count++;
            }
            next = temp;
        
            if(count == k) {
                if(ans == NULL) 
                    ans = reverse(curr, k);
                else 
                    prev->next = reverse(curr, k);
                
            }
        
            else  {
                
                if(ans == NULL)
                    ans = curr;
                else
                    prev->next = curr;   
            }
        
             prev = curr;
             curr = next;
    }// end of outer loop
    
    return ans;
}