class Solution {
    // Given a vector<int> v, calculate the number of combinations.
    // E.g. {4, 3, 2, 1} will give us (4 + 3 + 2 + 1)! / (4 * 3! * 2! * 1!) combinations.
    double multi(vector<int>& v) {
        double ans = _factorial;
        
        for(auto a : v) {
            if(a <= 1) continue;

            // factorial of a.
            double p = 1;
            for(int i=2; i<=a; ++i) p = p * (double) i;
            ans = ans / p;
        }
        return ans;
    }
    
    // Given a vector<int> pick, check if the two boxes have the same number of distinct balls.
    // Also, output the total number of combinations (e.g. [1, 3] and [3, 1] are considered as 2 cases).
    bool isEqual(vector<int>& balls, vector<int>& pick, double& m) {
        int n = balls.size();
        vector<int> rem(n, 0);
        
        int s1 = 0, s2 = 0;
        for(int i=0; i<balls.size(); ++i) {
            rem[i] = balls[i] - pick[i];
            if(pick[i] > 0) s1++;
            if(balls[i] - pick[i] > 0) s2++;
        }
        
        // we need to multiply the # of combinations on both boxes.
        m = 1.0;
        m = m * multi(pick);
        m = m * multi(rem);
        
        return s1 == s2;
    }
    
    double _sum;
    double _factorial;

public:
    double getProbability(vector<int>& balls) {
        int n = balls.size();
        int sum = 0;
        for(auto a : balls) sum += a;
        sum = sum / 2;
        _sum = sum;
        
        // factorial of sum.
        _factorial = 1.0;
        for(int i=2; i<=sum; i++) _factorial = _factorial * (double) i;
        
        vector<int> pick(n, 0);
        double eq = 0.0, total = 0.0;
        
        helper(balls, pick, 0, sum, eq, total);
        return (double) eq / (double) total;
    }
    
    // The vector<int> pick defines the balls in the first box. 
    // The sum of the balls in pick should equal to half of total balls (which means, rem == 0).
    void helper(vector<int>& balls, vector<int>& pick, int pos, int rem, double& eq, double& total) {
        if(rem == 0) {
            double m = 1.0;
            if(isEqual(balls, pick, m)) eq = eq + m;
            total = total + m;
            return;
        }
        
        if(pos == balls.size()) {
            return;
        }
        
        for(int p=0; p <= min(balls[pos], rem); ++p) {
            pick[pos] = p;
            helper(balls, pick, pos+1, rem-p, eq, total);
            pick[pos] = 0;
        }
    }
};