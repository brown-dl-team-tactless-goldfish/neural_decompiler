
#define LIST_SIZE   1025

typedef struct {
    int val;
    int* arr;
    int arrCount;
    struct MyNode* next;
} MyNode;

typedef struct {
    MyNode** list;
} Solution;


Solution* solutionCreate(int* nums, int numsSize) {
    Solution* obj = (Solution*)malloc(sizeof(Solution));
    int i,key;
    MyNode* pre, *temp, *newNode;
    
    obj->list = (MyNode**)calloc(LIST_SIZE,sizeof(MyNode*));
    for(i=0;i<numsSize;i++)
    {
        key = abs(nums[i]%LIST_SIZE);
        temp = obj->list[key];
        if(temp == NULL)
        {
            newNode = (MyNode*)malloc(sizeof(MyNode));
            newNode->val = nums[i];
            newNode->arr = (int*)malloc(sizeof(int));
            newNode->arr[0] = i;
            newNode->arrCount = 1;
            newNode->next = NULL;
            obj->list[key] = newNode;
        }
        else
        {
            while(temp)
            {
                pre = temp;
                if(temp->val == nums[i])
                {
                    temp->arr = (int*)realloc(temp->arr,(temp->arrCount+1)*sizeof(int));
                    temp->arr[temp->arrCount] = i;
                    (temp->arrCount)++;
                    break;
                }
                temp = temp->next;
            }
            if(temp==NULL)
            {
                newNode = (MyNode*)malloc(sizeof(MyNode));
                newNode->val = nums[i];
                newNode->arr = (int*)malloc(sizeof(int));
                newNode->arr[0] = i;
                newNode->arrCount = 1;
                newNode->next = NULL;
                
                pre->next = newNode;
            }
        }
    }
    
    return obj;
}

int solutionPick(Solution* obj, int target) {
    int key = abs(target%LIST_SIZE);
    MyNode* pre;
    MyNode* temp = obj->list[key];
    int pos;
    
    while(temp)
    {
        if(temp->val == target)
        {
            pos = rand()%temp->arrCount;
            return temp->arr[pos];
        }
        temp = temp->next;
    }
    
    return -1;
}

void solutionFree(Solution* obj) {
    int i;
    MyNode* temp = NULL, *pre = NULL;
    
    for(i=0;i<LIST_SIZE;i++)
    {
        temp = obj->list[i];
        while(temp)
        {
            pre = temp;
            temp = temp->next;
            free(pre->arr);
            free(pre);
        }
    }
}

/**
 * Your Solution struct will be instantiated and called as such:
 * Solution* obj = solutionCreate(nums, numsSize);
 * int param_1 = solutionPick(obj, target);
 
 * solutionFree(obj);
*/