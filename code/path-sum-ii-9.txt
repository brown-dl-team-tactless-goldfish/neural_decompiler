void recursive(int *** result, struct TreeNode * root, int sum, int* returnSize, int** returnColumnSizes, int depth);

int** pathSum(struct TreeNode* root, int sum, int* returnSize, int** returnColumnSizes){
    if (root == NULL){
        *returnSize = 0;
        return NULL;
    }
    *returnSize = 0;
    *returnColumnSizes = malloc(sizeof(int) * 1000);
    int ** result = malloc(sizeof(int *) * 1000);
    recursive(&result, root, sum, returnSize, returnColumnSizes, 1);
    return result;
}

void recursive(int *** result, struct TreeNode * root, int sum, int* returnSize, int** returnColumnSizes, int depth){
    if (root == NULL)
        return;
    int curSize = *returnSize;
    if (root->val == sum && root->left == NULL && root->right == NULL){
        (*result)[*returnSize] = malloc(sizeof(int) * depth);
        printf("%d  ", root->val);
        (*result)[*returnSize][depth - 1] = root->val;
        (*returnColumnSizes)[*returnSize] = depth;
        *returnSize = *returnSize + 1;
        return;
    }
    sum = sum - root->val;
    recursive(result, root->left, sum, returnSize, returnColumnSizes, depth + 1);
    recursive(result, root->right, sum , returnSize, returnColumnSizes, depth + 1);
    for (int i = curSize; i < *returnSize; i++){
        (*result)[i][depth - 1] = root->val;
    }
    return;
}