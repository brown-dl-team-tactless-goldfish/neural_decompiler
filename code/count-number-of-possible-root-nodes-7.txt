class Solution {
public:
    map<pair<int,int>,int>visited;
    map<pair<int,int>,int>g;
    
    int dp(vector<vector<int>>&adj,int node,int par){
        if(visited.count(make_pair(par,node)))
            return visited[make_pair(par,node)];
        
        int guess=g.count(make_pair(par,node));
        
        for(int i=0;i<adj[node].size();i++){
            if(adj[node][i]!=par){
                guess+=dp(adj,adj[node][i],node);
            }
        }
        return visited[make_pair(par,node)]=guess;
    }
    
    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) 
    {
        
        int n=edges.size();
        for(int i=0;i<guesses.size();i++){
            g[make_pair(guesses[i][0],guesses[i][1])]=1;
            
        }
        vector<vector<int>>adj(n+1);
        for(int i=0;i<n;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        int count=0;
        for(int i=0;i<n+1;i++) {
            int guess=dp(adj,i,-1);
            if(guess>=k)
                count++;
        }
        return count;
    }
};