class Allocator {

private:
        map<int, vector<vector<int>>> mp;
        set<vector<int>> st;
        int sz;
public:
    Allocator(int n) {
        sz = n;
    }
    
    int allocate(int size, int mID) {
        if(st.size() == 0){
            if(size > sz) return -1;
            st.insert({0, size-1});
            mp[mID].push_back({0, size-1});
            return 0;
        }
        for(auto it = st.begin(); it != st.end(); ++it){
            if(it == st.begin() && (*it)[0] > size - 1){
                st.insert({0, size-1});
                mp[mID].push_back({0, size-1});
                return 0;
            }
            else{
                auto it2 = next(it, 1);
                if(it2 != st.end()){
                    if((*it2)[0] - (*it)[1] > size){
                        st.insert({(*it)[1]+1, (*it)[1]+size});
                        mp[mID].push_back({(*it)[1]+1, (*it)[1]+size});
                        return (*it)[1]+1;
                    }
                }
                else{
                    if(sz - (*it)[1] > size){
                        st.insert({(*it)[1]+1, (*it)[1]+size});
                        mp[mID].push_back({(*it)[1]+1, (*it)[1]+size});
                        return (*it)[1]+1;
                    }
                }
            }
        }

        return -1;
    }
    
    int free(int mID) {
        int r = 0;
        for(int i = 0; i < mp[mID].size(); i++){
            r += mp[mID][i][1] - mp[mID][i][0] + 1;
            st.erase(mp[mID][i]);
        }
        mp.erase(mID);
        return r;
    }
};

/**
 * Your Allocator object will be instantiated and called as such:
 * Allocator* obj = new Allocator(n);
 * int param_1 = obj->allocate(size,mID);
 * int param_2 = obj->free(mID);
 */