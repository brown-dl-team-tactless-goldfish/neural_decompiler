#define ll long long int
const int mod = 1e9 + 7;

class Solution {
public:
	// GFG Code for Modular Division
	
	// ----------------- Template Starts -----------------
    // C++ function for extended Euclidean Algorithm
    ll gcdExtended(ll a, ll b, ll *x, ll *y)
    {
        // Base Case
        if (a == 0)
        {
            *x = 0, *y = 1;
            return b;
        }

        ll x1, y1; // To store results of recursive call
        ll gcd = gcdExtended(b%a, a, &x1, &y1);

        // Update x and y using results of recursive
        // call
        *x = y1 - (b/a) * x1;
        *y = x1;

        return gcd;
    }

    // Function to find modulo inverse of b. It returns
    // -1 when inverse doesn't
    ll modInverse(ll b, ll m)
    {
        ll x, y; // used in extended GCD algorithm
        ll g = gcdExtended(b, m, &x, &y);

        // Return -1 if b and m are not co-prime
        if (g != 1)
            return -1;

        // m is added to handle negative x
        return (x%m + m) % m;
    }

    // Function to compute a/b under modulo m
    ll modDivide(ll a, ll b, ll m)
    {
        a = a % m;
        ll inv = modInverse(b, m);

        return (inv * a) % m;
    }
	// ----------------- Template Ends -----------------
    
    int numberOfWays(int startPos, int endPos, int k) {
        vector<ll> fac(1001);
        fac[0] = 1;
        
        if(startPos > endPos) 
            swap(startPos, endPos);
        
		// calculate factorial till 1000
        for(int i=1; i<=1000; ++i)
        {
            fac[i] = (fac[i-1] * i) % mod;
        }
		
        int dis = endPos - startPos;
		
		// we can't reach to the destination
        if(dis > k || (k - dis) % 2)
            return 0;
			
        // no of positive and negative moves we can make
        int pos = dis + (k - dis) / 2, neg = (k - dis) / 2;
		
		// now the answer is simply ( (no. of moves)! / ( (pos)! * (neg)! ) )
		
        int ans = modDivide(fac[k], fac[pos], mod);
        ans = modDivide(ans, fac[neg], mod);
		
        return ans % mod;
    }
};