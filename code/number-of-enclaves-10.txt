void DFS(int **arr, int i, int j, int N, int M) {
    if (i >= N || j >= M)
        return ;
    if (i < 0 || j < 0)
        return ;
    if (arr[i][j] == 0) // sea
        return ;
    arr[i][j] = 0;
    DFS(arr, i, j + 1, N, M);
    DFS(arr, i, j - 1, N, M);
    DFS(arr, i + 1, j, N, M);
    DFS(arr, i - 1, j, N, M);
}

int numEnclaves(int** grid, int gridSize, int* gridColSize){
    int N = gridSize, M = gridColSize[0];
    int sum = N * M, ans = 0;
    if (N <= 2 || M <= 2) {
        return 0;
    }
    
    for (int i = 1; i < M - 1; i ++) {
        if (grid[0][i] == 1) {
            grid[0][i] = 0;
            DFS(grid, 1, i, N, M);
        }
        if (grid[N - 1][i] == 1) {
            grid[N - 1][i] == 0;
            DFS(grid, N - 2, i, N, M);
        }
    }
    for (int j = 1; j < N - 1; j ++) {
        if (grid[j][0] == 1) {
            grid[j][0] == 0;
            DFS(grid, j, 1, N, M);
        }
        if (grid[j][M - 1] == 1) {
            grid[j][M - 1] == 0;
            DFS(grid, j, M - 2, N, M);
        }
    }
    for (int i = 1; i < N - 1; i ++) {
        for (int j = 1; j < M - 1; j ++) {
            if (grid[i][j] == 1) {
                ans ++;
            }
        }
    }
    return ans;
}