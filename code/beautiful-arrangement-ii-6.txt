/* "bubble back" int at index 0 to index n */
void bubble_back(int * arr, int n)
{
    int x, ii;
    
    if (n <= 0) { return; }
    
    x = arr[0];
    
    for (ii = 0; ii < n; ii++) {
        arr[ii] = arr[ii+1];
    }
    
    arr[ii] = x;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* constructArray(int n, int k, int* returnSize){
    int ii;
    int * ret = (int *)malloc(n * sizeof(int));
    
    if (ret == NULL) { return NULL; }
    
    for (ii = 0; ii < n; ii++) {
        ret[ii] = ii+1;
    }
    
    /* ret[] now satisfies k == 1.
       Swap elements in ret[] k-1 times until k is satisfied
       Algorithm we'll use:
       
       constructArray(n = 9, k = 6)
        = [123456789] -> k = 1
            = bubble_back([123456789], 6-1)
            = bubble_back([234561789], 5-2)
            = bubble_back([345261789], 3-2)
            = bubble_back([435261789], 1-2) = return (STOP CONDITION)
            
        Doing this method always generates a 2nd list of form [12345611]
     */
    
    for (ii = k-1; ii > 0; ii = ii-2) {
        bubble_back(ret, ii);
    }
    
    *returnSize = n;
    return ret;
}