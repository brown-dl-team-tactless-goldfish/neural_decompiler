#define MAX_SIZE 301

int union_find[MAX_SIZE];

void init(int size)
{
	for (int i = 0; i < size; i++)
		union_find[i] = i;
}

int find_root(int v)
{
	int root = v;
	int tmp;

	while (root != union_find[root])
		root = union_find[root];

	while (v != root) {
		tmp = union_find[v];
		union_find[v] = root;
		v = tmp;
	}

	return root;
}

void union_root(int a, int b)
{
	int root_a = find_root(a);
	int root_b = find_root(b);

	if (root_a != root_b)
		union_find[root_b] = root_a;
}

int minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize)
{
	init(graphSize);

	for (int i = 0; i < graphSize; i++)
		for (int j = i; j < *graphColSize; j++)
			if (graph[i][j])
				union_root(i, j);

	int connected[MAX_SIZE] = {0};
	int malwares[MAX_SIZE] = {0};
	for (int i = 0; i < graphSize; i++) connected[find_root(i)]++;	
	for (int i = 0; i < initialSize; i++) malwares[find_root(initial[i])]++;	

	int ans = initial[0];
	for (int i = 0; i < initialSize; i++) {
		if (malwares[find_root(initial[i])] == 1) {
			if (malwares[find_root(ans)] > 1)
				ans = initial[i];
			else if (connected[find_root(ans)] < connected[find_root(initial[i])])
				ans = initial[i];
			else if ((connected[find_root(ans)] == connected[find_root(initial[i])]) && (ans > initial[i]))
				ans = initial[i];
		} else {
			if (ans > initial[i])
				ans = initial[i];
		}
	}

	return ans;
}