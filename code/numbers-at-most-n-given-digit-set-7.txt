class Solution {
public:
    // Find the # of strings with length l, consisting of digit in digits, that are less or equal than str.
    int helper(vector<string>& digits, string str, int l) {
        if(l == 0) return 1;

        // Trim the string, remove leading zeros.
        int i =0;
        while(i < str.size() && str[i] == '0') {
            ++i;
        }
        str = str.substr(i);
        int len = str.size();
        
        // l > length of str.
        if(l > len) return 0;
        
        // l < length of str, any combination works.
        int m = digits.size();
        if(l < len) return pow(m, l);
        
        // l == length of str, compare the first digit.
        // Note that digit in digits are sorted.
        int ans = 0;
        for(auto& d: digits) {
            if(d[0] > str[0]) break;
            else if(d[0] < str[0]) ans += pow(m, l-1);
            else ans += helper(digits, str.substr(1), l-1);
        }
        return ans;
    }

    int atMostNGivenDigitSet(vector<string>& digits, int n) {
        string str = to_string(n);
        int ans = 0;
        
        for(int i=1; i<= str.size(); ++i) {
            ans += helper(digits, str, i);
        }
        return ans;
    }
};