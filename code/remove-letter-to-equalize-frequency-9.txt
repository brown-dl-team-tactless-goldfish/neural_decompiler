class Solution {
public:
    bool equalFrequency(string word) {
        
        unordered_map<int,int> c ;       
        for (auto k : word){
            c[k-'a']++;
        }
        
        map<int,int> s;
        
        for (auto n : c){
            s[n.second]++;
        }
        // more than 2 frequencies then return false;
        if(s.size() > 2)
            return false;
        
        auto it = s.begin();
        
        int n1 = it->first;
        int n1C = it->second;
        
        // if only 1 frequencey then, frequency should be 1 like abc
        // or 1 frequency character should be unique ie. aaaaa
        if(s.size() == 1) {
            return ((n1 == 1)  || (n1C == 1)) ;
        }
        
        it++;
        int n2 = it->first;
        int n2C = it->second;
        
        // return true only, we have 1 frequency number which is only unique
        // if we have one extra frequency number which is singular 
        
        return((n1 == 1) && (n1C == 1) || (((n2-n1) == 1) && n2C == 1));
                 
    }
};