public record QualityNode(int Node, int Time, int Score, HashSet<int> Nodes);

public int MaximalPathQuality(int[] values, int[][] edges, int maxTime)
{
	checked
	{
		Dictionary<int, List<(int n, int c)>> graph = new();
		for (int i = 0; i < values.Length; i++)
		{
			graph[i] = new();
		}

		foreach (var edge in edges)
		{
			int u = edge[0], v = edge[1], t = edge[2];
			graph[u].Add((v, t));
			graph[v].Add((u, t));
		}

		Queue<QualityNode> q = new Queue<QualityNode>();
		q.Enqueue(new(0, 0, values[0], new HashSet<int>(){ 0 }));
		int result = 0;

		while (q.Count > 0)
		{
			var current = q.Dequeue();
			if (current.Node == 0)
			{
				if(result < current.Score)
				{
					result = current.Score;                                 
				}                    
			}

			foreach (var neighbour in graph[current.Node])
			{                    
				int time = current.Time + neighbour.c;

				if (time <= maxTime)
				{
					int score = current.Score;
					var nodes = current.Nodes;                       

					if(!nodes.Contains(neighbour.n))
					{
						score += values[neighbour.n];
						nodes = current.Nodes.ToHashSet<int>();
						nodes.Add(neighbour.n);
					}

					q.Enqueue(new QualityNode(neighbour.n, time, score, nodes));
				}
			}
		}

		return result;
	}
}