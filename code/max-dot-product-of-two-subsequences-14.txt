class Solution {
public:
    int n, m;
    vector<vector<int>> dp;
    vector<int> nums1, nums2; 
    int memo(int start1, int start2){
        if(start1 == n || start2 == m) return INT_MIN;
        
        if(dp[start1][start2] != -1) return dp[start1][start2]; 
        int res = nums1[start1]* nums2[start2], temp =memo(start1+1, start2+1); 
        res = max(res , 
                  max( memo(start1+1, start2),
                       max(memo(start1, start2 +1), 
                           nums1[start1]*nums2[start2] + (temp == INT_MIN? 0: temp )
                          )
                     )
                 ); 
        
        return dp[start1][start2] = res ; 
    }
    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() < nums2.size()) swap(nums1, nums2) ;
        this->nums1 = nums1;
        this->nums2 = nums2;
        n = nums1.size(), m = nums2.size(); 
        dp.resize(n+1, vector<int> (m+1, -1));
        return memo(0, 0); 
    }
};