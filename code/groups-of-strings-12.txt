unordered_map<int,int> parent;
unordered_map<int,int> count;
int find(int x)
{
	if(parent[x]==-1)
		return x;
	else return parent[x]=find(parent[x]);
}
bool uni(int x,int y)
{
	int xp=find(x),yp=find(y);
	if(xp!=yp)
	{
		parent[yp]=xp;
		count[xp]+=count[yp];
		return true;
	}
	return false;
}
vector<int> groupStrings(vector<string>& arr) 
{
	for(string& x:arr)
	{
		int temp=0;
		for(char c:x)
			temp|=1<<(c-'a');
		parent[temp]=-1;
		count[temp]++;
	}
	for(auto itr=parent.begin();itr!=parent.end();++itr)
	{
		int bit=itr->first;
		int nbit;
		for(int i=0;i<26;++i)
		{
			nbit=bit;
			if(bit&(1<<i))
			{
				unsigned int t=1<<i;
				nbit&=~t;
				if(parent.find(nbit)!=parent.end())//removed an alphabet
					uni(bit,nbit);
				for(int j=0;j<26;++j)
					if(i!=j&&(bit&(1<<j))==0)
					{
						int n2bit=nbit;
						n2bit|=1<<j;
						if(parent.find(n2bit)!=parent.end())//replaced an alphabet
							uni(bit,n2bit);
					}
			}
			else
			{
				nbit|=1<<i;
				if(parent.find(nbit)!=parent.end())//added an alphabet
					uni(bit,nbit);
			}
		}
	}
	vector<int> ret(2);
	for(auto itr=parent.begin();itr!=parent.end();++itr)
		if(itr->second==-1)
		{
			ret[0]++;
			ret[1]=max(ret[1],count[itr->first]);
		}
	return ret;
}