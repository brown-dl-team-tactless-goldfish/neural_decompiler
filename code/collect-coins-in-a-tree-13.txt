class Solution {
public:
    void remove(vector<int> &edge, int v) {
        int n = edge.size();
        for(int i=0; i<n; i++)
        {
            if(edge[i] == v)
            {
                edge.erase(edge.begin()+i);
                return;
            }
        }
    }

    int collectTheCoins(vector<int>& coins, vector<vector<int>>& edges) {
        int n = coins.size();
        int cnt = 0;
        
        vector<vector<int>> adj(n,vector<int>());
        for(auto it : edges)
        {
            int u = it[0], v = it[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        for(int i=0; i<n; i++)
        {
            int j = i;
            while(coins[j]==0 && adj[j].size()==1)
            {
                int nbr = adj[j][0];
                remove(adj[j],nbr);
                remove(adj[nbr],j);
                cnt++;
                j = nbr;
            }
        }

        vector<bool> vis(n,false);

        for(int i=0; i<n; i++)
        {
            if(!vis[i] && coins[i]==1 && adj[i].size()==1)
            {
                int nbr = adj[i][0];
                remove(adj[i],nbr);
                remove(adj[nbr],i);
                cnt++;
                coins[nbr] = 1;
                vis[nbr] = true;
            }
        }

        vis.clear();
        vis.resize(n,false);

        for(int i=0; i<n; i++)
        {
            if(!vis[i] && coins[i]==1 && adj[i].size()==1)
            {
                int nbr = adj[i][0];
                remove(adj[i],nbr);
                remove(adj[nbr],i);
                cnt++;
                vis[nbr] = true;
            }
        }

        int ans = n - cnt - 1;
        ans *= 2;
        
        return ans;
    }
};