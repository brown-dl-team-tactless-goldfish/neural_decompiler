	vector<int> mdays = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int arriveAliceMonth = stoi(arriveAlice.substr(0, 2));
    int arriveAliceDay = stoi(arriveAlice.substr(3,2));
    int leaveAliceMonth = stoi(leaveAlice.substr(0,2));
    int leaveAliceDay = stoi(leaveAlice.substr(3,2));
    
    int arriveBobMonth = stoi(arriveBob.substr(0,2));
    int arriveBobDay = stoi(arriveBob.substr(3,2));
    int leaveBobMonth = stoi(leaveBob.substr(0,2));
    int leaveBobDay = stoi(leaveBob.substr(3,2));
    
    int earlyLeaveMonth = min(leaveAliceMonth, leaveBobMonth), earlyLeaveDay;
    int lateArriveMonth = max(arriveAliceMonth, arriveBobMonth), lateArriveDay;
    if(lateArriveMonth > earlyLeaveMonth) return 0;
    
    int AliceArrive = 0, AliceLeave = 0, BobArrive = 0, BobLeave = 0;
    
    while(arriveAliceMonth--){
        AliceArrive += mdays[arriveAliceMonth];
    }
    AliceArrive += arriveAliceDay;
    cout << "Alice Arrive -> " << AliceArrive << endl;
    
    while(leaveAliceMonth--){
        AliceLeave += mdays[leaveAliceMonth];
    }
    AliceLeave += leaveAliceDay;
    cout << "Alice Leave -> " << AliceLeave << endl;
    
    while(arriveBobMonth--){
        BobArrive += mdays[arriveBobMonth];
    }
    BobArrive += arriveBobDay;
    cout << "Bob Arrive -> " << BobArrive << endl;
    
    while(leaveBobMonth--){
        BobLeave += mdays[leaveBobMonth];
    }
    BobLeave += leaveBobDay;
    cout << "Bob Leave -> " << BobLeave << endl;
    
    int together = min(AliceLeave, BobLeave) - max(AliceArrive, BobArrive) + 1;
    
    return together < 0 ? 0 : together;