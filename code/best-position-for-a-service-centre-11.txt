class Solution {
public:
    double getDist(double px , double py , vector<vector<int>>&positions)
    {
        double min_dist =0.0;
        for(auto &x : positions)
        {
            double a=x[0];
            double b = x[1];
            min_dist+= sqrt((px-a)*(px-a) + (py-b)*(py-b));
        }
        return min_dist;
    }
    double getMinDistSum(vector<vector<int>>& positions) {
        double precision = 1e-6;
        double cur_precision = 1000;
        double x_offsets[4]={0.0,1.0,-1.0,0.0};
        double y_offsets[4]={1.0,0.0,0.0,-1.0};

        double x =0.0,y=0.0;
        double best_dist = getDist(x,y,positions);
        while(cur_precision>precision)
        {
            bool progress =0;
            for(int i =0;i<4;i++)
            {
                double new_x = x+cur_precision*x_offsets[i];
                double new_y = y + cur_precision*y_offsets[i];
                double new_dist = getDist(new_x,new_y,positions);
                if(new_dist < best_dist)
                {
                    best_dist =new_dist;
                    x=new_x;
                    y=new_y;
                    progress=1;
                    break;
                } 
            }
            if(!progress)
            {
                cur_precision/=10;
            }
        }
        return best_dist;
    }
};