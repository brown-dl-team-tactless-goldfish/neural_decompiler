class TopVotedCandidate {
    vector<vector<int>> changeList;
public:
    TopVotedCandidate(vector<int>& persons, vector<int>& times) {
        int leader = -1, topVotes = 0;
        unordered_map<int, int> m; // person -> votes
        int n = persons.size();
        for (int i = 0; i < n; i++) {
            int v = ++m[persons[i]];
            if (v >= topVotes) {
                topVotes = v;
                if (persons[i] != leader) {
                    leader = persons[i];
                    changeList.push_back({times[i], persons[i]});
                }
            }
        }
    }
    
    int q(int t) {
        vector<int> tmp = {t, INT_MAX}; 
        // make sure find the first time of change that is larger than t
        auto up = upper_bound(changeList.begin(), changeList.end(), tmp);
        return (*(--up))[1];
    }
};

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate* obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj->q(t);
 */