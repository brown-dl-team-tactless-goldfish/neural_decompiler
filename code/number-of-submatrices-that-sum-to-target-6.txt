    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        // we can compute the prefix sum of each block in the matrix
        // then we check each submatrice of the matrix, if it's sum is target, we add one to the result
        int rows = matrix.size();
        int columns = matrix[0].size();
        vector<vector<int>> prefixSum(rows + 1, vector<int>(columns + 1, 0));
        for (int r = 1; r <= rows; r++) {
            for (int c = 1; c <= columns; c++) {
                prefixSum[r][c] = prefixSum[r - 1][c] + prefixSum[r][c - 1] - prefixSum[r - 1][c - 1] + matrix[r - 1][c - 1];
            }
        }
        int count = 0;
        unordered_map<int, int> hashMap;
        for (int r1 = 1; r1 <= rows; r1++) {
            for (int r2 = r1; r2 <= rows; r2++) {
                hashMap.clear();
                hashMap[0] = 1;
                for (int c = 1; c <= columns; c++) {
                    int currentSum = prefixSum[r2][c] - prefixSum[r1 - 1][c];
                    int remaining = currentSum - target;
                    if (hashMap.find(remaining) != hashMap.end()) {
                        count += hashMap[remaining];
                    }
                    hashMap[currentSum]++;
                }
            }
        }
        return count;
    }