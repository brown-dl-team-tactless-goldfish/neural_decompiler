
int shoppingOffers(int* price, int priceSize, int** special, int specialRowSize, int *specialColSizes, int* needs, int needsSize) {
    int ******hashMap=(int ******)malloc((needs[0]+1)*sizeof(int*****));
    for(int i=0;i<(needs[0]+1);i++){
        hashMap[i]=(int *****)malloc((2>needsSize?1:needs[1]+1)*sizeof(int****));
        for(int j=0;j<(2>needsSize?1:needs[1]+1);j++){
            hashMap[i][j]=(int ****)malloc((3>needsSize?1:needs[2]+1)*sizeof(int***));
            for(int k=0;k<(3>needsSize?1:needs[2]+1);k++){
                hashMap[i][j][k]=(int ***)malloc((4>needsSize?1:needs[3]+1)*sizeof(int**));
                for(int m=0;m<(4>needsSize?1:needs[3]+1);m++){
                    hashMap[i][j][k][m]=(int **)malloc((5>needsSize?1:needs[4]+1)*sizeof(int*));
                    for(int n=0;n<(5>needsSize?1:needs[4]+1);n++){
                        hashMap[i][j][k][m][n]=(int *)calloc((6>needsSize?1:needs[5]+1),sizeof(int));
                    }
                }
            }
        }
    }
    int *array=(int*)calloc(7,sizeof(int));
    int ret=0;
    while(array[needsSize]!=1){
        ret=function(array,6,hashMap,price,special,specialRowSize,specialColSizes,needs,needsSize);
        array[0]++;
        for(int i=0;i<needsSize;i++){
            if(array[i]>needs[i]){
                array[i]=0;
                array[i+1]++;
            }else{
                break;
            }
        }
    }
    return ret;
}
int function(int *array,int count,int ******hashMap,int* price,int** special,int specialRowSize,int *specialColSizes,int* needs,int needsSize){
    int i=array[0],j=array[1],k=array[2],m=array[3],n=array[4],x=array[5];
    int less=INT_MAX;
    for(int y=0;y<specialRowSize;y++){
        int z=0;
        for(;z<specialColSizes[y]-1;z++){
            if(array[z]-special[y][z]<0){
                break;
            }
            array[z]=array[z]-special[y][z];
        }
        if(z==specialColSizes[y]-1){
            int temp=getValueFromHash(hashMap,array,count)+special[y][z];
            less=less<temp?less:temp;
        }
        for(z=z-1;z>=0;z--){
            array[z]=array[z]+special[y][z];
        }
    }
    int z=0;
    for(;z<needsSize;z++){
            if(array[z]==0){
                continue;
            }
            array[z]--;
            int temp=getValueFromHash(hashMap,array,count)+price[z];
            array[z]++;
            less=less<temp?less:temp;
   }
    less=less==INT_MAX?0:less;
    hashMap[i][j][k][m][n][x]=less;
    return less;
}
int getValueFromHash(int ******hashMap,int *array,int count){
    int i=array[0],j=array[1],k=array[2],m=array[3],n=array[4],x=array[5];
    return hashMap[i][j][k][m][n][x];
}