typedef pair<int,int> ip;
class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<vector<int>> ans;
        if(nums2.empty() || nums1.empty()) return ans;
        auto cmp = [&nums1, &nums2](const pair<int, int>& a, const pair<int, int>&b) {
            return (nums1[a.first]+nums2[a.second] > nums1[b.first]+nums2[b.second]); 
        };
        priority_queue<ip,vector<ip>,decltype(cmp)> PQ(cmp);
        PQ.push({0,0});
        while(!PQ.empty() && k--) {
            pair<int,int> P = PQ.top();
            int x = P.first;
            int y = P.second;
            PQ.pop();
            ans.push_back({nums1[x],nums2[y]});
            if(x < nums1.size()-1) PQ.push({x+1,y});
            if(x==0 && y < nums2.size()-1) PQ.push({x,y+1});
        }
        return ans;
    }
    
   
};