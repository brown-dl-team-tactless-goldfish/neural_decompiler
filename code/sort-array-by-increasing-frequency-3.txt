typedef struct _arr{
    int tf;
    int p;
    int val;
}arr;
int cmp2(const void *a, const void *b)
{
   arr *c=(arr *)a;
    arr *d=(arr *)b;
    return c->p==d->p?d->val-c->val:c->p-d->p;
}
int cmp(const void *a, const void *b)
{
    return *(int *)a-*(int *)b;
}
int* frequencySort(int* nums, int numsSize, int* returnSize){
    int *ret = malloc(numsSize*sizeof(int));
    if(numsSize==1){
        *returnSize = numsSize;
        ret[0]=nums[0];
        return ret;
    }
    arr *arri = calloc(numsSize,sizeof(arr));
    int i,j,count;
    qsort(nums,numsSize,sizeof(int),cmp);
    for(i=0,count=1; i<numsSize-1; i++){
        arri[i].val=nums[i];
        arri[i].tf=1;
        if(nums[i]!=nums[i+1]){
            for(j=0;j<numsSize;j++)if(arri[j].val==nums[i]&&arri[j].tf==1)arri[j].p=count;
            count=1;
        }
        else count++;
        if(i==numsSize-2){
            arri[i+1].val=nums[i+1];
            for(j=0;j<numsSize;j++)if(arri[j].val==nums[i+1])arri[j].p+=count;
        }
    }
    qsort(arri,numsSize,sizeof(arri[0]),cmp2);
    for(i=0; i<numsSize; i++){
        ret[i] = arri[i].val;
    }
    free(arri);
    *returnSize = numsSize;
    return ret;
}