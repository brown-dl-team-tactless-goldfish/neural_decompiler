void permutation(int* A, int l , int r, int* count, int** table)
{
    if(l == r)
    {
        for(int i = 0; i < 4; i++)
        {
            table[*count][i] = A[i];
        }
        *count += 1;
        return;
    }
    else
    {
        for (int i = l; i <= r; i++)
        {
            int temp;
            temp = A[l];
            A[l] = A[i];
            A[i] = temp;
            permutation(A, l+1, r, count, table);
            temp = A[l];
            A[l] = A[i];
            A[i] = temp;
        }
    }
}

char* largestTimeFromDigits(int* A, int ASize) {
    int** table = malloc(sizeof(int*)*24);
    int count = 0;
    int max = -1;
    for(int i = 0; i < 24; i++)
    {
        table[i] = calloc(4, sizeof(int));
    }
    char* ans = calloc(6, sizeof(char));
    permutation(A, 0, ASize-1, &count, table);
    int temp;
    
    for(int i = 0; i < 24; i++)
    {
        if(table[i][0] == 2)
        {
            if(table[i][1] < 4)
            {
                if(table[i][2] < 6)
                {
                    temp = table[i][0]*1000 + table[i][1]*100 + table[i][2]*10 + table[i][3];
                    if (temp > max) max = temp;
                }
            }
        }
        else if(table[i][0] < 2)
        {
            if(table[i][2] < 6)
            {
                temp = table[i][0]*1000 + table[i][1]*100 + table[i][2]*10 + table[i][3];
                if (temp > max) max = temp;
            }
        }
    }
    if(max <0) return ans;
    ans[2] = ':';
    ans[5] = '\0';
    ans[4] = max % 10 + '0';
    max /= 10;
    ans[3] = max % 10 + '0';
    max /= 10;
    ans[1] = max % 10 + '0';
    max /= 10;
    ans[0] = max % 10 + '0';
    return ans;
}