from functools import lru_cache
class Solution:
    def stoneGameV(self, arr: List[int]) -> int:
        if len(arr) == 1:
            return 0
        
        sumValue = [0, arr[0]]
        for i in range(1, len(arr)):
            sumValue.append(sumValue[-1] + arr[i])
            
        @lru_cache(None)
        def playGame(i, j):
            if i == j:
                return 0
            ans = 0
            for k in range(i, j):
                left, right = sumValue[k + 1] - sumValue[i], sumValue[j + 1] - sumValue[k + 1] 
                # sum(arr[i: k + 1]), sum(arr[k + 1: j + 1])
                if left > right:
                    res = right + playGame(k + 1, j)    
                elif left < right:
                    res = left + playGame(i, k)                    
                else:
                    res = max(left + playGame(i, k), right + playGame(k + 1, j))    
                ans = max(ans, res)
            return ans
        return playGame(0, len(arr) - 1)