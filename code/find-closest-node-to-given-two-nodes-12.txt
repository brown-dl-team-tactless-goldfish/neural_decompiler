class Solution {
public:
    void bfs(int curr , vector<int> &dis , vector<int> gr[]){
        queue<int> q;
        q.push(curr);
        dis[curr] = 0;
        
        
        while(!q.empty()){
            int top = q.front(); q.pop();
            
            for(auto x : gr[top]){
                if(dis[x] == INT_MAX){
                    dis[x] = dis[top] + 1;
                    q.push(x);
                }
            }
        }
        return;
    }
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        vector<int> gr[n];
        
        for(int i = 0 ; i < n ; i++){
            int v = edges[i];
            
            if(v!=-1) gr[i].push_back(v);
        }
        
        vector<int> dis1(n,INT_MAX);
        vector<int> dis2(n,INT_MAX);
        
        bfs(node1,dis1,gr);
        bfs(node2,dis2,gr);
        
        
        int ans = INT_MAX , res = -1;
        for(int i = 0 ; i < n ; i++){
            if(dis1[i] != INT_MAX and dis2[i] != INT_MAX){
                int subans = max(dis1[i],dis2[i]);
                if(subans < ans){
                    res = i;
                    ans = subans;
                }
            }
        }
        return res;
        
    }
};