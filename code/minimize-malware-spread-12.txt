class Solution {
public:
   int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
      unordered_set<int> init(initial.begin(), initial.end());
      const int n = graph.size();
      vroot = vector<int>(n, 0);
      for (int i = 0; i < n; i++) vroot[i] = i;
      for (int i = 0; i < n; i++) {
         for (int j = 0; j < i; j++)
            if (graph[i][j] == 1) connect(i, j);
      }
      unordered_map<int, set<int>> m;
      for (int i = 0; i < n; i++) m[getRoot(i)].insert(i);

      map<int, set<int>, greater<int>> m1;
      for (const auto& p : m) {
         auto& s = p.second;
         set<int> t;
         for (auto i : s)
            if (init.count(i)) t.insert(i);
         if (t.size() == 1)
            m1[s.size()].insert(*t.begin());
         else
            m1[0].insert(t.begin(), t.end());
      }
      return *(m1.begin()->second.begin());
   }

   int getRoot(int i) {
      if (i != vroot[i]) {
         auto root = getRoot(vroot[i]);
         vroot[i] = root;
      }
      return vroot[i];
   }

   void connect(int i, int j) {
      auto r1 = getRoot(i), r2 = getRoot(j);
      vroot[r1] = r2;
   }

   vector<int> vroot;
};