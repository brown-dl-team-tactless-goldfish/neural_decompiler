class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        int next[2][10] = {{9,0,1,2,3,4,5,6,7,8},{1,2,3,4,5,6,7,8,9,0}};
        bool setv[10000] = {false};   
        int targetv = stoi(target);
        for (auto s: deadends)
            setv[stoi(s)] = true;
        if (setv[0]) return -1;
        queue<pair<int,int>> q;
        q.push(make_pair(0,0));
        while(!q.empty())
        {
            auto c = q.front();
            int v = c.first;
            if (v == targetv) 
                return c.second;
            int base=1;
            for (int i=0; i<4; i++)
            {
                for (int j=0; j<2; j++)
                {
                    int digit = v%10;
                    int newv = c.first+(-digit+next[j][digit])*base;
                    if (!setv[newv])
                    {
                        q.push(make_pair(newv,c.second+1));
                        setv[newv] = true;
                    }
                }
                v/=10;
                base*=10;
            }
            q.pop();
        }
        return -1;
    }
};