class Solution {
public:
    
    vector<string> spellchecker(vector<string>& wordlist, 
                                vector<string>& queries) {
        
        vector<string> res;
       
        unordered_set<string> actualWords;
        unordered_map<string,map<int,string>> translatedWords;
        unordered_map<string,map<int,string>> vowelWords;
        
        int i=0;
        for (string& s : wordlist) {
            
            actualWords.insert(s);
            string cur = s;
            transform(cur.begin(), cur.end(), cur.begin(), [](unsigned char c) {
               return tolower(c); 
            });
            
            translatedWords[cur][i] = s;
            
            
            string vCur = cur;
            transform(vCur.begin(), vCur.end(), vCur.begin(), [](char c) {
                
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                    return '#';
                }
                
                return c;
            });
     
            vowelWords[vCur][i] = s;
            i++;
            
        }
    
        for (string& q : queries) {
                        
            string curQ = q;
            transform(curQ.begin(), curQ.end(), curQ.begin(), 
                      [](unsigned char c) {
                return tolower(c); 
            });
            
            string vCurQ = curQ;
            transform(vCurQ.begin(), vCurQ.end(), vCurQ.begin(), [](char c) {
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                    return '#';
                }
                
                return c;
            });
            
            
            if (actualWords.find(q) != actualWords.end()) {
                res.push_back(q);
                continue;
            }
            
            if (translatedWords.find(curQ) != translatedWords.end()) {
                res.push_back(translatedWords[curQ].begin()->second);
                continue;
            }
            
            if (vowelWords.find(vCurQ) != vowelWords.end()) {
                res.push_back(vowelWords[vCurQ].begin()->second);
                continue;
            }
            
            res.push_back("");
        }
        return res;
        
    }
};