class Solution {
public:
    
    long long mergeSort(vector<long long> &sums, int start, int end, long long l, long long u){
        if(start == end){
            return 0;
        }
        
        if(start + 1 == end){
            if(sums[start] >= l && sums[start] <= u){
                return 1;
            }
            
            return 0;
        }
        
        int med = start + (end - start)/2;
        long long r1 = mergeSort(sums,start,med,l,u);
        long long r2 = mergeSort(sums,med,end,l,u);
        
        int left = med, right = med;
        long long res = 0;
        for(int i = start; i < med; ++i){
            while(left < end && sums[left] - sums[i] < l){
                left++;
            }
            
            while(right < end && sums[right] - sums[i] <= u){
                right++;
            }
            
            res += right - left;
        }
        
        inplace_merge(begin(sums)+ start, begin(sums) + med, begin(sums) + end);
        return res + r1 + r2;
    }
    
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        vector<long long> sums;
        long long sum = 0;
        for(int i = 0; i < nums.size(); ++i){
            sum += nums[i];
            sums.push_back(sum);
        }
        
        return mergeSort(sums,0,sums.size(),lower,upper);
    }
};