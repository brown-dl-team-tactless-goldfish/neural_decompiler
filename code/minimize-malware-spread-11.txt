class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial){
        
       int N  = graph.size();
        vector<int> colors(N,-1);
        int C = 0;
        for(int node = 0; node< N; node++){
            if(colors[node]==-1){
                dfs(graph, colors, node, C++);
            }
        }
        
        vector<int> size(C,0);
        for(auto color: colors){
            size[color]++;
        }
        
        vector<int> counts(C,0);
        for(auto i: initial)
            counts[colors[i]]++;
        
        int ans = INT_MAX;
        for(auto node: initial){
            int c = colors[node];
            if(counts[c]==1){
                if(ans==INT_MAX){
                    ans = node;
                }
                else if(size[c]>size[colors[ans]]){
                    ans = node;
                }
                else if(size[c]==size[colors[ans]] and node<ans){
                    ans = node;
                }
                    
            }
        }
        if(ans == INT_MAX){
            for(int node: initial){
                ans = min(ans,node);
            }
        }
        return ans;
    }
    
    void dfs(vector<vector<int>>& graph, vector<int>& colors, int node, int color){
        colors[node] = color;
        for(int i = 0;i<graph.size(); i++){
            if(graph[node][i]==1 and colors[i]==-1 ){
                dfs(graph,colors,i,color);
            }
        }
    }
};