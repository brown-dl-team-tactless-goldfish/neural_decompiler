class Solution {
public:
void nsl(vector<int>&arr,vector<int>&temp){
    stack<int>st;
    int n=arr.size();
    for(int i=0;i<n;i++){
        while(!st.empty() && arr[st.top()]>=arr[i])st.pop();
        if(st.empty())temp[i]=-1;
        else temp[i]=st.top();
        st.push(i);
    }
}
void nsr(vector<int>&arr,vector<int>&temp){
    stack<int>st;
    int n= arr.size();
    for(int i=n-1;i>=0;i--){
        while(!st.empty() && arr[st.top()]>=arr[i])st.pop();
        if(st.empty())temp[i]=n;
        else temp[i]=st.top();
        st.push(i);
    }
}
    int maximumScore(vector<int>& nums, int k) {
//         5 5 5 4 5 4 1 1 1 1
// left    -1 5 5 5 4 -1 -1 -1 -1 
// right    1 1 1 1 1  1  n n  n  n 
            int n=nums.size();
            vector<int>left(n),right(n);
            nsl(nums,left);
            nsr(nums,right);
            int ans=0;
            for(int i=0;i<n;i++){
                if(left[i]+1<=k && k<=right[i]-1){
                    ans=max(ans,nums[i]*(right[i]-left[i]-1));
                }
            }
            
            return ans;
    }
};