double knightProbability(int N, int K, int r, int c) {
    if(K==0){
        if(r>=0&&r<N&&c>=0&&c<N){
            return 1.0;
        }else{
            return 0.0;
        }
    }
    if(!(r>=0&&r<N&&c>=0&&c<N)){
        return 0;
    }
    double ret=0.0;
    int array[8][2]={{1,2},{2,1},{2,-1},{1,-2},{-1,-2},{-2,-1},{-2,1},{-1,2}};
    double** map=(double**)malloc(N*sizeof(double*));
    for(int i=0;i<N;i++){
        map[i]=(double*)calloc(N,sizeof(double));
    }
    map[r][c]=1.0;
    for(int k=0;k<K;k++){
        double** map1=(double**)malloc(N*sizeof(double*));
        for(int i=0;i<N;i++){
            map1[i]=(double*)calloc(N,sizeof(double));
        }
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                double temp=0.0;
                for(int h=0;h<8;h++){
                    int tempR=i+array[h][0];
                    int tempC=j+array[h][1];
                    if(tempR>=0&&tempR<N&&tempC>=0&&tempC<N){
                        temp+=map[tempR][tempC]/8;
                    }
                }
                map1[i][j]=temp;
            }  
        }
        for(int i=0;i<N;i++){
            free(map[i]);
        }
        map=map1;
    }
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            ret+=map[i][j];
        }
    }
    return ret;
}