public class Solution {
    
   private static Func<double, double, double>[] ops = new Func<double, double, double> [] {
      (a, b) => a + b,
      (a, b) => a - b,
      (a, b) => a * b,
      (a, b) => a / b,
   };
    
   private static IEnumerable<(int A, int B)[]> Orders(int length = 4) {
      if (length == 2) {
        yield return new (int A, int B)[] { (0, 1) };
        yield return new (int A, int B)[] { (1, 0) };

        yield break;
      }

      for (int A = 0; A < length; ++A) {
        for (int B = 0; B < length; ++B) {
          if (A == B)
              continue;
            
          foreach (var rest in Orders(length - 1)) {
            var result = new (int A, int B)[rest.Length + 1];

            Array.Copy(rest, 0, result, 1, rest.Length);

            result[0] = (A, B);

            yield return result;
          }
        }
      } 
    }
  
   private static bool Test(double[] cards) {
      Func<double, double, double>[] funcs = new Func<double, double, double>[3];
      
      foreach (var op1 in ops) {
          funcs[0] = op1;
          
          foreach (var op2 in ops) {
              funcs[1] = op2;
              
              foreach (var op3 in ops) {
                  funcs[2] = op3;
                  
                  foreach (var ord in Orders(4)) {
                      var list = cards.ToList();
                      
                      for (int i = 0; i < funcs.Length; ++i) {
                          int A = ord[i].A;
                          int B = ord[i].B;
                          
                          double C = funcs[i](list[A], list[B]);
                          
                          list[Math.Min(A, B)] = C;
                          list.RemoveAt(Math.Max(A, B));
                      }
                      
                      if (Math.Abs(list[0] - 24) < 0.00000000001)
                          return true;
                  }
              }
          }
      }
       
      return false;
    }
    
    public bool JudgePoint24(int[] cards) {
        return Test(cards.Select(item => (double) item).ToArray());
    }
    
}