public class Solution {
    Dictionary<string, bool> curStrAndResult = new Dictionary<string, bool>(); // cache the temporary results 
    public IList<string> RemoveInvalidParentheses(string str) {
        var n = str.Length;
        if (n == 0) return new List<string>() { "" };

        if (isValid(str)) {
            return new List<string>() { str };
        }

        var result = new HashSet<string>();

        var queue = new Queue<string>();
        queue.Enqueue(str);

        var isFound = false;

        while (queue.Any()) {
            var size = queue.Count;

            for (int s = 0; s < size; s++) {
                var curStr = queue.Dequeue();

                for (int i = 0; i < curStr.Length; i++) {
                    if (curStr[i] == '(' || curStr[i] == ')') {
                        var removedStr = curStr.Remove(i, 1);
                        if (!curStrAndResult.ContainsKey(removedStr)) {
                            queue.Enqueue(removedStr);
                        }

                        if (isValid(removedStr)) {
                            isFound = true;
                            result.Add(removedStr);
                        }
                    }
                }
            }
            if (isFound) break;
        }

        return result.ToList();
    }

    private bool isValid(string str) {
        if (curStrAndResult.ContainsKey(str)) return curStrAndResult[str];

        var leftCount = 0;
        var rightCount = 0;

        var isValid = true;

        foreach (var c in str) {
            if (c == '(') leftCount++;
            else if (c == ')') rightCount++;

            if (rightCount > leftCount) {
                isValid = false;
                break;
            }
        }

        if (leftCount != rightCount) {
            isValid = false;
        }

        curStrAndResult[str] = isValid;
        return isValid;
    }
}