class Solution {
public:
static bool compare(vector<int> a , vector<int> b) {
	return  a[1] < b[1];
}


int findParent(int index , vector<int> &parent) {
	if (parent[index] == index)
		return index;
	return parent[index] = findParent(parent[index], parent);
}

void _union_(int i, int j , vector<int> &parent) {
	i = findParent(i, parent);
	j = findParent(j, parent);

	parent[i] = j;
}


int maxEvents(vector<vector<int> > arr) {

	int n = arr.size();

	sort(arr.begin(), arr.end(), compare);

	//find max
	int range = INT_MIN, ans = 0;
	for (auto x : arr)
		range = max(range, x[1]);
	range++;

	//create disjoint set
	vector<int> parent(range + 1, 0);
	for (int i = 0; i < range + 1; i++)
		parent[i] = i;


	for (int i = 0; i < n; i++) {
		auto event = arr[i];
		int start = event[0] , end = event[1];
		int allot = findParent(start, parent);
		if (allot > end)
			continue;
		ans++;
		_union_(allot, allot + 1, parent);

	}

	return ans;

}

};

