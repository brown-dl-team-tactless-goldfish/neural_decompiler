class Solution {
public:
    vector<int> assignTasks(vector<int>& s, vector<int>& t) {
        using pi = pair<int,int>;
        priority_queue<pi, vector<pi>, greater<pi> > busy;
        priority_queue<pi, vector<pi>, greater<pi> > good;
        for(int i = 0 ; i < s.size(); ++i)
            good.push({s[i],i});
        vector<int> res;
        queue<int> wait;
		/*Regular process*/
        for(int i = 0; i < t.size(); ++i){
            while(!busy.empty() && busy.top().first <= i){
                int idx = busy.top().second;
                good.push({s[idx],idx});
                busy.pop();
            }
            if(good.empty()){
                wait.push(i);
            }
            else{
                while(!wait.empty() && !good.empty()){
                    int idx = good.top().second;
                    int time = wait.front();
                    good.pop();
                    busy.push({i+t[time],idx});
                    wait.pop();
                    res.push_back(idx);                    
                }
                if(good.empty()){
                    wait.push(i);
                }
                else{
                    int idx = good.top().second;
                    good.pop();
                    busy.push({i+t[i],idx});
                    res.push_back(idx);                    
                }
            }
        }
		// if wait queue still remains
        while(!wait.empty()){
            int i = busy.top().first;
            while(i == busy.top().first){
                int idx = busy.top().second;
                busy.pop();
                good.push({s[idx],idx});    
            }
            while(!wait.empty() && !good.empty()){
                int idx = good.top().second;
                good.pop();
                int time = t[wait.front()];
                busy.push({i+time,idx});
                wait.pop();
                res.push_back(idx);    
            }
        }
        return res;
    }
};