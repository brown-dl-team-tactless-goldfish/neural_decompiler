class Solution {
public:
    string MAX(string a, string b) {
        if (a.length() != b.length()) {
            return a.length() > b.length() ? a : b;
        }

        for (int i = 0; i < a.length(); i++) {
            if (a[i] != b[i]) {
                if (a[i] - '0' > b[i] - '0') return a;
                return b;
            }
        }
        return a;
    }

    string largestNumber(vector<int>& cost, int target) {

        vector<vector<string>> dp(10, vector<string> (target + 1, "0"));
        for (int i = 0; i <= 9; i++) dp[i][0] = "";


        /*
            this problem is unbounded knapsack exactly
            dp[i][j] : we have digits from 1 to i, and the given target is j, what is the maximum value we can make?
            one option is to take the digit i, other option is to not take the digit i
        */
        for (int i = 1; i <= 9; i++) {
            for (int j = 1; j <= target; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= cost[i - 1]) {
                    if (dp[i][j - cost[i - 1]] != "0") dp[i][j] = MAX(dp[i][j], to_string(i) + dp[i][j - cost[i - 1]]);
                }
            }
        }

        return dp[9][target];


    }
};
