class Solution {
public:
  bool isSolvable(vector<string> &words, string result) {
    for (auto &s : words) if (s.size() > result.size()) return false;
    init(words, result);
    return dfs(0, 0, 0);
  }

  bool dfs(int i, int carry, int nextCheckDig) {
    while (nextCheckDig < numDig && i == totalNumInPlace[nextCheckDig]) {
      auto [val, newCarry] = eval(nextCheckDig, carry);
      if (val != 0) return false;
      nextCheckDig++;
      carry = newCarry;
    }
    if (i == n) {
      return carry == 0;
    }
    for (int x = 0; x < 10; x++) {
      if (assigned[x]) continue;
      if (x == 0 && leadings[i]) continue;
      assigned[x] = true;
      mp[i] = x;
      if (dfs(i + 1, carry, nextCheckDig)) return true;
      assigned[x] = false;
    }
    return false;
  }

  void init(vector<string> &words, string result) {
    numDig = result.size();
    expressions = vector(numDig, vector(10, 0));
    vector<pair<string, int>> vs; //{word, multiplier}  result has nagtive multipiler
    for (auto &s : words) vs.push_back({s, 1});
    vs.push_back({result, -1});
    for (auto &[s, multi] : vs) reverse(s.begin(), s.end());

    map<char, int> dic;
    for (int dig = 0; dig < numDig; dig++) {
      for (const auto &[s, multi] : vs) {
        if (s.size() <= dig) continue;
        char c = s[dig];
        if (!dic.count(c)) dic[c] = dic.size();
        expressions[dig][dic[c]] += multi;
      }
      totalNumInPlace.push_back(dic.size());
    }

    n = dic.size();
    mp.resize(n);
    for (const auto &[s, multi] : vs)
      if (s.size()>1) leadings[dic[s.back()]] = true;
  }

  // evaluate the ndigit of expression, return value and carry
  pair<int, int> eval(int dig, int carry) const {
    int sum = 0;
    for (int i = 0; i < n; i++) sum += expressions[dig][i] * mp[i];
    sum += carry;
    return {sum % 10, sum / 10};
  }

  vector<vector<int>> expressions; // one place, 10 place, 100 place...
  vector<int> mp;                  // num map
  vector<bool> leadings = vector<bool>(10, false);
  vector<bool> assigned = vector<bool>(10, false);
  vector<int> totalNumInPlace; // the numbers apears in one place; in one and 10 place; ....
  int n;
  int numDig;
};