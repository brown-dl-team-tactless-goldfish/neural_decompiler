/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
bool isVaild(char *word,char* pattern){
    int map[123]={0};
    int array[123]={0};
    int alen=strlen(word);
    int blen=strlen(pattern);
    if(alen!=blen){return false;}
    for(int i=0;i<alen;i++){
        if(map[word[i]]==0){
            if(array[pattern[i]]!=0){return false;}
            map[word[i]]=pattern[i];
            array[pattern[i]]++;
        }
        if(map[word[i]]!=pattern[i]){
            return false;
        }
    }
    return true;
}
char** findAndReplacePattern(char** words, int wordsSize, char* pattern, int* returnSize) {
    char **ret=(char**)malloc(wordsSize*sizeof(char*));
    *returnSize=0;
    for(int i=0;i<wordsSize;i++){
        if(isVaild(words[i],pattern)){
            ret[(*returnSize)++]=words[i];
        }
    }
    return ret;
}