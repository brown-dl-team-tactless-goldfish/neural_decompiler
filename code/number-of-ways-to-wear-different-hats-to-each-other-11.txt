class Solution {
public:
    
    void solve(vector<vector<int>>& hats,vector<int> hatVisited,int idx,int& res){
        
        int n=hats.size();
        // base case
//         for(int i=0;i<40;i++)
//         {
//             if(hatVisited[i]>1)
//                 return;
//         }
        if(idx>=n){
            if(idx==n) res++;
            return;
        }
        
        //Chooose which hat to wear
        for(int i=0;i<hats[idx].size();i++){
            int hat=hats[idx][i];
            if(hatVisited[hat]==0){
                hatVisited[hat]++;
                solve(hats,hatVisited,idx+1,res);
                
                //Backtrack
                hatVisited[hat]--;
            }
        }
    }
    
    int numberWays(vector<vector<int>>& hats) {
        vector<int> hatV(41,0);
        unordered_map<int,int> Count;
        int n=hats.size();
        int res=0;
        for(auto i:hats){
            for(int j:i){
                Count[j]++;
            }
            if(i.size()==0)
                return res;
        }
        int u=Count.size();
        cout<<u<<"\n";
        
        //pruning
        if(n>u)
            return res;
        
        solve(hats,hatV,0,res);
        return res;
    }
};