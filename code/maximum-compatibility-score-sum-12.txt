class Solution {
    void dfs(int i, int n, int m, vector<vector<int>>& students, vector<vector<int>>& mentors, int &ans) {
        if(i == n) {
            int cnt = 0;
            for(int j=0; j<n; j++) {
                for(int k=0; k<m; k++) cnt += students[j][k] == mentors[j][k];
            }
            ans = max(ans, cnt);
            return;
        }
        for(int j=i; j<n; j++) {
            swap(students[i],students[j]);
            dfs(i + 1, n, m, students, mentors, ans);
            swap(students[i],students[j]);
        }
    }
public:
    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
        int n = students.size(), m = students[0].size(), ans = 0;
        dfs(0, n, m, students, mentors, ans);
        return ans;
    }
};