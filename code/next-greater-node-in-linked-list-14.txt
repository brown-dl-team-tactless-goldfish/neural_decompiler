int *nextLargerNodes(struct ListNode *head, int *returnSize)
{
    int *result = NULL;
    int *stack = NULL;
    int numSize = 0;
    int count = 0; //counter:push num in stack
    int i = 0;
    int j = 0;
    struct ListNode *flag = head;

    //numSize: get numSize of linkList
    while (flag != NULL)
    {
        numSize++;
        flag = flag->next;
    }

    //*returnSize: set return value
    *returnSize = numSize;

    //init: initial flag after get numSize of linkList
    flag = head;

    //stack and result: use malloc() to get array space
    stack = (int *)malloc(numSize * sizeof(int));
    result = (int *)malloc(numSize * sizeof(int));

    //init: initial array
    for(i = 0; i < numSize; ++i){
        stack[i] = 0;
        result[i] = 0;
    }

    //2->1->5 -----> stack:[2,1,5]
    //push: set stack with linkList value
    while (flag != NULL)
    {
        stack[count] = flag->val;
        flag = flag->next;
        ++count;
    }

    //pop and calc: find is there any num bigger then stack[i] in every loop
    result[numSize-1] = 0;
    for(i = numSize-2; i >= 0; --i){
        for(j = i+1; j < numSize; ++j){
            if(stack[i] < stack[j])
            {
                result[i] = stack[j];
                break;
            }
        }
    }

    return result;
}