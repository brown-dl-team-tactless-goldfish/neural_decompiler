/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    const int nax = 5e4 + 1;
    bool validate(TreeNode* root, int left, int right, vector<bool>& vis) {
        if (root == nullptr) return true;
        vis[root->val] = false;
        if (root->val <= left || root->val >= right) return false;
        return validate(root->left, left, root->val, vis) & validate(root->right, root->val, right, vis);
    }
    TreeNode* canMerge(vector<TreeNode*>& trees) {
        int n = trees.size();
        vector<TreeNode*> roots(nax, nullptr);
        for (TreeNode* r : trees) {
            roots[r->val] = r;
        }
        vector<bool> notRoot(nax);
        vector<bool> vis(nax);
        for (TreeNode* r : trees) {
            vis[r->val] = true;
            if (r->left != nullptr) {
                vis[r->left->val] = true;
            }
            if (r->right != nullptr) {
                vis[r->right->val] = true;
            } 
        }
        for (TreeNode* r : trees) {
            if (r->left != nullptr) {
                int val = r->left->val;
                if (roots[val] != nullptr && !notRoot[val]) {
                    delete r->left;
                    r->left = roots[val];
                    notRoot[val] = true;
                }
            }
            if (r->right != nullptr) {
                int val = r->right->val;
                if (roots[val] != nullptr && !notRoot[val]) {
                    delete r->right;
                    r->right = roots[val];
                    notRoot[val] = true;
                } 
            }
        }
        int count = 0;
        TreeNode* root = nullptr;
        for (TreeNode* r : trees) {
            if (!notRoot[r->val]) {
                ++count;
                root = r;
            }
        }
        if (count > 1) return nullptr;
        if (!validate(root, -nax - 1, nax + 1, vis)) return nullptr;
        for (int i = 0; i < nax; i++) {
            if (vis[i]) return nullptr;
        }
        return root;
    }
};