class Solution {
public:
    class UnionSet{
        vector<int> a;
    public:
        UnionSet(int N){
            a.resize(N);
            for(int i=0;i<N;i++){
                a[i] = i;
            }
        }
        int find(int i){
            if(a[i]==i){
                return i;
            }
            else{
                return find(a[i]);
            }
        }
        void combine(int i, int j){
            int _i = find(i);
            int _j = find(j);
            if(_i == _j){
                return;
            }
            if(_i<_j){
                swap(_i,_j);
            }
            a[_i] = _j;
        }
    };
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int N = graph.size();
        UnionSet u(N);
        for(int i=0;i<graph.size();i++){
            for(int j = i + 1;j<graph[i].size();j++){
                if(graph[i][j]){
                    u.combine(i,j);
                }
            }
        }
        int count[N] = {0};
        for(int i = 0; i< N; i++){
            count[u.find(i)]++;
        }
        map<int,set<int>,greater<int>> records;
        for(auto x: initial){
            int c = count[u.find(x)];
            records[c].insert(x);
        }
        return *((records.begin()->second).begin());
        
    }
};