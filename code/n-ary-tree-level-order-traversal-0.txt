int maxDepth(struct Node* root) {
    if (!root) return 0;
    if (root->numChildren == 0) return 1;
    int max = 0;
    for (int i = 0; i < root->numChildren; i++) {
        int tmp = maxDepth(root->children[i]) + 1;
        max = tmp > max ? tmp : max;
    }
    return max;
}

void search(struct Node* root, int** arr, int ridx, int** returnColumnSizes) {
    if (!root) return;
    arr[ridx][(*returnColumnSizes)[ridx]] = root->val;
    (*returnColumnSizes)[ridx]++;
    for (int i = 0; i < root->numChildren; i++) {
        search(root->children[i], arr, ridx+1, returnColumnSizes);
    }
}

int** levelOrder(struct Node* root, int* returnSize, int** returnColumnSizes) {
    int depth = maxDepth(root);
    *returnSize = depth;
    *returnColumnSizes = (int*) calloc(depth, sizeof(int));
    int** arr = (int**) malloc(depth * sizeof(int*));
    for (int i = 0; i < depth; i++) {
        arr[i] = (int*) malloc(10000 * sizeof(int));
    }
    search(root, arr, 0, returnColumnSizes);
    return arr;
}