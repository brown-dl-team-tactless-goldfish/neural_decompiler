struct map{
    int val, time;
};

int binary_search(struct map *m[], int top, int targ){
    int l = 0, r = top, mid;
    while(l < r){
        mid = (l+r)>>1;
        if(m[mid]->val == targ) return mid;
        if(targ > m[mid]->val) l = mid+1;
        else r = mid-1;
    }
    return targ > m[l]->val ? l+1 : l;
}

void add_map(struct map *m[], int *top, int targ){
    int i = binary_search(m,*top,targ);
    if(i <= *top && m[i]->val == targ)
        m[i]->time++;
    else{
        for(int j=++(*top); j>i; j--)
            m[j] = m[j-1];
        m[i] = (struct map*)malloc(sizeof(struct map));
        m[i]->val = targ;  m[i]->time = 1;
    }
}

int subarraySum(int* nums, int size, int k){
    int now = 0, ans = 0, top = 0, j;
    struct map *m[size+1];
    m[0] = (struct map*)malloc(sizeof(struct map));
    m[0]->val = 0;  m[0]->time = 1;
    
    for(int i=0; i<size; i++){
        now += nums[i];
        j = binary_search(m,top,now-k);
        if(j<=top && m[j]->val == now-k) ans += m[j]->time;
        add_map(m, &top, now);
    }
    return ans;
}