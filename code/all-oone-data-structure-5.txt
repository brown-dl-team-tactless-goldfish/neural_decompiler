class AllOne {
public:
    /** Initialize your data structure here. */
    unordered_map<string, int> str_map;
    map<int, unordered_set<string> > count_map;
    // str_map stores the map of string is to countt
    // and count_map stores the map of count is to all the string having that particular count

    AllOne() {
        
    }
    
    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */
    void inc(string key) {
        if(str_map.find(key)!=str_map.end())
        {
            // means that elment already exits we just need to increase the count
            // now we have to first find the count of it 
            int present_count = str_map.find(key)->second;
            str_map[key]++;
            // now we have to update the element of the count_map
            auto itr = count_map[present_count].find(key);
            count_map[present_count].erase(itr);
            // insert the string element into the count+1 accordingly
            count_map[present_count+1].insert(key);
            if(count_map[present_count].size()==0)
            {
                // it means that particular count counts no element
                count_map.erase(present_count);
            }
        }
        else
        {
            // in other case we have to insert it
            str_map[key]++;
            // now since here the count is 1 so we will increse it in the count_map
            count_map[1].insert(key);
        }
    }
    
    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */
    void dec(string key) {
        // now we have to decreement the count
        int present_count = str_map.find(key)->second;
        if(present_count==1)
        {
            // it means this was the last element 
            // remove the entire element
            str_map.erase(key);
            auto itr = count_map[present_count].find(key);
            count_map[present_count].erase(itr);
            if(count_map[present_count].size()==0)
            {
                // it means that particular count counts no element
                count_map.erase(present_count);
            }
            
        }
        else
        {
            str_map[key]--;
            auto itr = count_map[present_count].find(key);
            count_map[present_count].erase(itr);
            if(count_map[present_count].size()==0)
            {
                // it means that particular count counts no element
                count_map.erase(present_count);
            }
            count_map[present_count-1].insert(key);
        }
        
        
    }
    
    /** Returns one of the keys with maximal value. */
    string getMaxKey() {
        // return the to elment accordingly
        if(count_map.size()>0)
        {
            return *(count_map.rbegin()->second).begin() ;
        }
        else
            return "";
        
    }
    
    /** Returns one of the keys with Minimal value. */
    string getMinKey() {
        if(count_map.size()>0)
        {
            return *(count_map.begin()->second).begin() ;
        }
        else
            return "";
    }
};

/**
 * Your AllOne object will be instantiated and called as such:
 * AllOne* obj = new AllOne();
 * obj->inc(key);
 * obj->dec(key);
 * string param_3 = obj->getMaxKey();
 * string param_4 = obj->getMinKey();
 */