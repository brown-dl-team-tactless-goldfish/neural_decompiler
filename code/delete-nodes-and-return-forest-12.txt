class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> result;
        unordered_set<int> dels(begin(to_delete), end(to_delete));
        getForest(root, dels, result);
        // Check Root
        if (dels.find(root->val) == dels.end()) {
            result.push_back(root);
        }
        return result;
    }
    
    TreeNode* getForest(TreeNode* cur, unordered_set<int> &dels, vector<TreeNode*> &res) {
        if (cur == NULL) {
            return NULL;
        }
        cur->left = getForest(cur->left, dels, res);
        cur->right = getForest(cur->right, dels, res);
        // While going up from leaves, DELETED NODE FOUND
        if (dels.find(cur->val) != dels.end()) {
            if (cur->left) {
                res.push_back(cur->left);
            }
            if (cur->right) {
                res.push_back(cur->right);
            }
            return NULL;
        }
        return cur;
    }
};