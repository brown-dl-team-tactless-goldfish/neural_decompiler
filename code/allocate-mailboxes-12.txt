class Solution {
    int n;
    vector<vector<int>> dp;
    vector<int> houses;
    
    int getDist(int i, int j) {
        int m = (i + j) / 2;
        int total = 0;
        for (; i <= j; ++i)
            total += abs(houses[i] - houses[m]);

        return total;
    }
    
    int helper(int n, int k) {
        if (dp[n][k] != INT_MAX) return dp[n][k];
        if (k == 0) return dp[n][k] = getDist(0, n);
        
        for (int i = n-1; i >= k-1; --i)
            dp[n][k] = min(dp[n][k], helper(i, k-1) + getDist(i+1, n));
        
        return dp[n][k];
    }
    
public:
    int minDistance(vector<int>& houses_, int k) {
        houses = houses_;
        sort(houses.begin(), houses.end());
        n = houses.size();
        dp = vector<vector<int>>(n, vector<int>(k, INT_MAX));
        
        return helper(n-1, k-1);
    }
};