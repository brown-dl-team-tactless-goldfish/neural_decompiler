class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int R = mat.size(), C = mat[0].size();
        vector<vector<int>> dp(R, vector<int>(C, 0));
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (i == 0 && j == 0)   dp[i][j] = mat[i][j];
                else if (i == 0)    dp[i][j] = dp[i][j - 1] + mat[i][j];
                else if (j == 0)    dp[i][j] = dp[i - 1][j] + mat[i][j];
                else dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + mat[i][j];
            }
       
        }
        vector<vector<int>> ans(R, vector<int>(C, 0));
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                int r1 = max(0, i - k), r2 = min(i + k, R - 1), c1 = max(0, j - k), c2 = min(j + k, C - 1);
                ans[i][j] = dp[r2][c2];
                if (r1 > 0)   ans[i][j] -= dp[r1 - 1][c2];
                if (c1 > 0)   ans[i][j] -= dp[r2][c1 - 1];
                if (r1 > 0 && c1 > 0)   ans[i][j] += dp[r1 - 1][c1 - 1]; 
            }
        }
        
        return ans;
    }
};