/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorder;
    void pre(TreeNode* node){
        if (node == NULL) return;
        pre(node->left);
        inorder.push_back(node->val);
        pre(node->right);
    }
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>> ans;
        pre(root);
        // for(auto i : inorder) cout<<i<<" ";
        // cout<<endl;
        
        for(auto i : queries){
            int index = lower_bound(inorder.begin(),inorder.end(),i) - inorder.begin();
            if(index < inorder.size() and inorder[index] == i) ans.push_back({i,i});
            else if(index == 0){
                ans.push_back({-1,inorder[index]});
                cout<<index<<" ";
            }
            else if(index > inorder.size() - 1){
                ans.push_back({inorder[inorder.size()-1],-1});
            }
            else if(index < inorder.size() and inorder[index] != i){
                // int upp = upper_bound(inorder.begin(),inorder.end(),i) - inorder.begin();
                ans.push_back({inorder[index-1],inorder[index]});                
            }
            
        }
        return ans;
    }
};