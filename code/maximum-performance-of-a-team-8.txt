class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<vector<int>> speed_performance;
        for(int i = 0 ; i < n ; i++){
            speed_performance.push_back({efficiency[i] , speed[i]});
        }
        sort(speed_performance.begin() , speed_performance.end());
        reverse(speed_performance.begin() , speed_performance.end());
        
        priority_queue<int , vector<int> , greater<int>> pq;
        long int res = 0;
        long int speed1 = 0;
        
        for(int i = 0 ; i < n ; i++){
            if(pq.size() == k){
                speed1 -= pq.top();
                pq.pop();
            }
            
            speed1 += speed_performance[i][1];
            pq.push(speed_performance[i][1]);
            res = max(res , speed_performance[i][0] * speed1);
        }
        return res % 1000000007;     
    }
};