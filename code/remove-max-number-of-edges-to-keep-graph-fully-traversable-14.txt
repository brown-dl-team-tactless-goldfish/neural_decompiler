class UnionFind{
    public:
    vector<int>p;
    int distinctComp=0;
    UnionFind(int n){
        p.resize(n);
        distinctComp = n;
        for(int i=0;i<n;i++)
            p[i]=i;
    }
    bool unite(int u,int v){
        int pu = findParent(u);
        int pv = findParent(v);
        if(pu == pv)
            return false;
      
        distinctComp--;
        p[pu]= v;
        return true;
    }
    
    int findParent(int x){
        if(p[x]!=x)
            p[x] = findParent(p[x]);
        return p[x];
    }
    bool united(){
        return distinctComp == 1;
    }
    
};



class Solution {
public:
    bool static comp(vector<int>&e1, vector<int>&e2){
        return e1[0]>e2[0];
    }
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        sort(edges.begin(),edges.end(),comp);
        UnionFind a(n);
        UnionFind b(n);
        int countEdge = 0;
        for(int i=0;i<edges.size();i++){
            int t = edges[i][0];
            int u = edges[i][1]-1;
            int v = edges[i][2]-1;
            if(t==3)
                countEdge+=a.unite(u,v)|b.unite(u,v);
            else if(t==2)
                countEdge+=a.unite(u,v);
            else if(t==1)
                countEdge+=b.unite(u,v);
            
        }
        
        return (b.united() && a.united()) ? edges.size()-countEdge:-1;
    }
};