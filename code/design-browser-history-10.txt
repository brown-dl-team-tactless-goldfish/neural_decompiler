struct node {
    char name[21];
    struct node *next;
    struct node *prev;
};

typedef struct {
    
    struct node *head;
    
} BrowserHistory;


BrowserHistory* browserHistoryCreate(char * homepage) {
    
    BrowserHistory *curr = malloc(sizeof(BrowserHistory));
    
    curr->head = malloc(sizeof(struct node));
    
    curr->head->next = NULL;
    curr->head->prev = NULL;
    
    strcpy(curr->head->name, homepage);
    
    return curr;
    
}

void browserHistoryVisit(BrowserHistory* obj, char * url) {
    
    struct node *temp;
    struct node *next;
    
    temp = malloc(sizeof(struct node));
    
    temp->next = NULL;
    temp->prev = obj->head;
    next = obj->head->next;
    obj->head->next = temp;
    strcpy(temp->name, url);
    obj->head = temp;
    
    temp = next;
    while(next) {
        
        temp = next;
        next = next->next;
        free(temp);
    }
  
}

char * browserHistoryBack(BrowserHistory* obj, int steps) {
    
    struct node *temp;
    char arr[21];
    temp = obj->head;
    
    while(temp != NULL && steps > 0 && temp->prev != NULL) {
        
        temp = temp->prev;
        steps--;
        
    }
    
    obj->head = temp;
    return temp->name;
}

char * browserHistoryForward(BrowserHistory* obj, int steps) {
    
    struct node *temp;
    char arr[21];
    temp = obj->head;
    
    while(temp != NULL && steps > 0 && temp->next != NULL) {
        
        temp = temp->next;
        steps--;
    }
    
    obj->head = temp;
    return temp->name;
    

  
}

void browserHistoryFree(BrowserHistory* obj) {
    
    struct node *next = obj->head->next;
    struct node *prev = obj->head;
    struct node *tmp;
    while(next != NULL) {
        tmp = next;
        next = next->next;
        free(tmp);
        
    }
    
    while(prev != NULL) {
        tmp = prev;
        prev= prev->prev;
        free(tmp);
    }
    
    free(obj);
    
}