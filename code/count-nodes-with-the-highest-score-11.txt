class Solution {
    vector<long long> dp;
    int solve(unordered_map<int, vector<int>>& tree, int parent){ // dp[i] : no of nodes that are below node i (including i).
        int amt=1;
        for(auto i: tree[parent]) //i: int
            amt+=solve(tree, i);
        return dp[parent]=amt;
    }
    
public:
    int countHighestScoreNodes(vector<int>& parents) {
        int n = parents.size();
        int ans=0, freq=0;
        long long maxCount=0;
        unordered_map<int, vector<int>> tree;
        
        dp=vector<long long>(n, 0);
        
        for(int i=0; i<n; i++){ //creating the tree
            if(parents[i]==-1)
                continue;
            tree[parents[i]].push_back(i);
        }
        
        solve(tree, 0); // will create dp[]
       
        if(tree[0].size()==2){   // calculating product for node 0
            maxCount = dp[tree[0][1]]*dp[tree[0][0]];   
            freq=1;
            ans=1;
        }else if(tree[0].size()==1){
            maxCount = dp[tree[0][0]];
            freq=1;
            ans=1;
        }else{
            maxCount = 1;
            freq=1;
            ans=1;
        }
        
        for(int i=1; i<n; i++){
            long long topCount=dp[0]-dp[i];
            long long leftCount, rightCount;
            
            if(tree[i].size()==2){
                leftCount=dp[tree[i][0]];
                rightCount=dp[tree[i][1]];
            }
            else if(tree[i].size()==1){
                leftCount = dp[tree[i][0]];
                rightCount=1;
            }
            else if(tree[i].size()==0){
                leftCount=1;
                rightCount=1;
            }
            
            if(maxCount == leftCount*rightCount*topCount){
                freq++;
                ans = max(ans, freq);
            }
            else if(maxCount < leftCount*rightCount*topCount){
                maxCount = leftCount*rightCount*topCount;
                freq = 1;
                ans = 1;  
            }
        }
        return ans;
    }
};