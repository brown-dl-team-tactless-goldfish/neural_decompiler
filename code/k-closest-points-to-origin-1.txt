
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
double calculate(int x, int y){
    return sqrt(pow(x,2) + pow(y,2));
}

int comp(const void *p1, const void *p2){
    const double *new_p1 = *(double**)p1;
    const double *new_p2 = *(double**)p2;
    
    if (new_p1[0] - new_p2[0] > 0)
        return 1;
    else
        return -1;
}

int** kClosest(int** points, int pointsSize, int* pointsColSize, int K, int* returnSize, int** returnColumnSizes){
    double **values = (double**)malloc(sizeof(double*)*pointsSize);
    if (values == NULL)
        return NULL;
    for (int i=0; i<pointsSize; i++){
        values[i] = (double*)malloc(sizeof(double)*2);
        values[i][0] = 0;
        values[i][1] = 0;
    }
    
    //we save every euclidean length to values[i][0] and the pos in points in values[i][1]
    double t;
    for (int i=0; i<pointsSize; i++){
        t = calculate(points[i][0], points[i][1]);
        values[i][0] = t;
        values[i][1] = i;
    }

    //sort values
    qsort(values, pointsSize, sizeof(values[0]), comp);
    
    //move to result
    int **res = (int**)malloc(sizeof(int*)*K);
    if (res == NULL)
        return NULL;
    (*returnColumnSizes) = (int*)malloc(sizeof(int)*K);
    for (int i=0; i<K; i++){
        res[i] = (int*)malloc(sizeof(int)*2);
        if (res[0] == NULL)
            return NULL;
        (*returnColumnSizes)[i] = 2;
        res[i][0] = points[(int)values[i][1]][0];
        res[i][1] = points[(int)values[i][1]][1];
    }
    *returnSize = K;
    return res;
}