    public class Solution
    {
        private struct DpData
        {
            public readonly int PrevIdx;
            public readonly int CurrIdx;
            public readonly long Sum;
            public readonly int Length;

            public DpData(int prevIdx, int currIdx, long sum, int length)
            {
                PrevIdx = prevIdx;
                CurrIdx = currIdx;
                Sum = sum;
                Length = length;
            }

            public override string ToString() => $"Prev: {PrevIdx}; Curr: {CurrIdx}; Sum: {Sum}; Len: {Length}";
        }
        public string LargestMultipleOfThree(int[] digits)
        {
            int[] counOfDigits = new int[10];
            foreach (var d in digits)
            {
                counOfDigits[d]++;
            }

            int idx = 0;
            for (int i = 9; i >= 0; i--)
            {
                for (int j = 0; j < counOfDigits[i]; j++)
                {
                    digits[idx++] = i;
                }
            }


            DpData[,] dp = new DpData[digits.Length,3];
            int mod = 0;
            for (int i = 0; i < digits.Length; i++)
            {
                mod = digits[i] % 3;

                if (i == 0)
                {
                    dp[i, 0] = new DpData(-1, -1, 0,0);
                    dp[i, 1] = new DpData(-1, -1, 0, 0);
                    dp[i, 2] = new DpData(-1, -1, 0, 0);

                    dp[i, mod] = new DpData(-1, i, digits[i], 1);
                    continue;
                }

                for (int j = 0; j < 3; j++)
                {
                    dp[i, j] = dp[i - 1, j];

                    var prevMod = (j - mod + 3) % 3;
                    if (prevMod == 0 || dp[i - 1, prevMod].Length > 0)
                    {
                        if (dp[i - 1, prevMod].Length + 1 > dp[i, j].Length)
                        {
                            dp[i, j] = new DpData(
                                dp[i - 1, prevMod].CurrIdx, 
                                i, 
                                dp[i - 1, prevMod].Sum + digits[i], 
                                dp[i - 1, prevMod].Length + 1
                                );
                        }
                        else
                        {
                            if (dp[i - 1, prevMod].Length + 1 == dp[i, j].Length)
                            {
                                if (dp[i - 1, prevMod].Sum + digits[i] > dp[i, j].Sum)
                                {
                                    dp[i, j] = new DpData(
                                        dp[i - 1, prevMod].CurrIdx,
                                        i,
                                        dp[i - 1, prevMod].Sum + digits[i],
                                        dp[i - 1, prevMod].Length + 1
                                    );
                                }
                            }
                        }
                    }
                }
            }

            if (dp[digits.Length - 1, 0].CurrIdx < 0)
            {
                return string.Empty;
            }

            StringBuilder sb = new StringBuilder();
            mod = 0;
            idx = digits.Length - 1;
            Stack<char> stack = new Stack<char>();

            while (idx != -1)
            {
                var d = digits[dp[idx, mod].CurrIdx];
                stack.Push((char)(d + '0'));
                idx = dp[idx, mod].PrevIdx;
                mod = (mod - (d % 3) + 3) % 3;
            }

            bool leadingZeroes = true;
            while (stack.Count > 0)
            {
                var c = stack.Pop();
                if (c != '0')
                {
                    leadingZeroes = false;
                }
                else
                {
                    if (stack.Count == 0)
                    {
                        leadingZeroes = false;
                    }
                }

                if (leadingZeroes && c == '0')
                {
                    continue;
                }

                sb.Append(c);
            }

            return sb.ToString();
        }
    }