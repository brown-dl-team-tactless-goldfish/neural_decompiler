class Solution {
public:
    int smallestChair(vector<vector<int>>& v, int idx) {
        
            int n=v.size(),num=0,val=0;
            int fir=v[idx][0],sec=v[idx][1];
            vector<int> res(n);
            priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
            sort(v.begin(),v.end());
            
            for(int i=0;i<n;i++){
                    
                while(!pq.empty() && v[i][0]>=pq.top().first){
                        val=pq.top().second;
                        res[val]=0;
                        num=min(num,val);
                        pq.pop();
                }
                  
                while(res[num]==1)num++;
                    
                pq.push({v[i][1],num});
                res[num]=1;
                 
                if(v[i][0]==fir && v[i][1]==sec)return num;
                num++;
            }
            
     return num;       
    }
};