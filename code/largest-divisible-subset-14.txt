class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if (nums.size() == 1)return nums;
        
        sort(nums.begin(), nums.end());
		//dp will save the max length that we can get for nums[i]
        vector<int> result, dp(nums.size(), 1);
		//the max length of subset that we can get 
        int max_sub = 0;
		//save the highest value of the max length of subset that we can get
        int prev;

        for (int i = 1; i < nums.size(); i++) {
            for (int j = 0; j < i; j++) {
			//if satisfies the requirements update dp[i] (so we can get the max lenght of subset for the current number)
                if (nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1)
                    dp[i] = dp[j] + 1;
            }
			//get the max lenght of subset from dp[0] to dp[i] and save the nums[i] value
            if (max_sub < dp[i]) {
                max_sub = dp[i];
                prev = nums[i];
            }
        }

        while (max_sub > 0) {
            for (int i = 0; i < dp.size(); i++) {
				//get dp[i] == max_sub and nums[i] % (lowest number we have in result) == 0
                if (dp[i] == max_sub && prev % nums[i] == 0) {
					//save it in result
                    result.push_back(nums[i]);
					//since nums is sorted and each dp[i] checked only left nums of nums[i]
					//nums[i] is always smallest number that we have in result
                    prev = nums[i];
                    break;
                }
            }
            max_sub--;
        }

        return result;
    }
};