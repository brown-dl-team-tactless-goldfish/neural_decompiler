class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& meetings) {
            vector<int> dp(n, 0);

            auto compare_func = [&](auto& a, auto& b) {
                if(a[1] == b[1]) {
                    return a[2] > b[2];
                }
                return a[1] > b[1];
            };
            priority_queue<vector<long long>, vector<vector<long long>>, decltype(compare_func)> minheap(compare_func);   

            sort(begin(meetings), end(meetings));
            set<int> available_rooms;
            for(int i=0;i<n;i++) {
                available_rooms.insert(i);
            }
            for(auto& meeting: meetings) {
                long long start = meeting[0];
                long long end = meeting[1];

                while(minheap.size()!=0 && minheap.top()[1]<=start) {
                    auto& ele = minheap.top();
                    available_rooms.insert(ele[2]);
                    minheap.pop();
                }

                if(available_rooms.size()!=0) {
                    auto it = begin(available_rooms);
                    dp[*it]++;
                    minheap.push({start, end, *it});
                    available_rooms.erase(*it);
                }else {

                    long long duration = end-start;
                    auto ele = minheap.top();
                    minheap.pop();
                    int room_id = ele[2];
                    ele[1] += duration;
                    dp[room_id] += 1;
                    minheap.push(ele);
                }

            }

            int res_index = 0;
            int max_count = 0;
            for(int i=0;i<dp.size();i++) {
                if(dp[i] > max_count) {
                    res_index = i;
                    max_count = dp[i];
                }
            }

            return res_index;
    }
};