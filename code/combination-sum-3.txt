/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *columnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#define SIZE 125
int** combinationSum(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {
    int** ret=(int**)malloc(SIZE*sizeof(int*));
    int count=0;
    int tamp_returnSize=0;
    int** tamp_columnSizes=(int**)malloc(sizeof(int*));
    columnSizes[0]=(int*)malloc(SIZE*sizeof(int));
    if(candidatesSize<1||target<0){
        *returnSize=0;
        free(ret);
        free(tamp_columnSizes);
        return NULL;
    }
    for(int i=0;i<candidatesSize;i++){
        if(target-candidates[i]==0){
            ret[count]=(int*)malloc(sizeof(int));
            columnSizes[0][count]=1;
            ret[count][0]=candidates[i];
            count++;
            continue;
        }
        int** tamp=combinationSum(&candidates[i], candidatesSize-i, target-candidates[i], tamp_columnSizes, &tamp_returnSize);
        for(int k=0;k<tamp_returnSize;k++){
            ret[count]=(int*)malloc((tamp_columnSizes[0][k]+1)*sizeof(int));
            columnSizes[0][count]=tamp_columnSizes[0][k]+1;
            ret[count][0]=candidates[i];
            for(int j=0;j<tamp_columnSizes[0][k];j++){
                ret[count][j+1]=tamp[k][j];
            }
            count++;
        }
        free(tamp);
    }
    free(tamp_columnSizes);
    *returnSize=count;
    return ret;
}