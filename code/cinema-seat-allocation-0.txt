int cmp(const void* a, const void* b){
    int* A = *(int**)a;
    int* B = *(int**)b;
    if(A[0] == B[0])
        return A[1] - B[1];
    
    return A[0] - B[0];
}
int maxNumberOfFamilies(int n, int** reservedSeats, int reservedSeatsSize, int* reservedSeatsColSize){
    qsort(reservedSeats, reservedSeatsSize, sizeof(int*), cmp);
    int hash[256] = {0};
    hash[0] = 2;
    int ans = 2* n;
    for(int i = 1; i < 256; i++){
        int val = i;
        if((val & 0x0f) == 0)
            hash[i] = 1;
        else if((val & 0xf0) == 0)
            hash[i] = 1;
        else if((val & 0x3C) == 0 )
            hash[i] = 1;
    }
    int val = 0;
    int col = reservedSeats[0][1];
    if((col != 1) && (col != 10))
        val |= (1 << (col-2)); 
    for(int i = 1; i < reservedSeatsSize; i++){
        col = reservedSeats[i][1];
        if(reservedSeats[i][0] == reservedSeats[i-1][0]){
            if((col != 1) && (col != 10))
                val |= (1 << (col-2)); 
        }        
        else{
            ans -= (2 - hash[val]);
            val = 0;
            if((col != 1) && (col != 10))
                val |= (1 << (col-2)); 
        }
    }
    ans -= (2 - hash[val]);
    return ans;

}