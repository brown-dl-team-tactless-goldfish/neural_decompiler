HashSet<int>[] prereqToCourse;
public IList<bool> CheckIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {
    prereqToCourse = new HashSet<int>[n];
    var g = new List<int>[n];
    for(var i = 0; i < n; i++) g[i] = new List<int>();
    for(var i = 0; i < prerequisites.Length; i++)
        g[prerequisites[i][0]].Add(prerequisites[i][1]);

    // build perequisite to courses map
    var visited = new bool[n];
    for(var i = 0; i < n; i++)
        dfs(g, i, visited, new List<int>() { i });

    //run queries
    var result = new List<bool>();
    foreach(var query in queries) {
        result.Add(prereqToCourse[query[0]] != null && prereqToCourse[query[0]].Contains(query[1]));
    }
    return result;
}

void dfs(List<int>[] g, int i,bool[] visited, List<int> courses) {
    if (visited[i]) return;
    foreach(var item in g[i]) {
        foreach(var c in courses) {
            if (prereqToCourse[c] == null) prereqToCourse[c] = new HashSet<int>();
            prereqToCourse[c].Add(item);
            if (prereqToCourse[item] != null)
                prereqToCourse[c].UnionWith(prereqToCourse[item]);
        }
        courses.Add(item);
        dfs(g, item, visited, courses);
        courses.RemoveAt(courses.Count - 1);
    }
    visited[i] = true;
}