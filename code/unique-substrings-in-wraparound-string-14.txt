class Solution {
public:
	int findSubstringInWraproundString(string p) {
		if(p.empty()) return 0;
		vector<int> dp(26); //max len of substring starting with that character 
		dp[p.back()-'a']=1;
		int len=1;
		int n=p.size();
		for(int i=n-2;i>=0;i--)
		{
			if(p[i]-p[i+1]==-1 || (p[i]=='z' && p[i+1]=='a'))
			{
				len++;
				dp[p[i]-'a']=max(dp[p[i]-'a'], len);
			}
			else
			{
				dp[p[i]-'a']=max(dp[p[i]-'a'], 1);
				len=1;
			}
		}

		int ans=0;
		for(auto& x:dp)
		{
			ans+=x;
		}
		return ans;  
	}
};