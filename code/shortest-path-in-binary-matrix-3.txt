int shortestPathBinaryMatrix(int** grid, int gridSize, int* gridColSize){
    int ret=1,num=2;
    int queue[20000][2]={0,}, q_index=0,odd=0,even=10000;
    int m[8]={1,0,-1,0,1,1,-1,-1},n[8]={0,1,0,-1,1,-1,1,-1},x=0,y=0;
    
    bool continued=true;
    if(grid[0][0] || grid[gridSize-1][* gridColSize-1])return -1;
    
    queue[0][0]=0 , queue[0][1]=0;
    q_index=1;  // starting point
    
    while(continued){
        continued=false;
        if(x == gridSize-1 && y == *gridColSize-1){return ret;}
        ret++;
        int idx=0;
        for(int start=odd ; start<q_index+odd;start++){
            x = queue[start][0], y = queue[start][1];
            if(x== gridSize && y==*gridColSize-1)return ret;
            for(int j=0;j<8;j++){

                if(x+m[j]<gridSize && x+m[j]>=0 &&  y+n[j] <*gridColSize && y+n[j]>=0 && grid[x+m[j]][y+n[j]]==0){
                    queue[even+idx][0] = x+m[j];
                    queue[even+idx][1] = y+n[j];
                    idx++;
                    grid[x+m[j]][y+n[j]] = num+1;
                    continued=true;
                    if(x+m[j] == gridSize-1 && y+n[j] == *gridColSize-1){return ret;}
                }
            }                    
        }
        q_index = idx;
        even=(even==0)?10000:0;
        odd = (odd==0)?10000:0;

        num+=1;
    }
    return grid[gridSize-1][* gridColSize-1]==0?-1:ret ;
}