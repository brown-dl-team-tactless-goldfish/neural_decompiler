class Solution {
public:
    int fin;
    int mod=1e9+7;
    vector<int>per[100];
    int dp[10000][50];
    int recur(int bit,int i)
    { 
        //If all persons are done 
        if(i==41)  //We have checked for each hat
        {
            if(bit==fin)
            return 1;
            else
            return 0;
        }
        int ans=0;
        if(dp[bit][i]!=-1)
            return dp[bit][i];
        
            for(auto j:per[i])
            {
                //per[i] represent what all hats can be assigned to person 
                if((bit&(1<<j))==0) //If this person is not assigned hat yet we can assign him hat
                    ans=(ans%mod+((recur(bit|(1<<j),i+1))%mod))%mod; //i th hat has been assigned so move to i+1 hat
                
            }
        ans+=(recur(bit,i+1)%mod);
        dp[bit][i]=(ans%mod);
        return (ans%mod);
    }
    int numberWays(vector<vector<int>>& hats) {
        //Bit Masking
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<hats.size();i++)
        {
        
            for(int j=0;j<hats[i].size();j++)
                per[hats[i][j]].push_back(i);
        }
        fin=(1<<(hats.size()))-1; //Represents which person is assigned an hat
        cout<<fin<<"\n";
         return recur(0,0);
        // return 1;
    }
};