/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *columnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** ret;
void order(struct TreeNode* root, int** columnSizes, int* returnSize,int depth){
    if(root==NULL){
        return;
    }
    if(*returnSize<depth){
        *returnSize=depth;
    }
    ret[depth-1][columnSizes[0][depth-1]++]=root->val;
    order(root->left,columnSizes,returnSize,depth+1);
    order(root->right,columnSizes,returnSize,depth+1);
}
void swap(int* array,int size){
    int temp=size/2;
    for(int i=0;i<temp;i++){
        array[i]^=array[size-1-i];
        array[size-1-i]^=array[i];
        array[i]^=array[size-1-i];
    }
}
int** zigzagLevelOrder(struct TreeNode* root, int** columnSizes, int* returnSize) {
    int size=130;
    ret=(int**)malloc(size*sizeof(int*));
    for(int i=0;i<size;i++){
        ret[i]=(int*)calloc(size,sizeof(int));
    }
    *returnSize=0;
    columnSizes[0]=(int*)calloc(size,sizeof(int));
    order(root,columnSizes,returnSize,1);
    for(int i=1;i<*returnSize;i++){
        if(i%2!=0){
            swap(ret[i],columnSizes[0][i]);
        }
    }
    return ret;
}