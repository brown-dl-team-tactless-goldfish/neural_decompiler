class Solution {
    string dfs(int idx, vector<vector<string>> &dp, vector<int>& cost, int target)
    {
        if(target == 0)
            return "";
        if(idx >= cost.size() || target < 0)
            return "0";
        if(dp[idx][target] != "-1")
            return dp[idx][target];
        string val1, val2;
        val1 = dfs(0, dp, cost, target-cost[idx]);
        val2 = dfs(idx+1, dp, cost, target);
        if(val1 == "0")
        {
            return dp[idx][target] = val2;
        }
        else if(val2 == "0")
            return dp[idx][target] = to_string(idx+1) + val1;
        else
        {
            val1 = to_string(idx+1) + val1;
            if(val1.size() == val2.size())
            {
                return dp[idx][target] = max(val1,val2);
            }
            else if(val1.size() > val2.size())
                return dp[idx][target] = val1;
        }
        return dp[idx][target] = val2;
    }
        
public:
    string largestNumber(vector<int>& cost, int target) {
        int n = cost.size();
        vector<vector<string>> dp(n, vector<string> (target+1, "-1"));
        return dfs(0, dp, cost, target);
    }
};