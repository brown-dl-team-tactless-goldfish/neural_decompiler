int threeSumMulti(int* arr, int arrSize, int target){
    int mod  = 1e9 + 7 ;
    int* hash = calloc(101, sizeof(int) ) ;
    long long ans = 0; 
    int map_cn = 0; 
    for(int i = 0; i < arrSize; i++){
        hash[arr[i]]++ ;
        if(hash[arr[i]] == 1 )
            map_cn++ ;
    }

    int** map = malloc(map_cn * sizeof(int*)) ;
    int m_idx = 0 ;
    for(int i = 0; i < 101; i++){
        if( hash[i] ){
            map[m_idx] = malloc(2 * sizeof(int) ) ;
            map[m_idx][0] = i ;
            map[m_idx][1] = hash[i] ;
            m_idx++ ;
        }
    }
    //x <= y <= z
    int x, y, z ;
    for(int i = 0; i < map_cn; i++){
        x = map[i][0] ;
        for(int j = 0; j < map_cn; j++){
            y = map[j][0] ;
            if(x > y)
                continue ;
            z = target - x - y ;
            if(z < 0 || z < y)
                break ; 

            if(z > 100 || hash[z] == 0)
                continue ;
            
            if(x == y && y == z ){
                if(hash[z] >=3 )
                    ans += (long long)hash[z] * (hash[z]-1)*(hash[z]-2) / 6 ;
            }
            else if(x == y ){
                if(hash[x] >=2)
                ans +=  hash[z] * hash[x] * (hash[x] - 1) / 2 ;
            }
            else if(y == z){
                if(hash[y] >=2)
                ans +=  hash[x] * hash[y] * (hash[y] - 1) / 2 ;
            }
            else
                ans += hash[x] * hash[y] * hash[z] ;
             ans %= mod ;
        }
    }
    free(hash) ;
    for(int i = 0; i < map_cn; i++){
        free(map[i]) ;
    }
    free(map) ;
    return ans ;
}