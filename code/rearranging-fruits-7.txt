long long minCost(vector<int>& basket1, vector<int>& basket2) {
    unordered_map<int, int>cnt;
    for (int f : basket1) cnt[f]++;
    for (int f : basket2) cnt[f]--;
    int mn = min(*min_element(basket1.begin(), basket1.end()),
                    *min_element(basket2.begin(), basket2.end()));
    vector<int>e;
    for (const pair<int, int>& it : cnt) {
        if (it.second % 2) return -1;
        for (int i = 0; i < abs(it.second) / 2; i++)
            e.push_back(it.first);
    }
    nth_element(e.begin(), e.begin() + e.size() / 2, e.end());
    long long res = 0;
    for (int i = 0; i < e.size() / 2; i++)
        res += min(e[i], mn * 2);
    return res;
}