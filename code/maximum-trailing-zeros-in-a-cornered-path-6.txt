class Solution {
public:
    pair<int,int> check(int num){
        int a=0,b=0;
        while(num%2 == 0){
            num = num/2;
            a++;
        }
        while(num%5 == 0){
            num = num/5;
            b++;
        }
        return {a,b};
    }
    int maxTrailingZeros(vector<vector<int>>& grid) {
        int m = grid.size(),n = grid[0].size(),p1,p2;
        vector<vector<vector<int>>> v(m, vector<vector<int>>(n, vector<int>(4,0)));
        for(int j=0;j<n;j++){// top to down
            for(int i=0;i<m;i++){
                pair<int,int> p = check(grid[i][j]);
                if(i==0){
                    p1 = v[i][j][0] = p.first;
                    p2 = v[i][j][1] = p.second;
                }
                else{
                    p1 = v[i][j][0] = p1+p.first;
                    p2 = v[i][j][1] = p2+p.second;
                }
            }
        }
        for(int i=0;i<m;i++){// left to right
            for(int j=0;j<n;j++){
                pair<int,int> p = check(grid[i][j]);
                if(j==0){
                    p1 = v[i][j][2] = p.first;
                    p2 = v[i][j][3] = p.second;
                }
                else{
                    p1 = v[i][j][2] = p1+p.first;
                    p2 = v[i][j][3] = p2+p.second;
                }
            }
        }
        int ans = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int a,b;
                if(j-1>=0){
                    a = v[i][j][0] + v[i][j-1][2];
                    b = v[i][j][1] + v[i][j-1][3];
                    ans = max(ans,min(a,b));
                }
                if(j+1<n){
                    a = v[i][j][0] + (v[i][n-1][2] - v[i][j][2]);
                    b = v[i][j][1] + (v[i][n-1][3] - v[i][j][3]);
                    ans = max(ans,min(a,b));
                }
                ans = max(ans,min(v[i][j][0],v[i][j][1]));
                if(i-1 >= 0)
                    ans = max(ans,min(v[m-1][j][0]-v[i-1][j][0],v[m-1][j][1]-v[i-1][j][1]));
                else
                    ans = max(ans,min(v[m-1][j][0],v[m-1][j][1]));
                if(j-1>=0 && i-1>=0){
                    a = (v[m-1][j][0]-v[i-1][j][0]) + v[i][j-1][2];
                    b = (v[m-1][j][1]-v[i-1][j][1]) + v[i][j-1][3];
                    ans = max(ans,min(a,b));
                }
                else if(j-1>=0){
                    a = (v[m-1][j][0]) + v[i][j-1][2];
                    b = (v[m-1][j][1]) + v[i][j-1][3];
                    ans = max(ans,min(a,b));
                }
                if(j+1<n && i-1>=0){
                    a = (v[m-1][j][0]-v[i-1][j][0]) + (v[i][n-1][2] - v[i][j][2]);
                    b = (v[m-1][j][1]-v[i-1][j][1]) + (v[i][n-1][3] - v[i][j][3]);
                    ans = max(ans,min(a,b));
                }
                else if(j+1<n){
                    a = (v[m-1][j][0]) + (v[i][n-1][2] - v[i][j][2]);
                    b = (v[m-1][j][1]) + (v[i][n-1][3] - v[i][j][3]);
                    ans = max(ans,min(a,b));
                }
            }
        }
        return ans;
    }
};