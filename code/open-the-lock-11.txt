int Solution::openLock(vector<string>& deadends, string target)
{	
    int depth = 0;
	bool M[10000] = {false,};
	queue<string> Q;
	
	for (int i = 0; i < deadends.size(); i++) 
		M[atoi(deadends[i].c_str())] = true;
	if (M[0] == false) { M[0] = true; Q.push("0000"); 
	
	while(!Q.empty()) {
		for (int cnt = Q.size(); cnt > 0; cnt--) {
			string s = Q.front(); Q.pop();
			
			if (s == target) return depth;
			
			for (int i = 0; i < 4; i++) {
	            char c = s[i];
				if (s[i] == '9') s[i] = '0'; else s[i]++;
				int n = atoi(s.c_str()); if (M[n] == false) { M[n] = true; Q.push(s); }
	            s[i] = c;
				if (s[i] == '0') s[i] = '9'; else s[i]--;
				n = atoi(s.c_str()); if (M[n] == false) { M[n] = true; Q.push(s); }
	            s[i] = c;
			}
		}
		depth++;
	}
 	
	return -1;	
}