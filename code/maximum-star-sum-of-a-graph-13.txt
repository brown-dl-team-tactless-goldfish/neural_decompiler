class Solution {
public:
    
    // Intuition:
    // Step 1: Create a adjacency list. Insert all the edges in the adjacency list
    // Step 2: Take a max heap(priority_queue) and insert all elements of vals vector in it.
    // Step 3: Now calculate the sum of top k elements in priority_queue and check if sum is maximum or not.
    int maxStarSum(vector<int>& vals, vector<vector<int>>& edges, int k) {
        int V = vals.size();
        int maxm = INT_MIN;
        vector<int> adj[V];
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
        for(int i=0;i<V;i++)
        {
            priority_queue<int> pq;
            
            for(auto it:adj[i]){
                
                pq.push(vals[it]);
                
            }
            int c = 0;
            int curr_sum = 0, prev_sum=0;
            while(!pq.empty()){
                if(c>=k) break;
                if(prev_sum + pq.top() >= curr_sum){
                    curr_sum = prev_sum + pq.top();
                    prev_sum = curr_sum;
                }
                pq.pop();
                c++;
            }
            curr_sum += vals[i];
            maxm = max(maxm, curr_sum);
            
        }
        return maxm;
    }
};