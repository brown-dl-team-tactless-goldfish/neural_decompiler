typedef struct ride {
    ride(int _point, uint64_t _earning, bool dropoff, ride* _start): point{_point}, earning{_earning}, isDropoff{dropoff}, start{_start}, curEarnings{0} {}
    int point;
    uint64_t earning;
    bool isDropoff;
    ride* start;
    uint64_t curEarnings;
} ride_t;

class Solution {
public:
    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {
        std::vector<ride_t*> m;
        for(const auto &r: rides) {
            ride_t *ride1 = new ride(r[0], 0, false, nullptr);
            ride_t *ride2 = new ride(r[1], r[1]-r[0]+r[2], true, ride1);
            m.emplace_back(ride1);
            m.emplace_back(ride2);
        }
        
        auto Cmp = [](ride_t *a, ride_t *b) {return a->point == b->point ? a->isDropoff > b->isDropoff : a->point < b->point;};
        
        std::sort(m.begin(), m.end(), Cmp);
        
        uint64_t earnings{0};

        for(auto ride: m) {
            if (ride->isDropoff) {
                earnings = ride->curEarnings = std::max(earnings, ride->earning + ride->start->curEarnings);
            } else {
                ride->curEarnings = earnings;
            }
        }
        
        return earnings;
    }
};