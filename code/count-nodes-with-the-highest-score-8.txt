class Solution {
public:
    int countHighestScoreNodes(vector<int>& parents) {
        vector<vector<int>> adj(parents.size());
        for(int i = 0; i < parents.size(); i++) {
            if(parents[i] != -1)
                adj[parents[i]].push_back(i);
        }
        vector<vector<long long int>> sub(parents.size(), {0,0});
        long long int total = dfs(adj, 0, sub);
        long long int ans = 0;
        int count = 0;
        for(auto i: sub) {
            long long int temp = 0;
            temp = max(i[1] ,max(total-i[0]-1, (total-i[0]-1)* i[1]));
            
            if(temp == ans) {
                count++;
            } else if(temp > ans) {
                count = 1;
                ans = temp;
            }
            
        }
        return count;
        
    }
    
    int dfs(vector<vector<int>> &adj, int i, vector<vector<long long int>> &sub) {
        if(adj[i].size() == 0) {
            return 1;
        }
        
        long long int left = 0, right = 0;
        
        if(adj[i].size() > 0)
            left = dfs(adj,adj[i][0], sub);
        
        if(adj[i].size() > 1)
            right = dfs(adj, adj[i][1], sub);
        
        sub[i][0] = left + right;
        sub[i][1] = max(left*right, left);
        return sub[i][0]+1;
    }
};