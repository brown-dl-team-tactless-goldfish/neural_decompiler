typedef struct {
    int size;
    int** calculate;
} NumMatrix;


NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {
    NumMatrix* obj = (NumMatrix*)malloc(sizeof(NumMatrix));
    int i,j;
    
    obj->calculate = (int**)malloc(matrixSize*sizeof(int*));
    obj->size = matrixSize;
    for(i=0;i<matrixSize;i++)
    {
        obj->calculate[i] = (int*)calloc(matrixColSize[0],sizeof(int));
    }
    
    for(i=0;i<matrixSize;i++)
    {
        for(j=0;j<matrixColSize[0];j++)
        {
            if(i>0)
                obj->calculate[i][j] += obj->calculate[i-1][j];
            if(j>0)
                obj->calculate[i][j] += obj->calculate[i][j-1];
            if((i>0) && (j>0))
                obj->calculate[i][j] -= obj->calculate[i-1][j-1];
            obj->calculate[i][j] += matrix[i][j];
        }
    }
    
    return obj;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
    int result = 0;
    
    result = obj->calculate[row2][col2];
    if(row1>0)
        result -= obj->calculate[row1-1][col2];
    if(col1>0)
        result -= obj->calculate[row2][col1-1];
    if((row1>0) && (col1>0))
        result += obj->calculate[row1-1][col1-1];
    
    return result;
}

void numMatrixFree(NumMatrix* obj) {
    int i;
    
    for(i=0;i<obj->size;i++)
    {
        free(obj->calculate[i]);
    }
    free(obj->calculate);
    free(obj);
}