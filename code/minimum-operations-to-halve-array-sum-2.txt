void swap(double *a, double* b) {
    double temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(double *arr, int n, int i) {
    int largest = i, l = 2 * i + 1, r = 2 * i + 2; 
 
    if (l < n && arr[l] > arr[largest])
        largest = l;
 
    if (r < n && arr[r] > arr[largest])
        largest = r;
 
    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

void buildHeap (int* ar, int n) {
    for (int i = (n / 2) - 1; i >= 0; i--) 
        heapify(ar, n, i);
}

int halveArray(int* nums, int numsSize){
    int i, operations = 0;
    double totalSum = 0, halfSum = 0;
    double *array = malloc(sizeof(double) * numsSize);

    for (i = 0; i < numsSize; i++)
        array[i] = nums[i];

    buildHeap(array, numsSize);

    for (i = 0; i < numsSize; i++)
        totalSum += array[i];

    totalSum /= 2;

    while (halfSum < totalSum) {
        double x = array[0] / 2;
        array[0] = x;
        heapify(array, numsSize, 0);
        halfSum += x;
        operations++;
    }

    free(array);
    return operations;
}