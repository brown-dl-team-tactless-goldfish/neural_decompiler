vector<long> dp;

int mod = 1e9+7;

 long helper(string &s, int idx, int n)
{
    if(idx == n)
    {
        return 1;
    }
    
    if(s[idx] == '0')
    {
        return 0;
    }
    
    if(dp[idx] != -1)
    {
        return dp[idx];
    }
    
     long res = 0, mult = 1;
    
    if(s[idx] == '*')
    {
        mult = 9;
    }
    
    res = res + mult* helper(s,idx+1, n);
    
  if(idx < n-1)
  {
      char next = s[idx+1];
      int ways = 0;
      
      if(s[idx] == '*')
      {
          if(next == '*')
          {
              ways = 15;
          }
          
          else
          {
              if(next <= '6')
              {
                  ways = 2;
              }
              
              else
              {
                  ways = 1;
              }
          }
      }
      
      else if(s[idx]  < '3')
      {
         if(next == '*')
         {
             if(s[idx] == '1')
             {
                 ways = 9;
             }
             else
             {
                 ways = 6;
             }
         }
      
      else
      {
          if(stoi(s.substr(idx,2)) <= 26)
          {
              ways = 1;
          }
      }
           
      
  }
      
    
     if(ways)
     {
         res = res + ways* helper(s, idx+2, n);
     }
      
      
  }
    
    return dp[idx] = res % (mod);
    
    
}

int numDecodings(string s) {
    
    int n  = s.size();
    
    dp.resize(n+1, -1);
    
    return helper(s, 0, n);
    
}