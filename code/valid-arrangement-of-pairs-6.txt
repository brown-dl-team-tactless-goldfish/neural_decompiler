class Solution {
public:
  vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {
    unordered_map<int,vector<int>>g;
    unordered_map<int,int>table;
    
    for(auto &p : pairs)
      g[p[0]].push_back(p[1]), table[p[0]]++, table[p[1]]--;
    
    
    int start = g.begin()->first;
    for(auto [x, n]: table) 
      if( n > 0 && (n&1) ) {start = x; break;}
    
    stack<int>st;
    vector<int>v;
    st.push(start);
    while(!st.empty())
      if(g[st.top()].empty()){
        v.push_back(st.top());
        st.pop();
      }
      else{
        int next = g[st.top()].back();
        g[st.top()].pop_back();
        st.push(next);
      }
    
    pairs.clear();
    for(int i = v.size() - 1; i; ) pairs.push_back({v[i], v[--i]});
    
    return pairs;
  }
};