class Solution {
public:
    string smallestSubsequence(string s, int k, char letter, int repetition) {
        vector<int> st;
        
        // num of letters we still can use
        int num_letter_left = 0;
        for(const auto& c : s) {
            if (c == letter) num_letter_left++;
        }
        
        // num of letters we already have in the result
        int num_letter_in = 0;
        int len = s.size();
        for(int i = 0; i < len; i++) {
            char cur = s[i];
            
            while(!st.empty()) {
                int prev_idx = st.back();
                char prev_char = s[prev_idx];
                
                // if deletion of prev_char would lead to insufficient characters in the result
                // we cannot delete any more
                if (st.size()-1+(len-i) < k) {
                    break;
                }
                
                
                if (prev_char == letter && cur != letter) {
                    // need to ensure we still have enough `letter` to use
                    if ((num_letter_in-1 + num_letter_left) >= repetition && prev_char > cur) {
                        num_letter_in--;
                        st.pop_back();
                    } else {
                        break;
                    }
                } else if (prev_char != letter && cur == letter) {
                    // if we don't have enough space for `letter`, we need to pop `prev_char`
                    if (prev_char > cur || (k-st.size()) < (repetition-num_letter_in) ) {
                        st.pop_back();
                    } else {
                        break;
                    }
                } else if (prev_char == letter && cur == letter) {
                    // the same, no need to do anything
                    break;
                } else {
                    if (prev_char > cur) {
                        st.pop_back();
                    } else {
                        break;
                    }
                }
            }
            if (st.size() < k) {
                st.push_back(i);
                if (cur == letter) {
                    num_letter_in++;
                }
            }
            if (cur == letter) {
                num_letter_left--;
            }
        }
        
        string res;
        for(const auto& idx : st) {
            res.push_back(s[idx]);
        }
        return res;
    }
};