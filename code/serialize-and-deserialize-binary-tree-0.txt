#define TREE_RANGE  10000

void serializeHelper(struct TreeNode *node, char *data, int *idx, char *curValue) {
    // Using N to indicate NULL nodes
    // Using # as a delimiter between values
    if(!node) {
        strncpy(data + (*idx), "N#", 2);      
        (*idx) += 2;
        return;
    }    
    // store the node value in preorder way
    sprintf(curValue, "%d#", node->val);
    int len = strlen(curValue);
    strncpy(data + (*idx), curValue, len);
    (*idx) += len;
    
    serializeHelper(node->left, data, idx, curValue);
    serializeHelper(node->right, data, idx, curValue);
}

/** Encodes a tree to a single string. */
char* serialize(struct TreeNode* root) {
   char *data = malloc(TREE_RANGE * 10);    // we need to store markers ('#') for NULL
    memset(data, '\0', TREE_RANGE * 10);
    int wrIdx = 0;
    char curValue[7];       // range + marker + '\0' char
    
    // using helper function build the preorder traversal of values with delimiters in between
    serializeHelper(root, data, &wrIdx, curValue);
    return data;
}

struct TreeNode *createNode(int val) {
    struct TreeNode *result = malloc(sizeof(struct TreeNode));
    result->val = val;
    result->left = result->right = NULL;
    return result;
}

void deserializeHelper(struct TreeNode **root, int *nodeValues, int totalValues, int *valIndex) {
    // return if all node values are constructed or null nodes
    if(*valIndex >= totalValues || nodeValues[(*valIndex)] == INT_MIN) {        
        (*valIndex) ++; // move the index to next node value to skip NULL nodes (-1)
        return;
    } 
    
    *root = createNode(nodeValues[(*valIndex)++]);
    
    deserializeHelper(&(*root)->left, nodeValues, totalValues, valIndex);
    deserializeHelper(&(*root)->right, nodeValues, totalValues, valIndex);
}

/** Decodes your encoded data to tree. */
struct TreeNode* deserialize(char* data) {
    int len = strlen(data);
    if(len <= 3) return NULL;
    
    int nodeValues[TREE_RANGE * 10] = {0}, index = 0;
    char *tok, *rest = NULL;
    
    // build the array of node values by stripping off delimiters
    for(tok = strtok_r(data, "#", &rest); tok; tok = strtok_r(NULL, "#", &rest)) {
        if(strcmp(tok, "N") == 0)
            nodeValues[index++] = INT_MIN;    
        else
            nodeValues[index++] = atoi(tok);
    }
    
    struct TreeNode *root = NULL;
    int valIndex = 0;

    // build the tree using the helper passing the array of node values
    deserializeHelper(&root, nodeValues, index, &valIndex);
    
    return root;
}

// Your functions will be called as such:
// char* data = serialize(root);
// deserialize(data);