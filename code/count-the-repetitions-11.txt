class Solution {
public:
    int getMaxRepetitions(string s1, int n1, string s2, int n2) {
        if(s1.empty()) return 0;

        std::vector<int> ws(s1.size(), 0);

        int count = 0;
        int its = 0;
        int i = 0;
        int j = 0;
        int f = 0;

        int curpos = 0;
        int lcount = 0;

        while(its < n1){
            if(i == s1.size()){
                i = 0;
                ++its;
                continue;
            }

            ++lcount;

            if(s1[i] == s2[j]){
                
                if(j == 0){
                    curpos = i;
                   
                    if(ws[curpos]!=0){
                        int p = curpos;
                        std::stack<int> hops;

                        int pos = curpos + its*s1.size();
                        int nxt = pos;

                        do{
                            nxt = ws[p] + nxt;
                            hops.push(nxt - pos);
                            p = (p + ws[p])%s1.size();
                            while(ws[p]==0){
                                ++p;
                                ++nxt;
                                if(p == s1.size()){
                                    p = 0;
                                }
                            }
                        }while(p!=curpos);

                        hops.push(nxt-pos);


                        if(!hops.empty()){
                            int lits = (n1*s1.size() - pos)/hops.top();
                            if(lits > 0){
                                count = count + (hops.size()-1)*lits;
                                pos = pos + hops.top()*lits;
                            }
                        }
                     
                        while((!hops.empty())&& (pos < n1*s1.size())){
                            if(pos + hops.top() < n1*s1.size()){
                                count += hops.size();
                                pos = pos + hops.top();
                            }
                            else{
                                hops.pop();
                            }
                        }

                        return count/n2;
                    }             

                }
                
                ++i;
                ++j;

                if(j == s2.size()){
                    ++count;
                    j = 0;
                    ws[curpos] = lcount;
                    lcount = 0;
                }
                f = 0;
            }
            else{
                ++i;
                ++f;

                if(j == 0){
                    lcount = 0;
                }

                if(f == s1.size()){
                    break;
                }
            }
        }

        return count/n2;
    }
};