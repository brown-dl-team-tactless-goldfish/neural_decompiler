#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

// Declaring ordered_set
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class CountIntervals {
public:
    CountIntervals() {

    }

    void add(int left, int right) {
        auto b = os.begin(), e = os.begin();
        {
            auto [ir, inserted] = os.insert(++right);
            int p = os.order_of_key(right); // from bpds rb-tree
            if ((p & 1) ^ inserted) e = ir;
            else e = next(ir);
        }
        {
            auto [ir, _] = os.insert(left);
            int p = os.order_of_key(left); // from bpds rb-tree
            if (p & 1) b = ir;
            else b = next(ir);
        }

        for(auto p = b; p != e;) {
            p = os.erase(p);
        }
        cached = 0;
    }

    int count() {
        if (cached == 0) {
            int p = 0, res = 0;
            for (int i : os) {
                if (p == 0) {
                    p = i;
                } else {
                    res += i - p;
                    p = 0;
                }
            }
            cached = res;
        }
        return cached;
    }

    int cached = 0;
    ordered_set<int> os;
};