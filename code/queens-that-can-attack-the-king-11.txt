class Solution {
public:
    bool isSafe(int i, int j){
        if(i<0 || j<0 || i>=8 || j>=8) return 0;
        return 1;
    }
    vector<vector<int>> queensAttacktheKing(vector<vector<int>>& q, vector<int>& king) {
        int i,j,x=king[0], y=king[1], xx, yy;
        vector<vector<int>> ans;
        int dp[8][8];
        memset(dp,-1,sizeof(dp));
        dp[x][y]=1;
        for(i=0;i<q.size();i++){
            dp[q[i][0]][q[i][1]]=0;
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            yy--;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            yy++;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            xx--;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            xx++;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            xx--; yy--;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            xx++; yy++;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            xx--; yy++;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        xx=x; yy=y;
        while(isSafe(xx,yy)){
            xx++; yy--;
            if(isSafe(xx,yy) && dp[xx][yy]==0){
                ans.push_back({xx,yy});
                break;
            }
        }
        return ans;
    }
};