    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        const int n = isWater.size(), m = isWater[0].size();
        const vector<pair<int,int>> dirs = {{0,1}, {0,-1}, {-1,0}, {1,0}};
        vector<vector<int>> res(n, vector(m, -1));
        queue<tuple<int,int,int>> q; //{i, j, h}
        for(int i=0;i<n;i++) for(int j=0;j<m;j++){
            if(isWater[i][j] == 1){
                q.push(tuple{i, j, 0});
                res[i][j] = 0;
            }             
        }
        while(!q.empty()){
            auto [i, j, h] = q.front(); q.pop();
            for(auto [di, dj] : dirs){
                const int x = i+di, y = j+dj;
                if(x<0 || x>=n || y<0 || y>=m || res[x][y] > -1) continue;
                res[x][y] = h+1;
                q.push(tuple{x, y, h+1});
            }
        }
        return res;
    }