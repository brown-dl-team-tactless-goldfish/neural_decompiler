class Solution {
public:
    const int mod = 1e9 + 7; 
    int minWastedSpace(vector<int>& ps, vector<vector<int>>& bs) {
        sort(ps.begin(),ps.end());
        vector<long long> prefix(ps.size());
        prefix[0] = 0;
        for(int i = 1;i<ps.size();i++) {
            prefix[i] = ((long long)(ps[i] - ps[i-1]) * i) + prefix[i-1]; 
        }
        long long ret = LLONG_MAX;
        for(int i = 0;i<bs.size();i++) {
            sort(bs[i].begin(),bs[i].end());
            long long tmp = 0; 
            int pre = -1;
            for(int j = 0;j<bs[i].size();j++) {
                int k = upper_bound(ps.begin(),ps.end(),bs[i][j]) - ps.begin() - 1;
                if(k<0) {
                    continue; 
                }
                if(pre == -1) {
                    tmp += (long long)(bs[i][j] - ps[k]) * (k+1) + prefix[k]; 
                } else {
                    tmp += (long long)(bs[i][j] - ps[k]) * (k - pre) + prefix[k] - (long long)(pre + 1) * (ps[k] - ps[pre]) - prefix[pre];
                }
                pre = k; 
                if(k == ps.size() - 1) {
                    ret = min(ret,tmp);
                }
            }
        }
        if(ret == LLONG_MAX) {
            return -1; 
        }
        return ret % mod; 
    }
};