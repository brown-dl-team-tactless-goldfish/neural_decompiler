    public class Solution
    {
        private const int MODULO = 1_000_000_007;

        public int ProfitableSchemes(int g, int p, int[] group, int[] profit)
        {
            checked
            {
                int[,,] dp = new int[group.Length + 1, g + 1, p + 1];

                for (int i = 0; i <= group.Length; i++)
                {
                    dp[i, 0, 0] = 1;
                }

                for (int i = 1; i <= group.Length; i++)
                {
                    for (int j = 0; j <= g; j++)
                    {
                        for (int k = 0; k <= p; k++)
                        {
                            dp[i, j, k] = dp[i - 1, j, k];
                            if (j >= group[i - 1])
                            {
                                dp[i, j, k] += dp[i - 1, j - group[i - 1], Math.Max(0, k - profit[i - 1])];
                                dp[i, j, k] %= MODULO;
                            }
                        }
                    }
                }

                int res = 0;

                for (int i = 0; i <= g; i++)
                {
                    res += dp[group.Length, i, p];
                    res %= MODULO;
                }

                return res;
            }
        }
    }