/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
void dfs(int start, int end, int **graph, int graphSize, int *graphColSize, int *returnSize, int *returnColumnSizes, int *currentPath, int currentPathSize, int **paths);

int** allPathsSourceTarget(int** graph, int graphSize, int* graphColSize, int* returnSize, int** returnColumnSizes)
{
    int maxPaths = pow(2, graphSize-1);
    int currentPathSize = 0;
    int *currentPath = malloc(sizeof(int) * graphSize);
    int **paths = malloc(sizeof(int *) * maxPaths);
    int *returnColSizes = malloc(sizeof(int) * maxPaths);
    *returnSize = 0;

    dfs(0, graphSize-1, graph, graphSize, graphColSize, returnSize, returnColSizes, currentPath, currentPathSize, paths);

    paths = realloc(paths, sizeof(int *) * (*returnSize));
    returnColSizes = realloc(returnColSizes, sizeof(int) * (*returnSize));

    *returnColumnSizes = returnColSizes;

    return paths;
}

void dfs(int start, int end, int **graph, int graphSize, int *graphColSize, int *returnSize, int *returnColumnSizes, int *currentPath, int currentPathSize, int **paths)
{
    currentPath[currentPathSize] = start;
    currentPathSize += 1;

    if(start == end)
    {
        paths[*returnSize] = malloc(sizeof(int) * currentPathSize);
        memcpy(paths[*returnSize], currentPath, sizeof(int) * currentPathSize);
        returnColumnSizes[*returnSize] = currentPathSize;
        *returnSize += 1;
        return;
    }

    int i;
    int nextNode;

    for(i = 0; i < graphColSize[start]; i++)
    {
        nextNode = graph[start][i];
        dfs(nextNode, end, graph, graphSize, graphColSize, returnSize, returnColumnSizes, currentPath, currentPathSize, paths);
    }
}