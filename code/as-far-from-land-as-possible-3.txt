class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        
        queue<pair<int, int>> q;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j]) {
                    q.push({i, j});
                    visited[i][j] = true;
                    grid[i][j] = 0;
                }
            }
        }
        
        if (q.size() == m * n || q.empty())
            return -1;
        
        vector<pair<int, int>> dirs{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while (!q.empty()) {
            pair<int, int> pos = q.front();
            q.pop();
            for (pair<int, int> dir : dirs) {
                int i = pos.first + dir.first;
                int j = pos.second + dir.second;
                if (i >= m || i < 0 || j >= n || j < 0) {
                    continue;
                } else {
                    if (!visited[i][j]) {
                        grid[i][j] = grid[pos.first][pos.second] + 1;
                        visited[i][j] = true;
                        q.push({i, j});
                    }
                }
            }
        }
        
        int res = 1;
        for (vector<int>& vec : grid) {
            for (int dist : vec) {
                res = max(res, dist);
            }
        }
        
        return res;
    }
};