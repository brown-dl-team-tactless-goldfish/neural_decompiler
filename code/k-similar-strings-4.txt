class Solution {
public:
    int kSimilarity(string s1, string s2) {
        if(s1 == s2)
            return 0 ;
        int n = s1.size() ;
        queue<string>q{{s1}} ;
        unordered_set<string>visited{{s1}} ;
        int step = 0 ;
        while(q.size()){
            step++ ;
            int sz = q.size() ;
            for(int i = 0; i < sz ; i++){
                string str = q.front() ;
                q.pop() ;
                int j = 0 ; 
                while(str[j] == s2[j])
                    j++ ;
                for(int k = j + 1 ; k < n; k++){
                    if(str[k] == s2[j]){
                        string nxt = str ;
                        swap(nxt[j], nxt[k]) ;
                        if(nxt == s2)
                            return step ;
                        if(visited.count(nxt) == 0){
                            q.push(nxt) ;
                            visited.insert(nxt) ;
                        } 
                    }
                }
            }
        }
        return -1 ;
    }
};