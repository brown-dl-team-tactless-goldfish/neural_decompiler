 void change( vector<int>temp , vector<int>arr , string &s )
    {
        int curr = 0 ;
         sort( temp.begin() , temp.end() ) ;
         for( int j = 0 ; j < temp.size() ; j++ )
        {
            int i = temp[j] ;
           
            while(arr[curr]==0)
            {
                curr++ ;
            }
            
            s[i] = curr + 'a' ;
            arr[curr]-- ;
        }
    }
    void dfs( int i , vector<vector<int>>&adj , vector<bool>&visited , vector<int>&temp , vector<int>&arr , string&s )
    {
        if(visited[i]) return ;
        visited[i] = true ;
        temp.push_back(i) ;
        arr[s[i]-'a']++ ;
        
        for( auto c : adj[i] )
        {
            dfs( c , adj , visited , temp , arr , s) ;
        }
        
    }
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        
        int n = s.size() ;
        vector<bool>visited( n , false ) ;
        
        vector<vector<int>>adj(n) ;
        
        
        for( auto i : pairs )
        {
            adj[i[1]].push_back(i[0]) ;
            adj[i[0]].push_back(i[1]) ;
           
        }
        
        
        for( int i = 0 ; i < s.size() ; i++ )
        {
            if(!visited[i] && adj[i].size() != 0 )
            {
                vector<int>arr( 26 , 0 ) , temp ;
                // priority_queue <int, vector<int>, greater<int>>temp ;
                dfs( i , adj , visited , temp , arr , s ) ;
                change(  temp , arr , s) ;
                
            }
        }
        
        return s ;
    }