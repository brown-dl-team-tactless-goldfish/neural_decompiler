int insert(int** hash, int N, int val){
    int d = val ;
    int cn = 0;
    while(1){
        if(hash[d % N] == NULL){
            hash[d % N] = malloc(2 * sizeof(int) ) ;
            hash[d % N][0] = val;
            hash[d % N][1] = 1;
            cn = 1;
            break;
        }
        else if(hash[d % N][0] == val){
            hash[d % N][1]++;
            cn = hash[d % N][1];
            break;
        }
        else
            d++;
    }
    return cn;
}
int delete(int** hash, int N, int val){
    int d = val ;
    int cn = 0;
    while(1){
        if(hash[d % N][0] == val){
            hash[d % N][1]-- ;
            cn = hash[d % N][1] ;
            break;
        }
        else
            d++;
    }
    return cn;
}
long long countGood(int* nums, int numsSize, int k){
    long long ans = 0;
    int n = numsSize ;     
    int N = n * 2 ;
    int**  hash = calloc(N, sizeof(int*)) ;
    int l = 0, r = 0 ;
    long long total = 0;
    while(r < n){

        total += insert(hash, N ,nums[r] ) - 1;
        
        while(total >= k){
            total -= delete(hash, N , nums[l]) ;
            l++;
        }
        r++;
        ans += l ;
    }
    for(int i = 0; i < N; i++){
        if(hash[i])
            free(hash[i]) ;
    }
    free(hash) ;
    return ans;
}