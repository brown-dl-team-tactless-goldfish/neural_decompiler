# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def findBottomLeftValue(self, root: TreeNode) -> int:
        
        maps = {}
        self.res = [float('-inf'), float('inf'), root.val]
        def helper(curNode, curRow, curCol):
            if (curNode == None):
                return
            
            if (curRow > self.res[0]) :
                self.res = [curRow, curCol, curNode.val]
            elif (curRow == self.res[0] and curCol < self.res[1]):
                self.res = [curRow, curCol, curNode.val]
            
            if (curRow not in maps):
                maps[curRow] = [[curCol, curNode.val]]
            else:
                maps[curRow].append([curCol, curNode.val])
                
            helper(curNode.left, curRow+1, curCol-1)
            helper(curNode.right, curRow+1, curCol+1)
            
        helper(root, 0, 0)
        
        # print ("end maps = ", maps)
        # print ("end self.res = ", self.res)
        
        return self.res[2]
        