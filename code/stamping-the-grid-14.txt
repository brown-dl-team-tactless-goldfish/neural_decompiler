class Solution {
private:
    int m, n;
    void stamp(vector<vector<int>>& grid, int x, int y, int H, int W)
    {
        for (int i = x; i < x + H; ++i)
            for (int j = y; j < y + W; ++j)
                grid[i][j] = 2;
    }
public:
    bool possibleToStamp(vector<vector<int>>& grid, int H, int W) {
        m = grid.size(), n = grid[0].size();
        vector<vector<int>> cnt_1(max(0, m - H + 1), vector<int>(max(0, n - W + 1), 0));
        for (int i = 0; i + H - 1 < m; ++i)
        {
            if (i == 0)
            {
                for (int x = 0; x < H; ++x)
                    for (int y = 0; y < W; ++y)
                        if (grid[x][y] == 1)
                            ++cnt_1[0][0];
                if (cnt_1[0][0] == 0)
                    stamp(grid, 0, 0, H, W);
            }
            else
            {
                cnt_1[i][0] = cnt_1[i - 1][0];
                for (int y = 0; y < W; ++y)
                {
                    if (grid[i - 1][y] == 1)
                        --cnt_1[i][0];
                    if (grid[i + H - 1][y] == 1)
                        ++cnt_1[i][0];
                }
                if (cnt_1[i][0] == 0)
                {
                    if (cnt_1[i - 1][0] == 0)
                    {
                        for (int y = 0; y < W; ++y)
                            grid[i + H - 1][y] = 2;
                    }
                    else
                        stamp(grid, i, 0, H, W);
                }
            }
            for (int j = 0; j + W - 1 < n; ++j)
            {
                if (j > 0)
                {
                    cnt_1[i][j] = cnt_1[i][j - 1];
                    for (int x = i; x < i + H; ++x)
                    {
                        if (grid[x][j - 1] == 1)
                            --cnt_1[i][j];
                        if (grid[x][j + W - 1] == 1)
                            ++cnt_1[i][j];
                    }
                    if (cnt_1[i][j] == 0)
                    {
                        if (cnt_1[i][j - 1] == 0)
                        {
                            for (int x = i; x < i + H; ++x)
                                grid[x][j + W - 1] = 2;
                        }
                        else
                            stamp(grid, i, j, H, W);
                    }
                }
				// Early return if we can
                if (grid[i][j] == 0)
                    return false;
            }
        }
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (i < m - H + 1 && j < n - W + 1)
                    continue;
                if (grid[i][j] == 0)
                    return false;
            }
        }
        return true;
    }
};