class Solution {
public:
    int numberOfSubstrings(string s) {
        // DP: we created 3 arrays to store the index of last a, last b and last c for index i, aka dp[i].
        // Formula: suppose dp is the array to store the index of last a, then:
        // dp[i] = dp[i - 1] if dp[i - 1] != 'a', or dp[i] = i - 1 if s[i - 1] == 'a'.
        // After we construct dp array, we can go through each index and find out the index of previous a,
        // b and c, saying they are ia, ib and ic. The number of substrings containg all 3 characters ending at i
        // would be min(ia, ib, ic) + 1. Count them together and return the result.
        int size = s.size(), count = 0;
        vector<int> dpa(size, -1), dpb(size, -1), dpc(size, -1);
        
        for (int i = 1; i < size; ++i)
        {
            dpa[i] = s[i - 1] == 'a' ? i - 1 : dpa[i - 1];
            dpb[i] = s[i - 1] == 'b' ? i - 1 : dpb[i - 1];
            dpc[i] = s[i - 1] == 'c' ? i - 1 : dpc[i - 1];
        }
        
        for (int i = 0; i < size; ++i)
        {
            if (s[i] == 'a')
            {
                count += min(dpb[i], dpc[i]) + 1;
            }
            else if (s[i] == 'b')
            {
                count += min(dpa[i], dpc[i]) + 1;
            }
            else
            {
                count += min(dpa[i], dpb[i]) + 1;
            }
        }
        
        return count;
    }
};