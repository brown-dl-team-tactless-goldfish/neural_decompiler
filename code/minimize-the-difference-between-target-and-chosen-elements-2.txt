class Solution {
public:
    int minimizeTheDifference(vector<vector<int>>& mat, int target) {
        int maxSum = 70 * mat.size();

        // This is basically a map. Each key maps to 0 or 1.
        // This mapping represents a set!
        // If an element is present in the set, the bit value is set to 1.
        // A simple shift then represents an addition over all elements in the set!
        bitset<4901> previousSet;
        // 0 only is present in the set
        previousSet[0] = 1;
        for(vector<int> row : mat){
            bitset<4901> currentSet;
            for(int value : row){
                // Add value to each element in the set
                // Remember, the values are represented by the keys that map to 1
                bitset<4901> incrementedSet = previousSet << value;

                // Join the two sets
                currentSet = currentSet | incrementedSet;
            }
            previousSet = currentSet;
        }
        int minimum = abs(maxSum + target);
        for (int currSum = 0; currSum < 4901; ++currSum) {
            // Element currSum is in the set!
            if (previousSet[currSum]) {
                int distance = abs(currSum - target);
                minimum = min(minimum, distance);
            }
        }
        return minimum;
    }
};
int main(){
	Solution().minimizeTheDifference(vector<vector<int>>& mat, int target) {
}