/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* removeZeroSumSublists(struct ListNode* head){
    struct ListNode *remove_element_List(struct ListNode *phead, struct ListNode *pstart, struct ListNode *pend)
{
    if (phead != NULL)
    {
        struct ListNode *p = phead;

        if (p->next == NULL)
        {
            free(p);
            return NULL;
            printf("\nthe list is empty!!");
        }
        else if (p != pstart)
        {
            while (p->next != pstart)
            {
                printf("hhhh\n");
                p = p->next;
            }
            p->next = pend->next;
            pend->next = NULL;
        }
        else
        {
            phead = pend->next;
            pend->next = NULL;
        }
    }
    else
    {
        return NULL;
    }
    return phead;
};
struct ListNode *new(double operand)
{
    struct ListNode *pfirst = NULL;
    pfirst = malloc(sizeof(struct ListNode));
    if (pfirst != NULL)
    {
        pfirst->val = operand;
        pfirst->next = NULL;
    }
    else
    {
        printf("an error happened during the creation of the list .");
    }

    return pfirst;
}

    int sum, val, N;
    bool zero;
    struct ListNode *pstart;
    struct ListNode *pend;
    struct ListNode *pscan = head;
    

    pstart = head;

    while (pstart != NULL)
    {
        pend = pstart;
        sum = 0;
        zero = false;
        while (pend != NULL && zero == false)
        {
            sum = sum + pend->val;
            if (sum == 0)
            {
                zero = true;
            }
            else
            {
                pend = pend->next;
            }
        }
        if (zero == true)
        {
            head = remove_element_List(head, pstart, pend);
            pstart = head;
            pend = pstart;
        }
        else
        {
            pstart = pstart->next;
        }
    }
    return head;
    


}