class Solution {
public:
    long long mod=1e9+7;
    int xma=INT_MIN,yma=INT_MIN,xmi=INT_MAX,ymi=INT_MAX;
    int picaro=0,dem=0;
    long long count=0,a,b;
    map<pair<int,int>,unordered_map<int,int>> kt; 
    int checkcrossing(int x,int y,int z)
    {
        if(kt[{x,y}].count(z)==0)
        {
            kt[{x,y}][z]=1;
            if(kt[{x,y}].size()==1) dem++;
            if(kt[{x,y}].size()==2) dem--;
            return 0;
        }
        return 1;
    }
    bool isRectangleCover(vector<vector<int>>& rectangles) {
        for(int i=0;i<=rectangles.size()-1;i++)
        {
            xma=max(xma,rectangles[i][2]);
            xmi=min(xmi,rectangles[i][0]);
            yma=max(yma,rectangles[i][3]);
            ymi=min(ymi,rectangles[i][1]);
            a=rectangles[i][3]-rectangles[i][1];
            a=a*(rectangles[i][2]-rectangles[i][0])%mod;
            count=(count+a)%mod;
            picaro=max(picaro,checkcrossing(rectangles[i][0],rectangles[i][3],1));
            picaro=max(picaro,checkcrossing(rectangles[i][0],rectangles[i][1],2));
            picaro=max(picaro,checkcrossing(rectangles[i][2],rectangles[i][1],3));
            picaro=max(picaro,checkcrossing(rectangles[i][2],rectangles[i][3],4));
            if(picaro==1) return false;
        }
        b=xma-xmi;
        b=b*(yma-ymi)%mod;
        // cout << b << "  " << count;
        if(b<count) return false;
        if(dem==4) return true;
        return false;
    }
};