class Solution {
public:
    long long kthSmallestProduct(vector<int>& a, vector<int>& b, long long k) {
        int n = a.size(), m = b.size();
        int x = lower_bound(begin(a), end(a), 0) - begin(a);
        int y = lower_bound(begin(b), end(b), 0) - begin(b);
        auto lt = [&](int i, int j) { return 1LL * a[x - 1 - i] * b[y - 1 - j]; };
        auto rt = [&](int i, int j) { return 1LL * a[i]         * b[m - 1 - j]; };
        auto lb = [&](int i, int j) { return 1LL * a[n - 1 - i] * b[j]; };
        auto rb = [&](int i, int j) { return 1LL * a[x + i]     * b[y + j]; };
        auto count = [](auto& f, int n, int m, long long v) {
            long long c = 0;
            for(int i = n - 1, j = 0; j < m && i >= 0; ++j) {
                while (i >= 0 && 1LL * f(i, j) > v) --i;
                c += i + 1;
            }
            return c;
        };
        long long L = -1e10 - 1, R = 1e10;
        while (L + 1 < R) {
            auto M = (L + R) >> 1;
            auto cnt =  count(lt,     x,     y, M) +
                        count(rt,     x, m - y, M) +
                        count(lb, n - x,     y, M) +
                        count(rb, n - x, m - y, M);
            if (cnt < k) L = M;
            else R = M;
        }
        return R;
    }
};