#define lln long long int
int n;
class Solution {
public:
    vector<int>BIT;

    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
        
        n=nums1.size();
        
        BIT.resize(n+1,0);
        
        int i=0;
        
        vector<int>v1(n);
        
        for(int i=0;i<n;i++){
            v1[nums2[i]]=i;
        }
        
        vector<int>v2(n);
        
        for(int i=0;i<n;i++){
            int idx=v1[nums1[i]];
            v2[i]=idx;
        }
        
        lln ans=0;
        
        for(int i=0;i<n;i++){
            lln smaller=query((v2[i]+1)-1);
            lln greater=(n-v2[i]-(i-smaller)-1);
            ans+=(lln)(smaller*greater);
            
            update(v2[i]+1,1);
        }
        
        return ans;
      }
 
 int query(int x) {
// prefix sum from [1.....x]

     int sum = 0;
     for(; x > 0; x -= x&-x)
        sum += BIT[x];

     return sum;
  }
    
    
void update(int x, int delta) {  
// x=index(1 based indexing , delta = value at index x)

      for(; x <= n; x += x&-x)
        BIT[x] += delta;
  }
 
 };