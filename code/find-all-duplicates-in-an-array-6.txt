/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findDuplicates(int* nums, int numsSize, int* returnSize) {
    int *Hash=(int*)malloc(sizeof(int)*(numsSize+1));
    memset(Hash, 0, sizeof(int) * (numsSize+1));
    *returnSize=0;
    int *ret=(int*)malloc(sizeof(int)*numsSize);
    for(int i=0;i<numsSize;i++){
        Hash[nums[i]]++;
        if(Hash[nums[i]]==2){
           ret[(*returnSize)++]=nums[i];
        }
    }
    return ret;
}
/*#define SIZE 500    //定义Hash table的初始大小
struct HashArray
{
    int key;
    int count;
    struct HashArray* next;
}Hash[SIZE];       //主函数中需要初始化
int addHash(int num)     //在Hash table中添加数据
{
    int temp=abs(num%SIZE);     //添加的数据可包括负数
    if(Hash[temp].key==0&&Hash[temp].count==0)
    {
        Hash[temp].key=num;
        Hash[temp].count=1;
        return 0;
    }else if(Hash[temp].key==num&&Hash[temp].count==1)
    {
        return 1;   
    }else
    {
        struct HashArray *p=&Hash[temp]; 
        while(p->key!=num&&p->next!=NULL)    
        {p=p->next;}
        if(p->key==num&&p->count==1)
        {return 1;}
        else
        {
            p->next=(struct HashArray*)malloc(sizeof(struct HashArray));
            p=p->next;
            p->key=num;
            p->count=1;
            p->next=NULL;
        }
    }   
    return 0;
}
int* findDuplicates(int* nums, int numsSize, int* returnSize) {
    for(int i=0;i<SIZE;i++){
        Hash[i].key=0;
        Hash[i].count=0;
        Hash[i].next=NULL;
    }
    *returnSize=0;
    int* ret=(int*)malloc(sizeof(int)*numsSize);
    for(int i=0;i<numsSize;i++){
        if(addHash(nums[i])==1){
            ret[(*returnSize)++]=nums[i];
        }
    }
    return ret;
}*/