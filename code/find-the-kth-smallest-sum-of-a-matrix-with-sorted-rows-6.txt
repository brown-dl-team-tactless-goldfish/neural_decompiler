template<>
class hash<std::vector<int>> {
public:
    size_t operator()(const std::vector<int> &v) const {
        size_t hash = v.size();
        for(auto& n : v) hash ^= n + 0x9e3779b9 + (hash << 6) + (hash >> 2);
        return hash;
    }  
};

struct Cmp {
    bool operator()(const std::pair<int,std::vector<int>>& a, const std::pair<int,std::vector<int>>& b) {
        return a.first > b.first;
    }
};

class Solution {
public:
    int kthSmallest(vector<vector<int>>& mat, int k) {
        int R{(int)mat.size()}, C{(int)mat[0].size()};
        std::priority_queue<std::pair<int,std::vector<int>>, std::vector<std::pair<int,std::vector<int>>>, Cmp> pq;
        std::unordered_set<std::vector<int>> visited;
        int sum{0};
        for(int i{0}; i < R; ++i) sum += mat[i][0];
        pq.emplace(sum, std::vector<int>(R, 0));
        for(int i{0}; i < k;) {
            auto[sum, state]{pq.top()}; pq.pop();
            if(visited.count(state)) continue;
            visited.insert(state);
            if(i == k-1) return sum;
            for(int j{0}; j < R; ++j) {
                if(state[j] == C-1) continue;
                ++state[j];
                pq.emplace(sum + mat[j][state[j]] - mat[j][state[j]-1], state);
                --state[j];
            }
            ++i;
        }
        
        return -1;
    }
};