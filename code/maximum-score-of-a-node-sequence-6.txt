class Solution {
    vector<multimap<int, int>> nei;
public:
    
    int maximumScore(vector<int>& scores, vector<vector<int>>& edges) {
        nei.assign(scores.size(), multimap<int, int>());
        for(auto& e : edges) {
            nei[e[0]].insert(make_pair(scores[e[1]], e[1]));
            if(nei[e[0]].size() > 3) nei[e[0]].erase(nei[e[0]].begin());
            nei[e[1]].insert(make_pair(scores[e[0]], e[0]));
            if(nei[e[1]].size() > 3) nei[e[1]].erase(nei[e[1]].begin());
        }
        
        int res = -1;
        for(auto& e : edges) {
            int cur = -1;
            for(auto& t : nei[e[0]]) {
                for(auto& s : nei[e[1]]) {
                    if(t.second == e[1] || s.second == e[0] || t.second == s.second) continue;
                    cur = max(cur, t.first + s.first);
                }
            }
            if(cur >= 0) res = max(res, cur + scores[e[0]] + scores[e[1]]);
        }
        
        return res;
    }
};