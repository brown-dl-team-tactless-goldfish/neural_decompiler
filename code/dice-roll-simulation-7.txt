class Solution {
    typedef long long ll;
    ll big = 1e9 + 7;
public:
    int dieSimulator(int n, vector<int>& rollMax) {
        vector<vector<ll>> dp(6, vector<ll>(15, 0));
        for(int i=0; i<6; ++i) dp[i][0] = 1;
        
        for(int r=2; r<=n; r++) {
            vector<vector<ll>> nxt(6, vector<ll>(15, 0));
            for(int i=0; i<6; i++) {
                for(int j=0; j<15; j++) {
                    if(dp[i][j] == 0) {
                        break;
                    }
                    
                    // if the number of consecutives is less than the limit.
                    // we can still append the same number.
                    if(j+1 < rollMax[i]) {
                        nxt[i][j+1] = (nxt[i][j+1] + dp[i][j]) % big;
                    } 
                    
                    // we can always append other numbers
                    for(int k=0; k<6; k++) {
                        if(k != i) nxt[k][0] = (nxt[k][0] + dp[i][j]) % big;
                    }
                }
            }
            dp = nxt;
        }
        
        ll ans = 0;
        for(int i=0; i<6; i++) {
            for(int j=0; j<15; ++j) {
                ans = (ans + dp[i][j]) % big;
            }
        }
        return ans;
    }
};