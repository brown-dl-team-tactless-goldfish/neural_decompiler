static inline bool
matches(char *w, char *p, int len)
{
    char map[26]  = {0}; // word to pattern
    char rmap[26] = {0}; // pattern to word
    for (int i = 0; i < len; i++) {
        if (w[i] == '\0') {
            // word shorter than pattern
            return false;
        }   
        if (map[w[i] - 'a'] != 0) {
            if (map[w[i] - 'a'] != p[i]) {
                // does not match to mapped letter
                return false;
            }   
        } else {
            if (rmap[p[i] - 'a'] != 0) {
                // p[i] is already mapped
                // no two letters map to the same letter
                return false;
            }   
            map[w[i] - 'a']  = p[i];
            rmap[p[i] - 'a'] = w[i];
        }   
    }   
    return true;
}

char **
findAndReplacePattern(char **words, int wordsSize, char *pattern,
                      int *returnSize)
{
    char **x       = NULL;
    int size       = 0;
    int cap        = 0;
    int patternLen = strlen(pattern);
    for (int i = 0; i < wordsSize; i++) {
        if (matches(words[i], pattern, patternLen)) {
            if (size + 1 > cap) {
                if (cap == 0) {
                    cap = 1;
                } else {
                    cap <<= 1;
                }   
                x = realloc(x, sizeof(char *) * cap);
            }
            x[size++] = words[i];
        }
    }
    *returnSize = size;
    return x;
}