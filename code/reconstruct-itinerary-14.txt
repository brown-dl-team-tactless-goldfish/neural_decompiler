struct myclass {
  bool operator() (const string &left, const string &right) { return (left>right);}
} myobject;

class Solution {
public:
    vector<string> findItinerary(vector<vector<string>>& tickets) 
    {
        int count = 0;
        vector<string> cities;
        vector<vector<string>> destinations;
        unordered_map<string,int> city_ix;
        vector<string> itinerary;
        vector<int> it_ix;
        int ix;
        
        for(auto ticket : tickets)
        {
            auto it = city_ix.find(ticket[0]);
            if (it == city_ix.end())
            {
                ix = count++;
                city_ix[ticket[0]] = ix;
                cities.push_back(ticket[0]);
                destinations.push_back({ticket[1]});
            }
            else 
            {
                ix = it->second;
                destinations[ix].push_back(ticket[1]);
            }
            
            if (city_ix.find(ticket[1]) == city_ix.end())
            {
                ix = count++;
                city_ix[ticket[1]] = ix;
                cities.push_back(ticket[1]);
                destinations.push_back({});
            }
        }
        for(int i=0; i<destinations.size(); i++)
        {
            sort(destinations[i].begin(),destinations[i].end(),myobject); 
        }

        ix = city_ix["JFK"];
        stack<int> itinerary_ix;
        itinerary_ix.push(ix);
        while(!itinerary_ix.empty())
        {
            ix = itinerary_ix.top();
            // check for unviseted destination
            if (destinations[ix].size() > 0)
            {
                auto dest = city_ix[destinations[ix][destinations[ix].size()-1]];
                destinations[ix].pop_back();
                itinerary_ix.push(dest);
            }
            else
            {
                itinerary_ix.pop();
                it_ix.push_back(ix);
            }
        }
        for (int i=it_ix.size()-1; i>= 0; i--)
            itinerary.push_back(cities[it_ix[i]]);
        
        return itinerary;
        
    }
};