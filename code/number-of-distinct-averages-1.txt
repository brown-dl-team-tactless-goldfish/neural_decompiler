void swap(int *v, int i, int j) {
    int tmp;

    tmp = v[i];
    v[i] = v[j];
    v[j] = tmp;

    return;
}

// HOARE partition
int partition(int *A, int l, int r) {
    int i, j, pivot;

    i = l - 1;
    j = r;
    pivot = A[r];

    while (i < j) {
        while (A[++i] < pivot);
        while (j > l && A[--j] >= pivot);
        if (i < j)
            swap(A, i, j);
    }

    swap(A, i, r);
    return i;
}

void quick_sort_r(int *A, int l, int r) {
    int c;

    if (r <= l)
        return;

    c = partition(A, l, r);
    quick_sort_r(A, l, c - 1);
    quick_sort_r(A, c + 1, r);

    return;
}

void quick_sort(int *A, int N) {
    int l = 0, r = N - 1;

    quick_sort_r(A, l, r);

    return;
}

int distinctAverages(int* nums, int numsSize){
    int i, j, flag, c;
    float *means, mean;
    
    if (numsSize == 2)
        return 1;
    
    quick_sort(nums, numsSize);
    
    means = (float *) malloc(numsSize / 2 * sizeof(float));
    
    for (i = c = 0; i < numsSize / 2; i++) {
        flag = 0;
        mean = (nums[i] + nums [numsSize - i - 1]) / 2.00;
        for (j = c; j >= 0 && !flag; j--) {
            if (means[j] == mean) {
                flag = 1;
            }
        }
        if (!flag)
            means[c++] = mean;
    }
    
    free(means);
    
    return c;
}