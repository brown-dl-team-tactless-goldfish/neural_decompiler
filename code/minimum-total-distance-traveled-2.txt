class Solution {
public:
    long long minimumTotalDistance(vector<int>& a, vector<vector<int>>& b) {
        vector<unordered_map<int, long long>> dp;
        
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        
        const int x = int(a.size());
        const int y = int(b.size());
        dp.resize(y);
        
        auto AddToMap = [&](int index, int m, long long alt) {

            unordered_map<int, long long>& x = dp[index];
            if (x.count(m) < 1) {
                x[m] = alt;
            } else {
                x[m] = min(x[m], alt);
            }
        };
        
        for (int i=0; i<y; i++) {
            long long prev_cost = 0;
            if (i > 0) {
                const unordered_map<int, long long>& prev = dp[i-1];
                for (const auto& pp : prev) {
                    long long c = pp.second;
                    AddToMap(i, pp.first, c);
                    for (int res = pp.first; res < pp.first + b[i][1]; res++) { 
                        if (res < x) {
                            c += abs(a[res] - b[i][0]);
                            AddToMap(i, res+1, c);
                        }
                    }
                }
            } else {
                long long c = 0;
                AddToMap(i, 0, c);
                for (int res=0; res<b[i][1]; res++) {
                    c += abs(a[res] - b[i][0]);
                    AddToMap(i, res+1, c);
                }
            }
        }
        
        return dp.back()[a.size()];
    }
};