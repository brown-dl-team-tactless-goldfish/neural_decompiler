struct Creator {
  long popularity;  // Popularity sum.
  string Id;        // Id that has max view.
  int curView;      // Cur view of the creator.
};

class Solution {
 public:
  vector<vector<string>> mostPopularCreator(vector<string>& creators,
                                            vector<string>& ids,
                                            vector<int>& views) {
    vector<vector<string>> ret;
    unordered_map<string, Creator> Map;  //{name, Creator}
    long maxPopularity = 0;

    for (int i = 0; i < creators.size(); ++i) {
      if (Map.count(creators[i]) == 0) {
        Map[creators[i]] = Creator{
            .popularity = views[i],
            .Id = ids[i],
            .curView = views[i],
        };
        maxPopularity = max(maxPopularity, (long)views[i]);
        continue;
      }
      Creator& c = Map[creators[i]];
      c.popularity += views[i];
      maxPopularity = max(maxPopularity, c.popularity);
      if (c.curView < views[i] ||
          c.curView == views[i] && ids[i] < c.Id) {
        c.Id = ids[i];
        c.curView = views[i];
      }
    }

    for (auto& [name, creator] : Map)
      if (creator.popularity == maxPopularity)
        ret.push_back({name, creator.Id});

    return ret;
  }
};
