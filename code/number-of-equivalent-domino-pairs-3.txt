

int numEquivDominoPairs(int** dominoes, int dominoesSize, int* dominoesColSize){

    
int i,j,k=0,p=0,c[40000],c1=0,s=0,d[40000],k2=0,temp=0,beg=0,end=0,b1=0,k1=0,a[400000];    
    
for(i=0;i<dominoesSize;i++)
{
if(dominoes[i][0]>=dominoes[i][1])
a[i]=dominoes[i][0]*10+dominoes[i][1];
else if(dominoes[i][0]<dominoes[i][1])
a[i]=dominoes[i][1]*10+dominoes[i][0];
}
         
quick_sort(a,0,dominoesSize-1);        


/*for(i=0;i<dominoesSize;i++)
{
 printf("%d\n",dominoes[i]);
}*/
    

for(i=0;i<dominoesSize;i++)
{
s=1;
c1=0;
for(j=i+1;j<dominoesSize;j++)
{
++c1;
if(a[i]==a[j]&&j!=dominoesSize-1) 
++s;
else if(a[i]!=a[j]||j==dominoesSize-1)
{
if(j==dominoesSize-1)
{
    if(a[i]==a[j])
    {
    i=dominoesSize-1;
    ++s;
    }
    
    else if(a[i]!=a[j])
        i=dominoesSize-2;
    
    d[k1]=a[i];
    c[k1]=s;
    ++k1;
    //printf("%c-->%d\n",chars[i],s);
}
else if(j!=dominoesSize-1)
{
d[k1]=a[i];
c[k1]=s;
++k1;
//printf("%c-->%d\n",chars[i],s);
i=j-1;
break;
}
}  
}
if(c1==0)
{  
d[k1]=a[i];
c[k1]=s;
++k1;
//printf("%c-->%d\n",chars[i],s); 
}
}    

    s=0;
for(i=0;i<k1;i++)
{
    temp=(c[i]*(c[i]-1));
    temp=temp/2;
    s=s+temp;
    printf("%lld-->%lld\n",d[i],c[i]);
}


return s;
}


void quick_sort(int nums[],int f,int l) {
  int i, j, t, p = 0;

  if (f < l) {
    p = f;
    i = f;
    j = l;

    while (i < j) {
      while (nums[i] <= nums[p] && i < l)
        i++;
      while (nums[j] > nums[p])
        j--;
      if (i < j) {
        t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
      }
    }

    t = nums[p];
    nums[p] = nums[j];
    nums[j] = t;
    quick_sort(nums,f, j - 1);
    quick_sort(nums,j + 1, l);
  }
}


