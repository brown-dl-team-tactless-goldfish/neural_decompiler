/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

void QSort(int *nums, int Lo, int Hi);
int Partition(int *nums, int Lo, int Hi);
void swap(int *a, int *b);

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    (*returnSize) = 0;
    (*returnColumnSizes) = (int*) malloc(sizeof(int) * numsSize * numsSize);

    int **ret = (int**) malloc(sizeof(int*) * numsSize * numsSize);
    QSort(nums, 0, numsSize-1);
    for(int i = 0; i < numsSize -2; i++)
    {
        if((i==0) || (nums[i] != nums[i-1]))
        {
            int l = i+1;
            int r = numsSize - 1;

            while(l<r)
            {
                if(nums[i] + nums[l] + nums[r] < 0)
                {
                    l++;
                } else if (nums[i] + nums[l] + nums[r] > 0)
                {
                    r--;
                } else
                {
                    ret[(*returnSize)] = (int*) malloc(sizeof(int)*3);
                    (*returnColumnSizes)[(*returnSize)] = 3;

                    ret[(*returnSize)][0] = nums[i];
                    ret[(*returnSize)][1] = nums[l];
                    ret[(*returnSize)][2] = nums[r];

                    (*returnSize)++;
                    l++;

                    while((l<r) && (nums[l] == nums[l-1]))
                    {
                        l++;
                    }
                }
            }
        }
    }
    return ret;
}

void QSort(int *nums, int Lo, int Hi)
{
    if(Lo < Hi)
    {
        int mid = Partition(nums, Lo, Hi);
        if(mid != 0)
        {
            QSort(nums, Lo, mid-1);
        }
        QSort(nums, mid+1, Hi);
    }
}

int Partition(int *nums, int Lo, int Hi)
{
    int pivot = nums[Hi];

    int Idx = Lo;

    while(Lo < Hi)
    {
        if(nums[Lo] < pivot)
        {
            swap(&nums[Lo], &nums[Idx]);
            Idx++;
        }
        Lo++;
    }

    swap(&nums[Idx], &nums[Hi]);

    return Idx;
}

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
