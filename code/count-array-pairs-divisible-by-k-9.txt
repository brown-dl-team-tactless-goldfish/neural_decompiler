
(n * n2) % k == 0 => (GCD (n1, k) * GCD(n2,k)) % k == 0
Store all GCD of num and k frequency in Hash Table 
and check above condition for previous GCDs and update count

class Solution {
public:
    long long countPairs(vector<int>& nums, int k) {
        
        int size = nums.size();
        long long count  = 0;
        long long v;
        
        // store GCD frequency
        unordered_map<int,int>track;

        // loop through nums array and update count based on previous GCD values
        for(int &num : nums)
        {
            int gcdVal = __gcd(num,k);

            // update count based on all previous GCD frequency 
            // if current GCD * previous GCD % k == 0
            for(auto &t : track)
            {
                v = (long long)gcdVal * (long long)t.first;
                
                if(v % k ==0)count+= t.second;
            }
        
            // update current GCD frequency
            track[gcdVal]++;
        }
        
        return count;    
    }
};