class Solution {
public:
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int n = grid2.size(), m = grid2[0].size();
        int ans = 0;
        stack<pair<int,int>> s;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if (grid2[i][j] == 0 || grid1[i][j] == 0)
                    continue;
                s.push(make_pair(i,j));
                bool island1 = true;
                while(s.size() > 0)
                {
                    auto c = s.top();
                    s.pop();
                    int x = c.first, y = c.second;
                    if (grid1[x][y] == 0)
                        island1 = false;
                    if (x+1<n && grid2[x+1][y] == 1) {s.push(make_pair(x+1,y)); grid2[x+1][y] = 0;}
                    if (x-1>=0 && grid2[x-1][y] == 1) {s.push(make_pair(x-1,y)); grid2[x-1][y] = 0;}
                    if (y+1<m && grid2[x][y+1] == 1) {s.push(make_pair(x,y+1)); grid2[x][y+1] = 0;}
                    if (y-1>=0 && grid2[x][y-1] == 1) {s.push(make_pair(x,y-1)); grid2[x][y-1] = 0;}
                }
                
                if (island1)
                    ans += 1;
            }
        }
        return ans;
    }
};