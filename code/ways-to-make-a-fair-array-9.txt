class Solution {
public:
    int waysToMakeFair(vector<int>& nums) {
        if(nums.size()==1) return 1;
        int ans = 0;
        int n = nums.size();
        vector<int> prefix(n);
        prefix[0] = nums[0];
        prefix[1] = nums[1]; //prefix sum
        
        for(int i = 2;i<nums.size();i++)
        {
            prefix[i] = prefix[i-2] + nums[i];
        }
        int even , odd;
//        for(auto i:prefix) cout<<i<<" ";
        if(n%2==0)
        {
            even = prefix[n-2];
            odd = prefix[n-1];
        }
        else
        {
            even = prefix[n-1];
            odd = prefix[n-2];
        }
        
        if(even - nums[0] == odd) ans++;
        if(odd+nums[0]-nums[1] == even-nums[0]) ans++;
 
        for(int i = 2;i<nums.size();i++)
        {
            if(i%2==0)
            {
                int c_even = prefix[i-2] + odd - prefix[i-1];
                int c_odd = prefix[i-1] + even - prefix[i];
                if(c_even == c_odd) ans++;
            }
            else
            {
                int c_even = prefix[i-1] + odd - prefix[i];
                int c_odd = prefix[i-2] + even - prefix[i-1];
                if(c_even == c_odd) ans++;
            }
        }    
        return ans;
    }
};