class Solution {
public:
    int n1;
    int n2;
    int n;
    string w;
    int res = 0;
    vector<vector<int>> dp;
    int dfs(int i, int j)
    {
        if (i == j) 
        {
            return 1;
        }
        else if (i > j)
        {
            return 0;
        }
        else if (dp[i][j] != -1) 
        {
            return dp[i][j];
        }
        
        int cur = 0;
        if (w[i] == w[j])
        {
            cur = dfs(i + 1, j - 1) + 2;
            if (i < n1 && j >= n1)
            {
                res = max(res, cur);
            }
        }
        else
        {
            cur = max(dfs(i + 1, j), dfs(i, j -1));
        }
        dp[i][j] = cur;
        return cur; 
    }
    int longestPalindrome(string w1, string w2) {
        w.append(w1);
        w.append(w2);
        n1 = w1.size();
        n2 = w2.size();
        n = n1 + n2;
        dp = vector<vector<int>>(n, vector<int>(n, -1));
        dfs(0, n - 1);
        return res;
    }
};