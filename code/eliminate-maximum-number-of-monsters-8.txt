class Solution {
public:
    int eliminateMaximum(vector<int>& dist, vector<int>& speed) {
        //calculate the time to reach the city for every monster
        //the optimal approach is to defeat the monster which arrives in lesser time
        
        //use min heap pq to store the time to reach the city 
        priority_queue<double,vector<double>,greater<double>> pq;
        for(int i=0;i<dist.size();i++)
        {
            double time= (double)(dist[i])/(speed[i]);
            pq.push(time);
        }
        
        int res=0;
        int currTime=0;
        //keep on defeating the monster which it has not yet reached
        while(!pq.empty() && pq.top()>currTime)
        {
            currTime++;
            res++;
            pq.pop();
        }
        return res;
    }
};