class Solution {
public:
    int sumOfFlooredPairs(vector<int>& nums) {
        // freq[i] = number of elements with value i
        vector<int> freq(100001, 0);
        // prefix_freq[i] = number of elements whose values are between 1 to i inclusive
        vector<int> prefix_freq(100002, 0); 
        // mx = maximum element
        int mx = -1;
        for(int n : nums) {
            freq[n]++;
            mx = max(mx, n);
        }
        // build prefix sum array
        prefix_freq[1] = freq[1];
        for(int i = 2; i < freq.size(); i++) {
            prefix_freq[i] = freq[i] + prefix_freq[i-1];
        }
        // cnt_sum(start, end) = number of elements between start and end
        auto cnt_sum = [&](int start, int end) {
            if(start == 1) return prefix_freq[end];
            else return prefix_freq[end] - prefix_freq[start - 1];
        };
        int res = 0;
        for(int i = 1; i <= mx; i++) {
            // contribution of sum of floor(m/i)
            int val = 1;
            while(true) {
                int start = val * i;
                int end = (val + 1) * i - 1;
                if(end >= mx) end = mx;
                res += (val * freq[i] * cnt_sum(start, end));
                res %= 1000000007;
                if(end == mx) break;
                val++;
            }
        }
        return res;
    }
};