class Solution {
public:
    int maximumRobots(vector<int>& chargeTimes, vector<int>& runningCosts, long long budget) {
        ios_base::sync_with_stdio(0);
        int start = 1,end = chargeTimes.size(),mid = 0,ans = 0,n = chargeTimes.size();
        while(start<=end){             // Finding most optimal number of robots
            mid = start+(end-start)/2;
            long long sum = 0; bool c = false;
            deque<int>dq;                            
            int i = 0;
            for(; i<mid; i++){            // Sliding Window Maximum Algorithm
                sum+=runningCosts[i];
                while(!dq.empty() && chargeTimes[dq.back()]<=chargeTimes[i]){
                    dq.pop_back();
                }
                dq.push_back(i);
            }
            for(; i<n; i++){
                long long cost = mid*sum+(long long)chargeTimes[dq.front()];
                if(cost<=budget){
                    c = true;
                    break;
                }
                while(!dq.empty() && dq.front()<=i-mid){
                    dq.pop_front();
                }
                while(!dq.empty() && chargeTimes[dq.back()]<=chargeTimes[i]){
                    dq.pop_back();
                }
                dq.push_back(i);
                sum-=runningCosts[i-mid];
                sum+=runningCosts[i];
            }
            long long cost = mid*sum+(long long)chargeTimes[dq.front()];
            if(cost<=budget){
                c = true;
            }
            if(c){
                ans = mid;
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return ans;
    }
};