class Solution {
public:
    bool dfs(vector<vector<int>>& grid1,vector<vector<int>>& grid2, int i, int j) {
        int m = grid2.size();
        int n = grid2[0].size();
        
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] != 1)
            return true;
        
        if(grid1[i][j] == 0){
            return false;
        }
        grid2[i][j] = 2;
        
        bool a = dfs(grid1,grid2, i - 1, j);
        bool b = dfs(grid1,grid2, i + 1, j);
        bool c = dfs(grid1,grid2, i, j - 1);
        bool d = dfs(grid1,grid2, i, j + 1);
        return a && b && c && d;
    }
    
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
         int m = grid2.size();
        int n = grid2[0].size();
        // vector<vector<int>> v;
        int ans = 0;
        for (int i = 0; i < m; i++){
             for (int j = 0; j < n; j++){
                  if (grid2[i][j] == 1){
                        if(dfs(grid1,grid2, i, j)){
                            ans++;
                        }
                  }
             }
        }
           
        return ans;
    }
};