   int shortestSubarray(vector<int>& A, int K) {
      vector<int> vindex;
      vector<long long> vsum{ 0 };
      int min_len = INT_MAX;
      auto cmp = [&](auto index, auto val) { return vsum.back() - vsum[index] < val; };
      for (int i = 0; i<A.size(); i++) {
         vsum.push_back(vsum.back() + A[i]);
         if (A[i] < 0) {
            while (!vindex.empty() && (vsum.back() - vsum[vindex.back()] <= 0)) vindex.pop_back();
         }
         else {
            vindex.push_back(i);
            auto it = lower_bound(vindex.rbegin(), vindex.rend(), K, cmp);
            if (it != vindex.rend()) min_len = min(min_len, i - *it + 1);
         }
      }
      return min_len == INT_MAX ? -1 : min_len;
   }