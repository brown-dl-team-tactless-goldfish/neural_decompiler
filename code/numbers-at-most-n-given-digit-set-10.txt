class Solution {
public:
    int atMostNGivenDigitSet(vector<string>& digits, int n) {
        if(n < 10){
            int res=0;
            for(string x : digits)
                if(stoi(x) <= n)
                    ++res;
            return res;
        }
        int len = digits.size();
        int log_n = log10(n);
        int res = 0;
        for(int i=1 ; i<=log_n ; ++i )
            res += pow(len,i);
        while(log_n>=0){
            int n_digit = ((int)(n / pow(10,log_n))) % 10;
            int mul=0;
            bool flag=false;
            bool flag2 = false;
            for(int i = 0 ; i < len ; ++i){
                if(stoi(digits[i]) < n_digit || (log_n ==0 &&  stoi(digits[i]) <= n_digit))
                    ++mul;
                if(stoi(digits[i]) <= n_digit)
                    flag=true;
                if(stoi(digits[i]) == n_digit)
                    flag2=true;
            }
            res += mul*pow(len,log_n);
            if(!flag||!flag2) break;
            //cout << res << endl;
            --log_n;
        }
        return res;
    }
};