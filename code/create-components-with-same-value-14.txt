class Solution {
private:
    list<int>* adj;
public:
    vector<int> Divisors(int n){
        vector<int> G,L;
        for(int i=1;i<=sqrt(n);i++){
            if(n%i==0){
                if(n/i==i){
                    L.push_back(i);
                }
                else{
                    G.push_back(n/i);
                    L.push_back(i);
                }
            }
        }
        vector<int> res=L;
        for(int i=G.size()-1;i>=0;i--){
            res.push_back(G[i]);
        }
        return res; // returns sorted output
    }  
    
    int validate(int node, int sum, vector<int>& nums, int par){
        int currsum=nums[node];
        for(auto nei: adj[node]){
            if(par==nei){
                continue;
            }
            currsum+=validate(nei,sum,nums,node);
            if(currsum>sum){
                return INT_MAX/2;
            }
        }
        if(currsum==sum){ // erasing edge and hence return 0
            return 0;
        }
        return currsum;
    }
    
    int componentValue(vector<int>& nums, vector<vector<int>>& edges) {
        int sum=accumulate(nums.begin(),nums.end(),0);
        vector<int> div=Divisors(sum);
        int n=nums.size();
        adj=new list<int>[n];
        for(auto edge: edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        for(auto d: div){
            if(validate(0,d,nums,-1)==0){
                return sum/d-1;
            }
        }
        return 0;
    }
};