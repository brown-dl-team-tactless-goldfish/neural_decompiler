void printArray(char **grid, int rowIdxSize, int colIdxSize){
    printf("[\n");
    for(int i=0; i<rowIdxSize; i++){
        printf("[");
        for(int j=0; j<colIdxSize; j++){
            printf("%c,", grid[i][j]);
        }
        printf("],\n");
    }
    printf("]\n");
}

void dfs(char** grid, int gridSize, int gridColSize, int rowIdx, int colIdx, char to){
    
    // edge cases
    if((rowIdx < 0) || (rowIdx>=gridSize) || (colIdx >=gridColSize) || (colIdx < 0)){
        return;
    }
    
    // replace all 'O's with random character 'Z', this character is any character other than 'X' and 'O'
    if(grid[rowIdx][colIdx] == 'O'){
        grid[rowIdx][colIdx] = to;
    }
    else{
        return;
    }
    
    dfs(grid, gridSize, gridColSize, rowIdx-1, colIdx, to);
    dfs(grid, gridSize, gridColSize, rowIdx+1, colIdx, to);
    dfs(grid, gridSize, gridColSize, rowIdx, colIdx-1, to);
    dfs(grid, gridSize, gridColSize, rowIdx, colIdx+1, to);
    
}

void solve(char** board, int boardSize, int* boardColSize){
    if((boardSize == 0) || (boardColSize == 0))   return;
    int maxArea = 0;
    bool isEdgeCase = false;
    
    // printArray(board, boardSize, *boardColSize);
    
    // traverse across all the edges, and find if there is any 'O'
    // if there is any 'O', traverse down its depth and replace all it's connected 'O' with 'Z'
    // 'Z' is just a random character other than 'O' and 'X'
    for (int i = 0; i < *boardColSize; i++)
        dfs(board, boardSize, *boardColSize, 0, i, 'Z');
    // printArray(board, boardSize, *boardColSize);
    for (int i = 0; i < boardSize; i++)
        dfs(board, boardSize, *boardColSize, i, 0, 'Z');
    // printArray(board, boardSize, *boardColSize);
    for (int i = 0; i < *boardColSize; i++)
        dfs(board, boardSize, *boardColSize, boardSize-1, i, 'Z');
    // printArray(board, boardSize, *boardColSize);
    for (int i = 0; i < boardSize; i++)
        dfs(board, boardSize, *boardColSize, i, *boardColSize-1, 'Z');
    // printArray(board, boardSize, *boardColSize);
    

    // Now that all 'O' from edges are replaced with 'Z', remaining 'O's are all valid regions we can replace with 'X'
    // while replacing all remaining 'O's with 'X's, simply switch the 'Z's back to 'O's to restore original inputs
    for(int i=0; i<boardSize; i++){
        for(int j=0; j< (*boardColSize); j++){
            if (board[i][j] == 'Z')
                board[i][j] = 'O';
            else if (board[i][j] == 'O')
                board[i][j] = 'X';
        }
    }
}