#include <bits/stdc++.h>

using namespace std;

#define forn(i, n) for(int i = 0; i < n; ++i)
#define forbn(i, b, n) for(int i = b; i < n; ++i)
#define sz(v) (int)v.size()
#define pb push_back

typedef vector<int> vi;


class Solution {
public:
	static const int N = 20 * 1001;
	vi gr[N];
	vi gl_nums;
	
    
	int dfs(int target_sm, int node, int pr = -1) {
		int loc_sm = gl_nums[node];
		
		for(int to: gr[node]) {
			if(to != pr) {
				int rem = dfs(target_sm, to, node);
				loc_sm += rem;
				if(rem < 0)
					return -1;
			}
		}
		
		if(loc_sm == target_sm) {
			return 0;
		} 
		if(loc_sm > target_sm) {
			return -1;
		}
		return loc_sm;
	}
	
    
    int componentValue(vector<int>& nums, vector<vector<int>>& edges) {
    	int total = 0;
    	for(int to: nums) {
    		gl_nums.pb(to);
    		total += to;
    	}
    	
    	forn(i, sz(edges)) {
    		int a = edges[i][0];
    		int b = edges[i][1];
    		
    		gr[a].pb(b);
    		gr[b].pb(a);
    	}
    	
    	forbn(d, 1, total + 1) {
    		if(total % d == 0) {
    			int ans = dfs(d, 0);
    			if(ans == 0) {
    				int k = total / d;
    				return k - 1;
    			}
    		}
    	}
        return -1;
    }
};