class Solution {
public:
    int mp[15] = {};
    int find(vector<int> &nums,int i){
        if(nums[i]==-1) return i;
        else return nums[i] = find(nums,nums[i]);
    }
    void union_(vector<int> &nums,int x,int y){
        int i = find(nums,x), j=find(nums,y);
        if(i!=j){
            if(i<j) nums[j] = i;
            else nums[i] = j;
        }
    }
    int findmaxdist(vector<vector<int>> &nums,vector<bool> &arr,int vis,int in, int &sum){ // to find diameter of subtree
        arr[in] = 1; int re = 0;
        priority_queue<int,vector<int>,greater<int>> q;
        for(int i = 0; i<nums[in].size();++i){
            int j = nums[in][i];
            if(bool(vis&(1<<j)) && arr[j]==0){
                int k = findmaxdist(nums,arr,vis,j,sum);  re=max(re,k);
                q.push(k);  if(q.size()>2) q.pop();
            }
        }
        int p = 0;
        while(!q.empty()){  p+=q.top(); q.pop(); }
		
        sum=max(sum,p);
        return re+1;
    }
    void count(vector<vector<int>> g,int vis,int n){
        vector<int> nums(n,-1); int l = 0;
        for(int i = 0; i<n;++i){
            if((vis&(1<<i))){
                l=i;
                for(int j = 0; j<g[i].size();++j){
                    int k = g[i][j];
                    if((vis&(1<<k))) union_(nums,i,k);
                }
            }
        }
        int re = 0;
        for(int i = 0; i<n;++i){
            if((vis&(1<<i))) if(nums[i]==-1) re++;
        }
        if(re!=1) return;
        vector<bool> arr(n,0);
        int k = 0;
        findmaxdist(g,arr,vis,l,k);
        mp[k]++;
    }
    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& arr) {
        vector<vector<int>> nums(n);
        for(int i = 0; i<arr.size();++i){
            nums[arr[i][0]-1].push_back(arr[i][1]-1);
            nums[arr[i][1]-1].push_back(arr[i][0]-1);
        }
        int last = (1<<n);
        for(int i = 1; i<last;++i) count(nums,i,n);
        vector<int> re;
        for(int i = 1; i<n;++i) re.push_back(mp[i]);
        return re;
    }
};