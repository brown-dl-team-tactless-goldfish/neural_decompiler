int** intervalIntersection(int** A, int ASize, int* AColSize, int** B, int BSize, int* BColSize, int* returnSize, int** returnColumnSizes){

    int start,end, i=0, j=0;
    int maxOverlap = (ASize>BSize)?ASize:BSize;
    int count = 0;
    
    int** result = (int**)malloc(maxOverlap * 2 * sizeof(int*));
    
    while((i<ASize) && (j<BSize))
    {
        start = A[i][0] > B[j][0]?A[i][0]:B[j][0];
        end = A[i][1] < B[j][1]?A[i][1]:B[j][1];
        if(start<=end)
        {
            result[count] = (int*)malloc(2*sizeof(int));
            result[count][0] = start;
            result[count][1] = end;
            count++;
        }
        if(A[i][1] < B[j][1])
            i++;
        else
            j++;
    }
    
    *returnSize = count;
    (*returnColumnSizes) = (int*)malloc(count*sizeof(int));
    for(i=0;i<count;i++)
        (*returnColumnSizes)[i] = 2;
    
    return result;
}