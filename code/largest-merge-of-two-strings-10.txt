class Solution {
public:
    string largestMerge(string s1, string s2) {
        
        int s1l = s1.length();
        int s2l = s2.length();
        
        if(s1l==0 || s2l==0) return s1 + s2;
        
        int i=0;
        int j=0;
        string str = "";
        
        // loop through both string 
        while(i<s1l && j<s2l)
        {
            if(s1[i] > s2[j])str+=s1[i++];  // take larger char
            else if(s2[j] > s1[i])str+=s2[j++];
            else 
            {
                // for equal char check both remaining substring
                if(checkSubstr(i,j,s1,s2,s1l,s2l))str+=s1[i++];
                else str+=s2[j++];
            }
        }
        
        // add remaining chars
        while(i<s1l)str+=s1[i++];
        
        while(j<s2l)str+=s2[j++];
        
        return str;
    }
    
    // take first char of S1 if larger char comes first in S1, otherwise S2
    bool checkSubstr(int i, int j, string &s1, string &s2, int s1l, int s2l)
    {
        while(i<s1l && j<s2l && s1[i]==s2[j])i++,j++;
        
        if(i==s1l && j==s2l) return true;
        else if(i==s1l) return false;
        else if(j==s2l) return true;
        else return s1[i] > s2[j];
    }
};