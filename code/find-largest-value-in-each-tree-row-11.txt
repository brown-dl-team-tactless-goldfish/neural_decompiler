class Solution {
public:
    vector<int> largestValues(TreeNode* root) 
    {
        vector<int> result;
        result.resize(getDepth(root));
        
        for (auto& val: result)
            val = std::numeric_limits<int>::min();
        
        fillVec(root, result, result.capacity() - 1);
        std::reverse(result.begin(), result.end());
        
        return result;
    }
    
    void fillVec(TreeNode* root, vector<int>& arr, int depth)
    {
        if (root == NULL)
            return;
        
        arr[depth] = (std::max(arr[depth], root->val));
        
        fillVec(root->left, arr, depth - 1);
        fillVec(root->right, arr, depth - 1);
    }
    
    int getDepth(TreeNode* root)
    {
        if (root == NULL)
            return 0;
        return max(getDepth(root->left), getDepth(root->right)) + 1;
    }
};