class SegmentTree{
    private:
        int sz = 0;
        static int N;
        vector<int> Tree;
        vector<int> lazy;
    public:
        void pushUp(int k){
            Tree[k] = max(Tree[k << 1], Tree[k << 1 | 1]);
        }
        void pushDown(int k){
            if(lazy[k]){
                lazy[k << 1] = lazy[k];
                lazy[k << 1 | 1] = lazy[k];
                lazy[k] = 0;
            }
        }
        int handleValue(int lvalue, int rvalue){
            return max(lvalue, rvalue);
        }
        int query(const int &L, const int &R, int l=1, int r=N, int k=1){
            if(r < L || l > R)
                return 0;
            if(L <= l && r <= R){
                return Tree[k];
            }
            int m = l + (r - l) / 2;
            int lvalue = query(L, R, l, m, k << 1);
            int rvalue = query(L, R, m+1, r, k << 1 | 1);
            return handleValue(lvalue, rvalue);
        }
        void update(const int &L, const int &R, int value, int l=1, int r=N, int k=1){
            if(r < L || l > R)
                return;
            if(L <= l && r <= R){
                Tree[k] = value;
                return;
            }
            int m = l + (r - l) / 2;
            pushDown(k);
            update(L, R, value, l, m, k << 1);
            update(L, R, value, m+1, r, k << 1 | 1);
            pushUp(k);
        }
        void buildTree(int l=1, int r=N, int k=1){
            if(r < l)
                return;
            if(l == r){
                Tree[k] = 0;
                return;
            }
            int m = l + (r - l) / 2;
            buildTree(l, m, k << 1);
            buildTree(m+1, r, k << 1 | 1);
            pushUp(k);
        }
        SegmentTree(int n){
            sz = n << 2;
            N = n;
            Tree.resize(sz, 0);
            lazy.resize(sz, 0);
            buildTree();
        }
};
int SegmentTree::N = 0;

class Solution {
public:
    int lengthOfLIS(vector<int>& nums, int k) {
        int n = 1e5, ans = 0;
        SegmentTree st = SegmentTree(n);
        for(int num: nums){
            int l = max(1, num - k);
            int q = st.query(l, num-1) + 1;
            st.update(num, num, q);
            ans = max(ans, q);
        }
        return ans;
    }
};