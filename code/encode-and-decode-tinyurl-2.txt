#define ARRAYLENGTH(_a) (sizeof(_a)/sizeof(_a[0]))

const unsigned char shortmap[] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
 '0','1','2','3','4','5','6','7','8','9'};

class Solution {
    
    #define HRL  (8)
    typedef union 
    {
        unsigned char c[HRL];
        unsigned long long h;
    } HeuRistic;
    
    
    map<string, string> db;
    
public:
    
    Solution()
    {
    }
    
    string buildstring(HeuRistic hr)
    {
        string s;
        
        for (unsigned char c : hr.c)
        {
            s.push_back(shortmap[c]);    
        }    
        
        return s;
    }

    // Encodes a URL to a shortened URL.
    string encode(string longUrl) 
    {
        HeuRistic hr = {0};
        unsigned i = 0;
        for (auto c : longUrl)
        {
            hr.c[i] += c;
            i = (++i) % HRL;
        }
        
        unsigned char n = 0;
        for (i = 0; i < HRL; i++)
        {
            hr.c[i] += n * ARRAYLENGTH(shortmap);
            n = hr.c[i] / ARRAYLENGTH(shortmap); 
            hr.c[i] %= ARRAYLENGTH(shortmap);
        }
        
        if (n == 0) {
            n++;
        }
        
        string e;
        
        do
        {
            e = buildstring(hr);
            
            auto itr = db.find(e);
            
            if (itr == db.end())
            {
                break;
            }
            
            if (itr->second == longUrl)
            {
                return e;
            }               
            
            hr.h += n;
            
        } while (true);
        
        db[e] = longUrl;
            
        return e;
    }

    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl) 
    {
        
        auto itr = db.find(shortUrl);
        
        if(itr != db.end())
        {
            return itr->second;
        }
        
        return "";
    }
};

// Your Solution object will be instantiated and called as such:
// Solution solution;
// solution.decode(solution.encode(url));