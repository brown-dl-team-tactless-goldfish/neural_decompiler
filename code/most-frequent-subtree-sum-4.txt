class Solution {
    HashMap<Integer,Integer> hash=new HashMap<>();
     int max=Integer.MIN_VALUE;
    ArrayList<Integer> a=new ArrayList<>();
    public int[] findFrequentTreeSum(TreeNode root) {
        findMax(root);
        int len=a.size();
           int[] res=new int[len];
        for(int i=0;i<len;i++){
            res[i]=a.get(i);
        }
        return res;
    }
    public int findMax(TreeNode root){
        if(root==null) return 0;
        int left=findMax(root.left);
        int right=findMax(root.right);
        int res=left+right+root.val;
        if(!hash.containsKey(res)){
            hash.put(res,1);
            if(max<=1){
                a.add(res);
                max=1;
            }
            
        }
        else{
            int count=hash.get(res);
            count++;
            hash.put(res,count);
            if(max==count){
                a.add(res);
                
            }
            if(max<count){
                a.clear();
                a.add(res);
                max=count;
            }
        }
        return res;
    }
}