


typedef struct {
    
    int *arr;
    int front;
    int end;
    int k;
    
} MyCircularQueue;

/** Initialize your data structure here. Set the size of the queue to be k. */

MyCircularQueue* myCircularQueueCreate(int k) {
    
    MyCircularQueue *q;
    q=malloc(sizeof(MyCircularQueue));
    q->arr = malloc(sizeof(int)*k);
    //init
    q->front = -1;
    q->end = -1;
    q->k = k;
    return q;
}

/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    
    if(obj->front == -1) {
        obj->front=0;
        obj->end=0;
        obj->arr[obj->front] = value;
        return true;
    }
  
    //queue is full
    if((obj->end+1)%obj->k == obj->front)
        return false;
    
    else {
        
        obj->end = (obj->end+1)%obj->k;
        obj->arr[obj->end] = value;
        return true;
    }
    
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    //empty
    if(obj->front == -1)
        return false;
    //single element
    if(obj->front == obj->end ) {
        
        obj->front = -1;
        obj->end = -1;
        return true;
    }
    
    else {
        
        obj->front = (obj->front + 1)%obj->k;
        return true;
    }
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) {
  
    if(obj->front == -1)
        return -1;
    else
        return obj->arr[obj->front];
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) {
  
    if(obj->front == -1)
        return -1;
    else
        return obj->arr[obj->end];
}

/** Checks whether the circular queue is empty or not. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    
    if(obj->front == -1)
        return true;
    else
        return false;
  
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) {
  
    if(obj->front == -1)
        return false;
    else if((obj->end+1)%obj->k == obj->front)
        return true;
    else
        return false;
}

void myCircularQueueFree(MyCircularQueue* obj) {
    
    free(obj->arr);
    free(obj);
    
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/