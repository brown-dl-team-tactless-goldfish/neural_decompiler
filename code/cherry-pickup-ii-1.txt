// Uncomment to improve debuggability (which increases run time)
//#define DEBUG

#ifdef DEBUG
# define ASSERT assert
#else
# define ASSERT
#endif

static int getMax(int* dp, int** grid, int row, int rowSize, int c0, int c1, int colSize)
{
    const int dpIdx = (row - 1) * (colSize - 1) * (colSize - 1) + c0 * (colSize - 1) + (c1 - 1);
    
    ASSERT(0 < row && row < rowSize);
    ASSERT(0 <= c0 && c0 < colSize);
    ASSERT(0 <= c1 && c1 < colSize);
    
    if (dp[dpIdx] == -1) {
        int setter = INT_MIN;
        
        for (int i = -1; i <= 1; i++) {
            const int newC0 = c0 + i;

            if (newC0 < 0) {
                continue;
            }
			// We never let robot0 cross to the other side of robot1, so
			// it can never hit the right column of the grid
			ASSERT(newC0 < colSize);

            for (int j = -1; j <= 1; j++) {
                const int newC1 = c1 + j;
                int temp = 0;
                
                if (colSize <= newC1 || newC1 <= newC0) {
                    continue;
                }
				// We never let robot1 cross to the other side of robot0, so
				// it can never hit the left column of the grid.
				ASSERT(0 < newC1);

				if ((row + 1) < rowSize) {
					temp = getMax(dp, grid, row + 1, rowSize, newC0, newC1, colSize);
				}
				ASSERT(temp >= 0);
                temp += grid[row][newC0] + grid[row][newC1];
                if (temp > setter) {
                    setter = temp;
                }
            }
        }
        
        dp[dpIdx] = setter;
    }
    
    return dp[dpIdx];
}

int cherryPickup(int** grid, int gridSize, int* gridColSize){
    // The position in first row is already set and there is no point in letting
	// a robot go into the same square or cross over to the other side of 
	// another robot, so we can reduce the array size we use here.
    int dp[(gridSize - 1) * (gridColSize[0] - 1) * (gridColSize[0] - 1)];
    int max = grid[0][0] + grid[0][gridColSize[0] - 1];
    
    memset(dp, 0xFF, sizeof(dp));
    
    max += getMax(dp, grid, 1, gridSize, 0, gridColSize[0] - 1, gridColSize[0]);
    return max;
}