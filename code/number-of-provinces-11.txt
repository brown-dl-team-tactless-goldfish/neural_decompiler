int find(int x, int* root)
{
    if(x == root[x])
        return x;
    return root[x] = find(root[x], root);
}
void setUnion(int x, int y, int* root, int* rank, int* count)
{
    int rootX = find(x, root);
    int rootY = find(y, root);
    if(rootX != rootY)
    {
        if(rank[rootX] > rank[rootY])
            root[rootY] = rootX;
        else if(rank[rootX] < rank[rootY])
            root[rootX] = rootY;
        else
        {
            root[rootX] = rootY;
            rank[rootY]++;
        }
        (*count)--;
    }
}

int findCircleNum(int** isConnected, int isConnectedSize, int* isConnectedColSize)
{
    int* root = malloc(isConnectedSize * sizeof(int));
    for(int i = 0; i < isConnectedSize; i++)
        root[i] = i;
    int* rank = calloc(isConnectedSize, sizeof(int));
    int count = isConnectedSize;
    int rows = isConnectedSize;
    int cols = isConnectedColSize[0];
    for(int r = 0; r < rows; r++)
        for(int c = 0; c < cols; c++)
            if(isConnected[r][c] == 1)
                setUnion(r, c, root, rank, &count);
    free(root);
    free(rank);
    return count;
}