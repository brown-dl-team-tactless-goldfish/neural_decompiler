
int listLength(struct ListNode* head)
{
    int counter = 0;
    
    while(head)
    {
        ++counter;
        head = head->next;
    }
    
    //printf("ListLength: %d\n", counter);
    return counter;
}

struct ListNode* padZeros(struct ListNode* head, int diff)
{
    struct ListNode* newnode;
    
    while(diff > 0)
    {
        newnode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newnode->val = 0;
        newnode->next = head;
        head = newnode;
        --diff;
    }
    
    //printf("newhead: %d\n", head->val);
    return head;
}

struct ListNode* add(struct ListNode* l1, struct ListNode* l2)
{
    if(l1 == NULL && l2 == NULL)
    {
        return NULL;
    }
    
    int carry = 0;
    
    struct ListNode* retnode = add(l1->next,l2->next);
    
    if(retnode != NULL)
    {
        if(retnode->val >= 10)
        {
            retnode->val %= 10;
            carry = 1;
        }   
    }
    
    struct ListNode* newnode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newnode->val = l1->val + l2->val + carry;
    newnode->next = retnode;
    return newnode;
}

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    int diff = listLength(l1) - listLength(l2);
    
    if(diff < 0)
    {
        l1 = padZeros(l1, -1*diff);
    }
    else if(diff > 0)
    {
        l2 = padZeros(l2, diff);
    }
    
    struct ListNode* head = add(l1,l2);
    
    //printf("Adding done\n");
    
    if(head->val >= 10)
    {
        head->val %= 10;
        struct ListNode* newnode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newnode->val = 1;
        newnode->next = head;
        head = newnode;
    }
    
    return head;
}