public class Solution {
    public bool IsPossible(int n, IList<IList<int>> edges) {
        Dictionary<int, HashSet<int>> graph = Enumerable
            .Range(1, n)
            .ToDictionary(index => index, index => new HashSet<int>());

        foreach (var edge in edges) {
            int e1 = edge[0];
            int e2 = edge[1]; 

            graph[e1].Add(e2);
            graph[e2].Add(e1);
        }   

        int[] odds = graph
          .Where(pair => pair.Value.Count % 2 != 0)
          .Select(pair => pair.Key)
          .ToArray();

        if (odds.Length == 0)
           return true;
        if (odds.Length > 4 || odds.Length % 2 != 0)
           return false;

        if (odds.Length == 2) {
            int aa = odds[0];
            int bb = odds[1];

            if (!graph[aa].Contains(bb))
                return true;

            return graph
                .Where(pair => pair.Key != aa && pair.Key != bb)
                .Any(pair => !pair.Value.Contains(aa) && !pair.Value.Contains(bb));
        }
           
        int a = odds[0];
        int b = odds[1];
        int c = odds[2];
        int d = odds[3];

        return !graph[a].Contains(b) && !graph[c].Contains(d) ||
               !graph[a].Contains(c) && !graph[b].Contains(d) ||
               !graph[a].Contains(d) && !graph[b].Contains(c);    
    }
}