class Solution {
    public boolean canMeasureWater(int jug1Capacity, int jug2Capacity, int targetCapacity) {
        if (jug1Capacity+jug2Capacity < targetCapacity) return false;
        return solve(jug1Capacity, jug2Capacity, targetCapacity) || solve(jug1Capacity, -jug2Capacity, targetCapacity);
    }

    // just start a loop from i=0 for potential values of y and put
    // appropriate break conditions.
    private boolean solve(int c1, int c2, int k) {
        int i=0;
        Set<Integer> remainders = new HashSet();
        if (c2 > 0) {
            while(true) {
                int s = c2*i;
                if ((k-s) % c1 == 0) return true;
                if (s > k) break;
                i++;
            }
            return false;
        } else {
            i = 0;
            while(true) {
                int sum = k+(c2*i);
                if (sum % c1 == 0) {
                    return true;
                } else {
                    int r = sum % c1;
                    if (remainders.contains(r)) return false;
                    remainders.add(r);
                }
                i++;
            }
        }
    }
}