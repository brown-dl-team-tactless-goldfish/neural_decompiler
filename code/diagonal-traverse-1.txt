void reverse(int* res, int start, int len) {
    if(len == 1) return;
    int end = start + len - 1;
    while (end > start) {
        int tmp = *(res + start);
        *(res + start) = *(res + end);
        *(res + end) = tmp;
        start++;
        end--;
    }
}

int* findDiagonalOrder(int** mat, int matSize, int* matColSize, int* returnSize) {
    int rSize = matSize, cSize = matColSize[0];
    int min = (rSize > cSize) ? cSize : rSize, max = (min == rSize) ? cSize : rSize;
	int num = 1, cnt = 1, arrSize = rSize + cSize - 1;
    int* arr = (int*) malloc(arrSize * sizeof(int));
    for(int i = 0; i < arrSize; i++) {
        if (rSize == 1 || cSize == 1) {
            arr[i] = 1;   
            continue;
        }
        if (cnt != max) {
            arr[i] = (num < min) ? num++ : num;
            cnt++;
        } else {
            arr[i] = num--;
        }
    }
    
    *returnSize = rSize * cSize;
    int* res = (int*) malloc((*returnSize) * sizeof(int));
    int ridx = 0;
    for (int c = 0; c < cSize; c++) {
        for (int i = 0; i < arr[c]; i++) {
            res[ridx++] = mat[i][c-i];   
        }
    }
    int aidx = cSize;
    for (int r = 1; r < rSize; r++) {
        int c = cSize-1;
        for(int i = 0; i < arr[aidx]; i++) {
            res[ridx++] = mat[r+i][c--];
        }
        aidx++;
    }
    int start = 0;
    for(int i = 0; i < arrSize; i++) {
        if(i % 2 == 0) {
            reverse(res, start, arr[i]);
        }
        start += arr[i];
    }
    free(arr);
    return res;
}