class Solution {
public:
    vector<vector<int>> dir {{1, 0}, {0, 1}, {-1, 0}, {0, -1}, {1, -1}, {1, 1}, {-1, -1}, {-1, 1}};
    int R = 8, C = 8;
    
    void helper(vector<vector<bool>> board, int i, int j, vector<vector<int>>& res, vector<int> dir) {
        while(1) {
            if(i < 0 || j < 0 || i >= R || j >= C) break;
            if(board[i][j] == true) {
                res.push_back({i, j});
                break;
            }
            i += dir[0]; j += dir[1];
        }
    }
    vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens, vector<int>& king) {
        vector<vector<int>> res;
        vector<vector<bool>> board(R, vector<bool>(C, false));
        for(int i = 0; i < queens.size(); i++) {
            board[queens[i][0]][queens[i][1]] = true;
        }
        for(int d = 0; d < dir.size(); d++) {
            helper(board, king[0], king[1], res, dir[d]);
        }
        return res;
    }
};