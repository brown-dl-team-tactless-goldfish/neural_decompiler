public class Solution {
	int idx;
	public IList<int> CircularPermutation(int n, int start) {
		idx = start == 0 ? 0 : 1;

		List<int> list = Solve(n, start);
		IList<int> res = new int[list.Count];

		idx = list.Count - idx;

		for(int i = 0; i < list.Count; i++)
			res[(i + idx) % list.Count] = list[i];

		return res;
	}

	public List<int> Solve(int n, int start) {
		if(n <= 0)
			return new List<int>() { 0 };

		if(n == 1)
			return new List<int>() { 0, 1 };

		List<int> res = Solve(n - 1, start);
		List<int> temp = new List<int>();

		for(int i = res.Count - 1; i >= 0; i--) {
			temp.Add(res[i] | (1 << (n - 1)));
			if(temp[temp.Count - 1] == start)
				idx = res.Count + temp.Count - 1;
		}

		res.AddRange(temp);
		return res;
	}
}