class Solution {
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        
        // Adj List and distance vector of nodes
        vector<vector<vector<int>>>adjL(n);
        vector<long>dist(n,LONG_MAX);
        
        // populate Adj List
        for(int i=0;i<edges.size();i++)
        {
            adjL[edges[i][0]-1].push_back({edges[i][1]-1,edges[i][2]});
            adjL[edges[i][1]-1].push_back({edges[i][0]-1,edges[i][2]});
        }
        
        int MOD = 1000000007;
        
        // push node N in PQ and make node N distance 0
        priority_queue<pair<long,int>,vector<pair<long,int>>,greater<>>pQ;
        pQ.push({0,n-1});
        dist[n-1] = 0;

        // store restrited path count of nodes and node N has count 1 initially
        vector<long>ways(n,0);
        ways[n-1]=1;
        
        long cost;
        int node;

        // loop through PQ nodes and relax the neighbor nodes
        // if dist[node] > dist[neighbor] then there is restricted edge and so
        // we update node way count from neighbor way count as ways[node] += ways[neighbor]
        // Also we update ways of node from neighbor cause in Dijkstra we move from lower to higher distance
        // thus higher distance node way count depends on lower distance node ways count and also we
        // start from node N which has dist 0 and ways 1
        while(!pQ.empty())
        {
            cost = pQ.top().first;
            node = pQ.top().second;
            pQ.pop();
            
            if(dist[node]<cost)continue;
            for(auto &adj: adjL[node])
            {                
                if(dist[node]+adj[1] < dist[adj[0]])
                {
                    dist[adj[0]] = dist[node]+adj[1];
                    pQ.push({dist[adj[0]],adj[0]});
                }
                
                // update node ways count as we find the restricted edge
                if(dist[node] > dist[adj[0]])ways[node] = (ways[adj[0]] + ways[node])%MOD;
            }
        }

        // return the restricted path count of node 0
        return ways[0];
    }
};