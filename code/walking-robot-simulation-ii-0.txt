

typedef struct {
    int x ;
    int y ;
    int cur ;
    int w ;
    int h ;
    int total ;
} Robot;


Robot* robotCreate(int width, int height) {
    Robot* ret = malloc( sizeof(Robot) ) ;
    ret->w = width ;
    ret->h = height ;
    ret->x = 0 ;
    ret->y = 0 ;
    ret->cur = 0 ;
    ret->total = 2*width + 2*height - 4 ;
    return ret ;
}

void robotStep(Robot* obj, int num) {
     int dirt[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0,-1} } ;
     int org_x = obj->x ;
     int org_y = obj->y ;
     num %= obj->total ;
     int flag = num / obj->total ;
     int x = obj->x ;
     int y = obj->y ;
     int w = obj->w ;
     int h = obj->h ;
     int cur = obj->cur ;
     for(int i = 1; i <= num; i++){
         x += dirt[cur][0] ;
         y += dirt[cur][1] ;
         if(x < 0 || x >= obj->w || y < 0 || y >= obj->h){
            x -= dirt[cur][0] ;
            y -= dirt[cur][1] ; 
            cur = (cur + 1) % 4 ;
            x += dirt[cur][0] ;
            y += dirt[cur][1] ;
         }
     }     
     obj->x = x;
     obj->y = y;

     if(x ==0 && y == 0)
         cur = 3 ;
     obj->cur = cur ;
}

int* robotGetPos(Robot* obj, int* retSize) {
    int* ret = malloc(2 * sizeof(int)) ;
    ret[0] = obj->x ;
    ret[1] = obj->y ;
    *retSize = 2 ;
    return ret ;
}

char * robotGetDir(Robot* obj) {
    if(obj->cur == 0)
        return "East" ;
    if(obj->cur == 1)
        return "North" ;
    if(obj->cur == 2)
        return "West" ;
    if(obj->cur == 3)
        return "South" ;
    return NULL ;
}

void robotFree(Robot* obj) {
    free(obj) ;
}

/**
 * Your Robot struct will be instantiated and called as such:
 * Robot* obj = robotCreate(width, height);
 * robotStep(obj, num);
 
 * int* param_2 = robotGetPos(obj, retSize);
 
 * char * param_3 = robotGetDir(obj);
 
 * robotFree(obj);
*/