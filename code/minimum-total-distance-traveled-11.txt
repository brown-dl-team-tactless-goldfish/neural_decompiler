#define vi vector<int>
class Solution {
public:
    //dp[i][j] means what is minimum sum if we have robots (i,i+1,....n-1) & factory (j,j+1,..)
    long long dp[101][101];
    long long helper(int i,int j,vi &robot, vector<vi>&factory){
	    // if all robots are used up so ans =0;
        if(i>=robot.size())return 0;
		// if factory accomodation capacity fall short then inf is ans as robots won't find any place
        else if(j>=factory.size())return (long long)100*INT_MAX;
        else if(dp[i][j]!=-1){
            return dp[i][j];
        }
        long long &ans=dp[i][j];
        ans=helper(i,j+1,robot,factory);
        long long sum=0;
        long long k=factory[j][1],pos=factory[j][0];
		//for each factory we will try to accomodate 0-max capcity robots that lie on number line nearest to it.
        while(i<robot.size()&&k--){
            sum+=abs(pos-robot[i]);
            long long r=helper(i+1,j+1,robot,factory);
            // if(r!=-1)
            ans=min(ans,sum+r);
            i++;
        }
        return ans;
    }
    long long minimumTotalDistance(vector<int>& robot, vector<vector<int>>& factory) {
        sort(robot.begin(),robot.end());
        sort(factory.begin(),factory.end());
        memset(dp,-1,sizeof(dp));
        return helper(0,0,robot,factory);
    }
};