int comparer(const void * a, const void * b) {
    return (*(int*)a - *(int*)b );
}

int* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize){
    int start = 0, end = arrSize - 1;
    int *ret = (int*)malloc(sizeof(int) * k);
    while (start <= end) {
        int mid = (start + end) / 2;
        if (arr[mid] == x) {
            start = mid;  // could have created another variable to avoid confusion of setting start
            break;
        } else if (arr[mid] < x) {
            start = mid + 1;
        } else {
            end = mid - 1;
        }
    }
    *returnSize = k;
    helper(arr, x, k, start, ret, arrSize);
    // sort the array
    qsort(ret, k, sizeof(int), comparer);
    return ret;
}


void helper(int * arr, int x, int k, int index, int * ret, int arrSize) {
    int left = 1, right = 0;  // starting right at 0 to avoid checking for edge case where arr length is 1
    int count = 0;
    while (count < k) {
        if (index - left < 0){
            ret[count++] = arr[index + right];
            right++;
        } else if (index + right == arrSize){
            ret[count++] = arr[index - left];
            left++;
        }
        else if (abs(arr[index - left] - x) < abs(arr[index+right] - x) || ((abs(arr[index - left] - x) == abs(arr[index+right] - x)) && (index - left) < (index + right))) {
            ret[count++] = arr[index - left];
            left++;
        } else {
            ret[count++] = arr[index + right];
            right++;
        }
    }
}