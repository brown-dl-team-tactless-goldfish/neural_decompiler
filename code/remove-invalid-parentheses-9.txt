    public class Solution
    {
        //almost the same as https://leetcode.com/problems/combinations/
        private void Combinator(IList<int> indices2Remove, int[] buffer, int start, int index, ISet<string> res, ref string s)
        {
            if (index == buffer.Length)
            {
                StringBuilder sb = new StringBuilder(s.Length);

                for (int i = 0; i < s.Length; i++)
                {
                    if (!buffer.Contains(i))
                    {
                        sb.Append(s[i]);
                    }
                }

                var candidate = sb.ToString();

                int opened = 0;
                for (int i = 0; i < candidate.Length; i++)
                {
                    if (candidate[i] == '(')
                    {
                        opened++;
                        continue;
                    }

                    if (candidate[i] == ')')
                    {
                        if (opened == 0)
                        {
                            return;
                        }

                        opened--;
                    }
                }

                if (opened == 0)
                {
                    res.Add(candidate);
                }

                return;
            }

            for (int i = start; i < indices2Remove.Count; i++)
            {
                buffer[index] = indices2Remove[i];
                Combinator(indices2Remove, buffer, i + 1, index + 1, res, ref s);
            }
        }

        private ISet<string> Combine(IList<int> indices2Remove, int k, ref string s)
        {
            ISet<string> res = new HashSet<string>();
            int[] buffer = new int[k];
            Combinator(indices2Remove, buffer, 0, 0, res, ref s);
            return res;
        }

        private int MinRemoveToMakeValid(string s)
        {
            ISet<int> removeSet = new HashSet<int>();
            Stack<int> openedStack = new Stack<int>();

            for (int i = 0; i < s.Length; i++)
            {
                var c = s[i];

                if (c == '(')
                {
                    openedStack.Push(i);
                    continue;
                }

                if (c == ')')
                {
                    if (openedStack.Count == 0)
                    {
                        removeSet.Add(i);
                    }
                    else
                    {
                        openedStack.Pop();
                    }
                }
            }

            while (openedStack.Count != 0)
            {
                removeSet.Add(openedStack.Pop());
            }

            return removeSet.Count;
        }


        public IList<string> RemoveInvalidParentheses(string s)
        {
            var min = MinRemoveToMakeValid(s);
            IList<int> indices2Remove = new List<int>(s.Length);
            for (int i = 0; i < s.Length; i++)
            {
                if (s[i] == '(' || s[i] == ')')
                {
                    indices2Remove.Add(i);
                }
            }
            ISet<string> res = Combine(indices2Remove, min, ref s);
            return res.ToArray();
        }
    }