int UnionFind(int* UNION, int val){
    if(UNION[val] == val)
        return val;
    else
        return UnionFind(UNION, UNION[val]); 
}

void UnionSet(int* UNION, int* USize, int a, int b){
    a = UnionFind(UNION, a);
    b = UnionFind(UNION, b);
    if(a == b)
        return;
    if(USize[a] > USize[b]){
        UNION[b] = UNION[a];
        USize[a] += USize[b];
    }
    else{
        UNION[a] = UNION[b];
        USize[b] += USize[a];    
    }
}

long long countPairs(int n, int** edges, int edgesSize, int* edgesColSize){
    int* UNION = malloc(n * sizeof(int));
    int* USize = malloc(n * sizeof(int));
    for(int i = 0; i < n; i++){
        UNION[i] = i;
        USize[i] = 1;
    }
    
    for(int i = 0; i < edgesSize; i++){
        UnionSet(UNION, USize, edges[i][0], edges[i][1]);
    }
    
    long long ans = 0;
    for(int i = 0; i < n; i++){
        ans += n - USize[ UnionFind(UNION, i) ];
    }
    
    //Undirect graph, it need to divide by 2
    return ans/2;
}