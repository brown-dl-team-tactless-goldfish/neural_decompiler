class DisjointSet {
private:
    vector<int> parent;
    vector<int> rank;
    int N;
public:
    DisjointSet(int n) {
        parent = vector<int>(n, 0);
        rank = vector<int>(n, 0);
        for (int i = 0; i < n; i++) parent[i] = i;
        N = n;
    }
    int find(int x) {
        if (parent[x] == x) return parent[x];
        else return parent[x] = find(parent[x]);
    }
    void unionSet(int x, int y) {
        int xP = find(x);
        int yP = find(y);
        if (xP != yP) {
            if (rank[xP] > rank[yP]) parent[yP] = xP;
            else if (rank[xP] < rank[yP]) parent[xP] = yP;
            else {
                parent[xP] = yP;
                rank[yP]++;
            }
        }
    }
    vector<int> getSecret() {
        int zeroGroup = find(0);
        vector<int> out;
        out.push_back(0);
        for (int i = 1; i < parent.size(); i++) {
            if (find(i) == zeroGroup) out.push_back(i);
        }
        return out;
    }
    void setParent(int x, int p) {
        parent[x] = p;
    }
};
class Solution {
public:
    static bool cmp(const vector<int>& v1, const vector<int>& v2) {
        return v1[2] < v2[2];
    }
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        DisjointSet* disjointset = new DisjointSet(n);
        disjointset->unionSet(0, firstPerson);
        sort(meetings.begin(), meetings.end(), cmp);
        
        int index = 0;
        while (index < meetings.size()) {
            int currTime = meetings[index][2];
            int currIndex = index;
            while (index < meetings.size() && meetings[index][2] == currTime) {
                index++;
            }
            int endIndex = index - 1;
            for (int start = currIndex; start <= endIndex; start++) {
                disjointset->unionSet(meetings[start][0], meetings[start][1]);
            }
            int zeroGroup = disjointset->find(0);
            for (int start = currIndex; start <= endIndex; start++) {
                if (disjointset->find(meetings[start][0]) != zeroGroup) {
                    disjointset->setParent(meetings[start][0], meetings[start][0]);
                    disjointset->setParent(meetings[start][1], meetings[start][1]);
                }
            }
            
        }
        vector<int> out = disjointset->getSecret();
        return out;
    }
};