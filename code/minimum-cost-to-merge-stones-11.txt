class Solution {
public:
    vector<vector<int>> dp;
    int mergeStones(vector<int>& stones, int k) {
        int n = stones.size();
        for(int i=1; i<n; i++) stones[i]+=stones[i-1];
        dp.resize(n,vector<int>(n,-1));
        if((n-1)%(k-1)!=0) return -1;
        return solve(0,n-1,k,stones);
    }
    int solve(int L,int R,int d,vector<int>&stones) {
        if(R-L+1<d) return 0;
        if(dp[L][R]!=-1) return dp[L][R];
        int cnt = INT_MAX;
        for(int k=L; k<=R-1; k++) {
             if((R-L)%(d-1)==0) {
                 cnt=min(cnt,solve(L,k,d,stones) + solve(k+1,R,d,stones) + stones[R] - (L?stones[L-1]:0));
             }else if((k-L)%(d-1)==0 || (R-(k+1))%(d-1)==0) {
                 cnt=min(cnt,solve(L,k,d,stones)+solve(k+1,R,d,stones));
             }
        }
        dp[L][R]=cnt;
        return cnt;
    }
};