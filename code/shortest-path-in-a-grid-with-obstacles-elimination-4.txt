class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        vector<vector<int>> dirs = {{0,1},{1,0},{-1,0},{0,-1}};
        queue<vector<int>> q;
        q.push({0,0,grid[0][0]});
        int r = grid.size();
        int c = grid[0].size();
        vector<vector<vector<bool>>> visited(r, vector<vector<bool>>(c, vector<bool>(k + 1, false)));
        visited[0][0][grid[0][0]] = true;
        int ans = 0;
        while(!q.empty()) {
            int n = q.size();
            for(int i = 0;i<n;i++) {
                auto v = q.front();
                q.pop();
                int steps = v[2];
                if(steps > k)continue;
                if(v[0] == r - 1 && v[1] == c - 1)return ans;
                for(auto d : dirs) {
                    int rr = v[0] + d[0];
                    int cc = v[1] + d[1];
                    if(rr < 0 || rr>=r || cc<0 || cc>=c || visited[rr][cc][v[2] + grid[rr][cc]])continue;
                    q.push({rr,cc,steps + grid[rr][cc]});
                    visited[rr][cc][v[2] + grid[rr][cc]] = true;
                }
            }
            ans++;
        }
        return -1;
    }
};