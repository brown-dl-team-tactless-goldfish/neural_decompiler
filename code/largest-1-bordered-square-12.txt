    int largest1BorderedSquare(vector<vector<int>>& g) {
        int res = 0, cur = 0, m = g.size(), n = g[0].size();
        vector<vector<int>> ver(m, vector<int>(n, 0)),  hor(m, vector<int>(n, 0));
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(g[i][j]) {
                    ver[i][j] = 1 + (i == 0 ? 0 : ver[i-1][j]);
                    hor[i][j] = 1 + (j == 0 ? 0 : hor[i][j-1]);
                }
            }
        }
        
        for(int i = m-1; i >= 0; i--) {
            for(int j = n-1; j >= 0; j--) {
                int len = min(ver[i][j], hor[i][j]);
                while(len > res) {
                    if(ver[i][j-len+1] >= len && hor[i-len+1][j] >= len) {
                        res = len;
                        break;
                    } else {
                        len--;
                    }
                }
            }
        }
        return res*res;
    }