class Solution {
    vector<bool> r;
    int n,m;
    int calnum(int prevc, vector<int>& A)
    {
        int c = -1;
        int num = 0;
        int i=0;
        while(i!=n)
        {      
            if (r[i] && A[i]!=c && (prevc == -1 || pow((int)(sqrt(prevc+A[i])),2) == prevc+A[i]))
            {
                if (m==1)
                    return 1;
                c = A[i];
                r[i] = false; m--;
                num += calnum(c, A);  
                r[i] = true; m++;
            }
            i++;
        }
        return num;
    }
public:
    int numSquarefulPerms(vector<int>& A) {
        sort(A.begin(),A.end());
        for (int i=0;i<A.size();i++)
            r.push_back(true);
        m = n = A.size();
        return calnum(-1,A);
    }
};