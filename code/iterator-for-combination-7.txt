class CombinationIterator {
private:
    string str;
    int len;
    vector <int> combinations;
public:
    CombinationIterator(string characters, int combinationLength) {
        str = characters;
        sort(str.begin(), str.end());
        
        len = str.length();
		
		// Combination will lie between l and r (just an extra check) not necessary
        int l = (1 << combinationLength) - 1;
        int r = (1 << len) - (1 << (len - combinationLength));

        for(int c = 1; c < (1 << len); c++) {
            if(c >= l and c <= r and __builtin_popcount(c) == combinationLength) {
                combinations.push_back(c);
            }
        }
    }
    
    string next() {
        int c = combinations.back();
        combinations.pop_back();
        
        string s = "";
        for(int i = 0; i < len; i++) {
            if(c & (1 << (len - i - 1))) {
                s += str[i];
            }
        }
        
        return s;
    }
    
    bool hasNext() {
        return !combinations.empty();
    }
};

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);
 * string param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */