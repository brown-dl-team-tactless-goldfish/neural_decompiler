class Solution {
public:
    bool validPartition(vector<int>& nums) {
        int N = nums.size();
        if (N <= 1) {
            return false;
        }
        
        // dp[i] means if nums[0...i-1] can be partitioned following the rules.
        vector<bool> dp(3);
        
        // base condition
        dp[0] = true;
        dp[1] = false;
        dp[2] = nums[0] == nums[1];
        for (int i = 3; i <= N; i++) {
            bool ret = 
            (dp[(i - 2) % 3] && nums[i - 1] == nums[i - 2])                                       // 1. exactly 2 equal elements
            ||  (dp[(i - 3) % 3] && (
                (nums[i - 1] == nums[i - 2] && nums[i - 2] == nums[i - 3])               // 2. exactly 3 equal elements
                || (nums[i - 1] - nums[i - 2] == 1 && nums[i - 2] - nums[i - 3] == 1)       // 3. Consecutive increasing elements
            )
            );
            dp[i % 3] = ret;
        }
        
        return dp[N % 3];
    }
};