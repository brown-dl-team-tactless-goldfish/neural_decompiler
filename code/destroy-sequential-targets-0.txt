int cmp(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

int cmp1(const void* a, const void* b){
    int* A = *(int**)a ;
    int* B = *(int**)b ;
    if(A[1] == B[1])
        return A[0] - B[0] ;
    else
        return A[1]- B[1] ;
}

int destroyTargets(int* nums, int numsSize, int space){
    int n = numsSize ;
    qsort(nums, n, sizeof(int), cmp) ;
    int** mod = malloc(n * sizeof(int*)) ;
    for(int i  = 0; i < n; i++){
        mod[i] = malloc(2 * sizeof(int)) ;
        mod[i][0] = i ;
        mod[i][1] = nums[i] % space ;
    }
    
    qsort(mod, n, sizeof(int*), cmp1) ;

    int M = mod[0][1] ;
    int Midx = mod[0][0] ;
    int next = mod[0][0] ;
    int max_cn = 1 ;
    int cn = 1 ;
    for(int i =1; i < n; i++){
        if(mod[i][1] == mod[i-1][1])
            cn++ ;
        else{
            if(cn > max_cn){
                M = mod[i-1][1] ;
                Midx = next ;
                max_cn = cn ;
            }
            else if((cn == max_cn) && (next < Midx)){
                Midx = next ;
                M = mod[i-1][1] ;
            }
            next = mod[i][0] ;
            cn = 1 ;
        }
    }
    if(cn > max_cn){
            M = mod[n-1][1] ;
            Midx = next ;
            max_cn = cn ;
    }
    else if(cn == max_cn && next < Midx){
            Midx = next ;
            M = mod[n-1][1] ;
    }
    int ans = -1;
    for(int i = 0; i < n; i++){
        if(nums[i] % space == M){
            ans = nums[i] ;
            break ;
        }
    }
    
    for(int i = 0; i < n; i++)
        free(mod[i]) ;
    free(mod) ;
    return ans ;

}