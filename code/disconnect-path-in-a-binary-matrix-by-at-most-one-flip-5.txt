class Solution {
public:
    bool isPossibleToCutPath(vector<vector<int>>& grid) {
        const int n = size(grid);
        const int m = size(grid.front());
        using ll = long long;
        const ll MOD = 1'000'012'337;

        const auto getPathsCountToStartPoint = [&]() {
            vector<vector<ll>> dp(n, vector<ll>(m, -1));
            dp[0][0] = 1;
            function<ll(int, int)> getOrCompute;
            getOrCompute = [&](int i, int j) {
                if (dp[i][j] != -1) {
                    return dp[i][j];
                }
                ll res = 0;
                if (i - 1 >= 0 && grid[i - 1][j]) {
                    res = (res + getOrCompute(i - 1, j)) % MOD;;
                }
                if (j - 1 >= 0 && grid[i][j - 1]) {
                    res = (res + getOrCompute(i, j - 1)) % MOD;;
                }
                return dp[i][j] = res;
            };
            getOrCompute(n - 1, m - 1);
            return dp;
        };

        const auto getPathsCountToEndPoint = [&]() {
            vector<vector<ll>> dp(n, vector<ll>(m, -1));
            dp[n - 1][m - 1] = 1;
            function<ll(int, int)> getOrCompute;
            getOrCompute = [&](int i, int j) {
                if (dp[i][j] != -1) {
                    return dp[i][j];
                }
                ll res = 0;
                if (i + 1 < n && grid[i + 1][j]) {
                    res = (res + getOrCompute(i + 1, j)) % MOD;
                }
                if (j + 1 < m && grid[i][j + 1]) {
                    res = (res + getOrCompute(i, j + 1)) % MOD;
                }
                return dp[i][j] = res;
            };
            getOrCompute(0, 0);
            return dp;
        };

        const auto dp1 = getPathsCountToEndPoint();
        const auto dp2 = getPathsCountToStartPoint();
        const auto pathsCount = dp1[0][0];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (i == 0 && j == 0 || i == n - 1 && j == m - 1) {
                    continue;
                }
                if (dp1[i][j] * dp2[i][j] == pathsCount) {
                    return true;
                }
            }
        }
        return pathsCount == 0;
    
};