int solve(int *map)
{
    for(int i=9;i>=0;i--)if(map[i])return i;
    return 0;
}
char * largestPalindromic(char * num)
{
    if(strlen(num)==1)return num;
    int map[10]={0};
    int prep[strlen(num)],suff[strlen(num)];
    int kp=0,ks=strlen(num)-1,mid=0;
    for(int i=0;i<strlen(num);i++)
        map[num[i]-'0']++;
    for(int i=9;i>=0;i--)
        {
            if(kp==0&&ks==strlen(num)-1&&i==0&&map[i])
            {
                num[0]=solve(map)+'0';
                num[1]='\0';
                return num;
            }
            if(map[i]%2==0)
            {
                for(int j=0;j<map[i]/2;j++)
                {
                    prep[kp++]=i;
                    suff[ks--]=i;
                }
                map[i]=0;
            }
            else if(map[i]%2)
            {
                for(int j=0;j<map[i]/2;j++)
                {
                    prep[kp++]=i;
                    suff[ks--]=i;
                }
                map[i]=1;
            }
        }
    bool p=false;
    for(int i=9;i>=0;i--)
    {
        if(map[i])
        {
            p=true;
            mid=i;
            break;
        }
    }
    int k=0,l=kp;
    for(int i=0;i<kp;i++)
        num[k++]=prep[i]+'0';
    if(p)num[k++]=mid+'0';
    for(int i=ks+1;i<strlen(num);i++)
        num[k++]=suff[i]+'0';
    num[k]='\0';
    return num;
}