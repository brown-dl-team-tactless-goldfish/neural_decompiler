class Solution {
public:
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        unordered_map<TreeNode*, TreeNode*> parent;
        
        parent[root] = NULL;
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())
        {
            int sz = q.size();
            
            vector<TreeNode*> deepestNodes;
            
            for(int i=0; i<sz; ++i)
            {
                TreeNode* front = q.front();
                q.pop();
                
                deepestNodes.push_back(front);
                
                if(front->left) 
                {
                    parent[front->left] = front;
                    q.push(front->left);
                }
                
                if(front->right) 
                {
                    parent[front->right] = front;
                    q.push(front->right);
                }
            }
            
			//deepestNodes has stored all the deepest Leaf Nodes
            if(q.empty())
            {
                while(1)
                {
                    bool LCA = true;
                
                    for(int i=1; i<deepestNodes.size(); ++i)
                    {
                        if(deepestNodes[i-1] != deepestNodes[i])
                        {
                            LCA = false;
                            break;
                        }
                    }
                    
                    if(LCA)
                    {
                        return deepestNodes[0];
                    }
                    else
                    {
                        for(int i=0; i<deepestNodes.size(); ++i)
                        {
                            deepestNodes[i] = parent[deepestNodes[i]];
                        }
                    }
                }
            }
        }
        
        return NULL;
    }
};