int getMaxLen(int* nums, int numsSize){
	// Solution 1
    // int maxLen = 0, countNeg = 0, posFirstNeg = -1, posZero = -1;
    // for(int i=0; i<numsSize; i++)
    //     if(nums[i] < 0)
    //     {
    //         countNeg++;
    //         if(posFirstNeg == -1)
    //             posFirstNeg = i;
    //         else if(countNeg % 2 == 0)
    //             maxLen = maxLen > i - posZero ? maxLen : i - posZero;
    //     }
    //     else if(nums[i] > 0)
    //     {
    //         if(countNeg % 2 == 0)
    //             maxLen = maxLen > i - posZero? maxLen : i - posZero;
    //         else
    //             maxLen = maxLen > i - posFirstNeg ? maxLen : i - posFirstNeg;
    //     }
    //     else
    //     {
    //         posFirstNeg = -1;
    //         countNeg = 0;
    //         posZero = i;
    //     }
    // return maxLen;
    
	//Solution 2
    int pos = 0, neg = 0, maxLen = 0;
    for(int i=0; i<numsSize; i++)
    {
        if(nums[i] > 0)
        {
            pos++;
            if(neg > 0) neg++;
        }
        else if(nums[i] < 0)
        {
            int temp = pos;
            pos = neg > 0 ? neg + 1 : 0;
            neg = temp + 1;
        }
        else
        {
            pos = 0;
            neg = 0;
        }
        maxLen = maxLen > pos ? maxLen : pos;
    }
    return maxLen;
}