import numpy as np

class Solution:

   def __init__(self, rects):
       """
       :type rects: List[List[int]]
       """
       self.rects = rects
       areas = [(rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1) for rect in rects]
       self.distribution = np.cumsum(areas) / sum(areas)

   def pick(self):
       """
       :rtype: List[int]
       """
       pickRect = random.uniform(0, 1)
       i = 0
       while pickRect > self.distribution[i]:
           i += 1
       x = self.rects[i][0] + random.uniform(0, 1) * (self.rects[i][2] - self.rects[i][0] + 1) - 0.5
       y = self.rects[i][1] + random.uniform(0, 1) * (self.rects[i][3] - self.rects[i][1] + 1) - 0.5
       return [round(x), round(y)]
       
# Your Solution object will be instantiated and called as such:
# obj = Solution(rects)
# param_1 = obj.pick()