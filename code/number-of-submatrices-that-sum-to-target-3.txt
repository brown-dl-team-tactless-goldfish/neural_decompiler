/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {number}
 */
var numSubmatrixSumTarget = function(matrix, target) {
    const sumArr = new Array(matrix.length);
    for(let i=0;i<matrix.length;i++){
        sumArr[i] = new Array(matrix[0].length).fill(null);
    }
    for(let i=0;i<matrix.length;i++){
        for(let j=0;j<matrix[0].length;j++){
            if(i===0 && j===0)
                sumArr[i][j] = matrix[i][j];
            else if (i===0)
                sumArr[i][j] = matrix[i][j] + sumArr[i][j-1];
            else if (j===0)
                sumArr[i][j] = matrix[i][j] + sumArr[i-1][j];
            else
                sumArr[i][j] = matrix[i][j] + sumArr[i-1][j] + sumArr[i][j-1] - sumArr[i-1][j-1];
        }
    }
    let count = 0;
    for(let i=0;i<matrix.length;i++){
        for(let j=0;j<matrix[0].length;j++){
            loop1:
            for(let k=0;k<=i;k++){
                const newTotal = (k===0)?sumArr[i][j]:sumArr[i][j]-sumArr[k-1][j];
                loop2:
                for(let l=0;l<=j;l++){
                    
                    const newTotal2 = (l===0)?newTotal:((k===0)?newTotal - sumArr[i][l-1] : newTotal - sumArr[i][l-1] + sumArr[k-1][l-1] )
                    if(newTotal2===target) count++;
                }
            }
            
        }
    }
    return count;
};