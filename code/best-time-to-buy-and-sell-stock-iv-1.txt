int *memo;
int memo_size;
int K = 0;
int *prices;
int prices_size;

int max(int a, int b) {
    return a >= b ? a : b;
}

int dp(int i, int k, int holding) {
   
    if (k == 0 || i == prices_size)
        return 0;
    
    int index = i * K * 2 + k * 2 + holding;
    if (memo[index] == 0) {
        
        int sell = holding ? dp(i + 1, k - 1, 0) + prices[i] : 0;
        int buy = !holding ? dp(i + 1, k, 1) - prices[i] : 0;
        int do_nothing = dp(i + 1, k, holding);
        
        memo[index] = max( do_nothing, max(buy, sell));
    }
    
    return memo[index];
}

int maxProfit(int k, int* _prices, int pricesSize){

    prices = _prices;
    prices_size = pricesSize;
    
    K = k + 1;
    memo_size = pricesSize * K * 2; 
    memo = malloc(memo_size * sizeof(int));
    for (int i = 0; i < memo_size; i++) 
        memo[i] = 0;

    //printf("prices_size=%d, memo_size=%d\n", prices_size, memo_size);
    int answer = dp(0, k, 0);
    
    free(memo);
    
    return answer;
}