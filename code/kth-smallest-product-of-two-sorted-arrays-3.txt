class Solution {
   public:
    long long kthSmallestProduct(vector<int>& nums1,
                                 vector<int>& nums2,
                                 long long k) {
        int64_t l = -1e10;
        int64_t r = 1e10;
        while (l != r) {
            const auto mid = l + (r - l) / 2;
            if (countle(nums1, nums2, mid) < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }

    int64_t countle(const vector<int>& nums1,
                    const vector<int>& nums2,
                    int64_t k) {
        const auto pos1 = partition_point(nums1.begin(),
                                          nums1.end(),
                                          [](const auto& x) { return x < 0; });
        const auto pos2 = partition_point(nums2.begin(),
                                          nums2.end(),
                                          [](const auto& x) { return x < 0; });
        const auto first1 = nums1.begin();
        const auto last1 = nums1.end();
        const auto first2 = nums2.begin();
        const auto last2 = nums2.end();
        return countle_in_sorted_matrix(pos1, last1, pos2, last2, k) +
               countle_in_sorted_matrix(first1,
                                        pos1,
                                        make_reverse_iterator(last2),
                                        make_reverse_iterator(pos2),
                                        k) +
               countle_in_sorted_matrix(make_reverse_iterator(pos1),
                                        make_reverse_iterator(first1),
                                        make_reverse_iterator(pos2),
                                        make_reverse_iterator(first2),
                                        k) +
               countle_in_sorted_matrix(make_reverse_iterator(last1),
                                        make_reverse_iterator(pos1),
                                        first2,
                                        pos2,
                                        k);
    }

    template <class It1, class It2>
    int64_t countle_in_sorted_matrix(
        It1 first1, It1 last1, It2 first2, It2 last2, int64_t k) {
        int64_t cnt = 0;
        auto j = last2;
        for (auto it = first1; it != last1; ++it) {
            while (j != first2 && j[-1] * int64_t(*it) > k) {
                --j;
            }
            cnt += distance(first2, j);
        }
        return cnt;
    }
};