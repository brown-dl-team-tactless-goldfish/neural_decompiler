class Solution {
public:
    int findShortestCycle(int n, vector<vector<int>>& edges) {
        vector<vector<int>> x(n);
        for(int i=0;i<edges.size();i++) {
            x[edges[i][0]].push_back(edges[i][1]);
            x[edges[i][1]].push_back(edges[i][0]);
        }
        int ans=INT_MAX;
        for (int i = 0; i < n; i++) {
            vector<int> y(n, -1);
            queue<int> q;
            y[i] = 0;
            q.push(i);
            while (!q.empty()) {
                int u=q.front();
                q.pop();
                for (int v : x[u]) {
                    if (y[v] == -1) {
                        y[v] = y[u] + 1;
                        q.push(v);
                    }
                    else if (y[v]>=y[u]) ans=min(ans,y[v]+y[u]+1);
                }
            }
        }
        return ans==INT_MAX?-1:ans;
    }
};