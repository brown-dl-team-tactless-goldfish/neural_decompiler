int maxDistance(int** grid, int gridSize, int* gridColSize){
    int queue[10000][2] = {0};
    int direction[4][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}};
    int head = 0, tail = 0, step = -1;
    bool hasLand = false, hasWater = false; 
    
    for(int i=0; i<gridSize; i++){
        for(int j=0; j<*gridColSize; j++){
            if(grid[i][j] == 1){
                hasLand = true;
                grid[i][j] = 2;
                queue[tail][0] = i;
                queue[tail][1] = j;
                tail += 1;
            }
            else hasWater = true;
        }
    }
    
    while(head < tail){
        int size = tail - head;
        step += 1;
        for(int i=0; i<size; i++){
            int X = queue[head][0];
            int Y = queue[head][1];
            head += 1;
            for(int j=0; j<4; j++){
                int newX = X + direction[j][0];
                int newY = Y + direction[j][1];
                if(newX>=0 && newY>=0 && newX<gridSize && newY<*gridColSize && grid[newX][newY]==0){
                    grid[newX][newY] = 2;
                    queue[tail][0] = newX;
                    queue[tail][1] = newY;
                    tail += 1;
                }
            }
        }
    }
    if(!hasLand || !hasWater) return -1;
    return step;
}