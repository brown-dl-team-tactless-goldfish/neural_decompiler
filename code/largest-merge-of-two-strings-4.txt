/*
    <--- greedy
    |

*/

class Solution {
public:
    string largestMerge(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();

        char ans[n1 + n2 + 1];
        ans[n1 + n2] = '\0';

        int r = 0; // writing pointer
        int i = 0;
        int j = 0;
        while (i < n1 && j < n2) {
            char c;
            if (larger(i, j, word1, word2) == 0) {
                c = word1[i++];
            } else {
                c = word2[j++];
            }
            ans[r++] = c;
        }
        if (i >= n1 && j >= n2) {
            return ans;
        }

        if (i >= n1) {
            while (j < n2) {
                ans[r++] = word2[j];
                j++; 
            }
        }

        if (j >= n2) {
            while (i < n1) {
                ans[r++] = word1[i];
                i++; 
            }
        }

        return ans;
    }

private:
    // which one is larger (lexicographically) between word1[i:] and word2[j:]?
    // return 0 if first is larger
    // 1, otherwise
    int larger(int i, int j, string& word1, string& word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        while (i < n1 && j < n2) {
            int comp = word1[i] - word2[j];
            
            if (comp > 0) return 0;
            if (comp < 0) return 1;
            i++;
            j++;
        }

        // same no matter
        if (i == n1 && j == n2) {
            return 0;
        }

        if (i == n1) return 1;
        if (j == n2) return 0;

        return -1;
    }
};
