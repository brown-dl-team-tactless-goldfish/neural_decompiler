public class Solution {
    static Dictionary<string, bool> mp;
    static List<string>[] a;
    static int cnt = 0;
    static bool Compare(StringBuilder s, string t) {
        for (int i = 0; i < s.Length; ++i) {
            if (s[i] != t[i]) return false;
        }
        return true;
    }
    static void dfs (string s, int total) {
        cnt = Math.Max(total, cnt);
        mp[s] = true;
        int n = s.Length + 1;
        if (n >= a.Length) return;
        foreach (string c in a[n]) {
            if (mp.ContainsKey(c)) continue;
            bool f = false;
            for (int i = 0; i < c.Length; ++i) {
                StringBuilder t = new StringBuilder();
                for (int j = 0; j < c.Length; ++j) {
                    if (i != j) {
                        t.Append(c[j]);
                    }
                }
                if (Compare(t, s)) {
                    f = true;
                    break;
                }
            }
            if (f) {
                dfs(c, total + 1);
            }
        }
    }
    public int LongestStrChain(string[] words) {
        mp = new Dictionary<string, bool>();
        int n = 0;
        for (int i = 0; i < words.Length; ++i) {
            n = Math.Max(n, words[i].Length);
        }
        a = new List<string>[n + 1];
        for (int i = 0; i <= n; ++i) {
            a[i] = new List<string>();
        }
        for (int i = 0; i < words.Length; ++i) {
            a[words[i].Length].Add(words[i]);
        }
        int res = 0;
        for (int i = 1; i <= n; ++i) {
            foreach(string s in a[i]) {
                if (mp.ContainsKey(s)) continue;
                cnt = 1;
                dfs(s, 1);
                res = Math.Max(cnt, res);
            }
        }
        return res;
    }
}