class Solution {
public:
    int validSubarraySize(vector<int>& nums, int threshold)
    {
        int n = nums.size();
        vector<int> left(n+1), right(n+1);
        stack<int> l, r;
        for(int i = 0; i < n; i++)
        {
            while(!l.empty() && nums[i] <= nums[l.top()])
                l.pop();
            if(!l.empty())
                left[i] = l.top();
            else
                left[i] = -1;
            l.push(i);
        }
        //cout << 1 << " ";
        for(int i = n-1; i >= 0; i--)
        {
            while(!r.empty() && nums[i] <= nums[r.top()])
                r.pop();
            if(!r.empty())
                right[i] = r.top();
            else
                right[i] = n;
            r.push(i);
        }
        for(int i = 0; i < n; i++)
        {
            int k = right[i]-left[i]-1;
            double limit = (double)threshold/(double)k;
            if(nums[i] > limit)
                return k;
        }
        return -1;
    }
};