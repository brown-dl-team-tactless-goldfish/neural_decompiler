int fun(int idx, int*arr,int arrSize,int k,int *dp){
    if(idx==arrSize) return 0;
    int maxidx = INT_MIN;
    int maxAns = INT_MIN;
    int len=0;
    if(dp[idx]!=-1) return dp[idx];
    for(int i= idx; i<fmin(idx+k,arrSize);i++){
        len++;
        maxidx=fmax(maxidx,arr[i]);
        int sum = len * maxidx + fun (i+1,arr,arrSize,k,dp);
        maxAns=fmax(maxAns,sum);
    }
    return dp[idx] = maxAns;
    
}
int maxSumAfterPartitioning(int* arr, int arrSize, int k){
    int dp [arrSize];
    memset(dp,-1,sizeof(int)*arrSize);
   return fun(0,arr,arrSize,k,dp);
}