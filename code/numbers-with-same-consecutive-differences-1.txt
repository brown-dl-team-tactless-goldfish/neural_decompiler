/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* helper(int N, int k, int* returnSize, int pre,int* map){
    int* ret=(int*)calloc(1000,sizeof(int));
    *returnSize = 0;
    if(N==1){
        if(pre+k<10){
            ret[(*returnSize)++] = pre+k;
        }
        if(pre-k>=0){
            ret[(*returnSize)++] = pre-k;
        }
        return ret;
    }
    if(pre+k<10){
        int size=0;
        int* tmp_ret=helper(N-1,k,&size,pre+k,map);
        for(int i=0;i<size;i++){
            ret[(*returnSize)++]=tmp_ret[i]+(pre+k)*map[N-1];
        }
    }
    if(pre-k>=0){
        int size=0;
        int* tmp_ret=helper(N-1,k,&size,pre-k,map);
        for(int i=0;i<size;i++){
            ret[(*returnSize)++]=tmp_ret[i]+(pre-k)*map[N-1];
        }
    }
    return ret;
}
int* numsSameConsecDiff(int N, int K, int* returnSize) {
    int* ret=(int*)calloc(5000,sizeof(int));
    int k=K;
    int map[9]={1,10,100,1000,10000,100000,1000000,10000000,100000000};
    *returnSize = 0;
    if(N==1){
        for(int i=0;i<10;i++){
            ret[(*returnSize)++]=i;
        }
        return ret;
    }
    if(k==0){
        for(int i=1;i<10;i++){
            for(int j=0;j<N;j++){
                ret[(*returnSize)]+=i*map[j];
            }
            (*returnSize)++;
        }
        return ret;
    }
    for(int i=1;i<10;i++){
        if(i+K<10||i-K>=0){
            int size=0;
            int* tmp_ret=helper(N-1,k,&size,i,&map[0]);
            for(int j=0;j<size;j++){
                ret[(*returnSize)++]=tmp_ret[j]+i*map[N-1];
            }
        }
    }
    return ret;
}