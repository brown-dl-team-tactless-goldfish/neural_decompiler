class Solution {
    
    private int ans;
    
    public int maximumRows(int[][] mat, int cols) {
        var masks = new int[mat.length];
        // convert every row to bitmask
        for (int r = 0; r < mat.length; r++) {
            var mask = 0;
            for (int c = 0; c < mat[r].length; c++)
                if (mat[r][c] == 1)
                    mask |= 1 << (mat[r].length - c - 1);
            masks[r] = mask;
        }       
        // brute force all combination of columns
        backtrack(0, 0, cols, mat[0].length, masks);
        return ans;
    }
    
    private void backtrack(int idx, int mask, int c, int limit, int[] masks) {
        if (c == 0) {
            // calculate ans
            var count = 0;
            for (int m : masks)
                if ((mask | m) == mask)
                    count++;
            ans = Math.max(ans, count);
            return;
        }

        if (idx == limit)
            return; // nothing to do

        // include current element
        backtrack(idx + 1, mask | (1 << (limit - idx - 1)), c - 1, limit, masks);
        
        // exclude current element
        backtrack(idx + 1, mask, c, limit, masks);
    }
}