class Solution {
public:
    void solve(vector<vector<int>>& a, int k,int ind,int n,int m)
    {
        vector<int> v;
        for(int j = ind;j<m-ind;j++)
        {
            v.push_back(a[ind][j]);
        }
        for(int i = ind + 1;i<n-ind;i++)
        {
            v.push_back(a[i][m-ind - 1]);
        }
        for(int j = m-ind-2;j>=ind;j--)
        {
            v.push_back(a[n-ind-1][j]);
        }
        for(int i = n-ind-2;i>ind;i--)
        {
            v.push_back(a[i][ind]);
        }
        
        // for(auto it:v)cout<<it<<" ";
        // cout<<endl;
        
        k = k%(v.size());
        
        // cout<<k<<endl;
        
        vector<int> t1,t2;
        for(int i = 0;i<k;i++)
            t1.push_back(v[i]);
        for(int i = k;i<v.size();i++)
            t2.push_back(v[i]);
        for(auto it:t1)
        {
            t2.push_back(it);
        }
        
        // for(auto it:t2)cout<<it<<" ";
        // cout<<endl;
        // cout<<"it1 done"<<endl;
        
        int c = 0;
        for(int j = ind;j<m-ind;j++)
        {
            a[ind][j] = t2[c++];
        }
        for(int i = ind + 1;i<n-ind;i++)
        {
            a[i][m-ind - 1] = t2[c++];
        }
        for(int j = m-ind-2;j>=ind;j--)
        {
            a[n-ind-1][j] = t2[c++];
        }
        for(int i = n-ind-2;i>ind;i--)
        {
            a[i][ind] = t2[c++];
        }
        return;
    }
    
    vector<vector<int>> rotateGrid(vector<vector<int>>& a, int k) {
        int n = a.size();
        int m = a[0].size();
        for(int i = 0;i<min(n,m)/2;i++)
        {
            solve(a,k,i,n,m);
        }
        return a;
    }
};