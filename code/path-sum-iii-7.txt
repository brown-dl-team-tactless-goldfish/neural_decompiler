void counter(struct TreeNode* root, int* count, int sum){
    if (!root || root == NULL){
        return;
    }
    if (root->val ==sum){
        *count += 1;
    }
    counter(root->left, count, sum - root->val);
    counter(root->right, count ,sum -root->val);
}

void restartedcounter(struct TreeNode* root, int* count, int sum){
    if (!root || root == NULL){
        return;
    }
    if (root->val == sum){
        *count += 1;
    }
    counter(root->left, count, sum- root->val);
    restartedcounter(root->left, count, sum);
    counter(root->right, count, sum - root->val);
    restartedcounter(root->right,count, sum);
}

void firstcounter(struct TreeNode* root, int* count, int sum){
    if (!root || root ==NULL){
        return;
    }
    if (root->val == sum){
        *count +=1;
        printf("%d\t%d", root->val, sum);
    }
    restartedcounter(root->left, count, sum);
    counter(root->left, count, sum - root->val);
    restartedcounter(root->right, count, sum);
    counter(root->right, count, sum - root->val);
}

int pathSum(struct TreeNode* root, int sum){
    if (!root){
        return 0;
    }
    int count=0, *ptr;
    ptr = &count;
    firstcounter(root, ptr, sum);
    return count;
}