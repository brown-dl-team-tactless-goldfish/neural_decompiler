public int MinSwaps(int[][] grid) {
	var search = grid.Select((_, i) => grid.Length - i - 1).ToArray();
	var zeroes = grid.Select((r, i) => r.Reverse().TakeWhile(x => x == 0).Count()).ToArray();
	var swaps = 0;

	for (var i = 0; i < grid.Length; i++) {
		var swap = (src: -1, dest: -1);

		for (var j = i; j < grid.Length; j++) {
			if (zeroes[j] >= search[i]) {
				swap = (src: j, dest: i);
				break;
			}
		}

		if (swap == (-1, -1)) return -1;

		swaps += swap.src - swap.dest;
		for (var k = swap.src; k > swap.dest; k--)
			(zeroes[k], zeroes[k - 1]) = (zeroes[k - 1], zeroes[k]);
	}

	return swaps;
}