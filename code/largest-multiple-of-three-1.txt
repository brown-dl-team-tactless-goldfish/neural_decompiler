int cmpFunc(const void *a, const void *b){
    return *(int *)a - *(int *)b;
}

void largestMultipleOfThreeBT(int* digits, int digitsSize, int sum, int digitNums, int digitCount, int *collect, int *found, char *result, int *resultSum){
    int i;
    if(digitCount==digitNums){
        //check sum
        for(i=0;i<digitsSize;i++){            
            if(collect[i]==0){
                sum -= digits[i];
            }
        }
        
        //found
        if(sum%3==0){
            int resultCount = digitsSize-digitCount-1;
            for(i=0;i<digitsSize;i++){
                if(collect[i]==1)
                    result[resultCount--] = '0' + digits[i];     
            }                   
            result[digitsSize-digitCount] = '\0';
            
            *resultSum = sum;
            *found = 1;
        }
        return;
    }
    
    for(i=0;i<digitsSize;i++){
        if(collect[i]==1){
            collect[i] = 0;
            largestMultipleOfThreeBT(digits, digitsSize, sum, digitNums, digitCount+1, collect, found, result, resultSum);
        //for stop when founding result
        if( (*found) == 1) return;
            collect[i] = 1;
        }
    }
}


char * largestMultipleOfThree(int* digits, int digitsSize){
    
    char *result = (char *)malloc(sizeof(char)*(digitsSize+1));
    int i, sum = 0;
    for(i=0;i<digitsSize;i++)
        sum += digits[i];
    
    qsort(digits, digitsSize, sizeof(int), cmpFunc);
    
    int collect[digitsSize];
    for(i=0;i<digitsSize;i++)
        collect[i] = 1;
        
    int found = 0;
    for(i=0;i<digitsSize;i++){
        largestMultipleOfThreeBT(digits, digitsSize, sum, i, 0, collect, &found, result, &sum);
        
        if(found==1){
            if(sum==0) return "0";
            return result;
        }       
    }
    
    return "";
}



