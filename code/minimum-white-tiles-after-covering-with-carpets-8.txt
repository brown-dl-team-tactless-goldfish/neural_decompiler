        public class Solution
        {
            public int MinimumWhiteTiles(string floor, int numCarpets, int carpetLen)
            {
                int[,] m = new int[floor.Length + 1, numCarpets + 1];
                int count = 0;

                //Setup first column when there is no carpets available.  
                for (int r = floor.Length - 1; r >= 0; r--)
                {
                    if (floor[r] == '1')
                    {
                        count++;
                        m[r, 0] = count;
                    }
                    else
                    {
                        m[r, 0] = m[r + 1, 0];
                    }
                }

				//Looping through each column.  Each column represents the num of available carpets.
                for (int c = 1; c <= numCarpets; c++)
                {
                    for (int r = floor.Length - 1; r >= 0; r--)
                    {
                        if (floor[r] == '0')
                        {
                            m[r, c] = m[r + 1, c];
                        }
                        else
                        {
                            //current tile of the floor, the cost of using the carpet.
							//cost means the minimum num of white tiles visible.
                            var a = r + carpetLen <= floor.Length ? m[r + carpetLen, c - 1] : 0;

                            //compare it with no carpet at the current tile, Take the smaller one.
                            m[r, c] = Math.Min(a, m[r + 1, c] + 1);
                        }
                    }
                };
                return m[0, numCarpets];

            }
        }