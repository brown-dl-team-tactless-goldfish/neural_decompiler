struct fraction {
	int numerator;
	int denominator;

	bool equals(const fraction &other) {
		return ((long long)numerator)*other.denominator == ((long long)denominator)*other.numerator;
	}
};

int minimumLines(vector<vector<int>>& stockPrices) {
	int n = stockPrices.size();
	if (n <= 1) return 0; // need at least 2 points to have a 1 line

	sort(stockPrices.begin(), stockPrices.end()); // sort by the x-axis

	int num_lines = 1;
	fraction slope_current = fraction{ (stockPrices[1][1] - stockPrices[0][1]) , (stockPrices[1][0] - stockPrices[0][0]) };
	fraction slope_next;
	for (int i = 1; i < n - 1; i++) {
		slope_next = fraction{ (stockPrices[i+1][1] - stockPrices[i][1]) , (stockPrices[i+1][0] - stockPrices[i][0]) };
		if (!slope_next.equals(slope_current)) num_lines++; // slopes are different increment line count
		slope_current = slope_next;
	}
	return num_lines;
}