class Solution {
public:
    string stoneGameIII(vector<int>& stones) {
        int N = stones.size();
        
        //dp[i][p][q] - denotes the optimal points gained by q when p had the current turn from i...N-1
        
        vector<vector<vector<int>>> dp(N, vector<vector<int>>(2, vector<int>(2, 0)));
        
        
        for(int i=N-1;i>=0;i--){                        
            for(int t=0;t<2;t++){
                int a = stones[i] +  (i+1<N ? dp[i+1][1-t][t] : 0);
                int b = stones[i]+(i+1 < N ? stones[i+1] : 0)+(i+2 <N ? dp[i+2][1-t][t] : 0);
                int c = stones[i]+(i+1 < N ? stones[i+1] : 0)+(i+2 < N ? stones[i+2] : 0)+(i+3<N ? dp[i+3][1-t][t] : 0);
                int _max = max(a, max(b,c));
                if(_max==a){
                    dp[i][t][t] = a;
                    dp[i][t][1-t] = (i+1 < N ? dp[i+1][1-t][1-t] : 0);
                } else if(_max==b){
                    dp[i][t][t] = b;
                    dp[i][t][1-t] = (i+2 < N ? dp[i+2][1-t][1-t] : 0);
                } else {
                    dp[i][t][t] = c;
                    dp[i][t][1-t] = (i+3 < N ? dp[i+3][1-t][1-t] : 0);
                }   
            }            
        }
        
        int a = dp[0][0][0];
        int b = dp[0][0][1];
        if(a==b) return "Tie";
        else if(a > b) return "Alice";
        else return "Bob";
    }
};

static bool a = ios_base::sync_with_stdio(false);
static ostream *b = cin.tie(nullptr);