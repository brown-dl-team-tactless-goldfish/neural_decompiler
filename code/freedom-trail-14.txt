class Solution {
public:
    typedef array<int, 3> ai;
    int findRotateSteps(string ring, string key) {
        map<char, vector<int>> m;
        for(int i = 0; i < ring.size(); i++) m[ring[i]].push_back(i);
        int dist[102][102] = {};
        for(auto & i : dist) for(auto & j : i) j = INT_MAX;
        priority_queue<ai, vector<ai>, greater<ai>> q; // distance, pos, index
        for(auto i : m[key[0]]) q.push({1+min(i, (int)ring.length()-i), i, 0});
        while(!q.empty()){
            auto [d, t, i] = q.top();
            q.pop();
            if(i == key.size()-1) return d;
            for(auto j : m[key[i+1]]){
                int steps = 1+min({abs(t-j), t+(int)ring.length()-j, (int)ring.length()-t+j});
                if(d+steps<dist[i+1][j]){
                    dist[i+1][j] = d+steps;
                    q.push({d+steps, j, i+1});
                }
            }
        }
        return -1; 
    }
};