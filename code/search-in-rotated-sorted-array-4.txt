int search(int* nums, int numsSize, int target){
    if (target > nums[numsSize - 1] && target < nums[0])
    {
        return -1;
    }
    // if target > nums[0], we set left = 0
    // if target < nums[numsSize - 1], we set right = numsSize - 1
    if (target == nums[0]) return 0;
    if (target == nums[numsSize - 1]) return numsSize - 1;
    
    int left = 0, right = numsSize - 1;
    if (nums[0] > nums[numsSize - 1])
    {
        // we have a pivot
        if (target > nums[0]) // left side
        {
            while (left < right)
            {
                int mid = (left + right) / 2; // won't be overflow
                if (nums[mid] > target || nums[mid] < nums[numsSize - 1])
                {
                    right = mid - 1;
                }
                else if (nums[mid] < target)
                {
                    left = mid + 1;
                }
                else
                {
                    return mid;
                }
            }
        }
        else
        {
            while (left < right)
            {
                int mid = (left + right) / 2;

                if (nums[mid] < target || nums[mid] > nums[0])
                {
                    left = mid + 1;
                }
                else if (nums[mid] > target)
                {
                    right = mid;
                }
                else
                {
                    return mid;
                }
            }
        }
        return nums[left] == target ? left : -1;
    }
    else
    {
        while (left < right)
        {
            int mid = (left + right) / 2; // won't be overflow
            if (nums[mid] < target)
            {
                left = mid + 1;
            }
            else if (nums[mid] > target)
            {
                right = mid - 1;
            }
            else
            {
                return mid;
            }
        }
        
        return nums[left] == target ? left : -1;
    }
}