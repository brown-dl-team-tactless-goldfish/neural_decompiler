class Solution {
public:
    bool canChoose(vector<vector<int>>& groups, vector<int>& nums) {
        // Sliding the window
        int i = 0, j = 0;
        while (i < nums.size() && j < groups.size())
        {
            const auto& v = groups[j];
            int k = 0;
            while (k < v.size() && k + i < nums.size() && v[k] == nums[k + i])
            {
                ++k; // start frim the 1st group, we find if nums[i:i+group_size-1] equals the current group 
            }
            
            if (k >= v.size())
            {
                ++j;
                i += k; // if nums[i:i+group_size-1] equals the current group, we move to the next group and index i + k
            }
            else
            {
                ++i; // otherwise we keep looking for the current group from the index i + 1
            }
        }
        
        return j >= groups.size();
    }
};