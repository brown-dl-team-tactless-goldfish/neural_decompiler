res_num = 0;
ret = (int **)malloc(sizeof(int*)*3000);
kk = 3000;
for (ii=0; ii< numsSize; ii++)
{
    if (ii && nums[ii] == nums[ii-1])
        continue;
    dnode = search_node(&dht, NULL, nums[ii]);
    if (dnode)
        continue;
    add_node(&dht, ii, nums[ii]);
  //  printf("nums[ii] %d\n",nums[ii]);
    for (jj=ii+1; jj< numsSize; jj++)
    {
         /*if (nums[ii] == 0 && nums[jj]==0)
                printf(" num[ii] %d, nums[jj] %d , -(nums[ii]+nums[jj]) %d\n",
                  nums[ii], nums[jj], -(nums[ii]+nums[jj])); */
        val = -(nums[ii]+nums[jj]);
        node = search_node_index(&nht, val, ii, jj);
        if (!node)
           continue;
        if (1)
        {
            match=0;
            #if 1
            for (ww= 0; ww< res_num; ww++)
            {
                if (ret[ww][0] ==nums[ii])
                {
                     if ((ret[ww][1] == nums[jj]) ||
                         (ret[ww][1] == val))
                     {
                         match =1;
                         break;
                     }
                 }
                if (ret[ww][0] ==nums[jj])
                {
                      if ((ret[ww][1] == nums[ii]) ||
                          (ret[ww][1] == val))
                      {
                          match =1;
                          break;
                      }
                  }
                if (ret[ww][0] ==val)
                {
                      
                       if ((ret[ww][1] == nums[jj]) ||
                          (ret[ww][1] == nums[ii]))
                      {
                          match =1;
                          break;
                      }
                }
            }
            if (match)
                 continue;
            #endif

            if (res_num > (kk-1))
            {
               // printf("realloc res_num %d\n", res_num);
                ret = (int**)realloc(ret, sizeof(int*)*(kk+100));
                kk+=100;
                if (!ret)
                {
                 //   printf("realloc failure kk %d\n",kk+100);
                    return 0;
                }
            }
            ret[res_num]= (int *)malloc(sizeof(int)*3);
            ret[res_num][0] = nums[ii];
            ret[res_num][1] = nums[jj];
            ret[res_num][2] = node->num;
            res_num++;
           // printf("res_num %d, a %d, b %d, c %d\n", res_num, nums[ii], nums[jj], node->num);
        }
    }
}

if (res_num)
{
    *returnColumnSizes = (int*)malloc(sizeof(int)*res_num);
    for (ii=0; ii<res_num;ii++)
    {
       // printf("ii: %d\n",ii);
        (*returnColumnSizes)[ii] = 3;
    }
}
*returnSize = res_num;
free_ht(&dht);
free_ht(&nht);
return ret;