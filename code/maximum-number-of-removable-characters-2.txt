bool isSubsequence(char *s, char *p, bool *remove) {
    int sLen = strlen(s), pLen = strlen(p), i = 0, j = 0;
    while(i < sLen && j < pLen) {
        // skip marked indices in remove or for characters mismatches
        if(remove[i] || s[i] != p[j]) {
            i++;
            continue;
        }
        i++; j++;
    }
    return j == pLen;
}

int maximumRemovals(char * s, char * p, int* removable, int removableSize){
    int l = 0, r = removableSize - 1, mRemovals = 0;
    
    while(l <= r) {
        int m = l + (r - l) / 2;
        bool *remove = calloc(sizeof(bool), 100000);
    
        // mark all removable indices from 0 to m 
        for(int i = 0; i <= m; i++) 
            remove[removable[i]] = true;
        
        if(isSubsequence(s, p, remove)) {
            mRemovals = fmax(mRemovals, m+1);
            l = m + 1;
        } else {
            r = m - 1;
        }
        
        free(remove);
    }
    return mRemovals;
}