

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* avoidFlood(int* rains, int rainsSize, int* returnSize){
    int n = rainsSize;
    *returnSize = n;
    int* ans = calloc(n , sizeof(int));
    int* stack = malloc( n * sizeof(int));
    int s_idx = 0;
    int top = 0;
    int N = 2* n;
    int** hash = calloc(N , sizeof(int*)) ;
    for(int i = 0; i < n; i++){
        if( rains[i] == 0){
            stack[s_idx] = i;
            s_idx++;
            ans[i] = 1;
        }
        else{
            ans[i] = -1;
            int val = rains[i];
            int d = val;
            while(1){
                if(hash[d % N] == NULL){
                    hash[d % N] = malloc(2*sizeof(int));
                    hash[d % N][0] = val;
                    hash[d % N][1] = i;
                    break;
                }
                else if(hash[d % N][0] == val){
                    if(top == s_idx){
                        *returnSize = 0;
                        goto exit;
                    }    
                    for(int j = top; j < s_idx; j++){
                        if(stack[j] > hash[d % N][1]){                            
                            ans[stack[j]] = val;
                            stack[j] = -1;
                            hash[d % N][1] = i;
                            break;
                        }
                        if(j == s_idx-1){
                            *returnSize = 0;
                            goto exit;
                        }
                    }
                    break;
                }
                else
                    d++;
            }
            while(top < s_idx && stack[top] == -1){
                top++;
            }
        }
    }
    exit:
    free(stack);
    for(int i = 0; i < N; i++){
        if(hash[i])
            free(hash[i]);
    }
    free(hash);
    return ans;
}