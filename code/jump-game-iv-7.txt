    int minJumps(vector<int>& arr) {
        const int n = arr.size();
        if(n == 1) return 0;
        unordered_map<int, unordered_set<int>> m;
        for(int i=0;i<n;i++) m[arr[i]].insert(i);
        vector<bool> visited(n, false);
        visited[n-1] = true;
        queue<pair<int,int>> q; //index, step
        q.push(pair(n-1,0));
        while(!q.empty()){
            auto [i, step] = q.front(); q.pop();
            vector<int> neibs;
            if(i<n-1) neibs.push_back(i+1);
            if(i>0) neibs.push_back(i-1);
            for(auto j : m[arr[i]]) neibs.push_back(j);
            m.erase(arr[i]);
            for(auto j:neibs){
                if(visited[j]) continue;
                visited[j] = true;
                if(j == 0) return step+1;
                q.push(pair(j, step+1));
            }            
        }
        return -1;
    }