/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** sortTheStudents(int** score, int scoreSize, int* scoreColSize, int k,
                      int* returnSize, int** returnColumnSizes) {
    int** sorted = malloc(scoreSize * sizeof(*score));
    for (int i = 0; i < scoreSize; i++) {
        sorted[i] = malloc(*scoreColSize * sizeof(**score));
    }

    int* map = malloc(sizeof(int) * 100001);
    for (int i = 0; i <= 100000; i++) {
        map[i] = -1;
    }

    int max = 0;
    // Compute
    for (int r = 0; r < scoreSize; r++) {
        map[score[r][k]] = r;
        if (score[r][k] > max) max = score[r][k];
    }

    int idx = scoreSize - 1;
    for (int i = 1; i <= max; i++) {
        if (map[i] != -1) {
            for (int c = 0; c < *scoreColSize; c++) {
                sorted[idx][c] = score[map[i]][c];
            }
            idx--;
        } else
            continue;
    }
    //

    free(map);
    map = NULL;

    *returnSize = scoreSize;
    *returnColumnSizes = malloc(sizeof(int) * scoreSize);
    for (int i = 0; i < scoreSize; i++) {
        (*returnColumnSizes)[i] = *scoreColSize;
    }

    return sorted;
}