
class Solution {
public:
    int countSpecialSubsequences(vector<int>& nums) {
        int n = nums.size();
		vector<int> dp0(n, 0), dp1(n, 0), dp2(n, 0);
		const int mod = 1e9 + 7;
		dp0[0] = nums[0] == 0;
		for (int i = 1; i < n; i++) {
			if (nums[i] == 0) {
				dp0[i] = 2 * dp0[i - 1] + 1;
				dp0[i] %= mod;
			} else dp0[i] = dp0[i - 1];
		}
		for (int i = 1; i < n; i++) {
			if (nums[i] == 1) {
				dp1[i] = (2 * dp1[i - 1]) % mod + dp0[i];
				dp1[i] %= mod;
			} else {
				dp1[i] = dp1[i - 1];
			}
		}
		for (int i = 2; i < n; i++) {
			if (nums[i] == 2) {
				dp2[i] = (2 * dp2[i - 1]) % mod + dp1[i];
				dp2[i] %= mod;
			} else dp2[i] = dp2[i - 1];
		}
		return dp2[n - 1];
    }
};

