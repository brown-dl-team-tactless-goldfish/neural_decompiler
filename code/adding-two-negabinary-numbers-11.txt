class Solution {
public:
    vector<int> addNegabinary(vector<int>& arr1, vector<int>& arr2) {
        vector<int> ret;
        int i = arr1.size() - 1;
        int j = arr2.size() - 1;
        int carry = 0;
        while (i >= 0 || j >= 0 || carry != 0) {
            auto n = (i >= 0 ? arr1[i] : 0) + (j >= 0 ? arr2[j] : 0) + carry;
            if (n >= 2) {
				// Since the sign for the upper bit must be different, `carry` should be -1.
                n -= 2;
                carry = -1;
            } else if (n < 0) {
                // Borrow one bit from upper. Note that n must be `-1` and also negative weights are not allowed in base-2 representation.
				// For example, current is at (-2)^n, so the upper one is at (-2)^(n+1). 
				// As we borrow one bit from the upper, current would be -(-2)^(n+1)+(-1)*(-2)^n = 2*(-2)^n+(-1)*(-2)^n = (-2)^n, making its weight into a positive `1`.
                n = 1;
                carry = 1;
            } else {
                carry = 0;
            }
            ret.push_back(n);
            if (i >= 0) --i;
            if (j >= 0) --j;
        }
        
        while (ret.size() > 1 && ret.back() == 0) {
            ret.pop_back();
        }
        reverse(ret.begin(), ret.end());
        return ret;
    }
};