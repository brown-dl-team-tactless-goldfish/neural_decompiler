class Solution {
public:
    int minFlips(string s) {
        auto begin = cost(s);
        reverse(s.begin(), s.end());
        auto end = cost(s);
                        
        int ans = INT_MAX;
        for (int i = 0; i <= s.size(); ++i)
            ans = min(ans, min(begin[0][i] + end[1][s.size() - i], begin[1][i] + end[0][s.size() - i]));
        return ans;
    }
    
    vector<vector<int>> cost(string s) {
        vector<vector<int>> begin(2, vector<int>(s.size() + 1));
        for (int i = 1; i <= s.size(); ++i) {
            if ((i % 2 == 0 && s[i - 1] == '0') || (i % 2 == 1 && s[i - 1] == '1')) {
                begin[0][i] = (i > 0 ? begin[0][i - 1] : 0);
                begin[1][i] = (i > 0 ? begin[1][i - 1] : 0) + 1;
            }
            else if ((i % 2 == 0 && s[i - 1] == '1') || (i % 2 == 1 && s[i - 1] == '0')) {
                begin[0][i] = (i > 0 ? begin[0][i - 1] : 0) + 1;
                begin[1][i] = (i > 0 ? begin[1][i - 1] : 0);
            }                        
        }
        return begin;
    }
};