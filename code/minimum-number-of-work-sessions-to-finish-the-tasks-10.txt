class Solution {
    vector<int> tasks;
    int sessionTime;
    int result;
    vector<int> sessions;
    void dfs(int idx) {
        if (sessions.size() >= result) {
            return;
        }
        if (idx == tasks.size()) {
            result = sessions.size();
            return;
        }
        for (int i = 0; i < sessions.size(); i++) {
            if (sessions[i] + tasks[idx] <= sessionTime) {
                sessions[i] += tasks[idx];
                dfs(idx + 1);
                sessions[i] -= tasks[idx];
            }
        }
        sessions.push_back(tasks[idx]);
        dfs(idx + 1);
        sessions.pop_back();
    }
public:
    int minSessions(vector<int>& tasks, int sessionTime) {
        this->tasks = tasks;
        this->sessionTime = sessionTime;
        result = tasks.size();
        dfs(0);
        return result;
    }
};