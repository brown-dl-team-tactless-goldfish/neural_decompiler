class Solution {
public:
    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) {
        
        int n=boxes.size();
        
        vector<int> pref_sum(n,0);
        vector<long long int> pref_wgt(n+1,0);
        vector<long long int> pref_box(n+1,0);
        for(int i=0;i<n;i++)
        {
            pref_wgt[i+1]=pref_wgt[i]+boxes[i][1];
        }
        
        for(int i=1;i<n;i++)
        {
            pref_sum[i]=pref_sum[i-1];
            if(boxes[i][0]!=boxes[i-1][0])      pref_sum[i]++;
        }
        
        vector<long long int> ans(n+1,0);
        list<int> lst;
        
        for(int i=0;i<n;i++)
        {
            
            //box setting
            while(!lst.empty() and i-lst.back()>=maxBoxes)
            {
                lst.pop_back();
            }
            
            //wgt setting
            while(!lst.empty() and pref_wgt[i+1]-pref_wgt[lst.back()]>maxWeight)
            {
                lst.pop_back();
            }
            
            //min setting similar to sliding window minimum
            if(lst.empty())
            {
                ans[i+1]=ans[i]+2;
            }
            else
            {
                ans[i+1]=ans[i]+2;
                int node=lst.back();
                ans[i+1]=min(ans[i+1],pref_sum[i]+ans[node]-pref_sum[node]+2);
            }
            
            while(!lst.empty() and ans[lst.front()]-pref_sum[lst.front()]>ans[i]-pref_sum[i])
            {
                lst.pop_front();
            }
            
            lst.push_front(i);
        }
        
        return ans[n];
    }
};