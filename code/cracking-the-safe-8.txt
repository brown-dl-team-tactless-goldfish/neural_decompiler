public class Solution 
{
    public string CrackSafe(int n, int k) 
    {
        var sb = new StringBuilder();
        for (int i = 0; i < n; i++) 
            sb.Append('0');
        DFS(n, k, sb, new HashSet<string>(new string[] {sb.ToString()}));
        return sb.ToString();
    }
    
    private bool DFS(int n, int k, StringBuilder sb, HashSet<string> visited) 
    {
        if (visited.Count == (int) (Math.Pow(k, n))) return true;
        var prev = sb.ToString(sb.Length - (n - 1), n - 1);
        for (int i = 0; i < k; i++) 
        {
            var next = prev + i;
            if (visited.Add(next)) 
            {
                sb.Append(i);
                if (DFS(n, k, sb, visited)) 
                    return true;
                else 
                {
                    visited.Remove(next);
                    sb.Remove(sb.Length - 1, 1);
                }
            }
        }
        
        return false;
    }
}