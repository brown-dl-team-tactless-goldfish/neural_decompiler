class Solution {
public:
    int m, n;
    vector<vector<int>>dp;
    vector<int>price;
    int solve(int idx, int x, vector<vector<int>>& cost)
    {
        if(dp[idx][x] != -1)return dp[idx][x];
        int ans;
        if(idx == m)
        {
            ans = 0;
            for(int i = 0; i < n; i++)
                if((x & (1 << i)) == 0)
                    ans += price[i];
        }
        else
        {
            ans = INT_MAX;
            for(int i = 0; i < n; i++)
            {
                ans = min(ans, solve(idx + 1, (x | (1 << i)), cost) + cost[idx][i]);
            }
        }
        return dp[idx][x] = ans;
    }
    int connectTwoGroups(vector<vector<int>>& cost) {
        m = cost.size();
        n = cost[0].size();
        dp.resize(m + 1, vector<int>((1 << n), -1));
        price.resize(n, INT_MAX);
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                price[i] = min(price[i], cost[j][i]);
        return solve(0, 0, cost);
    }
};