class Solution {
public:
    vector<int>dir={1,0,-1,0,1};
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
        queue<pair<int,int>>q;
        bool flag=false;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){q.emplace(i,j);}
                else{grid[i][j]=-1;flag=true;}
            }
        }
        while(!q.empty()){
            auto [r, c] = q.front(); q.pop();
            for (int i = 0; i < 4; ++i) {
                int nr = r + dir[i], nc = c + dir[i+1];
                if (nr < 0 || nr == n || nc < 0 || nc == n || grid[nr][nc] != -1) continue;
                grid[nr][nc] = grid[r][c] + 1;
                q.emplace(nr, nc);
            }
        }
        int ans=0;
        for(int i=0;i<n;i++){
            ans=max(ans,*max_element(grid[i].begin(),grid[i].end()));
        }
        if(!flag){return -1;}
        return ans-1;
    }
};