string longestDiverseString(int a, int b, int c)
{
	vector<pair<int, int>> count = { { a, 'a' }, { b, 'b' }, { c, 'c' } };
	string res = "";

	bool terminate = false;
	int idx = 0;
	while (count.size() > 1)
	{
		//sort the vector to make the character is sorted in decreaing order(which means the character with 
		//greatest count is always at count[0], since this vector only has 3 elments, this sort can be done in O(1) time
		sort(count.begin(), count.end(), greater<pair<int, int>>());
		
		//count how many characters are there except the one with maximum count;
		int remaining = 0;
		for (int i = 1; i < count.size(); i++)
			remaining += count[i].first;

		if (remaining == 0)
			break;
		//Basically, we definitely will take one of the most characters to make our string, meanwhile, if the number of other characters is less than
		//the number of the character with maximum count, it means we can put another one in our string
		//i.e.: if we have 7  a, 1  b, 1 c, then we should put "aa" in our string, otherwise, it will not be the longest happy string.
		//(because we will be lack of b and c in the following steps. 
		int cnt = 1 + (count[0].first > 1 && count[0].first > remaining);
		count[0].first -= cnt;
		count[1].first -= 1;
	
		//then put these characters in our string.
		while (cnt--)
			res += count[0].second;
		
		res += count[1].second;
		
		//if a character is used up, we erase its record from count, since we will sort count in the beginning of next round,
		//these properties will always remain.
		if (count[0].first == 0)
		{
			count.erase(0 + count.begin());
			if (count[0].first == 0)
			{
				count.erase(0 + count.begin());
				continue;
			}
		}
			
		if (count[1].first == 0)
			count.erase(1 + count.begin());
	}
	
	// when we break from the loop, it means two of these three kinds of characters have been used up,
	// and the last character of our string is definitely not the one with the maximum number. So, we try to add
	// some of the remamining characters into our string.
	int cnt = 0;
	//check whether all characters have been used up.
	if (count.size() > 0)
	{
	//if there are more than 2 characters remaining, we add 2 of them into our string, otherwise, we add one.
		cnt += (count[0].first > 1) + (count[0].first > 0);
		while (cnt--)
			res += count[0].second;
	}
		
	return res;
}