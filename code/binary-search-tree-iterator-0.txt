typedef struct {
    int* arr;
    int top;
    int size;
} BSTIterator;

void Inorder(struct TreeNode* root, BSTIterator* obj) {
    if (!root) return;
    Inorder(root->left, obj);
    obj->arr[(obj->top)++] = root->val;
    Inorder(root->right, obj);
}

int depth(struct TreeNode* root) {
    if (!root) return 0;
    return depth(root->left) + depth(root->right) + 1;
}

BSTIterator* bSTIteratorCreate(struct TreeNode* root) {
    BSTIterator* obj = (BSTIterator*) calloc(1, sizeof(BSTIterator));
    obj->arr = (int*) calloc(depth(root), sizeof(int));
    Inorder(root, obj);
    obj->size = obj->top;
    obj->top = 0;
    return obj;
}

int bSTIteratorNext(BSTIterator* obj) {
    return obj->arr[(obj->top)++];
}

bool bSTIteratorHasNext(BSTIterator* obj) {
    return obj->top < obj->size ? true : false;
}

void bSTIteratorFree(BSTIterator* obj) {
    free(obj->arr);
    free(obj);
}