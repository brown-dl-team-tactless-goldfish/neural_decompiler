class Solution {
public:
    int getUnusedBits(int num){
        int ans = 0;
        while(num != 0){
            if(num % 2){
                ans++;
            }
            num /= 2;
        }
        return ans;
    }
    
    int maximumANDSum(vector<int>& nums, int numSlots) {
        int len = 2 * numSlots;
        int mask = 1 << len;
        int i, j, k, l;
        
        vector<int> dp(mask);
        
        for(i = 1; i < mask; i++){
            l = len - getUnusedBits(i);
            
            for(j = 0; j < len; j++){
                k = 1 << j; 
                if(k & i){
                    if(l >= nums.size()){
                        dp[i] = max(dp[i], dp[i - k]);
                    }
                    else{
                        dp[i] = max(dp[i], dp[i - k] + (nums[nums.size() - l - 1] & (j / 2 + 1)));   
                    }
                }
            }
        }
        return dp[mask - 1];
    }
};