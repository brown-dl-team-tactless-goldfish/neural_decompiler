//monotone method
/*
we make the increaseing monotone stack,if the element is larger than the top of stack then push into stack
else we pop the top(A) of the stack until it is empty or the top(not A) of stack is smaller than the current element
then we Push the top(A) of stack into Stack

finally count the number of element in the stack
*/
#define max(a,b)(a>b?a:b)
void Push(int *Stack,int *StackSize,int val){
    Stack[(*StackSize)++]=val;    
}

int Pop(int *Stack,int *StackSize){
    if((*StackSize)==0)
        return -1;
    (*StackSize)--;
    return Stack[(*StackSize)];
}

int peek(int *Stack,int *StackSize){
    if((*StackSize)==0)
        return -1;
    
    return Stack[(*StackSize)-1];
}

int maxChunksToSorted(int* arr, int arrSize){
    int i,Stack[arrSize],StackSize=0,curmax=arr[0];
    
    for(i=0;i<arrSize;i++){
        curmax=max(curmax,arr[i]);
        
        while(StackSize&&arr[i]<peek(Stack,&StackSize)){
            Pop(Stack,&StackSize);    
        }
        
        Push(Stack,&StackSize,curmax);
    }
    
    return StackSize;
}``