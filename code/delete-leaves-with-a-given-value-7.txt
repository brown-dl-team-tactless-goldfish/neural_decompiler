/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool search(struct TreeNode*,int);
void delete(struct TreeNode*,struct TreeNode*,int,char);
void delete(struct TreeNode* root,struct TreeNode* proot,int target,char direction)
{
    if(!root->left && !root->right)
    {
        if(root->val==target)
        {
            if(direction=='l')
                proot->left=NULL;
            else
                proot->right=NULL;
        }
        else
            return;
    }
    else if(root->left && !root->right)
        delete(root->left,root,target,'l');
    else if(!root->left && root->right)
        delete(root->right,root,target,'r');
    else
    {
        delete(root->left,root,target,'l');
        delete(root->right,root,target,'r');
    }
}
bool search(struct TreeNode* root,int target)
{
    bool lf=false,rf=false;
    if(!root->left && !root->right)
    {
        if(root->val==target)
            return true;
        else
            return false;
    }
    else if(root->left && !root->right)
    {
        lf=search(root->left,target);
        return lf||rf;
    }
    else if(root->right && !root->left)
    {
        rf=search(root->right,target);
        return lf||rf;
    }
    else
    {
        lf=search(root->left,target);
        rf=search(root->right,target);
        return lf||rf;
    }
}
struct TreeNode* removeLeafNodes(struct TreeNode* root, int target)
{
    bool flag=true;
    while(flag)
    {
        flag=search(root,target);
        if(flag==false)
            break;
        else
        {
            if(!root->left && !root->right)
            {
                root=NULL;
                break;
            }
            else if(root->left && !root->right)
                delete(root->left,root,target,'l');
            else if (!root->left && root->right)
                delete(root->right,root,target,'r');
            else
            {
                delete(root->left,root,target,'l');
                delete(root->right,root,target,'r');
            }
        }
    }
    return root;
}