class Solution {
public:
    int knightDialer(int N) {

        int MOD = 1e9+7;
        
        vector<vector<int>> dp (N+1, vector<int> (10,0)); 
        
        int rows = dp.size(); // numbers
        int cols = dp[0].size(); // cols
        
        for (int c = 0; c < cols; c++) {
            dp[1][c] = 1;
        }
        
        vector<vector<int>> graph =  {{4,6},   // 0 -> 4,6
                                      {8,6},   // 1 -> 6,8 
                                      {7,9},   // 2 -> 7,9
                                      {8,4},   // 3 -> 4,8
                                      {3,9,0}, // 4 -> 0,3,9
                                      {},      // 5 -> empty
                                      {1,0,7}, // 6 -> 0,1,7
                                      {6,2},   // 7 -> 2,6
                                      {1,3},   // 8 -> 1,3
                                      {4,2}};  // 9 -> 4,2

        
        for (int r = 2; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                 dp[r][c] = 0; 
                 for (auto & prev : graph[c]) {
                     dp[r][c] = (dp[r][c] + dp[r-1][prev])%MOD;
                 }
            }
        }
        
        int result = 0;
        
        for(int j=0; j<10; j++) 
			result = (result + dp[N][j]) % MOD; 
                                 
        return result;
    }
};