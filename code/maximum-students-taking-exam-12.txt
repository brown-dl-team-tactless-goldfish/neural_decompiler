class Solution {
public:
    int m,n;
    int maxStudents(vector<vector<char>>& seats) {
        m=seats.size();
        n=seats[0].size();
        vector<vector<int>> dp(m*n+2,vector<int>(1<<(2*n),-1));
        return dfs(seats,0,0,dp);
    }
    
    int dfs(vector<vector<char>>& seats, int pos, int state, vector<vector<int>> &dp){
        if(dp[pos][state]!=-1) return dp[pos][state];
        if(pos==m*n) return 0;
        int x=pos/n;
        int y=pos%n;
        if(y==0){
            state=state>>n;
        }
        int take=0,untake=0;
        untake=dfs(seats,pos+1,state,dp);
        int flag=0;
        if(seats[x][y]=='#') flag=1;
        if(y-1>=0 && (state&(1<<(y-1+n)))>0) flag=1;
        if(y+1<n && (state&(1<<(y+1+n)))>0) flag=1;
        if(y-1>=0 && x>0 && (state&(1<<(y-1)))>0) flag=1;
        if(y+1<n && x>0 && (state&(1<<(y+1)))>0) flag=1;
        if(flag==0) take=1+dfs(seats,pos+1,state|(1<<(y+n)),dp);
        return dp[pos][state]=max(take,untake);
    }
};