class Solution {
public:
    int mod = 1e9 + 7;
    
    int helper(int m, int n, int maxMove, int i, int j, int dp[][51][51]) {
        
        if(i < 0 || i == m || j < 0 || j == n) {
            return 1;
        }
        
        if(!maxMove) return 0;
        
        if(dp[i][j][maxMove] != -1) return dp[i][j][maxMove];
        
        
        dp[i][j][maxMove] = 0;
        
        long a = helper(m, n, maxMove-1, i+1, j, dp)% mod;
        long b = helper(m, n, maxMove-1, i-1, j, dp)% mod;
        long c = helper(m, n, maxMove-1, i, j+1, dp)% mod;
        long d = helper(m, n, maxMove-1, i, j-1, dp)% mod;
        
        
        return dp[i][j][maxMove] = ( a+b+c+d ) % mod;
    }
    
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        
        
        int dp[51][51][51];
        memset(dp, -1, sizeof(dp));
        
        return helper(m, n, maxMove, startRow, startColumn, dp);
        
    }
};