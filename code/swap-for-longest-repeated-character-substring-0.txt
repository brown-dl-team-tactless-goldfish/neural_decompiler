int maxRepOpt1(char * text){
    int n = strlen(text);
    int* preAlpha = malloc(26 * sizeof(int));
    int* sufAlpha = malloc(26 * sizeof(int));
    for(int i = 0; i < 26; i++){
        preAlpha[i]  = -1;
        sufAlpha[i]  = -1;
    }
    for(int i = 0; i < n; i++){
        preAlpha[text[i] - 'a'] = i;
    }
    for(int i = n-1; i >= 0; i--){
        sufAlpha[text[i] - 'a'] = i;
    }
    
    int max = 1;
    for(int i = 0; i < n; i++){
        if(max > (n-i))
            break;
        if(i > 0 && text[i] == text[i-1])
            continue;
        int len = 1;
        int type = 0;  //0: no swap  
                       //1: swap with item before i 
                       //2: swap with item after j
        for(int j = i+1; j < n; j++){
            if(text[j] == text[i]){
                //already swap with item after j
                if(type == 2){
                    if(j < preAlpha[text[i]-'a'])
                        len++;   
                    else
                        break;
                }
                //"no swap" or "swap with item before i"
                else
                    len++;
            }
            else{
                //not yet swap
                if( type == 0 ){
                    //check front first
                    if(sufAlpha[text[i] -'a'] < i){
                        type = 1;
                        len++;
                    }
                    //if front can't swap, check if back can swap 
                    else if(preAlpha[text[i] -'a'] > j){
                        type = 2;
                        len++;
                    }
                    //no one can swap, eixt
                    else
                        break;
                }
                //already swap, eixt
                else
                    break;
            }
        }
        //if to to the end of the string, and not yet swap, check front if can swap
        if(type == 0){
            if(sufAlpha[text[i] -'a'] < i)
                len++;
        }
        max = fmax(max, len);
    }
    return max;
}