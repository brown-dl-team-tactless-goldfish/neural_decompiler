
typedef struct FrontMiddleBackQueue{
    int data;
    struct FrontMiddleBackQueue* next;
    struct FrontMiddleBackQueue* prev;
}FrontMiddleBackQueue;

 struct FrontMiddleBackQueue *head;
 struct FrontMiddleBackQueue *mid;
 struct FrontMiddleBackQueue *tail;
 struct FrontMiddleBackQueue dummy;
 int size;

FrontMiddleBackQueue* frontMiddleBackQueueCreate() {
        head = NULL;
        mid = NULL;
        tail = NULL;
        size = 0;
    return &dummy;
}
FrontMiddleBackQueue* getNode(int val) {
        FrontMiddleBackQueue* n = calloc(1, sizeof *n);
        n->data = val;
        n->next = NULL;
        n->prev = NULL;
        return n;
    }
void frontMiddleBackQueuePushFront(FrontMiddleBackQueue* obj, int val) {
  FrontMiddleBackQueue* n = getNode(val);
        
        if(head == NULL) {
            head = n;
            mid = n;
            tail = n;
            size++;
            return;
        }
        n->next = head;
        head->prev = n;
        head = n;
        size++;
        
        if(size % 2 == 0) {
            mid = mid->prev;
        }
        
        return;
}

void frontMiddleBackQueuePushMiddle(FrontMiddleBackQueue* obj, int val) {
       FrontMiddleBackQueue* n = getNode(val);

        if(head == NULL) {
            head = n;
            mid = n;
            tail = n;
            size++;
            return;
        }
        
        if(size % 2 != 0) {
            FrontMiddleBackQueue* p = mid->prev;
            if(p != NULL)
                p->next = n;
            else
                head = n;
            n->prev = p;
            n->next = mid;
            mid->prev = n;
            mid = n;
            size++;
        } else {
            FrontMiddleBackQueue* p = mid->next;
            mid->next = n;
            n->prev = mid;
            n->next = p;
            p->prev = n;
            mid = n;
            size++;
        }

        return;
}

void frontMiddleBackQueuePushBack(FrontMiddleBackQueue* obj, int val) {
     FrontMiddleBackQueue* n = getNode(val);
        
        if(head == NULL) {
            head = n;
            mid = n;
            tail = n;
            size++;
            return;
        }
        
        n->prev = tail;
        tail->next = n;
        tail = n;
        size++;
        
        if(size % 2 != 0) {
            mid = mid->next;
        }
        
        return;
}

int frontMiddleBackQueuePopFront(FrontMiddleBackQueue* obj) {
      if(head == NULL) {
            return -1;
        }
        
        int val = head->data;
        FrontMiddleBackQueue* p = head;
        head = head->next;
        size--;
        
        if(size == 0) {
            tail = NULL;
            mid = NULL;
            head = NULL;
        } else if(size % 2 != 0) {
            mid = mid->next;
        }
        
        if(head != NULL)
            head->prev = NULL;

        free(p);
        return val;
}

int frontMiddleBackQueuePopMiddle(FrontMiddleBackQueue* obj) {
  if(head == NULL) {
            return -1;
        }

        size--;
        FrontMiddleBackQueue* p = mid;
        int val = p->data;
        
        if(size == 0) {
            tail = NULL;
            mid = NULL;
            head = NULL;
        } else if(size % 2 == 0) {
            mid->prev->next = p->next;
            mid = p->prev;
            if(p->next != NULL) {
                p->next->prev = mid;
            }
        } else {
            mid = mid->next;
            mid->prev = p->prev;
            if(p->prev != NULL) {
                p->prev->next = mid;
            } else {
                head = mid;
                tail = mid;
            }
        }

        free(p);
        return val;
}

int frontMiddleBackQueuePopBack(FrontMiddleBackQueue* obj) {
  if(head == NULL) {
            return -1;
        }
        
        size--;
        
        FrontMiddleBackQueue* p = tail;
        int val = p->data;
        tail = tail->prev;
        if(tail != NULL)
        tail->next = NULL;

        if(size == 0) {
            tail = NULL;
            head = NULL;
            mid = NULL;
        } else if(size % 2 == 0) {
            mid = mid->prev;
        }
        
        free(p);
        return val;
}

void frontMiddleBackQueueFree(FrontMiddleBackQueue* obj) {
    
        return;
}

/**
 * Your FrontMiddleBackQueue struct will be instantiated and called as such:
 * FrontMiddleBackQueue* obj = frontMiddleBackQueueCreate();
 * frontMiddleBackQueuePushFront(obj, val);
 
 * frontMiddleBackQueuePushMiddle(obj, val);
 
 * frontMiddleBackQueuePushBack(obj, val);
 
 * int param_4 = frontMiddleBackQueuePopFront(obj);
 
 * int param_5 = frontMiddleBackQueuePopMiddle(obj);
 
 * int param_6 = frontMiddleBackQueuePopBack(obj);
 
 * frontMiddleBackQueueFree(obj);
*/