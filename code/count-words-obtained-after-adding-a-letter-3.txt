struct TrieNode {
    bool isend = false;
    array<TrieNode *, 26> children{};
};

class Trie {
public:
    void insert(string &s) {
        auto cur = &root;
        for (auto c : s) {
            if (!cur->children[c - 'a'])
                cur->children[c - 'a'] = new TrieNode;
            cur = cur->children[c - 'a'];
        }
        cur->isend = true;
    }  
    bool exist(const string &s) {
        auto cur = &root;
        for (auto c : s) {
            if (!cur->children[c - 'a'])
                return false;
            cur = cur->children[c - 'a'];
        }
        return cur->isend;
    }
private:
    TrieNode root;
};

class Solution {
public:
    int wordCount(vector<string>& sw, vector<string>& tw) {
        Trie tr;
        for (auto &s : sw) {
            sort(s.begin(), s.end());
            tr.insert(s);
        }
        int cnt = 0;
        for (auto &s : tw) {
            sort(s.begin(), s.end());
            for (int i = 0; i < s.size(); i++)
                if (tr.exist(s.substr(0, i) + s.substr(i + 1))) {
                    cnt++;
                    break;
                }
        }
        return cnt;
    }
};