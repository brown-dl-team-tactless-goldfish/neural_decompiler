class Solution {
public:
    int n;
    vector<int> color;
    
    bool dfs(vector<vector<int>>& graph,int i){
         for(int nei:graph[i]){
            if(color[nei]==-1){
                color[nei]=1-color[i];
                 if(dfs(graph,nei)) return 1;
            }
            else if(color[nei]==color[i]){
                return 1;
            }
        }
        return 0;
        
    }
    
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        this->n=n;
        vector<vector<int>> graph(n);
        color.resize(n,-1);
        
        for(auto e:dislikes){
            graph[e[0]-1].push_back(e[1]-1);
            graph[e[1]-1].push_back(e[0]-1);
         }
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                color[i]=0;
                if(dfs(graph,i)) return 0;
            }
        }
        
        return 1;
        
    }
};