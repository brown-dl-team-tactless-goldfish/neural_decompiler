char ** generateParenthesis(int n, int* returnSize){
    char*** bf = malloc((n + 1)*sizeof(char**));
    int*    sz = malloc((n + 1)*sizeof(int));
    
    // Set initial values
    bf[0]       = malloc(1*sizeof(char*));
    bf[0][0]    = malloc(1*sizeof(char));
    bf[0][0][0] = NULL;
    
    sz[0] = 1;
    
    bf[1]    = malloc(1*sizeof(char*));
    bf[1][0] = malloc(3*sizeof(char));
    sprintf(bf[1][0], "()");
    
    sz[1] = 1;
    
    // Process values from index 2 to n
    for (int i = 2; i < n + 1; ++i) {

        int xp = 8;
        bf[i] = malloc(xp * sizeof(char*));
        sz[i] = 0;
        for (int j = 0; j < i; ++j) {

            for (int k = 0; k < sz[j]; ++k ) {

                for (int l = 0; l < sz[i - 1 - j]; ++l) {

                    if (sz[i] == xp) {
                        xp = xp * 2;
                        bf[i] = realloc(bf[i], xp * sizeof(char*));
                    }

                    bf[i][sz[i]] = malloc((n*2 + 1)*sizeof(char));
                    sprintf(bf[i][sz[i]], "(%s)%s", bf[j][k], bf[i - 1 - j][l]);
                    
                    ++sz[i];
                }
            }
        }
    }
    
    // Wrap-up
    char** ans = bf[n];    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < sz[i]; ++j) {
            free(bf[i][j]);
        }
        free(bf[i]);
    }
    free(bf);
    
    *returnSize = sz[n];
    free(sz);

    return ans;
}