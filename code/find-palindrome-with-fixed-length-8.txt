class Solution {
public:
    string find(int k,int l,int in){
        if(l<0) return "";
        string re;
        if(in>9) return "-1";
        if(l==1){
            long long t = 9-in+1;
            if((long long)k>t) return "-1";
            else return to_string(in+k-1);
        }
        else if(l==2){
            long long t = 9-in+1;
            if((long long)k>t) return "-1";
            else return to_string(in+k-1)+to_string(in+k-1);
        }
        else{
            long long t = (l-1)/2;
            t = pow(10,t);
            if(t>(long long)k){ 
                re = find(k,l-2,0);
                if(re=="-1") return re;
                re = to_string(in)+re+to_string(in);
            }
            else if(t<(long long)k){ 
                re = find(k-t,l,in+1);
            }
            else if(t==(long long)k){
                re = to_string(in);
                for(int i = 0; i<l-2;++i) re=re+"9";
                re=re+to_string(in);
            }
            return re;
        }
    }
    vector<long long> kthPalindrome(vector<int>& q, int l) {
        vector<long long> re;
        for(int i = 0; i<q.size();++i){
             re.push_back(stoll(find(q[i],l,1)));
        }
        return re;
    }
};