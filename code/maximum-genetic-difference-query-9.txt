class Solution
{
    static const int depth = 18;
    class Node
    {
        Node* left;
        Node* right;
        int value;
        Node(int value) : left(NULL), right(NULL), value(value) { }
    public:
        static Node* create(int value)
        {
            Node* root = new Node(value);
            Node* node = root;
            for (int i = depth - 1; i >= 0; i--) {
                Node* next = new Node(value);
                if (value & (1 << i)) node->right = next;
                else node->left = next;
                node = next;
            }
            return root;
        }
        Node* insert(int value)
        {
            Node* root = create(value);
            Node* o = this;
            Node* n = root;
            while (n && o) {
                if (n->left) {
                    n->right = o->right;
                    n = n->left;
                    o = o->left;
                }
                else {
                    n->left = o->left;
                    n = n->right;
                    o = o->right;
                }
            }
            return root;
        }
        int query(int value)
        {
            Node* node = this;
            for (int i = depth - 1; i >= 0; i--) {
                if (value & (1 << i)) {
                    if (node->left) node = node->left;
                    else node = node->right;
                }
                else {
                    if (node->right) node = node->right;
                    else node = node->left;
                }
            }
            return node->value;
        }
    };
    void setNode(vector<int>& parents, vector<Node*>& nodes, int i)
    {
        if (nodes[i]) return;
        if (parents[i] != -1) {
            setNode(parents, nodes, parents[i]);
            nodes[i] = nodes[parents[i]]->insert(i);
        }
        else {
            nodes[i] = Node::create(i);
        }
    }
public:
    vector<int> maxGeneticDifference(vector<int>& parents, vector<vector<int>>& queries)
    {
        int n = parents.size();
        vector<Node*> nodes(n);
        for (int i = 0; i < n; i++) {
            setNode(parents, nodes, i);
        }
        int m = queries.size();
        vector<int> ret(m);
        for (int i = 0; i < m; i++)
            ret[i] = queries[i][1] ^ nodes[queries[i][0]]->query(queries[i][1]);
        return ret;
    }
};