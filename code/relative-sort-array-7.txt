//  we may miss out writing code in leet code is defensive checks in dynamic allocation
// in the interviews null pointer checks on dynamic allocations, and freeing them without memory leaks  have some weightage , don't miss them.

		int* relativeSortArray(int* arr1, int arr1Size, int* arr2, int arr2Size, int* returnSize){
		if (arr1==NULL){
			*returnSize=0;
			return NULL;
		}
		else if(arr2==NULL){
			*returnSize=arr1Size;
			return arr1;
		}
		
		int *result=(int *)(calloc(sizeof(int), arr1Size));
		if(result==NULL){
			*returnSize=0;
			return NULL;
		}
		int *hash_map=(int*)(calloc(sizeof(int), 1001));
		if (hash_map==NULL){
			free(result);
			*returnSize=0;
			return NULL;
		}
		int i=0,j=0,k=0;
		for(i=0;i<arr1Size;i++){
			hash_map[arr1[i]]++;
		}
		for(i=0;i<arr2Size;i++){
			while(hash_map[arr2[i]]>0){
				result[k++]=arr2[i];
				--hash_map[arr2[i]];
			}
		}
		for(i=0;i<1001;i++){
			while(hash_map[i]>0){
				result[k++]=i;
				--hash_map[i];
			}
		}
		*returnSize=k;
		free(hash_map);
		return result;
	}