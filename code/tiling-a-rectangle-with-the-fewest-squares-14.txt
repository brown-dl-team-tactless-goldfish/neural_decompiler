class Solution {
public:
    #define max_n 15
    int solve(int n, int m, vector<vector<int>> &memo) {
        if (n > m) swap(n, m); // n = min, m = max
        if (memo[n][m] != -1) return memo[n][m];
        
        memo[n][m] = solve(m - n, n, memo) + 1;
        
        for (int i = n - 1; i >= 1; --i) {
            int vp = n - i, hp = m - i; // vertical and horizontal padding
            for (int j = vp; j <= min(hp, n); ++j) {
                int bl = 1, tr = 1;
                int tl = solve(vp, m - j, memo), br = solve(n - j, hp, memo);
                int center = solve(i + j - n, m - i - j, memo);
                memo[n][m] = min(memo[n][m], tl + tr + bl + br + center);
            }
        }
        
        return memo[n][m];
    }
    
    int tilingRectangle(int n, int m) {
        if (n > m) swap(n, m);
        vector<vector<int>> memo(n + 1, vector<int>(m + 1, -1));
        
        for (int i = 0; i <= m; ++i) memo[0][i] = 0;
        
        return solve(n, m, memo);
    }
};