class Solution {
public:
    int intersectionSizeTwo(vector<vector<int>>& intervals) {
        //sort by start time descending order and end time ascending order
        // sort(intervals.begin(), intervals.end(), 
        //      [](vector<int>& v1, vector<int>& v2){return v1[0] > v2[0] || (v1[0] == v2[0] && v1[1] < v2[1]);});
        // vector<int>pool{INT_MAX, INT_MAX};
        // for(auto& e : intervals)
        // {
        //     int sz = pool.size();
        //     if(e[1] >= pool[sz-2])
        //         continue;
        //     if(e[1] < pool[sz-1])
        //         pool.push_back(e[0]+1);
        //     pool.push_back(e[0]);
        // }
        
        //sort by end time ascending order and start time descending order
        //so for the intervals with same end time, the interval with later start time would be processed first
        sort(intervals.begin(), intervals.end(), 
            [](vector<int>& v1, vector<int>& v2){return v1[1] < v2[1] || (v1[1] == v2[1] && v1[0] > v2[0]);});
        vector<int>pool{-1,-1};
        for(auto& e : intervals)
        {
            int sz = pool.size();
            if(e[0] <= pool[sz-2])
                continue;
            if(e[0] > pool[sz-1])
                pool.push_back(e[1]-1);
            pool.push_back(e[1]);
        }
        
        return pool.size()-2;
    }
};