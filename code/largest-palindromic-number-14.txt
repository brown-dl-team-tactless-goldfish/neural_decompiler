    string largestPalindromic(string num) 
    {   
        unordered_map<char,int>mp;
        
        for(auto c:num)
        mp[c]++;
        
        char c = '0';
        bool flag = false;
        int counteve = 0;
        for(char i = '0'; i <= '9';i++)
        {   
            if(mp.find(i)!=mp.end())
            {
                if(mp[i]&1 and i>=c)
                {
                    c = i;
                    flag = true;
                }
                if(mp[i]>=2)
                counteve++;
            }
        }
        deque<char>dq;
        if(flag)
        dq.push_back(c);
        for(char i = '0';i <= '9';i++)
        {
            if(mp.find(i) != mp.end())
            {
                if(i == '0' and counteve>=2)
                {
                   int n = mp[i]/2;
                   while(n--)
                   {
                       dq.push_back(i);
                       dq.push_front(i);
                   }
                }
                else if(i == '0' and counteve<2)
                continue;
                else 
                {
                   int n = mp[i]/2;
                   while(n--)
                   {
                       dq.push_back(i);
                       dq.push_front(i);
                   } 
                }
            }
        }
        string ans;
        while(!dq.empty())
        {
           ans.push_back(dq.front());
           dq.pop_front();
        }
        if(ans== "" )
        return "0";
        return ans;
    }