#define SIZE 1000    //定义Hash table的初始大小
struct HashArray
{
    int key;
    int count;
    struct HashArray* next;
}Hash[SIZE];       //主函数中需要初始化
void addHash(int num)     //在Hash table中添加数据
{
    int temp=abs(num%SIZE);     //添加的数据可包括负数
    if(Hash[temp].key==0)
    {
        Hash[temp].key=num;
        Hash[temp].count++;
    }else if(Hash[temp].key==num)
    {
        Hash[temp].count++;     
    }else
    {
        struct HashArray *p=&Hash[temp]; 
        while(p->key!=num&&p->next!=NULL)    
        {p=p->next;}
        if(p->key==num)
        {p->count++;}
        else
        {
            p->next=(struct HashArray*)malloc(sizeof(struct HashArray));
            p=p->next;
            p->key=num;
            p->count=1;
            p->next=NULL;
        }
    }   
}
int findHash(int nums_temp,int k){
    int num=nums_temp;
    int temp=abs(num%SIZE);     //添加的数据可包括负数
    if(k==0){
        if(Hash[temp].key==num)
        {
            if(Hash[temp].count==-1){return 0;}
            if(Hash[temp].count>1){
                Hash[temp].count=-1; 
                return 1;
            }
            Hash[temp].count=-1; 
        }else
        {
            struct HashArray *p=&Hash[temp]; 
            while(p->key!=num&&p->next!=NULL)    
            {p=p->next;}
            if(p->key==num)
            {
                if(p->count==-1){return 0;}
                if(p->count>1){
                    p->count=-1; 
                    return 1;
                }
                p->count=-1;  
            }
        }
        return 0;
    }
    if(Hash[temp].key==num)
    {
        if(Hash[temp].count==-1){return 0;}
        Hash[temp].count=-1; 
    }else
    {
        struct HashArray *p=&Hash[temp]; 
        while(p->key!=num&&p->next!=NULL)    
        {p=p->next;}
        if(p->key==num)
        {
            if(p->count==-1){return 0;}
            p->count=-1; 
        }
    }  
    num=nums_temp+k;
    temp=abs(num%SIZE);     //添加的数据可包括负数
    if(Hash[temp].key==0&&Hash[temp].count==0)
    {
       return 0;
    }else if(Hash[temp].key==num&&Hash[temp].count!=0)
    {
        return 1;     
    }else
    {
        struct HashArray *p=&Hash[temp]; 
        while(p->key!=num&&p->next!=NULL)    
        {p=p->next;}
        if(p->key==num&&p->count!=0)
        {return 1;}
    }
    return 0;
}
int findPairs(int* nums, int numsSize, int k) {
    if(k<0){return 0;}
    int ret=0;
    for(int i=0;i<SIZE;i++){
        Hash[i].key=0;
        Hash[i].count=0;
        Hash[i].next=NULL;
    }
    for(int i=0;i<numsSize;i++){
        addHash(nums[i]);
    }
    for(int i=0;i<numsSize;i++){
        if(findHash(nums[i],k)){
            ret++;
        }
    }
    return ret;
    
}