bool is_seen(int *seens, int seen_count, int target) {
    for(int i=0;i<seen_count;i++) {
        if(seens[i] == target) return true;
    }

    return false;
}

int minDominoRotations(int *tops, int topsSize, int *bottoms, int bottomsSize) {
    assert(topsSize == bottomsSize);

    int already_search_n[6] = {0, 0, 0, 0, 0, 0};
    int i_seen = 0;

    int min_count = INT32_MAX;
    for(int i=0;i<topsSize;i++) {
        int all_to_n = tops[i];

        if(is_seen(already_search_n, i_seen, all_to_n)) {
            continue;
        }
        else {
            assert(i_seen<6);
            already_search_n[i_seen++] = all_to_n;
        }

        int count = 0;
        for(int j=0;j<topsSize;j++) {
            if((tops[j] != all_to_n) && (bottoms[j] == all_to_n)) {
                count++;
            }
            else if((tops[j] != all_to_n) && (bottoms[j] != all_to_n)) {
                break;
            }

            if((j == topsSize-1) && (min_count > count)) {
                min_count = count;
            }

            // printf("%d,%d, [%d]: %d\n", tops[j], bottoms[j], all_to_n, count);
        }
    }

    i_seen = 0;
    for(int i=0;i<bottomsSize;i++) {
        int all_to_n = bottoms[i];

        if(is_seen(already_search_n, i_seen, all_to_n)) {
            continue;
        }
        else {
            assert(i_seen<6);
            already_search_n[i_seen++] = all_to_n;
        }

        int count = 0;
        for(int j=0;j<bottomsSize;j++) {
            if((bottoms[j] != all_to_n) && (tops[j] == all_to_n)) {
                count++;
            }
            else if((bottoms[j] != all_to_n) && (tops[j] != all_to_n)) {
                break;
            }

            if((j == bottomsSize-1) && (min_count > count)) {
                min_count = count;
            }

            // printf("%d,%d, [%d]: %d\n", tops[j], bottoms[j], all_to_n, count);
        }
    }    

    if(min_count == INT32_MAX) return -1;

    return min_count;
}
