

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#define MX 60*12

int countSetBit(int n){
    int c= 0;
    while(n){
        n&=(n-1);
        c++;
    }
    return c;
}
char ** readBinaryWatch(int num, int* returnSize){
char **time = (char **)malloc(MX*sizeof(char *));
for (int i=0;i<MX;i++)
{
    time[i]=(char*)malloc(7 * sizeof(char));
}
    int maxhr = 11; int maxmin = 59;
    int hr,mint;int index = 0,j;
    for(hr = 0;hr<=maxhr;hr++){
        for(mint = 0;mint<=maxmin;mint++){
            int x = countSetBit(hr);
            int y = countSetBit(mint);
            if(x+y==num){
                int j = 0;
                if(hr<10){
                    time[index][j++]=hr+48;
                }
                else{
                    if(hr==10){
                        time[index][j++]=49;
                        time[index][j++]=48;
                    }
                    else{
                        time[index][j++]=49;
                        time[index][j++]=49;
                    }
                }
                time[index][j++] = ':';
                int z = mint;
                if(mint<10){
                    time[index][j++] = '0';
                    time[index][j++] = z+48;
                }
                else{
                    time[index][j+1]=(z%10)+48;
                    z/=10;
                    time[index][j] = (z%10)+48;
                    j+=2;
                }
                time[index][j]='\0';
                index++;  
            }
        }
    }
        *returnSize = index;
        return time;
}

