class Solution {
public:
    int minReorder(int n, vector<vector<int>>& connections) {
        //we have n-1 roads so tree, hence no issues of cycle checking. Also from 0 we have to reach all other             neighbouring roads => DFS => mark +1 to count when traversing through virtual edges.  
        vector<vector<pair<int,int>>>adj(n);
        for(auto el:connections)
        {
            adj[el[0]].push_back({el[1],1});
            adj[el[1]].push_back({el[0],0});
        }
        int count=0;
        vector<bool>vis(n,false);
        dfs(0,adj,vis,count);
        return n-1-count;
    }
    void dfs(int i,vector<vector<pair<int,int>>>&adj,vector<bool>&vis,int &count)
    {
        vis[i]=true;
        for(auto el:adj[i])
        {
            if(!vis[el.first])
            {
                if(!el.second)
                {
                    count=count+1;
                    dfs(el.first,adj,vis,count);
                }
                else
                    dfs(el.first,adj,vis,count);
                
            }
        }
    }
};