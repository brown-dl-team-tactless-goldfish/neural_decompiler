class Solution {
public:
    const long long mod = 1e9+7;
    
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        long long dp[55][55][55] = {0}; // [i][j][moves]
        const array<array<int,2>,4> dirs{{{1,0},{0,1},{-1,0},{0,-1}}};
        for(int moves = 1; moves <= maxMove; moves++) {
            for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                    if(moves == 1) {
                        bool a = ((i == 0) or (i == m-1));
                        bool b = ((j == 0) or (j == n-1));
                        bool c = ((m == 1) or (n == 1));
                        if(a and b) {
                            if(c) dp[i][j][moves] = 3;
                            else  dp[i][j][moves] = 2;
                        }
                        else if(a xor b) {
                            if(c) dp[i][j][moves] = 2;
                            else dp[i][j][moves] = 1;
                        }
                        else dp[i][j][moves] = 0;
                    } else {
                        long long ways = 0;
                        for(auto [di,dj]:dirs) {
                            if(i+di >= 0 and i+di < m and j+dj >= 0 and j+dj < n) {
                                ways += dp[i+di][j+dj][moves-1];
                            }
                            else ways++;
                            ways %= mod;
                        }
                        dp[i][j][moves] = ways;
                    }
                }
            }
        }
        
        return dp[startRow][startColumn][maxMove];
    }
};