// We are only inetersted in 2 characters , pattern[0] (let's call this x) and pattern[1] (let's call this y)
// from the given original text - we extract out only the string consisting of x and y


// For given example "abdcdbc", pattern = "ac", extracted string is - "acc"
// With the extracted string , we do two operations to get maximum subsequences
// 1. Add x to front and check subsequence count (aacc) - subsequence count ---> (4)
// 2. Add y to back and check subsequence count (accc) - subsequence count -- (3)
// 3. Return the max of two values , we return as ans = 4

// Things to note : 
// when extracted string is empty , then there are no valid subsequences and ans = 0
// when (x==y), formula for subsequence calculation is differnt. 


class Solution {
public:
    
    long long getCount(string s, char x, char y){
        
        long long totalCnt = 0;
        int cntOfY=0;
        
        long long len = s.length();
        if(x==y)
            return (len*(len-1))/2;
            
        for(int i=len-1; i>=0; i--)
        {
            if(s[i]==y)
                cntOfY++;
            if(s[i]==x)
                totalCnt+=cntOfY;
                
        }
        return totalCnt;
    }
   
    long long maximumSubsequenceCount(string text, string pattern) {
        char x = pattern[0];
        char y = pattern[1];
        string ex;
        for(auto c : text)
            if(c==x || c==y)
                ex+=c;
          
        if(ex=="")
            return 0;
        string s1 = x+ex;
        string s2 = ex+y;      
        long long cnt1, cnt2, originalCnt;
        
        cnt1 = getCount(s1, x, y);
        cnt2 = getCount(s2, x, y);
        return max(cnt1, cnt2);
        
        
    }
};