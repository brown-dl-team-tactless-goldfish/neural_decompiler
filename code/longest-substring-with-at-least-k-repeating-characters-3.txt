class Solution {
   
    
    public int[] getCharFrequency(String s){
        int[] freq = new int[26];
        
        for(char c : s.toCharArray()){
            freq[c - 'a']++;
        }
        
        return freq;
    }
    
    public int longestSubstring(String s, int k) {
        
        if (s.isEmpty()){
            return 0;
        }
        if (k <=1){
            return s.length();
        }
        
        Queue<String> strQueue = new LinkedList<String>();
        
        int max = 0;
        
        strQueue.offer(s);
        
        while(!strQueue.isEmpty()){
            String word = strQueue.poll();
            
            int[] freq = getCharFrequency(word);
        
            int start = 0;
            int i = 0;
            while( i <= word.length()) {
                if (i == word.length() || freq[word.charAt(i) -'a'] < k){                    
                    String sub = word.substring(start,i);
                    // don't add to the queue if it cannot be greater than max
                    if (sub.length() > max){
                         strQueue.offer(sub);
                    }
                    if (i!=word.length()){
                        start = i+1;
                    }
                }
                i++;
            }
            // there were no indexes whose frequency is less than k. This is the solution
            if (start == 0){
                max = Math.max(max,word.length());
            }
        }
        return max;
        
        
    }
}