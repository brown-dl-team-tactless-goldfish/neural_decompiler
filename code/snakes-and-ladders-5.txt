public class Solution 
{
    public int SnakesAndLadders(int[][] board) 
    {
        int n = board.Length;
        int[,] visited = new int[n,n]; 
        Queue<int> qu = new Queue<int>();
        qu.Enqueue(1);
        int steps = 0;
        
        while(qu.Count>0)
        {
            int cnt = qu.Count;
            
            for(int i=0; i<cnt; i++)
            {
                int cur = qu.Dequeue();
                if(cur == n*n)
                    return steps;
                
                for(int j=1; j<=6; j++)
                {
                    int newVal = cur + j;
                    if(newVal > n*n)
                        break;
                    
                    var cor = GetCoordinates(newVal,n);
                    
                    if(visited[cor.x,cor.y]==1)
                        continue;
                    if(board[cor.x][cor.y]==-1)
                        qu.Enqueue(newVal);
                    else
                        qu.Enqueue(board[cor.x][cor.y]);
                    visited[cor.x,cor.y]=1;
                }
            }
            steps++;
        }
        
        return -1; 
    }
    
    private (int x,int y) GetCoordinates(int x, int n)
    {
        int r = n - (x-1)/n -1;
        int c = (x-1)%n;
        if(r%2==n%2)
            return (r,n-c-1);
        return (r, c);
    }
}