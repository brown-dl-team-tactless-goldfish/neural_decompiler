class Solution {
public:
    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries) {
        map<string, vector<string>> m1;
        map<string, vector<string>> m2;
        vector<string> ans;
        for (const auto & i : wordlist)
        {
            string t = to_lower(i.c_str());
            //cout<<t<<" "<<i<<endl;
            m1[t].push_back(i);
        }
        for (const auto & i : wordlist)
        {
            string t = to_lower_add_underscore(i.c_str());
            //cout<<t<<" "<<i<<endl;
            m2[t].push_back(i);
        }
        for (const auto & i : queries)
        {
            string t = to_lower_add_underscore(i);
            //cout<<t<<endl;
            if (m2.find(t) == m2.end())
            {
                ans.push_back(""); 
            }
            else if (m1.find(to_lower(i)) != m1.end())
            {
                bool found = false;
                string t1 = to_lower(i);
                for (const auto & j : m1[t1])
                {
                    if (j == i)
                    {
                        ans.push_back(i);
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    ans.push_back(m1[t1][0]);
                }
            }
            else
            {
                ans.push_back(m2[t][0]);
            }
        }
        return ans;
    }
private:
    string to_lower_add_underscore(string s)
    {
        std::transform(s.begin(), s.end(), s.begin(),
            [](unsigned char c){ 
                c = tolower(c);
                if (c == 'a' || c=='e' || c=='i' || c=='o' || c =='u')
                {
                    return (char)'_';
                }
                return (char)std::tolower(c); 
            }
        );
        return s;
    }
    string to_lower(string s)
    {
        std::transform(s.begin(), s.end(), s.begin(),
            [](unsigned char c){ 
                return (char)std::tolower(c); 
            }
        );
        return s;
    }
};