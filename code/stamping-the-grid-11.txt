class Solution {
public:
    void preProcessing(vector<vector<int>>& G, int m, int n){
        for(int i=0;i<m;i++){
            for(int j=1;j<n;j++){
                G[i][j]+=G[i][j-1];
            }
        }
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                G[i][j]+=G[i-1][j];
            }
        }
    }
    
    bool possibleToStamp(vector<vector<int>>& grid, int stampHeight, int stampWidth) {
        int m=grid.size(), n=grid[0].size();
        vector<vector<int>> G=grid, X(m, vector<int>(n, 0)), P(m, vector<int>(n, 0));
        preProcessing(G, m, n);
        for(int i=0;i+stampHeight<=m;i++){
            for(int j=0;j+stampWidth<=n;j++){
                int xx=G[i+stampHeight-1][j+stampWidth-1];
                if(i-1>=0){
                    xx-=G[i-1][j+stampWidth-1];
                }
                if(j-1>=0){
                    xx-=G[i+stampHeight-1][j-1];
                }
                if(i-1>=0 && j-1>=0)
                {
                    xx+=G[i-1][j-1];
                }
                if(xx==0){
                    X[i][j]++;
                    if(j+stampWidth<n){
                        X[i][j+stampWidth]--;
                    }
                }
                
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(j>0){
                    X[i][j]+=X[i][j-1];
                }
            }
        }
        
        vector<int> DP(n, 0);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1) continue;
                if(X[i][j]>0){
                    for(int i1=max(i,DP[j]);i1<m && i1<i+stampHeight;i1++){
                        DP[j]=i1+1;
                        P[i1][j]=1;
                    }
                }
                if(P[i][j]==0) return false;
            }
            
        }
        return true;
    }
};