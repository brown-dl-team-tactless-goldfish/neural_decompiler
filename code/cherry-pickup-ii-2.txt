class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int i=0, j=0, k=0, l=0, m=0, n=0, o=0, r=grid.size(), c=grid[0].size(), combi_len=c*c;
        vector<int> delta{-1, 0, 1};
        vector<vector<int>> prev_row(c, vector<int> (c, 0)), cur_row(c, vector<int> (c));       // These imply for index x, y say at row i ==> If we pick two column indices x, y what will be the maximum value at that row i (considering we are building a solution from the bottom and going up)
        for (i=r-1; i>=0; i--){             // Starting to build solution from bottom
            for (j=0; j<c; j++){            // Generating all pairs of column indices
                for (k=j; k<c; k++){
                    for (l=0; l<3; l++){    // Generating all the "from" contribuiton indices from previous iteration
                        for (m=0; m<3; m++){
                            n = j + delta[l], o = k + delta[m];
                            if (n < 0 || o < 0 || n >= c || o >= c)     continue;       // Out of bounds
                            if (j == k)
                                cur_row[j][k] = max(cur_row[j][k], grid[i][j] + prev_row[n][o]);
                            else
                                cur_row[j][k] = max(cur_row[j][k], grid[i][j] + grid[i][k] + prev_row[n][o]);
                        }
                    }
                }
            }
            prev_row = cur_row;
        }
        return cur_row[0][c-1];     
    }
};