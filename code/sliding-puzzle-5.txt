class Solution {
public: 
    int slidingPuzzle(vector<vector<int>>& board) {
        const int m =board.size(), n = board[0].size();
        string state, goal="123450";  
        for (int i = 0; i < m; ++i)
            for (int j = 0; j < n; ++j){
                state += (board[i][j] + '0');
                //goal += (i * n + j + 1) % (m * n) + '0'; // 12345...0
            }
        
        if(goal == state) return 0;        
        queue<string> q{{state}};
        unordered_set<string> seen{state};
        
        int dirs[4][2]={{-1, 0}, {1, 0}, {0, -1}, {0, 1}}; // Note1:
        for(int step = 0; !q.empty(); ++step){
            for(int sz = q.size(); sz-- > 0;){
                auto cur = q.front(); q.pop();                
                int i = cur.find('0');
                int r = i / n, c = i % n;     // current row, col index           
                for(int d = 0; d < 4; d++){
                    int nr = r + dirs[d][0],  nc = c + dirs[d][1]; // next row, col index
                    if(nr < 0 || nr >= m || nc < 0 || nc >= n) continue;
                    string next(cur);
                    int ni = nr * n + nc;                    
                    swap(next[i], next[ni]);
                    if(seen.count(next)) continue;
                    if(goal == next) return step+1; // I'm in 'cur', 1 step away from 'next'
                    q.emplace(next);
                    seen.emplace(next);
                }
            }
        }
        return -1;
    }
};
//Note1: dir[4][2] is a usful trick when in explore in 2D grid space.  {{-1, 0}, {1, 0}, {0, -1}, {0, 1}} means move up, down, left, and right, respectively.  To understand the point of a variable in function, we can check how the variable is consumed/used in the rest of the code.