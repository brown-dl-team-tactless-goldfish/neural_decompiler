class Solution {
public:
    using pii = std::pair<int, int>;
    
    int GetMapping(
        int n,
        const std::vector<int>& mapping) {     
        if (n<=9) {
            return mapping[n];
        }
        int mapped_num = 0;
        int k = 1;
        while (n) {
            int last = n%10;
            mapped_num += k*mapping[last];
            k = k*10;
            n = n/10;
        }            
        return mapped_num;
    }
    
    
    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {
        std::vector<pii> M;
        
        for (int i=0;i<nums.size();++i) {       
            M.push_back({nums[i], i});
        }
                
        auto cmp = [&](const pii& a, const pii& b) {
            auto ma = GetMapping(a.first, mapping);
            auto mb = GetMapping(b.first, mapping);
            if (ma == mb) {
                return a.second < b.second;
            }
            return ma < mb;
        };
        std::sort(M.begin(), M.end(), cmp);
       
       
        for (int i=0;i<nums.size();++i) {
            nums[i] = M[i].first; 
        }
        
        return nums;
    }
};