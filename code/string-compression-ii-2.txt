class Solution {
    int calcLen(int len){
        int rleLen = 4;
        if (len == 0){
            rleLen = 0;
        }else if (len == 1){
            rleLen = 1;
        }else if (len < 10){
            rleLen = 2;
        }else if (len < 100){
            rleLen = 3;
        }
        return rleLen;
    }
    // int helper(string& s, int si, int ch, int len, int k, int**** dp){
    //     if (si == s.size()){
    //         return calcLen(len);
    //     }
    //     if (dp[si][ch][len][k] != INT_MAX){
    //         return dp[si][ch][len][k];
    //     }
    //     int c = s[si] -'a';
    //     if (k > 0){
    //         dp[si][ch][len][k] = helper(s, si+1, ch, len, k-1, dp);
    //     }
    //     if (c == ch){
    //         dp[si][ch][len][k] = min(dp[si][ch][len][k], helper(s, si+1, ch, len+1, k, dp));
    //     }else{
    //         dp[si][ch][len][k] = min(dp[si][ch][len][k], helper(s, si+1, c, 1, k, dp) + calcLen(len));
    //     }
    //     return dp[si][ch][len][k];
    // }
public:
    int getLengthOfOptimalCompression(string s, int k) {
        // int n = s.size();
        // int**** dp = new int***[n];
        // for(int i=0; i<n; i++){
        //     dp[i] = new int**[26];
        //     for(int j=0; j<26; j++){
        //         dp[i][j] = new int*[n+1];
        //         for(int l = 0; l<=n; l++){
        //             dp[i][j][l] = new int[k+1];
        //             for(int m = 0; m<=k; m++){
        //                 dp[i][j][l][m] = INT_MAX;
        //             }
        //         }
        //     }
        // }
        // int ans = helper(s, 0, 0, 0, k, dp);
        // for(int i=0; i<n; i++){
        //     for(int j=0; j<26; j++){
        //         for(int l = 0; l<=n; l++){
        //             delete [] dp[i][j][l];
        //         }
        //         delete [] dp[i][j];
        //     }
        //     delete [] dp[i];
        // }
        // delete [] dp;
        // return ans;
        int n = s.size();
        vector<vector<int>> dp(n+1,vector<int>(k+1,INT_MAX));
        for(int i=0; i<=k; i++){
            dp[0][i] = 0;
        }
        for (int i = 1; i <= n; i++){
            for (int j = 0; j <= k; j++){
                if (j > 0){
                    dp[i][j] = dp[i - 1][j - 1];
                }
                int removed = 0, count = 0;
                for (int p = i; p > 0; p--){
                    if (s[p-1] == s[i-1]) 
                        count++;
                    else if (++removed > j)
                        break;
                    dp[i][j] = min(dp[i][j], dp[p - 1][j - removed] + calcLen(count));
                }
            }
        }
        return dp[n][k];
 
    }
};