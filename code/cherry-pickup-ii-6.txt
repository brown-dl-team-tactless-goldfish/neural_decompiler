class Solution {
public:
    int dp[71][71][71];
    int f(int i, int j1, int j2, int r, int c, vector<vector<int>> &a) {
        if(j1 < 0 || j2 < 0 || j1 >= c || j2 >= c) return -1e9;
        if(i == r-1) {
            if(j1 == j2) return dp[i][j1][j2] = a[i][j1];
            else return dp[i][j1][j2] = a[i][j1] + a[i][j2];
        }
        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];
        int ans = -1e9;
        for(int dj1 = -1; dj1 <= 1; dj1++) {
            for(int dj2 = -1; dj2 <= 1; dj2++) {
                int val = 0;
                if(j1 == j2) val = a[i][j1];
                else val = a[i][j1] + a[i][j2];
                val += f(i+1, j1+dj1, j2+dj2, r, c, a);
                ans = max(ans, val);
            }
        }
        return dp[i][j1][j2] = ans;
    }
    int cherryPickup(vector<vector<int>>& a) {
        int r = a.size(), c = a[0].size();
        memset(dp, -1, sizeof(dp));
        return f(0, 0, c-1, r, c, a);
    }
};