class Solution {
public:
    int reachableNodes(vector<vector<int>>& edges, int maxMoves, int n) {
        
        //Consider cnt + 1 as the weight of the edge b/w u and v, as you will have to make cnt+1 moves from u to reach v
        //First count number of nodes within a distance of maxMoves from node 0
        //Then for every edge (in the original graph) consider distances of end points and count number of intermediate nodes you can reach from edges (if you have moves left)

        vector<vector<pair<int, int>>> adj;
        
        int c = n;
        
        for (int i=0; i<n; i++) adj.push_back({});
        
        for (int i=0; i<edges.size(); i++){

            adj[edges[i][0]].push_back({edges[i][1], edges[i][2]+1});
            adj[edges[i][1]].push_back({edges[i][0], edges[i][2]+1});
        }
        
        int N = adj.size();
        
        vector<int> d(N, INT_MAX);
        
        d[0] = 0;
        
        set<pair<int, int>> st; //d[], u
        
        for (int i=0; i<N; i++) st.insert({d[i], i});
        
        int count = 0;
        
        while(!st.empty()){
            
            int v = (*st.begin()).second;
            
            if (d[v] > maxMoves) break;
            
            count++;
            
            st.erase(st.begin());
            
            for (int i=0; i<adj[v].size(); i++){
                
                int u = adj[v][i].first;
                int w = adj[v][i].second;
                
                if (d[v] + w < d[u]){
                    st.erase({d[u], u});
                    d[u] = d[v] +w;
                    st.insert({d[u], u});
                }
            }
        }
        
        
        for (int i=0; i<edges.size(); i++){
            
            int u = edges[i][0];
            int v = edges[i][1];
            int cnt = edges[i][2];
            
            int mu = maxMoves - d[u] > 0? maxMoves - d[u] : 0;
            int mv = maxMoves - d[v] > 0? maxMoves - d[v] : 0;
            
            if (mu + mv < cnt) count += mu + mv;
            else count += cnt;
        }
        
        return count;
    }
};