int findLatestStep(vector<int>& arr, int m) {
        int n = arr.size();
        if(m == n) return m;
        set<int> s;
        s.insert(0); s.insert(n+1);    //0s are at 0th and n+1th place
        int steps = n-1;
        for(int i=n-1; i>=0; i--){
            int num = arr[i];
            s.insert(num);
            std::set<int>::iterator itr; 
            itr = s.find(num);
            int nxt = *(++itr); itr--;   //find the next neighbouring 0
            int prev = *(--itr);  //find the previous neighbouring 0
            if(nxt-num-1 == m || num-prev-1 == m) return steps;       //calculate its distance, if its k, return it. else continue.
            steps--;
        }
        return -1;
    }