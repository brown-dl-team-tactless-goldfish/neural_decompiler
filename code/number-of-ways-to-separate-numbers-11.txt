class Solution {
public:
    int mod=1e9+7;
    int nextNoZero[3501];
    int numberOfCombinations(string num) {
        if(num[0]=='0')
            return 0;
        int n=num.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1)); 
        vector<vector<int>> lcp(n+1, vector<int>(n+1)); 
        nextNoZero[n]=n;
        for(int i=n-1;i>=0;i--){
            if(num[i]!='0')
                nextNoZero[i]=i;
            else 
                nextNoZero[i]=nextNoZero[i+1];
            for(int j=n-1;j>=0;j--){
                if(num[i]==num[j])
                    lcp[i][j]=lcp[i+1][j+1]+1;
            }
        }
        for(int i=0;i<n;i++){
            dp[i][0]=1;
            for(int j=1;j<=i;j++){
                if(num[j]=='0'){
                    dp[i][j]=dp[i][j-1];
                    continue;
                }
                // find k
                int len=i-j+1;
                int k;
                if(j-len<0){
                    k=0;
                }else{
                    k=j-len;
                    if(num[k]=='0'){
                        k=nextNoZero[k];
                    }else{
                        if(lcp[k][j]<len){
                            if(num[k+lcp[k][j]]>num[j+lcp[k][j]]){
                                k=nextNoZero[k+1];
                            }
                        }
                    }
                }
                dp[i][j]=dp[j-1][j-1];
                if(k>0)
                    dp[i][j]=(dp[i][j]-dp[j-1][k-1]+mod)%mod;     
                dp[i][j]=(dp[i][j]+dp[i][j-1])%mod;
            }
        }
        return dp[n-1][n-1];
    }
};