class Helper {
  public:
  vector<int> v;
  vector<int> vsum;
  int LIMIT, ADD;
  
  Helper (int n){
    ADD = sqrt(n);
    LIMIT = ADD + 1;
    replace(n);
  }
  
  void replace(int n){
    v.clear(), vsum.clear(); 
    int id = (n+ADD)/LIMIT;
    v.resize(id * LIMIT,0), vsum.resize(id,0);
  }
  
  void update_for_l(int idx){
    int id = (idx+ADD)/LIMIT;
    int lim = id * LIMIT;
    while(idx != lim) v[idx++]++;
    while(id != vsum.size()) vsum[id++]++;
  }
  
  void update_for_r(int idx){
    int id = idx / LIMIT;
    int lim = id * LIMIT;            
    while(idx >= lim) v[idx--]++;
    while(--id != -1) vsum[id]++;
  }
  
  int get(int idx){
    return vsum[idx/LIMIT] + v[idx];
  }
};

class Solution {
public:
  long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
   ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    int n = nums2.size();
    vector<int> w(n);
    for(int i = 0; i != n; i++) w[nums1[i]] = i;
    
    vector<int> v(n);
    for(int i = 0; i != n; i++) v[i] = w[nums2[i]];  
    
    Helper h(n);
    for(int i = 0; i != n; i++){
      if(v[i]) w[i] = h.get(v[i] - 1);
      else w[i] = 0;
      h.update_for_l(v[i]);
    }
    
    long ans = 0;
    h.replace(n); 
    
    h.update_for_r(v.back());
    
    for(int i = n-2; i; i--){
      if(v[i] != n-1) ans += long(w[i]) * h.get(v[i] + 1);
      h.update_for_r(v[i]);
    }
 
    return ans;
  }
};