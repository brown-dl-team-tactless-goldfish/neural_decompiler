static inline int
cmp_int(const void *a, const void *b)
{
    return *((int *)a) - *((int *)b);
}

// returns the frequency of smallest character
int
f(char *w)
{
    int cnt[26] = {0};
    char *p     = w;
    while (*p != '\0')  {
        cnt[*(p++) - 'a']++;
    }
    for (int i = 0; i < 26; i++) {
        if (cnt[i]) {
            return cnt[i];
        }
    }
    return 0;
}

// find the number of integers which are greater than 'q' with binary search
int
search(int q, int *frequencies, int num)
{
    int min = 0;
    int max = num - 1;
    // find the position of the number which is the first number greater than
    // the query
    int mid = 0;
    while (min <= max) {
        mid = min + (max - min) / 2;
        if (frequencies[mid] <= q) {
            min = mid + 1;
        } else {
            if (mid == 0) {
                // all numbers are greater than the query
                return num;
            } else if (frequencies[mid - 1] <= q) {
                // mid is the first number greater than the query
                return num - mid;
            } else {
                max = mid - 1;
            }
        }
    }
    return 0;
}

int *
numSmallerByFrequency(char **queries, int queriesSize, char **words,
                      int wordsSize, int *returnSize)
{
    *returnSize = queriesSize;
    int *results         = malloc(sizeof(int) * queriesSize);
    int *wordFrequencies = malloc(sizeof(int) * wordsSize);
    for (int i = 0; i < wordsSize; i++) {
        wordFrequencies[i] = f(words[i]);
    }   
    qsort(wordFrequencies, wordsSize, sizeof(int), cmp_int);
    for (int i = 0; i < queriesSize; i++) {
        results[i] = search(f(queries[i]), wordFrequencies, wordsSize);
    }   
    free(wordFrequencies);
    return results;
}