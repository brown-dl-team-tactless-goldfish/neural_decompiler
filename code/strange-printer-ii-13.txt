class Solution {
public:
    vector<int> g[65];
    bool isPrintable(vector<vector<int>>& targetGrid) {
        int n  = targetGrid.size();
        int m = targetGrid[0].size();
        int in[65];
        memset(in,0,sizeof in);
        for(int i=1;i<=60;i++)g[i].clear();
        for(int color=1;color<=60;color++)
        {
            int ur=1000,uc=1000;
            int lr=-1,lc=-1;
            int flag = 0;
            for(int i=1;i<=n;i++)
            {
                for(int j=1;j<=m;j++)
                {
                    if(targetGrid[i-1][j-1] == color)
                    {
                        flag = 1;
                        ur = min(ur,i);
                        uc = min(uc,j);
                        lr = max(lr,i);
                        lc = max(lc,j);
                    }
                }
            }

            if(!flag)continue;
            for(int i=ur;i<=lr;i++)
            {
                for(int j=uc;j<=lc;j++)
                {
                    if(targetGrid[i-1][j-1] != color)
                    {
                        in[targetGrid[i-1][j-1]]++;
                        g[color].push_back(targetGrid[i-1][j-1]);
                    }
                }
            }

        }

        queue<int> q;
        for(int i=1;i<=60;i++)
        {
            if(in[i] == 0)q.push(i);
        }

        while(!q.empty())
        {
            int f = q.front();q.pop();
            for(auto v:g[f])
            {
                in[v]--;
                if(in[v] == 0)q.push(v);
            }
        }

        for(int i=1;i<=60;i++)
        {
            if(in[i]!=0)return 0;
        }
        return 1;
        
    }
};