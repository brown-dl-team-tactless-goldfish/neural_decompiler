public class Solution
    {
        private long GreatestCommonDivisor(long a, long b)
        {
            if (a == 0)
            {
                return b;
            }
            return GreatestCommonDivisor(b % a, a);
        }

        private class Node : IEquatable<Node>
        {
            public Data Data;
            public readonly int Index;
            public readonly HashSet<Node> Edges;
            public Node Parent;
            public int Height;

            public Node(int idx)
            {
                Index = idx;
                Edges = new HashSet<Node>();
            }

            public override bool Equals(object obj)
            {
                return Equals((Node)obj);
            }

            public bool Equals(Node other)
            {
                return Index.Equals(other.Index);
            }

            public override int GetHashCode()
            {
                return Index.GetHashCode();
            }
        }

        private class Data
        {
            public Node[] Raw = new Node[51];
        }

        private void Fill(Node node, bool[] visited, int[] nums, int h)
        {
            visited[node.Index] = true;

            var d  = new Data();
            if (node.Parent != null)
            {
                for (int i = 0; i <= 50; i++)
                {
                    d.Raw[i] = node.Parent.Data.Raw[i];
                }
            }
            d.Raw[nums[node.Index]] = node;

            node.Data = d;
            node.Height = h;

            foreach (var next in node.Edges)
            {
                if (!visited[next.Index])
                {
                    visited[next.Index] = true;
                    next.Parent = node;
                    Fill(next, visited, nums, h + 1);
                }
            }
        }

        public int[] GetCoprimes(int[] nums, int[][] edges)
        {
            IList<int>[] coprimes = new IList<int>[51];
            for (int i = 0; i <= 50; i++)
            {
                coprimes[i] = new List<int>();
            }

            for (int i = 1; i <= 50; i++)
            {
                for (int j = 1; j <= 50; j++)
                {
                    var gcd = GreatestCommonDivisor(i, j);
                    if (gcd == 1)
                    {
                        coprimes[i].Add(j);
                    }
                }
            }

            Node[] tree = new Node[nums.Length];
            for (int i = 0; i < nums.Length; i++)
            {
                tree[i] = new Node(i);
            }

            for (int i = 0; i < edges.Length; i++)
            {
                tree[edges[i][0]].Edges.Add(tree[edges[i][1]]);
                tree[edges[i][1]].Edges.Add(tree[edges[i][0]]);
            }

            bool[] visited = new bool[nums.Length];
            Fill(tree[0], visited, nums, 0);

            int[] res = new int[nums.Length];

            for (int i = 0; i < nums.Length; i++)
            {
                var node = tree[i];
                if (node.Parent == null)
                {
                    res[i] = -1;
                    continue;
                }

                int val = nums[i];
                var p = node.Parent;

                Node anchestor = null;

                foreach (var cand in coprimes[val])
                {
                    var t = p.Data.Raw[cand];
                    anchestor = anchestor ?? t;
                    if (t != null)
                    {
                        if (anchestor.Height < t.Height)
                        {
                            anchestor = t;
                        }
                    }
                }

                if (anchestor == null)
                {
                    res[i] = -1;
                    continue;
                }

                res[i] = anchestor.Index;
            }

            return res;
        }
    }