class Solution {
public:
    int maximumRobots(vector<int>& chargeTimes, vector<int>& runningCosts, long long budget) {
        int l=0, r=1+chargeTimes.size();
        while(l+1<r){
            auto mid = (l+r)/2;
            able(chargeTimes, runningCosts, budget, mid) ? l = mid : r = mid;
        }
        return l;
    }

    bool able(vector<int>& chargeTimes, vector<int>& runningCosts, long long budget, int k){
        map<int, int, greater<int>> m;
        long long sum = 0;
        for(int i=0;i<chargeTimes.size();i++){
            sum += runningCosts[i];
            m[chargeTimes[i]]++;
            if(i>=k){
                sum -= runningCosts[i-k];
                auto it = m.find(chargeTimes[i-k]);
                if(--it->second == 0) m.erase(it);
            }
            if(i>=k-1 && sum * k + m.begin()->first <= budget)
                return true;
        }
        return false;
    }
};