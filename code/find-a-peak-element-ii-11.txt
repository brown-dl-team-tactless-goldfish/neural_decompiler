public class Solution {
    public int[] FindPeakGrid(int[][] mat) {
        return FindPeakGrid(mat, mat.Length / 2, mat[0].Length / 2);
    }
    
    private int[] FindPeakGrid(int[][] mat, int r, int c) {
        int left = c == 0 ? -1 : mat[r][c - 1];
        int top = r == 0 ? -1 : mat[r - 1][c];
        int right = c == mat[r].Length - 1 ? -1 : mat[r][c + 1];
        int bottom = r == mat.Length - 1 ? -1 : mat[r + 1][c];
        
        int x = mat[r][c];
        
        if(x > left && x > top && x > right && x > bottom) {
            return new int[]{r, c};
        }
        
        int max = Math.Max(left, Math.Max(top, Math.Max(right, bottom)));
        
        if(max == left) {
            return FindPeakGrid(mat, r, c - 1);
        }
        else if(max == top) {
            return FindPeakGrid(mat, r - 1, c);
        }
        else if(max == right) {
            return FindPeakGrid(mat, r, c + 1);
        }
        else { // max == bottom
            return FindPeakGrid(mat, r + 1, c);
        }
    }
}