class Solution {
public:
    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {
        vector<vector<int>> edge(n);
        for (vector<int>& e : edges) {
            edge[e[0] - 1].push_back(e[1] - 1);
            edge[e[1] - 1].push_back(e[0] - 1);
            
        }
        vector<int> sol(n - 1);
        for (int mask = 0; mask < (1 << n); mask++) {
            set<int> v;
            for (int bit = 0; bit < n; bit++) {
                if (mask & (1 << bit)) {
                    v.insert(bit);
                }
            }
            if ((int) v.size() <= 1) continue;
            set<int> mark;
            map<int, int> dist;
            vector<int> que;
            que.push_back(*v.begin());
            dist[*v.begin()] = 0;
            mark.insert(*v.begin());
            int mxDist = -1;
            for (int rep = 0; rep < 2; rep++) {
                for (int i = 0; i < (int) que.size(); i++) {
                    int x = que[i];
                    for (int y : edge[x]) {
                        if (v.count(y) > 0 && mark.count(y) == 0) {
                            mark.insert(y);
                            dist[y] = dist[x] + 1;
                            que.push_back(y);
                        }
                    }
                }
                if ((int) v.size() == (int) mark.size()) {
                    int node = -1;
                    for (auto p : dist) {
                        if (p.second > mxDist) {
                            mxDist = p.second;
                            node = p.first;
                        }
                    }
                    que.clear();
                    dist.clear();
                    mark.clear();
                    que.push_back(node);
                    mark.insert(node);
                    dist[node] = 0;
                } else {
                    break;
                }
            }
            if (mxDist != -1) {
                ++sol[mxDist - 1];
            }
        }
        return sol;
    }
};