struct Node 
{
    char * string;
    struct Node * next;
    struct Node * prev;
};


typedef struct 
{
    struct Node * head;
    struct Node * current;
} BrowserHistory;


BrowserHistory* browserHistoryCreate(char * homepage) 
{
    BrowserHistory * obj = (BrowserHistory *)malloc(sizeof(BrowserHistory));
    struct Node * new_node = (struct Node *)malloc(sizeof(struct Node));
    
    int str_len = strlen(homepage);
    new_node->string = (char *)malloc(sizeof(char) * (str_len+1));
    memcpy(new_node->string, homepage, strlen(homepage));
    new_node->string[str_len] = '\0';
    new_node->next = NULL;
    new_node->prev = NULL;
    
    obj->head = new_node;
    obj->current = new_node;
    return obj;
}

void browserHistoryVisit(BrowserHistory* obj, char * url)
{
    //Clears up the forward history (if any)
    struct Node * cur_node  = obj->current;

    if(cur_node != NULL)
    {

        while(cur_node->next)
        {

            struct Node * next_node = cur_node->next;
            cur_node->next = next_node->next;
            if(next_node->next != NULL)
            {
                next_node->next->prev = cur_node;
            }
            free(next_node);
        }
    }
    
    //Add the new url to the next of current node
    struct Node * new_node = (struct Node *)malloc(sizeof(struct Node));
    
    int str_len = strlen(url);
    new_node->string = (char *)malloc(sizeof(char) * (str_len+1));
    memcpy(new_node->string, url, strlen(url));
    new_node->string[str_len] = '\0';
    new_node->next = NULL;
    
    if(obj->current != NULL)    //List is not empty
    {
        obj->current->next = new_node;
        new_node->prev = obj->current;
        obj->current = new_node;
    }
    else
    {
        new_node->prev = NULL;
        obj->current = new_node;
        obj->head = new_node;
    }
    
    return;
}

char * browserHistoryBack(BrowserHistory* obj, int steps) 
{
    struct Node * trav = obj->current;
    
    while(trav != obj->head)
    {
        steps--;
        trav = trav->prev;
        
        if(steps == 0)
        {
            obj->current = trav;    
            break;    
        }
    }
    
    if(trav == obj->head)
    {
        //Move the pointer to the head
        obj->current = obj->head;
    }
    
    return obj->current->string;
}

char * browserHistoryForward(BrowserHistory* obj, int steps) 
{
    struct Node * prev_ptr = NULL;
    struct Node * trav = obj->current;
    
    while(trav)
    {
        steps--;
        prev_ptr = trav;
        trav = trav->next;
        
        if(steps == 0)
        {
            obj->current = trav;
            break;
        }
    }
    
    if(trav == NULL)
    {
        //Move the pointer to the last node
        obj->current = prev_ptr;
    }
    
    return obj->current->string;
}

void browserHistoryFree(BrowserHistory* obj) 
{
    struct Node * trav = obj->head;
    
    while(trav)
    {
        struct Node * last = trav->next;
        free(trav);
        obj->head = last;
        trav = last;
    }
    
    free(obj);
}

/**
 * Your BrowserHistory struct will be instantiated and called as such:
 * BrowserHistory* obj = browserHistoryCreate(homepage);
 * browserHistoryVisit(obj, url);
 
 * char * param_2 = browserHistoryBack(obj, steps);
 
 * char * param_3 = browserHistoryForward(obj, steps);
 
 * browserHistoryFree(obj);
*/