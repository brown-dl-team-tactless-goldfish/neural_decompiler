class Solution {
public:
int mod = 1e9 + 7;
    int cutPizza(int i, int j,int cnt, vector<string>&pizza, int k, int n, int m, vector<vector<pair<int,int>>>&precomp, vector<vector<vector<int>>>&dp) {
         if(cnt == k) {
             int flag = 0;
             for(int k1=i;k1<n;k1++) {
                 for(int k2=j; k2<m; k2++) {
                     if(pizza[k1][k2] == 'A') {
                         flag = 1;
                     }
                 }
             }
             if(flag == 1) return 1;
             return 0;
         }
         if(i<0 || i>=n || j<0 || j>=m) {
             return 0;
         }
         if(dp[i][j][cnt] != -1) {
             return dp[i][j][cnt];
         }
         int c = 0;
         for(int k1 = j; k1<m;k1++) {
             if(j == 0) {
                if(precomp[i][k1].second > 0) {
                     c = (c%mod + cutPizza(i, k1+1, cnt+1, pizza, k, n, m, precomp, dp)%mod)%mod;
                }
             } else {
                 if(precomp[i][k1].second - precomp[i][j-1].second > 0) {
                     c = (c%mod + cutPizza(i, k1+1, cnt+1, pizza, k, n, m, precomp, dp)%mod)%mod; 
                 }
             }
         }
         for(int k1 = i; k1<n; k1++) {
             if(i == 0) {
                 if(precomp[k1][j].first > 0) {
                     c =(c%mod + cutPizza(k1+1, j, cnt+1, pizza, k, n, m, precomp, dp)%mod)%mod;
                 }
             } else {
                 if(precomp[k1][j].first - precomp[i-1][j].first > 0) {
                     c = (c%mod + cutPizza(k1+1, j, cnt+1, pizza, k, n, m, precomp, dp)%mod)%mod;
                 }
             }
         }
         return dp[i][j][cnt] = c;
    }

    int ways(vector<string>& pizza, int k) {
        int n = pizza.size();
        int m = pizza[0].size();
        vector<vector<pair<int,int>>>apples(pizza.size(), vector<pair<int,int>>(pizza[0].size(), {0,0}));
        vector<vector<int>>rows(n, vector<int>(m, 0));
        vector<vector<int>>cols(n, vector<int>(m, 0));
        vector<vector<int>>topleft(n, vector<int>(m, 0));
        int c =0;
        for(int i=0;i<rows[0].size();i++) {
            if(pizza[0][i] == 'A') {
                c++;
            }
        }
        for(int i=0;i<rows[0].size();i++) {
            rows[0][i] = c;
        }


        for(int i=1; i<rows.size();i++) {
            c = 0;
            for(int j=0;j<rows[0].size();j++) {
                if(pizza[i][j] == 'A') {
                    c++;
                }
            }
            for(int j=0;j<rows[0].size();j++) {
                rows[i][j] = rows[i-1][0] + c;
            }
        }



        c = 0;
        for(int i=0;i<pizza.size();i++) {
            if(pizza[i][0] == 'A') {
                c++;
            }
        }
        for(int i=0;i<pizza.size();i++) {
            cols[i][0] = c;
        }


        for(int i=1; i<pizza[0].size(); i++) {
            c = 0;
            for(int j=0;j<pizza.size(); j++) {
                if(pizza[j][i] == 'A') {
                    c++;
                }
            }
            for(int j=0;j<pizza.size();j++) {
                cols[j][i] = cols[0][i-1] + c;
            }
        }
        
        // for(int i=0;i<rows.size();i++) {
        //     for(int j=0;j<rows[0].size();j++) {
        //         cout<<cols[i][j]<<" ";
        //     }
        //     cout<<"\n";
        // }
        // cout<<"\n";

        // for(int i=0;i<rows.size();i++) {
        //     for(int j=0;j<rows[0].size();j++) {
        //         cout<<cols[i][j]<<" ";
        //     }
        //     cout<<"\n";
        // }
        // cout<<'\n';


        c = 0;
        for(int i=0;i<pizza[0].size();i++) {
            if(pizza[0][i] == 'A') {
                c++;
            }
            topleft[0][i] = c;
        }
        c=0;
        for(int i=0;i<pizza.size();i++) {
            if(pizza[i][0] == 'A') {
                c++;
            }
            topleft[i][0] = c;
        }

        for(int i=1;i<n;i++) {
            for(int j=1;j<m;j++) {
                topleft[i][j] = topleft[i-1][j] + topleft[i][j-1] - topleft[i-1][j-1] + (pizza[i][j] == 'A');
            }
        }


        // for(int i=0;i<n;i++) {
        //     for(int j=0;j<m;j++) {
        //         cout<<topleft[i][j]<<" ";
        //     }
        //     cout<<"\n";
        // }
        // cout<<"\n";

        vector<vector<pair<int,int>>>precomp(n, vector<pair<int,int>>(m, {0,0}));
        c = 0;

        for(int i=m-1;i>=0;i--) {
            if(pizza[0][i] == 'A') {
                c++;
            }
            precomp[0][i] = {c, cols[0][i]};
        }

        c = 0;
        for(int i=n-1;i>=0;i--) {
            if(pizza[i][0] == 'A') {
                c++;
            }
            precomp[i][0] = {rows[i][0],c};
        }

        for(int i=1;i<n;i++) {
            for(int j=1;j<m;j++) {
                precomp[i][j] = {rows[i][j] - topleft[i][j-1], cols[i][j] - topleft[i-1][j]};
            }
        }
    
        // for(int i=0;i<n;i++) {
        //     for(int j=0;j<m;j++) {
        //         cout<<precomp[i][j].first<<","<<precomp[i][j].second<<" ";
        //     }
        //     cout<<"\n";
        // }

        // vector<vector<int>>dp(n, vector<int>(m, -1));
        vector<vector<vector<int>>>dp(n, vector<vector<int>>(m, vector<int>(k+2, -1)));
        return cutPizza(0,0,1, pizza, k, n, m, precomp, dp);




        return 0;
    }
};