typedef struct {
    int n;
    pthread_mutex_t lock1;
    pthread_mutex_t lock2;
} FooBar;

FooBar* fooBarCreate(int n) {
    FooBar* obj = (FooBar*) malloc(sizeof(FooBar));
    obj->n = n;
    pthread_mutex_init(&obj->lock1,NULL);
    pthread_mutex_init(&obj->lock2,NULL);

    pthread_mutex_lock(&obj->lock1);    
    pthread_mutex_lock(&obj->lock2);
    return obj;
}

void foo(FooBar* obj) {
    
    while (obj->n > 0) {
        printFoo();
        pthread_mutex_unlock(&obj->lock2);
        pthread_mutex_lock(&obj->lock1);

    }
}

void bar(FooBar* obj) {
    
    while (obj->n > 0) {
        pthread_mutex_lock(&obj->lock2);
        printBar();
        obj->n -= 1;
        pthread_mutex_unlock(&obj->lock1);
    }
}

void fooBarFree(FooBar* obj) {
    free(obj);
}