class Solution {
public:
    void quickSelect(vector <int> &a, int l, int r, int t) {
        if (l >= r - 1) return ; 
        int i = l, j = r - 1;
        int p = a[rand() % (r - l) + l];
        while (i <= j) {
            while (a[i] > p) i++;
            while (a[j] < p) j--;
            if (i <= j)
                swap(a[i++], a[j--]);
        }
        if (t <= i) quickSelect(a, l, i, t);
        else quickSelect(a, i, r, t);
    }
    int kthLargestValue(vector<vector<int>>& a, int k) {
        int n = a.size(), m = a[0].size();
        vector <int> b(n * m, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int cur = a[i][j];
                if (i > 0) cur ^= a[i - 1][j];
                if (j > 0) cur ^= a[i][j - 1];
                if (i && j) cur ^= a[i - 1][j - 1];
                a[i][j] = b[i * m + j] = cur;
            }
        }
        quickSelect(b, 0, n * m, k);
        return b[k - 1];
    }
};