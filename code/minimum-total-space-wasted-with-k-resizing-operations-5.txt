class Solution {
private:
    const int INF = 1e9;
    
public:
    int minSpaceWastedKResizing(vector<int>& nums, int resize) {
        int n = nums.size();
        
        int dp[201][201];
        int minKLayer[201] = {[0 ... 200] = INF};
        
        for (int i = 0; i <= 200; i++) {
            for (int j = 0; j <= 200; j++) {
                dp[i][j] = INF;
            }
        }
        
        for (int j = 0; j < n; j++) {
            if (nums[j] >= nums[0]) {
                dp[j][0] = nums[j] - nums[0];
                minKLayer[0] = min(minKLayer[0], dp[j][0]);
            }
        }
        
        for (int i = 1; i < n; i++) {
            for (int k = resize; k >= 0; k--) {
                minKLayer[k] = INF;
                for (int j = 0; j < n; j++) {
                    
                    if (nums[j] < nums[i]) {
                        dp[j][k] = INF;
                        continue;
                    }

                    int prevLayerMin = INF;
                    int currLayer = INF;
                    if (k > 0) {
                        prevLayerMin = minKLayer[k - 1];
                    }
                    
                    dp[j][k] = min(prevLayerMin, dp[j][k]) + nums[j] - nums[i];
                    minKLayer[k] = min(minKLayer[k], dp[j][k]);
                }
            }
        }
        
        int res = INF;
        for (int j = 0; j < n; j++) {
            for (int k = 0; k <= resize; k++) {
                res = min(res, dp[j][k]);
            }
        }
        return res;
    }
};