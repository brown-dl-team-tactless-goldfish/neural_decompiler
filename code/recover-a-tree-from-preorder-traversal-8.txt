/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* recoverFromPreorder(string traversal) {
        return helper(traversal);
    }
    /*
        as initially, call helper(string str)
    */
    TreeNode* helper(string &s){

        // counting the single dash indexes, such as the single '-' in "34-56--123"
        vector<int> dash_indexes;
        for (int i = 1; i < s.size() - 1; i++){
            if (is_digit(s[i - 1]) && s[i] == '-' && is_digit(s[i + 1])){
                dash_indexes.push_back(i);
            }
        }
        TreeNode* root = new TreeNode();
        if (dash_indexes.empty()){
            root->val = convert_str_to_n(s);
            return root;
        }
        root->val = convert_str_to_n(s.substr(0, dash_indexes.front()));
        if (dash_indexes.size() == 1){// there is only a left child
            s.erase(s.begin(), s.begin() + dash_indexes.front() + 1);
            for (int i = 1; i < s.size(); i++){
                if (is_digit(s[i - 1]) && s[i] == '-'){
                    s[i] = 'x';
                }
            }
            s.erase(remove(s.begin(), s.end(), 'x'), s.end());
            root->left = helper(s);
            return root;
        }
        // regular case: dash_indexes.size() == 2
        string left_str = s.substr(dash_indexes.front() + 1, dash_indexes.back() - dash_indexes.front() - 1);
        string right_str = s.substr(dash_indexes.back() + 1, s.size() - dash_indexes.back() - 1);
        for (int i = 1; i < left_str.size(); i++){
            if (is_digit(left_str[i - 1]) && left_str[i] == '-'){
                left_str[i] = 'x';
            }
        }
        for (int i = 1; i < right_str.size(); i++){
            if (is_digit(right_str[i - 1]) && right_str[i] == '-'){
                right_str[i] = 'x';
            }
        }
        left_str.erase(remove(left_str.begin(), left_str.end(), 'x'), left_str.end());
        right_str.erase(remove(right_str.begin(), right_str.end(), 'x'), right_str.end());
        root->left = helper(left_str);
        root->right = helper(right_str);
        return root;
    }
    bool is_digit(char c){
        if (c >= '0' && c <= '9'){
            return true;
        }
        return false;
    }
    int convert_str_to_n(string s){
        if (s.compare("0") == 0){return 0;}
        int sum = 0;
        int dim = 1;
        for (int i = s.size() - 1; i >= 0; i--){
            sum += dim * (s[i] - '0');
            dim *= 10;
        }
        return sum;
    }
};