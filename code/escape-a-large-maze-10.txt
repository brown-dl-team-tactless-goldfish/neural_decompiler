
public class Solution {
    public bool IsEscapePossible(int[][] blocked, int[] source, int[] target) {
        if (blocked.Count() < 2) {
            return true;
        }
        int isBlocked = isSurroanded(blocked, source, target);
        if(isBlocked == 2) {
            return true;
        }
        if(isBlocked == 0) {
            return false;
        }
        
        return isSurroanded(blocked, target, source) != 0;
    }
    
    public int isSurroanded(int[][] blocked, int[] point, int[] target) {
        
        Queue<int[]> numbers = new Queue<int[]>();
                        
        int maxFit = blocked.Count() * (blocked.Count() - 1) / 2;
        
        HashSet<string> visited = new HashSet<string>();  
        
        foreach(var b in blocked) {
            visited.Add(b[0] + "," + b[1]);
        }
        
        
        if(point[0] > 0){
            numbers.Enqueue(new int[]{point[0] - 1, point[1]});
        }
        
        if(point[0] < 999999){
            numbers.Enqueue(new int[]{point[0] + 1, point[1]});
        }
        
        if(point[1] > 0){
            numbers.Enqueue(new int[]{point[0], point[1] - 1});
        }
        
        if(point[1] < 999999){
            numbers.Enqueue(new int[]{point[0], point[1] + 1});
        }
        
       
                
        while(numbers.Count() != 0) {
            int[] newPoint = numbers.Dequeue();               
            
            if(visited.Contains(newPoint[0] + "," + newPoint[1])){
                continue;
            } 
            
            if (visited.Count() >= maxFit)
            {
                return 1;
            }
            
            if(newPoint[0] == target[0] && newPoint[1] == target[1]) 
            {
                return 2;
            }
                     
            visited.Add(newPoint[0] + "," +  newPoint[1]);
            
            if(newPoint[0] > 0){
                numbers.Enqueue(new int[]{newPoint[0] - 1, newPoint[1]});
            }
        
            if(newPoint[0] < 999999){
                numbers.Enqueue(new int[]{newPoint[0] + 1, newPoint[1]});
            }
        
            if(newPoint[1] > 0){
                numbers.Enqueue(new int[]{newPoint[0], newPoint[1] - 1});
            }
        
            if(newPoint[1] < 999999){
                numbers.Enqueue(new int[]{newPoint[0], newPoint[1] + 1});
            }            
        }
        return 0;
    }
    
    
}
