class Solution {
public:
    #define pii pair<int, int>
    vector<vector<int>> restoreMatrix(vector<int>& rowSum, vector<int>& colSum) {
        
        int n = rowSum.size();
        int m = colSum.size();
        
        vector<vector<int>> res(n, vector<int>(m, 0));
        
        priority_queue<pii, vector<pii>, greater<pii>> rows, cols;
        
        for(int i=0;i<n;i++){
            if(rowSum[i]) rows.push({rowSum[i], i});
        }
        
        for(int i=0;i<m;i++){
            if(colSum[i]) cols.push({colSum[i], i});
        }
        
        while(!rows.empty() && !cols.empty()){
            auto r = rows.top();
            auto c = cols.top();
            
            rows.pop();
            cols.pop();
            
            int val =  min(r.first, c.first);
            
            res[r.second][c.second] += val;
            
            if(r.first != val) rows.push({r.first - val, r.second});
            if(c.first != val) cols.push({c.first - val, c.second});
        }
        
        return res;
    }
};