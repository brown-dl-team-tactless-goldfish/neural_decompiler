class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        
        int n = matrix.size(); if(n ==1)  return matrix[0][0];
        
        vector <int> dp = matrix[0];
        sort(dp.begin(),dp.end());
        
        for(int i=1;i<n;i++){
            for(int j=0;j<n;j++){    
                
                if(dp[0]==matrix[i-1][j])
                    matrix[i][j]+= dp[1];
                
// dp is basically min values till last row and its sorted so first is min and second is the second min
// Now if in the previous case if we have selected min from the first min value
// then we have to add only the second min value to each col 
// otherwise add the fisrt min value to each col
                
                else
                    matrix[i][j]+= dp[0];
            }
            
// we have updated this ith matrix row + with the min value of previous row or the second min value of the previous row, this matrix is like dp stroing the min values till
// we use this dp row for next matrix row, we sort it so that we can get the first 2 min values for the next time
            dp = matrix[i];
            sort(dp.begin(),dp.end());
        }
        return dp[0];
    }
};