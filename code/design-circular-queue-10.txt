


typedef struct MyCircularQueue{
    int array[1000];
    int tail;
    int max;
} MyCircularQueue;


MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue* s=malloc(sizeof(MyCircularQueue));
    s->max=k;
    s->tail=-1;
    return s;
}

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if(obj->tail < obj->max-1){
        obj->tail++;
        obj->array[obj->tail]=value;
        return true;
    }
    return false;
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if(obj->tail<0)
        return false;
    obj->tail--;
    return true;
}

int myCircularQueueFront(MyCircularQueue* obj) {
    if(obj->tail<0)
        return -1;
    return obj->array[0];
  
}

int myCircularQueueRear(MyCircularQueue* obj) {
    if(obj->tail<0)
        return -1;
  return obj->array[obj->tail];
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
  return obj->tail==-1;
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
  return obj->tail==obj->max-1;
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj);
    
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/