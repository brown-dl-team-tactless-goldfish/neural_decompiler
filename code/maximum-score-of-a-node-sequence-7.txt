    int maximumScore(vector<int>& scores, vector<vector<int>>& edges) {
        const int n = scores.size();
        vector<vector<int>> g(n);
        for(auto& e:edges){
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        for(auto& v:g){
            const int n = min<int>(3, v.size());
            partial_sort(v.begin(), v.begin()+n, v.end(), [&](int i, int j){return scores[i] > scores[j];});
            v = vector(v.begin(), v.begin()+n);
        }
        
        int res = -1;
        for(auto& e:edges){
            int i = e[0], j = e[1];
            int score = 0;
            for(auto k1 : g[i]) for (auto k2 : g[j]){
                if(k1 == j || k2 == i || k1 == k2) continue;
                score = max(score, scores[k1] + scores[k2]);
            }
            if(score > 0 ) res = max(res, score + scores[i] + scores[j]);
        }
        return res;
    }