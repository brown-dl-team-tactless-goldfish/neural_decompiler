class Solution {
public:
    void fill(char r, char c, char mask, vector<string>& grid) {
        if ((grid[r][c] & mask) == mask) return;
        
        bool n = false;
        bool s = false;
        bool e = false;
        bool w = false;
        
        // LHS
        if ((mask & 0x80) && (grid[r][c] & 0x80) == 0x00) {
            grid[r][c] = grid[r][c] | 0x80;
            n = n || (grid[r][c] & 0x01);
            s = s || (grid[r][c] & 0x02);
            if (grid[r][c] == 0x03) fill(r, c, 0x40, grid);
            w = true;
        }
        
        // RHS
        if ((mask & 0x40) && (grid[r][c] & 0x40) == 0x00) {
            grid[r][c] = grid[r][c] | 0x40;
            n = n || (grid[r][c] & 0x02);
            s = s || (grid[r][c] & 0x01);
            e = true;
        }

        if (n && r > 0) {
            switch (grid[r - 1][c] & 0x0f) {
                case 0x01: fill(r - 1, c, 0x40, grid); break;
                case 0x02: fill(r - 1, c, 0x80, grid); break;
                case 0x03: fill(r - 1, c, 0xc0, grid); break;
            }
        }            
        
        if (s && r < grid.size() - 1) {
            switch (grid[r + 1][c] & 0x0f) {
                case 0x01: fill(r + 1, c, 0x80, grid); break;
                case 0x02: fill(r + 1, c, 0x40, grid); break;
                case 0x03: fill(r + 1, c, 0xc0, grid); break;
            }
        }            
        
        if (w && c > 0) {
            switch (grid[r][c - 1] & 0x0f) {
                case 0x01: fill(r, c - 1, 0x40, grid); break;
                case 0x02: fill(r, c - 1, 0x40, grid); break;
                case 0x03: fill(r, c - 1, 0xc0, grid); break;
            }
        }

        if (e && c < grid[r].length() - 1) {
            switch (grid[r][c + 1] & 0x0f) {
                case 0x01: fill(r, c + 1, 0x80, grid); break;
                case 0x02: fill(r, c + 1, 0x80, grid); break;
                case 0x03: fill(r, c + 1, 0xc0, grid); break;
            }
        }
    }
	
    int regionsBySlashes(vector<string>& grid) {
        // /: 0x2f -> 0x01
        // \: 0x5c -> 0x02
        //  : 0x20 -> 0x03
        // L: 0x80
        // R: 0x40
        
        for (int r = 0; r < grid.size(); ++r) {
            for (int c = 0; c < grid[r].length(); ++c) {
                switch(grid[r][c]) {
                    case '/':  grid[r][c] = 0x01; break;
                    case '\\': grid[r][c] = 0x02; break;
                    case ' ':  grid[r][c] = 0x03; break;
                }
            }
        }
        
        int cnt = 0;
        for (int r = 0; r < grid.size(); ++r) {
            for (int c = 0; c < grid[r].length(); ++c) {
				if ((grid[r][c] & 0x80) == 0x00) {
					fill(r, c, 0x80, grid);
					++cnt;
				}

				if ((grid[r][c] & 0x40) == 0x00) {
					fill(r, c, 0x40, grid);
					++cnt;
				}                
            }
        }
        
        return cnt;
    }
};