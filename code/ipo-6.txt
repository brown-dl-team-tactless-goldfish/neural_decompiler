public class Solution
    {
        public int FindMaximizedCapital(int k, int W, int[] Profits, int[] Capital)
        {
            SortedList<int, List<int>> projects = new SortedList<int, List<int>>();
            int maxcap = 0;
            for (int i = 0; i < Profits.Length; i++)
            {
                int p = Profits[i];
                int c = Capital[i];
                if (c > maxcap) maxcap = c;
                List<int> hs = new List<int>();
                hs.Add(c);
                if (!projects.TryAdd(p, hs))
                {
                    projects[p].Add(c);
                }
            }
            IList<int> keys = projects.Keys;
            for (int i = 0; i < k; i++)
            {
                if (keys.Count == 0) return W;
                if (W >= maxcap)
                {
                    int last = keys.Last();
                    List<int> hs = projects[last];
                    W += last;
                    if (hs.Count > 1) hs.RemoveAt(0);
                    else projects.Remove(last);
                }
                else
                {
                    int j = keys.Count - 1;
                    bool found = false;
                    while (j >= 0 && !found)
                    {
                        int key = keys[j];
                        List<int> hs = projects[key];
                        int n = 0;
                        bool check = false;
                        while (n < hs.Count && !check)
                        {
                            if (hs[n] <= W) check = true;
                            n++;
                        }
                        if (check)
                        {
                            found = true;
                            W += key;
                            if (hs.Count > 1) projects[key].Remove(hs.First());
                            else projects.Remove(key);
                        }
                        j--;
                    }
                }
            }
            return W;
        }
    }