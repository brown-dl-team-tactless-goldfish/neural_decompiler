   vector<vector<pair<int,double>>>adj(n);
    
    bool found=false;
    
    for(int i=0;i<edges.size();i++)
    {
        adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
         adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        
        if(edges[i][0]==end ||edges[i][1]==end)found=true;
    }
    if(!found)return false;
    

    vector<double>dist(n,INT_MIN);
    priority_queue<pair<int,double>>pq;
    
    pq.push({start,1});
    
    while(!pq.empty())
    {
        int node=pq.top().first;
        double prob=pq.top().second;
        pq.pop();
        
        for(auto x:adj[node])
        {
            int v=x.first;
            double w=x.second;
            
            if(dist[v]<prob*w)
            {
                dist[v]=prob*w;
                
                pq.push({v,dist[v]});
            }
        }
    }
   return  dist[end]!=INT_MIN?dist[end]:0;
}