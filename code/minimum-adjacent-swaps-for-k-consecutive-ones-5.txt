class Solution {
public:
    int minMoves(vector<int>& nums, int k) {
        int ret = INT_MAX;
        vector<int> pos, left;
        for (int i = 0; i < nums.size(); i++) {
            left.push_back(pos.size());  //record the number of 1s in the left
            if (nums[i] == 1) 
                pos.push_back(i); //record the positions of 1s
        }
        vector<int> prefix(pos.size(), 0);
        for (int i = 0; i < pos.size(); i++) {
            prefix[i] = pos[i] - i + (i > 0 ? prefix[i - 1] : 0); // the cost of moving {pos[0]...pos[i]} to {0...i};
        }
        int sum = 0, mid;
        for (int i = 0; i + k <= pos.size(); i++) {
            mid = pos[i + k/2]; //the median of the seq
            
            int l = left[mid]; // the number of 1s in the left is l
            
            //move {pos[i]...pos[l - 1]} to {??, mid - 1}, the cost = (mid - l) * size - (prefix[l - 1] - prefix[i - 1])
            sum = (mid - l) * (l - i) - (l > 0 ? prefix[l - 1] : 0) + (i > 0 ? prefix[i - 1] : 0);
            
            //move {pos[l] ... pos[i + k - 1]} to {mid, ??}, the cost = (prefix[i + k - 1] - prefix[l - 1]) - (mid - l) * size
            sum += (prefix[i + k - 1] - (l > 0 ? prefix[l - 1] : 0)) - (mid - l) * (i + k - l);
            
            ret = min(ret, sum);
        }
        return ret;
    }
};