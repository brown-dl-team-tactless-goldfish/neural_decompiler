class Solution {
public:
    using VI = vector<int>;
    using Map = unordered_map<int, int>; // value -> first index
    int findTheLongestSubstring(string S, string V = "aeiou", int max = 0) {
        auto encode = [&](auto c) {
            auto i = V.find(c);
            return i == string::npos ? 0 : 1 << i;
        };
        int N = S.size();
        VI A(N + 1);
        Map seen{{0, 0}};
        for (auto i{ 1 }; i <= N; ++i) {
            A[i] = A[i - 1] ^ encode(S[i - 1]);
            auto first = seen.find(A[i]) != seen.end() ? seen[A[i]] : i;
            if (first == i)
                seen[A[i]] = i; // ðŸ‘€ first seen A[i] index
            max = std::max(max, i - first); // ðŸŽ¯ max of i-th index minus first seen A[i] index
        }
        return max;
    }
};