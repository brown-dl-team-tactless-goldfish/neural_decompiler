void merge(int *A, int *B, int l, int r, int c) {
    int i, j, k;

    for (i = l, j = c + 1, k = l; i <= c && j <= r;) {
        if (A[i] <= A[j])
            B[k++] = A[i++];
        else
            B[k++] = A[j++];
    }

    while (i <= c)
        B[k++] = A[i++];
    while ( j <= r)
        B[k++] = A[j++];

    for (k = l; k <= r; k++)
        A[k] = B[k];

    return;
}

void merge_sort_r(int *A, int *B, int l, int r) {
    if (r <= l)
        return;
    int c = (l + r) / 2;
    merge_sort_r(A, B, l, c);
    merge_sort_r(A, B, c + 1, r);
    merge(A, B, l, r, c);
}

void merge_sort(int *A, int N) {
    int l = 0, r = N - 1;
    int *B = (int *) malloc(N * sizeof(int));
    if (B == NULL) {
        fprintf(stderr, "Error allocating memory!\n");
        exit(EXIT_FAILURE);
    }
    merge_sort_r(A, B, l, r);
    free(B);
}

#define N 26

bool closeStrings(char * word1, char * word2){
    int map1[N] = {0};
    int map2[N] = {0};
    
    for (int i = 0; word1[i] != '\0'; i++)
        map1[word1[i] - 'a']++;
    
    for (int i = 0; word2[i] != '\0'; i++)
        map2[word2[i] - 'a']++;
    
    for (int i = 0; i < N; i++) {
        if (map1[i] == 0 && map2[i] != 0)
           return false;
    }
    
    merge_sort(map1, N);
    merge_sort(map2, N);
    
    for (int i = 0; i < N; i++) {
        if (map1[i] != map2[i])
           return false;
    }
    return true;
}