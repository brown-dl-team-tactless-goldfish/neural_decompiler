#include<stdlib.h>
#include<string.h>


int numMatchingSubseq(char *s, char **words, int wordsSize) {
  int count = 0;
  for (int i = 0; i < wordsSize; i++) {
    // wI is the index of `words`
    int wI = 0;
    int wordsLen = strlen(words[i]);

    // `sub` is the pointer to the first occurrence of the specified character in the string
    // `sub` is NULL if the specified character is not found
    char *sub = strchr(s, words[i][wI]);
    while (sub != NULL && wI < wordsLen) {
      // ++sub to avoid cases where same characters appear consecutively
      // eg. s = "abcde" words = ["bb"] 
      // First we find the first occurrence of the first 'b' in s, then sub = "bcde".
      // To avoid finding 'b' again, sub should be "cde" because there is only one 'b' in s.
      sub = strchr(++sub, words[i][++wI]);
    }
    if (wI == wordsLen) count++;
  }
  return count;
}

// recusive method
int numMatchingSubseq(char *s, char **words, int wordsSize) {
  if (wordsSize <= 0) return 0;
    
  int wI = 0;
  int wordsLen = strlen(words[wordsSize-1]);
  char *sub = strchr(s, words[wordsSize-1][wI]);
  while (sub != NULL && wI < wordsLen) {
    sub = strchr(++sub, words[wordsSize-1][++wI]);
  }
  if (wI != wordsLen) return numMatchingSubseq(s, words, wordsSize-1);
  return 1 + numMatchingSubseq(s, words, wordsSize-1);
}