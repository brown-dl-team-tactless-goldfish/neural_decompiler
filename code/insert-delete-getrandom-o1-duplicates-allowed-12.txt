class RandomizedCollection {
private:
    unordered_map<int, set<int>> indices;
    vector<int> elements;
public:
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        bool isFound = false;
        if(indices.find(val) == indices.end()) isFound = true;
        
        indices[val].insert(elements.size());
        elements.push_back(val);       
        
        return isFound;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        // no key exists with the term 'val' and thus, cannot remove
        if(indices.find(val) == indices.end() || indices.at(val).empty()) return false;
        
        int lastElement = elements.back();
        int index = *(indices.at(val).begin());
                
        indices.at(val).erase(index);
        indices.at(lastElement).insert(index);     
        indices.at(lastElement).erase(elements.size() - 1);            
        
        elements.at(index) = lastElement;        
        elements.pop_back(); 
        
        return true;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        int index = rand() % elements.size();
        return elements.at(index);
    }
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection* obj = new RandomizedCollection();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3  = obj->getRandom();
 */