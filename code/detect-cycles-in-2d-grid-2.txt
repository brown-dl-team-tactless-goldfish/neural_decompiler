/*
Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.

A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.

Also, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.

Return true if any cycle of the same value exists in grid, otherwise, return false.
*/

typedef struct {
    int i;
    int j;
}Grid;

static Grid *pStack;
static int top;
void push(int ii, int jj){
    top++;
    pStack[top].i = ii;
    pStack[top].j = jj;
}

Grid* pop(){
    top--;
    return &pStack[top+1];
}

bool is_empty(){
    return top == -1;
}
static int m;
static int n;

static bool is_cycle;
static char** p_grid;

static char current_c;
static bool **p_visited;

static int** p_time;
int check_boader_char(int i, int j){
    //border
    if ((0 <= i) && (i < m) && (0 <= j) && (j < n)){
        return p_grid[i][j]==current_c;
    }
    return 0;
}



bool containsCycle(char** grid, int gridSize, int* gridColSize){
    m = gridSize;
    n = *gridColSize;
    is_cycle = 0;
    p_grid = grid;
    p_visited = (bool**)calloc(m, sizeof(bool*));
    for (int i = 0; i < m; i++){
        p_visited[i]= (bool*)calloc(n, sizeof(bool));
    }

    p_time = (int**)calloc(m, sizeof(int*));
    for (int i = 0; i < m; i++){
        p_time[i]= (int*)calloc(n, sizeof(int));
    }

    pStack = (Grid*)calloc((m*2+n*2), sizeof(Grid));

    for(int i_g = 0 ; i_g < m;i_g++){
        for(int j_g = 0; j_g<n;j_g++){

            if (p_visited[i_g][j_g]==0){
                top = -1;
                current_c = p_grid[i_g][j_g];
                p_time[i_g][j_g] = 1;
                push(i_g, j_g);
                //DFS
                while(!is_empty()){
                    Grid *pGrid = pop();
                    int i = pGrid->i;
                    int j = pGrid->j;
                    int t = p_time[i][j];
                    p_visited[i][j] = 1;
                    //U
                    if (check_boader_char(i-1, j)==1){
                        if(p_visited[i-1][j]==1 && (t-p_time[i-1][j] > 1)){
                            is_cycle = 1;
                        }
                        if (p_visited[i-1][j]==0) {
                            push(i-1, j);
                            p_time[i-1][j] = t+1;
                        }
                    }
                    //D
                    if (check_boader_char(i+1, j)==1){
                        if(p_visited[i+1][j]==1 && (t-p_time[i+1][j] > 1)){
                            is_cycle = 1;
                        }
                        if (p_visited[i+1][j]==0){
                            push(i+1, j);
                            p_time[i+1][j] = t+1;
                        }
                    }
                    //L
                    if (check_boader_char(i, j-1)==1){
                        if(p_visited[i][j-1]==1 && (t-p_time[i][j-1] > 1)){
                            is_cycle = 1;
                        }
                        if (p_visited[i][j-1]==0){
                            push(i, j-1);
                            p_time[i][j-1] = t + 1;
                        }
                    }
                    //R
                    if (check_boader_char(i, j+1)==1){
                        if(p_visited[i][j+1]==1 && (t-p_time[i][j+1]> 1)){
                            is_cycle = 1;
                        }
                        if (p_visited[i][j+1]==0) { 
                            push(i, j+1);
                            p_time[i][j+1] = t + 1;
                        }
                    }
                    if(is_cycle)break;
                }
                if(is_cycle)break;
            }
            if(is_cycle)break;
        }
        if(is_cycle)break;
    }

    //free
    for (int i = 0; i < m; i++){
        free(p_visited[i]);
        free(p_time[i]);
    }
    free(p_visited);
    free(p_time);

    free(pStack);
    return is_cycle;
}