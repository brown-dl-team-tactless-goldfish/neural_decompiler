class Solution {
public:
    int minSkips(vector<int>& dist, int speed, int hoursBefore) {
        
        
        int n=dist.size();
        double dp[n+1][n+1];
        //since last point we dont care about resting 
        double goal =(double)hoursBefore - (double)((double)dist.back()/(double)speed) ;
        double eps =1e-9;
      
         for(int i=0;i<=n;i++){
             dp[0][i]=0.0;
         }
        
        for(int i=1;i<n;i++){
             
            double duration = (double)((double)(dist[i-1])/ (double)speed) ;
            dp[i][0] = ceil(dp[i-1][0] + duration-eps);
            for(int j=1;j<i;j++){
                //not resting
                double op1= ceil(dp[i-1][j]+duration-eps);
                //resting
                double op2= dp[i-1][j-1] +duration;
                
                dp[i][j]=min(op1,op2);
        
            }
            //for i==j since op1 is invalid solving separately
            dp[i][i]= dp[i-1][i-1] +duration;
        }
        
        for(int i=0;i<=n-1;i++){
            if(dp[n-1][i]<=goal+eps){
                return i;
            }
        }
        return -1;
    }
};
