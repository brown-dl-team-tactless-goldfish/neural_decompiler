public class Solution 
{
    public bool IsPossibleToCutPath(int[][] grid) 
    {
        int m = grid.Length;
        int n = grid[0].Length;
        HashSet<(int, int)> visited = new HashSet<(int, int)>();
        Queue<(int, int)> q = new Queue<(int, int)>();
        q.Enqueue((0, 0));
        bool reachEnd = false;
        while (q.Count > 0)
        {
            int count = q.Count();
            for (int i = 0; i < count; i++)
            {
                (int, int) point = q.Dequeue();
                //Move Right
                int x = point.Item1;
                int y = point.Item2 + 1;
                if (x == m - 1 && y == n - 1)
                {
                    q.Enqueue(point);
                    reachEnd = true;
                }
                if (x < m && y < n && grid[x][y] == 1 && !visited.Contains((x, y)))
                {
                    visited.Add((x, y));
                    q.Enqueue((x, y));
                }

                //Move Down
                x = point.Item1 + 1;
                y = point.Item2;
                if (x == m - 1 && y == n - 1)
                {
                    q.Enqueue(point);
                    reachEnd = true;
                }
                if (x < m && y < n && grid[x][y] == 1 && !visited.Contains((x, y)))
                {
                    visited.Add((x, y));
                    q.Enqueue((x, y));
                }
            }
            if (q.Count <= 1)
                return true;

            if (reachEnd)
            {
                if (q.Count <= 1)
                    return true;
                else
                    return false;
            }
        }
        return true;
    }
}