/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

#define MAX 100001

void reverse_str(char* s)
{
    int temp, i;
    for(i=0;i<strlen(s)/2;i++)
    {
        temp=s[i];
        s[i]=s[strlen(s)-1-i];
        s[strlen(s)-1-i]=temp;
    }
}

int find_node(struct TreeNode* root, int value, char* s)
{
    int ret;
    if(!root)
        return 0;
    if(root->val==value)
        return 1;
    ret=find_node(root->left, value, s);
    if (ret==1)
    {
        strcat(s, "L");
        return 1;
    }
    ret=find_node(root->right, value, s);
    if (ret==1)
    {
        strcat(s, "R");
        return 1;
    }
    return 0;
}

char * getDirections(struct TreeNode* root, int startValue, int destValue){
    char str_s[MAX] = "", str_d[MAX] = "";
    char* ret_str = (char*)malloc(MAX);
    ret_str[0]='\0';
    int s_idx, d_idx, i;
    find_node(root, startValue, str_s);
    //printf("%s\n", str_s);
    find_node(root, destValue, str_d);
    //printf("%s\n", str_d);
    s_idx=strlen(str_s)-1;
    d_idx=strlen(str_d)-1;
    while(s_idx>=0 && d_idx>=0)
    {
        if(str_s[s_idx]==str_d[d_idx])
        {
            str_s[s_idx]='\0';
            str_d[d_idx]='\0';
            s_idx--;
            d_idx--;
        }
        else
            break;
    }
    //printf("%s\n", str_s);
    //printf("%s\n", str_d);
    for(i=0;i<=s_idx;i++)
        strcat(ret_str, "U");
    reverse_str(str_d);
    strcat(ret_str, str_d);
    //printf("%s\n", ret_str);
    return ret_str;
}