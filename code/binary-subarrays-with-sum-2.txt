int helper(int n){
    return (n+1)*n/2;
}
int numSubarraysWithSum(int* A, int ASize, int S) {
    int* mapLeft=(int*)calloc(ASize,sizeof(int));
    int* mapRight=(int*)calloc(ASize,sizeof(int));
    int sum=0;
    int index=0;
    for(int i=0;i<ASize;i++){
        if(A[i]==1){
            index=i;
            while(index-1>-1&&A[index-1]==0){
                index--;
            }
            mapLeft[i]=i-index;
            index--;
            if(index>-1){
                mapRight[index]=mapLeft[i];
            }
            index=i;
            sum++;
        }
    }
    mapRight[index]=ASize-index-1;
    int ret=0;
    if(S==0){
        if(sum==0){
            return helper(ASize);
        }
        int right=0;
        for(int i=0;i<ASize;i++){
            if(mapLeft[i]!=0){
                ret+=helper(mapLeft[i]);
                right=i;
            }
        }
        ret+=helper(mapRight[right]);
        return ret;
    }
    if(sum<S){
        return 0;
    }
    int left=0;
    int right=0;
    while(left<ASize&&A[left]==0){
        left++;
    }
    right=left;
    sum=1;
    while(right<ASize&&sum!=S){
        right++;
        sum+=A[right];
    }
    if(right==ASize){
        return 0;
    }
    while(right<ASize){
        ret++;
        ret+=mapLeft[left]+mapRight[right]+mapLeft[left]*mapRight[right];
        left+=mapRight[left]+1;
        right+=mapRight[right]+1;
    }
    return ret;
}