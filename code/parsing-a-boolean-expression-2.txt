#define IS_VALUE(c) ((c) == 't' || (c) == 'f')
#define IS_OP(c)    ((c) == '!' || (c) == '&' || (c) == '|')

static char *expr;
static char *s; 

bool
parse()
{
    if (IS_VALUE(*s)) {
        return (*s++) == 't';
    }   
    if (IS_OP(*s)) {
        char op = *s; 
        s++;
        if (*s != '(') {
            fprintf(stderr,
                    "error: unexpected char '%c' at pos %ld, expects '('\n", *s, 
                    s - expr);
            exit(1);
        }   
        s++;
        bool b = false;
        if (op == '!') {
            b = !parse();
        } else {
            b = parse();
            while (*s == ',') {
                s++;
                bool n = parse();
                if (op == '&') {
                    b = b && n;
                } else {
                    b = b || n;
                }   
            }   
        }   
        if (*s != ')') {
            fprintf(stderr,
                    "error: unexpected char '%c' at pos %ld, expects ')'\n",
                    *s, s - expr);
            exit(1);
        }
        s++;
        return b;
    }   
    fprintf(stderr, "error: unexpected char '%c' at pos %ld\n", *s, s - expr);
    exit(1);
}

/**
 * Recursive descent parser. LL(1)
 */
bool
parseBoolExpr(char *expression)
{
    expr = expression;
    s    = expression;
    return parse();
}