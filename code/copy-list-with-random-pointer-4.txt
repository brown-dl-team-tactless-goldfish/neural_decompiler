/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *next;
 *     struct Node *random;
 * };
 */

struct Node *copyNode(struct Node *node) {
    struct Node *newNode = (struct Node *) malloc(sizeof(struct Node));
    newNode->val = node->val;
    newNode->next = NULL;
    newNode->random = NULL;
    return newNode;
}

struct Node *copyRandomList(struct Node* head) {
    if(head == NULL) return NULL;
    struct Node *curr = head;
    struct Node *copyCurr = NULL;
    // Copy each node and merge them into a single list
    while(curr) {
        copyCurr = copyNode(curr);
        struct Node *next = curr->next;
        curr->next = copyCurr;
        copyCurr->next = next;
        curr = next;
    }
    // Fix random nodes from new created nodes
    curr = head;
    while(curr) {
        if(curr->random) {
            curr->next->random = curr->random->next;
        } else {
            curr->next->random = NULL;
        }
        curr = curr->next->next;
    }
    // Unlink new nodes from the old ones 
    curr = head;
    copyCurr= curr->next;
    struct Node *copyHead = head->next;
    while(curr) {
        curr->next = curr->next->next;
        if(copyCurr->next) {
            copyCurr->next = copyCurr->next->next;
        }
        curr = curr->next;
        copyCurr = copyCurr->next;
    }
    return copyHead;
}