struct TreeNode* constructMaximumBinaryTree(int* nums, int numsSize) {
    if (numsSize == 0) return NULL;
    int max = INT_MIN, idx = 0;
    for (int i = 0; i < numsSize; i++) {
        if (*(nums+i) > max) {
            max = *(nums+i);
            idx = i;
        }
    }
    struct TreeNode* node = (struct TreeNode*) malloc(sizeof(struct TreeNode));
    node->val = max;
    node->left = constructMaximumBinaryTree(nums, idx);
    node->right = constructMaximumBinaryTree(nums+idx+1, numsSize-idx-1);
    return node;
}

void InorderTraversal(struct TreeNode* root, int* arr, int* arrSize) {
    if (!root) return;
    InorderTraversal(root->left, arr, arrSize);
    arr[(*arrSize)++] = root->val;
    InorderTraversal(root->right, arr, arrSize);
}

struct TreeNode* insertIntoMaxTree(struct TreeNode* root, int val) {
    int* arr = (int*) malloc(101 * sizeof(int));
    int arrSize = 0;
    InorderTraversal(root, arr, &arrSize);
    arr[arrSize++] = val;
    return constructMaximumBinaryTree(arr, arrSize);
}