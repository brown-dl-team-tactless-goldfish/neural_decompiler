class Solution {
public:
    int longestPalindromeSubseq(string s) {
        
        int n = s.length();
        if (n == 0) return 0;
        
        int dp[n][n];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = 0;
            }
        }
        
        for (int l = 1; l <= n; l++) {
            for (int i = 0; i+l <= n; i++) {
                int j = i+l-1;
                if (l == 1) {
                    dp[i][j] = 1;
                } else if (l == 2) {
                    dp[i][j] = (s[i] == s[j]) ? 2 : 1;
                } else {
                    dp[i][j] = max(dp[i+1][j-1] + ((s[i] == s[j]) ? 2 : 0),
                                        max(dp[i+1][j], dp[i][j-1]));
                }
            }
        }
    
        return dp[0][n-1];
    }
};