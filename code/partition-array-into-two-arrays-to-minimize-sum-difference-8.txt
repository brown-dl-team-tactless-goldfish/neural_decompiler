class Solution {
public:
    unordered_map<int,int> dp;
    int ans = INT_MAX;
    int solve(vector<int>& nums, long first, int firstCnt, long totalSum, int mask) {
        if(firstCnt >= nums.size()/2) {
            long sec = totalSum - first;
            return abs(first-sec);
        }
        
        if(dp.find(mask)!=dp.end()){
            return dp[mask];
        }
        
        int res = INT_MAX;
        for(int j=0;j<nums.size();j++) {
            if((mask & (1<<j)) != 0)  continue;
            res = min(res, solve(nums,first+nums[j], firstCnt+1, totalSum, mask | 1<<j));
        }
        return dp[mask]=res;
    }
    
    int minimumDifference(vector<int>& nums) {
        int n = nums.size();
        long totalSum = 0;
        for(int &i:nums) totalSum+=i;
        return solve(nums,0,0,totalSum, 0);
    }
};