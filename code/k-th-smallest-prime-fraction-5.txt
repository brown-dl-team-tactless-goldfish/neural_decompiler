class Solution
{
public:
    vector<int> kthSmallestPrimeFraction(vector<int> &A, int K)
    {
        int n = A.size();
        // pq of size n
        double low = 0.0, high = 1.0, mid;
        // constant iterations, 20 iteration will have high - low < 1e-6
        // each search is nlogn
        while (low < high)
        {
            mid = (low + high) / 2.0;
            // count smaller than mid;
            int count = 0;
            for (auto den : A)
            {
                int limit = mid * den;
                // count smaller and equal than limit
                int c = upper_bound(A.begin(), A.end(), limit) - A.begin();
                count += c;
            }
            if (count == K)
                break;
            else if (count > K)
                high = mid;
            else
                low = mid;
        }
        // get largest fraction smaller or equal to mid
        // O(n^2)
        double maxx = 0;
        vector<int> res;
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                double d = (double)A[i] / A[j];
                if (d <= mid && d > maxx)
                {
                    maxx = d;
                    res = {A[i], A[j]};
                }
            }
        }
        return res;
    }
};