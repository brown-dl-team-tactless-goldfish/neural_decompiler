class cell{
    public:
    int val,x,y;
    cell(int a,int b,int c){
        val = a,x=b,y=c;
    }
};
struct Compare { 
    bool operator()(cell const& c1, cell const& c2) { 
        return c1.val > c2.val; 
    } 
};
class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& arr) {
        priority_queue<cell,vector<cell>,Compare>pq;
        int n = arr.size();
        //len is length of window , 
        int len=INT_MIN,sp=INT_MAX,ep=INT_MIN;
        for(int i=0;i<n;i++){
            pq.push(cell(arr[i][0],i,0));
            sp = min(sp,arr[i][0]);
            ep = max(ep,arr[i][0]);
        }
        int sf=sp,ef=ep;
        len = ep-sp+1;
        while(!pq.empty()){
            cell c = pq.top();
            pq.pop();
            cell c2 = pq.top();
            int sz = arr[c.x].size();
            if(c.y<sz-1){
                cell next(arr[c.x][c.y+1],c.x,c.y+1);
                sp = min(c2.val,arr[c.x][c.y+1]);
                ep = max(ep,arr[c.x][c.y+1]);
                pq.push(next);
            }else break;
            if(len>ep-sp+1){
                len = ep-sp+1;
                if(len<ef-sf+1)
                    ef = ep,sf=sp;
            }
        }
        cout<<"len is "<<len<<" sp is "<<sp<<" and ep is "<<ep<<endl;
        vector<int>sol;
        sol.push_back(sf);
        sol.push_back(ef);
        return sol;
    }
};