class Solution {
public:
    int n;
    vector<int> cycleLengthQueries(int n, vector<vector<int>>& queries) {
        this->n = n;
        vector<int> res;
        for(auto& ele: queries){
            if(ele[0] == ele[1]){
                res.push_back(1);
                continue;
            }

            int num = getNumEdges(ele[0], ele[1]);
            res.push_back(num);
        }

        return res;
    }

    int getNumEdges(int a, int b){
        int i = 30;
        int j = 30;
        while(true){
            int c = a & (1<<i);
            if(c != 0){
                break;
            }
            i--;
        }

        while(true){
            int c = b & (1<<j);
            if(c!=0){
                break;
            }
            j--;
        }

        int h1 = i;
        int h2 = j;

        while(i>=0 && j>=0){
            int bit_a = (1<<i)&a;
            int bit_b = (1<<j)&b;
            if(bit_a !=0 && bit_b == 0){
                break;
            }
            if(bit_a == 0 && bit_b!=0){
                break;
            }

            i--;
            j--;
        }

        return i+1+j+1+1;


    }

    
};