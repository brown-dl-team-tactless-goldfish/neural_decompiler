class Solution {
public:
    int minimumVisitedCells(vector<vector<int>>& grid) {
        int n = grid.size(),m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{0,0}});
        vis[0][0] = 1;
        while(!q.empty()){
            auto top = q.front();
            q.pop();
            int steps = top.first, i = top.second.first, j = top.second.second;
            if(i == n-1 && j == m-1) return steps+1;
            for(int col=min(m-1,grid[i][j] + j);col >= j+1;col--){
                if(!vis[i][col]){
                    q.push({steps+1,{i,col}});
                    vis[i][col] = 1;
                }
            }
            for(int row=min(n-1,grid[i][j] + i);row >= i+1;row--){
                if(!vis[row][j]){
                    q.push({steps+1,{row,j}});
                    vis[row][j] = 1;
                }
            }
        }
        return -1;
    }
};