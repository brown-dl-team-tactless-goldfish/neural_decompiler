void gameOfLife(int** board, int boardSize, int* boardColSize){
    int life;
    int **duplicate = (int**)malloc(sizeof(int*) * (boardSize + 2));
    for (int i = 0; i < boardSize + 2; i++)
    {
        duplicate[i] = (int*)malloc(sizeof(int) * (*boardColSize + 2));
        for (int j = 0; j < *boardColSize + 2; j++)
            duplicate[i][j] = 0;
    }  
    for (int i = 0; i < boardSize; i++)
    {
        for (int j = 0; j < *boardColSize; j++)
            duplicate[i + 1][j + 1] = board[i][j];
    }    

    for (int i = 0; i < boardSize; i++)
    {
        for (int j = 0; j < *boardColSize; j++)
        {
            life = 0;
            (duplicate[i + 1 - 1][j + 1 - 1]) ? life++ : 0;
            (duplicate[i + 1 - 1][j + 1]) ? life++ : 0;
            (duplicate[i + 1 - 1][j + 1 + 1]) ? life++ : 0;
            (duplicate[i + 1][j + 1 - 1]) ? life++ : 0;
            (duplicate[i + 1][j + 1 + 1]) ? life++ : 0;                        
            (duplicate[i + 1 + 1][j + 1 - 1]) ? life++ : 0;
            (duplicate[i + 1 + 1][j + 1]) ? life++ : 0;
            (duplicate[i + 1 + 1][j + 1 + 1]) ? life++ : 0;

            if (duplicate[i + 1][j + 1] == 0 && life == 3)
                board[i][j] = 1;
            else if (duplicate[i + 1][j + 1] && life < 2)
                board[i][j] = 0;
            else if (duplicate[i + 1][j + 1] && (life == 3 || life == 2))
                board[i][j] = 1;
            else if (duplicate[i + 1][j + 1] && life > 3)
                board[i][j] = 0;
        }
    }
}