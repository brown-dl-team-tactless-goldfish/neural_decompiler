class Solution {
    int solve(vector<string>& words, vector<char>& letters, vector<int>& score) {
        unordered_map<char, int> m;
        for(char c : letters) m[c]++;

        int sum = 0;
        for(string w : words) {
            int s = 0;
            for(char c : w) {
                if(m.find(c) == m.end()) {
                    s = 0;
                    break;
                }
                m[c]--;
                if(!m[c]) m.erase(c);
                s += score[c - 'a'];
            }
            sum += s;
        }
        return sum;
    }
    void dfs(int i, int n, vector<string> &v, vector<string>& words, vector<char>& letters, vector<int>& score, int &ans) {
        if(i == n) {
            ans = max(ans, solve(v, letters, score));
            return;
        }
        dfs(i + 1, n, v, words, letters, score, ans);
        v.push_back(words[i]);
        dfs(i + 1, n, v, words, letters, score, ans);
        v.pop_back();
    }
public:
    int maxScoreWords(vector<string>& words, vector<char>& letters, vector<int>& score) {
        int ans = 0, n = words.size();
        vector<string> v;
        dfs(0, n, v, words, letters, score, ans);
        return ans;
    }
};