class Solution {
public:
    
    int n;
    vector<int>arr[45];
    long long int dp[45][1<<11];
    int mod = 1e9 + 7;
    
    long long int kil(int idx, int mask)
    {
        if(idx == 41)
        {
            int cnt = 0;
            while(mask)
            {
                if(mask&1)
                    cnt += 1;
                mask /= 2;
            }
            // all people are wearing some hat
            if(cnt == n)
                return 1;
            return 0;  
        }
        
        if(dp[idx][mask] != -1)
            return dp[idx][mask];
        dp[idx][mask] = 0;
        
        // nobody wears this particular hat
        dp[idx][mask] = (dp[idx][mask] + kil(idx+1, mask)) % mod;
        
        for(int i=0;i<arr[idx].size();i++)
        {
            if(mask & (1 << arr[idx][i]))
                continue;
            dp[idx][mask] = (dp[idx][mask] + kil(idx+1, mask | (1 << arr[idx][i]))) % mod;
        }
        return dp[idx][mask];
    }    
    
    int numberWays(vector<vector<int>>& hats) {
        n = hats.size();
        memset(dp, -1, sizeof dp);
        
        // arr[j] -=> jth hat can be weared by {....} these people
        for(int i=0;i<hats.size();i++)
            for(int j=0;j<hats[i].size();j++)
                arr[hats[i][j]].push_back(i);
        
        return kil(1, 0);
    }
};