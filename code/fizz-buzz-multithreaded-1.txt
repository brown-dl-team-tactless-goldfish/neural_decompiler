typedef struct {
    int n;
    int curr;
    int turn; //turn 0 -> number, turn 1 -> fizz, turn 2 -> bizz, turn 3 -> fizzbizz
} FizzBuzz;

pthread_mutex_t mutex;
pthread_cond_t cond;

FizzBuzz* fizzBuzzCreate(int n) {
    FizzBuzz* obj = (FizzBuzz*) malloc(sizeof(FizzBuzz));
    obj->n = n;
    obj->curr = 1;
    obj->turn = 0;
    return obj;
}

int cmn(FizzBuzz *obj, int turn) {
    pthread_mutex_lock(&mutex);
    while (obj->turn != turn && obj->curr <= obj->n)
        pthread_cond_wait(&cond, &mutex);
    
    if (obj->curr > obj->n)
        return -1;

    if (turn == 0)
        printNumber(obj->curr);
    else if (turn == 1)
        printFizz();
    else if (turn == 2)
        printBuzz();
    else if (turn == 3)
        printFizzBuzz();
    obj->curr++;

    if ((obj->curr % 3 == 0) && (obj->curr % 5 == 0))
        obj->turn = 3;
    else if (obj->curr % 3 == 0)
        obj->turn = 1;
    else if (obj->curr % 5 == 0)
        obj->turn = 2;
    else
        obj->turn = 0;
    pthread_cond_broadcast(&cond);

    pthread_mutex_unlock(&mutex);
    return 0;
}
// printFizz() outputs "fizz".
void fizz(FizzBuzz* obj) {
    while (1) {
        if (cmn(obj, 1) ==  -1)
            break;    
    }
    pthread_mutex_unlock(&mutex);
}

// printBuzz() outputs "buzz".
void buzz(FizzBuzz* obj) {
    while (1) {
        if (cmn(obj, 2) ==  -1)
            break;    
    }
    pthread_mutex_unlock(&mutex);
}

// printFizzBuzz() outputs "fizzbuzz".
void fizzbuzz(FizzBuzz* obj) {
    while (1) {
        if (cmn(obj, 3) ==  -1)
            break;    
    }
    pthread_mutex_unlock(&mutex);
}

// You may call global function `void printNumber(int x)`
// to output "x", where x is an integer.
void number(FizzBuzz* obj) {
    while (1) {
        if (cmn(obj, 0) ==  -1)
            break;    
    }
    pthread_mutex_unlock(&mutex);
}

void fizzBuzzFree(FizzBuzz* obj) {
    if(obj)
        free(obj);
}