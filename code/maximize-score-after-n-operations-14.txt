class Solution {
public:
    int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a%b);
    }
    
    int dp[(1 << 14)];
    int solve(int mask, vector<int> &a) {
        if(mask == 0) return 0;
        if(dp[mask] != -1) return dp[mask];
        int operation_cnt = a.size() - __builtin_popcount(mask);
        operation_cnt/=2;
        operation_cnt++;
        
        int ans = 0;
        for(int i = 0; i < a.size(); i++) {
            for(int j = 0; j < a.size(); j++) {
                if(j != i && (mask & (1 << i)) && (mask & (1 << j))) {
                    int next_mask = mask;
                    next_mask ^= (1 << i);
                    next_mask ^= (1 << j);
                    ans = max(ans, operation_cnt * gcd(a[i], a[j]) + solve(next_mask, a));
                }
            }
        }
        
        return dp[mask] = ans;
    }
    
    int maxScore(vector<int>& a) {
        int N = a.size(); memset(dp, -1, sizeof(dp));
        return solve(((1 << N) - 1), a);
    }
};