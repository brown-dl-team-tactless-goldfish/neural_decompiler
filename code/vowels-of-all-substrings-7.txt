class Solution {
public:
    long long countVowels(string word) {
        int n=word.size();
        vector<int> poses;
        
        for(int i=0;i<n;++i) 
            if(word[i]=='a' || word[i]=='e'|| word[i]=='i'|| word[i]=='o'|| word[i]=='u') 
                poses.push_back(i);
        
        int len = poses.size();
        vector<int> gapCounts(len+1,0);
        for(int i=0;i<=len;++i)
          gapCounts[i]=((i==len)?n:poses[i])- (i==0?-1:poses[i-1]);

        return calcSum(gapCounts);
    }
    
    long long calcSum(const vector<int>&nums)
    {
        int len=nums.size();
        long long sumRight = 0, sumRightOne=0;
        for(int i=1;i<len;++i) sumRight += nums[i]*i, sumRightOne += nums[i];
        
        long long count = 0;
        for(int i=0;i<len-1;++i) {
            count+= nums[i]* sumRight;
            sumRight -= sumRightOne;
            sumRightOne-= nums[i+1];
        }

        return count;
    }
};


//a b c d e

//a*b + a*c*2 + a*d*3 + a*e*4 +
//b*c + b*d*2 + b*e*3 +
//c*d + c*e*2
//d*e