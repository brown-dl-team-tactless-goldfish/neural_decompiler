/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int visit(int **grid, int row, int col, int gridSize, int *gridColSize) {
    //If position of the raw over than gridSize, that means the ball already out of the bottom. Return the column.
    if(row >= gridSize)
        return col;
    //Position of col over the limit of grid, return -1.
    if(col < 0 || col >= *gridColSize)
        return -1;
    if(grid[row][col] == 1) { // top-left to bottom-right
        if(col == (*gridColSize)-1) //the ball get stuck at right wall
            return -1;
        if(grid[row][col+1] == -1) //the ball get stuck at "V" shaped
            return -1;
        return visit(grid,row+1,col+1,gridSize,gridColSize); //keep visit to down and to right.
    } else {  // top-right to bottom-left
        if(col == 0) // the ball get stuck at left wall
            return -1;
        if(grid[row][col-1] == 1) //the ball get stuck at "V" shaped
            return -1;
        return visit(grid,row+1,col-1,gridSize,gridColSize); //keep visit to down and to left.
    }
}

int* findBall(int** grid, int gridSize, int* gridColSize, int* returnSize){
    // How many column as how many balls
    int *ball = (int*)malloc(sizeof(int)*(*gridColSize));
    *returnSize = *gridColSize;

    for(int col = 0; col < *gridColSize; col++) {
        ball[col] = visit(grid, 0, col, gridSize, gridColSize);
    }

    return ball;
}