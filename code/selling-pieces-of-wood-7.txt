public long sellingWood(int m, int n, int[][] prices) {
    int p[][] = new int[m + 1][n + 1];
    long memo[][] = new long[m + 1][n + 1];
    for (int i = 0; i <= m; i++) Arrays.fill(memo[i], -1);
    for (int pri[]: prices) p[pri[0]][pri[1]] = pri[2];
    return dp(m, n, memo, p);
}
private long dp(int i, int j, long memo[][], int p[][]) {
    if (i == 0 || j == 0) return 0;
    if (memo[i][j] > -1) return memo[i][j];
    long ans = p[i][j];
    for (int ii = 1; ii <= i / 2; ii++) 
        ans = Math.max(ans, dp(ii, j, memo, p) + dp(i - ii, j, memo, p));
    for (int jj = 1; jj <= j / 2; jj++) 
        ans = Math.max(ans, dp(i, jj, memo, p) + dp(i, j - jj, memo, p));
    return memo[i][j] = ans;
}