#define MOD 1000000007

int countApples(char **pizza, int r, int c, int sr, int sc) {
    int count = 0;
    for (int i = sr; i < r; i++) {
        for (int j = sc; j < c; j++) {
            if (pizza[i][j] == 'A') {
                count++;
            }
        }
    }
    return count;
}

int dfs(char **pizza, int r, int c, int k, int sr, int sc, int ***memo) {
    if (k == 1) {
        return countApples(pizza, r, c, sr, sc) > 0;
    }
    if (memo[sr][sc][k] != -1) {
        return memo[sr][sc][k];
    }
    int ways = 0;
    // vertical cuts
    for (int i = sr + 1; i < r; i++) {
        if (countApples(pizza, i, c, sr, sc) > 0) {
            ways = (ways + dfs(pizza, r, c, k - 1, i, sc, memo)) % MOD;
        }
    }
    // horizontal cuts
    for (int j = sc + 1; j < c; j++) {
        if (countApples(pizza, r, j, sr, sc) > 0) {
            ways = (ways + dfs(pizza, r, c, k - 1, sr, j, memo)) % MOD;
        }
    }
    memo[sr][sc][k] = ways;
    return ways;
}

int ways(char **pizza, int pizzaSize, int k) {
    int r = pizzaSize, c = strlen(pizza[0]);
    int ***memo = malloc(sizeof(int**) * r);
    for (int i = 0; i < r; i++) {
        memo[i] = malloc(sizeof(int*) * c);
        for (int j = 0; j < c; j++) {
            memo[i][j] = malloc(sizeof(int) * (k + 1));
            for (int l = 0; l <= k; l++) {
                memo[i][j][l] = -1;
            }
        }
    }
    int result = dfs(pizza, r, c, k, 0, 0, memo);
    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            free(memo[i][j]);
        }
        free(memo[i]);
    }
    free(memo);
    return result;
}