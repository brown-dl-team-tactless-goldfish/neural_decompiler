class Solution {
private:
    class Item {
        public: 
            int v;
            int r;
            int c;
            Item(int val, int row, int col): v(val), r(row), c(col) { }
    };
public:
    
    class Compare {
      public:
        bool operator()(const Item &i1, const Item &i2) {
            return i1.v > i2.v;
        }
    };

    priority_queue<Item, vector<Item>, Compare> pq;
    vector<int> smallestRange(vector<vector<int>>& nums) {
        int H = INT_MIN;
        int R = nums.size();
        for (int r = 0; r < R; ++r) {
            H = max(H, nums[r][0]);
            pq.push(Item(nums[r][0],r,0));
        }
        
        vector<int> ans;
        ans.push_back(pq.top().v);
        ans.push_back(H);
        while (pq.size() == R) {
            auto item = pq.top(); pq.pop();
            int r = item.r;
            int c = item.c;
            
            if (c < nums[r].size()-1) {
                c++;
                H = max(H, nums[r][c]);
                pq.push(Item(nums[r][c], r, c));
                if (H - pq.top().v < ans[1] - ans[0]) {
                    ans[0] = pq.top().v;
                    ans[1] = H;
                }
            }
        }
        return ans;    
    }
};