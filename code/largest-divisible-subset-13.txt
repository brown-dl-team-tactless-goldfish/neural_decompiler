class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if(nums.empty()) return {};
        sort(begin(nums), end(nums));
        const int n = nums.size();
        vector<int> dp(n), parents(n), res;
        int maxL = 0, beginIndex = -1;
        for(int i = n - 1; i >= 0; i--)
            for(int j = i; j < n; j++)
                if(nums[j] % nums[i] == 0 && dp[i] < dp[j] + 1){
                    dp[i] = dp[j] + 1;                    
                    parents[i] = j;
                }
            
        beginIndex = max_element(begin(dp),end(dp)) - begin(dp);
        maxL = dp[beginIndex];
        
        while(maxL--){
            res.push_back(nums[beginIndex]);
            beginIndex= parents[beginIndex];
        }
        return res;
    }
};