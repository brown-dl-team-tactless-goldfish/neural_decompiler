
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int *kWeakestRows(int **mat, int matSize, int *matColSize, int k, int *returnSize) {
    *returnSize = k;
    for(int i=0;i<matSize;i++) {
        for(int j=1;j<*matColSize;j++) {
            mat[i][0] += mat[i][j];
        }
    }

    // for(int i=0;i<matSize;i++) {
    //     printf("%d\n", mat[i][0]);
    // }
    int *result = malloc(k*sizeof(int));
    int candicate = 0;
    int count = 0;
    int index = 0;
    /* Greedy approach */
    while(count < k) {
        if(mat[index][0] != INT32_MAX) {
            if(mat[index][0] == candicate) {
                result[count++] = index;
                mat[index][0] = INT32_MAX;
            }
        }

        index++;
        if(index == matSize) {
            index = 0;
            candicate++;
        }
    }

    return result;
}
