
typedef struct{
    int index, val;
}sol;

int sol_cmp(const void *a, const void *b){
    sol *A = (sol *)a;
    sol *B = (sol *)b;
    return  A->val-B->val;
}

int** groupThePeople(int* groupSizes, int groupSizesSize, int* returnSize, int** returnColumnSizes){
    sol group[groupSizesSize];
    for(int i=0; i<groupSizesSize; i++)
    {
        group[i].index=i;
        group[i].val=groupSizes[i];
    }
    qsort((void *)group, groupSizesSize, sizeof(group[0]), sol_cmp);
    int now=0;
    *returnSize =0;
    while(now<groupSizesSize)
    {
        (*returnSize)++;
        now+=group[now].val;
    }
    (*returnColumnSizes)=malloc((*returnSize)*sizeof(int));
    int tl=0;
    now=0;;
     while(now<groupSizesSize)
    {
        (*returnColumnSizes)[tl]=group[now].val;
        tl++;
        now+=group[now].val;
    }
    
    int ** ans;
    ans=(void **) malloc((*returnSize+1)*sizeof(int*));
    for(int i=0; i<(*returnSize); i++)
        ans[i]=(void *)malloc(((*returnColumnSizes)[i]+1)*sizeof(int));
    now=0;
    tl=0;
    while(now<groupSizesSize)
    {
        for(int i=0; i<group[now].val; i++)
            ans[tl][i]=group[now+i].index;
        tl++;
        now+=group[now].val;
    }
    return ans;
}
