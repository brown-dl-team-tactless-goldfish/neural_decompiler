class Solution {
public:
    
    int minSwaps(vector<int> arr, int n){
        pair<int, int> arrPos[n];
        for (int i = 0; i < n; i++){
            arrPos[i].first = arr[i];
            arrPos[i].second = i;
        }
        sort(arrPos, arrPos + n);
        vector<bool> vis(n, false);
        int ans = 0;
        for
            (int i = 0; i < n; i++){
            if (vis[i] || arrPos[i].second == i)
                continue;
            int cycle_size = 0;
            int j = i;
            while (!vis[j]){
                vis[j] = 1; 
                j = arrPos[j].second;
                cycle_size++;
            } 
            if (cycle_size > 0){
                ans += (cycle_size - 1);
            }
        } 
        return ans;
    }
    int minimumOperations(TreeNode* root) {
        int ans = 0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int t = q.size();
            vector<int> temp;
            while(t--){
                auto f = q.front();
                temp.push_back(f->val);
                q.pop();
                if(f->left)
                    q.push(f->left);
                if(f->right)
                    q.push(f->right);
            }
            ans += minSwaps(temp,(int)temp.size());
        }
        return ans;
    }
};