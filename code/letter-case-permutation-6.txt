void backtracking(int index, char* s, char** res, int* returnSize)
{
        if (s[index] == '\0') {
                char *str = malloc(sizeof(char) * 13);
                strcpy(str, s);
                res[(*returnSize)++] = str;
                return;
        }
        backtracking(index + 1, s, res, returnSize);
        if (isalpha(s[index])) {
                s[index] ^= 32;
                backtracking(index + 1, s, res, returnSize);
                s[index] ^= 32;
        }
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** letterCasePermutation(char * s, int* returnSize)
{
        char **res = malloc(sizeof(char*) * 4096);
        *returnSize = 0;
        backtracking(0, s, res, returnSize);
        return res;
}