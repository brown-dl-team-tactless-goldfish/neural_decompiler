class Solution {
    const int M = 1000000007;
    void add(int &x, int y) {
        if ((x += y) >= M) {
            x -= M;
        }
    }
    
    int mul(long long x, long long y) {
        return x * y % M;
    }
    
    int p(int x) {
        int r = 1;
        for (int i = M - 2; i; i >>= 1) {
            if (i & 1) {
                r = mul(r, x);
            }
            x = mul(x, x);
        }
        return r;
    }
    int dfs(vector<vector<int>> &dp, int n, int k) {
        int& r = dp[n][k];
        if (r >= 0) {
            return r;
        }
        if (n == 0) {
            return r = k == 1 ? 1 : 0;
        }
        if (k == 1) {
            return r = 0;
        }
        r = 0;
        for (int i = 1; i * i <= k; ++i) {
            if (k % i == 0) {
                const int x = k / i;
                if (i > 1) {
                    add(r, dfs(dp, n - 1, x));
                }
                if (x != i && x > 1) {
                    add(r, dfs(dp, n - 1, i));
                }
            }
        }
        return r;
    }
public:
    vector<int> waysToFillArray(vector<vector<int>>& queries) {
        vector<vector<int>> dp(14, vector<int>(10001, -1));
        vector<int> f(15);
        for (int i = 1; i < 14; ++i) {
            f[i] = p(i);
        }
        vector<int> r(queries.size());
        for (int i = 0; i < queries.size(); ++i) {
            for (int j = 1, k = 0, c = 1; k <= 13 && k <= queries[i][0];) {
                const int temp = dfs(dp, k, queries[i][1]);
                if (temp) {
                    add(r[i], mul(temp, c));
                }
                c = mul(c, queries[i][0] - k);
                c = mul(c, f[++k]);
                
            }
        }
        return r;
    }
};