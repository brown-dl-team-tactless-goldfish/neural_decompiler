
#define MAX_VAL 1001

class Solution {
public:
    int movesToMakeZigzag(vector<int>& nums) {
        int size{(int)nums.size()};
        std::vector<std::vector<int>> dp1(2, std::vector<int>(MAX_VAL+1, INT32_MAX)), dp2(2, std::vector<int>(MAX_VAL+1, INT32_MAX)); // 1 == max, 2 == min
        for(int j{1}; j <= nums[0]; ++j) dp1[0][j] = nums[0]-j;
        for(int j{0}; j <= nums[0]; ++j) dp2[0][j] = nums[0]-j;
        for(int i{1}; i < size; ++i) {
            std::vector<int> tmp1(dp1[0].begin(), dp1[0].end()), tmp2(dp2[0].begin(), dp2[0].end());
            for(int j{1}, min_{INT32_MAX}; j <= nums[i]; ++j) {
                min_ = std::min(min_, tmp2[j-1]);
                dp1[1][j] = min_ + nums[i]-j;
            }
            for(int j{nums[i-1]}, min_{INT32_MAX}; j > 0; --j) {
                min_ = std::min(min_, tmp1[j]);
                if(j <= nums[i]+1) dp2[1][j-1] = min_ + nums[i]-j+1;
            }
            
            std::swap(dp1[0], dp1[1]);
            std::swap(dp2[0], dp2[1]);
            std::fill_n(dp1[1].begin(), MAX_VAL+1, INT32_MAX);
            std::fill_n(dp2[1].begin(), MAX_VAL+1, INT32_MAX);
        }

        return std::min(*min_element(dp1[0].begin(), dp1[0].end()), *min_element(dp2[0].begin(), dp2[0].end()));
    }
};