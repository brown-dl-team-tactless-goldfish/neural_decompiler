    // Gcd implementation is omitted here 

    private static int Solve(int[] values, int index, int bitmask, Dictionary<(int index, int mask), int> cache) {
        if (values.Length <= 1)
            return 0;
        
        if (cache.TryGetValue((index, bitmask), out int known))
            return known;
        
        int result = 0;
        
        for (int i = 0; i < values.Length; ++i) {
            int bit1 = 1 << i;
            
            if ((bit1 & bitmask) != 0)
                continue;
            
            for (int j = i + 1; j < values.Length; ++j) {
                int bit2 = 1 << j;
                
                if ((bit2 & bitmask) != 0)
                    continue;
                
                int current = index * Gcd(values[i], values[j]) + Solve(values, index + 1, bitmask | bit1 | bit2, cache);
                
                result = Math.Max(current, result);
            }
        }
        
        cache.Add((index, bitmask), result);
        
        return result;
    }
    
    public int MaxScore(int[] nums) => Solve(nums, 1, 0, new Dictionary<(int index, int mask), int>()); 