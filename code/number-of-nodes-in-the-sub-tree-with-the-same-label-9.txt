class Solution {
public:
    vector<int> ans;
    vector<vector<int>> adj;

    int dfs(char tar, string& labels, int node, int parent) {
        int count = (labels[node] == tar);
        for (int i : adj[node]) {
            if (i != parent) count += dfs(tar, labels, i, node);
        }
        if (labels[node] == tar) ans[node] = count;
        return count;
    }

    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        ans.resize(n);
        adj.resize(n);
        for (vector<int>& v : edges) {
            int a = v[0], b = v[1];
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        for (char c = 'a'; c <= 'z'; c++) dfs(c, labels, 0, -1);
        return ans;
    }
};