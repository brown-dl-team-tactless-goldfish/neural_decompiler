typedef struct {
    int elem;
    int rank;
    UT_hash_handle hh;
} hElem;

int cmp(const void *a, const void *b) {
    return *(int *)a - *(int *)b;
}

int* arrayRankTransform(int* arr, int arrSize, int* returnSize){
    *returnSize = arrSize;
    int *tempArr = calloc(sizeof(int), arrSize);    
    
    // create array copy and sort them
    memcpy(tempArr, arr, sizeof(int)* arrSize);
    qsort(tempArr, arrSize, sizeof(int), cmp);
    
    // store the element and their rank in hash map using sorted array
    hElem *map = NULL, *s;
    for(int i = 0; i < arrSize; i++) {
        HASH_FIND_INT(map, &tempArr[i], s);
        if(!s) {
            s = calloc(sizeof(hElem), 1);
            s->elem = tempArr[i]; s->rank = HASH_COUNT(map) + 1;
            HASH_ADD_INT(map, elem, s);
        }
    }
    
    // update the rank in sorted array using map
    for(int i = 0; i < arrSize; i++) {
        HASH_FIND_INT(map, &arr[i], s);
        if(s)
            tempArr[i] = s->rank;
    }
    return tempArr;
} 