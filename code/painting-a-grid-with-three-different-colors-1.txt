class Solution {
public:
    int colorTheGrid(int m, int n) {
        vector<int> states;
        int mod = 1e9 + 7;
        
		// how many color states for each column.
		// for example m = 2, we have  
		1. R  2. R  3. G  4. G  5. B  6. B 
		   G     B     R     B     R     G
        for (int i = 0; i < pow(3, m); ++i) {
            int colorCombinations = i, colorOfPrevRow = -1;
            
            bool diffColor = true;
            for (int j = 0; j < m; ++j) {
                int colorOfCurrentRow = colorCombinations % 3;
                if (colorOfCurrentRow == colorOfPrevRow) {
                    diffColor = false;
                    break;
                }
                
                colorOfPrevRow = colorOfCurrentRow;
                colorCombinations /= 3;
            }
            
            if (diffColor) {
                states.push_back(i);
            }
        }
        
		// dp[i][j] represents how many cobinations for one exact ```states[i]``` at column ```j```. 
        vector<vector<int>> dp(states.size(), vector<int>(n));
        for (int i = 0; i < states.size(); ++i) {
            dp[i][0] = 1;
        }
        
        for (int j = 1; j < n; ++j) {
            for (int i = 0; i < states.size(); ++i) {
                for (int k = 0; k < states.size(); ++k) {
                    if (validColor(states[i], states[k], m)) {
                        dp[i][j] = (dp[i][j] + dp[k][j - 1]) % mod;
                    }
                }
            }
        }
        
        int ans = 0;
        
        for (int i = 0; i < states.size(); ++i) {
            ans = (ans + dp[i][n - 1]) % mod;
        }
        
        return ans;
    }
private:
    bool validColor(int color1, int color2, int m) {
        for (int i = 0; i < m; ++i) {
            if (color1 % 3 == color2 % 3) {
                return false;
            }
            
            color1 /= 3;
            color2 /= 3;
        }
        
        return true;
    }
};