public class Solution
{
	public int MinSessions(int[] tasks, int sessionTime)
	{
		int[,] dp = new int[(1 << tasks.Length), sessionTime + 1];
		return Solve(tasks, sessionTime, dp, 0, 0);
	}

	public int Solve(int[] tasks, int sessionTime, int[,] dp, int taken, int currTime)
	{
		if (taken == (1 << tasks.Length) - 1)
			return 1;

		if (dp[taken, currTime] != 0)
			return dp[taken, currTime];

		int ans = int.MaxValue;
		for(int i = 0; i < tasks.Length; i++)
		{
			if ((taken & (1 << i)) > 0)
				continue;

			if (currTime + tasks[i] <= sessionTime)
				ans = Math.Min(ans, Solve(tasks, sessionTime, dp, taken | (1 << i), currTime + tasks[i]));
			else
				ans = Math.Min(ans, 1 + Solve(tasks, sessionTime, dp, taken | (1 << i), tasks[i]));
		}

		dp[taken, currTime] = ans;
		return ans;
	}
}