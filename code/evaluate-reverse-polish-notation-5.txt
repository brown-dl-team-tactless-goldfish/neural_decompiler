//updated on 12/17/2022
//used long long int instead of int for the stack to avoid possible integer overflow that may occur during the calculation

#include <stdlib.h>
#include <ctype.h>
#include <string.h>

int evalRPN(char ** tokens, int tokensSize){
    int ans = 0, len = 0, top = -1;
    long long int stack[10000] = {0}, val = 0;
    long long int val1 = 0, val2 = 0;

    char opt = 0;

    for (int i = 0; i < tokensSize; i++) {
        len = strlen(tokens[i]);
        
        //if the last char in tokens[i] is a digit, tokens[i] must be a number
        if (isdigit(tokens[i][len-1])) {
            val = atoll(tokens[i]);
            stack[++top] = val;
        } else {
            opt = tokens[i][0];
            val2 = stack[top--];
            val1 = stack[top--];
            
            switch (opt) {
                case '+':
                    val = val1 + val2;
                    break;
                case '-':
                    val = val1 - val2;
                    break;
                case '*':
                    val = val1 * val2;
                    break;    
                case '/':
                    val = val1 / val2;
                    break;
            }

            //push val to the stack
            stack[++top] = val;
        }
    }
    
    ans = (int)stack[top];

    return ans;
}