#define SIZE 26

typedef struct MapSum {
    int val;
    char c;
    bool is_word;
    struct MapSum* children[SIZE];
} MapSum;

/** Initialize your data structure here. */
MapSum* mapSumCreate() {
    MapSum* m = malloc(sizeof(MapSum));
    memset(m, 0, sizeof(*m));
    m->c = '\0';
    m->is_word = false;
    m->val = 0;
    return m;
}

void mapSumInsert(MapSum* obj, char* key, int val) {
    if(!obj || !key)
        return;
    MapSum* it = obj;
    int idx = -1;
    for(char* p = key; *p != '\0'; ++p)
    {
        idx = *p - 'a';
        if(!(it->children[idx]))
        {
            it->children[idx] = mapSumCreate();
            it->children[idx]->c = *p;
        }
        it = it->children[idx];
    }
    it->is_word = true;
    it->val = val;
}

int mapSumSum(MapSum* obj, char* prefix) {
    if(!obj || !prefix)
        return 0;
    MapSum* it = obj;
    int idx = -1;
    int acc = 0;
    char* p = prefix;
    for(; *p != '\0'; ++p)
    {
        idx = *p - 'a';
        if(!(it->children[idx]))
            return 0;
        it = it->children[idx];
    }
    acc += it->val;
    for(int i = 0; i < SIZE; ++i)
        acc += mapSumSum(it->children[i], p);
    return acc;
}

void mapSumFree(MapSum* obj) {
    if(!obj)
        return;
    for(int i = 0; i < SIZE; ++i)
        mapSumFree(obj->children[i]);
    free(obj);
    obj = NULL;
}

/**
 * Your MapSum struct will be instantiated and called as such:
 * struct MapSum* obj = mapSumCreate();
 * mapSumInsert(obj, key, val);
 * int param_2 = mapSumSum(obj, prefix);
 * mapSumFree(obj);
 */