#define ULL unsigned long long
unsigned long long hashValue(int x, int y){
    ULL val = 0 ;
    if(x >= 0)
        val += x ;
    else
        val += -1 * x + 40000 ;
    if( y >= 0)
        val += (ULL)y * 100000 ;
    else
        val += (ULL)(-1*y + 40000) * 100000 ;  
    return val ;
}

void insert(ULL** hash, int N, ULL val){
    ULL d = val ;
    while(1){
        if(hash[d % N] == NULL){
            hash[d % N] = malloc(sizeof(ULL )) ;
            hash[d % N][0] = val ;
            break ;
        }
        else if(hash[d % N][0] == val)
            break ;
        else
            d++ ;
    }
}
bool checkHash(ULL ** hash, int N, ULL val){
    ULL d = val ;
    bool ans = false ;
    while(1){
        if(hash[d % N] == NULL){
            break ;
        }
        else if(hash[d % N][0] == val){
            ans = true ;
            break ;
        }
        else
            d++ ;
    }
    return ans ;
}
int robotSim(int* commands, int commandsSize, int** obstacles, int obstaclesSize, int* obstaclesColSize){
    int N = 10 * obstaclesSize + 10;
    ULL ** hash  = calloc(N, sizeof(ULL*) ) ;
    int diret[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} } ; 
    //build obstacles hash
    for(int i = 0; i < obstaclesSize; i++){
        ULL val = hashValue(obstacles[i][0], obstacles[i][1] ) ;
        insert(hash, N, val) ;
    }
    int max = 0 ; 
    int cur = 0 ;
    int x = 0, y = 0 ;
    for(int i = 0; i < commandsSize; i++){         
        if(commands[i] == -1)
            cur = (cur + 1) % 4 ;
        else if(commands[i] == -2)
            cur = (cur -1 + 4) % 4 ;
        else{
            for(int j = 1; j <= commands[i] ; j++){
                x += diret[cur][0] ;
                y += diret[cur][1] ;
                ULL val  = hashValue(x, y) ;
                if( checkHash(hash, N, val) ){
                    x -= diret[cur][0] ;
                    y -= diret[cur][1] ; 
                    break ;
                }
            }
            max = fmax(max, x*x + y*y) ;
        }        
    }
    return max ;
}