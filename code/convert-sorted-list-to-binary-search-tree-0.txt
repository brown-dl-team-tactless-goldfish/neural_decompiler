int listLenth(struct ListNode* head){
    struct ListNode* temp = head;
    int cn = 0;
    while(temp){
        cn++;
        temp = temp->next;
    }
    return cn;
}

struct TreeNode* sortedArrayToBST(int* nums, int n){
    if(n <= 0)
        return NULL;
    struct TreeNode *root = malloc( sizeof(struct TreeNode));
    if(n == 1){
        
        root->val = nums[0];
        root->left = NULL;
        root->right = NULL;
    }
    else{
        root->val = nums[n/2];
        root->left = sortedArrayToBST(nums, n/2);
        root->right = sortedArrayToBST(&nums[n/2 + 1], n - 1 - n/2);   
    }
    
    return root;
}

struct TreeNode* sortedListToBST(struct ListNode* head){
    int n = listLenth(head);
    if (n == 0)
        return NULL;
    int* nums = malloc(n * sizeof(int));
    struct ListNode* temp = head;
    for(int i = 0; i < n; i++){
        nums[i] = temp->val;
        temp = temp->next;
    }
    
    return sortedArrayToBST(nums, n);
}