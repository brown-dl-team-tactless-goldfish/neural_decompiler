public class Solution {
    private IList<int> res = new List<int>();
    
    public IList<int> DistanceK(TreeNode root, TreeNode target, int k) {
        if (root == null)
            return res;
        
        DFS(root, target, k, Int32.MinValue);
        
        return res;
    }
    
    private int DFS(TreeNode node, TreeNode t, int k, int cur)
    {
        if (node == null)
            return Int32.MinValue;
        else if (k == cur || k == 0 && node.val == t.val)
        {
            res.Add(node.val);
            return Int32.MinValue;
        }
        
        int l = DFS(node.left, t, k, node.val == t.val ? 1 : cur + 1),
            r = DFS(node.right, t, k, node.val == t.val ? 1 : cur + 1);
        
        if (l == k)
            res.Add(node.val);
        else if (l != Int32.MinValue && l < k)
            DFS(node.right, t, k, l + 1);
        else if (r == k)
            res.Add(node.val);
        else if (r != Int32.MinValue && r < k)
            DFS(node.left, t, k, r + 1);
        
        return l != Int32.MinValue ? l + 1 : r != Int32.MinValue ? r + 1 : node.val == t.val ? 1 : Int32.MinValue;
    }
}