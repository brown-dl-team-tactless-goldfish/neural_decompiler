typedef struct s_node {
    unsigned int    time;
    struct s_node   *next;
}   t_node;

typedef struct {
    t_node          *top;
    t_node          *bottom;
    unsigned int    size;
}   RecentCounter;

RecentCounter* recentCounterCreate() {
    RecentCounter   *queue = malloc(sizeof(RecentCounter)); // compound literal
    
    *queue = (RecentCounter){.top = NULL, .bottom = NULL, .size = 0};
    return (queue);
}

void    push_back(RecentCounter *obj, int t);
int     pop_front(RecentCounter *obj);

int recentCounterPing(RecentCounter* obj, int t) {
    unsigned int    size = obj->size;
    
    push_back(obj, t);
    while (size && (t - obj->top->time > 3000))
    {
        pop_front(obj);
        --size;
    }
    return (obj->size);
}

void recentCounterFree(RecentCounter* obj) {
    unsigned int    size = obj->size;
    t_node          *node = obj->top;
    t_node          *temp;
    
    while (size) {
        temp = node;
        node = node->next;
        free(temp);
        --size;
    }
    free(obj);
}

void    push_back(RecentCounter *obj, int t)
{
    if (obj->size == 0)
    {
        obj->top = malloc(sizeof(t_node));
        *obj->top = (t_node){.next = NULL, .time = t};
        obj->bottom = obj->top;
        ++obj->size;
        return ;
    }
    obj->bottom->next = malloc(sizeof(t_node));
    *obj->bottom->next = (t_node){.next = NULL, .time = t};
    obj->bottom = obj->bottom->next;
    ++obj->size;
}

int pop_front(RecentCounter *obj)
{
    t_node      *temp;
    int         ret;
    
    if (obj->size == 0)
        return (-1);
    --obj->size;
    temp = obj->top;
    ret = temp->time;
    obj->top = obj->top->next;
    free(temp);
    return (ret);
}