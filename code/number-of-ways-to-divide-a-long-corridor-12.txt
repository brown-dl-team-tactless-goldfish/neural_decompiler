class Solution {
public:
  int numberOfWays(string c) {
    vector<int>v;
    int i = 0;
    while(i != c.size() && c[i] == 'P') i++;         //ignore first plants
    if(i == c.size()) return 0;                              //if we no have seats
  
    while(i != c.size()){
      i++;
      while(i != c.size() && c[i] == 'P')i++;          //ignore plants beetwen  pair of seats
      if(i == c.size()) return 0;                              //if we no have pair of seats
      
      int p = 0;
      i++;
      while(i != c.size() && c[i] == 'P') i++, p++;      //count plants for next pair of seats
      v.push_back(p);                                                 //and retain it
    }
    
    v.pop_back();                                //ignore last plants
    long ans = 1;
    for(auto x : v)                                          //calculate all variants (if we have)
      if(x) ans = (ans*(x+1))%1000000007;
    
    return ans;
  }
};