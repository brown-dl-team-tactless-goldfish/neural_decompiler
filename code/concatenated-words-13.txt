class Solution {
public:
    struct TrieNode {
        bool last;
        vector<TrieNode *> children;
        TrieNode() : last(false), children(26, 0) {}
    };
    TrieNode *root;
    void insert(TrieNode *root, string &s) {
        if(!root or !s.size())
            return;
        TrieNode *curr = root;
        for(auto &c : s) {
            int index = c - 'a';
            if(!curr->children[index])
                curr->children[index] = new TrieNode();
            curr = curr->children[index];
        }
        curr->last = true;
    }
    bool util(TrieNode *curr, int count, string s, int pos) {
        if(!root)
            return false;
        if(count > 1 and pos == s.size())
            return true;
        for(int i = pos; i < s.size(); i++) {
            int index = s[i] - 'a';
            if(!curr->children[index])
                return false;
            if(curr->children[index]->last and util(root, count + 1, s, i + 1))
                return true;
            curr = curr->children[index];
        }
        return false;
    }
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        root = new TrieNode();
        for(auto &word: words)
            insert(root, word);
        vector<string> res;
        for(auto &word: words){
            if(util(root, 0, word, 0))
                res.push_back(word);
        }
        return res;
    }
};