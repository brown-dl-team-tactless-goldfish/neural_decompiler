#define MOD 1000000007
#define intl long long int

unordered_map<string, intl> mp;

int solve(int n, char prev)
{
    if(n==0)
        return 1;
    
    string key = to_string(n)+"*"+prev;
    // cout<<key<<endl;
    if(mp.find(key)!=mp.end())
        return mp[key];
        
    if(prev=='a')
    {
        intl a = solve(n-1, 'e');
        return mp[key]=(a)%MOD;
    }
    if(prev=='e')
    {
        intl a = solve(n-1, 'a');
        intl b = solve(n-1, 'i');
        return mp[key]=(a+b)%MOD;
    }
    if(prev=='i')
    {
        intl a = solve(n-1, 'a');
        intl b = solve(n-1, 'e');
        intl c = solve(n-1, 'o');
        intl d = solve(n-1, 'u');
        return mp[key]=(a+b+c+d)%MOD;
    }
    if(prev=='o')
    {
        intl a = solve(n-1, 'i');
        intl b = solve(n-1, 'u');
        return mp[key]=(a+b)%MOD;
    }
    if(prev=='u')
    {
        intl a = solve(n-1, 'a');
        return mp[key]=(a)%MOD;
    }
    return 0;
}

class Solution {
public:
    int countVowelPermutation(int n) {
        intl a = solve(n-1, 'a');
        intl b = solve(n-1, 'e');
        intl c = solve(n-1, 'i');
        intl d = solve(n-1, 'o');
        intl e = solve(n-1, 'u');
        return (a+b+c+d+e)%MOD;     
    }
};