class Solution {
public:
    long long cache[205][205];
    long long price[205][205];
    long long dp(int rl, int cl) {
        if(rl == 1 && cl == 1) {
            return price[cl][rl];
        }
        long long& ans = cache[rl][cl];
        if(ans != -1) {
            return ans;
        }
        ans = 0;
        ans = max(ans, price[rl][cl]);
        for(int cut = 1; cut < rl; cut++) {
            ans = max(ans, dp(cut, cl) + dp(rl - cut, cl));
        }
        for(int cut = 1; cut < cl; cut++) {
            ans = max(ans, dp(rl, cut) + dp(rl, cl - cut));
        }
        return ans;
    }
    long long sellingWood(int n, int m, vector<vector<int>>& prices) {
        for(auto p : prices) {
            int i = p[0];
            int j = p[1];
            int c = p[2];
            price[i][j] = c;
        }
        memset(cache, -1, sizeof(cache));
        return dp(n, m);
    }
};