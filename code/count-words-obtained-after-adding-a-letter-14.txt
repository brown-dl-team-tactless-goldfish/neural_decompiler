class Solution {
private:
    int getBitmask(string& s, char skip = '~') {
        int bitmask = 0;
        
        for(auto& c : s) {
            if(skip == c) continue;
            bitmask |= (1 << (c-'a'));
        }
        return bitmask;
    }
public:
    int wordCount(vector<string>& startWords, vector<string>& targetWords) {
        
        unordered_set<int> startSet;
        
        // Store bitmask of each startWord into set
        for(auto& word : startWords) {
            int bitmask = getBitmask(word);
            startSet.insert(bitmask);
        }
        
        int count = 0;
        
        for(auto& word : targetWords) {
            int n = word.size();
            
            // Iterate over word and skip character 
            // Here 'c' is the skip character
            for(auto& c : word) {
                // Get bitmask using characters of word
                // except skip character c
                int bitmask = getBitmask(word, c);
                
                // If word with same bitmask is present in set
                // Then increment count and break
                if(startSet.find(bitmask) != startSet.end()) {
                    count++;
                    break;
                }
            }
        }        
        return count;
    }
};