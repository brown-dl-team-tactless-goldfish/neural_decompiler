/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<string>> printTree(TreeNode* root) {
        
        int height = getHeight(root);
        int width  = (1<<height) - 1;
        
        vector<vector<string>> ans (height, vector<string>(width,""));
        fill(root, ans, 0, 0, width-1);
        
        return ans;
    }
    
private:
    int getHeight(TreeNode* root)
    {
        if (!root)
            return 0;
        
        return max(getHeight(root->left), getHeight(root->right))+1;
    }
    
    void fill(TreeNode* root, vector<vector<string>>& ans, int height, int left, int right)
    {
        if (!root) return;
        
        int mid = left + (right-left)/2;
        ans[height][mid] = std::to_string(root->val);
        
        fill(root->left,  ans, height+1, left, mid-1);
        fill(root->right, ans, height+1, mid+1, right);
    }
};