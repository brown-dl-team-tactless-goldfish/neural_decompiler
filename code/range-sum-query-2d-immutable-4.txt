typedef struct {
    int **matrix;
    int matrixSize;
} NumMatrix;

NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {
    /* Pre-computes all matrix subset sums into subMatrices of
     * type NumMatrix. */
    NumMatrix *subMatrices = malloc(matrixSize * sizeof(NumMatrix));
    subMatrices->matrix = malloc((matrixSize + 1) * sizeof(int*));
    subMatrices->matrixSize = (matrixSize + 1);
    int i, j;
    for(i = 0; i <= matrixSize; i++){
        subMatrices->matrix[i] = calloc((*matrixColSize + 1), sizeof(int));
    }
    for(i = 1; i <= matrixSize; i++){
        for(j = 1; j <= *matrixColSize; j++){
            subMatrices->matrix[i][j] = (
                    subMatrices->matrix[i - 1][j] +
                    subMatrices->matrix[i][j - 1] -
                    subMatrices->matrix[i - 1][j - 1] +
                    matrix[i - 1][j - 1]
                    );
        }
    }
    return subMatrices;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
    /* Returns the sum of the elements of matrix inside the rectangle
     * defined by its upper left corner (row1, col1) and lower right corner. */
    return (
            obj->matrix[row2 + 1][col2 + 1] -
            obj->matrix[row2 + 1][col1] -
            obj->matrix[row1][col2 + 1] +
            obj->matrix[row1][col1]
           );
}

void numMatrixFree(NumMatrix* obj) {
    /* Free memory allocated for NumMatrix object. */
    int i;
    for(i = 0; i < obj->matrixSize; i++){free(obj->matrix[i]);}
    free(obj->matrix);
    free(obj);
}

/*
 * Your NumMatrix struct will be instantiated and called as such:
 * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);
 * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);
 * numMatrixFree(obj);
*/