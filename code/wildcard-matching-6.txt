bool comp(char *s, char *p, int star, int x, char **map)
{
	int i, j;
	bool res;

	if (!(*s) &&(*p)) {
		for (i=0; p[i]; ++i)
			if (p[i]!='*') return false;
		return true;
	}

	if (!(*s) && !(*p)) return true;

	if ((*s) && !(*p)) return false;

	if (*p == '?')
		return comp(s+1, p+1, star, x, map);
	else if (*p != '*')
		if (*p == *s)
			return comp(s+1, p+1, star, x, map);
		else
			return false;
	else {
		--star;
		if (star <= 0) {
			if (map[star][x]==1)
				return true;
			if (map[star][x]==0)
				return false;
			res = comp(s+x, p+1, 0, 0, map); // -1
			if (res)
				map[star][x] = 1;
			else
				map[star][x] = 0;
			return res;
		}
		for (i=0; i<=x; ++i) {
			if (map[star][i]==1)
				return true;
			if (map[star][i]==0)
				continue;
			if (comp(s+i, p+1, star, x-i, map)) { // -1
				map[star][i] = 1;
				return true;
			}
			map[star][i] = 0;
		}

		if (i>x)
			return false;
		else
			return true;
	}
}

bool isMatch(char *s, char *p)
{
	int n, n_star;
	int i, j;
	bool res = false;
	char *pp = malloc(strlen(p)+1);
	char **map;
	
	n = 0;
	n_star = 0;
	for (i=0,j=0; p[i]; ) {
		if (p[i]!='*') {
			pp[j++] = p[i++];
			n++;
		} else {
			pp[j++] = p[i++];
			n_star++;
			while(p[i]=='*') ++i;
		}
	}
	pp[j] = 0;

	n = strlen(s) - n;
	if (n<0)
		goto out1;

    map = malloc(n_star*sizeof(char *));
	for (i=0; i<n_star; ++i)
		map[i] = malloc((n+1)*sizeof(char));

	for (i=0; i<n_star; ++i)
		for (j=0; j<=n; ++j)
			map[i][j] = -1;

	res = comp(s, pp, n_star, n, map);
out:
	for (i=0; i<n_star; ++i) {
		free(map[i]);
	}
	free(map);
out1:
	free(pp);
	return res;
}