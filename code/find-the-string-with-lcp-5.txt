class Solution {
 public:
  string findTheString(vector<vector<int>> &lcp) {
    const int n = lcp.size();
    string cand = "";
    for (int i = 0; i < n; i++)
      cand += "a";
    // now we have cand as a string of length n with all a's

    for (int r = 0; r < n; r++) {
      for (int c = r; c < n; c++) {
        if (lcp[r][c] == 0 && cand[c] == cand[r])
          cand[c]++; // lcp is 0, and the chars equal, bump it up
      }
    }

    // if the cand string is beyond `z`, then impossible.
    for (char ch : cand)
      if (ch > 'z')
        return "";

    // using DP to build the would lcp matrix
    int would[n + 1][n + 1];
    memset(would, 0, sizeof(would));
    for (int r = n - 1; r >= 0; r--) {
      for (int c = n - 1; c >= 0; c--) {
        if (cand[r] == cand[c]) {
          would[r][c] = 1 + would[r + 1][c + 1];
        }
      }
    }

    // the `would` matrix we built, must equal to the original matrix given by the problem.
    for (int r = 0; r < n; r++)
      for (int c = 0; c < n; c++)
        if (would[r][c] != lcp[r][c])
          return "";

    return cand;
  }
};