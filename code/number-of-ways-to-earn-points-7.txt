class Solution {
    int m = 1e9+7;
    int dp[51][1001];
public:
    int dfs(int target, vector<vector<int>>& types, int result, int i) {
        
        if(target == result)return 1;
        if(result > target)return 0;
        if(i >= size(types))return 0;
        
        if(dp[i][result] != -1)return dp[i][result];
        
        int res = 0, marks = 0;
        
        for(int j = 0; j <= types[i][0]; j++) {
            
            res = (res + dfs(target,types,result+marks,i+1))%m;
            
            marks += types[i][1];
        }
        
        return dp[i][result] =  res;
    }
    int waysToReachTarget(int target, vector<vector<int>>& types) {
        
        memset(dp,-1,sizeof dp);
        
        return dfs(target,types,0,0);
    }
};