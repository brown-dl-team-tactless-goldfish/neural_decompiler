class Solution {
public:
    void dfs(TreeNode* root,vector<int> &st){
        if(!root) return;
        st.push_back(root->val);
        dfs(root->left,st); dfs(root->right,st);
    }
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& q) {
        vector<int> st;
        dfs(root,st);
        sort(st.begin(),st.end());
        vector<vector<int>> re;
        for(int i = 0; i<q.size();++i){
            auto it = lower_bound(st.begin(),st.end(),q[i]);
            int min_ = -1, max_ = -1;
            if(it!=st.end() && *it==q[i]){
                re.push_back({q[i],q[i]}); continue;
            }
            if(it!=st.end()) max_ = *it;
            if(it!=st.begin()){
                it--; min_ = *it;
            }
            re.push_back({min_,max_});
        }
        return re;
    }
};