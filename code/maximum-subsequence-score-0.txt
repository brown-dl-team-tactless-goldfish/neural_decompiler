int cmp(const void* a, const void* b){
    int* A = *(int**)a ;
    int* B = *(int**)b ;
    if(A[1] == B[1])
        return A[0] - B[0] ;
    return A[1] - B[1] ;
}

int cmp1(const void * a, const void* b){
    return *(int*)a - *(int*)b ;
}

void insert(int* heap, int k, int val ,long long* sum){    
    if(val <= heap[0]){   
        return  ;
    }
    int f = 0 ;
     *sum = *sum + val - heap[0] ;
    heap[0] = val ;
   
    while(1){
        int son1 = 2*f + 1 ; 
        int son2 = 2*f + 2 ; 
        if(son2 < k){
            if(heap[son1] <= heap[son2] ){
                if(heap[son1] < heap[f]){
                    //swap 
                    int tmp = heap[son1]  ;
                    heap[son1]  = heap[f] ;
                    heap[f] = tmp ;   
                    f = son1 ;
                }    
                else
                    break ;
            }
            else{
                if(heap[son2] < heap[f]){
                    //swap 
                    int tmp = heap[son2]  ;
                    heap[son2]  = heap[f] ;
                    heap[f] = tmp ;  
                    f = son2 ;
                }    
                else
                    break ;                
            }
        }
        else if(son1 < k){
            if(heap[son1] < heap[f]){
                //swap 
                int tmp = heap[son1]  ;
                heap[son1]  = heap[f] ;
                heap[f] = tmp ;   
                f = son1 ;
            }    
            else
                break ;
        }
        else
            break;
    }    
}

long long maxScore(int* nums1, int nums1Size, int* nums2, int nums2Size, int k){
    long long ans = 0;
    long long sum = 0 ;
    int n = nums1Size ;
    int** tmp = malloc(n * sizeof(int*) ) ;
    int* heap = malloc(2*k * sizeof(int) ) ;
    for(int i = 0; i < n; i++){
        tmp[i] = malloc(2 * sizeof(int) ) ;
        tmp[i][0] = nums1[i] ;
        tmp[i][1] = nums2[i] ;
    }
    qsort(tmp, n ,sizeof(int*), cmp ) ;
    
    //get heap k items 
    for(int i = 0; i < k; i++){
        heap[i] = tmp[n-1-i][0] ;
        sum += tmp[n-1-i][0] ; 
    }
    ans = sum * (long long)tmp[n-k][1] ;
    qsort(heap, k, sizeof(int), cmp1) ;
    
    for(int i = n-k-1; i >=0 ; i--){
        insert(heap, k, tmp[i][0] , &sum) ;
        ans = fmax(ans , sum * tmp[i][1] ) ;
    }
    return ans ;
}