class Solution {
public:
    
    vector<int> B;
    vector<int> T;
    int n;
    int m;
    
    // fix a base, try all combinations of toppings (min 0 to max 2)
    void solve(int sum, int &target, int &closest, int tidx) {
        // cout << "sum = " << sum << " mask = " << mask << " closest = " << closest << endl;
        if(abs(target - sum) < abs(target - closest)) {
            closest = sum;
        } else if(abs(target - sum) == abs(target - closest)) {
            closest = min(closest, sum);
        }
        if(tidx >= m) {
            return;
        }
        for(int i = 0; i < 3; i++) {
            int currSum = sum + (T[tidx] * i);
            solve(currSum, target, closest, tidx + 1);
        }
    }
    
    int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts, int target) {
        B = baseCosts;
        T = toppingCosts;
        n = baseCosts.size();
        m = toppingCosts.size();
        int closest = INT_MAX;
        for(int i = 0; i < n; i++) {
            solve(baseCosts[i], target, closest, 0);
        }
        return closest;
    }
};