class Solution {
public:
bool help(vector<int> &v,int sum,bool aliceTurn){
    if(sum==2 && v[2]){
        v[2]--;
        bool tmp=help(v,(sum+2)%3,!aliceTurn);
        v[2]++;
        return tmp;
    }else if(sum==2 && v[0]){
        v[0]--;
        bool tmp=help(v,sum,!aliceTurn);
        v[0]++;
        return tmp;        
    }else if(sum==1 && v[1]){
        v[1]--;
        bool tmp=help(v,(sum+1)%3,!aliceTurn);
        v[1]++;
        return tmp;
    }else if(sum==1 && v[0]){
        v[0]--;
        bool tmp=help(v,sum,!aliceTurn);
        v[0]++;
        return tmp;
    }else if(max({v[0],v[1],v[2]})){
        // a divisible of 3 is formed by the current player
        if(aliceTurn) return false;
        return true;
    }else{
        // nothing left
        return false;   //  bob wins
    }
}

bool stoneGameIX(vector<int>& ar) {
    vector<int> v(3, 0);
    for (auto it : ar) v[it % 3]++;
    bool aliceWins=false;
    if(v[1]){
        v[1]--;
        aliceWins=(aliceWins||help(v,1,false));
        v[1]++;
    }
    if(v[2]){
        v[2]--;
        aliceWins=(aliceWins||help(v,2,false));
        v[2]++;
    }
    return aliceWins;
}
};