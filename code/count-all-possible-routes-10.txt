class Solution {
public:
    int dp[105][205];
    // dp[location][fuel]
    int m = 1e9 + 7;
    int solve(vector<int> &locations, int start, int finish, int fuel){
        if(fuel == 0 && start  != finish) return 0;

        if(dp[start][fuel] != -1) return dp[start][fuel];

        int ways = 0;
        for(int i = 0; i < locations.size(); i++)
            if(i != start && (fuel - abs(locations[i] - locations[start])) >= 0)
                ways = (ways + solve(locations, i, finish, fuel - abs(locations[i] - locations[start])))%m;

        if(start == finish) ways += 1;
        return dp[start][fuel] = ways;
    }

    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {
        memset(dp, -1, sizeof(dp));
        return solve(locations, start, finish, fuel);
        return dp[start][fuel];
    }
};