// Optimal Approach
   // Concept Includes:
        // 1. Prefix Sum
		// 2. Sliding window with maintaing monoticity
// Time Complexity: O(2*n)
// Space Complexity: O(n)

class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        
        // Some Variable Initialization
          // Due to signed integer overflow we have to create a vector which have long long values, if it is not happening then u can make changes in current one
        
        int mn=INT_MAX;
        deque<int>dq;
        int n=nums.size();
        // Edge Case
        if(nums[0]>=k)
            return 1;
        
        vector<long long> v(n,0);
        v[0]=nums[0];
        
        // Prepare Prefix Sum Array
        for(int i=1;i<n;i++)
        {   
           v[i]=v[i-1]+nums[i];
        // Sub-array which includes first element
          if(v[i]>=k)
              mn=min(i+1,mn);
        }
        
        // Now Split array to maintain the monoticity
        for(int i=0;i<n;i++)
        {
            while(!dq.empty()&&v[i]-v[dq.front()]>=k)
            {mn=min(i-dq.front(),mn);
                dq.pop_front();
            }
            while(!dq.empty()&&v[dq.back()]>v[i])
                dq.pop_back();
            dq.push_back(i);
        }
        
        return mn==INT_MAX?-1:mn;
        
    }
};