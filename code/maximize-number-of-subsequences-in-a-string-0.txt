long long maxSubseCn(char* text, char* pattern){
    int i;
    int len = strlen(text);
    int* dp = (int*)calloc(len , sizeof(int));
    if(text[len-1] == pattern[1])
        dp[len-1] = 1;
    else
        dp[len-1] = 0;
    
    for(i = len-2; i >= 0; i--){
        if(text[i] == pattern[1])
            dp[i] = dp[i+1] + 1;
        else
            dp[i] = dp[i+1];
    }
    long long cn = 0;
    for(i = 0; i < len-1; i++){
        if(text[i] == pattern[0]){
            cn = cn + dp[i+1];
        }
    }
    free(dp);
    return cn;
}

long long maximumSubsequenceCount(char * text, char * pattern){
    long long item1;
    long long item2;
    int i;
    int len = strlen(text);
    char* s1 = malloc((len+1+1) * sizeof(char));  //add to head of text
    char* s2 = malloc((len+1+1) * sizeof(char));  //add to tail of text
    s1[len+1] = '\0';
    s2[len+1] = '\0';
    for(i = 0; i < len; i++){
        s1[i+1] = text[i];
        s2[i] = text[i];
    }
    s1[0] = pattern[0];
    s2[len] = pattern[1];
    
    item1 = maxSubseCn(s1, pattern);
    item2 = maxSubseCn(s2, pattern);
    free(s1);
    free(s2);
    return fmax(item1, item2);
}