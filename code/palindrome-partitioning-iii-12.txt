class Solution {
public:
    int dp[101][101];
    int arr[101][101]={};
    string ss;
    int req(int l,int r){

        int count=0;
        
        while(l<r){
            if(ss[l]!=ss[r])
                count++;
            l++;r--;
        }

        return count;
    }
    
    int fun(int l,int k){
        if(k==1) return arr[l][ss.length()-1];
        if(dp[l][k]!=-1) return dp[l][k];
        int ans=INT_MAX;
        int i=l;
        while(i<=ss.length()-k){
            ans=min(ans,arr[l][i]+fun(i+1,k-1));
            i++;
        }
        return dp[l][k]=ans;
    }
    
    int palindromePartition(string s, int k) {
        this->ss=s;
        
        for(auto &d:dp)
            for(auto &n:d)
                n=-1;
        
        for(int i=0;i<s.length();i++)
            for(int j=i;j<s.length();j++)
                arr[i][j]=req(i,j);

        return fun(0,k);
            
    }
};