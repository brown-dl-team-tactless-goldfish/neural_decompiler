typedef struct TreeNode tn;

int** zigzagLevelOrder(tn* root, int** colS, int* retS) {
  if(root == NULL)
  {
    *retS = 0;
    return NULL; 
  }

  *retS = 0;
  int** ret = (int**)malloc(sizeof(int*) * 1000);
  tn* nodeQ[2000]; // a Queue to hold nodes traversed each level
  tn* temp;
  int level;
  *colS = (int*)malloc(sizeof(int) * 1000);
  memset(*colS, 0, sizeof(int)*1000);
  
  int first = 0, end = 0;  // idx of the Queue
  int numsNodePerLevel = 1, numsNodeCtr=0;
  int j = 0, l=0, m=0;
  bool order=false;
    
  nodeQ[end++] = root;
  while(end > first)
  {
    ret[l] = (int*)malloc(sizeof(int)* 1000);
    m= (order)? numsNodePerLevel-1 : 0;
    for(j=0; j<numsNodePerLevel && end > first; j++)
    {
      // de-Q
      temp = nodeQ[first++];
      if(order == false)
        ret[l][m++] = temp->val;   // left -> right
      else
        ret[l][(m--)] = temp->val; // right-> left
      
      if(temp->left != NULL)
      {
        nodeQ[end++] = temp->left; // en-Q
        numsNodeCtr++;
      }
      if(temp->right!=NULL)
      {
        nodeQ[end++] = temp->right; // en-Q
        numsNodeCtr++;
      }
    }

    (*colS)[l++] = numsNodePerLevel;
    
    numsNodePerLevel = numsNodeCtr;
    if(numsNodeCtr == 0)
      break;
    
    numsNodeCtr = 0;
    order ^= 1;     // alternate the order
  }

  *retS = l;
  return ret;
}