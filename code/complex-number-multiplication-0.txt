char * complexNumberMultiply(char * num1, char * num2){
    int a, b, x, y;
    a = b = x = y = 0;
    int i, k;
    int len1 = strlen(num1);
    int len2 = strlen(num2);

    // extracting value from num1
    for (i = len1 - 2, k = 0; num1[i] != '+';i--)
    {
        if (num1[i] == '-')
        {
            b *= -1;
            continue;
        }   
        b += (num1[i] - 48) * pow(10, k++);
    }
    for (i = i - 1, k = 0; i >= 0;i--)
    {
        if (num1[i] == '-')
        {
            a *= -1;
            continue;
        }   
        a += (num1[i] - 48) * pow(10, k++);
    }
    // extraction vslue from num2
    for (i = len2 - 2, k = 0; num2[i] != '+';i--)
    {
        if (num2[i] == '-')
        {
            y *= -1;
            continue;
        }   
        y += (num2[i] - 48) * pow(10, k++);
    }
    for (i = i - 1, k = 0; i >= 0;i--)
    {
        if (num2[i] == '-')
        {
            x *= -1;
            continue;
        }   
        x += (num2[i] - 48) * pow(10, k++);
    }

    // Storing and multiplying
    char *ans = (char*)malloc(len1+len2);
    int r = (a*x) - (b*y);
    int im = (a*y) + (b*x);
    int rcount = 0, icount = 0;
    x = 0; y = 0;
    a = 0, b = 0;

    // real part of answer
    if (r < 0)
    {
        r *= -1;
        ans[a++] = '-';
    }
    if (r == 0)
        rcount = 1; 
    else
        while (r)
        {
            rcount++;
            x = (10 * x) + (r%10);
            r /= 10;
        }
    while (rcount)
    {
        if (x%10 == 0)
            ans[a++] = 48;
        else
            ans[a++] = (x%10) + 48;
        x /= 10;
        rcount--;
    }
    ans[a++] = '+';
    // imaginary part of answer
    if (im < 0)
    {
        ans[a++] = '-';
        im *= -1;
    }
    if (im == 0)
        icount = 1; 
    else
        while (im)
        {
            icount++;
            y = (10 * y) + (im%10);
            im /= 10;
        }
    while (icount)
    {
        if (y%10 == 0)
            ans[a++] = 48;
        else
            ans[a++] = (y%10) + 48;
        y /= 10;
        icount--;
    }
    ans[a++] = 'i';
    ans[a] = 0;
    return ans;
}