
class Solution {
public:
    int treeHeight(TreeNode *root) {
        if (!root) return 0;
        return (max(treeHeight(root->left), treeHeight(root->right)) + 1);
    }
    
    void helper(TreeNode *root, 
                vector<vector<string>> &ans, 
                int r, 
                int l, 
                int h) {
        int c = l + (h - l) / 2;
        ans[r][c] = to_string(root->val);
        if (root->left)
            helper(root->left, ans, r+1, l, c-1);
        if (root->right)
            helper(root->right, ans, r+1, c+1, h);
    }
    vector<vector<string>> printTree(TreeNode* root) {
        int h = treeHeight(root);
        
        vector<vector<string>> ans;
        if (!h) return ans;
        
        int leafNodes = pow(2, h-1);
        int nodes = leafNodes + leafNodes - 1;
        
        ans = vector<vector<string>>(h, vector<string>(nodes, ""));
        helper(root, ans, 0, 0, nodes-1);
        return ans;
    }
};