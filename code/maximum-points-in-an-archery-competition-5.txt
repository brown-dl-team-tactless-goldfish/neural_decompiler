	public int[] MaximumBobPoints(int numArrows, int[] aliceArrows) {
        (int[] arrows, int score) bestAttempt = (new int[aliceArrows.Length], 0);
        (int[] arrows, int numArrows) alice = (aliceArrows, numArrows);
        (int[] arrows, int numArrows, int score) bob = (new int[aliceArrows.Length], 0, 0);
        Backtracking(ref bestAttempt, alice, bob, 1);
        return bestAttempt.arrows;
    }
    
    void Backtracking(ref (int[] arrows, int score) bestAttempt, (int[] arrows, int numArrows) alice, (int[] arrows, int numArrows, int score) bob, int index) {
        if (bob.numArrows <= alice.numArrows && bob.score > bestAttempt.score) { // update best attempt
            bestAttempt.score = bob.score;
            bob.arrows.CopyTo(bestAttempt.arrows, 0);
            bestAttempt.arrows[0] = alice.numArrows-bob.numArrows; // add unused arrows if required
        }
        for (int i=index; i<alice.arrows.Length; i++) {
            bob.arrows[i] = alice.arrows[i]+1;
            bob.numArrows += bob.arrows[i];
            bob.score += i;
            Backtracking(ref bestAttempt, alice, bob, i+1);
            bob.score -= i;
            bob.numArrows -= bob.arrows[i];
            bob.arrows[i] = 0;
        }
    }