class Solution {
public:
    int getMaxRepetitions(string s1, int m1, string s2, int m2) {
        int n1 = s1.size();
        int n2 = s2.size();
        vector<pair<int, int>> dp(n2, {-1,-1});
        int base = 0;
        int cnt = 0;
        int step = 1;
        bool acc = false;
        for (int c = 0; c < m1; c += step)
        {
            if (dp[base].first != -1)
            {
                // detect loop length
                if (!acc)
                {
                    acc = true;
                    int curcnt = dp[base].second;
                    int curbase = dp[base].first;
                    int l = 1;
                    
                    while (curbase != base)
                    {
                        l++;
                        curcnt += dp[curbase].second;
                        curbase = dp[curbase].first;
                    }

                    // accelerate here
                    if (m1 >= c)
                    {
                        int r = (m1 - c) / l;
                        cnt += r * curcnt;
                        c += r * l;  
                        if (c >= m1)
                        {
                            break;
                        }
                    }
                }            
                
                cnt += dp[base].second;
                base = dp[base].first;
                continue;
            }
            int j = base;
            int cur = 0;
            for (int i = 0; i < n1; i++)
            {
                if (s1[i] == s2[j])
                {
                    j = (j + 1) % n2;
                    if (j == 0)
                    {
                        cur++;
                    }
                }
            }
            dp[base].first = j;
            dp[base].second = cur;
            base = j;
            cnt += cur;
        }
        return cnt / m2;
    }
};