class Solution {
public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        vector<int> W(nums.size()-k+1);
        
        int sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
            if (i >= k) {
                sum -= nums[i-k];
            }
            if (i >= k-1) {
                W[i-k+1] = sum;
            }
        }
        
        vector<int> L(W.size()); // Best window on left of W[i]
        int best = 0;
        for (int i = 0; i < W.size(); ++i) {
            if (W[i] > W[best])
                best = i;
            L[i] = best;
        }
        
        vector<int> R(W.size()); // Best window on right of W[i]
        best = W.size()-1;
        for (int i = W.size()-1; i >= 0; --i) {
            if (W[i] >= W[best])
                best = i;
            R[i] = best;
        }
        
        vector<int> ans(3, -1);
        for (int j = k; j < W.size()-k; ++j) {
            int i = L[j-k]; 
            int l = R[j+k];
            
            if (ans[0] == -1 || ((W[i]+W[j]+W[l]) > (W[ans[0]]+W[ans[1]]+W[ans[2]]))) {
                ans[0] = i;
                ans[1] = j;
                ans[2] = l;
            }
        }
        return ans;      
    }
};