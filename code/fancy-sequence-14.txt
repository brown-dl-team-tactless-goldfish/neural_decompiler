}
void update(int node,int st,int ed,int ql,int qr,int val,int ty){
    if(ql>ed||st>qr)return ;
    if(st>=ql&&ed<=qr){
        if(ty==2){
            (add[node]*=val)%=mod;
            (mul[node]*=val)%=mod;
        }else (add[node]+=val)%=mod;
        return;
    }
    push(node);
    int m=(st+ed)/2;
    update(2*node,st,m,ql,qr,val,ty);
    update(2*node+1,m+1,ed,ql,qr,val,ty);
    return;
}
int id;
Fancy() {
    tree.resize(4*N+1,0);
    add.resize(4*N+1,0);
    mul.resize(4*N+1,1);
    id=0;
}

void append(int val) {
    update(1,0,N-1,id,id,val,1);
    id++;
}

void addAll(int inc) {
    update(1,0,N-1,0,id-1,inc,1);
    
}

void multAll(int m) { 
    update(1,0,N-1,0,id-1,m,2);
}

int getIndex(int idx) {
    if(idx>=id)return -1;
    return query(1,0,N-1,idx);
    
}