class Solution {
public:
    int minimumJumps(vector<int>& forbidden, int a, int b, int x) 
    {
        if (x == 0)
            return 0;
        
        vector<vector<int>> steps(2, vector<int>(6001, INT_MAX));
        
        for(int i = 0; i < forbidden.size(); i++) 
        {
            if(forbidden[i] < steps[0].size())
                steps[0][forbidden[i]] = steps[1][forbidden[i]] = -1;
        }
        
        queue<pair<int, int>> q;
        q.push({0, 0});
        int step = 0;
        
        while(!q.empty())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int pos = q.front().first;
                int dir = q.front().second;
                if(pos == x)
                    goto end;
                
                if (pos + a < steps[0].size() && steps[0][pos + a] == INT_MAX) {
                    steps[0][pos + a] = 1 + step;
                    q.push({pos + a, 0});
                }
                
                if (dir == 0 && pos - b >= 0 && steps[1][pos - b] == INT_MAX) {
                    steps[1][pos - b] = 1 + step;
                    q.push({pos - b, 1});
                }
                q.pop();
            }
            step++;    
        }
    end:
        int res = min(steps[0][x], steps[1][x]);
        return res == INT_MAX ? -1 : res;
    }

};