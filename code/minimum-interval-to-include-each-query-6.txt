class Solution {
public:
    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {
        int n = intervals.size();
        sort(intervals.begin(), intervals.end(), [] (vector<int>& p, vector<int>& q) {
            return p[1] - p[0] < q[1] - q[0];
        });
        set<pair<int, int>> st;
        int len = queries.size();
        for(int i = 0; i < len; i++) {
            st.insert(make_pair(queries[i], i));
        }
        vector<int> ans(len, -1);
        for(int i = 0; i < n; i++) {
            int s = intervals[i][0];
            int e = intervals[i][1];
            auto it = st.lower_bound(make_pair(s, 0));
            auto it2 = st.upper_bound(make_pair(e + 1, 0));
            while(it != it2) {
                auto it1 = next(it);
                if(it->first <= e) {
                    ans[it->second] = e - s + 1;
                    st.erase(it);
                    it = it1;
                }
                else {
                    it++;
                }
            }
        }
        return ans;
    }
};