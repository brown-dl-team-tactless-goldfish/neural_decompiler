#define max(a,b) (a > b ? a : b)
#define min(a,b) (a < b ? a : b)

int maxProduct(int* nums, int numsSize){
    if (numsSize == 1) return nums[0];
    int minprod = 1;
    int maxprod = 1;
    int maxans = nums[0];
    for (int i = 0; i < numsSize; i++)
    {
        int last_maxprod = maxprod;
        // Max can be one of three things. Either the current number, or the last maxprod * current number, or the last minprod * current number.
        maxprod  = max(minprod * nums[i], max(last_maxprod * nums[i], nums[i]));
        // Min can be one of three things. Either the current number, or the last maxprod * current number, or the last minprod * current number.
        minprod  = min(minprod * nums[i], min(last_maxprod * nums[i], nums[i]));
        
        int tempmax = max(minprod, maxprod);
        maxans = max(maxans, tempmax);
            
        
    }
      
return maxans;
}

// int maxProduct(int* nums, int numsSize){
//     int max = nums[0];
//     int sum;
    
//     for (int i=0; i<numsSize; i++){
//         sum = nums[i];

//         if (sum >= max)
//                 max = sum;
//         for (int k=i+1; k<numsSize; k++){
//             sum *= nums[k];
//             if (sum >= max)
//                 max = sum;
//         }
//     }
//     return max;
// }





// int maxProduct(int* nums, int numsSize){
// int countn=0,count0=0,even=1,odd=1,t,o,max=0,h=-MAX_INPUT,k=1,pro=1,product=1;
//     if(numsSize==1)
//     {
//         return nums[0];
//     }
    
//     for(int i=0;i<numsSize;i++)
//     {
//         if(nums[i]<0)
//         {
//             countn++;
//         }
//         else if(nums[i]==0)
//         {
//             count0++;
//         }
//     }
//     if(count0+countn==numsSize&&count0>0)
//     {
//         return 0;
//     }
//     if(countn%2==0)
//     {
//         if(count0==0)
//         {
//             for(int i=0;i<numsSize;i++)
//             {
//                 even=even*nums[i];
//             }
//         return even;
//         }
//         else
//         {
//             for(int i=0;i<numsSize;i++)
//             {if(nums[i]>0)
//             {
//                 return nums[i];
//             }}
//         }
//     }
//     if(countn%2!=0)
//     {
//         for(int i=0;i<numsSize;i++)
//         {
//            if(nums[i]<0)
//            {
//                t=i+1;
//                break;
//            }
//         }
//         for(int i=numsSize-1;i>=0;i--)
//         {
//            if(nums[i]<0)
//            {
//                o=numsSize-i;
//                break;
//            }
//         }
//         if(o==1)
//         {
//             for(int i=0;i<=o;i++)
//             {
//                 pro=pro*nums[i];
//             }
//         }
//         else
//         {
//             for(int i=0;i<o;i++)
//             {
//                 pro=pro*nums[i];
//             }
//         }
//         for(int i=t;i<numsSize;i++)
//         {
//             if(count0==0)
//             {
//                 product=product*nums[i];
//             }
//             else
//             {
//                 if(nums[i]>0&&nums[i]>pro)
//                 {
//                     return nums[i];
//                 }
//             }
//         }
//         if(product>pro)
//         {
//             return product;
//         }
//         else
//         {
//             return pro;
//         }
//     }
//     return 0;
// }