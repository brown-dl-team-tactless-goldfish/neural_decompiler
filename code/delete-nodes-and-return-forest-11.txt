class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        queue<TreeNode*> nodesQ;
        vector<TreeNode*> result;
        nodesQ.push(root);
        if (!root) {
            return result;   
        }
        unordered_set<int> deleted(to_delete.begin(), to_delete.end());
        if (deleted.find(root->val) == deleted.end()) {
            result.push_back(root);
        }
        while (!nodesQ.empty()) {
            TreeNode* cur = nodesQ.front();
            nodesQ.pop();
            if (cur->left) {
                nodesQ.push(cur->left);
                if (deleted.find(cur->left->val) != deleted.end()) {
                    cur->left = NULL;
                } else {
                    // If our parent is deleted
                    if (deleted.find(cur->val) != deleted.end()) {
                        result.push_back(cur->left);
                    }
                }
            }
            if (cur->right) {
                nodesQ.push(cur->right);
                if (deleted.find(cur->right->val) != deleted.end()) {
                    cur->right = NULL;
                } else {
                    // If our parent is deleted
                    if (deleted.find(cur->val) != deleted.end()) {
                        result.push_back(cur->right);
                    }
                }
            }
        }
        return result;
    }
};