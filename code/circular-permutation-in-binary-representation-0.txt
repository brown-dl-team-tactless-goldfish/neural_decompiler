/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* circularPermutation(int n, int start, int* returnSize){
    int N = pow(2, n) ;
    *returnSize = N ;
    int* tmp = malloc(N * sizeof(int) ) ;
    tmp[0] = 0 ;
    int cur = 1 ;
    int begin ;
    for(int i = 0; i < n; i++){
        for(int j = 0 ; j < cur; j++){
            tmp[cur + j] = tmp[cur - 1 - j] + (1 << i) ;
        }
        cur = cur * 2 ;
    }
    
    for(int i = 0; i < N; i++){
        if(tmp[i] == start){
            begin = i ;
            break ;
        }
    }
    int* ans = malloc(N * sizeof(int)) ;
    memcpy(ans, &tmp[begin], (N-begin) * sizeof(int)) ;
    memcpy(&ans[N-begin], tmp, begin * sizeof(int)) ;
    free(tmp) ;
    return ans ;
}