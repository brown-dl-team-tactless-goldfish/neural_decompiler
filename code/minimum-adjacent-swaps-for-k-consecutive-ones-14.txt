class Solution {
public:
    int minMoves(vector<int>& nums, int k) {
        vector<int> ones;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i] == 1)
                ones.push_back(i);
        }
        
        //Explore Each window of size k using sliding window of fixed length k.
        // If k = 5 and have values [0,2,4,5,7]
        //We need to change all values to median and again change it to consecutive.
        //[0,2,4,5,7]  --->(Step 1)   [4,4,4,4,4]  ---->(Step 2) [2,3,4,5,6]
        
        //Step 1: Is simular to Minimum moves to make all array elements equal.
        //(4-0) + (4-2) + (5-4) + (7 - 4) ===> (5 + 7) - (0 + 2) ==> 
        //Which is difference in sum of right and sum of left.
        
        //Step 2: Change [4,4,4,4,4] to consecutive [2,3,4,5,6]
        //We use radius = k/2
        //(k + k-1 + k-2 + ... + 0 + 1 + 2 + 3 +... + k-1 + k+1)
        //(1 + 2 + 3 + .... + k) * 2 => k(k + 1)/2 * 2 ==> k(k+1)
        //right - left - k(k+1) for k is odd
        //right - left - i - k(k+1) - (k+1) for k is even
         int n=ones.size();
          vector<long long int> preSum(n, 0);
         preSum[0] = ones[0];
        for(int i=1;i<n;i++)
            preSum[i] = preSum[i-1] + ones[i];
        int i=0,j=0;
       long long int ans  = LLONG_MAX;
        while(j < n){
            if(j-i+1 == k){
                // cout<<"Hello"<<endl;
                int mid = (j + i)/2;
                long long int right = preSum[j] - preSum[mid];
                long long int left = (mid-1 < 0 ? 0 : preSum[mid - 1]) - (i-1 < 0 ? 0 : preSum[i-1]);
             // cout<<mid<<" "<<left<<" "<<right<<endl;
                int radius = (k-1)/2;
                long long int p = (long long int)radius*(radius + 1);
                long long int sum = right - left - p;
                if(k % 2 == 0){
                    sum -= (radius + 1);
                    sum -= ones[mid];
                }
               // cout<<sum<<endl;
                ans = min(ans, sum);
                i++;
            }
            j++;
        }
        return ans;
    }
};