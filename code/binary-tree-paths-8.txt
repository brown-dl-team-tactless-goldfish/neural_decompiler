/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

void copy(int* path, char* res, int pathSize){
    int j=0;
    for(int i=0; i<pathSize; i++){
        j+=sprintf(res+j, "%d->", path[i]);
        
    }

    res[j-2]='\0';
}
void traversal(struct TreeNode* root, int* returnSize, char** res, int* path, int* pathSize){
    if(!root) return;
    
    path[(*pathSize)++]=root->val;
    
    if(root->left==NULL && root->right==NULL){
        res[*returnSize]=malloc(sizeof(char)*100);     
        copy(path, res[*returnSize], *pathSize);
        
        (*returnSize)++;
        
        return;
    }
    
    if(root->left){
        traversal(root->left, returnSize, res, path, pathSize);
        (*pathSize)--;
    }
    if(root->right){
        traversal(root->right, returnSize, res, path, pathSize);
        (*pathSize)--;
    }
    

}
char ** binaryTreePaths(struct TreeNode* root, int* returnSize){
    int* pathSize=malloc(sizeof(int));
    *pathSize=0;
    int* path=malloc(sizeof(int)*100);
    char** res=malloc(sizeof(char*)*100);
    *returnSize=0;
    if(root==NULL) return NULL;
    traversal(root, returnSize, res, path, pathSize);
    return res;
}