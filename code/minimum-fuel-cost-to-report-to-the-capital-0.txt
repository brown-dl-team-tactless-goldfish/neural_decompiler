
void check(int seats, int from, int now, long long* ans, int** cnagoto, int* count, int* people){
    if (count[now] == 1){
        *people = 1;
        return;
    }
    int p_from_next = 0;
    int next_city = 0;
    for (int i = 0 ; i < count[now] ; i++){
        if (cnagoto[now][i] == from){
            i++;
            while(i < count[now]){
                check(seats, now, cnagoto[now][i], ans, cnagoto, count, &next_city);
                *ans += next_city/seats;
                if (next_city % seats != 0){
                    *ans += 1;
                }
                p_from_next += next_city;
                i++;
            }
        } else {
            check(seats, now, cnagoto[now][i], ans, cnagoto, count, &next_city);
            *ans += next_city/seats;
            if (next_city % seats != 0){
                *ans += 1;
            }
            p_from_next += next_city;
        }
    }
    *people = p_from_next + 1;
    return;
}


long long minimumFuelCost(int** roads, int roadsSize, int* roadsColSize, int seats){
    int** cnagoto = malloc(sizeof(int*)*(roadsSize+1));
    for (int i = 0 ; i <= roadsSize ; i++){
        cnagoto[i] = malloc(sizeof(int)*(20));
    }
    int* count = calloc((roadsSize+1),sizeof(int));
    for (int i = 0 ; i < roadsSize ; i++){
        cnagoto[roads[i][0]][count[roads[i][0]]] = roads[i][1];
        cnagoto[roads[i][1]][count[roads[i][1]]] = roads[i][0];
        count[roads[i][0]]++;
        count[roads[i][1]]++;
    }
    long long ans = 0;
    int people = 0;
    for (int i = 0 ; i < count[0] ; i++){
        check(seats, 0, cnagoto[0][i], &ans, cnagoto, count, &people);
        ans += (people/seats);
        if (people % seats != 0){
            ans += 1;
        }
    }
    free(count);
    for (int i = 0 ; i <= roadsSize ; i++){
        free(cnagoto[i]);
    }
    free(cnagoto);
    return ans;
}