#include <string.h>

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

typedef struct s_table {
    int index;
    int height;
}table;

int cmp(const void *a, const void *b) 
{
    int height_a = ((table*)a)->height;
    int height_b = ((table*)b)->height;
    
    if (height_a > height_b) {
        return 1;
    }
    
    if (height_a < height_b) {
        return -1;
    }
    
    return 0;
}

char ** sortPeople(char ** names, int namesSize, int* heights, int heightsSize, int* returnSize){
    char **ans = (char**)malloc(sizeof(char*) * namesSize);
    memset(ans, 0, sizeof(char*) * namesSize);
    *returnSize = namesSize;
    
    table arr[1000];
    
    for (int i = 0; i < heightsSize; i++) {
        arr[i].index = i;
        arr[i].height = heights[i];
    }
    
    qsort(arr, heightsSize, sizeof(table), cmp);
    
    for (int i = heightsSize-1; i >= 0; i--) {
        ans[heightsSize-1-i] = names[arr[i].index];
    }
    
    return ans;
}