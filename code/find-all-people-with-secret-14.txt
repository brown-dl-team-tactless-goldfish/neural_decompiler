class Solution {
public:
	vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
		vector<vector<vector<int>>> g(n);
		vector<int> res;
		for(int i=0;i<meetings.size();i++)  {
			g[meetings[i][0]].push_back({meetings[i][1],meetings[i][2]});
			g[meetings[i][1]].push_back({meetings[i][0],meetings[i][2]});
		}
		priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;
		vector<int> dist(n,INT_MAX),vis(n);
		pq.push({0,firstPerson});
		pq.push({0,0});
		dist[firstPerson]=0;
		dist[0]=0;
		while(pq.size()) {
			int u= pq.top()[1];
			int t = pq.top()[0];
			pq.pop();
			if(vis[u]) continue;
			vis[u] = 1;
			for(int i=0;i<g[u].size();i++) {
				int v=g[u][i][0];
				int d=g[u][i][1];
				if(d>=t) {
					dist[v]=d;
					pq.push({dist[v],v});
				}
			}
		}
		for(int i=0;i<n;i++) {
			if(dist[i]!=INT_MAX) res.push_back(i);
		}
		return res;
	}
};