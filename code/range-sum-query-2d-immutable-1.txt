typedef struct {
    int rowsize;
    int colsize;
    int **sum;  // sum[r][c] stores SumRegion(, 0, 0, r, c)
} NumMatrix;


NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize)
{
    NumMatrix *nm = (NumMatrix *) malloc(sizeof(NumMatrix));
    nm->rowsize = matrixSize;
    nm->colsize = matrixColSize[0];
    nm->sum = (int **) malloc(sizeof(int *) * nm->rowsize);
    nm->sum[0] = (int *) malloc(sizeof(int) * nm->colsize);
    nm->sum[0][0] = matrix[0][0];
    for (int r = 1; r < nm->rowsize; r++) {
        nm->sum[r] = (int *) malloc(sizeof(int) * nm->colsize);
        nm->sum[r][0] = nm->sum[r - 1][0] + matrix[r][0];
    }
    for (int c = 1; c < nm->colsize; c++)
        nm->sum[0][c] = nm->sum[0][c - 1] + matrix[0][c];
    for (int r = 1; r < nm->rowsize; r++)
        for (int c = 1; c < nm->colsize; c++)
            nm->sum[r][c] = matrix[r][c] + nm->sum[r - 1][c]
                - nm->sum[r - 1][c - 1] + nm->sum[r][c - 1];
    /*
    for (int r = 0; r < nm->rowsize; r++) {
        for (int c = 0; c < nm->colsize; c++)
            printf("%d ", nm->sum[r][c]);
        putchar('\n');
    }
    */
    return nm;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2)
{
    if (!row1 && !col1)
        return obj->sum[row2][col2];
    else if (!row1)
        return obj->sum[row2][col2] - obj->sum[row2][col1 - 1];
    else if (!col1)
        return obj->sum[row2][col2] - obj->sum[row1 - 1][col2];
    else
        return obj->sum[row2][col2] - obj->sum[row1 - 1][col2]
            + obj->sum[row1 - 1][col1 - 1] - obj->sum[row2][col1 - 1];
}

void numMatrixFree(NumMatrix* obj)
{
    for (int r = 0; r < obj->rowsize; r++)
        free(obj->sum[r]);
    free(obj->sum);
    free(obj);
}