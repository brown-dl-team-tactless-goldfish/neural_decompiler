#define LSB(x)  ((x) & -(x))    // zeroes all the bits except the least significant one

int max(int x, int y) { return x > y ? x : y; }
int min(int x, int y) { return x < y ? x : y; }

int get_sum(int *tree, int size, int i)
{
    int sum = 0;

    while (i > 0) {
        sum += tree[i];
        i -= LSB(i);
    }

    return sum;
}

void update(int *tree, int size, int i)
{
    while (i < size) {
        tree[i]++;
        i += LSB(i);
    }
}

int *countSmaller(int *nums, int size, int *returnSize)
{
    int *res = NULL;
    int min_elem = INT_MAX;
    int max_elem = INT_MIN;

    *returnSize = size;
    if (!size)
        return NULL;

    res = malloc(size * sizeof(int));

    for (int i = 0; i < size; ++i)
        min_elem = min(min_elem, nums[i]);

    for (int i = 0; i < size; ++i) {
        nums[i] = nums[i] - min_elem + 1;
        max_elem = max(max_elem, nums[i]);
    }

    int tree[max_elem + 1];
    memset(tree, 0x0, sizeof(tree));

    for (int i = size - 1; i >= 0; --i) {
        res[i] = get_sum(tree, max_elem + 1, nums[i] - 1);
        update(tree, max_elem + 1, nums[i]);
    }

    return res;
}