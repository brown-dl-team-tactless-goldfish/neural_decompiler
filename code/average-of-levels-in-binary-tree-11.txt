/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

typedef struct Node {
    struct TreeNode *node;
    struct Node *next;
} NODE;

typedef struct queue {
    struct Node *front;
    struct Node *rear;
    int length;
} QUEUE;

QUEUE *initialize_queue() {
    QUEUE *q = (QUEUE *)malloc(sizeof(QUEUE));
    q->front = NULL;
    q->rear = NULL;
    q->length = 0;
    return q;
}

void enqueue(QUEUE *q, struct TreeNode *root) {
    NODE *new_node = (NODE *)malloc(sizeof(NODE));
    new_node -> node = (struct TreeNode *)malloc(sizeof(struct TreeNode));
    new_node->node = root;
    new_node->node->left = root->left;
    new_node->node->right = root->right;
    new_node->next = NULL;
    
    if(q->front == NULL && q->rear == NULL) {
        q->front = q->rear = new_node;
    } else {
        q->rear->next = new_node;
        q->rear = new_node;
    }
    q->length++;
}

struct Node *dequeue(QUEUE *q) {
    q->length--;
    struct Node *temp = q->front;

    if(q->front == NULL) {
        return NULL;
    } else {
        q->front = q->front->next;
        if(q->front == NULL) {
            q->rear = NULL;
        }
    }
    return temp;
}

int get_tree_height(struct TreeNode *root) {
    if(root == NULL) {
        return 0;
    }
    
    int left = get_tree_height(root->left);
    int right = get_tree_height(root->right);
    
    if(left > right)
        return (left + 1);
    
    return (right+1);
}

double* averageOfLevels(struct TreeNode* root, int* returnSize){
    if(root == NULL) {
        return NULL;
    }
    int j = 0;
    
    *returnSize = get_tree_height(root);
    double *result = (double *)malloc(sizeof(double) * (*returnSize));
    memset(result, 0, sizeof(double) * (*returnSize));
    
    QUEUE *q = initialize_queue();
    enqueue(q, root);

    
    while(q->length) {
        int size = q->length;
        long int sum = 0;
        for(int i = 0; i < size; i++) {
            struct Node *temp = dequeue(q);
            sum += temp->node->val;
            if(temp->node->left != NULL) {
                 enqueue(q, temp->node->left);
            }
            if(temp->node->right != NULL) {
                 enqueue(q, temp->node->right);
            }
        }
        result[j] = sum*1.0 / size;
        sum = 0;
        j++;
    }
    
    return result;
}