 int isPossible(int target, int src, vector<int> adj[], int par, vector<int> &nums){
        int currSum=nums[src];
        
        for(auto &x:adj[src]){
            if(x!=par){
                currSum+=isPossible(target,x,adj,src,nums);
            }
        }
        
        //if current node create pair with its child and found target so it will not going to give its value to its parent
        if(currSum==target){
            return 0;
        }
        return currSum;
    }
    
    int componentValue(vector<int>& nums, vector<vector<int>>& edges) {
        vector<int> adj[nums.size()];
        
        //create graph
        for(auto &x:edges){
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
        }
        
        int sum=0;
        for(auto &x:nums){
            sum+=x;
        }
        // check for each possiblity
        for(int i=nums.size()-1;i>=1;i--){
            if(sum%(i+1)==0){
                if(isPossible(sum/(i+1),0,adj,-1,nums)==0){
                    return i;
                }
            }
        }
        return 0;
    }
	//code by sachin