public int MinimumTimeRequired(int[] jobs, int k)
{
	int ways = (1 << jobs.Length);
	int allJobsDone = ways - 1;
	int[,] d = new int[ways, k];

	for (int i = 0; i < ways; i++)
	{
		for (int j = 0; j < k; j++)
		{
			d[i, j] = int.MinValue;
		}
	}

	int result = helper(d, jobs, 0, 0, k, allJobsDone);
	return result;
}

private int helper(int[,] d, int[] jobs, int mask, int current, int k, int allJobsDone)
{
	if (current == k)
	{
		if (mask == allJobsDone)
		{
			return 0;
		}

		else
		{
			return int.MaxValue;
		}
	}

	else if (d[mask, current] >= 0)
	{
		return d[mask, current];
	}

	int result = int.MaxValue;
	List<int> remainingJobsIndices = new List<int>();
	for (int j = 0; j < jobs.Length; j++)
	{
		if ((mask & (1 << j)) == 0)
		{
			remainingJobsIndices.Add(j);
		}
	}

	for (int i = 1; i < (1 << remainingJobsIndices.Count); i++)
	{
		int nextMask = mask;
		int time = 0;

		for (int j = 0; j < remainingJobsIndices.Count; j++)
		{
			if ((i & (1 << j)) != 0)
			{
				nextMask |= (1 << remainingJobsIndices[j]);
				time += jobs[remainingJobsIndices[j]];
			}
		}

		if(time > result)
		{
			continue;
		}

		int next = helper(d, jobs, nextMask, current + 1, k, allJobsDone);
		next = Math.Max(next, time);
		result = Math.Min(result, next);           
	}

	d[mask, current] = result;
	return result;
}