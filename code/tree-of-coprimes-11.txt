class Solution {
public:    
    void BFSTree(int u, vector<vector<int>> &adj, int parent, vector<vector<vector<int>>> &primes, vector<int> &answer, vector<int> &nums, int height){       
        
        int height_least = INT_MAX;
        for(int i=1;i<=50;i++){
            if(primes[i].size() > 0){
                if(__gcd(nums[u], i)==1){                    
                    int val = primes[i][(int)primes[i].size()-1][0];
                    int h = primes[i][(int)primes[i].size()-1][1];                    
                    if(height - h < height_least){
                        answer[u] = val;
                        height_least = height - h;
                    }
                }
            }
        }
        
        for(int v:adj[u]){
            if(v==parent) continue;            
            primes[nums[u]].push_back({u, height});            
            BFSTree(v,adj,u,primes,answer,nums,height+1);            
            primes[nums[u]].pop_back();            
        }
    }
    vector<int> getCoprimes(vector<int>& nums, vector<vector<int>>& edges) {
        int N = nums.size();
        vector<vector<int>> adj(N); 
        for(vector<int> edge:edges){
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<vector<vector<int>>> primes(51);
        vector<int> answer(N, -1);
        BFSTree(0, adj, -1, primes, answer, nums, 0);
        return answer;
    }
};