class Solution {
public:
    map<pair<int,int>,int> memo;
    int dp(vector<vector<int>> dist,int i,int k,int n){
        if (memo.find({i,k})!=memo.end()) return memo[{i,k}];
        if (i==n and k==0) return 0;
        if (i==n or k==0) return INT_MAX/2;
        int ans=INT_MAX/2;
        for (int j=i;j<n;j++){
            ans=min(ans,dp(dist,j+1,k-1,n)+dist[i][j]);
        }
        memo[{i,k}]=ans;
        return ans;
    }
    int minDistance(vector<int>& houses, int k) {
        int n=houses.size();
        sort(houses.begin(),houses.end());
        vector<vector<int>> dist(n,vector<int>(n,0));
        for (int i=0;i<n;i++){
            for (int j=i;j<n;j++){
                int mid=houses[(i+j)/2];
                for (int h=i;h<=j;h++){
                    dist[i][j]+=abs(mid-houses[h]);
                }
            }
        }
        return dp(dist,0,k,n);
    }
};