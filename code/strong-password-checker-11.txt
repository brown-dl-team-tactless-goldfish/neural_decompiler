class Solution {
public:
    int strongPasswordChecker(string password) {
        int n = password.size();
        int dels = max(n-20, 0);
        vector<int> repv;
        for (int i = 1, cur = 0; i <= n; ++i) {
            if (i == n || password[i-1] != password[i]) {
                repv.push_back(cur+1);
                cur = 0;
            } else {
                ++cur;
            }
        }
        int delc = dels;
        for (int& rep: repv) {
            if (delc == 0)
                break;
            if (rep % 3 == 0) {
                --rep;
                --delc;
            }
        }
        for (int& rep: repv) {
            if (delc < 2)
                break;
            if (rep > 3 && rep % 3 == 1) {
                rep -= 2;
                delc -= 2;
            }
        }
        int reps = 0;
        for (int rep: repv)
            reps += rep/3;
        reps -= delc/3;
        int adds = max(0, 6-n);
        int lower = 1, upper = 1, digit = 1;
        for (char c: password) {
            if ('a' <= c && c <= 'z')
                lower = 0;
            else if ('A' <= c && c <= 'Z')
                upper = 0;
            else if ('0' <= c && c <= '9')
                digit = 0;
        }
        int miss = lower + upper + digit;
        return dels + max({reps, adds, miss});
    }
};