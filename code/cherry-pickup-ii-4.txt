class Solution {
public:
    int r , c ;
    const int dy1[3] = {-1,0,1} ;
    const int dy2[3] = {-1,0,1} ;
    int dp[71][71][71] ;
    
    bool isValid(vector<vector<int>> &grid , int j , int jj ){
        return j >= 0 and jj >= 0  and j < c and jj < c ;
    }
    
    int solve(vector<vector<int>> &grid , int row , int j , int jj ){
        if(row >= r) return 0 ;
        if(j >=0 and jj >=0 and dp[row][j][jj] != -1) return dp[row][j][jj] ;
        
        int ans = -1e9 ;
        
        for(int itr1 = 0 ; itr1 < 3 ; ++itr1){
            for(int itr2 = 0 ; itr2 < 3 ; ++itr2 ){
                
                int newj = j + dy1[itr1] , newjj = jj + dy2[itr2] ;
                if(!isValid(grid,j,jj)) continue ;
                int cost = (j == jj) ? grid[row][j] : grid[row][j] + grid[row][jj] ;
                ans = max(ans,cost + solve(grid,row + 1,newj,newjj));
            }
        }
        
        if(j >= 0 and jj >=0 ) return dp[row][j][jj] = ans ;
        return -1e9 ;
        
        
    }
    int cherryPickup(vector<vector<int>>& grid) {
        r = size(grid) , c = size(grid[0]) ;
        memset(dp,-1,sizeof(dp)) ;
        return solve(grid,0,0,c - 1) ;
        
    }
};