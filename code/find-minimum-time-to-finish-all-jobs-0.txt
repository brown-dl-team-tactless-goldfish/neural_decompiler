struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	int height;
};

int max(int a, int b);

int height(struct Node *N)
{
	if (N == NULL)
		return 0;
	return N->height;
}

struct Node* newNode(int key)
{
	struct Node* node = (struct Node*)
						malloc(sizeof(struct Node));
	node->key = key;
	node->left = NULL;
	node->right = NULL;
	node->height = 1; // new node is initially added at leaf
	return(node);
}

struct Node *rightRotate(struct Node *y)
{
	struct Node *x = y->left;
	struct Node *T2 = x->right;

	// Perform rotation
	x->right = y;
	y->left = T2;

	// Update heights
	y->height = max(height(y->left), height(y->right))+1;
	x->height = max(height(x->left), height(x->right))+1;

	// Return new root
	return x;
}

struct Node *leftRotate(struct Node *x)
{
	struct Node *y = x->right;
	struct Node *T2 = y->left;

	// Perform rotation
	y->left = x;
	x->right = T2;

	// Update heights
	x->height = max(height(x->left), height(x->right))+1;
	y->height = max(height(y->left), height(y->right))+1;

	// Return new root
	return y;
}

int getBalance(struct Node *N)
{
	if (N == NULL)
		return 0;
	return height(N->left) - height(N->right);
}

struct Node* insert(struct Node* node, int key)
{
	/* 1. Perform the normal BST insertion */
	if (node == NULL)
		return(newNode(key));

	if (key < node->key)
		node->left = insert(node->left, key);
	else if (key > node->key)
		node->right = insert(node->right, key);
	else // Equal keys are not allowed in BST
		return node;

	/* 2. Update height of this ancestor node */
	node->height = 1 + max(height(node->left),
						height(node->right));

	/* 3. Get the balance factor of this ancestor
		node to check whether this node became
		unbalanced */
	int balance = getBalance(node);

	// If this node becomes unbalanced, then
	// there are 4 cases

	// Left Left Case
	if (balance > 1 && key < node->left->key)
		return rightRotate(node);

	// Right Right Case
	if (balance < -1 && key > node->right->key)
		return leftRotate(node);

	// Left Right Case
	if (balance > 1 && key > node->left->key)
	{
		node->left = leftRotate(node->left);
		return rightRotate(node);
	}

	// Right Left Case
	if (balance < -1 && key < node->right->key)
	{
		node->right = rightRotate(node->right);
		return leftRotate(node);
	}

	/* return the (unchanged) node pointer */
	return node;
}

bool check(struct Node* root, int val)
{
    if(root == NULL)
        return false;
    else
    {
        if(root->key == val)
            return true;
        else if(root->key < val)
            return check(root->right, val);
        else
            return check(root->left, val);
    }
}

int max(int a, int b)
{
    return (a > b)? a: b;
}

int min(int a, int b)
{
    return -max(-a, -b);
}

void assign(int* assignments, int id, int* jobs, int k, int* ans)
{
    int i;
    if(id == -1)
    {
        int ret = INT_MIN;
        for(i = 0; i < k; i++)
            ret = max(ret, assignments[i]);
        *ans = min(*ans, ret);
        return;
    }
    else
    {
        struct Node* root = NULL;
        for(i = 0; i < k; i++)
        {
            assignments[i] += jobs[id];
            if(check(root, assignments[i]))
            {
                assignments[i] -= jobs[id];
                continue;
            }
            root = insert(root, assignments[i]);
            if(assignments[i] < *ans)
                assign(assignments, id - 1, jobs, k, ans);
            assignments[i] -= jobs[id];
        }
    }
}

int comparator(const void* a, const void* b)
{
    return *((int*)a) - *((int*)b);
}

int helper(int* jobs, int jobsSize, int k)
{
    int* assignments = (int*)calloc(k, sizeof(int));
    int i = jobsSize - 1, dir = -1;
    
    while(i >= 0)
    {
        int j = max(i - k + 1, 0);
        if(dir == -1)
        {
            int l, size = i - j + 1;
            for(l = 0; l < size; l++)
                assignments[l] += jobs[i - l];
        }
        else
        {
            int l, size = i - j + 1;
            for(l = 0; l < size; l++)
                assignments[size - 1 - l] += jobs[i - l];
        }
        i = j - 1;
        dir *= -1;
    }
    
    int ans = assignments[0];
    for(i = 1; i < k; i++)
        ans = max(ans, assignments[i]);
    
    return ans;
}

int minimumTimeRequired(int* jobs, int jobsSize, int k)
{
    qsort(jobs, jobsSize, sizeof(int), comparator);
    int i;
    
    int ans = helper(jobs, jobsSize, k);
    int* assignments = (int*)calloc(k, sizeof(int));
   
    assign(assignments, jobsSize - 1, jobs, k, &ans);
    return ans;
}
