class Solution {
    
    vector<int> presum;
    
    void update(int i) {
        i++;
        while(i < presum.size()) {
            presum[i]++;
            i += i & -i;
        }
    }
    
    int getpresum(int i) {  // get number of digits before index i having already been put into string.
        int res = 0;
        while(i) {
            res += presum[i];
            i -= i & -i;
        }
        return res;
    }
    
public:

    string minInteger(string num, int k) {
        
        int n = num.size();
        if(k >= n * (n - 1) / 2) {  // trivial case
            std::sort(num.begin(), num.end());
            return num;
        }

        presum.assign(n + 1, 0);
        
        vector<vector<int>> v(10);
        for(int i = 0; i < num.size(); i++) v[num[i] - '0'].push_back(i);  // v[i] contains indices of digit i in num
        
        string res;
        vector<int> c(10, 0); // c[i]: beginning index of unprocessed v[i]
        
        for(int i = 0; i < num.size(); i++) { 
            for(int j = 0; j < 10; j++) { 
                if(c[j] < v[j].size() && v[j][c[j]] - getpresum(v[j][c[j]]) <= k) { // choose smallest feasible char to fill res
                    res.push_back('0' + j);
                    update(v[j][c[j]]);
                    k -= v[j][c[j]] - getpresum(v[j][c[j]]);
                    c[j]++;
                    break;
                }
            }
        }
        
        return res;
    }
};