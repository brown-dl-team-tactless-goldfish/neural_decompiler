class Solution {
public:
    int n;
    set<int> st;
    vector<int> re; int k = 1;
    int dfs(vector<vector<int>> &nums,vector<int>& vis,vector<int>& re,int in){
        if(vis[in]==2) return re[in];
        vis[in] = 1; re[in] = min(re[in],k++);
        for(int i=0; i<nums[in].size();++i){
            int j = nums[in][i];
            if(vis[j]==2) continue;
            else if(vis[j]==1) re[in]=min(re[j],re[in]);
            else re[in] = min(re[in],dfs(nums,vis,re,j));
        }
        vis[in] = 2;
        return re[in];
    }
    int dfs2(vector<vector<int>> &nums,vector<int>& vis,int in,int r){
        if(st.find(in)!=st.end() && in!=r) return 0;
        if(vis[in]==2) return 0;
        vis[in] = 1; int re=0;
        for(int i = 0; i<nums[in].size();++i)
            re = max(re,dfs2(nums,vis,nums[in][i],r));
        vis[in] = 2;
        return re+1;
    }
    int maximumInvitations(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> nums(n+1),nums2(n+1);
        for(int i = 0; i<arr.size();++i){
            nums[i].push_back(arr[i]);
            nums2[arr[i]].push_back(i);
            if(arr[arr[i]]==i){
                st.insert(i); st.insert(arr[i]);
            }
        }
        vector<int> vis(n,-1),re(n+1,INT_MAX); int n1 = 0,n2=0;
        map<int,int> mp;
        for(int i = 0; i<n;++i){
            dfs(nums,vis,re,i);  mp[re[i]]++;
            n1 = max(n1,mp[re[i]]);
        }
        fill(vis.begin(),vis.end(),0);
        for(auto i = st.begin(); i!=st.end(); ++i){
            int k = *i;
            k = dfs2(nums2,vis,k,k);
            n2+=k;            
        }
        return max(n1,n2);
    }
};