class Solution {
public:
    vector<pair<int,int>> dirs = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    vector<vector<int>> colorBorder(vector<vector<int>>& A, int r0, int c0, int color) {
        int r = A.size();
        if(r==0) return vector<vector<int>>();
        int c = A[0].size();
        vector<vector<int>>  visited =  vector<vector<int>> (r, vector<int> (c, 2)); // white
        queue<pair<int,int>> q;
        q.push({r0, c0});
        visited[r0][c0] = 1;
        set<pair<int,int>> border;
        while(!q.empty()){
            auto u = q.front(); q.pop();
            int x = u.first, y = u.second;
            // cout<<"Popped: "<<x<<" "<<y<<endl;
            for(auto d: dirs){
                int i = x + d.first;
                int j = y + d.second;
                if(i>=0 && i<r && j>=0 && j<c && A[i][j]==A[x][y]){
                    if(visited[i][j]==2){
                        // cout<<"pushing "<<i<<" "<<j<<" color: "<<A[i][j]<<endl;
                        q.push({i,j});
                        visited[i][j] = 1;
                    }
                }
                else{
                    // cout<<"Border: "<<x<<" "<<y<<endl;
                    border.insert({x,y});
                }
            }
            visited[x][y] = 0;
        }
        for(auto s: border){
            A[s.first][s.second] = color;
        }
        return A;
    }
};


//  1    1   1
//  1   (1)  1  --> this one is surrounded by elements of same color and is not on border- should not be colored
//  1    1   1