class Solution {
public:
    int eatenApples(vector<int>& apples, vector<int>& days) {
        int res = 0, size = apples.size(), day = 0;
        auto comp = [](const auto& p1, const auto& p2)
        {
            return p1.first > p2.first;
        };
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> heap(comp);
        while (day < size || !heap.empty())
        {
            if (day < size && apples[day] > 0)
            {
                heap.push({day + days[day], apples[day]});
            }
            
            while (!heap.empty() && heap.top().first <= day)
            {
                heap.pop();
            }
            
            if (!heap.empty())
            {
                auto top = heap.top();
                heap.pop();
                --top.second;
                ++res;
                
                if (top.second > 0)
                {
                    heap.push(top);
                }
            }
            
            ++day;
        }
        
        return res;
    }
};