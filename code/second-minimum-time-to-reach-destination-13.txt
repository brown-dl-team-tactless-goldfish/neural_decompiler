class Solution {
public:
    int secondMinimum(int n, vector<vector<int>>& edges, int time, int change) {
        
        vector<vector<int>> adj(n+1, vector<int>(0));
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
        queue<int> q;
        q.push(1);
        int vis[n+1];
        memset(vis, 0, sizeof vis);
        int t =0;
        int ans =INT_MAX;

        
        while(!q.empty())
        {
            int s = q.size();
            vector<bool> local(n+1, 0);
            for(int i=0;i<s;i++)
            {
                int cur = q.front();
                q.pop();
                
                vis[cur]++;
                
                if(cur==n)
                {
                    if(vis[cur]==1)
                    {
                        ans = min(ans, t);
                    }
                    else if(vis[cur]>1 && t>ans)
                    {
                        return t;
                    }
                }

                for(int j=0;j<adj[cur].size();j++)
                {
                    if(!local[adj[cur][j]] && vis[adj[cur][j]]<2)
                    {
                        local[adj[cur][j]]=1;
                        q.push(adj[cur][j]);
                    }
                }
            }
            
            if((t/change)%2)
            {
                t+= change - t%change + time; 
            }
            else
            {
                t += time;
            }
            
        }
        
        
        return -1;
        
        
    }
};