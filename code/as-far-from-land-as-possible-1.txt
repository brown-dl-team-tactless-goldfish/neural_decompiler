int exist(int ** temp_grid, int size_temp_grid, int i, int j){
    for (int k = 0; k < size_temp_grid; k++){
        if (temp_grid[k][0] == i && temp_grid[k][1] == j){
            return true;
        }
    }
    return false;
}

int maxDistance(int** grid, int gridSize, int* gridColSize){
    if (gridSize == 1){
        return -1;
    }
   
    int visited_ones = 0;

    for (int i = 0; i < gridSize; i++){
        for (int j = 0; j < gridSize; j++){
            if (grid[i][j] == 1){
                visited_ones++;
            }
        }
    }

    // base case: all 0 or all 1
    if (visited_ones == (gridSize*gridSize) || visited_ones == 0){
        return -1;
    }

    // temp_grid save the indices of the "new" 1 we add to the grid ( to update it in the next iteration)
    int ** temp_grid = (int**)malloc(sizeof(int*)*gridSize*gridSize);
    for (int i = 0; i < gridSize*gridSize; i++){
        temp_grid[i] = (int*)malloc(sizeof(int)*2);
        temp_grid[i][0] = 0;
        temp_grid[i][1] = 0;
    }

    int size_temp_grid = 0;
    int counter = 0; // the result counter
    while(visited_ones < gridSize*gridSize){ // run until all the grid has 1
        for (int i = 0; i < gridSize; i++){
            for (int j = 0; j < gridSize; j++){
                if (grid[i][j] == 1){
                    // update the zero neighbours to 1
                    if (i + 1 < gridSize && grid[i+1][j] == 0){
                        if (!exist(temp_grid,size_temp_grid,i+1,j)){
                        temp_grid[size_temp_grid][0]=i+1;
                        temp_grid[size_temp_grid][1]=j;
                        size_temp_grid++;
                        }
                        
                    } if (j + 1 < gridSize && grid[i][j+1] == 0){
                        if (!exist(temp_grid,size_temp_grid,i,j+1)){                 
                            temp_grid[size_temp_grid][0]=i;
                            temp_grid[size_temp_grid][1]=j+1;
                            size_temp_grid++;
                        }
                    } if (i - 1 > -1 && grid[i-1][j] == 0){
                        if (!exist(temp_grid,size_temp_grid,i-1,j)){                 
                            temp_grid[size_temp_grid][0]=i-1;
                            temp_grid[size_temp_grid][1]=j;
                            size_temp_grid++;
                        }
                    } if (j - 1 > -1 && grid[i][j-1] == 0){
                        if (!exist(temp_grid,size_temp_grid,i,j-1)){                 
                            temp_grid[size_temp_grid][0]=i;
                            temp_grid[size_temp_grid][1]=j-1;
                            size_temp_grid++;
                        }
                    }
                }
            }
        }
        visited_ones += size_temp_grid;
        // update the grid
        for (int i = 0; i < size_temp_grid; i++){
            grid[temp_grid[i][0]][temp_grid[i][1]] = 1;
            temp_grid[i][0] = 0;
            temp_grid[i][1] = 0;
        }
        size_temp_grid = 0;
        counter++;
    }

    // free
    for(int i = 0; i < gridSize*gridSize; i++){
        free(temp_grid[i]);
    }
    free(temp_grid);
    return counter;
}