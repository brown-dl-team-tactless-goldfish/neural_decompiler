class Solution {
public:
    int maximumMinutes(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), ans = INT_MIN;
        vector<int> dirs = {0, -1, 0, 1, 0};
        vector<vector<int>> firetime(m, vector<int>(n, INT_MAX)), visited(m, vector<int>(n, INT_MAX));
        queue<pair<int, int>> firepoint;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 2)
                    firetime[i][j] = -1;
                else if (grid[i][j] == 1)
                {
                    firepoint.push({i, j});
                    firetime[i][j] = 0; 
                }
            }
        while (!firepoint.empty())
        {
            int x = firepoint.front().first, y = firepoint.front().second;
            firepoint.pop();
            for (int d = 0; d < 4; d++)
            {
                int nx = x + dirs[d], ny = y + dirs[d + 1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || firetime[nx][ny] <= firetime[x][y])
                    continue;
                firetime[nx][ny] = firetime[x][y] + 1;
                firepoint.push({nx, ny});
            }
        }
        visited[0][0] = 0;
        queue<pair<pair<int, int>, int>> pos;
        if (firetime[0][0] == INT_MAX)
            pos.push({{0, 0}, INT_MAX});
        else if (firetime[0][0] <= 0)
            return -3;
        else    
            pos.push({{0, 0}, firetime[0][0] - 1});
        while (!pos.empty())
        {
            int dt = pos.front().second, x = pos.front().first.first, y = pos.front().first.second;
            pos.pop();
            for (int d = 0; d < 4; d++)
            {
                int nx = x + dirs[d], ny = y + dirs[d + 1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny] <= visited[x][y])
                    continue;
                visited[nx][ny] = visited[x][y] + 1;
                int ndt = (firetime[nx][ny] == INT_MAX) ? INT_MAX : firetime[nx][ny] - visited[nx][ny] - 1;
                if (nx == m - 1 && ny == n - 1)
                {
                    ndt += ((ndt == INT_MAX) ? 0 : 1);
                    int candi = min(dt, ndt);
                    ans = max(ans, candi);
                }
                else if (ndt >= 0)
                {
                    pos.push({{nx, ny}, min(dt, ndt)});
                }
            }
        }
        if (ans == INT_MAX)
            ans = 1e9;
        if (ans >= 0)
            return ans;
        return -1;
    }
};