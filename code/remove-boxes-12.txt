class Solution {
public:
    
    int dp[102][102][102];
    
    int find(vector<int>& boxes, int left, int right, int count){
        
        if(left > right) return 0;
        
        if(dp[left][right][count] != -1) return dp[left][right][count];
        
        int l = left;
        int cnt = count;
        
        while(l < right and boxes[l] == boxes[l+1]){
            cnt++;
            l++;
        }
        
        // option 1 (no combine)
        int ans = find(boxes, l+1, right, 0) + (cnt+1)*(cnt+1);
        
        for(int i=l+1; i<= right; i++){
            if(boxes[i] == boxes[l]){
                //option 2 (combine)
                int cand = find(boxes, l+1, i-1, 0) + find(boxes,i, right, cnt+1);
                
                ans = max(ans, cand);
            }
        }
        
        return dp[left][right][count] = ans;
    }
    
    int removeBoxes(vector<int>& boxes) {
        
        
        for(int i=0;i<102;i++){
            for(int j=0;j<102;j++){
                for(int k=0;k<102;k++){
                    dp[i][j][k]=-1;  
                }  
            }  
        }   
        
        return find(boxes, 0, boxes.size()-1, 0);
        
    }
};