class Solution {
public:
    int maximumGood(vector<vector<int>>& grid) {
        int n = grid.size();
        int numSubSets = 1<<n;
        int ans = 0;
        for(int bitmask=1; bitmask<numSubSets; bitmask++)
        {
            vector<int> good(n,0),bad(n,0);
            int count = 0;
            for(int i=0; i<n; i++)
            {
                if((bitmask&(1<<i))!=0)
                {
                    count++;
                    good[i] = 1;
                    bad[i] = 0;
                }
                else
                {
                    good[i] = 0;
                    bad[i] = 1;
                }
                if(good[i]==1 && bad[i]==1) break;
            }
            bool flag = true;
            for(int i=0; i<n; i++)
            {
                for(int j=0; j<n; j++)
                {
                    if(i==j) continue;
                    if(good[i]==1)
                    {
                        if(grid[i][j]==0 && bad[j]==0)
                        {
                            flag = false;
                            break;
                        }
                        if(grid[i][j]==1 && good[j]==0)
                        {
                            flag = false;
                            break;
                        }
                    }
                }
            }
            if(flag==true)
                ans = max(ans,count);
        }
        return ans;
    }
};