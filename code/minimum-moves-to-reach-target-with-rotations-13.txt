    int minimumMoves(vector<vector<int>>& grid) {
        int row = grid.size(), col = grid[0].size();
        set<vector<int>> visited{};
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> dijkstra{};
        dijkstra.push({0, 0, 0, 0, 1}); // {dist, (0,0), (0, 1)}
        while(!dijkstra.empty()){
            auto curr = dijkstra.top();
            if(curr[1]==row-1 && curr[2]==col-2 && curr[3]==row-1 && curr[4]==col-1) return curr[0];
            dijkstra.pop();
            visited.insert(curr);
            // to the right
            vector<int> ne_pos(curr.begin()+1, curr.end());
            auto ne = curr, ne_po = ne_pos;
            ++ne_pos[1], ++ne_pos[3], ++ne[0], ++ne[2], ++ne[4];
            if(ne_pos[3]<col && !grid[ne_pos[0]][ne_pos[1]] && !grid[ne_pos[2]][ne_pos[3]] && !visited.count(ne_pos)){
                dijkstra.push(ne);
                visited.insert(ne_pos);
            }
            // move down
            ne = curr;
            ne_pos = ne_po;
            ++ne_pos[0], ++ne_pos[2], ++ne[0], ++ne[1], ++ne[3];
            if(ne_pos[2]<row && !grid[ne_pos[0]][ne_pos[1]] && !grid[ne_pos[2]][ne_pos[3]] && !visited.count(ne_pos)){
                dijkstra.push(ne);
                visited.insert(ne_pos);
            }
            // clockwise
            if(curr[1]==curr[3]){
                ne = curr;
                ne_pos = ne_po;
                ++ne_pos[2], --ne_pos[3], ++ne[0], ++ne[3], --ne[4];
                if(ne_pos[2]<row && !grid[ne_pos[2]][ne_pos[3]] && !grid[ne_pos[2]][ne_pos[3]+1] && !visited.count(ne_pos)){
                    dijkstra.push(ne);
                    visited.insert(ne_pos);
                }
            }
            // counterclockwise
            if(curr[2]==curr[4]){
                ne = curr;
                ne_pos = ne_po;
                --ne_pos[2], ++ne_pos[3], ++ne[0], --ne[3], ++ne[4];
                if(ne_pos[3]<col && !grid[ne_pos[2]][ne_pos[3]] && !grid[ne_pos[2]+1][ne_pos[3]] && !visited.count(ne_pos)){
                    dijkstra.push(ne);
                    visited.insert(ne_pos);
                }
            }
        }
        return -1;
    }