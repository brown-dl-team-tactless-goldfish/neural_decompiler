class Solution {
public:
    typedef pair<string, int> pp;
    
    int slidingPuzzle(vector<vector<int>>& board) {
        queue<pp> q;
        string cur = "";

        for(int i=0; i<board.size(); ++i) {
            for(int j=0; j<board[0].size(); ++j) {
                cur += '0' + board[i][j];
            }
        }
        q.push({cur, 0});
        
        int dx[4] = {-1, 0, 1, 0};
        int dy[4] = {0, -1, 0, 1};
        
        unordered_set<string> visited;
        while(!q.empty()) {
            auto p = q.front();
            q.pop();

            if(p.first == "123450") return p.second;
            
            int r = 0, c = 0;
            for(int i=0; i<6; ++i) {
                if(p.first[i] == '0') {
                    r = i / 3;
                    c = i % 3;
                    break;
                }
            }
            
            for(int k=0; k<4; ++k) {
                int nr = r + dx[k], nc = c + dy[k];
                if(nr >= 0 && nr < 2 && nc >= 0 && nc < 3) {
                    string s = p.first;
                    s[nr * 3 + nc] = '0';
                    s[r * 3 + c] = p.first[nr * 3 + nc];
                    if(visited.count(s)) continue;
                    q.push({s, p.second + 1});
                    visited.insert(s);
                }
            }
        }
        
        return -1;
    }
};