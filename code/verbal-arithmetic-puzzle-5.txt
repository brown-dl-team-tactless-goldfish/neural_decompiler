class Solution {
public:
    bool isSolvable(vector<string>& words, string result) {
        unordered_map<char,int> m;
        vector<string> rewords;
        int maxsize=0;
        for(auto &w:words){
            string rw="";
            for(int i=w.size()-1;i>=0;--i){
                rw+=w[i];
                m[w[i]]=-1;
            }
            if(w.size()>maxsize){
                maxsize=w.size();
            }
            rewords.push_back(rw);
        }
        string r="";
        for(int i=result.size()-1;i>=0;--i){
            r+=result[i];
            m[result[i]]=-1;
        }
        vector<bool> used(10,false);
        return helper(rewords,r,m,0,0,0,maxsize,used);
    }
    
    bool helper(vector<string> &rewords, string& result, unordered_map<char,int> &m, int idx,int widx, int carry,int maxsize, vector<bool> &used){
        if(idx>=maxsize){
            if(carry==0){
                return idx>=result.size();
            } 
            int cur=carry%10;
            carry/=10;
            if(m[result[idx]]==-1){
                if(used[cur]) return false;
                m[result[idx]]=cur;
                used[cur]=true;
                bool res=helper(rewords,result,m,idx+1,widx,carry,maxsize,used);
                m[result[idx]]=-1;
                used[cur]=false;
                return res;
            }else{
                if(cur!=m[result[idx]]) return false;
                return helper(rewords,result,m,idx+1,widx,carry,maxsize,used);
            }
        }
        
        if(widx>=rewords.size()){
            for(auto w:rewords){
                if(idx<w.size()){
                    carry+=m[w[idx]];
                }
            }
            int cur=carry%10;
            carry/=10;
            if(m[result[idx]]==-1){
                if(used[cur]) return false;
                used[cur]=true;
                m[result[idx]]=cur;
                bool res=helper(rewords,result,m,idx+1,0,carry,maxsize,used);
                m[result[idx]]=-1;
                used[cur]=false;
                return res;
            }else{
                if(cur!=m[result[idx]]) return false;
                return helper(rewords,result,m,idx+1,0,carry,maxsize,used);
            }
        }else{
            string curword=rewords[widx];
            if(idx>=curword.size()){
                return helper(rewords,result,m,idx,widx+1,carry,maxsize,used);
            }
            if(m[curword[idx]]==-1){
                for(int i=0;i<=9;++i){
                    if((i==0 && idx==curword.size()-1) || used[i]){
                        continue;
                    }
                    used[i]=true;
                    m[curword[idx]]=i;
                    if(helper(rewords,result,m,idx,widx+1,carry,maxsize,used)){
                        //m[curword[idx]]=-1;
                        //used[i]=false;
                        return true;
                    }
                    m[curword[idx]]=-1;
                    used[i]=false;
                }
            }else{
                return helper(rewords,result,m,idx,widx+1,carry,maxsize,used);
            }
        }
        return false;
    }
};