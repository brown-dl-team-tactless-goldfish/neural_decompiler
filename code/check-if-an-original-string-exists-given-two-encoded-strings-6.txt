short dp[41][41][2000];
    
int offset = 1000;

class Solution {
public:
    int n, m;
    
    
    
    bool isDigit(char c)
    {
        return (c <= '9' && c >= '1');
    }
    
    bool solve(int i, int j, int diff, string &s1, string &s2)
    {
        string num1, num2;
        // diff must be 0 at the end.
        if(i == n && j == m)
        {
            return diff == 0;
        }
        bool ans = false;
        
        if(dp[i][j][diff+offset] != -1) return dp[i][j][diff+offset];
        
        // if net difference is 0 and both are characters then they must be equal otherwise false
        if(i < n && j < m && diff == 0 && !isDigit(s1[i]) && !isDigit(s2[j]))
        {
            if(s1[i] == s2[j])
                ans = solve(i+1, j+1, diff, s1, s2);
            else
                ans = false;
        }
        // when diffence is > 0 and s1[i] is character simply reduce the difference and solve for (i+1,j)
        if(i < n && diff > 0 && !isDigit(s1[i]))
        {
            ans = ans || solve(i+1, j, diff-1, s1, s2);
        }
        // same as above but here increase the difference.
        if(j < m && diff < 0 && !isDigit(s2[j]))
        {
            ans = ans || solve(i, j+1, diff+1, s1, s2);
        }
        // case when s1[i] is digit we form all the type of numbers and reduce the diffence by that number.
        if(i < n)
        {
            int num = 0;
            int i1 = i;
            while(i1 < n && isDigit(s1[i1]))
            {
                num = num * 10 + (s1[i1]-'0');
                ans = ans || solve(i1+1, j, diff-num, s1, s2);
                i1++;
            }
        }
        // same as above but for s2 hence diff should be increased.
        if(j < m)
        {
            int num = 0;
            int j1 = j;
            while(j1 < m && isDigit(s2[j1]))
            {
                num = num * 10 + (s2[j1]-'0');
                ans = ans || solve(i, j1+1, diff+num, s1, s2);
                j1++;
            }
        }
        return dp[i][j][diff+offset] = ans;
    }
    
    bool possiblyEquals(string s1, string s2) {
        n = s1.size();
        m = s2.size();
        memset(dp, -1, sizeof(dp));
        return solve(0, 0, 0, s1, s2);   
    }
};