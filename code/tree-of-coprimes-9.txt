class Solution {
public:
    vector<int> res;
    void dfs(int node, int p, vector<int> &nums, vector<vector<int> > &graph, vector<int> &val) {
        res[node] = val[nums[node]];
        vector<int> prev = val;
        for(int i = 1; i <= 50; i++) {
            if(__gcd(i, nums[node]) == 1) {
                val[i] = node;
            }
        }
        for(auto nbr : graph[node]) {
            if(nbr == p) continue;
            dfs(nbr, node, nums, graph, val);
        }
        val = prev;
    }
    vector<int> getCoprimes(vector<int>& nums, vector<vector<int>>& edges) {
        int n = nums.size();
        vector<int> val(51, -1);
        res = vector<int>(n, -1);
        vector<vector<int> > graph(n);
        for(auto e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        dfs(0, -1, nums, graph, val);
        return res;
   }
};