class Solution {
    public:
        int findKthNumber(int n, int k) {
            vector<int> num{0, 1, 11, 111, 1111, 11111, 111111, 1111111, 11111111, 111111111, 1111111111};

            int prefix = 0;
            int c = 1;
            int a = n;
            while(a /= 10) {
                c++;
            }

            int first = 1;
            while (k) {
  

                int l = n - num[c-1] * (10 - first);
                int m = l / (num[c] - num[c-1]);
                int r = l - m * (num[c] - num[c-1]);
                int p = 0;


                if(num[c] * m >= k) {
                    p = (k - 1) / num[c];
                    k = (k - 1)  % num[c] + 1;
                    n = num[c]; 
                }
                else if((num[c-1] * (9 - m - first)) > (n - k)) {
                    p = 9 - ((n - k) / num[c-1]) - first;
                    k = num[c-1] - (n - k) % num[c-1];
                    n = num[c-1];
                }
                else {
                    p = m;
                    k -= m * num[c];
                    n = r + num[c-1];
                }

                prefix = prefix * 10 + p + first;
     

                if(k == 1) {
                    return prefix;
                }

                c--;
                k--;
                n--;

                first = 0;
            }

            return prefix;
        }
};