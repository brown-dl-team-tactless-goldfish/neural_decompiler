class Solution {
public:
    bool isPossible(vector<int>& target) {
        if(target.size() == 1) return target[0] == 1;
        
        priority_queue<int> pq(target.begin(), target.end());
        long long int sum = 0;
        
        for(int val : target) {
            sum += val;
        }
        
        while(!pq.empty() && pq.top() != 1) {
            long long int topElement = pq.top();
            pq.pop();
            long long int sumExcludingTopElement = sum - topElement;
            int howManytimesTopElementOfExcludingSum = topElement / sumExcludingTopElement;
            if(howManytimesTopElementOfExcludingSum > 1) 
                howManytimesTopElementOfExcludingSum--;
            else 
                howManytimesTopElementOfExcludingSum = 1;
            topElement -= sumExcludingTopElement * howManytimesTopElementOfExcludingSum;
            if(topElement < 1) return false;
            pq.push(topElement);
            sum = sumExcludingTopElement + topElement;
        }
        return true;
    }
};