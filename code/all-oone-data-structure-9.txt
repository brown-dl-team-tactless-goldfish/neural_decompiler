class AllOne {
public:
    list<pair<int, unordered_set<string>>> cntlist;
    unordered_map<string, list<pair<int, unordered_set<string>>>::iterator> hashmap;
    AllOne() {

    }
    void remove(string key, list<pair<int, unordered_set<string>>>::iterator it) {
        it->second.erase(key);
        if(it->second.size() == 0) {
            cntlist.erase(it);
        }
    }
    void inc(string key) {
        //if hashmap does not contain key, add it into cntlist and hashmap and return
        //remove from cntlist, save its count as cnt
        //check if the next node has count as cnt+1
        // if yes, add string into it and return
        // if not, create a new node with cnt+1, add string into it 
        //update hashmap to point to the new/updated node
        //and return
        if(hashmap.count(key) == 0) {
            if(cntlist.size() and cntlist.begin()->first == 1) {
                cntlist.begin()->second.insert(key);
            }
            else {
                unordered_set<string> uset;
                uset.insert(key);
                cntlist.push_front({1,uset});
            }
            hashmap[key] = cntlist.begin();
            return;
        }
        auto origit = hashmap[key];
        auto nextit = next(origit);
        int currcnt = origit->first;
        if(nextit == cntlist.end() ) { // insert newnode
            unordered_set<string> uset;
            uset.insert(key);
            cntlist.push_back({currcnt+1, uset});
        }
        else if (nextit->first != currcnt+1) { //or nextit->first != currcnt+1
            unordered_set<string> uset;
            uset.insert(key);
            cntlist.insert(nextit,{currcnt+1, uset});           
        }
        else {
            nextit->second.insert(key);
        }
        hashmap[key] = next(origit);
        remove(key, origit);
        return;
    }
    
    void dec(string key) {
        //remove from cntlist, save its count as cnt
        //check if the prev node has count as cnt-1 and cnt-1 != 0
        // if yes, add string into it and return
        //if not and cnt -1 == 0, return
        // if not, create a new node with cnt-1, add string into it 
        // if cnt-1==0 remove string from hashmap
        //else add into the new node, update the map
        //and return
        if(hashmap.count(key) == 0)
            return;

        auto origit = hashmap[key];
        auto previt = prev(origit);
        int currcnt = origit->first;
        if(origit->first == 1) {
            hashmap.erase(key);
            remove(key, origit);
            return;
        }
        if((origit == cntlist.begin() and origit->first != 1)) {
            unordered_set<string> uset;
            uset.insert(key);
            cntlist.push_front({currcnt-1, uset});           
        }
        else if (origit != cntlist.begin() and previt->first != currcnt-1) {
            unordered_set<string> uset;
            uset.insert(key);
            cntlist.insert(origit, {currcnt-1, uset});  
        }
        else { 
            previt->second.insert(key); 
        }
        hashmap[key] = prev(origit);
        remove(key, origit);
    }
    
    string getMaxKey() {
        if(cntlist.size() == 0)
            return "";
        return *(prev(cntlist.end())->second.begin());
    }
    
    string getMinKey() {
        if(cntlist.size() == 0)
            return "";
        return *(cntlist.begin()->second.begin());
    }
};

/**
 * Your AllOne object will be instantiated and called as such:
 * AllOne* obj = new AllOne();
 * obj->inc(key);
 * obj->dec(key);
 * string param_3 = obj->getMaxKey();
 * string param_4 = obj->getMinKey();
 */