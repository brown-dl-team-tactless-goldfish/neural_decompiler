public class Solution {
    public IList<string> BraceExpansionII(string s){
        var op = new Stack<char>();
        var vals = new Stack<List<string>>();
        char pre = ' ';
        List<string> a;
        List<string> b;
        foreach(var c in s){
            switch(c){
                case '{':
                    if(pre!=',' && pre!='{'){
                        op.Push('*');
                    }
                    op.Push('{');
                    break;
                case '}':
                    if(op.Any()){
                        while(op.Any()){
                            var t = op.Pop();
                            if(t=='{')
                                break;
                            b = vals.Pop();
                            a = vals.Pop();
                            a = t=='+' ? Plus(a,b) : Mul(a,b);
                            vals.Push(a);
                        }
                    }
                    break;
                case ',':
                    if(op.Peek()=='*'){
                        while(op.Peek()=='*'){
                            b = vals.Pop();
                            a = vals.Pop();
                            a = Mul(a,b);
                            vals.Push(a);
                            op.Pop();
                        }
                    }
                    op.Push('+');
                    break;
                default:
                    if(pre!=',' && pre!='{' && pre!=' '){
                        op.Push('*');
                    }
                    vals.Push(new List<string>(){c.ToString()});
                    break;
            }
            pre = c;
        }
        
        
        while(op.Any() && vals.Count>=2){
            b = vals.Pop();
            a = vals.Pop();
            a = op.Pop() == '+' ? Plus(a,b) : Mul(a,b);
            vals.Push(a);
        }
        
        return vals.Peek().Distinct().OrderBy(x=>x).ToList();
    }


    public List<string> Plus(List<string> a, List<string> b){
        a.AddRange(b);
        return a;
    }

    public List<string> Mul(List<string> a, List<string> b){
        var ret = new List<string>();
        foreach(var i in a){
            foreach(var j in b){
                ret.Add($"{i}{j}");
            }
        }
        return ret;
    }
}