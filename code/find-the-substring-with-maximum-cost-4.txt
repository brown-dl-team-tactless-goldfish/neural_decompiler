class Solution {
public:
    int maximumCostSubstring(string s, string chars, vector<int>& vals) {
        vector<int> res; 
        unordered_map<char,int> mpp; 
        char c = 'a';
        int ziz = 1; 
        while(c <= 'z'){
            mpp[c] = ziz++; 
            ++c; 
        }
        for(int i = 0 ; i < vals.size() ; ++i){
            char curr = chars[i]; 
            mpp[curr] = vals[i]; 
        }
        for(int i = 0 ; i < s.length(); ++i){
            char curr = s[i]; 
            int val = mpp[curr] ; 
            res.push_back(val); 
        }
        for(auto x : res) cout << x << " "; 
        cout << endl;
        int n = int(res.size()); 
        int dp[n]; 
        memset(dp , 0 , sizeof dp); 
        dp[0] = res[0]; 
        int maxx = dp[0]; 
        for(int i = 1 ; i < s.length(); ++i){
            dp[i] = max(res[i], dp[i-1] + res[i]); 
            maxx = max(maxx , dp[i]); 
        }
        maxx = max(0 , maxx); 
        return maxx; 
    }
};
