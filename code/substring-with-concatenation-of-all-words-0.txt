/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
inline bool strCmp(char* a, char* b) {
	while (*a && (*a == *b++))
		++a;
	return !*a;
}


bool compare2(char *source, int *used, int ulen, char **words, int wordsSize, int wordlen)
{
    int j;
    int i = 0;
    int f = 0;
    memset(used, 0, sizeof(int) * wordsSize);

    for (i = 0; i < wordsSize * wordlen; i += wordlen) {
        f = 1;

        for (j = 0; j < wordsSize; j++) {
            if (used[j] == 10) {
                continue;
            }
            
            char *tmp = &words[j][0];
            if (strCmp(tmp, source + i)) {
                used[j] = 10;
                ulen++;
                f = 0;
                break;
            }
        }
        if (f == 1) {
            break;
        }
    }

    if (ulen == wordsSize) {
        return true;
    }

    return false;
}




int* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){
    int *ret = malloc(sizeof(int) * 30);
    int i, j;
    int len = strlen(s);
    int k = strlen(&words[0][0]);
    int *used = malloc(sizeof(int) * wordsSize);
    int ui = 0;
    int ff = 0;

    int num = k*wordsSize;

    if (len < num) {
        *returnSize = 0;
        return ret;
    }

    for (i = 0; i <= len - num; i++) {
        if (true == compare2(s + i, used, 0, words, wordsSize, k)) {
            ret[ui++] = i;
        }
    }    
        
    *returnSize = ui;
    return ret;
}