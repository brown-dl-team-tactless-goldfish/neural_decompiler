class Solution {
    enum {empty, rook, bishop, queen};
    vector<tuple<int,int,int>> data;
    uint8_t board[8][8] = {};
    int count = 0;
    
    void move_direction(int k, int x, int y, int dx, int dy) {
        int t = 0;
        while (++t) {
            int i = x + t*dx;
            int j = y + t*dy;
            if (i < 0 || i >= 8 || j < 0 || j >= 8) break;
            uint8_t cell = board[i][j];
            
            uint8_t pass_bit = 1 << t; // can it pass through [i,j]
            if (cell & pass_bit) break;
            
            uint8_t dest_mask = 0xff << t; // can it stop at [i,j]
            if (!(cell & dest_mask)) {
                board[i][j] = cell | dest_mask;
                add_piece(k+1);
            }
            board[i][j] = cell | pass_bit;
        }
        while (--t) {
            int i = x + t*dx;
            int j = y + t*dy;
            board[i][j] &= ~(1 << t);
        }
    }
    
    void add_piece(int k) {
        if (k == data.size()) {
            ++count;
            return;
        }
        auto [piece, i, j] = data[k];
        if (!board[i][j]) {
            board[i][j] = 0xff;
            add_piece(k+1);
            board[i][j] = 0;
        }
        if (piece & rook) {
            move_direction(k, i, j, 1, 0);
            move_direction(k, i, j, -1, 0);
            move_direction(k, i, j, 0, 1);
            move_direction(k, i, j, 0, -1);
        }
        if (piece & bishop) {
            move_direction(k, i, j, 1, 1);
            move_direction(k, i, j, 1, -1);
            move_direction(k, i, j, -1, 1);
            move_direction(k, i, j, -1, -1);
        }
    }
public:
    int countCombinations(vector<string> const& pieces, vector<vector<int>> const& positions) {
        for (int k = 0; k < pieces.size(); ++k) {
            int piece = (pieces[k] == "rook") ? rook :
                        (pieces[k] == "bishop") ? bishop : queen;
            int i = positions[k][0] - 1;
            int j = positions[k][1] - 1;
            data.emplace_back(piece, i, j);
        }
        add_piece(0);
        return count;
    }
};