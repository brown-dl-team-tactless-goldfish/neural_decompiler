class Solution {
public:
    
    vector<vector<int>> dp;
    
    int helper(vector<int>& stoneValue, int i, int j, vector<int> &leftSum){
        if(j == i){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        int curr=0;
        for(int k=i; k<j; k++){
            int l = leftSum[k];
            int r = leftSum[j]-leftSum[k];
            if(i > 0){
                l -= leftSum[i-1];
            }
            if(l >= r){
                curr = max(curr,r+helper(stoneValue, k+1, j, leftSum));    
            }
            if(r >= l){
                curr = max(curr,l+helper(stoneValue, i, k, leftSum));
            }
        }
        dp[i][j] = curr;
        return curr;
    }
    
    int stoneGameV(vector<int>& stoneValue) {
        int n = stoneValue.size();
        dp.resize(n, vector<int>(n, -1));
        vector<int> leftSum(stoneValue.size(), 0);
        
        leftSum[0] = stoneValue[0];
        for(int i=1; i<stoneValue.size(); i++) {
            leftSum[i] = leftSum[i-1]+stoneValue[i];
        }
        
        int x = helper(stoneValue, 0, stoneValue.size()-1, leftSum);
        
        return dp[0][n-1]==-1?0:dp[0][n-1];
    }
};