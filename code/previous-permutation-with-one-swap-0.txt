/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
void swap(int* a, int* b){
    int tmp = *a ;
    *a = *b ;
    *b = tmp ;
}
int* prevPermOpt1(int* arr, int arrSize, int* returnSize){
    int n = arrSize ;
    int* ans = malloc(n * sizeof(int)) ;
    memcpy(ans, arr, n * sizeof(int)) ;
    for(int i = n-1; i > 0; i--){
        if(ans[i-1]  <= ans[i])
            continue ;
        int max = ans[i] ;
        int idx = i ;
        for(int j = i + 1; j < n; j++){
            if(ans[j] >= ans[i-1])
                break ;
            if(ans[j] > max){
                max = ans[j] ;
                idx = j ;
            }    
        }
        swap(&ans[i-1], &ans[idx]) ;
        break ;
    }
    *returnSize = n ;
    return ans ;
}