		public int MergeStones(int[] stones, int K) {
            int len = stones.Length;
            if (K > 2 && len % (K - 1) != 1) return -1;
            int[] s = new int[len + 1];
            for (int i = 1; i <= len; i++) {
                s[i] = s[i - 1] + stones[i - 1];
            }
            int[,] data = new int[len, len];
            for (int i = len - 1; i >= 0; i--) {
                MergeStonesHelp(i, i, 0, K, 0, stones, s, data);
            }
            return data[0, len - 1];
        }

        private void MergeStonesHelp(int start, int cur, int step, int K, int sum, int[] stones, int[] s, int[,] data) {
            int len = stones.Length;
            for (int i = cur + 1; i <= len; i += K - 1) {
                int nsum = sum + data[cur, i - 1];
                if (step == K - 1) {
                    nsum += s[i] - s[start];
                    if (data[start, i - 1] == 0 || nsum < data[start, i - 1]) {
                        data[start, i - 1] = nsum;
                    }
                } else {
                    MergeStonesHelp(start, i, step + 1, K, nsum, stones, s, data);
                }
            }
        }