class Solution {
public:
    vector<int> smallestMissingValueSubtree(vector<int>& parent, vector<int>& nums) 
    {
        int n=parent.size();
        vector<vector<int>>adj(n);
        for(int i=1;i<n;i++)
            adj[parent[i]].push_back(i);
        int start=-1;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==1)
            {
                start=i;
                break;
            }
        }
        vector<int>res(n,1);
        if(start==-1)
            return res;
        vector<bool>vis(100005,false);   // Visited for value
        vector<bool>node(n,false);       // Visited for tree node
        int curr_min=1;
        while(start!=-1)
        {
            queue<int>q;
            q.push(start);
            while(!q.empty())
            {
                int u=q.front();
                q.pop();
                vis[nums[u]]=true;
                node[u]=true;
                for(auto v:adj[u])
                {
                    if(!node[v])
                        q.push(v);
                }
            }
            while(vis[curr_min])
                curr_min++;
            res[start]=curr_min;
            start=parent[start];
        }
        return res;
    }
};