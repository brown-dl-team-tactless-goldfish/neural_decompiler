    int minimumVisitedCells(vector<vector<int>>& G) {
        queue<array<int, 2>> q;
        q.push({0, 0});
        
        int m = G.size(), n = G[0].size();
        vector<vector<int>> seen(m, vector<int>(n, 0));
        seen[0][0] = 1;
        int res = 1;
        
        vector<vector<int>> max_p(m, vector<int>(n, 0));
        vector<int> r_max(n, 0), c_max(m, 0);
        
        while(!q.empty()) {
            for(int sz = q.size(); sz > 0; sz--) {
                auto p = q.front(); q.pop();
                int x = p[0], y = p[1];
                if(x == m-1 && y == n-1) return res;
                for(int i = max(r_max[y], x+1); i <= x + G[x][y] && i < m; i++) {
                    if(seen[i][y] == 0) {
                        seen[i][y] = 1;
                        q.push({i, y});
                    }
                }
                r_max[y] = max(r_max[y], x + G[x][y]+1);
                for(int j = max(c_max[x], y+1); j <= y + G[x][y] && j < n; j++) {
                    if(seen[x][j] == 0) {
                        seen[x][j] = 1;
                        q.push({x, j});
                    }
                }
                c_max[x] = max(c_max[x], y + G[x][y]+1);
            }
            res++;
        }
        return -1;
    }