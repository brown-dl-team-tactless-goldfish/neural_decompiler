public class Solution 
{
    private int n;
    
    public int NetworkBecomesIdle(int[][] edges, int[] patience) 
    {
        n = patience.Length;
        var adjList = GetAdjacencyList(edges,n);
        int[] shortestTimes = GetShortestTimeToMaster(adjList);
        int[] timeTaken = GetTotalTimeTakenByAllMessagesOfDataServerToReachMaster(shortestTimes,patience);
        return 1+timeTaken.Max();
    }
    
    private int[] GetTotalTimeTakenByAllMessagesOfDataServerToReachMaster(int[] shortestTimes, int[] patience)
    {
        int[] timeTaken = new int[n];
        
        for(int i=1; i<n; i++)
        {
            if(patience[i] >= 2*shortestTimes[i])
                timeTaken[i] = 2*shortestTimes[i];
            else
            {
                int messagesGenerated = Convert.ToInt32(Math.Ceiling(2.0*shortestTimes[i] / patience[i]));
                timeTaken[i] = 2*shortestTimes[i] + (messagesGenerated - 1) * patience[i];
            }
        }
        
        return timeTaken;
    }
    
    private int[] GetShortestTimeToMaster(List<List<int>> adjList)
    {
        return PerformDijkstraAndGetShortestTime(adjList);
    }
    
    private int[] PerformDijkstraAndGetShortestTime(List<List<int>> adjList)
    {
        int path = 0;
        
        int[] shortestTimes = new int[n];
        for(int i=0;i<n;i++)
        {
            shortestTimes[i] = int.MaxValue-1;
        }
        shortestTimes[0] = 0;
        
        PriorityQueue<int,int> qu = new();
        qu.Enqueue(0,0);
        
        while(qu.Count>0)
        {
            var cur = qu.Dequeue();
            
            foreach(var nd in adjList[cur])
            {
                if(shortestTimes[nd] > 1 + shortestTimes[cur])
                {
                    shortestTimes[nd] = 1 + shortestTimes[cur];
                    qu.Enqueue(nd,shortestTimes[nd]);
                }
            }
        }
        
        return shortestTimes;
    }
    
    private List<List<int>> GetAdjacencyList(int[][] edges, int n)
    {
        List<List<int>> adjList = new();
        
        for(int i=0; i<n; i++)
        {
            adjList.Add(new());
        }
        
        foreach(var ed in edges)
        {
            adjList[ed[0]].Add(ed[1]);
            adjList[ed[1]].Add(ed[0]);
        }
        
        return adjList;
    }
}