void mergeSort(int *nums, int l, int r);

int* sortArray(int* nums, int numsSize, int* returnSize){
    mergeSort(nums, 0, numsSize - 1);
    *returnSize = numsSize;
    return nums;
}

void mergeSort(int *nums, int l, int r) {
    // split until leave one item
    if (l == r) {
        return;
    }
    
    int mid = l + (r - l) / 2;
    mergeSort(nums, l, mid);
    mergeSort(nums, mid + 1, r);
    int firstHead = l;
    int secondHead = mid + 1;
    int sortedArraySize = r - l + 1;
    int sortedArray[sortedArraySize];
	// will be populated position in sorted array
    int currentP = 0;
    for (int i = 0; i < sortedArraySize; i++) {
	    // check which splitted part already finished
        if (firstHead > mid || secondHead > r) {
            break;
        }
        currentP++;
        if (nums[firstHead] > nums[secondHead]) {
            sortedArray[i] = nums[secondHead];
            secondHead++;
        } else {
            sortedArray[i] = nums[firstHead];
            firstHead++;
        }
    }
    // first array is already finished, so continue to finish second array
    if (firstHead > mid) {
        for (currentP; currentP < sortedArraySize; currentP++) {
            sortedArray[currentP] = nums[secondHead];
            secondHead++;
        }
    }
	// second array is already finished, so continue to finish first array
    if (secondHead > r) {
        for (currentP; currentP < sortedArraySize; currentP++) {
            sortedArray[currentP] = nums[firstHead];
            firstHead++;
        }
    }
    // modify value on nums using sorted array, need to notice start position on nums 
    for (int i = 0; i < sortedArraySize; i++) {
        nums[l + i] = sortedArray[i];
    }
}