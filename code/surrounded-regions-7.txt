void dfs(int i, int j, int row, int col, char **board);
void solve(char** board, int boardSize, int* boardColSize){
    
    int i,j;
    int row,col;  
    row = boardSize;
    col = *boardColSize;
  
    for (i=0; i < col; i++)
    {
        if (board[0][i] == 'X' || board[0][i] == 'Y')
            continue;
        dfs(0,i,row,col,board);
    }
    for (i=0; i < row; i++)
    {
        if (board[i][0] == 'X' || board[i][0] == 'Y')
            continue;
        dfs(i,0,row,col,board);
    }
    for (i=0; i < col; i++)
    {
        if (board[row-1][i] == 'X' || board[row-1][i] == 'Y')
            continue;
        dfs(row-1,i,row,col,board);
    }
    for (i=0; i < row; i++)
    {
        if (board[i][col-1] == 'X' || board[i][col-1] == 'Y')
            continue;
        dfs(i,col-1,row,col,board);
    }

    for (i=0; i < row; i++)
    {
        for (j=0; j < col; j++)
        {
            if (board[i][j] == 'Y')
                board[i][j] = 'O';
            else if (board[i][j] == 'O')
                board[i][j] = 'X';
        }
    }
    return;
}

void dfs(int i, int j, int row, int col, char **board)
{
    if (i < 0 || i > row-1 || j < 0 || j > col-1)
        return;
    if (board[i][j] == 'X' || board[i][j] == 'Y')
        return;
     
    board[i][j] = 'Y';
    dfs(i,j+1,row,col,board);
    dfs(i-1,j,row,col,board);
    dfs(i+1,j,row,col,board);
    dfs(i,j-1,row,col,board);
    return;
    
}