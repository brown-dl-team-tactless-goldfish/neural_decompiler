class Solution {
public:
    NestedInteger deserialize(string s) {
        int index = 0;
        return deserialize(s, index);
    }
    
    NestedInteger deserialize(string s, int &index) {
        NestedInteger result;
        if (s[index] == '[') {
            parseList(s, index, &result);
        } else {
            result.setInteger(parseNum(s, index));
        }
        return result;
    }
    
    void parseList(string s, int &index, NestedInteger *parent) {
        index++;
        while (s[index] != ']') {
            if (s[index] == ',') {
                index++;
            } else if (s[index] == '[') {
                NestedInteger n;
                parseList(s, index, &n);
                parent->add(n);
            } else {
                NestedInteger n;
                n.setInteger(parseNum(s, index));
                parent->add(n);
            }
        }
        index++;
    }
    
    int parseNum(string s, int &index) {
        bool negative = false;
        int value = 0;
        if (s[index] == '-') {
            negative = true;
            index++;
        }
        int result = 0;
        while (isNum(s[index])) {
            result *= 10;
            result += (s[index] - '0');
            index += 1;
        }
        if (negative) {
            result = -result;
        }
        return result;
    }
    
    bool isNum(char c) {
        if (c >= '0' && c <= '9') { return true; }
        return false;
    }
};