int* constructArray(int n, int k, int* returnSize){
    int* set = (int*)malloc(n * sizeof(int));
    *returnSize = n;
    
	/*
	 * Start from 1 
	 * a2 should equal a1 + k, the largest distance you need
	 * back track to find the next largest distance (k - 1)
	 * repeat the pattern until you construct k distinct distances
	 */
    int i = 1;
    set[0] = 1;
    int mult = 1;
    int offset = (int)(k / 2.0) + 1;
    
    for(k; k > 0; k--){
        
        set[i] = set[i - 1] + k * mult;
        mult = -1 * mult;
        i++;
        
    }
    
	/*
	 * edge case: k == n - 1
	 * the above algorithm will find n - 1 distinct distances
	 */
    if(i == n) return set;
    
	/*
	 * find the next number outside the spiral pattern to the right (floor(k / 2) + 1)
	 * continue from this point with distance 1 until you reach n integers
	 */
    set[i] = set[i - 1] + offset;
    i++;
    
    for(i; i < n; i++){
        set[i] = set[i - 1] + 1;
    }
    
    return set;
}