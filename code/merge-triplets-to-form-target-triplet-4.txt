int m , n , o ; 

bool ok( vector<int>&P )
{
     int a = P[0];
     int b = P[1];
     int c = P[2];
    
     if( m >= a && n >= b && o >= c )return 1 ; 
     return 0 ; 
}

bool comp( vector<int>&P ,  vector<int>&Q )
{
    int a = P[0];
    int b = P[1];
    int c = P[2];
    
    int e = Q[0];
    int f = Q[1];
    int g = Q[2];
    
    if( ok( P ) && ok( Q ) )return P < Q ; 
    else if( ok(P) && !ok(Q) ) return 1 ; 
    else if( ok(Q) && !ok(P) ) return 0 ; 
    return P < Q ; 
}



class Solution {
public:
    bool mergeTriplets(vector<vector<int>>& A , vector<int>& B ) {
    
    int a = B[0];
    int b = B[1];
    int c = B[2];
    
    m = a ; 
    n = b ; 
    o = c ; 
    
    sort( A.begin() , A.end() , comp ); 
    
    int p = 0 ; 
    int q = 0 ; 
    int r = 0 ; 
    
    for( auto x : A )
    {
        p = max( p , x[0] );
        q = max( q , x[1] );
        r = max( r , x[2] ); 
        
        if( p == a && q == b && c == r )return 1 ; 
    }
    
    return 0 ; 
        
    }
};