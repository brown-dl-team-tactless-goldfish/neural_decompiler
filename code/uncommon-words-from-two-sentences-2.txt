typedef struct A Node;
typedef struct A 
{
    char word[200];
    int count;
    Node *next;
}Node;

bool isWordFind(Node *head , char* target)
{
    Node *walker = NULL;
    walker = head;
    while(walker != NULL )
    {
        if( strcasecmp(walker->word, target) == 0)
        {
            walker->count++;
            return true;
        }
        walker = walker->next;
    }      
    
    return false;
}


Node* InsertWord(Node *head , char* target)
{
    Node *walker = NULL;
    Node *new = (Node*) malloc(sizeof(Node));

    strcpy(new->word, target);
    new->count = 1;
    new->next = NULL;

    if( head == NULL )
        head = new;
    
    else
    {
        walker = head;
        while(walker->next != NULL )
            walker = walker->next;
        
        walker->next = new;
    }   
    
    return head;
}



char** findUnCommonWord(Node *head,int *num)
{
    int i=0;
    char **ret=(char *)malloc(sizeof(char *)*200);
    Node* walker = head;

    while(walker != NULL )
    {

        if(  walker->count ==1)
            ret[i++]=walker->word;
        
        walker = walker->next;
    }
    *num=i;
    return ret;
}


void strToLowerCase(char* str)
{
    for(int k = 0; k < strlen(str); k++)
        str[k] = tolower(str[k]);
    
}


char** uncommonFromSentences(char* A, char* B, int* returnSize) {
    int i=0;
    char* token = NULL;   
    char* delim = " ";
    char** Ans =  NULL;
    Node *head   = NULL;
    Node *walker = NULL;
    
    token = strtok(A,delim);  
    while (token != NULL)
    { 
            if( isWordFind(head, token) == false )
            {         
                head = InsertWord(head, token); 
            }

        token = strtok (NULL, delim);
    }   
    
    token = strtok(B,delim);
    
    while (token != NULL)
    { 

            if( isWordFind(head, token) == false )
            {         
                head = InsertWord(head, token); 
            }

        token = strtok (NULL, delim);
    }   
    
    Ans = findUnCommonWord(head,&i);
    *returnSize=i;

    
    return Ans;
}