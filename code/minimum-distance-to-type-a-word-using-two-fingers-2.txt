        public class Solution
        {
            public int MinimumDistance(string word)
            {
                (int x, int y) GetCoords(char c)
                {
                    var linear = c - 'A';
                    return (linear / 6, linear % 6);
                }

                long[,] dp = new long[word.Length + 1, word.Length + 1];

                for (int i = 1; i <= word.Length; i++)
                {
                    int prev = i - 1;
                    if (prev == 0)
                    {
                        dp[i, 0] = 0;
                        dp[0, i] = 0;
                        continue;
                    }

                    var prevCoord = GetCoords(word[prev - 1]);
                    var currCoord = GetCoords(word[i - 1]);
                    var diff = Math.Abs(prevCoord.x - currCoord.x) + Math.Abs(prevCoord.y - currCoord.y);
                    dp[i, 0] = dp[prev, 0] + diff;
                    dp[0, i] = dp[0, prev] + diff;
                }

                checked
                {

                    for (int i = 1; i <= word.Length; i++)
                    {
                        var iCoords = GetCoords(word[i - 1]);

                        for (int j = 1; j <= word.Length; j++)
                        {
                            dp[i, j] = int.MaxValue;

                            if (i == j)
                            {
                                continue;
                            }

                            var jCoords = GetCoords(word[j - 1]);
                            int diff = 0;
                            if (i < j)
                            {
                                var kCoords = GetCoords(word[j - 2]);
                                diff = Math.Abs(kCoords.x - jCoords.x) + Math.Abs(kCoords.y - jCoords.y);
                                dp[i, j] = Math.Min(dp[i, j], dp[i, j - 1] + diff);

                                if(j - i == 1)
                                {
                                    for (int k = 0; k < j; k++)
                                    {
                                        diff = 0;
                                        if (k != 0)
                                        {
                                           kCoords = GetCoords(word[k - 1]);
                                            diff = Math.Abs(kCoords.x - jCoords.x) + Math.Abs(kCoords.y - jCoords.y);
                                        }

                                        dp[i, j] = Math.Min(dp[i, j], dp[i, k] + diff);
                                    }
                                }
                            }
                            else
                            {
                                var kCoords = GetCoords(word[i - 2]);
                                diff = Math.Abs(kCoords.x - iCoords.x) + Math.Abs(kCoords.y - iCoords.y);
                                dp[i, j] = Math.Min(dp[i, j], dp[i - 1, j] + diff);

                                if (i - j == 1)
                                {
                                    for (int k = 0; k < i; k++)
                                    {
                                        diff = 0;
                                        if (k != 0)
                                        {
                                            kCoords = GetCoords(word[k - 1]);
                                            diff = Math.Abs(kCoords.x - iCoords.x) + Math.Abs(kCoords.y - iCoords.y);
                                        }

                                        dp[i, j] = Math.Min(dp[i, j], dp[k, j] + diff);
                                    }
                                }
                            }
                        }
                    }

                    long res = int.MaxValue;

                    for (int i = 0; i <= word.Length; i++)
                    {
                        res = Math.Min(res, dp[i, word.Length]);
                        res = Math.Min(res, dp[word.Length, i]);
                    }

                    return (int)res;
                }
            }
        }