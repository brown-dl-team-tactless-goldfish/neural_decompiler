typedef struct {
    int size;
    int *tree;
} NumArray;


NumArray* numArrayCreate(int* nums, int numsSize) {
    NumArray *array = (NumArray *)calloc(1, sizeof(NumArray));
    array -> size = numsSize;
    array -> tree = (int *)calloc(2*numsSize, sizeof(int));
    
    int i, j;
    for(i=numsSize, j=0; i<2*numsSize; i++, j++){
        array -> tree[i] += nums[j];
    }
    for(i=numsSize-1; i>0; i--){
        array -> tree[i] = array -> tree[2*i] + array -> tree[2*i+1];
    }
    
    return array;
  
}

void numArrayUpdate(NumArray* obj, int pos, int val) {
    pos += obj -> size;
    obj -> tree[pos] = val;
    
    int left, right, middle;
    while(pos > 0){
        left = pos;
        right = pos;
        if(pos % 2 == 0) right = pos + 1;
        else left = pos - 1;
        middle = pos / 2;
        obj -> tree[middle] = obj -> tree[left] + obj -> tree[right];
        pos /= 2;
    }
}

int numArraySumRange(NumArray* obj, int l, int r) {
    l += obj -> size;
    r += obj -> size;
    
    int sum_arr = 0;
    while(l <= r){
        if(l % 2 == 1){
            sum_arr += obj -> tree[l];
            l ++;
        }
        if(r % 2 == 0){
            sum_arr += obj -> tree[r];
            r --;
        }
        
        l /= 2;
        r /= 2;
    }
    
    return sum_arr;    
}

void numArrayFree(NumArray* obj) {
    free(obj -> tree);
    free(obj);
}

/**
 * Your NumArray struct will be instantiated and called as such:
 * NumArray* obj = numArrayCreate(nums, numsSize);
 * numArrayUpdate(obj, i, val);
 
 * int param_2 = numArraySumRange(obj, i, j);
 
 * numArrayFree(obj);
*/