/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int compare(const void *a, const void *b) {
    return *(int*) a - *(int*) b;
}

int val(char c) {
    if (c == 'A') return 0;
    if (c == 'C') return 1;
    if (c == 'G') return 2;
    if (c == 'T') return 3;
    return -1;            // won't happen;
}

void decode(char *s, int val) {
    int i, rem;
    s[10] = '\0';
    for (i = 9; i >= 0; --i) {
        rem = val % 4;
        val /= 4;
        if (rem == 0) s[i] = 'A';
        if (rem == 1) s[i] = 'C';
        if (rem == 2) s[i] = 'G';
        if (rem == 3) s[i] = 'T';
    }
}

char ** findRepeatedDnaSequences(char * s, int* returnSize){
    char **res;
    int stack[100000], sp=0, sl = strlen(s), i, j, k, code = 0;
    int stack2[10000], sp2=0;
    if (strlen(s) < 10) {
        *returnSize = 0;
        return NULL;
    }
    for (i = 0; i < 10; ++i) {
        code = 4*code + val(s[i]);
    }
    stack[sp++] = code;
    for (i = 0; i < sl-10; ++i) {
        code = (code & 0x3ffff) * 4 + val(s[i+10]);
        stack[sp++] = code;
    }
    qsort(stack, sp, sizeof(int), compare);
	for (i = 0; i < sp-1; ++i) {
		if (stack[i] == stack[i+1]) {
			stack2[sp2++] = stack[i];
			for (j = i+1; j<sp && stack[i] == stack[j]; ++j);
			i = j-1;
		}
	}
    res = malloc(sp2 * sizeof(char*));
    for (i = 0; i < sp2; ++i) {
        res[i] = malloc(11 * sizeof(char));
        decode(res[i], stack2[i]);
    }
    *returnSize = sp2;
    return res;
}
