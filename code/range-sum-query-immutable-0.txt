/*
    Used Prefix sum for the problem. For the array that is provied as an input, each element in the allocated array must be the sum of previous elements inclusive. 
*/

typedef struct {
    int* a;
} NumArray;


NumArray* numArrayCreate(int* nums, int numsSize) {
    NumArray* n = (NumArray*) malloc(sizeof(NumArray));
    n->a = (int*) malloc (sizeof(int)*numsSize);
    
    for (int i = 0; i < numsSize; i++) {
        if (i == 0)
            n->a[i] = nums[i];
        else
            n->a[i] = nums[i] + n->a[i-1];
    }
    return n;
}

int numArraySumRange(NumArray* obj, int left, int right) {
    
    if (left == 0)
        return obj->a[right];
    return (obj->a[right]) - (obj->a[left-1]);
}

void numArrayFree(NumArray* obj) {
    free(obj->a);
    free(obj);
}

/**
 * Your NumArray struct will be instantiated and called as such:
 * NumArray* obj = numArrayCreate(nums, numsSize);
 * int param_1 = numArraySumRange(obj, left, right);
 
 * numArrayFree(obj);
*/