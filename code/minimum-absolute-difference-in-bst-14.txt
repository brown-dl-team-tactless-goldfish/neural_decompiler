int find_max_left(struct TreeNode* root) {
    if (NULL == root)
        return 10000;  // max difference
    while (root->right != NULL)
        root = root->right;
    return root->val;
}

int find_min_right(struct TreeNode* root) {
    if (NULL == root)
        return 10000;
    while (root->left != NULL)
        root = root->left;
    return root->val;
}

int getMinimumDifference(struct TreeNode* root) {
    int min_left_val, min_right_val, left_diff = 10000, right_diff = 10000, diff, min_diff;
    // find the max val in left child
    min_left_val = abs(root->val - find_max_left(root->left));
    min_right_val = abs(root->val - find_min_right(root->right));
    diff = min_right_val > min_left_val?  min_left_val: min_right_val;
    if (root->left != NULL)
        left_diff = getMinimumDifference(root->left);
    if (root->right != NULL)
        right_diff = getMinimumDifference(root->right);
    min_diff = right_diff > left_diff? left_diff: right_diff;
    min_diff = min_diff > diff? diff: min_diff;
    return min_diff;
}