class Solution {
public:
    vector<vector<int>> rotateGrid(vector<vector<int>>& grid, int k) {
        int m = grid.size(), n = grid[0].size();
        int M = m, N = n;
        vector<vector<int>> ret(m, vector<int>(n));
        int dir[][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}}; 
        auto next = [&](int& x, int& y, int& d, int level) {
            x += dir[d][0];
            y += dir[d][1];
            if((x == m - level - 1 and y == level) or (x == m-level-1 and y == n-level-1) or
               (x == level and y == n-level-1) or (y == level and x == level)) {
                ++d;
                d %= 4;
            }    
        };
		int level = 0;
        while(M > 0  and N > 0) { 
            int circle = (M+N)*2-4;
            int s = k % circle;
            int x = level, y = level;
            int d = 0;
            while(s--) {
                next(x, y, d, level);  
            }
            int sx = level, sy = level, sd = 0;
            while(circle--) {
                ret[x][y] = grid[sx][sy];
                next(x, y, d, level);
                next(sx, sy, sd, level);
            }
            ++level;
            M -= 2;
            N -= 2;
        }
        return ret;
    }
};