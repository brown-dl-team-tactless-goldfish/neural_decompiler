class Solution {
public:
    int minSpaceWastedKResizing(vector<int>& nums, int k) {
        int n=nums.size();
        int sum[n]; //prefix sum
        sum[0]=nums[0];
        for(int i=1;i<n;++i)
            sum[i]=sum[i-1]+nums[i];
        int dp[n][k+1]; //dp[i][j]=space waste for array [0,i] with j resize operations
        fill(&dp[0][0],&dp[0][0]+n*(k+1),INT_MAX);
        for(int r=0;r<n;++r){
            int M=0;    //max from l to r
            for(int l=r;l>=0;--l){
                M=max(M,nums[l]);
                int temp=M*(r-l+1)-(sum[r]-(l>0?sum[l-1]:0));   //space waste from l to r
                for(int i=1;i<=k;++i)
                    dp[r][i]=min(dp[r][i],temp+(l>0?dp[l-1][i-1]:0));
            }
            dp[r][0]=M*(r+1)-sum[r];
        }
        return *min_element(&dp[n-1][0],&dp[n-1][k]+1);
    }
};