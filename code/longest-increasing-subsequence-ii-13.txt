class Solution {
public:
    const int n = 100001;
    int nums[4*100001] = {0};
    void update(int n,int id,int val,int l,int h){
        if(l<=h){
            if(l==h){
                if(id==l) nums[n] = max(nums[n],val);
                return;
            }
            else{
                int mid = (l+h)/2;
                if(id>=l && id<=mid) update(2*n+1,id,val,l,mid);
                else update(2*n+2,id,val,mid+1,h);
                nums[n] = max(nums[2*n+1],nums[2*n+2]);
            }
        }
    }
    int find(int i,int j,int n,int l,int h){
        if(l<=h){
            if(i<=l && j>=h) return nums[n];
            if((j<l || h<i) || l==h) return 0;
            int mid = (l+h)/2;
            int a = find(i,j,2*n+1,l,mid);
            int b = find(i,j,2*n+2,mid+1,h);
            return max(a,b);
        }
        else return 0;
    }
    int lengthOfLIS(vector<int>& arr, int k) {
        int re = 0;
        for(int i = 0; i<arr.size();++i){
            int x = max(1,arr[i]-k);
            int k = find(x,arr[i]-1,0,0,n);
            re = max(re,k+1);
            update(0,arr[i],k+1,0,n);
        }
        return re;
    }
};