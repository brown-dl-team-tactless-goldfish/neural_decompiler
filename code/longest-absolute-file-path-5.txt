typedef struct {
    int level;
    int len;
    UT_hash_handle hh;
} hElem;

int lengthLongestPath(char * input){
    if(strlen(input) == 1) return 0;
    hElem *map = NULL, *t, *nt;
    char *saveptr;
    int longestLen = 0, level = 0, nextLevel = 0, len = 0, tokLen = 0;
    bool tabFound = false;
    
    // Add a dummy root level 0 and its length as 0
    t = calloc(sizeof(hElem), 1);
    t->level = 0;  t->len = 0;
    HASH_ADD_INT(map, level, t);
    
    for(char *tok = strtok_r(input, "\n", &saveptr); tok; tok = strtok_r(NULL, "\n", &saveptr)) {
        tokLen = strlen(tok);
        char *ret = strrchr(tok, '\t');
    
        if(!ret) {
            // first dir/file is at level is 1
            level = 1;
            t = calloc(sizeof(hElem), 1);
            t->level = level; t->len = tokLen + 1;  // include appended '/' in len
            
            HASH_ADD_INT(map, level, t);
            
        } else {
            tabFound = true;
            level = ret - tok + 1;
            len = strlen(ret+1);
            
            // We need to check and update current level and next level in hash map
            // Initialize these levels with default lengths if not present
            HASH_FIND_INT(map, &level, t);
            if(!t) {
                t = calloc(sizeof(hElem), 1);
                t->level = level;  t->len = 0;
                HASH_ADD_INT(map, level, t);
            }
            
            nextLevel = level + 1;
            HASH_FIND_INT(map, &nextLevel, nt);
            if(!nt) {
                nt = calloc(sizeof(hElem), 1);
                nt->level = level + 1;  nt->len = t->len + len + 1;
                HASH_ADD_INT(map, level, nt);
            }
            
            if(strchr(tok, '.') != NULL) 
                longestLen = fmax(longestLen, t->len + len);             
            else 
                nt->len = t->len + len + 1;            
        }
    }
    
    // Only file/files found in path. No dir/subdirs found in path
    // In this case all files with '/' will be appended in level 1
    // Strip off last '/' and return its length
    if(level == 1)
        longestLen = fmax(longestLen, t->len - 1);
    
    return longestLen;
}