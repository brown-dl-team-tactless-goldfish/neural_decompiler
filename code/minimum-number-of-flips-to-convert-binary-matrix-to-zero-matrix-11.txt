class Solution {
public:
    string convertToString(vector<vector<int>> m)
    {
        string ans = "";
        for (int i=0; i<m.size(); i++)
        {
            for (int j=0; j<m[0].size(); j++)
            {
                ans += to_string(m[i][j]);
            }
        }
        //cout<<ans<<endl;
        return ans;
    }
    
    vector<vector<int>> flip(vector<vector<int>> mat, int i, int j)
    {
        vector<vector<int>> dir = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        int r = mat.size(), c = mat[0].size();
        
        mat[i][j] ^= 1;
        
        for(auto d :dir)
        {
            int x = i + d[0], y = j+d[1];
            if (x<0 || x >= r || y < 0 || y >= c)
                continue;
            mat[x][y] ^= 1;
        }
        return mat;
    }
    
    int getSum(vector<vector<int>> mat)
    {
        int sum = 0;
        for (int i=0; i<mat.size(); i++)
        {
            for (int j=0; j<mat[0].size(); j++)
                sum += mat[i][j];
        }
        //cout<<sum<<endl;
        return sum;
    }
    
    int minFlips(vector<vector<int>>& mat) {
        
        unordered_set<string> visited;
        int m = mat.size(), n = mat[0].size();
        queue<vector<vector<int>>> q;
        q.push(mat);
        
        int step = 0;
        
        while(!q.empty())
        {
            int size = q.size();
            for (int i=0; i<size; i++)
            {
                vector<vector<int>> node = q.front();
                q.pop();
                if (getSum(node) == 0)
                    return step;
                for (int j=0; j<m; j++)
                {
                    for (int k=0; k<n; k++)
                    {
                        vector<vector<int>> newNode = flip(node, j, k);
                        string hashNode = convertToString(newNode);
                        
                        if (visited.find(hashNode) != visited.end())
                            continue;
                        
                        q.push(newNode);
                        visited.insert(hashNode);
                    }
                }
            }
            step++;
        }
        return -1;
    }
};