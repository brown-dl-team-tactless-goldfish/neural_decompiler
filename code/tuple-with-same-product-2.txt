class Solution {
public:
    int tupleSameProduct(vector<int>& nums) {
        // Count the unique product and its frequency, store the value in a hash table.
        // Then for each unique product, check its frequency, saying F and Q. Q is the number of pairs (i, j) in nums
        // array such that num[i] * nums[j] == F. For each a * b = c * d, we have 8 permutations.
        // Since we also have Q * (Q - 1) / 2 number of pairs combination, the total number of different tuples
        // for F will be (Q - 1) * Q / 2 * 8. We add the number for each unique product and return the result.
        int res = 0, size = nums.size();
        unordered_map<int, int> productFreq;
        for (int i = 0; i < size; ++i)
        {
            for (int j = i + 1; j < size; ++j)
            {
                ++productFreq[nums[i] * nums[j]];
            }
        }
        
        for (const auto& pair : productFreq)
        {
            int q = pair.second;
            res += q * (q - 1) * 4;
        }
        
        return res;
    }
};