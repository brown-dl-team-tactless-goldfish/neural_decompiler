class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> result(queries.size());
        unordered_map<string, unordered_map<string, double>> map;
        for(int i = 0; i < equations.size(); i++){
            string first = equations[i][0], second = equations[i][1];
            map[first][second] = values[i];
            map[second][first] = 1.0 / values[i];      
        }
        
        for(int i = 0; i < queries.size(); i++){
            string a = queries[i][0], b = queries[i][1];
            if(!map.count(a) || !map.count(b)){
                result[i] = -1.0;
            }
            else{
                unordered_set<string> visited;
                result[i] = dfs(a, b, visited, map);
            }
        }
        return result;
    }
    
private: 
      double dfs(string& a, string& b, unordered_set<string>& visited, unordered_map<string, unordered_map<string, double>>& map){
         if(a == b) return 1.0;
         visited.insert(a);
         for(auto& neigbor : map[a]){
             string c = neigbor.first;
             if(!visited.count(c)){
                 double d = dfs(c, b, visited, map);
                 if(d > 0) return d * map[a][c];
            }
         }
        return -1.0;
    }
};