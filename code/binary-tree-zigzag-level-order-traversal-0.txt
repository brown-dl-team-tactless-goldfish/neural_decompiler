int depth(struct TreeNode* root){
    if(root == NULL)
        return 0;
    else
        return 1 + fmax( depth(root->left), depth(root->right) );
}
int** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    int dep = depth(root);
    if(dep == 0){
        *returnSize = 0;
        return NULL;
    }
    *returnColumnSizes = malloc(dep * sizeof(int));
    int** ans = malloc(dep * sizeof(int*));
    int ans_idx = 0;
    struct TreeNode** queue0 = malloc(1000 * sizeof(struct TreeNode* ));
    struct TreeNode** queue1 = malloc(1000 * sizeof(struct TreeNode* ));
    int idx0 = 0, idx1 = 0;
    queue0[idx0] = root;
    idx0 = 1;
    while(idx0 || idx1){
        if(idx0){
            ans[ans_idx] = malloc(idx0 * sizeof(int));
            returnColumnSizes[0][ans_idx] = idx0;
            for(int i = idx0-1; i >=0; i--){
                ans[ans_idx][idx0-1-i] = queue0[i]->val;    
                if(queue0[i]->left){
                    queue1[idx1] = queue0[i]->left;
                    idx1++;
                }
                if(queue0[i]->right){
                    queue1[idx1] = queue0[i]->right;
                    idx1++;
                }
            }
            ans_idx++;
            idx0 = 0;    
        }
        else{
            ans[ans_idx] = malloc(idx1 * sizeof(int));
            returnColumnSizes[0][ans_idx] = idx1;
            for(int i = idx1-1; i >=0; i--){
                ans[ans_idx][idx1-1-i] = queue1[i]->val;    
                if(queue1[i]->right){
                    queue0[idx0] = queue1[i]->right;
                    idx0++;
                }
                if(queue1[i]->left){
                    queue0[idx0] = queue1[i]->left;
                    idx0++;
                }
            }
            ans_idx++;
            idx1 = 0;
        }
    }
    *returnSize = dep;
    return ans;
}