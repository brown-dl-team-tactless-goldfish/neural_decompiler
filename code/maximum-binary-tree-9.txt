/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // returns the position of the maximum number in the subarray within
    // the indcies l to r (inclusive)
    int maxPos(vector<int>&nums, int l, int r){
        if(l>r)return -1;
        if(r>=nums.size())return -1;
        if(l==r)return l;
        int mx = nums[l];
        int ans = l;
        for(int i = l; i<=r; i++){
            if(mx<nums[i]){
                ans = i;
                mx = nums[i];
            }
        }
        return ans;
    }
    TreeNode* createNode(vector<int>&nums, int l, int r){
        int val = maxPos(nums, l, r);
        TreeNode* root = NULL;
        if(val!=-1)
            root = new TreeNode(nums[val]);
        return root;
    }
    TreeNode* constructMax(vector<int>&nums, int l, int r){
        if(l>r)return NULL;
        if(r >= nums.size())return NULL;
        if(l<0)return NULL;
        int pos = maxPos(nums, l, r);
        if(pos == -1)return NULL;
        TreeNode*root = new TreeNode(nums[pos]);
        root->left = constructMax(nums, l, pos-1);
        root->right = constructMax(nums, pos+1, r);
        return root;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        TreeNode*root = NULL;
        if(nums.size() == 0)return root;
        if(nums.size() == 1){
            root = new TreeNode(nums.back());
            return root;
        }else{
            int l = 0, r = nums.size()-1;
            root = constructMax(nums, l, r);
        }
        return root;
    }
};