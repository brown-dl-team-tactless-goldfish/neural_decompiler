class Solution {
public:
    vector<vector<int>>adj;
    int n,k;
    int dp[33000];
    int SB(int x)
    {
        int res=0;
        while(x)
        {
            res++;
            x=x&(x-1);
        }
        return res;
    }
    int get(int mask)
    {
        if(mask==((1<<n)-1))
            return 0;
        if(dp[mask]!=-1)
            return dp[mask];
        vector<int>indeg(n,0);
        for(int i=0;i<n;i++)
        {
            int bit=1&(mask>>i);
            if(!bit)
            {
                for(auto j:adj[i])
                    indeg[j]++;
            }
        }
        vector<int>deg0;
        for(int i=0;i<n;i++)
        {
            int bit=1&(mask>>i);
            if(!bit && indeg[i]==0)
                deg0.push_back(i);
        }
        int cnt=deg0.size(),res=INT_MAX;
        if(cnt<=k)
        {
            int mask2=mask;
            for(auto i:deg0)
                mask2|=(1<<i);
            res=min(res,1+get(mask2));
        }
        else
        {
            int N=1<<cnt;
            for(int j=0;j<N;j++)
            {
                int set_bit=SB(j);
                if(set_bit==k)
                {
                    int mask2=mask;
                    for(int i=0;i<cnt;i++)
                    {
                        int bit=1&(j>>i);
                        if(bit)
                            mask2|=(1<<(deg0[i]));
                    }
                    res=min(res,1+get(mask2));
                }
            }
        }
        return dp[mask]=res;
    }
    int minNumberOfSemesters(int N, vector<vector<int>>&d, int K) 
    {
        n=N,k=K;
        adj.resize(n);
        memset(dp,-1,sizeof(dp));
        for(auto v:d)
            adj[v[0]-1].push_back(v[1]-1);
        return get(0);
    }
};