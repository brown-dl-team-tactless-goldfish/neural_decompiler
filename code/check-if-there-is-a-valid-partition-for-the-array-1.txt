bool valid_equal(int* nums, int numsSize,int *dp,int dpl);
bool valid_increase(int* nums, int numsSize,int *dp,int dpl);
bool validPartition_memo(int* nums, int numsSize,int *dp,int dpl);
bool valid_equal(int* nums, int numsSize,int *dp,int dpl){
    if(numsSize<3)
    return (numsSize==0)&&true
        ||(numsSize==1)&&false
        ||(numsSize==2)&&(nums[0]==nums[1]);
    int count = 1;
    bool isincrease = false;
    for(int i=1;i<numsSize;i++){
        if(nums[i]==nums[i-1])
            count++;
        else{
            if(nums[i]-nums[i-1]==1)
                isincrease = true;
            break;
        }
    }
    if(count==numsSize){
        dp[dpl-numsSize] =true;
        return true;
    }
    if(count==1){
        dp[dpl-numsSize] =false;
        return false;
    }
        
    if(isincrease==true){
        bool ret =validPartition_memo(nums+count,numsSize-count,dp,dpl)
            ||(count-1>=2 && validPartition_memo(nums+count-1,numsSize-count+1,dp,dpl));
        dp[dpl-numsSize] = ret;
        return ret;
    }
    else{
        bool ret = validPartition_memo(nums+count,numsSize-count,dp,dpl);
        dp[dpl-numsSize] = ret;
        return ret;
    }
}

bool valid_increase(int* nums, int numsSize,int *dp,int dpl){
    if(numsSize<3)
    return (numsSize==0)&&true
        ||(numsSize==1)&&false
        ||(numsSize==2)&&(nums[0]==nums[1]);
    int count = 1;
    bool isequal = false;
    for(int i=1;i<numsSize;i++){
        if(nums[i]-nums[i-1]==1)
            count++;
        else{
            if(nums[i]-nums[i-1]==0)
                isequal = true;
            break;
        }
    }
    if(count<3){
        dp[dpl-numsSize] = false;
        return false;
    }
    if(count==numsSize && count%3==0){
        dp[dpl-numsSize] = true;
        return true;
    }
    if(count%3==0){
        bool ret = validPartition_memo(nums+count,numsSize-count,dp,dpl);
        dp[dpl-numsSize] = ret;
        return ret;
    }
    else if(count%3==1 && isequal==true){
        bool ret = validPartition_memo(nums+count-1,numsSize-count+1,dp,dpl);
        dp[dpl-numsSize] = ret;
        return ret;
    }
    else{
        dp[dpl-numsSize] = false;
        return false;    
    }
}

bool validPartition_memo(int* nums, int numsSize,int *dp,int dpl){
    if(numsSize<3)
        return (numsSize==0)&&true
            ||(numsSize==1)&&false
            ||(numsSize==2)&&(nums[0]==nums[1]);
    if(dp[dpl-numsSize]!=2)
        return (bool)dp[dpl-numsSize];
    if(nums[0]==nums[1]){
        bool ret = valid_equal(nums,numsSize,dp,dpl);
        dp[dpl-numsSize] = ret;
        return ret;
    }
    else{
        bool ret = valid_increase(nums,numsSize,dp,dpl);
        dp[dpl-numsSize] = ret;
        return ret;
    }    
}
bool validPartition(int* nums, int numsSize){
    int *dp = malloc(numsSize*sizeof(int));
    for(int i=0;i<numsSize;i++)
        dp[i] = 2;
    return validPartition_memo(nums,numsSize,dp,numsSize);
}