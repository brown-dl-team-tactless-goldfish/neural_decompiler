struct MinListNode {
    int val;
    int minSoFar;
    struct MinListNode* next;
    struct MinListNode* last;
};

typedef struct {
    struct MinListNode* tail;
} MinStack;

void minStackCreate(MinStack *stack, int maxSize) {
    stack->tail = NULL;
}

void minStackPush(MinStack *stack, int element) {
    struct MinListNode* newNode = malloc(sizeof(struct MinListNode));
    newNode->val = element;
    newNode->next = NULL;
    newNode->last = stack->tail;
    if (!stack->tail) {
        newNode->minSoFar = element;
        stack->tail = newNode;
    }
    else {
        int min = stack->tail->minSoFar;
        stack->tail->next = newNode;
        stack->tail = newNode;
        newNode->minSoFar = min;
        if (element < min) {
            newNode->minSoFar = element;
        }
    }
}

void minStackPop(MinStack *stack) {
    struct MinListNode* freeMe = stack->tail;
    stack->tail = stack->tail->last;
}

int minStackTop(MinStack *stack) {
    return stack->tail->val;
}

int minStackGetMin(MinStack *stack) {
    return stack->tail->minSoFar;
}

void minStackDestroy(MinStack *stack) {
    while (stack->tail) {
        minStackPop(stack);
    }
}