#define max(a,b) ((a) > (b) ? (a) : (b))
#define lower_limit(a,b) if((a) > b) (a) = (b)

int calculateMinimumHP(int** dungeon, int dungeonSize, int* dungeonColSize){
    int w1 = *dungeonColSize - 1;
    int w2 = *dungeonColSize - 2;

    int y = dungeonSize - 1;
    // the right-bottom room
    lower_limit(dungeon[y][w1], 0);
    // Bottom row, right to left
    for(int x = w2; x >= 0; x--){
        dungeon[y][x] += dungeon[y][x+1];
        lower_limit(dungeon[y][x], 0);
    }
    // Other rows (bottom to top)
    for(int y = dungeonSize - 2; y >= 0; y--){
        // right room of the row
        dungeon[y][w1] += dungeon[y+1][w1];
        lower_limit(dungeon[y][w1], 0);
        // other room (right to left)
        for(int x = w2; x >= 0; x--){
            dungeon[y][x] += max(dungeon[y][x+1], dungeon[y+1][x]);
            lower_limit(dungeon[y][x], 0);
        }
    }
    return 1 - dungeon[0][0];
    
    // Time complexity:  O(N*M)
    // Space complexity: O(1) (in place)
}