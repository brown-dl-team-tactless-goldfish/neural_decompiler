const int xdim = 10015;
const int ydim = 10001;
const int c = 1e9 + 7;

class Solution {
    
    static vector<int> primes;
    static int a[xdim][ydim];
    
public:
    
    void findprimes() {
        vector<int> v(10001, 1);
        for(int i = 2; i <= 10000; i++) {
            if(v[i]) {
                for(int j = i * i; j <= 10000; j += i) {
                    v[j] = 0;
                }
                primes.push_back(i);
            }
        }
    }
    
    int getij(int i, int j){
        if(i < j) return 0;
        if(i == j) return 1;
        if(j == 0) a[i][j] = 1;
        if(j == 1) a[i][j] = i;
        if(a[i][j]) return a[i][j];
        return a[i][j] = (1ll * getij(i-1,j) + getij(i-1,j-1)) % c;
    }
    
    vector<int> waysToFillArray(vector<vector<int>>& queries) {
        
        if(primes.empty()) findprimes();
        
        vector<int> res;
        for(auto& t : queries) {
            vector<int> exp;
            for(int j : primes) {
                if((t[1] % j) == 0) {
                    exp.push_back(0);
                    while((t[1] % j) == 0) {
                        exp.back()++;
                        t[1] /= j;
                    }
                }else if(j > t[1]) break;
            }
            long long cur = 1;
            for(int j : exp) {
                cur *= getij(j + t[0] - 1, t[0] - 1);
                cur %= c;
            }
            res.push_back(cur);
        }
        return res;
    }
};

vector<int> Solution::primes;
int Solution::a[xdim][ydim]{};