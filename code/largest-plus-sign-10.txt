public class Solution {
    public int OrderOfLargestPlusSign(int n, int[][] mines) {
        
        // build the grid
        int[,] grid = new int[n,n];
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                grid[i,j] = 1;
            }
        }
        
        foreach(var mine in mines)
        {
            grid[mine[0],mine[1]] = 0;
        }
        
        // build the dp array. dp[i,j]: minimal length of the four arms starting from (i,j)
        int[,] dp = new int[n,n];
        for(int row = 0; row < n; row++)
        {
            // left -> right
            int maxLength = 0;
            for(int col = 0; col < n; col++)
            {
                maxLength = grid[row,col] == 0? 0 : maxLength + 1;
                dp[row,col] = maxLength;
            }
            
            // right -> left
            maxLength = 0;
            {
                for(int col = n - 1; col >= 0; col--)
                {
                    maxLength = grid[row,col] == 0? 0 : maxLength + 1;
                    dp[row,col] = Math.Min(dp[row,col], maxLength);
                }
            }
        }
        
        for(int col = 0; col < n; col++)
        {
            // up -> down
            int maxLength = 0;
            for(int row = 0; row < n; row++)
            {
                maxLength = grid[row,col] == 0? 0 : maxLength + 1;
                dp[row,col] = Math.Min(dp[row,col], maxLength);
            }
            
            // down -> up
            maxLength = 0;
            for(int row = n - 1; row >= 0; row--)
            {
                maxLength = grid[row,col] == 0? 0 : maxLength + 1;
                dp[row,col] = Math.Min(dp[row,col], maxLength);
            }
        }
        
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                res = Math.Max(res, dp[i,j]);
            }
        }
        
        return res;
    }
}