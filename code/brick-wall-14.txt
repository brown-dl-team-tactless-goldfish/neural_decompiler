public class Solution {
    public int LeastBricks(IList<IList<int>> wall) {
        if (null == wall || wall.Count == 0) return 0;
        Dictionary<int, int> map = new Dictionary<int, int>();
        int maxEdges = 0;
        for (int r = 0; r < wall.Count; r++)
        {
            int length = 0;
            IList<int> currRow = wall[r];
            for (int c = 0; c < currRow.Count - 1; c++)
            {
                int currBrick = currRow[c];
                length += currBrick;
                if (map.ContainsKey(length))
                    map[length]++;
                else
                    map[length] = 1;
                maxEdges = Math.Max(maxEdges, map[length]);
            }
        }
        return wall.Count - maxEdges;
    }
}