class Solution {
public:
    int primePalindrome(int n) {
        if (n<12){
            for (int i=n; i<12; i++){
                if (prime(i)) return i;
            }
        }
        vector<int> origin = num2vec(n);
        int l = origin.size();
        int i = l/2-1;
        bool changed = false;
        for (int i=0; i<l/2; i++){
            if (origin[l-1-i]>origin[i]){
                origin[i] = origin[l-1-i];
                changed = true;
            }else{
                origin[l-1-i] = origin[i];
            }
        }
        if (l%2==1){
            origin[l/2] = 0;
        }
        int res = vec2num(origin);
        while (!prime(res)){
            next(origin, l);
            res = vec2num(origin);
        }
        return res;
    }
    
    int findfirst(vector<int> res, int l){
        bool changed = false;
        for (int i=l/2-1; i>=0; i--){
            if (res[i]<res[l-1-i]){
                if (changed){
                    res[l-1-i] = res[i];
                }else{
                    res[i] = res[l-i-1];
                    changed = true;   
                }
            }else if (changed){
                
            }
        }
    }
    
    void next(vector<int>& res, int& l){
        for (int i=l/2-1; i>=0; i--){
            if (res[i]==9){
                res[i] = 0; res[l-i-1] = 0;
            }else{
                res[i]++; res[l-i-1]++; return;
            }
        }
        res[l/2] = 0;
        res.push_back(1);
        res[0] = 1;
        l++;
    }
    
    bool prime(int n){
        for (int i=2; i<=sqrt(n); i++){
            if (n%i==0) return false;
        }
        return true;
    }
    
    vector<int> num2vec(int n){
        vector<int> res;
        while (n>0){
            res.push_back(n%10);
            n /= 10;
        }
        reverse(res.begin(), res.end());
        return res;
    }
    
    int vec2num(vector<int> res){
        int n = 0;
        for (int r:res){
            n = 10*n + r;
        }
        return n;
    }
};