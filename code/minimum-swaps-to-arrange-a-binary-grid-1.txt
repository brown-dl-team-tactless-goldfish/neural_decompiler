class Solution {
public:
    #define vi vector<int>
    #define vvi vector<vi>
    
    void printGrid(vvi grid){
        cout<<"Grid : \n";
        for(auto ele:grid){
            for(auto every:ele){
                cout<<every<<" ";
            }
            cout<<endl;
            
        }
        
    }
    
    int minSwaps(vector<vector<int>>& grid) {
        
        int i=0;
        
        int R = grid.size();
        int C = grid[0].size();
        
        int ans=0;
        
        // iterate over each row to find best possible row for any index i
        // NOTE: best possible row is row with max suffix zeros >= (C-i-1) and with minimum index (I)
        while(i<R){
            
            int I =i;
            int ind = INT_MAX;
            
            // iterate throw all rows >=i to count suffix 0's following above stated criteria
            while(I<R){
                
                int J = C-1;
                int count = 0;
                
                // count suffix 0s    
                while(J>=0&&grid[I][J]==0){
                    count++;    
                    J--;
                }
                
                // take ind to be that I where suffix 0's count >= (C-i-1)
                if(count>=C-i-1){
                    ind = min(ind,I);
                }
                I++;
            }
            
            if(ind!=INT_MAX){
                
                // perform swapping of of every j & j+1 rows till j reaches i
                int j = ind-1;
                while(j>=i){

                    int l = 0;
                    while(l<C){
                        int t = grid[j][l];
                        grid[j][l] = grid[j+1][l];
                        grid[j+1][l]=t;
                        l++;
                    }

                    ans++;
                    j--;
                }
            }
            else return -1; // this is edge case where best possible row to be swapped for row i is never found in grid so return -1
            
            i++;
        }
        
        return ans;
        
    }
};