class Solution {
public:
    int takeCharacters(string s, int k) {
        if(k == 0){
            return 0;
        }
        vector<int> dp_a(k+1, -1);
        vector<int> dp_b(k+1, -1);
        vector<int> dp_c(k+1, -1);
        dp_a[0] = s.size();
        dp_b[0] = s.size();
        dp_c[0] = s.size();

        unordered_map<int, int> map; 
        for(int i=s.size()-1;i>=0;i--){
            int key = s[i] - 'a';
            map[key]++;
            if(map[key]>k){
                continue;
            }
            if(key == 0){
                dp_a[map[key]] = i;
            }else if(key == 1){
                dp_b[map[key]] = i;
            }else if(key == 2){
                dp_c[map[key]] = i;
            }
        }

        if(dp_a[k] == -1 || dp_b[k] == -1 || dp_c[k] == -1){
            return -1;
        }


        unordered_map<int, int> counter;
        counter[0] = 0;
        counter[1] = 0;
        counter[2] = 0;

        int min_index = min(dp_a[k], min(dp_c[k], dp_b[k]));
        int res = s.size() - min_index;

        for(int i=0;i<s.size();i++){
            char key = s[i] - 'a';
            counter[key]++;
            
            int rest_a = counter[0]>k?0:k - counter[0];
            int rest_b = counter[1]>k?0:k - counter[1];
            int rest_c = counter[2]>k?0:k - counter[2];

            int min_index = min(dp_a[rest_a], min(dp_b[rest_b], dp_c[rest_c]));

            if(min_index<=i){
                continue;
            }
            
            int needed_len = s.size() - min_index + i + 1;

            
            res = min(res, needed_len);
        }

        return res;
    
    
    }


};