class Solution {
public:
    bool static cmp(vector<int>&a,vector<int>&b)
    {
        return a[2]<b[2];
    }
    //DSU start
    vector<int>parent;
    int find(int x)
    {
        if(x!=parent[x])
            parent[x]=find(parent[x]);
        return parent[x];
    }
    void Union(int x,int y)
    {
        parent[y]=x;
    }
    //DSU end
    vector<int> findAllPeople(int n, vector<vector<int>>& meets, int first) 
    {
        parent.resize(n);
        for(int i=0;i<n;i++)
            parent[i]=i;
        
        sort(meets.begin(),meets.end(),cmp);
        Union(0,first);
        int m=meets.size();
        vector<int>v;
        for(int i=0;i<m;)
        {
            int time=meets[i][2];
            v.clear();
            for(;i<m && meets[i][2]==time;i++)
            {
                v.push_back(meets[i][0]);
                v.push_back(meets[i][1]);
                int px=find(meets[i][0]),py=find(meets[i][1]);
                Union(px,py);   //Add all edges to graph
            }
            for(auto x:v)   //check for validity
            {
                int px=find(x),p0=find(0);
                if(px!=p0)   // If not valid then remove
                    parent[x]=x;
            }
        }
        vector<int>res{0};
        for(int i=1;i<n;i++)
        {
            int px=find(i),p0=find(0);
            if(px==p0)
                res.push_back(i);
        }
        return res;
    }
};