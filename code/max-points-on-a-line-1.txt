#include <stdlib.h>
#include <stdio.h>
#include <float.h>
#include <math.h>
#include <string.h>

/*
 ! 处理浮点数的比较和hash函数真是很麻烦
 ! 如果能设计出更好的hash函数性能能由提高
 ! 由于hash函数的问题，出现了编译出来的程序不一致的问题
 ! 在我的机器上能很好执行的却不能在leetcode的服务器上正确执行
 */

#define __HASH_SIZE     997
#define __DELTA         1e-10

#define __max(a, b)   ((a) > (b) ? (a) : (b))

#define define_map(keyarr, valarr, initkey, initval)    \
float (keyarr)[__HASH_SIZE];                            \
int (valarr)[__HASH_SIZE];                              \
int __i;                                                \
for(__i = 0; __i < __HASH_SIZE; __i++) {                \
    (keyarr)[__i] = (initkey);                          \
    (valarr)[__i] = (initval);                          \
}

#define clear_map(keyarr, valarr, initkey, initval)     \
do {                                                    \
    int __i;                                            \
    for(__i = 0; __i < __HASH_SIZE; __i++) {            \
        (keyarr)[__i] = (initkey);                      \
        (valarr)[__i] = (initval);                      \
    }                                                   \
} while(0)


#define float_eq(f1, f2) (fabs((float)(f1) - (float)(f2)) < __DELTA)

#define map_hash(k, karr, initkey) ({           \
    int __k = ((int)(k)) & __INT_MAX__;         \
    int __v = __k % __HASH_SIZE;                \
    while (!float_eq((karr)[__v], (initkey)) && \
           !float_eq((karr)[__v], (k))) {       \
        __v = (__v + 1) % __HASH_SIZE;          \
    }                                           \
    __v;                                        \
})

#define inst_map(k, v, karr, varr, initkey)  \
do {                                         \
    int __k = map_hash(k, karr, initkey);    \
    (karr)[__k] = (k);                       \
    (varr)[__k] = (v);                       \
} while(0)

#define getv_map(k, karr, varr, initkey) ({  \
    int __k = map_hash(k, karr, initkey);    \
    int __v = (varr)[__k];                   \
    __v;                                     \
})


#define slope(p1, p2) ({                            \
    float __xsub = (p1)[0] - (p2)[0];               \
    float __ysub = (p1)[1] - (p2)[1];               \
    float __sl;                                     \
    if(float_eq(__xsub, 0.0)) __sl = __INT_MAX__;   \
    else __sl = __ysub / __xsub;                    \
    __sl;                                           \
})

int
maxPoints(int** points, int pointsSize, int* pointsColSize)
{
    define_map(karr, varr, FLT_MAX, 0);
    int     i, j, k;
    int     result = 0;
    int     *p1, *p2;
    float   sl;
    int     hash;

    for(i = 0; i < pointsSize; i++) {
        p1 = points[i];
        for(j = 0; j < pointsSize; j++) {
            if(i == j) continue;
            p2 = points[j];
            sl = slope(p1, p2);
            hash = map_hash(sl, karr, FLT_MAX);
            karr[hash] = sl;
            varr[hash]++;
        }
        for(k = 0; k < __HASH_SIZE; k++) {
            if(varr[k])
            result = __max(result, varr[k]);
            karr[k] = FLT_MAX;
            varr[k] = 0;
        }
        
    }

    return ++result;
}