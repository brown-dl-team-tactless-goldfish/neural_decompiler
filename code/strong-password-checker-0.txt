#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int strongPasswordChecker(char * password){
    int length = strlen(password);
    int offences1 = 0;
    int offences2 = 0;
    int offences = 0;
    
    int r = 0;
    char prev = '\n';
    char curr;
    int repC = 1;
    int delrep[3] = {0};
    int maxrep = 0;
    
    for(int i = 0; i < length; i++) {
        curr = password[i];
        if(curr == prev) {
            repC++;
        } else {
            if(repC >= 3) {
                delrep[repC%3]++;
            }
            repC = 1;
            prev = curr;
        }
        if(repC % 3 == 0) {
            r++;
        }
        if(repC > 3 && repC % 3 == 1) {
            delrep[2]++;
        }
    }
    if(repC >= 3) {
        delrep[repC%3]++;
    }
    
    
    int v = 0;
    int vo = 0;
    int lc = 0;
    int uc = 0;
    int dc = 0;
    for(int i = 0; i < length; i++) {
        if(lc == 0 && islower(password[i]) != 0) {
            v++;
            lc = 1;
        }
        if(uc == 0 && isupper(password[i]) != 0) {
            v++;
            uc = 1;
        }
        if(dc == 0 && isdigit(password[i]) != 0) {
            v++;
            dc = 1;
        }
    }
    
    if(v < 3) {
        offences2 += 3 - v;
        vo += 3 - v;
        if(length == 5 && v == 1) {
            offences1++;
        }
    }

    if(length < 6 || length > 20) {
        int delete = length - 20;
        if(delrep[0] != 0) {
            delrep[0] = delrep[0] < delete ? delrep[0] : delete;
        }
        if(delrep[1] != 0) {
            delrep[1] = delrep[1] < (delete - delrep[0])/2 ? delrep[1] : (delete - delrep[0])/2;
        }
        if(delrep[2] != 0) {
            delrep[2] = delrep[2] < ((delete - delrep[0]) - delrep[1]*2)/3 ? delrep[2] : ((delete - delrep[0]) - delrep[1]*2)/3;
        }
        
        r-= delrep[0] + delrep[1] + delrep[2];   
        
        int x = r > offences2 ?  r : offences2;
        return length < 6 ? 6 - length + offences1 : delete + x; 
    }
    
    return vo < r ? r : vo;
}