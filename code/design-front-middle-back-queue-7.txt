class FrontMiddleBackQueue {
public:
    FrontMiddleBackQueue() {
        
    }
    
    void pushFront(int val) {
        q1.push_front(val);
        balance();
    }
    
    void pushMiddle(int val) {
        if(q1.size() == q2.size()){
            q1.push_back(val);
        }
        else{
            q2.push_front(q1.back());
            q1.pop_back();
            q1.push_back(val);
        }
        balance();
    }
    
    void pushBack(int val) {
        q2.push_back(val);
        balance();
    }
    
    int popFront() {
        if(q1.empty()) return -1;
        int x = q1.front();
        q1.pop_front();
        balance();
        return x;
    }
    
    int popMiddle() {
        if(q1.empty()) return -1;        
        int x = q1.back();
        q1.pop_back();
        balance();
        return x;
    }
    
    int popBack() {
        if(q2.empty()){
            if(q1.empty()) return -1;
            else return pop_back(q1);
        }
        
        int x = q2.back();
        q2.pop_back();
        balance();
        return x;
    }
    
private:
    void balance(){
        while(q1.size() < q2.size()){
            auto x = q2.front();
            q2.pop_front();
            q1.push_back(x);
        }
        while(q1.size() > q2.size()+1){
            auto x = q1.back();
            q1.pop_back();
            q2.push_front(x);
        }
    }
    
    int pop_back(deque<int>& q){
        int x = q.back();
        q.pop_back();
        return x;
    }
    
    deque<int> q1, q2;
};