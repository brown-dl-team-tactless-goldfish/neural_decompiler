}

int find(Node* root,int val){
    int ans=0;
    for(int i=20;i>=0;i--){
        if(val&(1<<i)){
            if(root->left and root->left->count>0){
                ans=ans|(1<<i);
                root=root->left;
            }else{
                root=root->right;
            }
        }else{
            if(root->right and root->right->count>0){
                ans=ans|(1<<i);
                root=root->right;
            }else root=root->left;
        }
    }
    return ans;
}

void delet(Node* root,int val){
   for(int i=20;i>=0;i--){
       if(val&(1<<i)){
           root->right->count--;
           root=root->right;
       }else{
           root->left->count--;
           root=root->left;
       }
   }
}

vector<vector<pair<int,int>>> q;
void dfs(vector<int> adj[],int sv,int p,Node* root,vector<int> &ans){
    insert(root,sv);
   
   for(auto p:q[sv]){
       int x=find(root,p.first);
       ans[p.second]=x;
   }
    for(auto c:adj[sv]){
        if(c!=p) dfs(adj,c,sv,root,ans);
    }
    delet(root,sv);
    
}
vector<int> maxGeneticDifference(vector<int>& parents, vector<vector<int>>& queries) {
    int n=parents.size();
    vector<int> adj[n];
     q.resize(100001);
    int sv;
    for(int i=0;i<n;i++){
        if(parents[i]!=-1){
            adj[parents[i]].push_back(i);
        }else sv=i;
    }
    for(int i=0;i<queries.size();i++){
        q[queries[i][0]].push_back({queries[i][1],i});
    }
    vector<int> ans(queries.size());
    Node* root=new Node();
    dfs(adj,sv,sv,root,ans);
    return ans;
}