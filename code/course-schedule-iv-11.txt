class Solution {
private:
    bool isPrerequisiteOf(int v, int u, std::vector<std::vector<int>> const &g, std::vector<bool> &visited) const
    {
        visited[v] = true;
        return u == v || std::any_of(g[v].begin(), g[v].end(), [&](int n){ return !visited[n] && isPrerequisiteOf(n, u, g, visited); });
    }

    bool isPrerequisiteOf(int u, int v, std::vector<std::vector<int>> const &g) const
    {
        std::vector<bool> visited(g.size(), false);
        return isPrerequisiteOf(u, v, g, visited);
    }

public:
    std::vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        std::vector<bool> r(queries.size());
        std::vector<std::vector<int>> g(numCourses, std::vector<int>{});
        for (auto const &p : prerequisites)
            g[p[1]].push_back(p[0]);
        std::transform(queries.begin(), queries.end(), r.begin(), [&](auto const &q){ return isPrerequisiteOf(q[1], q[0], g); });
        return r;
    }
};