int max;
void backtracking(int **students, int sidx, int studentsSize, int studentsColSize,
                  int **mentors, int *mentor_visited, int mentorsSize, int *res);
int maxCompatibilitySum(int** students, int studentsSize, int* studentsColSize, int** mentors, int mentorsSize, int* mentorsColSize){
    
    int i;
    int res = 0;max = 0;
    int sidx=0;
    int p;
    int mentor_state[10];
    for (i=0; i < mentorsSize; i++)
    {
        res = 0;
        memset(&mentor_state[0],0,sizeof(mentor_state));
        mentor_state[i] = 1;
        for (p=0; p < *studentsColSize; p++)
        {
            if (students[sidx][p] == mentors[i][p])
            {
                res++;
            }
        }
        backtracking(students,sidx+1,studentsSize,*studentsColSize,
                     mentors,&mentor_state[0],mentorsSize,&res);
    }

    return max;
}

void backtracking(int **students, int sidx, int studentsSize, int studentsColSize,
                  int **mentors, int *mentor_visited, int mentorsSize, int *res)
{
    int i,p;
    int mentor_v[10];
    int res_local;
    if (sidx >= studentsSize)
    {
        if (*res > max)
            max = *res;
        return;
    }
    
    for (i=0; i < mentorsSize; i++)
    {
        memcpy(&mentor_v[0],&mentor_visited[0],sizeof(int)*10);
        res_local = *res;
        if (mentor_v[i] == 1)
            continue;
        
        mentor_v[i] = 1;
        for (p=0; p < studentsColSize; p++)
        {
            if (students[sidx][p] == mentors[i][p])
            {
                res_local++;
            }
        }
        backtracking(students,sidx+1,studentsSize,studentsColSize,
                     mentors,&mentor_v[0],mentorsSize,&res_local);
    }
    return;
}