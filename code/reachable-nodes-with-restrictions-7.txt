class Solution {
public:
    unordered_set<int> impossible ;
    vector<int> visited , adj[100001] ;
        
    void dfs(int src){
        visited[src] = 1 ;
        
        for(auto &nbr : adj[src]){
            if(!visited[nbr] and impossible.find(nbr) == end(impossible)){
                dfs(nbr);
            }
        }
    }
    
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        for(auto &x : restricted) impossible.insert(x) ;
        visited.resize(n,0) ;
        for(auto &x : edges) adj[x[0]].push_back(x[1]) , adj[x[1]].push_back(x[0]) ;
        dfs(0) ;
        return count(begin(visited),end(visited),1) ;
        
    }
};