    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        vector<unordered_set<int>> vlang;
        for(auto& v:languages) vlang.emplace_back(v.begin(), v.end());
        vector<pair<int,int>> ships; //only contain unconnected friendships
        for(auto& v: friendships){
            const auto& lang1 = vlang[v[0]-1], lang2 = vlang[v[1]-1];
            bool connected = false;
            for(int i : lang1){
                if(lang2.count(i)) {
                    connected = true;
                    break;
                }
            }
            if(!connected) ships.emplace_back(v[0]-1, v[1]-1);
        }
        
        int res = INT_MAX;
        for(int lang = 1; lang <= n; lang++){
            unordered_set<int> needtoTeach;
            for(auto [i, j] : ships){
                if(!vlang[i].count(lang)) needtoTeach.insert(i);
                if(!vlang[j].count(lang)) needtoTeach.insert(j);
            }
            res = min<int>(res, needtoTeach.size());
        }
        return res;
    }