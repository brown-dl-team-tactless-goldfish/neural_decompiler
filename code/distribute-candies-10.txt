

int distributeCandies(int* candies, int candiesSize){

quick_sort(candies,0,candiesSize- 1);


int i,j,k=0,p,a[10000],c[10000],s=0,c1=0,cat=(candiesSize)/2;
    
    
for(i=0;i<candiesSize;i++)
{
s=1;
c1=0;
for(j=i+1;j<candiesSize;j++)
{
++c1;
if(candies[i]==candies[j]&&j!=candiesSize-1) 
++s;
else if(candies[i]!=candies[j]||j==candiesSize-1)
{
if(j==candiesSize-1)
{
    if(candies[i]==candies[j])
    {
    i=candiesSize-1;
    ++s;
    }
    
    else if(candies[i]!=candies[j])
        i=candiesSize-2;
    
    c[k]=s;
    
    ++k;
}
else if(j!=candiesSize-1&&candies[i]!=candies[j])
{
c[k]=s;
++k;
i=j-1;
break;
}
}
else if(candies[i]!=candies[j]&&j!=candiesSize-1) 
{
c[k]=s;
++k;    
}   
}
if(c1==0)
{  
c[k]=s;
++k; 
}
}
    
printf("FREQEUNCY\n");
    
for(i=0;i<k;i++)
{
printf("%lld\n",c[i]);   
}   

s=0;
while(cat>0&&k>0)
{
    ++s;
    --cat;
    --k;
}


return s;
}


void quick_sort(int nums[],int f, int l) {
  int i, j, t, p = 0;

  if (f < l) {
    p = f;
    i = f;
    j = l;

    while (i < j) {
      while (nums[i] <= nums[p] && i < l)
        i++;
      while (nums[j] > nums[p])
        j--;
      if (i < j) {
        t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
      }
    }

    t = nums[p];
    nums[p] = nums[j];
    nums[j] = t;
    quick_sort(nums,f, j - 1);
    quick_sort(nums,j + 1, l);
  }
}

