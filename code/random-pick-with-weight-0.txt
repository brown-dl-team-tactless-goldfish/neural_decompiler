typedef struct {
    int* w;
    int* sum;
    int total;
    int wSize;
} Solution;

int BFS(int* nums, int n, int val){
    int left = 0, right = n-1;
    int mid;
    while(left < right){
        mid = left + (right - left)/2;
        if(nums[mid] < val)
            left = mid + 1;
        else
            right = mid;
    }
    return left;
}

Solution* solutionCreate(int* w, int wSize) {
    Solution* ret = malloc( sizeof(Solution));
    ret->w = w;
    ret->sum = malloc( wSize * sizeof(int));
    ret->wSize = wSize;
    ret->sum[0] = w[0];
    for(int i = 1; i < wSize; i++){
        ret->sum[i] = ret->sum[i-1] + w[i];
    }
    ret->total = ret->sum[wSize-1];
    return ret;
}

int solutionPickIndex(Solution* obj) {
    int x = rand()  % (obj->total) + 1;
    int idx = BFS(obj->sum, obj->wSize, x);
    return idx;
}

void solutionFree(Solution* obj) {
    free(obj->sum);
    free(obj);
}