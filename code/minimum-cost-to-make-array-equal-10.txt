    public long MinCost(int[] nums, int[] cost)
    {
        int l = nums.Min();
        int r = nums.Max();
        long bestCost = Int64.MaxValue;
        while ((r - l) > 2)
        {
            int mid1 = l + (r - l) / 3;
            int mid2 = r - (r - l) / 3;

            long cost1 = CalCost(nums, cost, mid1);
            long cost2 = CalCost(nums, cost, mid2);

            if (cost1 < cost2)
                r = mid2;
            else
                l = mid1;
        }
        for (int i = l; i <= r; i++)
        {
            long cost3 = CalCost(nums, cost, i);
            bestCost = Math.Min(bestCost, cost3);
        }

        return bestCost; ;
    }

    long CalCost(int[] nums, int[] cost, long target)
    {
        long totalCost = 0;
        for (int i = 0; i < nums.Length; i++)
        {
            totalCost += Math.Abs(target - nums[i]) * cost[i];
        }
        return totalCost;
    }