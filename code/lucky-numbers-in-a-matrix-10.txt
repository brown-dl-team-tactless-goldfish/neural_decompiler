

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int* luckyNumbers (int** matrix, int rs, int* cs, int* returnSize){
    int min, max, counter = 0;

    //find the min of every row and save
    int *row = (int *)malloc(rs*sizeof(int));

    for (int i=0; i<rs; i++){
        min = matrix[i][0];
        for (int k=0; k<cs[0]; k++){
            if (matrix[i][k] < min){
                min = matrix[i][k];
            }
        }
        row[i] = min;
    }
    
    //find the max of every col and save
    int *col = (int *)malloc(cs[0]*sizeof(int));

    for (int i=0; i<cs[0]; i++){
        max = matrix[0][i];
        for (int k=0; k<rs; k++){
            if (matrix[k][i] >= max){
                max = matrix[k][i];
            }
        }
        col[i] = max;
    }
    
    int *r = (int *)malloc(rs*sizeof(int));
    for (int i=0; i<rs; i++)
        r[i] = -1;
	
	//thanks to the fact that integers are unique, if we find two numbers that are the same value in the two just created array, it will be a winner
    int n = 0;
    for (int i=0; i<cs[0]; i++){
        for (int k=0; k<rs; k++){
            if (col[i] == row[k]){
                r[n] = row[k];
                n++;
            }
        }
    }
    
    for (int i=0; i<3; i++){
        if (r[i] > 0)
            counter++;
    }
    
    //create the return array because the values can be less than row's number
    int *res = (int *)malloc(counter*sizeof(int));
    for (int i=0; i<counter; i++){
        res[i] = r[i];
    }

    *returnSize = counter;
    return res;
}