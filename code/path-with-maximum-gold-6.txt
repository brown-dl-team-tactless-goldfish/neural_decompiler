class Solution {
    int ans{0};
    int m, n;
    int dir[4][2]{{-1,0},{1,0},{0,-1},{0,1}};
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        m = grid.size(), n = grid[0].size();
        
        for(int r = 0; r < m; r++)
            for(int c = 0; c < n; c++)
                if(grid[r][c])
                    dfs(grid, r, c, 0);
        return ans;
    }
    
    void dfs(vector<vector<int>>& grid, int r, int c, int cur_gold){
        if(r < 0 or r >= m or c < 0 or c >= n or grid[r][c] == 0)
        {
            ans = max(ans, cur_gold);
            return;
        }
        cur_gold += grid[r][c];
        
        int tmp = grid[r][c];
        grid[r][c] = 0;
        for(auto &d: dir)
            dfs(grid, r + d[0], c + d[1], cur_gold);
        grid[r][c] = tmp;
    }
};