class Solution {
public:
    int countPyramids(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int res = 0;
        int* arr = new int[row * col];
        
        auto getMin = [](int a, int b, int c) {
            return min(a, min(b, c));
        };
        
		// Count inverse pyramidal plot
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col ; j++) {
                if(!i) {*(arr + i * col + j) = grid[i][j]; continue;}
                if(grid[i][j] == 0) {*(arr + i * col + j) = 0; continue;}

                int left = j > 0 ? *(arr + (i - 1) * col + (j - 1)) : 0;
                int up = *(arr + (i - 1) * col + j);
                int right = j < col - 1 ? *(arr + (i - 1) * col + (j + 1)) : 0;

                int value = getMin(left, up, right);
                res += value;
                *(arr + i * col + j) = value + 1;
            }
        }
        
		// Do the opposite way to get pyramidal plot
        for(int i = row - 1; i >= 0; i--) {
            for(int j = 0; j < col ; j++) {
                if(i == row - 1) {*(arr + i * col + j) = grid[i][j]; continue;}
                if(grid[i][j] == 0) {*(arr + i * col + j) = 0; continue;}

                int left = j > 0 ? *(arr + (i + 1) * col + (j - 1)) : 0;
                int up = *(arr + (i + 1) * col + j);
                int right = j < col - 1 ? *(arr + (i + 1) * col + (j + 1)) : 0;

                int value = getMin(left, up, right);
                res += value;
                *(arr + i * col + j) = value + 1;
            }
        }
        
        return res;
    }
};