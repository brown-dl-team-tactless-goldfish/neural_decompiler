class Solution {
public:
    int dp[1<<14+1][16];
    int solve(vector<int>&tasks, int n, int mask, int time, int t){
        if(time>t)
            return INT_MAX;
        if(mask==0)
            return 1;
        if(dp[mask][time]!=-1)
            return dp[mask][time];
        
        //for each task, there are 2 options
        //include in the ongoing session
        //start a new session
        
        int ans = INT_MAX;
        for(int i=0;i<n;i++){
            if(mask & (1<<i)){
                int ongoing = solve(tasks,n,mask^(1<<i),time+tasks[i],t);
                int newSession = 1+solve(tasks,n,mask^(1<<i),tasks[i],t);
                ans = min(ans,min(ongoing,newSession));
            }
        }
        return dp[mask][time] = ans;
        
    }
    int minSessions(vector<int>& tasks, int t) {
        int n=tasks.size();
        int mask=(1<<n)-1;
        memset(dp,-1,sizeof(dp));
        int ans=solve(tasks,n,mask,0,t);
        return ans;
        
    }
};