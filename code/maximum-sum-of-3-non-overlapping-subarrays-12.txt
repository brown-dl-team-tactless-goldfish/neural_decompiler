public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        vector<int> ps;
        ps.push_back(0);
        partial_sum(begin(nums),end(nums),back_inserter(ps));
        vector<vector<pair<int,int>>> dp(ps.size(), vector<pair<int,int> >(4,{0,-1}));
        
        for(int i = 1; i <= 3; ++i){
            for(int j = k; j < ps.size(); ++j){
                dp[j][i] = dp[j - 1][i];
                
                if(dp[j - k][i - 1].first + ps[j] - ps[j - k] > dp[j][i].first){
                    dp[j][i].first = dp[j - k][i - 1].first + ps[j] - ps[j - k];
                    dp[j][i].second = j - k;
                }
            }
        }
                               
        int last = dp[ps.size() - 1][3].second;
        int i = ps.size() - 1;
        int l = 3;
        vector<int> result;
        
        for(; i > 0 && dp[i - 1][3].second == last; i--);
        for(; l > 0;){
            result.push_back(i - k);
            i = dp[i][l].second;
            l--;
            last = dp[i][l].second;
            for(; i > 0 && dp[i - 1][l].second == last; i--);
        }
        
        reverse(begin(result),end(result));
        return result;
    }
};