int partition(int arr[], int low, int high){
    int key;
    key = arr[low];
    while(low<high){
        while(low <high && arr[high]>= key )
            high--;
        if(low<high)
            arr[low++] = arr[high];
        while( low<high && arr[low]<=key )
            low++;
        if(low<high)
            arr[high--] = arr[low];
    }
    arr[low] = key;
    return low;
}
void quick_sort(int arr[], int start, int end){
    int pos;
    if (start<end){
        pos = partition(arr, start, end);
        quick_sort(arr,start,pos-1);
        quick_sort(arr,pos+1,end);
    }
    return;
}
int* deckRevealedIncreasing(int* deck, int deckSize, int* returnSize){
    int *pos = malloc(sizeof(int) * deckSize);
    *returnSize = deckSize;
    int begin = 0, item_number = deckSize, flag=0;
    quick_sort(deck, 0, deckSize-1);
    for (int i = 0; i < *returnSize; i++) {
        pos[i] = i;
    }
    while(item_number>0){
        if(!flag){
            item_number--;
            begin++;
            flag = !flag;
        }else{
            int tmp = pos[begin];
            for (int j=begin;j<(*returnSize)-1;j++) {
                pos[j] = pos[j+1];
            }
            pos[(*returnSize)-1] = tmp;
            flag = !flag;
        }
    }
    int *result = malloc(sizeof(int) * deckSize);
    for (int i=0;i<*returnSize;i++) {
        result[pos[i]] = deck[i];
    }
    return result;
}