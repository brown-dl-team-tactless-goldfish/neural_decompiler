using System;
using System.Collections.Generic;
using System.Linq;

public class Node {
    public Node Parent { get; set; }
    public List<Node> Nodes { get; } = new List<Node>();
    public char Val { get; set; }

    public bool GetResult() {
        if (Val == '|') return Or(Nodes.Select(x => x.GetResult()));
        if (Val == '&') return And(Nodes.Select(x => x.GetResult()));
        if (Val == '!') return Not(Nodes.First().GetResult());
        return Val == 't';
    }

    private static bool Not(bool x) => !x;

    private static bool Or(IEnumerable<bool> xs)
        => xs.Aggregate(false, (x, y) => x || y);

    private static bool And(IEnumerable<bool> xs)
        => xs.Aggregate(true, (x, y) => x && y);
}

public class Solution {
    public bool ParseBoolExpr(string expression) {
        Node curr = null;

        foreach (var c in expression.ToCharArray()) {
            if ("|&!tf".Contains(c)) {
                var node = new Node { Val = c, Parent = curr };
                curr?.Nodes.Add(node);
                curr = node;
            }
            else if (",)".Contains(c)) {
                curr = curr?.Parent;
            }
        }

        return curr?.GetResult() ?? throw new Exception();
    }
}