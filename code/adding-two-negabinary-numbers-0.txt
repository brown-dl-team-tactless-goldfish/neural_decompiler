/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* addNegabinary(int* arr1, int arr1Size, int* arr2, int arr2Size, int* returnSize){
    int large = (arr1Size > arr2Size)?arr1Size:arr2Size;
    int small = (arr1Size <= arr2Size)?arr1Size:arr2Size;
    large += 2;
    int * result = malloc(sizeof(int) * large);
    int i = 1;
    int sum = 0;
    int next = 0, next2 = 0;
    int add1, add2;
    for (i; i <= large; i++){
        if (arr1Size - i < 0)
            add1 = 0;
        else
            add1 = arr1[arr1Size - i];
        if (arr2Size - i < 0)
            add2 = 0;
        else
            add2 = arr2[arr2Size - i];
        sum = add1 + add2 + next;
        if (sum == 0){
            result[large - i] = 0;
            next = 0;
        }
        if (sum == 1){
            result[large - i] = 1;
            next = 0;
        }
        if (sum  == 2){
            result[large - i] = 0;
            next = -1;
        }
        if (sum == -1){
            result[large - i] = 1;
            next = 1;
        }
        if (sum == 3){
            result[large - i] = 1;
            next = -1;
        }
    }
    int k = 0;
    for (k; k < large; k++){
        if (result[k] == 0){
            printf("%d", k);
        }
        else
            break;
    }
    if (k == large)
        *returnSize = 1;
    else
        *returnSize = large - k;
    for (int j = 0; j < large - k; j++){
        result[j] = result[j+k];
    }
    return result;
}