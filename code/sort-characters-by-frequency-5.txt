int partition(int** array,int low,int high)
{
    int temp_1=array[0][low];
    int temp_2=array[1][low];
    while(low<high)
    {
        while(low<high&&array[0][high]>=temp_1)
        {high--;}
        if(low<high) 
        {
            array[0][low]=array[0][high];
            array[1][low]=array[1][high];
            low++;
        }
        while(low<high&&array[0][low]<temp_1)
        {low++;}
        if(low<high)
        {
            array[0][high]=array[0][low];
            array[1][high]=array[1][low];
            high--;
        }
    }
    array[0][low]=temp_1;
    array[1][low]=temp_2;
    return low;
}
void quick_sort(int** array,int s,int t)
{   
    int i=0;
    if(s<t)
    {
        i=partition(array,s,t);
        quick_sort(array,s,i-1);
        quick_sort(array,i+1,t);
    }
}
char* frequencySort(char* s) {
    int len=strlen(s);
    int temp='{'-' ';
    int *hash=(int*)calloc(temp,sizeof(int));
    char *ret=(char*)calloc(len+1,sizeof(char));
    int count=0;
    int i=0;
    int j=0;
    int **array=(int**)malloc(sizeof(int*)*2);
    array[0]=(int*)calloc(temp,sizeof(int));
    array[1]=(int*)calloc(temp,sizeof(int));
    while(i<len){
        hash[s[i]-' ']++;
        i++;
    }
    i=0;
    while(i<temp){
        if(hash[i]!=0){
            array[0][count]=hash[i];
            array[1][count]=i+' ';
            count++;
        } 
        i++;
    }
    temp=0;
    quick_sort(array,0,count-1);
    i=count-1;
    while(i>=0){
        j=0;
        while(j<array[0][i]){
            ret[temp++]=array[1][i];
            j++;
        }
        i--;
    }
    ret[len]='\0';
    return ret;
}
/*#define SIZE 70000
struct HashArray
{
    char key;
    struct HashArray* next;
}Hash1[SIZE];      
char* frequencySort(char* s) {
    int len=strlen(s);
    int temp='{'-' ';
    int *hash=(int*)calloc(temp,sizeof(int));
    char *ret=(char*)calloc(len+1,sizeof(char));
    int count=0;
    for(int i=0;i<len;i++){
        hash[s[i]-' ']++;
    }
    for(int i=0;i<SIZE;i++){
        Hash1[i].key=0;
        Hash1[i].next=NULL;
    }
    for(int i=0;i<temp;i++){
        if(hash[i]!=0){
            if(Hash1[hash[i]].key==0){
                Hash1[hash[i]].key=i+' ';
            }
            else{
                struct HashArray *p=&Hash1[hash[i]]; 
                while(p->next!=NULL){
                    p=p->next;
                }
                p->next=(struct HashArray *)malloc(sizeof(struct HashArray));
                p->next->key=i+' ';
                p->next->next=NULL;
            }
        } 
    }
    for(int i=SIZE-1;i>0;i--){
        if(Hash1[i].key!=0){
            for(int j=0;j<i;j++){
                ret[count++]=Hash1[i].key;
            }
            if(Hash1[i].next!=NULL){
                struct HashArray *p=&Hash1[i];
                while(p->next!=NULL){
                    p=p->next;
                    for(int j=0;j<i;j++){
                        ret[count++]=p->key;
                    }
                }
            }
        }
    }
    ret[len]='\0';
    return ret;
}*/