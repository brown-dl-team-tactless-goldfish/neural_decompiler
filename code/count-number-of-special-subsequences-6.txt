class Solution {
public:
    int dp[100001][2][2];
    int M = 1000000007;
    int dfs(vector<int> &nums, int index, int zero, int one) {
        if(index == nums.size()) return 0;
        if(dp[index][zero][one] != -1) return dp[index][zero][one] % M;
        int count = 0;
        if(nums[index] == 0 and one == 0) {
            count += dfs(nums,index + 1,1,0) % M;
        }
        if(nums[index] == 1) {
            if(zero)
                count += dfs(nums,index + 1,1,1) % M;
        }
        if(nums[index] == 2) {
            if(one)
                count += (dfs(nums,index + 1,0,1) + 1) % M;
        }
        count += dfs(nums,index + 1,zero,one) % M;
        return dp[index][zero][one] = count % M;
    }
    int countSpecialSubsequences(vector<int>& nums) {
        memset(dp,-1,sizeof(dp));
        return dfs(nums,0,0,0) % M;
    }
};