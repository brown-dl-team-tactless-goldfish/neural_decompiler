	vector<int> parent(n+1, 0);
    
    vector<int> ans1,ans2;
    
    for(auto& x: edges)
    {
        if(parent[x[1]] > 0)
        {
           ans1.push_back(parent[x[1]]);
           ans1.push_back(x[1]);
            
           ans2 = x;
            
           x[0] = -1; //need '&' with auto like auto&;
           x[1] = -1;
        }
        else
        {
            parent[x[1]] = x[0];
        }
    }
    
    du *tmp = new du(n);
    
    for(auto& x: edges)
    {
        if(x[0]<0 || x[1] < 0)
        {
            continue;
        }
        
        if(tmp->find(x[0]) == tmp->find(x[1]))
        {
            if(ans2.empty())
            {
                return x;
            }
            
            else
            {
                return ans1;
            }
        }
        
        tmp->unionn(x[0],x[1]);
    }

    return ans2;
    
}