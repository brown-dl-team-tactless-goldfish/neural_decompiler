/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* sumEvenAfterQueries(int* A, int ASize, int** queries, int queriesRowSize, int *queriesColSizes, int* returnSize) {
  *returnSize = queriesRowSize;
  int *output = (int*)malloc(sizeof(int) * *returnSize);
  
  // compute initial sum-of-even
  int sumOfEven = 0;
  for (int j = 0; j < ASize; ++j) // O(ASize)
    if ((A[j] & 1) == 0)
      sumOfEven += A[j];
  
  for (int index = 0; index < queriesRowSize; ++index) { // O(queriesRowSize)
    int val = queries[index][0];
    int i = queries[index][1];

    // A[i] is even? subtract it; either it will become odd, or remain even (but changed)
    if ((A[i] & 1) == 0)
      sumOfEven -= A[i];
    
    // update A with the query
    A[i] += val;

    // If A[i] is now even, add it to the sum.
    if ((A[i] & 1) == 0)
      sumOfEven += A[i];
    
    // store the result for this query
    output[index] = sumOfEven;
  }
  
  return output;
}