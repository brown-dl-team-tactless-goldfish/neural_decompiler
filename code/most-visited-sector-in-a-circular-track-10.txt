class Solution {
public:
    vector<int> mostVisited(int n, vector<int> const &r) {
        std::vector<int> s(n, 0);

        int max = 0;
        auto inc = [&max](auto x){ ++x; max = std::max(max, x); return x; };
        
        for (int i = 0; i < r.size() - 1; ++i) {
            auto const first = s.begin() + r[i] - 1;
            auto const last = s.begin() + r[i + 1] - 1;
            if (first < last) {
                std::transform(first, last, first, inc);
            } else {
                std::transform(first, s.end(), first, inc);
                std::transform(s.begin(), last, s.begin(), inc);
            }
        }
        s[r.back() - 1] = inc(s[r.back() - 1]);

        auto out = s.begin();
        for (int i = 0; i < s.size(); ++i)
            if (max == s[i]) *out++ = i + 1;
        s.erase(out, s.end());
        
        return s;
    }
};