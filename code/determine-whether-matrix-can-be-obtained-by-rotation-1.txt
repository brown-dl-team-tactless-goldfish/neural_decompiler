void rotate( int ** m, int n)
{
    for( int i = 0; i < (n+1)/2; i++ )
    {
      for( int j = 0; j < n/2; j++ )
      {
        int a = m[i][j];
        int b = m[j][n-i-1];
        int c = m[n-i-1][n-j-1];
        int d = m[n-j-1][i];
        m[j][n-i-1] = a;
        m[n-i-1][n-j-1] = b;
        m[n-j-1][i] = c;
        m[i][j] = d;
      }
    }
}

bool cmp(int** m,int** n,int s,int p)
{
    for(int i=0; i<s; i++)
    {
      for(int j=0; j<p; j++)
      {
        if(m[i][j] != n[i][j]){return false;}
      }
    }
  return true;
}
bool findRotation(int** mat, int matSize, int* matColSize, int** target, int targetSize, int* targetColSize)
{
    for(int i =0;i<4;i++)
    {
       if(cmp(mat,target,matSize,*matColSize)){ return true; } 
       rotate(mat,matSize);
    }
    return false;
}