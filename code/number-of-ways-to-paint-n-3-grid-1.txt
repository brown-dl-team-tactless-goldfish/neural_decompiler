vector<int> colors = {1, 2, 3};
    int memo[5005][4][4][4];
    int mod = 1e9+7;
    
int dfs(int i, int n, int prevRowColor1, int prevRowColor2, int prevRowColor3, int color1, int color2, int color3) {

	// check if adjacent are same
	if (color1 == color2 || color2 == color3) {
		return 0;
	}

	// check current colors with previous rows colors
	if (prevRowColor1 == color1 || prevRowColor2 == color2 || prevRowColor3 == color3) {
		return 0;
	}

	// painted all rows
	if (i == n - 1) {
		return 1;
	}

	// check cached value
	if (memo[i][color1][color2][color3] != -1) {
		return memo[i][color1][color2][color3];
	}

	long long ans = 0;

	for (int newColor1 : colors) {
		for (int newColor2 : colors) {
			for (int newColor3 : colors) {
				// color1, color2, color3 becomes prevColors
				ans += dfs(i+1, n, color1, color2, color3, newColor1, newColor2, newColor3) % mod;
				ans %= mod;
			}
		}
	}

	memo[i][color1][color2][color3] = ans;
	memo[i][color1][color2][color3] %= mod;

	return ans;
}

int numOfWays(int n) {
	vector<vector<int>> grid(n, vector<int>(3, 0));

	// clear cache
	for (int i = 0; i < n; ++i) {
		for (int a = 0; a < 4; ++a) {
			for (int b = 0; b < 4; ++b) {
				for (int c = 0; c < 4; ++c) {
					memo[i][a][b][c] = -1;
				}
			}
		}
	}

	long long res = 0;

	for (int color1 : colors) {
		for (int color2 : colors) {
			for (int color3 : colors) {
				// choose starting colors
				res += dfs(0, n, 0, 0, 0, color1, color2, color3) % mod;
				res %= mod;
			}
		}
	}

	return res;
}