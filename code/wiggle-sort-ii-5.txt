struct wiggleiterator : iterator<random_access_iterator_tag, int> {
    vector<int>& v;
    int i;
    wiggleiterator(vector<int>& vec, int index) : v(vec), i(index) {}
    wiggleiterator& operator=(wiggleiterator& b) { v = b.v; i = b.i; return *this; }
    bool operator==(wiggleiterator& b) { return i == b.i; }
    bool operator!=(wiggleiterator& b) { return i != b.i; }
    bool operator<(wiggleiterator& b) { return i < b.i; }
    int operator-(wiggleiterator& b) { return i - b.i; }
    wiggleiterator operator+(int n) { return wiggleiterator(v, i+n); }
    wiggleiterator operator-(int n) { return wiggleiterator(v, i-n); }
    void operator++() { i++; }
    wiggleiterator& operator--() { i--; return *this; }
    int& operator*() { return v[(2*(v.size()-i)-1) % (v.size()|1)]; }
};

wiggleiterator wigglebegin(vector<int>& vec) {
    return wiggleiterator(vec, 0);
}
wiggleiterator wiggleend(vector<int>& vec) {
    return wiggleiterator(vec, vec.size());
}