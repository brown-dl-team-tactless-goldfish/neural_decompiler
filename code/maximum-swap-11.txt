int cmpfunc(int* a, int* b)
{
    return *b - *a;
}

int maximumSwap(int num){
    int *arr = (int*)malloc(12*sizeof(int));
    int *arrSort = (int*)malloc(12*sizeof(int));
    int i=0,j,len,temp;
    int max = 0, idx = 0;
    int bak = num;
    int result = 0;
    
    // convert num to array from low to high
    while(num)
    {
        arr[i] = num%10;
        if(arr[i]>max)
        {
            max = arr[i];
            idx = i;
        }
        num/=10;
        i++;
    }
    len = i;
    // reverse to normal order
    i=0;
    j=len-1;
    while(i<j)
    {
        temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        i++;
        j--;
    }
    
    // sort from high to low
    memcpy(arrSort,arr,len*sizeof(int));
    qsort(arrSort,len,sizeof(int),cmpfunc);
    
    // check and break when high is not at the right place 'i'
    i=0;
    j=len-1;
    while(i<len)
    {
        if(arr[i]!=arrSort[i])
            break;
        i++;
    }
    // if no such violation, return the orig num
    if(i==len)
        return bak;
    
    // find the right most value to exchange for 'j'
    while(j>=0)
    {
        if(arr[j]==arrSort[i])
            break;
        j--;
    }
    // swap
    temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
    
    // form the result
    for(i=0;i<len;i++)
    {
        result = result*10 + arr[i];
    }
    
    free(arr);
    free(arrSort);
    return result;
}