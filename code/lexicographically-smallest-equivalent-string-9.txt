class Solution {
public:
    class DSU
    {
        public:
        vector<int> parent, rank;
        DSU(int n)
        {
            rank.resize(n);
            parent.resize(n);
            for(int i = 0;i<parent.size();i++)
            {
                parent[i] = i;
            }
        }

        int get_parent(int x)
        {     
            if(x!=parent[x])
            {
                return parent[x] = get_parent(parent[x]);
            }
            return x;
        }

        void union_get(int x, int y)
        {
            int i = get_parent(x);
            int j = get_parent(y);

            if(i!=j)
            {
                if(i>j)
                {
                    parent[i] = j;
                }
                else
                {
                    parent[j] = i;
                }
            }
        }
    };
    string smallestEquivalentString(string s1, string s2, string baseStr) {
        vector<int> parent, rank;
        DSU Dsu(26);
        for(int i = 0;i<s1.length();i++)
        {
            int num1 = s1[i]-'a';
            int num2 = s2[i]-'a';
            int x = Dsu.get_parent(num1);
            int y = Dsu.get_parent(num2);
            if(x==y) continue;
            Dsu.union_get(x, y);
        }
        string s = "";
        for(int i  =0;i<baseStr.length();i++)
        {
            int parent = Dsu.get_parent(baseStr[i]-'a');
            char c = parent+'a';
            s+=parent+'a';
        }
        return s;
    }
};