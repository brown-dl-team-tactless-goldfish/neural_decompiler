int MAX(int a, int b){ return(a>b?a:b); }
int cmp(const void *a, const void *b){ return(*(int*)b - *(int*)a); }
int** findMatrix(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    int* cnt = (int*)calloc(201, sizeof(int));
    int maxCnt = 0;
    for(int i = 1; i <= 200; i++)
        cnt[i] = i;    
    for(int i = 0; i < numsSize; i++){
        cnt[nums[i]] += (1 << 8);
        maxCnt = MAX(maxCnt, cnt[nums[i]]);
    }
    
    int** ans = (int**)calloc(maxCnt, sizeof(int*));
    int* col = (int*)calloc(maxCnt, sizeof(int));
    int ansIdx = 0, idx = 0;
    qsort(cnt, 201, sizeof(int), cmp);/* sort by using freq times */
    while(cnt[0] & 0xFF00){
        idx = 0;
        ans[ansIdx] = (int*)calloc(numsSize, sizeof(int));
        while(cnt[idx] & 0xFF00){
            ans[ansIdx][idx] = cnt[idx] & 0xFF;
            cnt[idx++] -= (1 << 8);
        }
        col[ansIdx++] = idx;
    }
    *returnSize = ansIdx;
    *returnColumnSizes = col;
    return ans;
}