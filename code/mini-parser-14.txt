    public class Solution
    {
        private NestedInteger Helper(ref string s, int start, out int end)
        {
            NestedInteger res = new NestedInteger();

            if (s[start] == '[')
            {
                int nextStart = start + 1;

                while (true)
                {
                    var next = Helper(ref s, nextStart, out int nextEnd);
                    if (next != null)
                    {
                        res.Add(next);
                    }
                    nextEnd++;
                    if (s[nextEnd] == ']')
                    {
                        end = nextEnd;
                        return res;
                    }

                    if (s[nextEnd] == ',')
                    {
                        nextStart = nextEnd + 1;
                        continue;
                    }

                    throw new Exception($"Unexpected char at position {nextEnd}: {s[nextEnd]}");
                }
            }

            if (s[start] == ']')
            {
                end = start - 1;
                return null;
            }

            int sign = 1;
            if (s[start] == '+')
            {
                start++;
            }

            if (s[start] == '-')
            {
                start++;
                sign = -1;
            }

            int value = 0;
            int digitIdx = start;

            while (true)
            {
                value *= 10;
                value += (s[digitIdx] - '0');

                var nextDigitIdx = digitIdx + 1;
                if (nextDigitIdx == s.Length || s[nextDigitIdx] < '0' || s[nextDigitIdx] > '9')
                {
                    res.SetInteger(value * sign);
                    end = digitIdx;
                    return res;
                }

                digitIdx = nextDigitIdx;
            }
        }

        public NestedInteger Deserialize(string s) => Helper(ref s, 0, out _);
    }