using LL = long long ;

class Solution {
    LL M = 1e9 + 7 ;
public:
    int countPalindromes(string s) {
        s = "#" + s ;
        int n = s.size() ;
        auto dp1 = vector<vector<vector<LL>>>(n, vector<vector<LL>>(10, vector<LL>(10))) ;
        auto dp2 = vector<vector<vector<LL>>>(n, vector<vector<LL>>(10, vector<LL>(10))) ;
        auto count1 = vector<vector<LL>>(n, vector<LL>(10)) ;
        auto count2 = vector<vector<LL>>(n+1, vector<LL>(10)) ;
        for(int j = 0; j < 10; j++){
            for(int i = 1; i < n; i++){
                count1[i][j] = count1[i-1][j] ;
                if(s[i] == '0' + j)
                    count1[i][j]++ ;
            }
        }
    
        for(int j = 0; j < 10; j++){
            if(s[n-1] == '0' + j)
                count2[n-1][j] = 1 ;    
            for(int i = n-2; i > 0; i--){
                count2[i][j] = count2[i+1][j] ;
                if(s[i] == '0' + j)
                    count2[i][j]++ ;
            }
        }
        for(int i = 1; i < n; i++){
            for(int j = 0; j < 10; j++){
                for(int k = 0; k < 10; k++){
                    dp1[i][j][k] = dp1[i-1][j][k] ;
                    if(s[i] == '0' + k)
                        dp1[i][j][k] = (dp1[i][j][k] + count1[i-1][j]) % M ;    
                }
            }
        }
        
        for(int i = n-2; i >= 1; i--){
            for(int j = 0; j < 10; j++){
                for(int k = 0; k < 10; k++){
                    dp2[i][j][k] = dp2[i+1][j][k] ;
                    if(s[i] == '0' + j)
                        dp2[i][j][k] = (dp2[i][j][k] + count2[i+1][k]) % M ;
                }
            }
        }
        
        LL ret = 0 ;
        for(int i = 3; i <= n-3; i++){
            for(int j = 0; j < 10; j++){
                for(int k = 0; k < 10; k++){
                    ret += (dp1[i-1][j][k] * dp2[i+1][k][j] ) % M ;
                    ret %= M ;
                }
            }
        }
        return ret ;
    }
};