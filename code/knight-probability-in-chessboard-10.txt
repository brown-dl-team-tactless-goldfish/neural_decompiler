    vector<vector<int>> dirs = {{-2, 1},{-2, -1},{2, 1},{2, -1},
                                {1, 2}, {-1, 2}, {1, -2}, {-1, -2}};
    
    double helper(int N, int K, int r, int c, vector<vector<vector<double>>>& cache) {
        if(K == 0) return 1;
        if(cache[r][c][K] != 0) return cache[r][c][K];
        
        double res = 0;
        for(auto& dir: dirs) {
            int x = r + dir[0], y = c + dir[1];
            if(x < 0 || x >= N || y < 0 || y >= N) continue;
            res += 0.125*helper(N, K-1, x, y, cache);
        }
        cache[r][c][K] = res;
        return res;
    }
    
public:
    double knightProbability(int N, int K, int r, int c) {
        vector<vector<vector<double>>> cache(N, vector<vector<double>>(N, vector<double>(K+1, 0)));
        return helper(N, K, r, c, cache);
    }