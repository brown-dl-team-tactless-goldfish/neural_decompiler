public class Solution {
    public int ScheduleCourse(int[,] courses)
    {
        var c = courses.To2D();
        Array.Sort(c, Comparer<int[]>.Create((a, b) => a[1] == b[1] ? a[0].CompareTo(b[0]) : a[1].CompareTo(b[1])));
        courses = c.To2D();

        var sl = new List<int>();
    
        var n = courses.GetLength(0);
        var timeTillNow = 0;
        for (var i = 0; i < n; ++i)
        {
            if (timeTillNow + courses[i, 0] <= courses[i, 1]) // valid
            {
                Add(sl, courses[i, 0]);
                timeTillNow += courses[i, 0];
            }
            else if (sl.Last() > courses[i, 0]) // we already sorted end time, if time cost is small the pre, always better to switch
            {
                timeTillNow += courses[i, 0] - sl.Last();
                sl.RemoveAt(sl.Count - 1);
                Add(sl, courses[i, 0]);
            }
            // time cost even big , ignore.
        }

        return sl.Count;
    }
    
    public void Add(List<int> l, int val)
    {
        var index = l.BinarySearch(val);
        index = index < 0 ? ~index : index;
        l.Insert(index, val);
    }
}

public static class ArrayExtensions
{

    public static T[][] To2D<T>(this T[,] arr)
    {
        var ret = new T[arr.GetLength(0)][];
        for (var i = 0; i < arr.GetLength(0); i++)
        {
            ret[i] = new T[arr.GetLength(1)];
            for (var j = 0; j < arr.GetLength(1); j++)
            {
                ret[i][j] = arr[i,j];
            }
        }

        return ret;
    }

    public static T[,] To2D<T>(this T[][] arr)
    {
        var ret = new T[arr.Length, arr[0].Length];
        for(var i = 0; i < arr.Length; i++)
        {
            for(var j = 0; j < arr[0].Length; j++)
            {
                ret[i, j] = arr[i][j];
            }
        }

        return ret;
    }
}