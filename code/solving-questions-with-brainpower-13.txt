class Solution {
public:
    vector<long long> tree;
    int size;
    void maximize(int root, int l, int r, long long val, int left, int right) {
        if(right < l || left > r) return;
        if(left >= l && right <= r) {
            tree[root] = max(tree[root], val);
            return;
        }
        int mid = (left + right) / 2;
        maximize(2 * root + 1, l, r, val, left, mid);
        maximize(2 * root + 2, l, r, val, mid + 1, right);
    }
    long long getValue(int pos) {
        long long sol = 0;
        for(int i = size - 1 + pos; i > 0; i = (i - 1) / 2) {
            sol = max(sol, tree[i]);
        }
        sol = max(sol, tree[0]);
        return sol;
    }
    long long mostPoints(vector<vector<int>>& que) {
        int n = que.size();
        size = 1;
        while(size < n) {
            size *= 2;
        }
        tree = vector<long long> (2 * size - 1);
        long long sol = 0;
        for(int i = 0; i < n; i++) {
            long long val = getValue(i);
            long long val1 = val + que[i][0];
            sol = max(sol, val1);
            int l = i + que[i][1] + 1;
            if(l < n) {
                maximize(0, l, n - 1, val1, 0, size - 1);
            }
        }
        return sol;
    }
};