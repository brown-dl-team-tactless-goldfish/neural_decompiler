class Solution {
public:
    int M;
    int N;
    int getIndex(int r, int c)
    {
        return r * N + c;
    }
    
    pair<int,int> getCoordinates(int x)
    {
        int r = x / N;
        int c = x % N;
        
        return {r, c};
    }
    
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) 
    {
        M = isWater.size();
        if (M == 0) return {};
        N = isWater[0].size();
        if (N == 0) return {};
        
        vector<vector<int>>ans(M, vector<int>(N, INT_MAX));
        
        queue<int> q;
        
        for (int i = 0; i < M; i++)
        {
            for (int j = 0; j < N; j++)
            {
                if (isWater[i][j] == 1) q.push(getIndex(i, j));
            }
        }
        
        while(q.size())
        {
            int top = q.front();
            q.pop();
            
            pair<int,int>point = getCoordinates(top);
            int r = point.first;
            int c = point.second;
            //cout<<r<<c;
            
            if (ans[r][c] != INT_MAX) 
            {
                //cout<<"\t"<<ans[r][c]<<endl;
                continue;
            }
            
            // if (isWater[r][c]) ans[r][c] = 0;
            // else 
            {
                int top = INT_MAX, bottom = INT_MAX, left = INT_MAX, right = INT_MAX;
                
                if (r > 0)
                {
                    top = ans[r-1][c];
                    q.push(getIndex(r-1, c));
                }
                if (r < M - 1)
                {
                    bottom = ans[r+1][c];
                    q.push(getIndex(r+1, c));
                }
                if (c > 0)
                {
                    left = ans[r][c-1];
                    q.push(getIndex(r, c-1));
                }
                if (c < N - 1)
                {
                    right = ans[r][c+1];
                    q.push(getIndex(r, c + 1));
                }
                                
                int m = min(top, min(bottom, min(left, right)));
                
                if (isWater[r][c] == 1) ans[r][c] = 0;
                else ans[r][c] = m + 1;                                
            }
            //cout<<"\t"<<ans[r][c]<<endl;
        }
        
        return ans;
    }    
};