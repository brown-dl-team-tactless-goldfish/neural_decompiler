//Find prerequisites for each color and then use toposort
class Solution {
public:
    int m,n;
    vector<vector<int>>adj;
    vector<int>indeg;
    set<int>colors;
    void find(int col,vector<vector<int>>&grid)
    {
        //Find extreme points for the color 'col'
        int r1=-1,r2=-1,c1=-1,c2=-1;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==col)
                {
                    if(r1==-1)
                    {
                        r1=r2=i;
                        c1=c2=j;
                    }
                    else
                    {
                        r2=i;
                        c1=min(c1,j);
                        c2=max(c2,j);
                    }
                }
            }
        }
        if(r1==-1)
            return;
        colors.insert(col);
        // No. of different colors in this boundary are prerequisite for 'col'
        for(int i=r1;i<=r2;i++)
        {
            for(int j=c1;j<=c2;j++)
            {
                if(grid[i][j]!=col)
                {
                    adj[grid[i][j]].push_back(col);
                    indeg[col]++;
                }
            }
        }
    }
    bool isPrintable(vector<vector<int>>&grid) 
    {
        m=grid.size(),n=grid[0].size();
        adj.resize(61);
        indeg.resize(61);
        for(int i=1;i<=60;i++)
            find(i,grid);
        queue<int>q;
        for(int i=1;i<=60;i++)
        {
            if(indeg[i]==0 && colors.find(i)!=colors.end())
                q.push(i);
        }
        int count=0;
        while(!q.empty())
        {
            int u=q.front();
            count++;
            q.pop();
            for(auto &v:adj[u])
            {
                indeg[v]--;
                if(indeg[v]==0)
                    q.push(v);
            }
        }
        return count==colors.size();
    }
};