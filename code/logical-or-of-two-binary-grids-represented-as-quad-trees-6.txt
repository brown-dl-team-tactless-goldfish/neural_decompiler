/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    void okk(Node*&qd1,Node*&qd2)
    {
        
        if(qd1->isLeaf&&!qd2->isLeaf)
        {
          if(qd1->val==0)
          {
              qd1=qd2;
              return ;
          }
            return ;
        }
        if(qd2->isLeaf&&!qd1->isLeaf)
        {
            if(qd2->val==1)
            {
                qd1=qd2;
                
            }
                return ;
        }
        if(qd1->isLeaf&&qd2->isLeaf)return ;
        if(qd1->topLeft->isLeaf||qd2->topLeft->isLeaf)
        {
            if(qd1->topLeft->isLeaf)
            {
                if(qd1->topLeft->val==0)
                {
                    qd1->topLeft=qd2->topLeft;
                }
            }
            else
            {
                if(qd2->topLeft->val==1)
                {
                    qd1->topLeft=qd2->topLeft;
                }
            }
        }
        else
        {
            okk(qd1->topLeft,qd2->topLeft);
        }
        
        
          if(qd1->topRight->isLeaf||qd2->topRight->isLeaf)
        {
            if(qd1->topRight->isLeaf)
            {
                if(qd1->topRight->val==0)
                {
                    qd1->topRight=qd2->topRight;
                }
            }
            else
            {
                if(qd2->topRight->val==1)
                {
                    qd1->topRight=qd2->topRight;
                }
            }
        }
        else
        {
            okk(qd1->topRight,qd2->topRight);
        }

          if(qd1->bottomLeft->isLeaf||qd2->bottomLeft->isLeaf)
        {
            if(qd1->bottomLeft->isLeaf)
            {
                if(qd1->bottomLeft->val==0)
                {
                    qd1->bottomLeft=qd2->bottomLeft;
                }
            }
            else
            {
                if(qd2->bottomLeft->val==1)
                {
                    qd1->bottomLeft=qd2->bottomLeft;
                }
            }
        }
        else
        {
            okk(qd1->bottomLeft,qd2->bottomLeft);
        }
        if(qd1->bottomRight->isLeaf||qd2->bottomRight->isLeaf)
        {
            if(qd1->bottomRight->isLeaf)
            {
                if(qd1->bottomRight->val==0)
                {
                    qd1->bottomRight=qd2->bottomRight;
                }
            }
            else
            {
                if(qd2->bottomRight->val==1)
                {
                    qd1->bottomRight=qd2->bottomRight;
                }
            }
        }
        else
        {
            okk(qd1->bottomRight,qd2->bottomRight);
        }
        if((qd1->topLeft->isLeaf==1&&qd1->topRight->isLeaf&&qd1->bottomLeft->isLeaf&&qd1->bottomRight->isLeaf)&&(qd1->topLeft->val==1&&qd1->topRight->val==1&&qd1->bottomLeft->val==1&&qd1->bottomRight->val==1))
        {
        qd1->val=1;
        qd1->isLeaf=true;
        qd1->topLeft=NULL;
        qd1->topRight=NULL;
        qd1->bottomLeft=NULL;
        qd1->bottomRight=NULL;
        }
    
    }
    Node* intersect(Node* quadTree1, Node* quadTree2) 
    {
        okk(quadTree1,quadTree2);
        return quadTree1;
    }
};