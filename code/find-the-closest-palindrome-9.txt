#define ull unsigned long long
class Solution {
private:
    bool isP(string& s) {
        for (int i = 0; i < s.size()/ 2; ++i) {
            if (s[i] != s[s.size() - i - 1]) {
                return false;
            }
        }
        return true;
    }
    ull to_num(string& s) {
        ull ret = 0;
        for (char& c: s) {
            ret *= 10;
            ret += c - '0';
        }
        return ret;
    }
    string to_s(ull n) {
        string ret;
        while (n) {
            ret.push_back(n % 10 + '0');
            n /= 10;
        }
        reverse(ret.begin(), ret.end());
        return ret;
    }
    ull makeP(string& s, bool isOdd) {
        ull ret = 0;
        for (char& c: s) {
            ret *= 10;
            ret += c - '0';
        }
        for (int i = s.size() - 1 - isOdd; i >= 0; --i) {
            ret *= 10;
            ret += s[i] - '0';
        }
        return ret;
    }
    ull f_abs(ull a, ull b) {
        return (a > b) ?  a - b : b - a;
    }
    ull select(ull a, ull b, ull c, ull target) {
        ull ret = a;
        if (b != target && f_abs(target, b) < f_abs(ret, target)) {
            ret = b;
        }
        if (f_abs(target, c) < f_abs(ret, target)) {
            ret = c;
        }
        return ret;
    }
public:
    string nearestPalindromic(string n) {
        if (n.size() == 1) {
            n[0]--;
            return n;
        }
        if (n.size() == 2 && n[0] == '1') {
            if (n[1] - '0' < 2) {
                return "9";
            }
            return (n[1] - '0' > 6) ? "22" : "11";
        }
        string first_half = n.substr(0, (n.size() + 1) / 2);
        ull first_half_num = to_num(first_half);
        bool isOdd = n.size() % 2 == 1;
        string first_half_down = to_s(first_half_num - 1);
        bool isOdd_down = (first_half_down.size() == first_half.size()) ? isOdd : !isOdd;
        if (!isOdd && isOdd_down) {
            first_half_down.push_back('9');
        }
        string first_half_up = to_s(first_half_num + 1);
        bool isOdd_up = (first_half_up.size() == first_half.size()) ? isOdd : !isOdd;
        if (isOdd && !isOdd_up) {
            first_half_up.pop_back();
        }
        ull down = makeP(first_half_down, isOdd_down);
        ull mid = makeP(first_half, isOdd);
        ull up = makeP(first_half_up, isOdd_up);
        ull ret = select(down, mid, up, to_num(n));
        return to_s(ret);
    }
};