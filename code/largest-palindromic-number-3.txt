class Solution {
public:
    string choose(string num)
    {
        string s = "";
        unordered_map<char,int> mp;
        for(auto i:num) mp[i]++;
        for(auto i:mp) 
        {
            if(i.second % 2 == 0)
            {
                mp[i.first]-=i.second;
                string t(i.second, i.first);
                s+=t;
            }
            else if(i.second-1 > 0)
            {
                mp[i.first]-=i.second-1;
                string t(i.second-1, i.first);
                s+=t;
            }
        }
        
        char c = '0';
        bool flag = false;
        for(auto i:mp)
        {
            if(i.second == 0) continue;
            if(i.first >= c)
            {
                c = i.first;
                flag = true;
            }
        }
        sort(s.rbegin(), s.rend());
        if(flag) s += c;
        return s;
    }
    string largestPalindromic(string num) {
        string s = choose(num);
        int n = s.length();
        string res(n, 'a');
        int i = 0, j = n-1;
        int k = 0;
        bool flag = true;
        while(i<j)
        {
            res[i] = s[k];
            res[j] = s[k+1];
            i++;
            j--;
            k+=2;
        }
        res[i] = s[n-1];
        i = 0;
        while(i<n && res[i]=='0')
        {
            i++;
            flag = false;
        }

        if(!flag)
        {
            if(i==n) return "0";
            else 
            {
                string ans(1, res[i]);
                return ans;
            }
        }
        return res;
    }
};