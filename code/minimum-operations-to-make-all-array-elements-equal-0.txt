/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int cmp(const void*a, const void *b){
    return *(int*)a -*(int*)b;
}
int binarysearch(int *nums,int numsSize,int val){
    int left=0;
    int right=numsSize-1;
    while(left<right){
        int mid=left+(right-left)/2;
        if(nums[mid]<val) left=mid+1;
        else right=mid;
    }
    return left;
}
long long* minOperations(int* nums, int numsSize, int* queries, int queriesSize, int* returnSize){
    *returnSize=queriesSize;
    qsort(nums,numsSize,sizeof(int),cmp);
    long long *temp=(long long*)calloc(numsSize,sizeof(long long));
    long long  *res=(long long*)calloc(queriesSize,sizeof(long long));
    temp[0]=nums[0];
    for(int i=1;i<numsSize;i++){
        temp[i]=nums[i]+temp[i-1];
    }
    //for(int i=0;i<numsSize;i++){
    //    printf(" %d ",temp[i]);
    //}
    //printf("\n");
    for(int i=0;i<queriesSize;i++){
        
        if(queries[i] <= nums[0]) res[i] = temp[numsSize-1] - (long long)queries[i] * numsSize;
        else if(queries[i] >= nums[numsSize - 1])
            res[i] = (long long)queries[i] * numsSize - temp[numsSize-1];
        else{
            int idx=binarysearch(nums,numsSize,queries[i]);    
            // long long right=(temp[numsSize-1]-temp[idx-1])-(long long)queries[i]*(numsSize-idx);
            // long long  left = (long long)queries[i]*(idx)-temp[idx-1]; 
            res[i]= (long long)queries[i]*(2*idx-numsSize)+temp[numsSize-1]-2*temp[idx-1];
        }
        
    }
    return res;
}