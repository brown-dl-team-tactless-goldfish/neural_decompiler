void solve(char** board, int boardRowSize, int boardColSize) {
    // paint all 'O' NOT surrounded by 'X' to '*'
    for (int i = 0; i < boardRowSize; i++) {
        if (board[i][0] == 'O') {
            paint(board, boardRowSize, boardColSize, i, 0, '*');
        }
        if (board[i][boardColSize - 1] == 'O') {
            paint(board, boardRowSize, boardColSize, i, boardColSize - 1, '*');
        }
    }
    for (int i = 1; i < boardColSize - 1; i++) {
        if (board[0][i] == 'O') {
            paint(board, boardRowSize, boardColSize, 0, i, '*');
        }
        if (board[boardRowSize-1][i] == 'O') {
            paint(board, boardRowSize, boardColSize, boardRowSize-1, i, '*');
        }
    }
    // what is left is the 'O' surrounded by 'X', paint to 'X'
    for (int i = 1; i < boardRowSize - 1; i++) {
        for (int j = 1; j < boardColSize - 1; j++) {
            if (board[i][j] == 'O') {
                board[i][j] = 'X';
            }
        }
    }
    // paint '*' back to 'O' 
    for (int i = 0; i < boardRowSize; i++) {
        for (int j = 0; j < boardColSize; j++) {
            if (board[i][j] == '*') {
                board[i][j] = 'O';        
            }
        }
    }
	return;
}


void paint(char **board, int boardRowSize, int boardColSize, int i, int j, char target) {
    board[i][j] = target;
    if (i > 0 && board[i-1][j] == 'O') {
        paint(board, boardRowSize, boardColSize, i-1, j, target);
    }
    if (i < boardRowSize - 1 && board[i+1][j] == 'O') {
        paint(board, boardRowSize, boardColSize, i+1, j, target);
    }
    if (j > 0 && board[i][j-1] == 'O') {
        paint(board, boardRowSize, boardColSize, i, j-1, target);
    }
    if (j < boardColSize -1 && board[i][j+1] == 'O') {
        paint(board, boardRowSize, boardColSize, i, j+1, target);
    }
    return;
}