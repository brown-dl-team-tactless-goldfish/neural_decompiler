#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))

#define MAX_PW_LEN 20

int strongPasswordChecker(char * s){
   int len = 0; /* total length of string */
   int upper = 0; /* how many uppercase chars in string */
   int lower = 0; /* how many lowercase chars in string */
   int num = 0; /* how many digit chars in string */
   int types = 0; /* how many types in string, calculated from above 3 */
   int rl = 0; /* the length of current repeat */
   int trl = 0; /* total length of repeats */
   int slrd3 = 0; /* sum of len of repeat / 3 */
   char p = 0, c = 0; /* previous char and current char */
   int r[MAX_PW_LEN - 1] = {0}; /* how many repeat are length of index?
                                   r[10] == 3; mean there are 3 repeats
                                   have length of 10,
                                   a little trick here, here the length
                                   of repeat is after step F.2, to avoid
                                   an iteration process before step F.3*/
   int rn = 0; /* total number of repeats */

   /* all the statistics */
   while(1) {
       p = c;
       c = *s;
       if(c == p) {
           rl++;
       }else{
           if(rl >= 3) {
               r[min((MAX_PW_LEN - 2), (rl - 2))] += 1;
               slrd3 += rl / 3;
               trl += rl;
               rn++;
           }
           rl = 1;
       }

       if(!c) {break;}

       len++;
       if(c >= 'A' && c <= 'Z'){
           upper++;
       }else if(c >= 'a' && c <= 'z'){
           lower++;
       }else if(c >= '0' && c <= '9'){
           num++;
       }

       s++;
   }
   upper && types++;
   lower && types++;
   num && types++;

   if(len <= MAX_PW_LEN) {
       return max(max(6 - len, 3 - types), slrd3);
   }

   int l = len - trl + 2 * rn; /* Step F.1 and F.2 */
   int op = 0;
   int ll = MAX_PW_LEN - 2;
   /* Step F.3 */
   while(l < MAX_PW_LEN && ll > 0) {
       op++;
       while(r[ll] == 0) {
           ll--;
       }
       l += min(ll, 3);
       if(ll - 3 > 0) {
           r[ll - 3]++;
       }
   }
   /* Step F.4 */
   if(op + types < 3) {
       op += 3 - types - op;
   }

   return op + len - MAX_PW_LEN;
}
