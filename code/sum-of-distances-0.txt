# define ll long long

struct pair {
    ll val;
    ll ori_idx;
    ll preSum;
    ll s;
    ll e;
    ll res;
};

int cmp(const void* a, const void* b) {
    struct pair pa = *(const struct pair*) a;
    struct pair pb = *(const struct pair*) b;
    if (pa.val == pb.val) return pa.ori_idx - pb.ori_idx;
    return pa.val - pb.val;
}

long long* distance(int* nums, int numsSize, int* returnSize) {
    *returnSize = numsSize;
    ll* ans = (ll) calloc(numsSize, sizeof(ll));
    if (numsSize > 1) {
        struct pair* pair = (struct pair*) calloc(numsSize, sizeof(struct pair));
        for (int i = 0; i < numsSize; i++) {
            pair[i].val = nums[i];
            pair[i].ori_idx = i;
        }
        qsort(pair, numsSize, sizeof(struct pair), cmp);
        for (int i = 0; i < numsSize; i++) {
            int j = i;
            pair[i].preSum = pair[i].ori_idx;
            while (j < numsSize && pair[j].val == pair[i].val) {
                pair[j].s = i;
                if (j != i) pair[j].preSum = pair[j-1].preSum + pair[j].ori_idx;
                j++;
            }
            for (int k = i; k < j; k++) {
                pair[k].e = j-1;
            }
            i = j-1;
        }
        for (int i = 0; i < numsSize; i++) {
            int j = i, cnt = 1, total = pair[i].e - pair[i].s + 1, TH = total >> 1;
            while (j < numsSize && pair[j].val == pair[i].val && total > 1) {
                if (total % 2 == 0) {
                    if (cnt < TH) {
                        pair[j].res = pair[pair[j].e].preSum - 2 * (pair[j].preSum + (TH - cnt) * pair[j].ori_idx);
                    } else {
                        pair[j].res = 2 * ((ll)(cnt - TH) * pair[j].ori_idx + pair[pair[j].e].preSum - pair[j].preSum) - pair[pair[j].e].preSum;
                    }
                } else {
                    if (cnt < TH + 1) {
                        pair[j].res = pair[pair[j].e].preSum - 2 * (pair[j].preSum) - (ll)(total - cnt * 2) * pair[j].ori_idx;
                    } else if (cnt == TH + 1) {
                        pair[j].res = pair[pair[j].e].preSum - 2 * (pair[j-1].preSum) - pair[j].ori_idx;
                    } else {
                        pair[j].res = 2 * (pair[pair[j].e].preSum - pair[j].preSum) + 
                            (ll)(total - 2 * (total - cnt)) * pair[j].ori_idx - pair[pair[j].e].preSum;
                    }
                }
                cnt++;
                j++;
            }
            if (total > 1) i = j-1;
        }
        for (int i = 0; i < numsSize; i++) {
            ans[pair[i].ori_idx] = pair[i].res;
        }
        free(pair);
    }
    return ans;
}