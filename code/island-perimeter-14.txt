int calcPerimeter(int** grid, int row, int col, int i, int j)
{
    if(i < 0 || i >= row || j < 0 || j >= col || grid[i][j] == 0)
        return 1;
	else if(grid[i][j] == 2)   // This checking is done here to make sure that the adjacent boxes that have been visited do not count for the perimeter. 
        return 0;
    
    int perimeter = 0;
	
	// Mark the visited boxes as 2. This will be useful when calculating perimeter. 
	grid[i][j] = 2;
	
    perimeter += calcPerimeter(grid, row, col, i+1, j);
    perimeter += calcPerimeter(grid, row, col, i-1, j);
    perimeter += calcPerimeter(grid, row, col, i, j+1);
    perimeter += calcPerimeter(grid, row, col, i, j-1);
    
    return perimeter;
}

int islandPerimeter(int** grid, int gridSize, int* gridColSize)
{
    for(int i = 0; i < gridSize; i++)
    {
        for(int j = 0; j < *gridColSize; j++)
        {
            if(grid[i][j] == 1)
            {
                return calcPerimeter(grid, gridSize, *gridColSize, i, j);
            }
        }
    }
    return 0;
}