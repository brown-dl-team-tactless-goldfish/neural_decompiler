/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void createGraph(TreeNode* root,unordered_map<int,vector<int>>&mp)
    {
        if(root==NULL)return;
        createGraph(root->right,mp);
        createGraph(root->left,mp);
        if(root->right)
        {
            mp[root->val].push_back(root->right->val);
            mp[root->right->val].push_back(root->val);
        }
        if(root->left)
        { 
            mp[root->val].push_back(root->left->val);
            mp[root->left->val].push_back(root->val);
        }
    }
    int solve(TreeNode* root,unordered_map<int,vector<int>>&mp,int start)
    {
        queue<pair<int,int>>q;
        q.push({start,0});
        int ans=0;
        while(!q.empty())
        {
            auto frnt=q.front();
            q.pop();
            for(auto i:mp[frnt.first])
            {
                if(mp.find(i)!=mp.end()) q.push({i,frnt.second+1});
            }
            ans=max(ans,frnt.second);
            mp.erase(frnt.first);
        }
        return ans;
    }
    int amountOfTime(TreeNode* root, int start)
     {
        unordered_map<int,vector<int>>mp;
        createGraph(root,mp);
        return solve(root,mp,start);
    }
};