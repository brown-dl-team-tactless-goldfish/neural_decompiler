int maxProduct(char ** words, int wordsSize)
{

    /*
    Algo:
    0. Initialize max product to 0.
    1. For each word in the list, generate a bit pattern. Each set bit corresponds
       to a character that is present in the word.
       e.g. "abd" = "0b000...001011"
            "fbd" = "0b000...101010"
       For each word save the length in a separate array.
    2. Perform bitwise & on the pattern generated above for one word with every
       other remained word. If the result is 0x0, the two words are disjoint.
    3. Calculate product of lengths for disjoint words and return the highest product
       as answer.
    */

    int max_product = 0, product;
    int* len = (int*) malloc (sizeof(int) * wordsSize);
    unsigned int* mask = (unsigned int*) malloc (sizeof(int) * wordsSize);

    // First O(n) pass: Generate masks and save lengths
    for (int i = 0; i < wordsSize; i++)
    {
        mask[i] = 0;
        len[i] = strlen (words[i]);

        for (int j = 0; j < len[i]; j++)
        {
            mask[i] |= 1 << words[i][j] - 'a';
        }
    }

    // Second O(n*n) pass:
    for (int i = 0; i < wordsSize; i++)
    {
        for (int j = i+1; j < wordsSize; j++)
        {
            // If disjoint
            if (!(mask[i] & mask[j]))
            {
                product = len[i] * len[j];
                max_product = max_product < product ? product : max_product;
            }
        }
    }

    free (len);
    free (mask);
    return max_product;
}