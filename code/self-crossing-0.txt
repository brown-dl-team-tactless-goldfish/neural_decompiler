enum state {
    inwrap,
    mid,
    outwrap
};
bool isSelfCrossing(int* x, int xSize){
    int dir[4] = {0};
    int p = 0;
    #define ADD(n) \
    do {\
        dir[p] = n;\
        p = (p+1) % 4;\
    } while(0)
    #define GET(n) (dir[(p+4-n) % 4])
    enum state s = outwrap;
    for (int i = 0; i < xSize; i++) {
        switch(s) {
            case outwrap:
                if (x[i] > GET(2)) {
                    s = outwrap;
                } else if (x[i] < GET(2) - GET(4)) {
                    s = inwrap;
                } else {
                    s = mid;
                }
                break;
            case mid:
                if (x[i] < GET(2) - GET(4)) {
                    s = inwrap;
                } else {
                    return true;
                }
                break;
            case inwrap:
                if (x[i] >= GET(2)) {
                    return true;
                }
                break;
            default:
                break;
        }
        ADD(x[i]);
    }
    return false;
}
```