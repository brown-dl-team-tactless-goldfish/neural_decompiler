class Solution {
private:
    static bool cmp(vector<int>& a, vector<int>&b){
        return (a[1] - a[0]) < (b[1]-b[0]) ;
    }
public:
    vector<string> maxNumOfSubstrings(string s) {
        int n = s.size() ;
        vector<int>start(26, -1) ;
        vector<int>end(26, -1) ;

        for(int i = 0 ; i < n ; i++){
            int idx = s[i] -'a' ;
            end[idx] = i ;
            if(start[idx] == -1)
                start[idx] = i ;
        }

        vector<vector<int>>intervals ;
        for(int i = 0; i < 26; i++){
            if(start[i] == -1)
                continue ;
            int left = start[i], right = end[i] ;
            bool flag = true ;
            for(int j = left + 1; j <= right; j++){
                if(start[s[j]-'a'] < left){
                    flag = false ;
                    break ;
                }
                right = max(right, end[s[j] -'a']) ;
            }
            if(flag)
                intervals.push_back({left, right}) ;
        }

        sort(intervals.begin(), intervals.end(), cmp) ;
        vector<bool>Valid(intervals.size(), true) ;
        for(int i = 0 ; i < intervals.size(); i++){
            if(Valid[i] == false)
                continue ;
            for(int j = i+1; j < intervals.size(); j++){
                if(Valid[j] == false)
                    continue ;
                if(intervals[j][0] < intervals[i][0] &&  intervals[j][1] > intervals[i][1])
                    Valid[j] = false ;
            }
        }

        vector<string>ret ;
        for(int i = 0; i < intervals.size(); i++){
            if(Valid[i]){
                ret.push_back(s.substr(intervals[i][0], intervals[i][1] - intervals[i][0] + 1) );
            }
        }
        return ret ;
    }
};