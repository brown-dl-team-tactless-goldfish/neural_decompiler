public class Solution {
    private int[] set = null;
    private int components = 0;
    
    public bool ValidateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
        int[] count = new int[n];
        
        set = new int[n];
        components = n;
        
        for (int i = 0; i < n; i++)
            set[i] = i;
        
        for (int i = 0; i < n; i++)
        {
            if (leftChild[i] != -1)
            {
                count[leftChild[i]] += 1;
                Union(i, leftChild[i]);
            }
            
            if (rightChild[i] != -1)
            {
                count[rightChild[i]] += 1;
                Union(i, rightChild[i]);
            }
        }
        
        return count.Where(x => x == 0).ToList().Count == 1 && count.Where(x => x > 1).ToList().Count == 0 && components == 1;
    }
    
    private void Union(int x, int y)
    {
        int px = Find(x),
            py = Find(y);
        
        if (px != py)
        {
            set[x] = py;
            components--;
        }
    }
    
    private int Find(int x)
    {
        if (set[x] != x)
            set[x] = Find(set[x]);
        
        return set[x];
    }
}