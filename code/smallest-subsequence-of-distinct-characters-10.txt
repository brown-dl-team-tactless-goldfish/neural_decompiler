class Solution {
public:
    string smallestSubsequence(string text) {

        map<char, vector<int>> m;
        
        for (int i = 0; i < text.size(); i++) {
            
            char c = text[i];
            
            m[c].push_back(i);
        }
        
        string res;
        
        while (!m.empty()) {
    
            for (auto it = m.begin(); it != m.end(); it++) {
                char c = it->first;
                
                int t = 0;
                
                for (auto& p : m) {

                    if (p.first != c && p.second.back() > it->second.front()) {
                        t++;
                    }
                }
                
                if (t + 1 == m.size()) {
                    
                    for (auto& q : m) {
                        if(q.first != c) {
                            auto tmp = upper_bound(q.second.begin(), q.second.end(), it->second.front());
                            q.second.erase(q.second.begin(), tmp);
                        }
                    }
                    
                    m.erase(c);
                    
                    res += c;
                    
                    break;
                }
            }
        }
        
        return res;
    }
};