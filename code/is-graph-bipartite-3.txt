class Solution {
public:
    bool color_it(vector<vector<int>>& graph, int start, int* color) {
        queue<int> Q;
        int curr = 0;
        Q.push(start);
        color[start] = curr;
        while(! Q.empty()) {
            int edge = Q.front();
            Q.pop();
            
            for(int ver : graph[edge]) {
                if(color[ver] == color[edge]) return false;
                if(color[ver] == 2) {
                    color[ver] = 1 - color[edge];
                    Q.push(ver);
                }
            }
            curr = 1 - curr;
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        int color[n];
        fill_n(color, n, 2);
        
        bool ans = true;
        for(int i = 0; i < n; i++){
            if(color[i] == 2) ans = ans && color_it(graph, i, color);
        }
        return ans;
    }
};