def validChange(self, s1, s2):
    num_diff = 0

    for idx in range(8):
        if s1[idx] != s2[idx]:
            num_diff += 1

    return num_diff

def minMutation(self, start, end, bank):
    """
    :type start: str
    :type end: str
    :type bank: List[str]
    :rtype: int
    """
    # #print "start = ", start

    class local:
        steps = float('inf')
        path = ""

    # num_diff = self.validChange(start, end)
    # #print "num_diff = ", num_diff
    def helper(curPath, curS, curSteps):
        #print "curS = ", curS
        #print "curPath = ", curPath
        #print "curSteps = ", curSteps

        if curS == end:
            #print "found result, curS == end = ", (curS == end)
            #print "curSteps = ", curSteps
            if curSteps < local.steps:
                local.steps = curSteps
                local.path = curS
                return

        for candidate in bank:
            #print "candidate = ", candidate

            if candidate in curPath:
                #print "this one has been used"
                continue
            elif self.validChange(candidate, curS) != 1:
                #print "this one is more than one difference"
                continue
            else:
                #print "try this one"
                helper(curPath+"~"+candidate, candidate, curSteps+1)

    helper("", start, 0)

    #print "end local.steps = ", local.steps
    #print "end local.path = ", local.path

    if local.path.endswith(end):
        return local.steps
    else:
        return -1