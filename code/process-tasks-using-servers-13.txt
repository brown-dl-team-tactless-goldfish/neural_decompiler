class Solution {
public:
    vector<int> assignTasks(vector<int>& servers, vector<int>& tasks) {
        priority_queue<array<int, 2>, vector<array<int, 2>>, greater<>> free;
        priority_queue<array<int, 3>, vector<array<int, 3>>, greater<>> busy; 
        
        for (int i = 0; i < size(servers); ++i) 
            free.push({servers[i], i}); 
        
        vector<int> ans; 
        for (int t = 0; t < size(tasks); ++t) {
            while (size(busy) && busy.top()[0] <= t) {
                auto [tm, wt, i] = busy.top(); busy.pop(); 
                free.push({wt, i}); 
            }
            
            if (size(free)) {
                auto [wt, i] = free.top(); free.pop(); 
                ans.push_back(i); 
                busy.push({t + tasks[t], wt, i}); 
            } else {
                auto [tm, wt, i] = busy.top(); busy.pop(); 
                ans.push_back(i);
                busy.push({tm + tasks[t], wt, i}); 
            }
        }
        return ans; 
    }
};