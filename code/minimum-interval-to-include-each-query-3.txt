using PII = pair<int, int> ; 
class Solution {
public:
    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {
        priority_queue<PII, vector<PII>, greater<PII>>pq ; // { duration, right} ;
                
        vector<PII>queryPII ;  //pos, index
        for(int i = 0; i < queries.size(); i++){
            queryPII.push_back({queries[i], i}) ;
        }
        
        sort(queryPII.begin(), queryPII.end()) ;
        sort(intervals.begin(), intervals.end()) ;
        
        vector<int>rets(queryPII.size()) ;
        int i = 0 ;
        for(auto [pos, idx] : queryPII){
            while(i < intervals.size() && intervals[i][0] <= pos){
                pq.push({intervals[i][1] - intervals[i][0]+1 , intervals[i][1] }) ;
                i++ ;
            }
            while(!pq.empty() && pq.top().second < pos)
                pq.pop() ;
            
            if(!pq.empty())
                rets[idx] = pq.top().first ;
            else
                rets[idx] = -1 ;
        }
        return rets ;
    }
};