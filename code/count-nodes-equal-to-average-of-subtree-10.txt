/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int c=0,sum=0,l=0;
	// it will find the sum and length of a subtree
    int check(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        sum+=root->val;
        l++;
        check(root->left);
        check(root->right);
        return sum;
    }
    void bi(TreeNode*root)
    {
        if(root==NULL)
            return;
         int k=check(root);
        if(l>0 and k/l==root->val)
            c++;
        l=0,sum=0;
        bi(root->left);
        bi(root->right);
        int a=check(root);
        if(l>0 and a/l==root->val)
            c++;
        l=0,sum=0;
    }
public:
    int averageOfSubtree(TreeNode* root) {
        bi(root);
        return c/2;
    }
};
feel free to ask any doubt