class Solution {
public:
    const int mod = 1e9 + 7;
    const long long INF = 18e9 + 7;
    long long mul(long long a, long long b) {
        return a * b;
    }
    int maxProductPath(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        pair<long long, long long> dp[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(i == 0 && j == 0) {
                    dp[i][j] = {grid[0][0], grid[0][0]};
                    continue;
                }
                long long a = mul(grid[i][j], max((i == 0 ? -INF : dp[i - 1][j].first), (j == 0 ? -INF : dp[i][j - 1].first)));
                long long b = mul(grid[i][j], min((i == 0 ? INF : dp[i - 1][j].second), (j == 0 ? INF : dp[i][j - 1].second)));
                long long c = mul(grid[i][j], min((i == 0 ? INF : dp[i - 1][j].second), (j == 0 ? INF : dp[i][j - 1].second)));
                long long d = mul(grid[i][j], max((i == 0 ? -INF : dp[i - 1][j].first), (j == 0 ? -INF : dp[i][j - 1].first)));
                dp[i][j].first = max(a, b);
                dp[i][j].second = min(c, d);
            }
        }
        return dp[n - 1][m - 1].first < 0 ? -1 : dp[n - 1][m - 1].first % mod;
    }
};