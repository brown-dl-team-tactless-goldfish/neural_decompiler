typedef struct 
{
    int n;
    sem_t foo_;
    sem_t bar_;
    
}FooBar;



FooBar* fooBarCreate(int n) 
{
    

    FooBar* obj = (FooBar*) malloc(sizeof(FooBar));
    obj->n = n;
	//initialize the semaphores
    sem_init(&obj->foo_, 0, 1);
    sem_init(&obj->bar_, 0, 0);
    return obj;
}



void foo(FooBar* obj) 
{
    
    for (int i = 0; i < obj->n; i++) 
    {
		//lock
        sem_wait(&obj->foo_);
           
        // printFoo() outputs "foo". Do not change or remove this line.
        printFoo();
        
		//unlock
        sem_post(&obj->bar_); 
    }
}

void bar(FooBar* obj) 
{
    
    for (int i = 0; i < obj->n; i++) 
    {
		//lock
        sem_wait(&obj->bar_);
		
        // printBar() outputs "bar". Do not change or remove this line.
        printBar();
		
		//unlock
        sem_post(&obj->foo_);
    }
}

void fooBarFree(FooBar* obj) 
{
	//destroy the semaphores
    sem_destroy(&obj->foo_);
    sem_destroy(&obj->bar_);
	//free allocated memory
    free(obj);
    obj = NULL;
}