class FrontMiddleBackQueue {
public:
    stack<int>q,s;      // q as the main queue , s is the supportive stack
    int count=0;
    FrontMiddleBackQueue() {
        
    }
    
    void pushFront(int val) {
        q.push(val);
        count++;
    }
    
    void pushMiddle(int val) {
        int a=count/2;       
        while(a--){
            s.push(q.top());
            q.pop();
        }
        q.push(val);           
        while(!s.empty()){
            q.push(s.top());
            s.pop();
        }
        count++;
    }
    
    void pushBack(int val) {
        while(!q.empty()){
            s.push(q.top());
            q.pop();
            
        }
        s.push(val);
        while(!s.empty()){
            q.push(s.top());
            s.pop();
        }
        count++;
    }
    
    int popFront() {
        if(q.empty()) return -1;
        int a=q.top();
        q.pop();
        count--;
        return a;
    }
    
    int popMiddle() {
        if(q.empty()) return -1;
        int a=ceil(count/2.0);        
        while(a--){
            s.push(q.top());
            q.pop();
        }
        a=s.top();              // s top will contain the value which needs to be removed (middle element here )
        s.pop();
        while(!s.empty()){
            q.push(s.top());
            s.pop();
        }
        count--;
        return a;
    }
    
    int popBack() {
        if(q.empty()) return -1;
        while(!q.empty()){
            s.push(q.top());
            q.pop();
        }
        int a=s.top();
        s.pop();
        count--;
        while(!s.empty()){
            q.push(s.top());
            s.pop();
        }
        return a;
    }
};