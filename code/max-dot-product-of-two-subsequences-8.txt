class Solution {
public:
    using VI = vector<int>;
    static constexpr auto INF = int(1e9 + 7);
    int maxDotProduct(VI& A, VI& B) {
        int M = A.size(),
            N = B.size();
        VI pre(N + 1, -INF), // -INF ensures subsequences of A and B are non-empty
           cur{ pre };
        for (auto i{ 1 }; i <= M; ++i) {
            for (auto j{ 1 }; j <= N; ++j)
                cur[j] = max({
                    A[i - 1] * B[j - 1] + max(0, pre[j - 1]), // case 1: max(0, ...) to add recursive max product only if beneficial
                    pre[j],                                   // case 2: without A[i]
                    cur[j - 1],                               // case 3: without B[j]
                });
            swap(pre, cur);
        }
        return pre[N]; // ðŸŽ¯
    }
};