public class Solution { // Generate Palindromes
    public long KMirror(int k, int n) {
        List<long> vn = new List<long>();
        int len = 1;
        while (vn.Count < n) {
            char[] cur = new char[len];
            MakePalindrome(cur, k.ToString()[0], 0, vn);
            len++;
        }
        
        while (vn.Count > n) vn.RemoveAt(vn.Count - 1);
        long res = 0;
        foreach (long v in vn) res += v;
        return res;
    }
    
    public void MakePalindrome(char[] cur, char k, int idx, List<long> vn) {
        if (idx >= (cur.Length + 1) / 2) { // past the mid point for generating, now need to check
            string s = new string(cur);
            long num10 = ToDecimal(s, k - '0');
            string s10 = num10.ToString();
            
            bool v = true;
            for (int i = 0, j = s10.Length - 1; i < j; ++i, --j) {
                if (s10[i] != s10[j]) {
                    v = false;
                    break;
                }
            }
            
            if (v) 
                vn.Add(num10);
            
        } else { // keep generating outside in, this generates many palindromes for each char i value
            for (char i = '0'; i < k; ++i) {
                if (idx == 0 && i == '0') continue;
                cur[idx] = i;
                cur[cur.Length - 1 - idx] = i;
                MakePalindrome(cur, k, idx + 1, vn);
            }
        }
    }
    
    public long ToDecimal(string s, int k) {
        long res = 0;
        long power = 1;
        for (int i = s.Length - 1; i >= 0; --i) {
            res += (s[i] - '0') * power;
            power *= k;
        }
        return res;
    }
}