

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
struct Frequency
{
    int item;
    int f;
};
int* frequencySort(int* nums, int numsSize, int* returnSize){
for(int sort=1;sort<numsSize;sort++)
    for(int i=0;i<numsSize-sort;i++)
        if(nums[i]>nums[i+1])
        {
            int num=nums[i];
            nums[i]=nums[i+1];
            nums[i+1]=num;
            
        }
    struct Frequency ptr[numsSize];
    int lastindex=-1;
    int i;
    if(numsSize==1)
    {
        lastindex++;
        (ptr+lastindex)->item=nums[0];
        (ptr+lastindex)->f=1;
    }
    else
    {for(i=0;i<numsSize-1;i++)
    { lastindex++;
      (ptr+lastindex)->item=nums[i];
    // printf("item=%d ",(ptr+lastindex)->item);
         int F=1;
     while((i<numsSize-1)&&(nums[i]==nums[i+1]))
     {F++;i++;}
    (ptr+lastindex)->f=F;
     //printf("F=%d \n",(ptr+lastindex)->f);
         
        
    }
    
    
   if((i<numsSize)&&(nums[i]!=nums[i-1]))
    {  lastindex++;
     
       (ptr+lastindex)->item=nums[i];
        (ptr+lastindex)->f=1;
    }
     
    }
    for(int sort=1;sort<=lastindex;sort++)
        for(int i=0;i<lastindex+1-sort;i++)
        {
            if(((ptr+i)->f)>((ptr+i+1)->f))
            {
                int num=(ptr+i)->item;
                (ptr+i)->item=(ptr+i+1)->item;
                (ptr+i+1)->item=num;
                num=(ptr+i)->f;
              (ptr+i)->f =(ptr+i+1)->f;
                (ptr+i+1)->f=num;
                
            }
            if((ptr+i)->f==(ptr+i+1)->f)
            {
                if((ptr+i)->item<(ptr+i+1)->item)
                {
                     int num=(ptr+i)->item;
                (ptr+i)->item=(ptr+i+1)->item;
                (ptr+i+1)->item=num;
                num=(ptr+i)->f;
              (ptr+i)->f =(ptr+i+1)->f;
                (ptr+i+1)->f=num;
                }
            }
            
        }
  
   int d=-1;
   
    for(int i=0;i<=lastindex;i++)
    {
        while((ptr+i)->f)
        {d++;
         nums[d]=(ptr+i)->item;
            ((ptr+i)->f)--;
        }
    }
    *returnSize=numsSize;
    return nums;
    
    
}