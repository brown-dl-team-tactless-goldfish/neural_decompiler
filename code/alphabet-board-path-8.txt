
class Solution {
public:
    string alphabetBoardPath(string target) {
        mBoard = {"abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"};
        string r;
        char prechar = 'a';
        for (char c : target) {
            r += findPath(prechar, c)+"!";
            prechar = c;
        }
        return r;
    }

    string findPath(char prechar, char c) {
	    if (prechar == c) return "";
        if ( (prechar != 'z' && c != 'z') || (prechar=='u' && c=='z' || prechar=='z'&&c=='u'))
            return strFromPos(pos(prechar), pos(c));
        else {
            if (prechar == 'z')
                return findPath('z', 'u') + findPath('u', c);
            else if (c == 'z')
                return findPath(prechar, 'u') + findPath('u', 'z');
        }
        return "";
    }

    string strFromPos(const pair<int, int>& pos1, const pair<int, int>& pos2) {
        string r;
        int xDiff = pos2.first - pos1.first;
        while (xDiff < 0) { r += 'U'; xDiff++; }
        while (xDiff > 0) { r += 'D'; xDiff--; }

        int yDiff = pos2.second - pos1.second;
        while (yDiff < 0) { r += 'L'; yDiff++; }
        while (yDiff > 0) { r += 'R'; yDiff--; }

        return r;
    }

    pair<int, int> pos(char c) {
        for (int i = 0; i < mBoard.size(); ++i)
            for (int j = 0; j < mBoard[i].size(); ++j)
                if (mBoard[i][j] == c) return { i,j };
        return { 0,0 };
    }
    
private:
    vector<string>mBoard;
};