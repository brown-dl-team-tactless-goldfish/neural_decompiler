#define N 26

typedef struct Trie{
    struct Trie* children[N];
    bool is_leaf;
}Trie;

Trie* trieCreate() {
    Trie* node = malloc(sizeof(Trie));
    for(int i = 0; i < N; i++){
        node->children[i] = NULL;
    }
    node->is_leaf = false;
    return node;
}
int cmp(const void* a, const void* b){
    char* A = *(char**)a;
    char* B = *(char**)b;
    return strlen(A) - strlen(B);
}

bool trieInsert(Trie* obj, char * word) {
    Trie* tmp = obj;
    for(int i = 0; word[i] != '\0'; i++){
        if(word[i] == '/')
            continue;
        int idx = word[i] - 'a';
        if(tmp->children[idx] && tmp->children[idx]->is_leaf && (word[i+1] == '/' || word[i+1] == '\0'))
            return false;
        if(tmp->children[idx] == NULL){
            tmp->children[idx] = trieCreate();
        }
        tmp = tmp->children[idx];
    }  
    tmp->is_leaf = true;
    return true;
}


char ** removeSubfolders(char ** folder, int folderSize, int* returnSize){
    qsort(folder, folderSize, sizeof(char*), cmp);
    char** ans = malloc(folderSize * sizeof(char*));
    int idx_a = 0 ;
    Trie* root = trieCreate();;
    for(int i =0; i < folderSize; i++){
        if(trieInsert(root, folder[i])){
            ans[idx_a] = folder[i];
            idx_a++;
        }    
    }
    *returnSize = idx_a;
    return ans;
}