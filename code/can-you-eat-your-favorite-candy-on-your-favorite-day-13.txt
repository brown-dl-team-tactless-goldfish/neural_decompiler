vector<bool> canEat(vector<int>& cand, vector<vector<int>>& q) {
    int n = q.size();
    vector<bool>c;
    vector<long long int>pre(cand.size(),0);
    pre[0] = cand[0];
    for(int i=1;i<cand.size();i++){
        pre[i] = pre[i-1]+cand[i];
    }
    for(int i=0;i<n;i++){
        long long int u = q[i][0];
        long long int v = q[i][1];
        long long int w = q[i][2];
        if(u==0){
            if(v+1<=pre[0]){
                c.push_back(true);
            }else{
                c.push_back(false);
            }
        }else{
            if(pre[u-1]+1<=(v+1)*w && (pre[u])>=(v+1)){
                c.push_back(true);
            }else{
                c.push_back(false);
            }
        }
    }
    return c;
}