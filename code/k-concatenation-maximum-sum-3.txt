int Kadanes(int* nums, int numsSize)
{   
  int max_sum=nums[0];
  int current_sum=nums[0];

  for(int i=1; i<numsSize; i++) 
  {
    if (current_sum >= 0)
        current_sum+= nums[i];
    else
        current_sum=nums[i];
     
    if(current_sum > max_sum )
        max_sum = current_sum;
  }
  return max_sum;
}    

int kConcatenationMaxSum(int* arr, int arrSize, int k)
{
    long sum=0,result;
    
    if(k==1)
    {
        result=Kadanes(arr,arrSize);
    }
    else
    {   
        int *B = (int *)malloc(sizeof(int) * 2*arrSize);
        int j=0;
        
        for(int i=0;i<arrSize;i++)
            sum+=arr[i];

        for(int i=0;i<2*arrSize;i++)
        {
            B[i]=arr[j];
            j++;
            if(j==arrSize)
                j=0;
        } 
        if(sum<0)
            result=Kadanes(B,2*arrSize);
        else 
            result=Kadanes(B,2*arrSize)+(k-2)*sum;
    }
    if(result<0)  
        return 0;
    else
        return result%(1000000007);
}

 