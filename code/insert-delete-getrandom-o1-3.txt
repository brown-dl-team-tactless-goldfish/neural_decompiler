struct mapStruct{
    int key;
    int value;
    UT_hash_handle hh;
};

typedef struct {
    int index;
    int *randomArray;
    struct mapStruct* map;
} RandomizedSet;

RandomizedSet* randomizedSetCreate() {
    RandomizedSet* node = (RandomizedSet*)malloc(sizeof(RandomizedSet));
    node->randomArray = (int*)malloc(6000 * sizeof(int));
    node->map = NULL;
    node->index = 0;
    return node;
}

bool randomizedSetInsert(RandomizedSet* obj, int val) {
    struct mapStruct *temp;
    HASH_FIND_INT(obj->map, &val, temp);
    if(temp != NULL){   //if val is already present in hashmap
        return false;
    } else {
        temp = (struct mapStruct*)malloc(sizeof(struct mapStruct));
        temp->key   = val;
        temp->value = obj->index;
        HASH_ADD_INT(obj->map, key, temp);
        obj->randomArray[obj->index++] = val;
    }
    return true;
}

bool randomizedSetRemove(RandomizedSet* obj, int val) {
    struct mapStruct *toDelete;

    HASH_FIND_INT(obj->map, &val, toDelete);
    if(toDelete != NULL){
        if(obj->index > 1){ //If more than 1 elements exists
            //find the last value from array
            int topVal = obj->randomArray[obj->index-1];    //To save the top value from the array to decrease obj->index value
            //find the index of val from hashmap
            int tempIndex = toDelete->value;                //copy top value to this tempIndex
            struct mapStruct *toReplace = (struct mapStruct*)malloc(sizeof(struct mapStruct));
            toReplace->key   = topVal;                      //Copy key:value pair to replacein the map
            toReplace->value = tempIndex;
            struct mapStruct *replaced;
            //Update the hashmap
            HASH_REPLACE_INT(obj->map, key, toReplace, replaced);   //Change the key:value pair and pdate the array
            //put the last value topVal at tempIndex in the array
            obj->randomArray[tempIndex] = topVal;
        }
        //Delete the element from hashmap
        HASH_DEL(obj->map, toDelete);
        /* Confirm if Delete has happened: There was some bug in uthash */
        HASH_FIND_INT(obj->map, &val, toDelete);
        if(toDelete != NULL){
            HASH_DEL(obj->map, toDelete);
        }
        obj->index--; //remove the last element from array
        return true;
    }
    return false;
}

int randomizedSetGetRandom(RandomizedSet* obj) {
    int index = rand() % obj->index;
    return obj->randomArray[index];
}

void randomizedSetFree(RandomizedSet* obj) {
    struct mapStruct *current_user, *tmp;

    HASH_ITER(hh, obj->map, current_user, tmp) {
        HASH_DEL(obj->map, current_user);  /* delete;  advances to next */
        free(current_user);             /* optional- if you want to free  */
    } 
    free(obj->randomArray);
    free(obj);
}

/**
 * Your RandomizedSet struct will be instantiated and called as such:
 * RandomizedSet* obj = randomizedSetCreate();
 * bool param_1 = randomizedSetInsert(obj, val);
 
 * bool param_2 = randomizedSetRemove(obj, val);
 
 * int param_3 = randomizedSetGetRandom(obj);
 
 * randomizedSetFree(obj);
*/