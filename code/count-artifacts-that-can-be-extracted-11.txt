#include <unordered_set>
#include <unordered_map>
class Solution {
public:
    int digArtifacts(int n, vector<vector<int>>& artifacts, vector<vector<int>>& digs) {
		// grid.first: represents a grid [row,col]
		// grid.second: the id of the artifact, represents which artfact this grid belongs to
        unordered_map<int,int> grid;
		// sizes.first: the id of the artifact
		// sizes.second: the size of this artifact
        unordered_map<int,int> sizes;
        for(int i=0; i<artifacts.size(); i++){
            int r1 = artifacts[i][0];
            int c1 = artifacts[i][1];
            int r2 = artifacts[i][2];
            int c2 = artifacts[i][3];
            int size = 0;
            for(int r=r1; r<=r2; r++){
                for(int c=c1; c<=c2; c++){
                    grid[r*n+c] = i;
                    size ++;
                }
            }
            sizes[i] = size;
        }
        int count = 0;
		// found.first: the id of the artifact
		// found.second: the discovered size of the artifact
        unordered_map<int,int> found;
        for(auto dig: digs){
            int r = dig[0];
            int c = dig[1];
            if(grid.find(r*n+c)!=grid.end()){
                found[grid[r*n+c]] ++;
                if(found[grid[r*n+c]]==sizes[grid[r*n+c]]){
                    count ++;
                }
            }
        }
        return count;
    }
};