class Solution {
    enum BoxStatus {
        BOX_UNKNOWN = 0,
        BOX_KNOWN = 1,
        BOX_OPEN = 2,
        BOX_VISITED = 3
    };
public:
    int maxCandies(vector<int>& status, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, vector<int>& initialBoxes) {
        vector<int> boxStatus(status.size(), BOX_UNKNOWN); 
        queue<int> openBoxQ;
        for (auto b: initialBoxes)
            boxStatus[b] = BOX_KNOWN;
        for (auto b: initialBoxes) {
            if (status[b]) {
                boxStatus[b] = BOX_OPEN;
                openBoxQ.push(b);
            }   
        }
        int res = 0;
        while (!openBoxQ.empty()) {
            auto box = openBoxQ.front(); openBoxQ.pop();
            boxStatus[box] = BOX_VISITED;
            res += candies[box];
            for (auto k: keys[box]) {
                status[k] = 1;
                if (boxStatus[k] == BOX_KNOWN) {
                    boxStatus[k] = BOX_OPEN;
                    openBoxQ.push(k);
                } 
            }
            for (auto b: containedBoxes[box]) {
                if (status[b] && (boxStatus[b] == BOX_UNKNOWN || boxStatus[b] == BOX_KNOWN)) {
                    boxStatus[b] = BOX_OPEN;
                    openBoxQ.push(b);
                } else {
                    boxStatus[b] = BOX_KNOWN;
                }
            }
        }
        return res;
    }
};