class Solution:
    def destroyTargets(self, nums: list[int], space: int) -> int:
        
        # [1] group all digits into equivalence classes
        #     according to their remainder modulo 'space'
        rem = defaultdict(list)
        for n in nums: rem[n%space].append(n)
        
        # [2] sort by size of each equivalence class (larger classes come first)
        srt = sorted(list(rem.items()), key=lambda x: len(x[1]), reverse=True)
        
        # [3] get size of the larget equivalence class
        max_size = len(srt[0][1])
        
        # [4] well, there might be many equivalence classes with
        #     the same size; let's iterate over them...
        min_num = 10**9+1
        for _, eq in srt:
            if len(eq) != max_size: break
            #[5] ...and take minimal value from each class
            min_num = min(min_num, min(eq))
        
        return min_num