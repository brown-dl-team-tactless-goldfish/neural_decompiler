#include <stdlib.h>

static void traverse(struct TreeNode* root, int **result, int *retcol, int level)
{
    if (root == NULL) return;

    result[level][retcol[level]++] = root->val;
    traverse(root->left, result, retcol, level + 1);
    traverse(root->right, result, retcol, level + 1);
}
static void getdepth(int *maxdepth, int currentdepth, struct TreeNode* root)
{
    if (*maxdepth < currentdepth) *maxdepth = currentdepth;
    if (root == NULL) return;
    getdepth(maxdepth, currentdepth+1, root->left);
    getdepth(maxdepth, currentdepth+1, root->right);
}
int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    // Get return size
    *returnSize = 0;
    getdepth(returnSize, 0, root);
    
    // Array of arrays for each level
    int **result = (int **) malloc((*returnSize) * sizeof(int*));
    
    // Array of results at each level
    for (int i = 0; i < (*returnSize); i++)
        result[i] = (int *)malloc(1024 * sizeof(int));
    
    // Sizes at each level
    *returnColumnSizes =  (int*)calloc((*returnSize), sizeof(int*));
    
    traverse(root, result, *returnColumnSizes, 0);
    
    return result;

}