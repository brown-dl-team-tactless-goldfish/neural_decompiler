class Solution {
public:
    // prime factorization
    unordered_map<int,int> factors(long long n) {
        unordered_map<int,int> umap;
        for (int x = 2; x*x <= n; x++) {
            while (n%x == 0) {
                umap[x]++;
                n /= x;
            }
        }
        if (n > 1) umap[n]++;
        return umap;
    }
    int sumFourDivisors(vector<int>& nums) {

        long long ans=0;
        for(long long c : nums) {
            // find prime factors of N
            unordered_map<int,int> umap = factors(c);
            
            long long n_factors=1;
            long long ans_temp=1;
            
            // number of factors = (a+1)(b+1)(c+1)...so on
            // sum of factors  = sum of gp of PF1 * sum of gp of PF2 ... so on 
            for(auto x: umap) {
                
                n_factors*=x.second+1;
                
                // sum of factors formula // gp
                ans_temp*= ((pow(x.first,x.second+1)-1)/(x.first-1));
            }
            
            // add sum of factors to answer
            if(n_factors==4) {
                ans+=ans_temp;
            }
            
        }
        return (int)ans;
        
    }
};