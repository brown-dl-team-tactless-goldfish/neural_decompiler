    public string LongestDupSubstring(string S)
    {
        const int Base = 26;
        const long Mod = long.MaxValue / Base - Base;
        int low = 1;
        int high = S.Length - 1;
        string maxStr = "";

        while (low <= high)
        {
            int mid = (low + high) / 2;
            long hash = 0L;
            long multi = 1L;
            bool found = false;
            var set = new HashSet<long>();
            for (int i = 0; i < mid; ++i)
            {
                hash = (hash * Base + S[i] - 'a' + 1) % Mod;
                multi = multi * Base % Mod;
            }
            set.Add(hash);

            for (int i = mid; i < S.Length; ++i)
            {
                hash = (hash * Base - (S[i - mid] - 'a' + 1) * multi + S[i] - 'a' + 1) % Mod;
                if (hash < 0) hash += Mod;
                if (set.Contains(hash))
                {
                    low = mid + 1;
                    found = true;
                    maxStr = S.Substring(i - mid + 1, mid);
                    break;
                }
                set.Add(hash);
            }

            if (!found) high = mid - 1;
        }

        return maxStr;
    }