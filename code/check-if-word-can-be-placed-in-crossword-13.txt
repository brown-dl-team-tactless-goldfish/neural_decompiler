class Solution { 
    bool compare(string& a, string& b)
    {
        if (a.size() != b.size())
            return false;
        int n = a.size();
        bool revfail = false, forfail = false;
        for(int i=0; i<n; i++)
        { 
            if (a[i] != ' ' && a[i] != b[i])
                forfail = true;
            if (a[n-i-1] != ' ' && a[n-i-1] != b[i])
                revfail = true;
            if (forfail && revfail)
                return false;
        } 
        return true; 
    }

public:
    bool placeWordInCrossword(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();
        vector<int> mod[2];
        mod[0] = {n, m, 1};//vertical
        mod[1] = {m, n, 0};//horizon
        for (int k=0; k<2; k++)
        {
            for(int i=0; i<mod[k][0]; i++)
            {
                int j=0;
                while(j<mod[k][1])
                {
                    int v = mod[k][2]?board[j][i]:board[i][j];
                    string tmp;
                    while(v!='#')
                    {
                        tmp.push_back(v);
                        j++;
                        if (j>=mod[k][1])
                            break;
                        v = mod[k][2]?board[j][i]:board[i][j];
                    }
                    if (compare(tmp, word))
                        return true; 
                    j++;
                }
            }
        }
        return false;
    }
};