using LL = long long ;
LL M = 1e9 + 7 ;
class Solution {
private:
    int m, n ;
    int dirs[4][2] = {{1, 0},{-1,0},{0,1},{0,-1}} ;
    LL dfs(vector<vector<int>>& grid, int i, int j, vector<vector<LL>>&dp){
        if(dp[i][j] > 0)
            return dp[i][j] ;
        dp[i][j] = 1 ;
        for(int k = 0; k < 4; k++){
            int xx = i + dirs[k][0] ;
            int yy = j + dirs[k][1] ;
            if(xx < 0 || yy < 0 || xx >= m || yy >= n)
                continue ;
            if(grid[xx][yy] <= grid[i][j])
                continue ;
 
            dp[i][j] = (dp[i][j] + dfs(grid, xx, yy, dp) ) % M ;
        }
        return dp[i][j] ;
    }
public:
    int countPaths(vector<vector<int>>& grid) {
        m = grid.size() ;
        n = grid[0].size() ;
        auto dp = vector<vector<LL>>(m, vector<LL>(n)) ;
        LL ret = 0 ;
        for(int i = 0; i < m ; i++){
            for(int j = 0; j < n; j++){
                ret = (ret + dfs(grid, i, j, dp)) % M ;
            }
        }
        return ret ;
    }
};