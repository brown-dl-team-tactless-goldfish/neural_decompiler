public class Solution 
{
    private readonly int[] dr = new int[] { -1, 1, 0, 0 };
    private readonly int[] dc = new int[] { 0, 0, -1, 1 };
     
    public int FindPaths(int m, int n, int maxMove, int startRow, int startColumn) 
    {
        return DFS(m, n, maxMove, startRow, startColumn, new Dictionary<(int, int, int), int>());
    }
    
    private int DFS(int m, int n, int move, int r, int c, IDictionary<(int, int, int), int> memo)
    {
        if (r < 0 || r >= m || c < 0 || c >= n)
        {
            return 1;
        }
        
        if (move == 0)
        {
            return 0;
        }
        
        if (memo.ContainsKey((r, c, move)))
        {
            return memo[(r, c, move)];
        }
        
        int path = 0;
        for (int i = 0; i < 4; i++)
        {
            path = (path + DFS(m, n, move - 1, r + dr[i], c + dc[i], memo)) % 1000000007;
        }
        memo[(r, c, move)] = path;
		
        return path;
    }
}