/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode RecoverFromPreorder(string traversal) {
        TreeNode[] helper = new TreeNode[1000];

        int depth = 0;
        int val = 0;
        for(int i=0; i<traversal.Length; i++)
        {
            char c = traversal[i];
            if (c == '-'){
                depth++;
            }
            else if (c <= '9' && c >= '0'){
                val = val * 10 + (c - '0');
                if (i == traversal.Length-1 || traversal[i+1] == '-')
                {
                    helper[depth] = new TreeNode(val);
                    if (depth > 0)
                    {
                        if (helper[depth-1].left == null)   
                            helper[depth-1].left = helper[depth];
                        else
                            helper[depth-1].right = helper[depth];
                    }
                    depth = 0;  
                    val = 0; 
                }             
            }
        }

        return helper[0];
    }
}