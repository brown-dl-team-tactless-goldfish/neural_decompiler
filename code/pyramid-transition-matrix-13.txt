class Solution {
public:
    bool pyramidTransition(string bottom, vector<string>& allowed) {
        vector<string> v(49);
        for (string& s : allowed) v[(s[0] - 'A') * 7 + (s[1] - 'A')].push_back(s[2]);
        return helper(v, bottom, "");
    }
    bool helper(vector<string>& v, string bottom, string build)
    {
        int n = build.length();
        if (bottom.length() == 1) return true;
        if (bottom.length() == n + 1) return helper(v, build, "");
        for (char& c : v[(bottom[n] - 'A') * 7 + (bottom[n+1] - 'A')]) if (helper(v, bottom, build + c)) return true;
        return false;
    }
};