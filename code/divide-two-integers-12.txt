struct list{
    int val;
    int pow;
    struct list *next;
};

struct list* createNode(int val, int pow){
    struct list* node = (struct list*)calloc(1, sizeof (struct list));
    node->val = val;
    node->pow = pow;
    node->next = NULL;
    return node;
}

struct list* insertNode(struct list* head, int val, int pow){
    struct list* node = createNode(val, pow);
    node->next = head;
    head = node;
    return head;
}

void clearList(struct list *head){
    struct list* temp = head;
    while (head != NULL){
        temp = head;
        head = head->next;
        free(temp);
        temp = NULL;
    }
}


int divide(int dividend, int divisor){
    //return 0;
    if(dividend == INT_MIN && divisor == -1)
        return INT_MAX;
    
    if(dividend == INT_MIN && divisor == 1)
        return INT_MIN;
    
    //Make numbers -ve and check if 1 no. is -ve   
    int sign = 2;
    
    if (dividend > 0){
        sign--;
        dividend = -dividend;
    }
    
    if (divisor > 0){
        sign--;
        divisor = -divisor;
    }
    
    
    int temp = divisor;
    int count = 1;
    int res = 0;
    struct list* head = createNode(temp, count);
    
    
    while (temp >= dividend){
        if(temp < (INT_MIN >> 1) || (temp >=  ((INT_MAX) >> 1))){
            break;
        }
        if(count > (INT_MAX >> 1))
            return INT_MAX;
        temp += temp ;
        count = count << 1;
        head = insertNode(head, temp, count);
    }    
    struct list* copy = head;
    while (divisor >= dividend){
        if(copy->val < dividend){
            copy = copy->next;
            continue;
        }        
        dividend =  -(copy->val - dividend);
        res = res + copy->pow;
    }
    clearList(head);
    
    if (sign == 1){
        res = -res;
    }
    return res;
}