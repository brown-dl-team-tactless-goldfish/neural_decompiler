class Solution {
public:
    #define ll long long
    vector<vector<int>> graph;
    int n;
    bool doesLie(vector<int> &b1, vector<int> &b2)  {
        int x1 = b1[0], y1 = b1[1], r1 = b1[2];
        int x2 = b2[0], y2 = b2[1];
        long long res = (ll)(x1 - x2)*(x1 - x2) + (ll)(y1 - y2)*(y1 - y2) - (ll)r1*r1;
        return res <= 0;
    }
    
    void dfs(int u, int &curAns, vector<bool> &vis) {
        vis[u] = true;
        curAns++;
        for(int v : graph[u]) {
            if(!vis[v]) dfs(v, curAns, vis);
        }
    }
    
    
    int maximumDetonation(vector<vector<int>>& bombs) {
        n = bombs.size();
        graph.resize(n);
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(i == j) continue;
                
                vector<int> u = bombs[i];
                vector<int> v = bombs[j];
                if(doesLie(u, v)) graph[i].push_back(j);
            }
        }
        
        int ans = 0;
         
        for(int u = 0; u < n; u++) {
            vector<bool> vis(n, false);
            int curAns = 0;
            dfs(u, curAns, vis);
            ans = max(ans, curAns);
        }
        
        
        return ans;
    }
};