class Solution {
    vector<vector<int>> adj;
    vector<bool> visited;
    vector<bool> done;
    vector<vector<int>> c;
    int answer = 0;
    string color = "";
    bool cycle = false;
public:
    void dfs(int node){
        visited[node] = true;
        for (int v: adj[node]){
             if (visited[v]){
                cycle = true;
                continue;
            }
            if (done[v]){
                for (int i =0;i<26;i++){
                    c[node][i] = max(c[node][i],c[v][i]) ;
                }
                continue;
            }
            dfs(v);
            for (int i =0;i<26;i++){
                 c[node][i] = max(c[node][i],c[v][i]) ;
            }
        }
        c[node][color[node]-'a']++;
        answer = max(answer,c[node][color[node]-'a']);
        visited[node] = false;
        done[node] = true;
    }
  
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        color = colors;
        int n = color.length();
        adj = vector<vector<int>> (n);
        visited = vector<bool> (n);
        done = vector<bool> (n);
        c = vector<vector<int>> (n,vector<int> (26));
        for (auto x: edges){
            adj[x[0]].push_back(x[1]);
        }
        for (int i =0;i<n;i++){
            if (!done[i]) dfs(i);
        }
        if (cycle) return -1;
       
        return answer;
    }
};