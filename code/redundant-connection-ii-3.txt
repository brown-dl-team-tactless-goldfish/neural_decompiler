public class Solution {
    private int[] set = null;
    
    public int[] FindRedundantDirectedConnection(int[][] edges) {
        if (edges == null || edges.Length == 0)
            return new int[] { };
        
        int[] relations = new int[edges.Length + 1],
              candidate1 = null,
              candidate2 = null;
        
        set = new int[edges.Length + 1];
        
        for (int i = 1; i < set.Length; i++)
            set[i] = i;
        
        foreach (var edge in edges)
            if (relations[edge[1]] != 0)
            {
                candidate1 = new int[] { relations[edge[1]], edge[1]};
                candidate2 = new int[] { edge[0], edge[1] };
                
                edge[1] = 0;
                
                break;
            }
            else
                relations[edge[1]] = edge[0];
        
        foreach (var edge in edges)
            if (edge[1] != 0 && !Union(edge[0], edge[1]))
                    return candidate1 ?? edge;
        
        return candidate2;
    }
    
    private bool Union(int x, int y)
    {
        int px = Find(x),
            py = Find(y);
        
        if (px != py)
            set[px] = py;
        
        return px != py;
    }
    
    private int Find(int x)
    {
        if (x != set[x])
            set[x] = Find(set[x]);
        
        return set[x];
    }
}