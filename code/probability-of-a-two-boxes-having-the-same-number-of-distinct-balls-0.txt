#include <stdio.h>
#include <stdlib.h>

void calcWays(int splitIndex, long long currentWays, int *powers, long long *waysEven, long long *waysUneven, int numBalls, int *ballsLeft, int *balls, int ballsSize, int leftGroups, int rightGroups);
int minCustom(int op1, int op2);
int maxCustom(int op1, int op2);
int findNumBalls(int* balls, int ballsSize);
int nChooseK(int *powers, int n, int k);
int * fillPowers(int powersSize);
int * fillBallsLeft(int ballsSize, int *balls);
double divide(long long numerator, long long denominator);

double getProbability(int* balls, int ballsSize) {
  int *powers = fillPowers(7);

  int splitIndex = 0;
  long long currentWays = 1;
  long long waysEven = 0;
  long long waysUneven = 0;
  int numBalls = findNumBalls(balls, ballsSize);
  int leftGroups = 0;
  int rightGroups = 0;

  int *ballsLeft = fillBallsLeft(ballsSize, balls);

  calcWays(splitIndex, currentWays, powers, &waysEven, &waysUneven, numBalls/2, ballsLeft, balls, ballsSize, leftGroups, rightGroups);
  return divide(waysEven, waysEven + waysUneven);
}

void calcWays(int splitIndex, long long currentWays, int *powers, long long *waysEven, long long *waysUneven, int numBalls, int *ballsLeft, int *balls, int ballsSize, int leftGroups, int rightGroups) {
  if(splitIndex == ballsSize) {
    if(leftGroups != rightGroups) {
      *waysUneven += currentWays;
    } else {
      *waysEven += currentWays;
    }
  } else {
    int lowerBound = maxCustom(numBalls - ballsLeft[splitIndex], 0);
    int upperBound = minCustom(balls[splitIndex], numBalls);
    for(int i = lowerBound; i <= upperBound; i++) {
      int leftGroupIncrease = (i == 0)? 0: 1;
      int rightGroupIncrease = (i == balls[splitIndex])? 0: 1;
      calcWays(splitIndex+1, currentWays * nChooseK(powers, balls[splitIndex], i), powers, waysEven, waysUneven, numBalls-i, ballsLeft, balls, ballsSize, leftGroups+leftGroupIncrease, rightGroups+rightGroupIncrease);
    }
  }
}

int minCustom(int op1, int op2) {
  if(op1 > op2) {
    return op2;
  }
  return op1;
}

int maxCustom(int op1, int op2) {
  if(op1 > op2) {
    return op1;
  }
  return op2;
}

int findNumBalls(int* balls, int ballsSize) {
  int numBalls = 0;
  for(int i = 0; i < ballsSize; i++) {
    numBalls += balls[i];
  }
  return numBalls;
}

int nChooseK(int *powers, int n, int k) {
  int numerator = powers[n];
  int denominator = powers[k] * powers[n-k];
  return numerator / denominator;
}

int * fillPowers(int powersSize) {
  int *powers = (int*) malloc(powersSize * sizeof(int));
  powers[0] = 1;
  for(int i = 1; i < powersSize; i++) {
    powers[i] = i * powers[i-1];
  }
  return powers;
}

int * fillBallsLeft(int ballsSize, int *balls) {
  int *ballsLeft = (int*) malloc(ballsSize * sizeof(int));

  int trackBallsLeft = 0;
  for(int i = ballsSize-1; i >= 0; i--) {
    ballsLeft[i] = trackBallsLeft;
    trackBallsLeft += balls[i];
  }

  return ballsLeft;
}

double divide(long long numerator, long long denominator) {
  return (double) numerator / denominator;
}