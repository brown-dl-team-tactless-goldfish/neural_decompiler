class Solution {
public:
    vector<string> braceExpansionII(string exp) {
        int i = 0;
        auto res = helper(exp, i);
        
        vector<string> ans(res.begin(), res.end());
        sort(ans.begin(), ans.end());
        return ans;
    }
    
    unordered_set<string> helper(string& exp, int& i){
        unordered_set<string> res, tmp;
        for ( ; i < exp.size(); i++){
            if (exp[i] == '{'){
                auto subres = helper(exp, ++i);
                if (tmp.empty()){
                    tmp = move(subres);
                }else {
                    unordered_set<string> tmp2;
                    for (auto& s1 : tmp){
                        for (auto& s2 : subres){
                            tmp2.insert(s1+s2);
                        }
                    }
                    tmp = move(tmp2);
                }
            } else if (exp[i] == '}') {
                if (res.empty()) return tmp;
                
                for (auto& s : tmp) res.insert(s);
                return res;
            } else if (exp[i] == ',') {
                for (auto& s : tmp) res.insert(s);
                tmp.clear();
            } else {
                string s({exp[i]});
                while (i+1 < exp.size() && exp[i+1] >= 'a' && exp[i+1] <= 'z'){
                    s.push_back(exp[++i]);
                }
                if (tmp.empty()) {
                    tmp.insert(s);
                } else {
                    unordered_set<string> tmp2;
                    for (auto& s1 : tmp){
                        tmp2.insert(s1+s);
                    }
                    tmp = move(tmp2);
                }
            }
        }
        if (res.empty()) return tmp;
        
        for (auto& s : tmp) res.insert(s);
        return res;
    }
};