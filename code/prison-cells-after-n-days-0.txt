/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int helper(int* cells, int* tmp, int cellsSize){
    int val = 0; 
    for( int i = 1 ; i < cellsSize-1; i++){
        if(cells[i-1] == cells[i+1])
            tmp[i] = 1 ;
        else
            tmp[i] = 0 ;
        val = val * 2 + tmp[i] ;
    }
    return val ;
}

int* prisonAfterNDays(int* cells, int cellsSize, int n, int* returnSize){
    *returnSize =  cellsSize ;
    int hash[128][2] ; 
    int* tmp = calloc(cellsSize , sizeof(int)) ;
    for(int i = 0; i < 128; i++){
        hash[i][0] =  -1 ;
    }
    int point ;
    int cycle ;
    int base ;
    for(int i = 1; i <= n; i++){
        int val = helper(cells, tmp, cellsSize ) ;
        if(hash[val][0] == -1){
            hash[val][0] = i ;
            hash[val][1] = val ;
        }
        else{
            point = hash[val][0]  ;
            cycle =( i - point ) ;
            base = hash[val][1] ;
            break ;
        }
        if(i == n)
            return tmp ;
        memcpy(cells, tmp, 8*sizeof(int) ) ;
    }
    //get cycle and base value and point
    n = (n - point) % cycle  + point ;
    int final ;
    //find final value
    for(int i = 0; i < 128; i++){
        if(hash[i][0] == n){
            final = hash[i][1] ;
            break ;
        }
    }   
    //put final to array and return 
    for(int i = 6; i >=1 ;i--){
        tmp[i] = final % 2 ;
        final /= 2 ;
    }
    return tmp ;
}