/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
    void swap(int *x, int *y){
        int temp = *x;
        *x = *y;
        *y = temp;
    }
    
    void heapify(int nums[],int numsSize, int a){
        int largest = a;
        int l_child = 2*a+1;
        int r_child = 2*a+2;

        if(l_child<numsSize && nums[l_child]>nums[largest]){
            largest=l_child;
        }
        if(r_child<numsSize && nums[r_child]>nums[largest]){
            largest=r_child;
        }
        if(largest!=a){
            swap(&nums[a],&nums[largest]);
            heapify(nums,numsSize,largest);
        }
    }

    void create_heap(int nums[],int numsSize){
        int last_node=(numsSize/2)-1;
        for(int i=last_node; i>=0; i--){
            heapify(nums,numsSize,i);
        }
    }

    void heap_sort(int nums[], int numsSize){
        for(int i=numsSize-1; i>=0; i--){
            swap(&nums[0],&nums[i]);
            heapify(nums,i,0);
        }
    }
int* sortArray(int* nums, int numsSize, int* returnSize){
    //swap(&x,&y);
    // heapify(nums,numsSize,a);
    create_heap(nums,numsSize);
    heap_sort(nums,numsSize);

    *returnSize=numsSize;
    return nums;

}