int checkDigit(int val){
    int digit = 0 ;
    while(val){
        digit++ ;
        val /= 10 ;
    }
    return digit ;
}
char* intToStr(int val){
    if(val == 0)
        return "0" ;
    int digit = checkDigit(val) ;
    char* ans = malloc(digit + 1) ;
    ans[digit] = '\0' ;
    int idx = digit - 1 ;
    while(val){
        ans[idx] = val % 10 + '0' ;
        val /= 10 ;
        idx-- ;
    }
    return ans ;
}
int cmp(const void* a, const void* b){
    char* A = *(char**)a ;
    char* B = *(char**)b ;
    int n = strlen(A) + strlen(B) ;
    char* AB = malloc(n + 1) ;
    char* BA = malloc(n + 1) ;
    AB[n] = '\0' ;
    BA[n] = '\0' ;
    strcpy(AB, A) ;
    strcpy(&AB[strlen(A)], B) ;
    strcpy(BA, B) ;
    strcpy(&BA[strlen(B)], A) ;
    for(int i = 0; i < n ; i++){
        if(AB[i] == BA[i])
            continue ;
        return BA[i] - AB[i] ;
    }
    return  0 ;
}
char * largestNumber(int* nums, int numsSize){
    int n = numsSize ;
    char** data = malloc(n * sizeof(char*) ) ;
    int len = 0;
    bool zero = true ;

    for(int i = 0 ; i < n; i++){
        data[i] = intToStr(nums[i]) ;
        len += strlen(data[i]) ;
        if(nums[i]) zero = false ;
    }
    if(zero)
        return "0" ;

    qsort(data, n, sizeof(char*), cmp) ;
    char* ans = malloc(len + 1) ;
    int p = 0; 
    for(int i = 0; i < n; i++){
        strcpy(&ans[p] , data[i]) ;
        p += strlen(data[i]) ;
    }
    return ans ;
}