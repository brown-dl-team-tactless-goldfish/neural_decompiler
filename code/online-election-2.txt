class TopVotedCandidate{
public:
    TopVotedCandidate( vector<int> votes, vector<int> times, unordered_map<int, int> voteCount={} ){
        struct TopSoFar{
            int vote{ -1 }, count{ 0 };
        } topSoFar;
        for( auto index{ 0 };  index < static_cast<int>(votes.size());  ++index ){
            auto vote{ votes[index] }, time{ times[index] }, count{ ++voteCount[vote] };
            topSoFar = ( count >= topSoFar.count ) ? TopSoFar{ vote, count } : topSoFar;
            top_[ time ] = topSoFar.vote;
        }
    }
    int q( int time ){
        auto it{ top_.upper_bound( time ) };
        return prev( it )->second;
    }
private:
    map<int, int> top_;
};