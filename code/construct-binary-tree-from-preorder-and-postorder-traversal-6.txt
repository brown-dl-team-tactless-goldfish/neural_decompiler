/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

TreeNode* foo(vector<int>& pre,vector<int>& post,int preL,int preR,int postL,int postR)
{
    if (preL>preR) return NULL;
    
    TreeNode* root = new TreeNode(pre[preL]);
    
    if (preL==preR) return root;
    
    int l = pre[preL+1];
    int i = find(post.begin(),post.end(),l)-post.begin();
    
    int n = i-postL+1;
    
    root->left = foo(pre,post,preL+1,preL+n,postL,i);
    
    root->right = foo(pre,post,preL+n+1,preR,i+1,postR-1);
    
    return root;
    
}

class Solution {
public:
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
        
        return foo(pre,post,0,pre.size()-1,0,post.size()-1);
        
    }
};