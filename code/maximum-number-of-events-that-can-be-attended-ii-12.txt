class Solution {
public:
    int maxValue(vector<vector<int>>& events, int k) {
        sort(events.begin(),events.end(),[](auto& a, auto& b) {
            return a[1] < b[1];
        });
        vector<int> ends(events.size());
        for(int i = 0;i<events.size();i++) {
            ends[i] = events[i][1];
        }
        vector<vector<int>> dp(k,vector<int>(events.size()));
        
        dp[0][0] = events[0][2];
        for(int i = 1;i<events.size();i++) {
            dp[0][i] = max(dp[0][i-1],events[i][2]);
        }
        for(int i = 1;i<k;i++) {
            dp[i][0] = dp[i-1][0];
            for(int j = 1;j<events.size();j++) {
                auto ptr = lower_bound(ends.begin(),ends.begin() + j,events[j][0]);
                if(ptr == ends.begin()) {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                } else {
                    int k = ptr - ends.begin() - 1; 
                    dp[i][j] = max(dp[i-1][j], dp[i-1][k] + events[j][2]);
                    dp[i][j] = max(dp[i][j-1],dp[i][j]);
                }
            }
        }
        return dp[k-1][events.size()-1];
    }
};