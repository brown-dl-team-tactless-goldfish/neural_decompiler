int comp(const void *a, const void *b)
{
    return (*(int *) a - *(int *) b);
}
int** fourSum(int* nums, int numsSize, int target, int* returnSize) {
   int **result = NULL;
    int idx1, idx2, idx3, idx4;
    int Sum;

    *returnSize = 0;
    if ((nums == NULL) || (numsSize < 4))
        return NULL;
    qsort(nums, numsSize, sizeof(int), comp);
    result = malloc(sizeof(int *) * numsSize * (numsSize - 1) * (numsSize - 2) * (numsSize - 3) / 24);
    for (idx1 = 0; idx1 < numsSize; idx1++) {
        printf("%d\n",idx1);
        for (idx2 = idx1 + 1; idx2 < numsSize; idx2++) {
            idx3 = idx2 + 1;
            idx4 = numsSize - 1;
            while (idx3 < idx4) {
                Sum = nums[idx1] + nums[idx2] + nums[idx3] + nums[idx4];
                if (Sum == target) {
                    result[*returnSize] = malloc(sizeof(int) * 4);
                    result[*returnSize][0] = nums[idx1];
                    result[*returnSize][1] = nums[idx2];
                    result[*returnSize][2] = nums[idx3];
                    result[*returnSize][3] = nums[idx4];
                    (*returnSize)++;
                    while ((nums[idx3] == nums[idx3 + 1]) && (idx3 < numsSize))
                        idx3++;
                    while ((nums[idx4] == nums[idx4 - 1]) && (idx4 > 0))
                        idx4--;
                    idx3++;
                    idx4--;
                } else if (Sum > target) {
                    idx4--;
                } else {
                    idx3++;
                }
            }                   //while
            while ((nums[idx2] == nums[idx2 + 1]) && (idx2 < numsSize))
                idx2++;
        }                       // for idx2
        while ((nums[idx1] == nums[idx1 + 1]) && (idx1 < numsSize))
            idx1++;
    }                           // for idx1

    return result;
}