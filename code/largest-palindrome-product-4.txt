    int largestPalindrome(int n) 
    {
        if(n==1)
            return 9;      
        for(long long int x = 1;x<=pow(10,n)-1;x++)
        {
			//constracting the a Palindrome number by following lines
            long long int a = pow(10,n) - x;
            string str = to_string(a);
            reverse(str.begin(),str.end());
            stringstream sm(str);
            long long int b=0;
            sm>>b;
			// Here the Palindrome number we get is:  
			//  				rst = pow(10,n)*a + b;
			//  Let's assume n = 2;
			//  so: 
			//  				rst = 100*(100-x) + b;
			//  if rst is the number we want, then we can find c and d satisfy this: 
			//  				rst = (100-c)*(100-d)
			//  so we have :
			//   				100*(100-x) + b = (100-c)*(100-d)
			//                  100*(c+d-x) = c*d - b
			//  one solution that satisfies the above equation is that :
			//                  c+d = x
			//                  c*d = b
			//  if that is the case, then we have
			//                  (c-d)^2 = x*x-4*b
			//  now if temp: 
			//                  temp =x*x -4*b;
			//  have squre root:
			//  then we have c-d =sqrt(temp)
			//  now we have 2*c = x+sqrt(temp)
			//  we can definitly find integer solution for c and d, then we can simply return rst. 
            long long int temp =x*x -4*b;
            if(temp>=0)
            {
                long long int temp1 =(int)sqrt(temp);
                if(temp1*temp1 == temp&&(x+temp1)%2==0)
                {
                    long long int ret= pow(10,n)*a;
                    ret = ret+ b;
                    return ret;
                }
            }
            
        }
        return -1;
    }