#if 0 /* slow solution */

static int
charpcmp(const void *av, const void *bv)
{
        const unsigned char *a = av, *b = bv;
        return (int)*a - (int)*b;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char **
commonChars(char **words, int nwords, int *nretp)
{
        static const char *letters[] = {
                ['a'] = "a",   ['b'] = "b",   ['c'] = "c",   ['d'] = "d",   ['e'] = "e",   ['f'] = "f",   ['g'] = "g",
                ['h'] = "h",   ['i'] = "i",   ['j'] = "j",   ['k'] = "k",   ['l'] = "l",   ['m'] = "m",   ['n'] = "n",
                ['o'] = "o",   ['p'] = "p",   ['q'] = "q",   ['r'] = "r",   ['s'] = "s",   ['t'] = "t",   ['u'] = "u",
                ['v'] = "v",   ['w'] = "w",   ['x'] = "x",   ['y'] = "y",   ['z'] = "z"
        };
        int i, count, len, minlen = INT_MAX;
        char min, **ret;

        for (i = 0; i < nwords; i++) {
                len = strlen(words[i]);
                qsort(words[i], len, sizeof(**words), charpcmp);
                if (len < minlen)
                        minlen = len;
        }

        ret = malloc(minlen * sizeof(*ret));
        *nretp = 0;

        for (;;) {
                min = CHAR_MAX;
                count = 0;
                for (i = 0; i < nwords; i++) {
                        if (words[i][0] < min) {
                                min = words[i][0];
                                count = 1;
                        } else if (words[i][0] == min) {
                                count += 1;
                        }
                }
                if (!min)
                        return ret;
                if (count == nwords) {
                        ret[*nretp] = letters[min];
                        *nretp += 1;
                }
                for (i = 0; i < nwords; i++)
                        words[i] += (words[i][0] == min);
        }
}

#else /* fast solution */

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char **
commonChars(char **words, int nwords, int *nretp)
{
        static const char *letters[] = {
                ['a'] = "a",   ['b'] = "b",   ['c'] = "c",   ['d'] = "d",   ['e'] = "e",   ['f'] = "f",   ['g'] = "g",
                ['h'] = "h",   ['i'] = "i",   ['j'] = "j",   ['k'] = "k",   ['l'] = "l",   ['m'] = "m",   ['n'] = "n",
                ['o'] = "o",   ['p'] = "p",   ['q'] = "q",   ['r'] = "r",   ['s'] = "s",   ['t'] = "t",   ['u'] = "u",
                ['v'] = "v",   ['w'] = "w",   ['x'] = "x",   ['y'] = "y",   ['z'] = "z"
        };

        int min_letter_count[(int)'z' + 1];
        int letter_count[(int)'z' + 1];
        int i, j, minlen = INT_MAX;
        char **ret;

        memset(&min_letter_count['a'], 0x7F, sizeof(min_letter_count) - 'a' * sizeof(int));

        for (i = 0; i < nwords; i++) {
                memset(&letter_count['a'], 0, sizeof(letter_count) - 'a' * sizeof(int));
                for (j = 0; words[i][j]; j++)
                        letter_count[words[i][j]] += 1;
                if (j < minlen)
                        minlen = j;
                for (j = 'a'; j <= 'z'; j++)
                        if (letter_count[j] < min_letter_count[j])
                                min_letter_count[j] = letter_count[j];
        }

        ret = malloc(minlen * sizeof(*ret));
        *nretp = 0;

        for (j = 'a'; j <= 'z'; j++) {
                for (i = min_letter_count[j]; i--;) {
                        ret[*nretp] = letters[j];
                        *nretp += 1;
                }
        }

        return ret;
}

#endif