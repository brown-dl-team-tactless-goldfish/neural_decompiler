class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        long long M=1e9+7;
        vector<pair<int, int>> adj[n];
        for(auto x: roads) {
            adj[x[0]].push_back({x[1], x[2]});
            adj[x[1]].push_back({x[0], x[2]});
        }
        priority_queue<vector<long long>, vector<vector<long long>>, greater<vector<long long>>> pq;
        vector<long long> dist(n, 1e17), ways(n, 0);
        dist[0]=0; ways[0]=1;
        pq.push({0, 0});
        while(pq.size()) {
            auto it=pq.top(); pq.pop();
            long long distance=it[0], node=it[1];
            for(auto x: adj[node]) {
                long long adjNode=x.first;
                long long weight=x.second;
                if(distance+weight<dist[adjNode]) {
                    dist[adjNode]=distance+weight;
                    pq.push({dist[adjNode], adjNode});
                    ways[adjNode]=ways[node];
                }
                else if(distance+weight == dist[adjNode]) {
                    ways[adjNode] += ways[node];
                    ways[adjNode] %= M;
                }
            }
        }
        return ways[n-1]%M;
    }
};