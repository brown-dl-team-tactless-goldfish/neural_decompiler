const int N = 20010;
class Solution {
    int dist[N];
    int m, n;
    bool check(int t, vector<vector<int>>& grid)
    {
        memset(dist, 0x3f, sizeof dist);
        t ++ ;
        queue<int> q;
        q.push(0);
        dist[0] = 0;
        int step = 1;
        while (q.size())
        {
            int len = q.size();
            while (len -- )
            {
                int u = q.front(); q.pop();
                for (int i = 0; i < 4; ++ i)
                {
                    int x = u / n + dx[i], y = u % n + dy[i];
                    if (x < 0 || y < 0 || x >= m || y >= n || grid[x][y] <= t + step - int(x == m - 1 && y == n - 1) && grid[x][y] != 0) continue;
                    int v = x * n + y;
                    if (dist[v] > dist[u] + 1)
                    {
                        dist[v] = dist[u] + 1;
                        q.push(x * n + y);   
                    }
                }   
            }
            step ++ ;
        }
        return dist[m * n - 1] < 0x3f3f3f3f / 2 ;
    }
    
    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
public:
    int maximumMinutes(vector<vector<int>>& grid) {
        m = grid.size(), n = grid[0].size();
        
        queue<int> q;
        for (int i = 0; i < m; ++ i)
            for (int j = 0; j < n; ++ j)
            {
                if (grid[i][j] == 1) q.push(i * n + j);
                if (grid[i][j] == 2) grid[i][j] = 1;
            }
       
        int step = 2;
        while (q.size())
        {
            int len = q.size();
            while (len -- )
            {
                int u = q.front(); q.pop();
                for (int i = 0; i < 4; ++ i)
                {
                    int x = u/n + dx[i], y = u % n + dy[i];
                    if (x < 0 || y < 0 || x >= m || y >= n || grid[x][y] > 0) continue;
                    grid[x][y] = step;
                    q.push(x * n + y);
                }    
            }
            step ++ ;
        }
        
        int l = -1, r = 1e9;
        while (l < r)
        {
            int mid = l + r + 1 >> 1;
            if (check(mid, grid)) l = mid;
            else r = mid - 1;
        }
        return r;
    }
};