class Solution {
public:
    int createSortedArray(vector<int>& instructions) {
        v.reserve(2e5);
        createNode(1, *max_element(instructions.begin(), instructions.end()) + 1);
        long long res = 0, mod = 1e9+7, numAll = 0;
        for(auto x:instructions)
            res += insert(x, ++numAll);
        return res % mod;                         
    }
    
    struct Node{
        int l;
        int r;
        int n = 0;
        Node* left = nullptr;
        Node* right = nullptr;
    };    
        
    int insert(int x, int numAll){
        int numLeft = 0, numRight = 0;
        auto p = &v[0];
        while(p->l+1 < p->r){
            p->n++;
            auto mid = (p->l+p->r)/2;
            if(x < mid){
                if(!p->left) p->left = createNode(p->l, mid);
                p = p->left;
            }
            else{
                if(!p->right) p->right = createNode(mid, p->r);
                if(p->left) numLeft += p->left->n;
                p = p->right; 
            }
        }
        p->n++;
        numRight = numAll - numLeft - p->n;
        return min(numLeft, numRight);
    }
    
    Node* createNode(int l, int r){
        v.push_back(Node{l, r});
        return &v.back();
    }
    
    vector<Node> v; //memory pool
};