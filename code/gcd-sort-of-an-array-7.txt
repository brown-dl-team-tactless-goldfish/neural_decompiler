class Solution {
public:
    int find(int x,vector<int> &p){
        if(x==p[x])return x;
        return find(p[x],p);
    }
    void unon(int a,int b,vector<int> &p,vector<int>& rnk){
        int u = find(a,p);
        int v = find(b,p);
        // cout<<a<<" "<<u<<" "<<b<<" "<<v<<" ";
        if(u!=v){
            if(rnk[v]<rnk[u])swap(u,v);
            p[u] = v;
            // cout<<u<<" "<<v;
            rnk[v] += rnk[u];
        }
        // cout<<endl;
    }
    bool gcdSort(vector<int>& nums) {
        vector<int> v = nums;
        sort(v.begin(),v.end());
        int n = v.size(),i,j;
        int k = v[n-1];
        vector<int> rnk(k+1,1),p(k+1);
        for(i = 1; i<=k; i++){
            p[i] = i;
            rnk[i] = 1;
        }
        for(i = 0; i < n; i++){
            for(j = 2; j <= sqrt(nums[i]); j++){
                if(nums[i]%j == 0){
                    unon(nums[i],j,p,rnk);
                    unon(nums[i],nums[i]/j,p,rnk);
                }
            }
        }
        for(i = 0; i < n; i++){
            if(find(v[i],p)!=find(nums[i],p))return false;
        }
        return true;
    }
};