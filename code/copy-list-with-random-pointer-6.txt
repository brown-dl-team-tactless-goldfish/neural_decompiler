
struct Node* get_index_address(struct Node* old_head,struct Node* new_head,struct Node* random_pointer)
{
    struct Node* ptr = old_head;
    int index_val = 0;
    while(ptr){
        if(ptr==random_pointer){break;}
        index_val++;
        ptr = ptr->next;
    }
    
    ptr = new_head;
    int ind = 0;
    while(ptr){
        if(ind == index_val){return ptr;}
        ind++;
        ptr = ptr->next;
    }
    return NULL;
}

struct Node* copyRandomList(struct Node* head) {
	if(head == NULL){return NULL;}
    
    struct Node *ptr = head;
    struct Node *new_ptr = NULL;
    
    struct Node *new_head = (struct Node*)malloc(sizeof(struct Node));
    new_head->val = ptr->val;
    new_head->next = NULL;
    new_head->random = NULL;
    
    ptr = ptr->next;
    new_ptr = new_head;
    
    while(ptr){
        struct Node *new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->val = ptr->val;
        new_node->next = NULL;
        new_node->random = NULL;
        
        new_ptr->next = new_node;
        new_ptr = new_node;
        ptr = ptr->next;
    }
    new_ptr->next=NULL;
    
    ptr = head;
    new_ptr = new_head;
    
    while(ptr){
        if(ptr->random==NULL){new_ptr->random=NULL;}
        else{
            new_ptr->random = get_index_address(head,new_head,ptr->random);
        }
        ptr = ptr->next;
        new_ptr = new_ptr->next;
    }
    return new_head;
}

/*
1.Create new nodes with same value as given node values , leaving random pointers as NULL.

After step 1 now the new list will have the same values and length as the old list. 

2.Traverse all the nodes in the old list and send its random pointer to our helper function.

The helper function will first traverse the elements in the old list and find the index at which the random pointer is pointing.
Next it will  traverse the new  list till it reaches the index and then return that node.

3.Assign this address to the random pointer of the new list node.
4.Continue this process for all the nodes in the new list.
5.Return head of the new list.
*/