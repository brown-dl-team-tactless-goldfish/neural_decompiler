class Solution {
public:
    const long long INF = 1e10 + 7;
    int minimumFinishTime(vector<vector<int>>& tires, int changeTime, int numLaps) {
        int n = tires.size();
        vector<long long> laps(33, INF);
        for (int i = 0; i < n; i++) {
            long long gp = tires[i][0];
            long long add = gp;
            laps[1] = min(laps[1], gp);
            for (int times = 2; times < 33; times++) {
                gp *= tires[i][1];
                add += gp;
                if (add >= INF) break;
                laps[times] = min(laps[times], add);
            }
        }
        vector<long long> dp(numLaps + 1, INF);
        dp[0] = 0;
        for (int i = 1; i <= min(numLaps, 32); i++) {
            dp[i] = laps[i];
        }
        for (int i = 1; i <= numLaps; i++) {
            for (int start = 1; start < 33; start++) {
                int nxt = i + start;
                if (nxt > numLaps) break;
                dp[nxt] = min(dp[nxt], dp[i] + changeTime + laps[start]);
            }
        }
        return dp[numLaps];
    }
};