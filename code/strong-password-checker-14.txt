class Solution {
public:
    int hash(int lower,int upper,int digs, int count, int len, int i)
    {
        return digs | upper<<1 | lower<<2 | count<<3 | len<<8 | i<<16;
    }
    unordered_map<int,int> memo;
    int strongPasswordChecker(string s) {
        function<int(int,int,int,int,char,int,int)> dp=[&](int lower,int upper,int digs, int count, char prev, int len, int i)
        {
            int ans = 1000000;
            auto h = hash(lower,upper,digs,count,len,i);
            if(count>=3)
            {
                return ans;
            }
            else if(i>=s.size() && len>=6)
            {
                if(lower>0 && upper>0 && digs>0 && len<=20)
                    ans = 0;   
                return ans;
            }
            else if(memo.count(h)>0)
            {
                return memo[h];
            }
            if(i<s.size())
            {
                auto c = s[i];
                auto l = (c>='a' && c<='z')?1:lower;
                auto u = (c>='A' && c<='Z')?1:upper;
                auto d = (c>='0' && c<='9')?1:digs;
                auto cnt = (c!=prev)?1:count+1;
                // use char i
                ans = min(ans,dp(l,u,d,cnt,c,len+1,i+1));
                // remove char i
                ans = min(ans,1+dp(lower,upper,digs,count,prev,len,i+1));
                // replace char i
                ans = min(ans,1+dp(1,upper,digs ,0,0,len+1,i+1));
                ans = min(ans,1+dp(lower,1,digs ,0,0,len+1,i+1));
                ans = min(ans,1+dp(lower,upper,1,0,0,len+1,i+1));
            }
            if(len<6)
            {
                // insert
                ans = min(ans,1+dp(1,upper,digs ,0,0,len+1,i));
                ans = min(ans,1+dp(lower,1,digs ,0,0,len+1,i));
                ans = min(ans,1+dp(lower,upper,1,0,0,len+1,i));
            }
            memo[h] = ans;
            return ans;
        };
        
        return dp(0,0,0,0,0,0,0);
    }
};