class Solution {
public:
    struct cmp{
        bool operator()(pair<int, int> p1, pair<int, int> p2){
            if(p1.first>p2.first){
                return true;
            }
            else if(p1.first==p2.first){
                if(p1.second<p2.second){
                    return true;
                }
                else{
                    return false;
                }
            }
            else{
                return false;
            }
        }  
    };
    
    int eatenApples(vector<int>& apples, vector<int>& days) {
        int n=apples.size(), ans=0, start=-1;
        priority_queue<pair<int, int>, vector<pair<int, int> >, cmp> pq;
        for(int i=0; i<n; i++){
            if(days[i]==0 || apples[i]==0){
                continue;
            }
            if(start==-1){
                start=i+1;
            }
            pq.push(make_pair(i+1+days[i], apples[i]));
        }
        for(int i=start; i<=40000; i++){
            while(!pq.empty() && pq.top().first<=i){
                pq.pop();
            }
            if(!pq.empty()){
                int num=min(pq.top().first-i, pq.top().second);
                ans+=num;
                i+=num-1;
                pq.pop();
            }
        }
        return ans;
    }
};