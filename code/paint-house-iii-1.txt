#define LIMIT 1e7
class Solution {
public:
    vector<int> h;
    vector<vector<int>> c;
    int m,n,target;
    int dp[102][22][102];
    
    int solve(int idx, int prevC, int dif){
        if(idx == m){
            if(dif == target) return 0;
            return LIMIT;
        }
        if(dp[idx][prevC][dif] != -1) return dp[idx][prevC][dif];
        
        int res = LIMIT;
        if(h[idx] != 0){
            res = min(res, solve(idx+1, h[idx], h[idx]==prevC ? dif : dif+1));
        }else{
            for(int i=1; i<=n; ++i){
                res = min(res, c[idx][i-1] + solve(idx+1, i, i==prevC ? dif : dif+1));
            }
        }
        
        return dp[idx][prevC][dif] = res;
    }
    
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        h = houses;
        c = cost;
        this->m = m;
        this->n = n;
        this->target = target;
        memset(dp,-1,sizeof(dp));

        int x = solve(0,0,0);
        return x>=LIMIT ? -1 : x;
    }
};