class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) 
    {
        ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
                
        int m=startFuel,n=stations.size(),stops=0,i=0;
        priority_queue<int>pq;
		
        if(startFuel>=target) return 0; // since startfuel is enough to reach target we need 0 stops
		
        if(!n &&startFuel<target) return -1;  //no stations are there and not enough fuel
        
        while(m<target)
        {
            while(i<n && m>=stations[i][0])
                pq.push(stations[i++][1]);  //go past the stations which can be passed with fuel remaining  
            //and keep fuel capacity of passed stations in max heap
			
			if(pq.empty())return -1;   //we can't reach since we don't have fuel remaining 
			
            
            m+=pq.top();pq.pop(); //use the top of our queue and again check how long can we reach
            stops++;
        }
        return stops;
    }
};