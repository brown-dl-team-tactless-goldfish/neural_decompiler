class Solution {
public:
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        int size{(int)quiet.size()};
        std::vector<std::vector<int>> adj(size);
        for(const auto &r: richer) {
            adj[r[1]].emplace_back(r[0]);
        }
        
        std::vector<int> m(size, -1), res(size, 0);
        for(int i{0}; i < size; ++i) res[i] = get(adj, quiet, m, i);
        
        return res;
        
    }
    
    int get(std::vector<std::vector<int>>& adj, std::vector<int>& quiet, std::vector<int>& m, int i) {
        if(m[i] != -1) return m[i];
        int min_{i}, tmp;
        for(const auto &j: adj[i]) {
            tmp = get(adj, quiet, m, j);
            if(quiet[min_] > quiet[tmp]) min_ = tmp;
        }
        return m[i] = min_;
    }
};