bool cmpStr(char* a, char* b){
    for (int n = 0; n < 10; n++){
        if (a[n] != b[n]) return false; 
        if (a[n] == ',' || a[n] == '\0') break;
    }
    return true;   
}

int qsortCmp(char** a, char** b){ return *a[0] - *b[0]; }

char** invalidTransactions(char** t, int tSize, int* rSize){
    int invalid[1000] = {0};
    int time[1000] = {0};
    char* city[1000] = {0};

    qsort(t, tSize, sizeof(char*), qsortCmp);

    char** ans = malloc(1000 * sizeof(char*));
    *rSize = 0;

    for (int n = 0; n < tSize; n++){

        int p = 0; 

        while (t[n][++p] != ',');
        time[n] = atoi(&t[n][p+1]);

        while (t[n][++p] != ',');
        int amnt = atoi(&t[n][p+1]);

        if (amnt > 1000){
            invalid[n] = 1;
            ans[(*rSize)++] = t[n];
        }

        while (t[n][++p] != ',');
        city[n] = &t[n][p+1];
    } 

    for (int n = 0; n < tSize; n++){
        for (int m = n+1; m < tSize; m++){

            if (t[m][0] > t[n][0]) break; // Is first letter bigger or smaller.

            if (cmpStr(t[n], t[m]) == true 
                && abs(time[n] - time[m]) < 61 
                && cmpStr(city[n], city[m]) == false){

                if (invalid[n] == 0){ 
                    ans[(*rSize)++] = t[n];
                    invalid[n] = 1;
                }

                if (invalid[m] == 0){
                    ans[(*rSize)++] = t[m];
                    invalid[m] = 1; 
                }
            }
        }
    }

    return ans;
}