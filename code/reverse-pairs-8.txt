class Solution {
private:
    void merge(vector<int>& arr, int l, int mid, int h, int& count){
        int i = l, j=mid+1;
        int r = j;
        int c = 0;
        vector<int> v;
        while(i<=mid){
            while(r<=h && arr[i]>(long long)2*arr[r]){
                c++;
                r++;
            }
            count+=c;
            while(j<=h && arr[j]<=arr[i]) v.push_back(arr[j++]);
            v.push_back(arr[i++]);
        }
        while(j<=h) v.push_back(arr[j++]);
        for(int i=l;i<=h;i++){
            arr[i]=v[i-l];
        }
    }
    void mergeSort(vector<int>& nums, int l, int r, int& count){
        if(l<r){
            int mid = l + (r-l)/2;
            mergeSort(nums, l, mid, count);
            mergeSort(nums, mid+1, r, count);
            merge(nums, l, mid, r, count);
        }
    }
public:
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        mergeSort(nums, 0, n-1, count);
        if(n<=1||count==0) return 0;
        return count;
    }
};