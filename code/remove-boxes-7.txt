public:
    #define vii vector<vector<int>>
    #define vi vector<int>
    #define viii vector<vector<vector<int>>>
    
    int removeBoxes(vector<int>& boxes) {
        viii dp(boxes.size() + 1, vii(boxes.size() + 1, vi(101, -1)));
        
        return recur(boxes, dp, 0, boxes.size() - 1, 0);
    }
    
    int recur(vi& boxes, viii& dp, int a, int b, int app){
        if (a > b) return 0;
        if (a == b) return (app + 1) * (app + 1);
        
        int store_a = a, store_app = app;
        if (dp[a][b][app] == -1){
            
            // update the leftside and app
            int get_left_val = boxes[a];
            while (a <= b){
                if (boxes[a] == get_left_val){
                    a ++;
                    app ++;
                }else{
                    break;
                }
            }
            dp[store_a][b][store_app] = (app) * (app) + recur(boxes, dp, a, b, 0);
            
            for (int i = a; i <= b; ++ i){
                if (boxes[i] == get_left_val){
                    // split into [a, i - 1] [i, b] where boxes[i] == get_left_val
                    dp[store_a][b][store_app] = max(dp[store_a][b][store_app], recur(boxes, dp, a, i - 1, 0) + recur(boxes, dp, i, b, app));
                }
            }
        }
        
        return dp[store_a][b][store_app];
    }