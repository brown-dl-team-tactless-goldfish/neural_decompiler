/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int cmp(const void* a, const void* b){
    int*A = *(int**)a ;
    int*B = *(int**)b ;
    return A[1] - B[1] ;
}
int* advantageCount(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    int n = nums1Size ;
    int** T1 = malloc(n * sizeof(int*)) ;
    int** T2 = malloc(n * sizeof(int*)) ;
    for(int i = 0; i < n; i++){
        T1[i] = malloc(2 * sizeof(int)) ;
        T2[i] = malloc(2 * sizeof(int)) ;
        T1[i][0] = i ;
        T1[i][1] = nums1[i] ;
        T2[i][0] = i ;
        T2[i][1] = nums2[i] ;
    }
    qsort(T1, n, sizeof(int*), cmp) ;
    qsort(T2, n, sizeof(int*), cmp) ;
    
    int* ret = malloc(n * sizeof(int)) ;
    for(int i = 0; i < n; i++)
        ret[i] = -1 ;
    int p = 0 ;
    int* stk = malloc(n * sizeof(int)) ;
    int s_idx = 0 ;
    for(int i = 0; i < n; i++){
        int id = T2[p][0] ;
        if(T1[i][1] > T2[p][1]){
            ret[id] = T1[i][1] ;
            p++ ;
        }
        else{
            stk[s_idx] = T1[i][0] ; ;
            s_idx++ ;
        }
    }
    for(int i = 0; i < n; i++){
        if(ret[i] == -1){
            ret[i] = nums1[stk[s_idx-1]] ;
            s_idx-- ;
        }
    }
    for(int i = 0; i < n; i++){
        free(T1[i]) ;
        free(T2[i]) ;
    }
    free(T1) ;
    free(T2) ;
    free(stk) ;
    *returnSize = n;
    return ret ;
}