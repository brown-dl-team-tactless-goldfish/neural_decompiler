/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    static void getans(TreeNode* A, TreeNode* B, bool &ans){
        if(A == NULL && B == NULL) return;
        if(A == NULL || B == NULL){
            ans = false;
            return;
        } 
        if(A->val != B->val){
            ans = false;
            return;
        }
        
        int a = (A->left)?A->left->val:-1;
        int b = (A->right)?A->right->val:-1;
        int c = (B->left)?B->left->val:-1;
        int d = (B->right)?B->right->val:-1;
        
        if(a == c && b == d){
            getans(A->left, B->left, ans);
            getans(A->right, B->right, ans);
        }
        else if(a == d && b == c){
            getans(A->left, B->right, ans);
            getans(A->right, B->left, ans);
        }else{
            ans = false;
            return;
        }
    }
    
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        bool ans = true;
        getans(root1, root2, ans);
        return ans;
    }
};