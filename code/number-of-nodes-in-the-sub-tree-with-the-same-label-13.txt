class Solution {
    void dfs(int v, unordered_map<int, vector<int>>& mp, string& labels, vector<vector<int>>& dp, vector<bool>& visited) {
        visited[v] = true;
        for (auto it = 0; it < mp[v].size(); it++) {
            int index = mp[v][it];
            if (!visited[index]) {
                dfs(index, mp, labels, dp, visited);
                for (int i = 0; i < 26; i++)
                    dp[v][i] += dp[index][i];
            }
        }
    }
    
public:
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        
        vector<int>res(n, 0);
        unordered_map<int, vector<int>>mp;
        
        for (int i = 0; i < edges.size(); i++) {
            mp[edges[i][0]].push_back(edges[i][1]);
            mp[edges[i][1]].push_back(edges[i][0]);
        }
        
        vector<vector<int>>dp(n, vector<int>(26, 0));
        vector<bool>visited(n, false);
        
        for (int i = 0; i < n; i++)
            dp[i][labels[i]-'a'] = 1;

        dfs(0, mp, labels, dp, visited);
        
        for (int i = 0; i < n; i++)
            res[i] = dp[i][labels[i]-'a'];
        
        return res;
    }
};