#define fastio ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
class TrieNode
{
  public:
    vector<TrieNode*> next;
    bool isWord;
    TrieNode()
    {
        next.resize(26,NULL);
        isWord = false;
    }
};

class StreamChecker {
public:
    deque<char>stream;
    TrieNode* root = new TrieNode();
    
    bool search()
    {
        TrieNode* p = root;
        for(char ch : stream){
            if(p->isWord)
                return true;
            if(p->next[ch-'a']==NULL)
                return false;
            p = p->next[ch-'a'];
        }
        return p->isWord;
    }
    
    void insert(string &s)
    {
        TrieNode* p = root;
        for(int i=s.size()-1;i>=0;i--)
        {
            if(p->next[s[i]-'a']==NULL)
                p->next[s[i]-'a'] = new TrieNode();
            p = p->next[s[i]-'a'];
        }
        p->isWord = true;
    }
    
    StreamChecker(vector<string>& words) {
        fastio
        for(string word : words)
        {
            insert(word);
        }
    }
    
    bool query(char letter) {
        stream.push_front(letter);
        return search();
    }
};