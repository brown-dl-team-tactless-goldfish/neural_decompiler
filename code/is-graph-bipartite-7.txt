bool isBipartite(int** graph, int graphSize, int* graphColSize) {
    /* Color is also used to keep track of visited nodes to save space,
     * where a non-zero value means visited. Queue can be the same size
     * by preventing a node with a color from being queued again.
     */
    int  *color  = (int *)calloc(1, sizeof(int) * graphSize);    
    int  *queue  = (int *)calloc(1, sizeof(int) * graphSize);

    int head = 0;
    int tail = 0;

    /* Iterate through each node using BFS.  */
    for ( int i=0; i< graphSize; i++ ) {

        /* Node with a color is already visited.  */
        if ( color[i] != 0 )
            continue;
        
        /* Nodes without a color is the first node in a group, so we
         * can assign an arbitrary value.
         */
        color[i] = 1;

        queue[tail++] = i;
        
        while ( head != tail ) {
            
            /* Dequeue oldest node.  */
            int parent = queue[head++];
            
            for ( int j=0; j<graphColSize[parent]; j++ ) {
                int child = graph[parent][j];
                
                /* If the connected node hasn't been visited, assign the
                 * opposite color.
                 */
                if ( color[child] == 0 ) {
                    color[child]  = -color[parent];
                    
                    /* Add the connected node to the queue.  */
                    queue[tail++] = child;
                } else if ( color[child] == color[parent] ) {
                    return false;
                }
            }
        }
    }
    
    return true;
}