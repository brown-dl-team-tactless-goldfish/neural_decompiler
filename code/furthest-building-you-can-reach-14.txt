class Solution {
public:
    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
           //the idea is to store the difference in a min heap
        //when ever we have number of jumps to a higher building greater than the ladder pick the min difference from the heap and use the bricks for it 
        //practically subtract the difference from the bricks 
        //when ever we are out of bricks then we can't continue
        
        priority_queue<int> pq; //i will store the differences in -ve so it will become  a min heap
        
        for(int i=1;i<heights.size();i++)
        {
            int diff=heights[i]-heights[i-1];
            if(diff>0)
            {
                //we need to use a ladder or the bricks
                pq.push(-diff);
                
                if(pq.size()>ladders)
                {
                    //pick the smallest difference and use bricks
                    int bricksNeed=abs(pq.top());
                    pq.pop();
                    
                    if(bricksNeed>bricks)
                        return i-1;
                    bricks-=bricksNeed;
                }
            }
        }
        return heights.size()-1;
    }
};