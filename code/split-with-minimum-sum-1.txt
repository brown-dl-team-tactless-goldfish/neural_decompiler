void merge(int* nums, int left, int middle, int right){

    int n1 = middle - left + 1;
    int n2 = right - middle;
    int L[n1], R[n2];
    int i, j = 0, k = left;
    for(i = 0 ; i < n1 ; i++){
        L[i] = nums[left + i];
    }
    for(i = 0 ; i < n2 ; i++){
        R[i] = nums[middle + 1 + i];
    }

    i = 0;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            nums[k] = L[i];
            i++;
        }
        else {
            nums[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        nums[k] = L[i];
        i++;
        k++;
    }
  
    while (j < n2) {
        nums[k] = R[j];
        j++;
        k++;
    }
}
 void mergesort(int* nums, int left, int right){
	
	if (left < right) {
        int miidle = left + (right - left) / 2;
        mergesort(nums, left, miidle);
        mergesort(nums, miidle + 1, right);
        merge(nums, left, miidle, right);
    }
}
int splitNum(int num){
	
	int sort_num[10];
	int i;
	for(i = 0 ; num > 0 ; i++){
		sort_num[i] = num % 10;
		num /= 10;
	}
	mergesort(sort_num, 0, i - 1);

	int a = 0, b = 0;
	for(int j = 0 ; j < i ; j++){
		if(j % 2 == 0) a = a * 10 + sort_num[j];
		else b = b * 10 + sort_num[j];
	}
	return a + b;
}