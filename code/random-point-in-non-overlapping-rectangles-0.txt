typedef struct {
    int** rects;    
    int   rectsSize;
    int*  cn;
    int size;
} Solution;

int BFS(int* nums, int n, int val){
    int left = 0, right = n-1;
    int mid;
    while(left < right){
        mid = left + (right - left)/2;
        if(nums[mid] < val)
            left = mid + 1;
        else
            right = mid;
    }
    return left;
}

Solution* solutionCreate(int** rects, int rectsSize, int* rectsColSize) {
    Solution* ret = malloc(sizeof(Solution));
    ret->cn = malloc( rectsSize  * sizeof(int));
    ret->size = 0;
    for(int i = 0; i < rectsSize; i++){
        int t = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);
        
        if(i > 0)
            ret->cn[i] = ret->cn[i-1] + t;
        else
            ret->cn[i] = t;
        
        ret->size += t;
    }
    ret->rects = rects;
    ret->rectsSize = rectsSize;
    return ret;
}

int* solutionPick(Solution* obj, int* retSize) {
    *retSize = 2; 
    int* ans = malloc(2 * sizeof(int)) ;
    int x = rand() % obj->size + 1;
    int idx = BFS(obj->cn, obj->rectsSize, x);
    if(idx > 0)
        x -= obj->cn[idx-1];
    x--;
    int row = x/(obj->rects[idx][2] - obj->rects[idx][0] + 1);
    int col = x % (obj->rects[idx][2] - obj->rects[idx][0] + 1);
    //hight
    ans[1] = obj->rects[idx][1] + row;
    //width
    ans[0] = obj->rects[idx][0] + col;
    return ans;
}

void solutionFree(Solution* obj) {
    free(obj->cn);
    free(obj);
}