class Solution {
public:
    int minSwaps(const string& s) {
        int ones{std::accumulate(s.begin(), s.end(), 0, [](const int a, const int b){return a + (b == '1');})}, size{(int)s.size()}, min_{INT32_MAX};
        
        bool one{false}, zero{false};
        if(size % 2) { // odd size
            if(ones == (size>>1)) zero = true;
            else if(ones == (1+(size>>1))) one = true;
        } else {
            if(ones == (size>>1)) zero = one = true;
        }
        
        // start with 1
        if(one) {
            int count{0};
            for(int i{0}, c{1}; i < size; ++i, c ^= 1) {
                if(s[i]-'0' != c) ++count;
            }
            min_ = std::min(min_, count>>1);
        }
        
        // start with 0
        if(zero) {
            int count{0};
            for(int i{0}, c{0}; i < size; ++i, c ^= 1) {
                if(s[i]-'0' != c) ++count;
            }
            min_ = std::min(min_, count>>1);
        }
        
        return min_ == INT32_MAX ? -1 : min_;
    }
};