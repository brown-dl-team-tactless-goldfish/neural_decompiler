class Solution {
public:
    int n;
    vector<vector<int>> es;
    int minimumTime(int n1, vector<vector<int>>& relations, vector<int>& time) {
        n = n1 + 1;
        vector<int> dgree(n, 0);
        vector<int> finish(n, 0);
        es.resize(n);
        for (auto& r : relations)
        {
            if (dgree[r[1]] == -1) dgree[r[1]] = 0;
            if (dgree[r[0]] == -1) dgree[r[0]] = 0;
            dgree[r[1]]++;         
            es[r[0]].push_back(r[1]);
        }
        // finishtime, id
        deque<pair<int, int>> q;
        for (int i = 1; i < n; i++)
        {
            if (dgree[i] == 0){
                finish[i] = time[i - 1];
                q.push_back({finish[i], i});
            }
        }
        int ans = 0;
        while (!q.empty())
        {
            auto c = q.front();
            q.pop_front();
            int t = c.first;
            int x = c.second;
            for (auto next : es[x]) {
                dgree[next]--;
                finish[next] = max(t + time[next - 1], finish[next]);
                if (dgree[next] > 0) continue;
                q.push_back({finish[next], next});
            }
            ans = max(ans, t);
        }
        return ans;  
    }
};