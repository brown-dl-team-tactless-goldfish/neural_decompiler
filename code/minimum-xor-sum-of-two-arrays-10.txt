int minimumXORSum(vector<int>& nums1, vector<int>& nums2) {
    memset(dp,-1,sizeof(dp));
    return find(nums1,nums2,0,0);
    
}
/* /*  SHOWING TLE (n!)

  int find(vector<int>&nums1,vector<int>&nums2,int i){
      if(i>=nums1.size())
          return 0;
      
      int ans=INT_MAX;
      for(int j=0;j<nums2.size();j++){
          if(nums2[j]!=-1){
              int temp=nums2[j];
              int val=nums1[i]^nums2[j];
              nums2[j]=-1;
               ans=min(ans,find(nums1,nums2,i+1)+val);
              nums2[j]=temp;

          }

      }
      
      return ans;
  }
 };

  */   */     //DP USING BIT MASKING

 int find(vector<int>&nums1,vector<int>&nums2,int i,int mask){
      if(i>=nums1.size())
          return 0;
      
     if(dp[i][mask]!=-1)
         return dp[i][mask];
      int ans=INT_MAX;
      for(int j=0;j<nums2.size();j++){
           if(mask&(1<<j))
               continue;
            
              int val=nums1[i]^nums2[j];
               ans=min(ans,find(nums1,nums2,i+1,mask|(1<<j))+val);
        
      }
      return dp[i][mask]=ans;
  }