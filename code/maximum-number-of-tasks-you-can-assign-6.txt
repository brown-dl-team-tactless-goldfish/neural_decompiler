class Solution {
public:
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
    
        sort(begin(tasks),end(tasks));
        sort(begin(workers),end(workers),greater<int>());
        
        
        int n=tasks.size();
        int m=workers.size();
        
        int low=0;
        int high=n;
        int ans=0;
        
        while(low<=high){
            int mid= low+(high-low)/2;
            int c=0;
            int j=0;
            int k=m-1;
            int p=pills;
            multiset<int,greater<int>>st(begin(workers),begin(workers)+min(mid,m));
            for(int i=mid-1;i>=0;i--){
                if(st.empty())break;
                auto it=st.begin();
                if(*it>=tasks[i]){
                    c++;
                    st.erase(it);
                }else{
                    auto it =st.end();
                    it--;
                    bool flag=false;
                    while(p>0){
                       if(*it+strength>=tasks[i]){
                           p--;
                           flag=true;
                           st.erase(it);
                           c++;
                           break;
                       }else{
                           if(it==st.begin())break;
                           it--;
                       }
                    }
                    
                    if(!flag)break;
                }
            }
		if(c==mid){
			ans=mid;
			low=mid+1;
		}else{
			high=mid-1;
		}   
        
}
      
return ans;
         
    }
    
};