int binarySearch(int* nums, int n, int val){
    int l = 0 ;
    int r = n-1 ;
    if(nums[0] > val)
        return 0 ;
    while(l < r){
        int mid = r - (r - l)/2 ;
        if(nums[mid] > val)
            r = mid - 1; 
        else
            l = mid ;
    }
    return l + 1 ;
}
int maximizeWin(int* prizePositions, int prizePositionsSize, int k){
    int n = prizePositionsSize ;
    int** dp = malloc(n * sizeof(int*)) ;
    for(int i = 0; i < n; i++){
        dp[i] = malloc(2 * sizeof(int)) ;
        dp[i][0] = -1 ;
    }
    for(int i = 0; i < n; i++){
        int left = prizePositions[i] ;
        int right = prizePositions[i] + k ;
        int items = binarySearch(&prizePositions[i], n-i, right) ;
        dp[i][0] = items ;
        dp[i][1] = i+items ;
    }
    int* suffixMax = malloc(n * sizeof(int)) ;
    suffixMax[n-1] = dp[n-1][0] ;
    for(int i = n-2; i >=0; i--){
        suffixMax[i] = fmax(suffixMax[i+1], dp[i][0]) ;
    }
    int ans = 0; 
    for(int i = 0; i < n; i++){
        int sum = dp[i][0] ;
        int next = dp[i][1] ;
        if(next < n)
            sum += suffixMax[next] ;
        ans = fmax(ans, sum) ;
        if(next == n)
            break ;
    }
    for(int i = 0; i < n; i++){
        free(dp[i]) ;
    }
    free(dp) ;
    free(suffixMax) ;
    return ans ;
}