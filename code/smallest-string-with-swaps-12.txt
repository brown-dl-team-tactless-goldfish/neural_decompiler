class Solution {
    vector<int>Father ;
public:
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        int n = s.size() ;
        Father.resize(n) ;
        string ret ;
        ret.resize(n) ;
        for(int i = 0; i < n; i++)
            Father[i] = i ;
        for(auto p : pairs){
            if(FindFather(p[0]) != FindFather(p[1]) )
                Union(p[0], p[1]) ;
        }
        
        vector<vector<int>>Map(n) ;
        for(int i = 0; i < n; i++){
            Map[FindFather(i)].push_back(i) ;
        }
        
        for(int i = 0; i < n; i++){
            if(Map[i].size() == 0)
                continue ;
            string tmp ;
            for(int j = 0; j < Map[i].size(); j++){
                tmp.push_back( s[ Map[i][j] ] ) ;
            }
            sort(tmp.begin(), tmp.end()) ;
            for(int j = 0; j < Map[i].size(); j++){
                ret[Map[i][j]] = tmp[j] ;
            }
        }
        return ret ;
    }
    
    int FindFather(int x){
        if(Father[x] != x)
            Father[x] = FindFather(Father[x]) ;
        return Father[x] ;
    }
    
    void Union(int x, int y){
        int a = Father[x] ;
        int b = Father[y] ;
        if(a < b)
            Father[b] = a ;
        else
            Father[a] = b ;
    }
};