class Solution {
public:
    vector<vector<int>> substringXorQueries(string s, vector<vector<int>>& queries) {
        unordered_map<int, pair<int, int>> map;
        for(int i=s.size()-1;i>=0;i--) {
            int cur = 0;
            for(int j=0;j<31 && i+j<s.size();j++) {
                cur = (cur<<1)| (s[i+j] - '0');
                if(map.count(cur) > 0) {
                    auto& ele = map[cur];
                    if(ele.second - ele.first + 1 >= j + 1){
                           ele.first = i;
                           ele.second = i+j; 
                    }
                }else {
                    map[cur] = {i, i+j};
                }
            }
        }

        vector<vector<int>> res;
        for(auto& query: queries) {
            int left = query[0];
            int right = query[1];
            right = right^left;
            if(map.count(right) > 0) {
                auto& interval = map[right];
                res.push_back({interval.first, interval.second});
            }else {
                res.push_back({-1, -1});
            }
        }

        return res;
    }
};