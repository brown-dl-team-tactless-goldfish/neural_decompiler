int maxValueOfCoins(int** piles, int pilesSize, int* pilesColSize, int k){
    int **dp=(int**)malloc(sizeof(int*)*pilesSize);
    for(int i=0;i<pilesSize;i++){
        dp[i]=calloc(k+1,sizeof(int));
    }
    //dp size is n*(k+1)
    for(int i=1;i<=fmin(k,pilesColSize[0]);i++){
        dp[0][i]=dp[0][i-1]+piles[0][i-1]; // 0th 被拿走的硬幣(1-k個)
    }

    for(int i=1;i<pilesSize;i++){
        for(int j=1;j<=k;j++){
            int sum=0;
            dp[i][j]=dp[i-1][j]; // dp[i-1][j] 為 jth 的最佳取法
            for(int t=1;t<=fmin(j,pilesColSize[i]);t++){ // ex: k=2 比較 pile取1個+其他取1個 or pile取2個+其他取0個 pile取0個+其他取2個
                sum+=piles[i][t-1];
                dp[i][j]=fmax(dp[i][j],dp[i-1][j-t]+sum);
            }
            
        }
       
    }
   
    return dp[pilesSize-1][k];
}