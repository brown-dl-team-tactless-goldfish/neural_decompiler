/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int cmp(void* a, void* b){
    return ((int**)a)[0][0]-((int**)b)[0][0];
}
int cmp1(void* a, void* b){
    return *(int*)a-*(int*)b;
}
int* advantageCount(int* A, int ASize, int* B, int BSize, int* returnSize) {
    int** array=(int**)malloc(BSize*sizeof(int*));
    *returnSize=ASize;
    for(int i=0;i<BSize;i++){
        array[i]=(int*)calloc(2,sizeof(int));
        array[i][0]=B[i];
        array[i][1]=i;
    }
    qsort(array,BSize,sizeof(array[0]),cmp);
    qsort(A,ASize,sizeof(A[0]),cmp1);
    int countOfarray=0;
    int** array2=(int**)malloc(ASize*sizeof(int*));
    for(int i=0;i<ASize;i++){
        array2[i]=(int*)calloc(2,sizeof(int));
        array2[i][1]=array[i][1];
    }
    int countOfarray2Right=ASize-1;
    int countOfarray2Left=0;
    for(int i=0;i<ASize;i++){
        if(A[i]<=array[countOfarray][0]){
            array2[countOfarray2Right--][0]=A[i];
        }else{
            array2[countOfarray2Left++][0]=A[i];
            countOfarray++;
        }
    }
    for(int i=0;i<ASize;i++){
        A[array2[i][1]]=array2[i][0];
    }
    return A;
}