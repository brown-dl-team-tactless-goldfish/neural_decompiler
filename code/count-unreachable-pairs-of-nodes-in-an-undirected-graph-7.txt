class Solution {
public:
    void dfs(int node, vector<int> adj[], vector<int> &vis, long long &ans)
    {
        vis[node] = 1;
        ans ++;
        for(auto i:adj[node])
        {
            if(!vis[i])
            {
                dfs(i, adj, vis, ans);
            }
        }
    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<long long> cc;
        int c = 0;
        vector<int> adj[n];
        for(auto i:edges)
        {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }

        vector<int> vis(n,0);

        for(int i=0;i<n;i++)
        {
            long long ans =  0;
            if(!vis[i])
            {
                dfs(i, adj, vis, ans);
                cc.push_back(ans);
            }
        }

        int m = cc.size();

        vector<long long> cc1(m);
        cc1[m-1] = cc[m-1];
        for(int i=m-2;i>=0;i--)
        {
            cc1[i] = cc[i]+cc1[i+1];
        }

        // for(int i=0;i<m;i++) cout<<cc[i]<<" ";
        // cout<<endl;

        // for(int i=0;i<m;i++) cout<<cc1[i]<<" ";
        // cout<<endl;

        long long res = 0;
        for(int i=0;i<m-1;i++)
        {
            res += (cc[i]*cc1[i+1]);
            cout<<res<<" ";
        }

        return res;
    }
};