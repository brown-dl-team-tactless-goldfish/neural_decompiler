int max1, min1, max2, min2, totalMax, totalMin;
int findlen(int* nums1, int nums1Size, int* nums2, int nums2Size, int size) {
    for(int i = 1; i < size; i++) {
        if(i < nums1Size) {
            max1 = nums1[i] > max1 ? nums1[i] : max1;
            min1 = nums1[i] < min1 ? nums1[i] : min1;
        }
        if(i < nums2Size) {
            max2 = nums2[i] > max2 ? nums2[i] : max2;
            min2 = nums2[i] < min2 ? nums2[i] : min2;
        }
    }
    totalMax = max1 > max2 ? max1 : max2;
    totalMin = min1 < min2 ? min1 : min2;
    return totalMax < 0 ? abs(totalMin) + 1 : abs(totalMin) + totalMax + 1;
}

int** findDifference(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize, int** returnColumnSizes) {
    max1 = nums1[0], min1 = nums1[0], max2 = nums2[0], min2 = nums2[0], totalMax = 0, totalMin = 0;
    
    *returnSize = 2;
    *returnColumnSizes = (int*) malloc(2 * sizeof(int));
    int** res = (int**) malloc(2 * sizeof(int*));
    res[0] = (int*) malloc(nums1Size * sizeof(int));
    res[1] = (int*) malloc(nums2Size * sizeof(int));
    
    int size = nums1Size > nums2Size ? nums1Size : nums2Size;
    int arrSize = findlen(nums1, nums1Size, nums2, nums2Size, size);
    int shift = totalMin < 0 ? abs(totalMin) : 0;
    int* arr1 = (int*) calloc(arrSize, sizeof(int));
    int* arr2 = (int*) calloc(arrSize, sizeof(int));
    for(int i = 0; i < nums1Size; i++) {
        arr1[nums1[i] + shift] = 1;
    }
    for(int i = 0; i < nums2Size; i++) {
        arr2[nums2[i] + shift] = 1;
    }
    int idx1 = 0, idx2 = 0;
    for(int i = 0; i < nums1Size; i++) {
        if(arr2[nums1[i] + shift] == 0 && arr1[nums1[i] + shift] > 0) {
            res[0][idx1++] = nums1[i];
            arr1[nums1[i] + shift]--;
        }
    }
    for(int i = 0; i < nums2Size; i++) {
        if(arr1[nums2[i] + shift] == 0 && arr2[nums2[i] + shift] > 0) {
            res[1][idx2++] = nums2[i];
            arr2[nums2[i] + shift]--;
        }
    }
    returnColumnSizes[0][0] = idx1; 
    returnColumnSizes[0][1] = idx2;
    free(arr1);
    free(arr2);
    return res;
}