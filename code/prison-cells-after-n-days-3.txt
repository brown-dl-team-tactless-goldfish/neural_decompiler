
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* prisonAfterNDays(int* cells, int cellsSize, int N, int* returnSize){

    int *data = malloc(sizeof(int) * cellsSize);
    *returnSize = cellsSize;
    int number = 0;

    /* Since cells only contain 0 or 1, put cell into an integer */
    for (int i = 0; i < cellsSize; i++) {
        number = (number << 1) | cells[i];
    }
    
    /*
     * Using the printf() statement below, you can notice a pattern in the
     * output. Every 14 cycles repeat. Therefore, we only need to
     * complete the remainder of the 14 cycles.
     */
    N %= 14;
    N = N == 0 ? 14 : N;
    
    /* 
     * We're looking for two adjacent neighbors that are both 1s or 0s.
     * If we shift this number by 1 bit in each direction, we align the
     * neighbors.
     * Exclusive or (^) will return 1 if the 2 bits are different.
     * Negating this will result in a 1 if both bits matched.
     * Lastly, we mask out the the first and last bits using 0x7E.
     */
    for (int i = 0; i < N; i++) {
        number = (~((number >> 1)^(number << 1))) & 0x7E;
        //printf("number: %d\n", number);
    }
    
    /* Convert our integer back into an array of 0's and 1's */
    for (int i = cellsSize - 1; i >= 0; i--) {
        data[i] = number & 1;
        number = number >> 1;
    }
     
    return (data);
}