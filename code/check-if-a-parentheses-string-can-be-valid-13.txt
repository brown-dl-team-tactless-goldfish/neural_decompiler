class Solution {
public:
    bool canBeValid(string s, string locked) {
        int n = s.size();
        if (n & 1) {
            return false;
        }

        int d = 0; // distance

        // l => r
        for (int i = 0; i < n; ++i) {
            char c = s[i];
            if (c == '(' || locked[i] == '0') {
                ++d;
            } else {
                --d;
            }

            if (d < 0) {
                return false;
            }
        }

        d = 0;
        // r => l
        for (int i = n - 1; i >= 0; --i) {
            char c = s[i];
            if (c == ')' || locked[i] == '0') {
                ++d;
            } else {
                --d;
            }

            if (d < 0) {
                return false;
            }
        }

        return true;
    }
};