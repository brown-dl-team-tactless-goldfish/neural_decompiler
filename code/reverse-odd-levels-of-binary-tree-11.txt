/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode ReverseOddLevels(TreeNode root) {
        if(root == null)
            return root;
        
        Queue<TreeNode> q = new();
        q.Enqueue(root);
        int level = 0;
        
        while(q.Any())
        {
            int size = q.Count();
            for(int i = 0; i < size; i++)
            {
                var node = q.Dequeue();
                if(node.left != null)
                    q.Enqueue(node.left);
                if(node.right != null)
                    q.Enqueue(node.right);
                
                if(i == size - 1 && level % 2 == 0)
                    q = ReverseNodes(q);
                if(i == size - 1)
                    ++level;
            }
        }
        return root;
    }
    
    private Queue<TreeNode> ReverseNodes(Queue<TreeNode> q)
    {
        List<int> list = new();
        var q2 = new Queue<TreeNode>();
        while(q.Any())
        {
            var tn = q.Dequeue();
            q2.Enqueue(tn);
            list.Add(tn.val);
        }
        list.Reverse();
        while(q2.Any())
        {
            var node = q2.Dequeue();
            node.val = list[0];
            q.Enqueue(node);
            list.RemoveAt(0);
        }
        
        return q;
    }
}