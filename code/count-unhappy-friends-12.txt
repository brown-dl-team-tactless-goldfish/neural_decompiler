class Solution {
public:
    using VI = vector<int>;
    using VVI = vector<VI>;
    using Map = unordered_map<int, int>;
    int unhappyFriends(int N, VVI& pref, VVI& pairs, Map adj = {}, int cnt = 0) {
        for (auto& pair: pairs) {
            auto [i, j] = tie(pair[0], pair[1]);
            adj[i] = j;
            adj[j] = i;
        }
        VVI m(N, VI(N));
        for (auto i{ 0 }; i < pref.size(); ++i)
            for (auto j{ 0 }, k{ N }; j < pref[i].size(); ++j, --k)
                m[i][pref[i][j]] = k;                 // k-th order of preference (highest preference on the left, lowest preference on the right)
        for (auto i{ 0 }; i < N; ++i) {
            for (auto j{ 0 }; j < N; ++j) {
                if (i == j)
                    continue;
                if (m[i][j] > m[i][adj[i]] &&         // i prefers j over i's adjacent pair
                    m[j][i] > m[j][adj[j]]) {         // j prefers i over j's adjacent pair
                    ++cnt;
                    break;                            // ðŸŽ¯ i-th unhappy friend found
                }
            }
        }
        return cnt;
    }
};