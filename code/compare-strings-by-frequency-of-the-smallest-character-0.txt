//
//the frequency of the lexicographically smallest character
//
int FSC(char* s, int* lex){
    for(int i = 0;  i < strlen(s); i++){
        lex[s[i] - 'a']++;
    }     
    
    for(int i = 0; i < 26; i++){
        if(lex[i] != 0)
            return lex[i];
    }
    return 0;
}
//
//find how many items in nums bigger than k
//
int BinarySearch(int* nums, int numsSize, int k){
    
    if(nums[numsSize-1] <= k)
        return 0;
    
    int left = 0, right = numsSize-1;
    while(left < right){
        int mid = left + (right-left)/2;
        if(nums[mid] <= k)
            left = mid + 1;
        else
            right = mid;
    }
    
    return numsSize - left;
}
//
//sort method
//
int cmpfunc(const void* a, const void* b){
    return *(int*)a - *(int*)b;
}

//
//main function
//
int* numSmallerByFrequency(char ** queries, int queriesSize, char ** words, int wordsSize, int* returnSize){
    int i;
    int* lex = malloc(26 * sizeof(int));
    int* lexDef = calloc(26, sizeof(int));  //for clean lex count
    
    int* tableWords = malloc(wordsSize * sizeof(int));
    //count each words's FSC
    for(i = 0; i < wordsSize; i++){
        memcpy(lex, lexDef, 26 * sizeof(int));
        tableWords[i] = FSC(words[i], lex);
    }
    //sort FSC of words table
    qsort(tableWords, wordsSize, sizeof(int), cmpfunc);
    
    //find each query's answer
    int* ans = malloc(queriesSize * sizeof(int));
    for(i = 0; i < queriesSize; i++){
        memcpy(lex, lexDef, 26 * sizeof(int));
        int k = FSC(queries[i], lex);
        ans[i] = BinarySearch(tableWords, wordsSize, k);
    }
    
    //free memory
    free(lex);
    free(lexDef);
    free(tableWords);
    
    * returnSize = queriesSize;
    return ans;
}