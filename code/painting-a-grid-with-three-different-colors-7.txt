class Solution {
public:
    string color_scheme = "RYG";
    int mod;
    vector<string>valid_moves;
    unordered_map<string,int>dp;
    void generateValidMoves(int n , int taken , char last, string &cur)
    {   if(taken==n)
        {valid_moves.push_back(cur);
         return;
        }
        for(auto x : color_scheme)
        {   if(last!=x)
            {   cur.push_back(x);
                generateValidMoves(n,taken+1,x,cur);
                cur.pop_back();
            }
        }
    }
    int solve(int n , int cur_len,string last_move)
    {
        if(cur_len==n)return 1;
        int ans =0;
        string hash = to_string(cur_len)+"#"+last_move;
        if(dp.find(hash)!=dp.end())return dp[hash];
        for(int i =0;i<valid_moves.size();i++)
        {
            auto cur_move = valid_moves[i];
            bool no_match =1;
            for(int i =0;i<last_move.size();i++)
            {
                if(last_move[i]==cur_move[i])no_match=0;
            }
            if(no_match)
            {
                ans= (ans%mod+solve(n,cur_len+1,cur_move))%mod;
            }
        }
        return dp[hash]= ans;
    }
    
    int colorTheGrid(int m, int n) {
        string cur ="";
        generateValidMoves(m,0,'Z',cur);
        string start = "";
        for(int i =0;i<m;i++)start+="B";
        mod=1e9+7;
        return solve(n,0,start);
        
    }
};