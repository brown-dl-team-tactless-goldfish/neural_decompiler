class Solution {
public:
    using Int = long long;
    int nthMagicalNumber(int N, int A, int B) {
        const Int mod = 1E9 + 7, g = gcd(A,B), a = A/g, b = B/g;
        const Int q = a + b - 1, p = a*b, k1 = N / q, k2 = N % q;
        Int m = findNth(a, b, k2);
        return (m + p*k1) * g % mod;
    }
    
    Int findNth(Int a, Int b, int n){
        Int l = 1, h = (a+b)*n, mid = 0;
        while(l < h){
            mid = (l+h)/2;
            auto m = getN(mid, a, b);
            if(m > n) h = mid;
            else if(m < n) l = mid; 
            else break;
        }
        auto u1 = (mid/a) * a,  u2 = (mid/b)*b;
        return max(u1, u2);
    }
    
    int getN(Int x, Int a, Int b){
        int k1 = x/a, k2 = x/b;
        return k1 + k2;
    }    
    
    int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
};