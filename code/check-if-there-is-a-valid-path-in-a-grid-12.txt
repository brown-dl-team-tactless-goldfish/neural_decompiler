public class Solution 
{
    int[] dx = new int[] {0, 1, 0, -1};
    int[] dy = new int[] {1, 0, -1, 0};
    int[][] dirs = new int[][]
    {
        new int[]{0, 0}, 
        new int[]{0, 2}, // 1 : right and left
        new int[]{1, 3}, // 2 : top and bottom
        new int[]{1, 2}, // 3 : left and bottom
        new int[]{0, 1}, // 4 : right and bottom
        new int[]{2, 3}, // 5 : left and top
        new int[]{0, 3}, // 6 : top and right
    };
    
    public bool HasValidPath(int[][] grid) 
    {
        int row = grid.Length, col = grid[0].Length;
        var visited = new bool[row, col];
        visited[0, 0] = true;
        var queue = new Queue<int[]>();
        queue.Enqueue(new int[] {0, 0});
        while(queue.Count != 0)
        {
            var curr = queue.Dequeue();
            int x = curr[0], y = curr[1];
            if(x == row - 1 &&y == col - 1)
                return true;
            int street = grid[x][y];
            for(int i = 0; i < 2; i++)
            {
                var dir = dirs[street][i];
                int nx = x + dx[dir], ny = y + dy[dir];
                if(nx >= 0 && nx < row && ny >= 0 && ny < col && !visited[nx, ny])
                {
                    int nextStreet = grid[nx][ny];
                    
                    if(i == 0)
                    {
                       if((street == 1 || street == 4 || street == 6) && (nextStreet == 1 || nextStreet == 3 || nextStreet == 5)
                            || ((street == 2 || street == 3) && (nextStreet == 2 || nextStreet == 5 || nextStreet == 6))
                            || (street == 5 && (nextStreet == 1 || nextStreet == 4 || nextStreet == 6)))
                       {
                           visited[nx, ny] = true;
                            queue.Enqueue(new int[]{nx, ny});
                       }
                    }
                    if(i == 1)
                    {
                       if((street == 2 || street == 5 || street == 6) && (nextStreet == 2 || nextStreet == 3 || nextStreet == 4)
                            || ((street == 1 || street == 3) && (nextStreet == 1 || nextStreet == 4 || nextStreet == 6))
                            || (street == 4 && (nextStreet == 2 || nextStreet == 5 || nextStreet == 6)))
                       {
                           visited[nx, ny] = true;
                            queue.Enqueue(new int[]{nx, ny});
                       }
                    }
                }
            }
        }
        
        return false;
    }
}