class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int L1 = str1.size(), L2 = str2.size();
        vector<vector<int> > dp(L1, vector<int>(L2, 0));
        //  ____ L2
        // |
        // |L1
        for (int i=0; i<L1; i++) {
            int ch = str1[i];
            for (int j=0; j<L2; j++){
                int delta = 0;
                if (ch == str2[j]) {
                    delta = 1;
                } else {
                }
                int cand = 0, cand1 = 0, cand2 = 0;
				if (i>0 && j>0) cand = dp[i-1][j-1];
				if (j>0) cand1 = dp[i][j-1];
				if (i>0) cand2 = dp[i-1][j];
                dp[i][j] = max((cand + delta), cand1);
				dp[i][j] = max(dp[i][j], cand2);
            }
        }

		if (DEBUG) {
			printf("    ");
			for (int i=0; i<L2; i++) {
				printf("%c   ", str2[i]);
			}
			printf("\n");
			for (int i=0; i<L1; i++) {
				printf("%c ", str1[i]);
				for (int j=0; j<L2; j++) {
					printf("%3d ", dp[i][j]); 
				}
				printf("\n");
			}
		}

		// B a c k t r a c k !
		{
			string ret;
			int i=L1-1, j=L2-1;
			while (i > 0 && j > 0) {
				if (DEBUG) {
					printf("BT: %d,%d %s\n", i, j, ret.c_str());
				}
				int curr = dp[i][j];
				if (dp[i-1][j] == curr) {
					ret.push_back(str1[i]);
					i--;
				} else if (dp[i][j-1] == curr) {
					ret.push_back(str2[j]);
					j--;
				} else {
					ret.push_back(str1[i]);
					i--; j--;
				}
			}

			if (i == 0) {
				bool need_fix = (dp[i][j] < 1);
				for (; j>=0; j--) ret.push_back(str2[j]);
				if (need_fix) ret.push_back(str1[0]);
			} else if (j == 0) {
				bool need_fix = (dp[i][j] < 1);
				for (; i>=0; i--) ret.push_back(str1[i]);
				if (need_fix) ret.push_back(str2[0]);
			}

			reverse(ret.begin(), ret.end());
			return ret;
		}
    }
};
