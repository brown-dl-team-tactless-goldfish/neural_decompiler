int dir[9]={-1,0,1,0,-1,-1,1,1,-1};
class DSU {
    int R,C;
    vector<int> par;
public:
    DSU(int R, int C) {
        this->R=R;
        this->C=C;
        par.assign(R*C,-1);
    }
    void add(int r, int c) {
        int curr=r*C+c;
        par[curr]=curr;
        for(int i=0;i<8;++i){
            int nr=r+dir[i],nc=c+dir[i+1],nei=curr+dir[i]*C+dir[i+1];
            if(nr>=0 && nr<R && nc>=0 && nc<C && par[nei]!=-1)
                merge(findPar(nei),par[curr]);
        }
    }
    bool check() {
        for(int r=0,curr=C-1;r<R;++r,curr+=C)
            if(par[curr]!=-1 && findPar(curr)%C==0)
                return true;
        return false;
    }
private:
    int findPar(int x) {
        if(par[x]==x)
            return par[x];
        return par[x]=findPar(par[x]);
    }
    void merge(int a, int b) {
        int c1=a%C,c2=b%C;
        if(c1<=c2)
            par[b]=a;
        else
            par[a]=b;
    }
};
class Solution {
public:
    int latestDayToCross(int R, int C, vector<vector<int>>& cells) {
        DSU dsu(R,C);
        for(int i=0;i<cells.size();++i){
            dsu.add(cells[i][0]-1,cells[i][1]-1);
            if(dsu.check())
                return i;
        }
        return cells.size();
    }
};