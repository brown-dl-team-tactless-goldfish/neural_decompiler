public class Solution
{
    int[] dx = new int[] {0, 0, 1, -1};
    int[] dy = new int[] {1, -1, 0, 0};
    public int MinCost(int[][] grid) 
    {
        int r = grid.Length, c = grid[0].Length;
        var cost = new int[r, c];
        for (int i = 0; i < r; i++) 
            for (int j = 0; j < c; j++) 
                cost[i, j] = int.MaxValue;
        cost[0, 0] = 0;
        var q = new Queue<int[]>();
        q.Enqueue(new int[]{ 0, 0 });
        while (q.Count != 0) 
        {
            int count = q.Count;
            for (int cnt = 0; cnt < count; cnt++) 
            {
                int[] cur = q.Dequeue();
                int x = cur[0], y = cur[1];
                for(int i = 0; i < 4; i++)
                {
                    int nx = x + dx[i], ny = y + dy[i], cs = cost[x, y];
                    if (nx >= 0 && nx < r && ny >= 0 && ny < c)
                    {
                        if (grid[x][y] != i + 1) cs++;
                        
                        if (cs < cost[nx, ny])
                        {
                            cost[nx, ny] = cs;
                            q.Enqueue(new int[]{nx, ny});
                        }
                    }
                }
            }
        }
        
        return cost[r-1, c-1];
        
    }
}