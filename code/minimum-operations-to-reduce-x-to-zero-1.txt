int minOperations(int* nums, int numsSize, int x){
    if (numsSize == 1){
        return nums[0] == x ? 1 : -1;
    }
    
    int* l_take = malloc(sizeof(int)*numsSize);
    l_take[0] = nums[0];
    if (l_take[0] == x){
        free(l_take);
        return 1;
    }
    int i = 1;
    int ans = INT_MAX;
    for (; i < numsSize ; i++){
        l_take[i] = l_take[i-1]+nums[i];
        if (l_take[i] >= x){
            break;
        }
    }
    if (i == numsSize) {
        free(l_take);
        return -1;
    } else if (l_take[i] == x){
        ans = i+1;
    }
    
    int now = l_take[i];
    int count = i+1;
    
    for (int j = numsSize-1 ; j >= 0 ; j--){
        now += nums[j];
        count++;
        while (now > x && i >= 0){
            now -= nums[i];
            i--;
            count--;
        }
        if (now == x){
            if (ans > count){
                ans = count;
            }
        } else if (now > x){
            break;
        }
    }
    free(l_take);
    return ans == INT_MAX ? -1 : ans;
}