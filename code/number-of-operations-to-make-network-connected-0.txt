int UnionFind(int* UNION, int val){
    if(UNION[val] == val)
        return val;
    
    return UnionFind(UNION, UNION[val]);
}

bool UnionSet(int* UNION, int* USize, int a, int b){
    int Find_a = UnionFind(UNION , a);
    int Find_b = UnionFind(UNION , b);
    if(Find_a == Find_b)
        return false;
    if(USize[Find_a] > USize[Find_b]){
        UNION[Find_b] = UNION[Find_a] ;
        USize[Find_a] += USize[Find_b];
    }
    else{
        UNION[Find_a] = UNION[Find_b] ;
        USize[Find_b] += USize[Find_a];        
    }
    return true;
}

int makeConnected(int n, int** connections, int connectionsSize, int* connectionsColSize){
    if( connectionsSize < ( n - 1) )
        return -1;
            
    int* UNION = malloc(n * sizeof(int));
    int* USize = malloc(n * sizeof(int));
    for(int i = 0; i < n; i++){
        UNION[i] = i;
        USize[i] = 1;
    }

    int ans = 0;
    for(int i = 0; i < connectionsSize; i++){
        if(UnionSet(UNION, USize, connections[i][0], connections[i][1]) == false)
            ans++;
    }
    
    if( ( connectionsSize - ans ) >= ( n-1 ) )  //有用的邊 >= 需要的邊
        return 0;
    else 
        return (n - 1) - (connectionsSize - ans); //需要的邊 - 有用的邊 = 需要移動的邊
}