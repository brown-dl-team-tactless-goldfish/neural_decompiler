int maxDiff(int num){
    int* digit = malloc(10 * sizeof(int));
    int id  = 0;
    while(num){
        digit[id] = num % 10;
        num /= 10;
        id++;
    }
    int* copy = malloc(id * sizeof(int));
    memcpy(copy, digit, id * sizeof(int));
    int k = id-1;
    while(k > 0 && copy[k] == 9){
        k--;
    }
    for(int i = k-1; i>=0; i--){
        if(copy[i] == copy[k])
            copy[i] = 9;
    }
    
    copy[k] = 9;
    int max = 0; 
    for(int i = id-1; i >=0; i--){
        max = max*10 + copy[i];
    }

    memcpy(copy, digit, id * sizeof(int));
    
    if(copy[id-1] != 1){
        for(int i = id-2; i>=0; i--){
            if(copy[i] == copy[id-1])
                copy[i] = 1;
        }        
        copy[id-1] = 1;
    }
    else if(id > 1){
        k = id-2;
        while(k >= 0 && (copy[k] ==0 || copy[k] == 1)){
            k--;
        }
        for(int i = k-1; i>=0; i--){
            if(copy[i] == copy[k])
                copy[i] = 0;
        }
        if(k >= 0)
            copy[k] = 0;
    }

    int min = 0;

    for(int i = id-1; i >=0; i--){
        min = min*10 + copy[i];
    }
    return max -min;
}