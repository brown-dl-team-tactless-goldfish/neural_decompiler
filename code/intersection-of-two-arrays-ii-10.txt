/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#define HASHSIZE 1000

int get_hash(int number) {
    return number%HASHSIZE;
}

int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    int *hash_arr = NULL,*ret_arr = NULL, i = 0, j = 0, key, ret_size;
    
    hash_arr = (int*)calloc(HASHSIZE, sizeof(int));
    ret_size = nums1Size < nums2Size ? nums1Size:nums2Size;
    ret_arr = (int*)malloc(ret_size*sizeof(int));
    
    while(i<nums1Size) {
        key = get_hash(nums1[i]);
        hash_arr[key] += 1;
        i++;
    }
    
    i = 0;
    while(i<nums2Size) {
        key = get_hash(nums2[i]);
        if(hash_arr[key] > 0) {
            ret_arr[j] = key;
            hash_arr[key] -= 1;
            j++;
        }
        i++;
    }
    *returnSize = j;
    return ret_arr;
}