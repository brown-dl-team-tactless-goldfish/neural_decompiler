
int* getBiggestThree(int** grid, int gridSize, int* gridColSize, int* returnSize){
    
    int i, j, k;
    int max1 = 0, max2 = 0, max3 = 0, temp, sum;
    for(i = 0; i < gridSize; i++)
        for(j = 0; j < (*gridColSize); j++){
		
            if(grid[i][j] > max1){
                max3 = max2;
                max2 = max1;
                max1 = grid[i][j];
            }else if(grid[i][j] > max2 && grid[i][j] != max1){
                max3 = max2;
                max2 = grid[i][j];
            }else if(grid[i][j] > max3 && grid[i][j] != max2 && grid[i][j] != max1) max3 = grid[i][j];
			
            temp = 1;
            while( (j - temp >= 0) && (j + temp < (*gridColSize)) && ((i + 2 * temp) < gridSize)){
                sum = grid[i][j];
                for(k = 1; k < temp; k++) sum += (grid[i + k][j - k] + grid[i + k][j + k] + grid[i + 2 * temp - k][j - k] + grid[i + 2 * temp - k][j + k]);
                sum += (grid[i + k][j - k] + grid[i + k][j + k]);
                sum += grid[i + 2 * temp][j];
                if(sum > max1){
                    max3 = max2;
                    max2 = max1;
                    max1 = sum;
                }else if(sum > max2 && sum != max1){
                    max3 = max2;
                    max2 = sum;
                }else if(sum > max3 && sum != max2 && sum != max1) max3 = sum;
                temp++;
            }
        }
    
    int* answer;
    if(max3 == 0 && max2 == 0){
        *returnSize = 1;
        answer = (int*)malloc(sizeof(int));
        answer[0] = max1;
    }else if(max3 == 0){
        *returnSize = 2;
        answer = (int*)malloc(sizeof(int) * 2);
        answer[0] = max1;
        answer[1] = max2;
    }else{
        *returnSize = 3;
        answer = (int*)malloc(sizeof(int) * 3);
        answer[0] = max1;
        answer[1] = max2;
        answer[2] = max3;
    }
    
    return answer;
}