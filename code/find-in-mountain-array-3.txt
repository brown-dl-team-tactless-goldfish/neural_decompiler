/**
 * *********************************************************************
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * *********************************************************************
 *
 * int get(MountainArray *, int index);
 * int length(MountainArray *);
 */

int bisearch(int left, int right, int target, MountainArray* mountainArr, int *arr, bool inc){
    int l,r;
    l = left;
    r = right;
    
    while(l <= r){
        int mid = (l + r) /2;
        int res;
        if(arr[mid]){
            res = arr[mid];
        } else {
            res = get(mountainArr, mid) + 1;
            arr[mid] = res;
        } 
        if(res == target + 1){
            return mid;
        }
        if(res < target + 1){
            if(inc == true) {
                l = mid + 1;
                continue;
            } else{
                r = mid - 1;
                continue;
            }
        } else{
            if(inc == true){
                r = mid - 1;
                continue;
            } else{
                l = mid + 1;
                continue;
            }
        }
    }
    
    return -1;
}


int findInMountainArray(int target, MountainArray* mountainArr) {
	int *arr;
    int len;
    int mid1, mid2;
    int l, r;
    int sol = 0xFFFFFFF;
    
    len = length(mountainArr);
    arr = calloc(len, sizeof(int));
    l = 0;
    r = len - 1;

    while(l <= r){
        int res1, res2;
        bool inc = false;
        mid1 = (l + r) / 2;
        if(mid1 < len - 1){
            mid2 = mid1 + 1;
        } else{
            mid1--;
            mid2 = mid1 + 1;
        }
        
        if(arr[mid1]){
            res1 = arr[mid1];
        } else {
            res1 = get(mountainArr, mid1) + 1;
            arr[mid1] = res1;
        }
        
        if(arr[mid2]){
            res2 = arr[mid2];
        } else{
            res2 = get(mountainArr, mid2) + 1;
            arr[mid2] = res2;
        }

        if(res1 == target + 1) {
            if(sol > mid1)
                sol = mid1;
            r = mid1 - 1;
            continue;
        }
        if(res2 == target + 1)
            return mid2;
        
        if(res2 > res1) {
            inc = true;
        } 
        
        if(target + 1 > res1){
            if(inc == true) {
                l = mid1 + 1;
            } else{
                r = mid1 - 1;
            }
        } else{
            if(inc == true){
                int res;
                res = bisearch(l, mid1, target, mountainArr, arr, true);
                if(res == -1){
                    l = mid1 + 1;
                    continue;
                } else{
                    sol = (sol > res)? res: sol;
                    r = res - 1;
                    continue;
                }
            } else{
                int res;
                res = bisearch(mid1 + 1, r, target, mountainArr, arr, false);
                if(res == -1){
                    r = mid1 -1;
                    continue;
                }else{
                    sol = (sol > res)? res: sol;
                    r = res -1;
                    continue;
                }
            }
        }
    }
    if(sol == 0xFFFFFFF)
        return -1;
    return sol;
}