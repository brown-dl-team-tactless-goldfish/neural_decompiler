class Iterator {
    struct Data;
	Data* data;
public:
	Iterator(const vector<int>& nums);
	Iterator(const Iterator& iter);
	virtual ~Iterator();
	int next();
	bool hasNext() const;
};

class PeekingIterator : public Iterator {
public:
    int cur;
    bool nextFlag{true};
	PeekingIterator(const vector<int>& nums) : Iterator(nums) {
        if(Iterator::hasNext()) cur = Iterator::next();
        else nextFlag = false;
	}

	int peek() {
        if(!nextFlag) return -1;
        return cur;
	}

	int next() {
	    int tmp = cur;
        
        if(Iterator::hasNext()) cur = Iterator::next();
        else nextFlag = false;
        
        return tmp;
	}

	bool hasNext() const {
	    return nextFlag;
	}
};

auto gucciGang = []() {std::ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();