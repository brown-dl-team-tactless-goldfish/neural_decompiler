
typedef struct {
    
    int *arr;
    int front;
    int rear;
    int size;
    
} MyCircularQueue;

bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
  
    if(obj->front == -1)
        return true;
    else
        return false;
    
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
    
      if(obj->front == 0 && obj->rear == obj->size -1)
        return true;
    
    if(obj->front == obj->rear + 1)
        return true;
    
    return false;
  
}

MyCircularQueue* myCircularQueueCreate(int k) {
    
     MyCircularQueue *mq = malloc(sizeof(MyCircularQueue));
    mq->arr = malloc(sizeof(int)*k);
    mq->front = -1;
    mq->rear = -1;
    mq->size = k;
    
    return mq;
}

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    
    if( myCircularQueueIsFull(obj))
        return false;
    
    
    if(obj->rear == obj->size - 1)
        obj->rear = 0;
    
    else if(obj->rear == -1)
        obj->front = obj->rear = 0;
    
    else
        obj->rear = obj->rear + 1;
    
    obj->arr[obj->rear] = value;
    return true;
    
  
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    
    if(myCircularQueueIsEmpty(obj))
        return false;
    
    if(obj->front == obj->rear) {
        obj->front = obj->rear = -1;
        return true;
    }
  
    if(obj->front == obj->size - 1)
        obj->front = 0;
    
    else
        obj->front = obj->front + 1;
    return true;
    
  
}

int myCircularQueueFront(MyCircularQueue* obj) {
    
    
    if(myCircularQueueIsEmpty(obj))
        return -1;
    
    return obj->arr[obj->front];
  
}

int myCircularQueueRear(MyCircularQueue* obj) {
  
    if(myCircularQueueIsEmpty(obj))
        return -1;
    
    return obj->arr[obj->rear];
    
}



void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->arr);
    free(obj);
}