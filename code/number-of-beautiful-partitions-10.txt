class Solution {
public:
	using ll = long long;
    static const int mod = 1e9+7;
    int beautifulPartitions(string s, int k, int minLength) {
        vector<vector<ll>> memo(s.size(), vector<ll>(k+1, -1));
        return dp(s, 0, k, minLength, memo);
    }

    ll dp(string& s, int idx, int k, int minLength, vector<vector<ll>>& memo) {
        if(k == 0) return idx == s.size() ? 1 : 0;
        if(idx >= s.size() || s[idx] == '1' || s[idx] == '4' || s[idx] == '6' || s[idx] == '8' || s[idx] == '9') return 0;
        if(memo[idx][k] != -1) return memo[idx][k];
        ll res = 0;
        for(int i = idx+minLength-1; i < s.size() && (s.size()-i >= (k-1)*minLength); i++) {
            if((s[i] == '1' || s[i] == '4' || s[i] == '6' || s[i] == '8' || s[i] == '9')) res = (res + dp(s, i+1, k-1, minLength, memo))%mod;
        }
        return memo[idx][k] = res;
    }
		
};