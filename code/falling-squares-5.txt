class Solution {
public:
    vector<int> fallingSquares(vector<vector<int>>& ps) {
        set<int> sx;
        for (auto &p : ps) sx.emplace(p[0]), sx.emplace(p[0] + p[1]);
        vector<int> x(sx.begin(), sx.end()), hs(x.size()), ans;
        unordered_map<int, int> idx;
        for (int i = 0; auto t : x) idx[t] = i++;
        for (int mh = 0; auto &p : ps) {
            int l = idx[p[0]], r = idx[p[0] + p[1]];
            int mx = *max_element(hs.begin() + l, hs.begin() + r);
            for (int i = l; i < r; i++) hs[i] = p[1] + mx;
            mh = max(mh, hs[l]);
            ans.emplace_back(mh);
        }
        return ans;
    }
};