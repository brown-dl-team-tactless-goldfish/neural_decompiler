struct pair {
    char* str;
    int cnt;
};

int cmpstr(const void* a, const void* b) {
    const char* pa = *(const char**) a;
    const char* pb = *(const char**) b;
    return strcmp(pa, pb);
}

int cmpobj(const void* a, const void* b) {
    const struct pair pa = *(const struct pair*) a;
    const struct pair pb = *(const struct pair*) b;
    return pb.cnt - pa.cnt;
}

char** topKFrequent(char** words, int wordsSize, int k, int* returnSize) {
    qsort(words, wordsSize, sizeof(char**), cmpstr);
    
    int idx = 0;
    struct pair* obj = (struct pair*) malloc(wordsSize * sizeof(struct pair));
    for (int i = 0; i < wordsSize; i++) {
        obj[idx].str = words[i];
        obj[idx].cnt = 1;
        for (int j = i + 1; j < wordsSize; j++) {
            if (strcmp(words[i], words[j]) != 0) {
                i = j - 1;
                idx++;
                break;
            } else {
                (obj[idx].cnt)++;
            }
            if (j == wordsSize - 1) i = j + 1;
        }
    }
    idx++;
    
    qsort(obj, idx, sizeof(struct pair), cmpobj);
    
    (*returnSize) = 0;
    for (int i = 0; i < k; i++) {
        words[(*returnSize)] = obj[(*returnSize)].str;
        (*returnSize)++;
    }
    free(obj);
    return words;
}