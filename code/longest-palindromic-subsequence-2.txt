int solveTab(string s,string revs){
    int n=s.length();
    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    
    for(int i=n-1;i>=0;i--){
        for(int j=n-1;j>=0;j--){
            int ans=0;
            if(s[i]==revs[j]){
                ans += 1+dp[i+1][j+1];
            }
            else{
                int opt1=dp[i+1][j];
                int opt2=dp[i][j+1];
                ans += max(opt1,opt2);
            }
            dp[i][j]=ans;
        }
    }
    return dp[0][0];
}

int longestPalindromeSubseq(string s) {
    int n=s.length();
    string revs=s;
    reverse(revs.begin(),revs.end());        
    return solveTab(s,revs);
}