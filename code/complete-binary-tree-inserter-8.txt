class CBTInserter {
public:
    queue<TreeNode *>NodeList;
    TreeNode * rootNode;
    
    CBTInserter(TreeNode* root) {
        
        rootNode = root;
        queue<TreeNode *>Q;
        TreeNode * node;
        Q.push(root);
        while(!Q.empty())
        {
            node = Q.front();
            Q.pop();

            if(node->right==NULL)
                NodeList.push(node);

            if(node->left)
                Q.push(node->left);
            if(node->right)
                Q.push(node->right);                
        }        
    }
    
    int insert(int v) {
        
        TreeNode * node = NodeList.front();
        TreeNode * new_node = new TreeNode(v); 
        if(node->left==NULL)
            node->left = new_node;
        else if(node->right==NULL)
            node->right = new_node;
        
        if(node->left!=NULL && node->right!=NULL)
            NodeList.pop();
        
        NodeList.push(new_node);
        
        return node->val;
    }
    
    TreeNode* get_root() {
        
        return rootNode;
    }
};