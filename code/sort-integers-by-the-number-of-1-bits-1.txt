/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int getNumberofOnes(int value)
{
    int counter = 0;
    while(value != 0)
    {
        if((value & 0x1) == 0x1)
        {
            counter++;
        }
        value = value >> 1;
    }
    
    return counter;
}

int* sortByBits(int* arr, int arrSize, int* returnSize){
    int* bitSizeArr = malloc(sizeof(int) * arrSize);
    
    for(int i=0; i<arrSize; i++)
    {
        bitSizeArr[i] = getNumberofOnes(arr[i]);
    }
    
    for(int i=0; i<(arrSize); i++)
    {
        for(int y=0; y<arrSize-1; y++)
        {
            if(bitSizeArr[y] > bitSizeArr[y+1])
            {
                int temp = bitSizeArr[y];
                bitSizeArr[y] = bitSizeArr[y+1];
                bitSizeArr[y+1] = temp;
                
                temp = arr[y];
                arr[y] = arr[y + 1];
                arr[y + 1] = temp;

            }   
        }
    }
    
    //1 bit
    for(int i=0; i<(arrSize); i++)
    {
        for(int y=0; y<arrSize-1; y++)
        {
            if(bitSizeArr[y] == bitSizeArr[y+1])
            {
                if(arr[y] > arr[y+1])
                {
                    int temp = arr[y];
                    arr[y] = arr[y + 1];
                    arr[y + 1] = temp;
                }   
            }
        }
    }    
    
    *returnSize = arrSize;
    return arr;
}