int find(int* nums,int left,int right){
    if(left>=right){return nums[left];}
    int mid=(left+right)/2;
    if(mid==0&&nums[mid]!=nums[mid+1]){
       return nums[mid];
    }
    if(nums[mid]!=nums[mid-1]&&nums[mid]!=nums[mid+1]){return nums[mid];}
    int temp=0;
    if(nums[mid]!=nums[mid-1]){temp=mid-1;}
    else{temp=mid-2;}
    if((temp-left+1)%2==1){return find(nums,left,temp);}
    if(nums[mid]!=nums[mid+1]){temp=mid+1;}
    else{temp=mid+2;}
    if((right-temp+1)%2==1){return find(nums,temp,right);}
    return NULL;
}
int singleNonDuplicate(int* nums, int numsSize) {
    if(numsSize==0){return NULL;}
    return find(nums,0,numsSize-1);
}
/*int singleNonDuplicate(int* nums, int numsSize) {
    if(numsSize==0){return NULL;}
    if(numsSize==1){return nums[0];}
    if(nums[0]!=nums[1]){return nums[0];}
    if(nums[numsSize-1]!=nums[numsSize-2]){return nums[numsSize-1];}
    for(int i=1;i<numsSize-1;i++){
        if(nums[i]!=nums[i-1]&&nums[i]!=nums[i+1]){return nums[i];}
    }
    return NULL;
}*/