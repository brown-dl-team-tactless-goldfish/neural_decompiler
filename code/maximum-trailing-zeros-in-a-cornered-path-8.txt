public class Solution
{
    public int MaxTrailingZeros(int[][] grid)
    {
        int M = grid.Length; // total rows
        int N = grid[0].Length; // total columns
        // Create 8 memory grids
        int[,] twosUp = new int[M, N];
        int[,] twosDown = new int[M, N];
        int[,] twosLeft = new int[M, N];
        int[,] twosRight = new int[M, N];
        
        int[,] fivesUp = new int[M, N];
        int[,] fivesDown = new int[M, N];
        int[,] fivesLeft = new int[M, N];
        int[,] fivesRight = new int[M, N];

        // Fill twosUp
        for (int j = 0; j < N; j++)
        {
            int twosCt = 0;
            for (int i = 0; i < M; i++)
            {
                twosCt += Get2FactorCtFrom(grid[i][j]);
                twosUp[i, j] = twosCt;
            }
        }
        // Fill twosDown
        for (int j = 0; j < N; j++)
        {
            int twosCt = 0;
            for (int i = M - 1; i >= 0; i--)
            {
                twosCt += Get2FactorCtFrom(grid[i][j]);
                twosDown[i, j] = twosCt;
            }
        }
        // Fill twosLeft 
        for (int i = 0; i < M; i++)
        {
            int twosCt = 0;
            for (int j = 0; j < N; j++)
            {
                twosCt += Get2FactorCtFrom(grid[i][j]);
                twosLeft[i, j] = twosCt;
            }
        }
        // Fill twosRight
        for (int i = 0; i < M; i++)
        {
            int twosCt = 0;
            for (int j = N - 1; j >= 0; j--)
            {
                twosCt += Get2FactorCtFrom(grid[i][j]);
                twosRight[i, j] = twosCt;
            }
        }

        // Fill fivesUp
        for (int j = 0; j < N; j++)
        {
            int fivesCt = 0;
            for (int i = 0; i < M; i++)
            {
                fivesCt += Get5FactorCtFrom(grid[i][j]);
                fivesUp[i, j] = fivesCt;
            }
        }
        // Fill fivesDown
        for (int j = 0; j < N; j++)
        {
            int fivesCt = 0;
            for (int i = M - 1; i >= 0; i--)
            {
                fivesCt += Get5FactorCtFrom(grid[i][j]);
                fivesDown[i, j] = fivesCt;
            }
        }
        // Fill fivesLeft 
        for (int i = 0; i < M; i++)
        {
            int fivesCt = 0;
            for (int j = 0; j < N; j++)
            {
                fivesCt += Get5FactorCtFrom(grid[i][j]);
                fivesLeft[i, j] = fivesCt;
            }
        }
        // Fill fivesRight
        for (int i = 0; i < M; i++)
        {
            int fivesCt = 0;
            for (int j = N - 1; j >= 0; j--)
            {
                fivesCt += Get5FactorCtFrom(grid[i][j]);
                fivesRight[i, j] = fivesCt;
            }
        }

        // traverse the grid, at each cell get the min of the 2s ct and 5s ct in any 2 right angle directions
        int max = 0;
        for (int i = 0; i < M; i++)
        {
            for (int j = 0; j < N; j++)
            {
                int option1twos = twosUp[i,j] + twosRight[i,j] - Get2FactorCtFrom(grid[i][j]);
                int option1fives = fivesUp[i, j] + fivesRight[i, j] - Get5FactorCtFrom(grid[i][j]);
                max = Math.Max(max, Math.Min(option1twos, option1fives));

                int option2twos = twosUp[i, j] + twosLeft[i, j] - Get2FactorCtFrom(grid[i][j]);
                int option2fives = fivesUp[i, j] + fivesLeft[i, j] - Get5FactorCtFrom(grid[i][j]);
                max = Math.Max(max, Math.Min(option2twos, option2fives));

                int option3twos = twosLeft[i, j] + twosDown[i, j] - Get2FactorCtFrom(grid[i][j]);
                int option3fives = fivesLeft[i, j] + fivesDown[i, j] - Get5FactorCtFrom(grid[i][j]);
                max = Math.Max(max, Math.Min(option3twos, option3fives));

                int option4twos = twosRight[i, j] + twosDown[i, j] - Get2FactorCtFrom(grid[i][j]);
                int option4fives = fivesRight[i, j] + fivesDown[i, j] - Get5FactorCtFrom(grid[i][j]);
                max = Math.Max(max, Math.Min(option4twos, option4fives));

            }
        }
        return max;
    }

    private int Get2FactorCtFrom(int n)
    {
        int result = 0;
        while (n % 2 == 0)
        {
            result++;
            n /= 2;
        }
        return result;
    }

    private int Get5FactorCtFrom(int n)
    {
        int result = 0;
        while (n % 5 == 0)
        {
            result++;
            n /= 5;
        }
        return result;
    }
}