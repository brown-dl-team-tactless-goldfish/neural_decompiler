class Graph:
    def __init__(self, n: int, edges: List[List[int]]):
        self.n = n
        self.dis = [[float('inf')]*n for _ in range(n)]
        for a,b, c in edges:
            self.dis[a][b]=c
        for i in range(n):self.dis[i][i]=0
        for k in range(n):
            for i in range(n):
                for j in range(n):
                    self.dis[i][j] = min(self.dis[i][j], self.dis[i][k]+self.dis[k][j])

    def addEdge(self, edge: List[int]) -> None:
        k1, k2, c = edge
        for i in range(self.n):
            for j in range(self.n):
                self.dis[i][j] = min(self.dis[i][j], self.dis[i][k1] + c + self.dis[k2][j])

    def shortestPath(self, node1: int, node2: int) -> int:
        if self.dis[node1][node2] == float('inf'):return -1
        return self.dis[node1][node2]