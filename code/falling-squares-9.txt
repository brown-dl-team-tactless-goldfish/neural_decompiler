class node
{
  public:
    int hei,max_hei;
    int s,e;
    node* l;
    node* r;
    node(int s,int e):hei(0),max_hei(0),s(s),e(e),l(NULL),r(NULL)
    {}
};
class Solution {
    
    public:
    node* build(vector<int>&nums,int s,int e)
    {
        if(s>=e)
            return NULL;
        if(e-s==1)
            return new node(nums[s],nums[e]);
        
        int mid=(s+e)/2;
        
        node* root=new node(nums[s],nums[e]);
        
        root->l=build(nums,s,mid);
        root->r=build(nums,mid,e);
        
        return root;
    }
    
    int find(node* root,int s,int e)
    {
        if(e<=root->s || s>=root->e)
            return INT_MIN;
        
        if(s<=root->s && e>=root->e)
        {
            return root->max_hei;
        }
        else
        {
            int l=find(root->l,s,e);
            int r=find(root->r,s,e);
            
            return max(root->hei,max(l,r));
        }
    }
    void update(node* root,int s,int e,int val)
    {
        
        if(e<=root->s || s>=root->e)
            return;
                
        if(s<=root->s && e>=root->e)
        {
            root->hei=val;
            root->max_hei=max(root->max_hei,root->hei);
        }
        else
        {
            update(root->l,s,e,val);
            update(root->r,s,e,val);
            root->max_hei=max(root->hei,max(root->l->max_hei,root->r->max_hei));
        }
    }
    
   vector<int> fallingSquares(vector<vector<int>>& rect){
        set<int>st;
       
        for(vector<int> &v:rect)
        {    
            st.insert(v[0]);  
            st.insert(v[1]+v[0]);
        } 
        vector<int>x;
        for(auto &i:st)
            x.push_back(i);
        
        node* root=build(x,0,x.size()-1);
        vector<int>ans;
        for(auto & v:rect)
        {
            int val=0;
            int res=find(root,v[0],v[0]+v[1]);
            update(root,v[0],v[0]+v[1],res+v[1]);
           
            ans.push_back(root->max_hei);
        } 
        return ans;
    }
};