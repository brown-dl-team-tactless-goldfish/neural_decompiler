class TopVotedCandidate {
    vector<int>timesWin ;
    vector<int>times ;
public:
    TopVotedCandidate(vector<int>& persons, vector<int>& times) {
        vector<pair<int, int>>data ;
        int n = times.size() ;
        timesWin.resize(n) ;
        unordered_map<int, int>Map ; //{person, voted} ;
        for(int i = 0; i < n; i++){
            data.push_back({times[i], persons[i]}) ;
        }
        sort(data.begin(), data.end()) ;
        sort(times.begin(), times.end()) ;
        this->times = times ;
        int maxVote = 1 ;
        timesWin[0] = data[0].second ;
        Map[data[0].second]++ ;
        for(int i = 1; i < n; i++){
            Map[data[i].second]++ ;
            timesWin[i] = timesWin[i-1] ;
            if(Map[data[i].second] >= maxVote){
                maxVote = Map[data[i].second] ;
                timesWin[i] = data[i].second ;
            }
        }
    }
    
    int q(int t) {
        auto iter = upper_bound(times.begin(), times.end(), t) ;
        int idx = iter - times.begin() - 1 ;
        if(idx < 0)
            return -1 ;
        else 
            return timesWin[idx] ;            
    }
};

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate* obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj->q(t);
 */