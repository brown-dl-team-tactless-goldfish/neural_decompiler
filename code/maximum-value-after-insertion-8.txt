public class Solution {
    // Helper function
    private bool Comparision(bool isNegative, char c, int x) {
        return isNegative ? c - '0' > x : c - '0' < x;
    }
    
    public string MaxValue(string n, int x) {
        string ans = string.Empty;
        
        // Check if the given string is negative
        bool isNegative = (n[0] == '-') ? true : false;
        
        int i = 0;
        if (isNegative) {
            // Starting index with 1 in case of negative string
            i = 1;
        }
        
        while (i < n.Length) {
            // Helper function to check if the given number is inserted here or not
            if (Comparision(isNegative, n[i], x)) {
                // Inserting given number in string
                ans = n.Substring(0, i) + x + n.Substring(i);
                break;
            }
            
            // Increment index
            i++;
        }
        
        // Check if no insertion has happened
        if (i == n.Length) {
            // Add number to end of the string
            ans = n + x;
        }
        
        return ans;
    }
}