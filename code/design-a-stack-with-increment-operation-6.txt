


typedef struct {
    int *arr;
    int top;
    int max;
} CustomStack;


CustomStack* customStackCreate(int maxSize) {
    
    CustomStack *s = (CustomStack *)malloc(sizeof(CustomStack));
    s->arr = malloc(sizeof(int)*maxSize);
    s->top = -1;
    s->max = maxSize;
    
    return s;
    
}

void customStackPush(CustomStack* s, int x) {
    
    if (s->top == -1) {
        s->top = 0;
        s->arr[s->top] = x;
        return;
    }
    
    if(s->top + 1 < s->max) {
        s->top = s->top + 1;
        s->arr[s->top] = x; 
    }
    
  
}

int customStackPop(CustomStack* obj) {
    int temp;
    if(obj->top == -1)
        return -1;
    
    else {
        temp = obj->arr[obj->top];
        obj->top = obj->top - 1;
    }
  
    return temp;
}

void customStackIncrement(CustomStack* s, int k, int val) {
  
    int count = 0;
    
    while(count < k && count <= s->top) {
        
        s->arr[count] = s->arr[count] + val;
        count++;
    }
    
}

void customStackFree(CustomStack* obj) {
    
    free(obj->arr);
    free(obj);
}

/**
 * Your CustomStack struct will be instantiated and called as such:
 * CustomStack* obj = customStackCreate(maxSize);
 * customStackPush(obj, x);
 
 * int param_2 = customStackPop(obj);
 
 * customStackIncrement(obj, k, val);
 
 * customStackFree(obj);
*/