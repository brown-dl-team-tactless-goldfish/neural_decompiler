int maxFreq(string s, int maxLetters, int minSize, int maxSize) {
   
    unordered_map<string, int> stringCount;
    unordered_map<char, int> uniqueChars;

    // left side of sliding window
    auto leftIt = s.begin();

    // right side of sliding window
    auto rightIt = s.begin();
    while (rightIt != s.end() && rightIt - leftIt < minSize) {
        ++uniqueChars[*rightIt];
        ++rightIt;
    }

    // iterate until window reaches end of string
    while (s.end() - leftIt >= minSize) {
        // check if valid string
        if (uniqueChars.size() <= maxLetters) {
            ++stringCount[string(leftIt, rightIt)];
        }

        // decrement characters falling out of the string and increment character being added to string
        // note: rightIt is not included in the string so add the character at right iterator before moving iterator
        --uniqueChars[*leftIt];
        if (uniqueChars[*leftIt] == 0) {
            uniqueChars.erase(*leftIt);
        }
        ++leftIt;
		if (rightIt != s.end()) {
			++uniqueChars[*rightIt];
			++rightIt;
		}

    }

    // iterate through map and find maximum frequency string
    int maxFreq = 0;
    for (auto& kv : stringCount) {
        maxFreq = max(maxFreq, kv.second);
    }
    return maxFreq;