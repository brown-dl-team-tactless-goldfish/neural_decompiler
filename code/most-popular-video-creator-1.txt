class Solution {
public:
    vector<vector<string>> mostPopularCreator(vector<string>& creators, vector<string>& ids, vector<int>& views) {
        if(size(views)==1) return{{creators[0],ids[0]}};

        map<string,long long> viewMp;
        map<string,pair<string,int>> idMp;
        priority_queue<pair<long long,string>> pq;
        queue<string> names;
        vector<vector<string>> ans;
        int i=0;

        for(string c : creators){
            viewMp[c]+=views[i];
            i++;
        }
        //op
        for(auto p:viewMp) cout<<p.first<<" : "<<p.second<<endl;

        for(auto p:viewMp){
            pq.push({p.second,p.first});
        } 
        long long currMax = pq.top().first;

        while(pq.size()) {
              if(currMax==pq.top().first){
                 names.push(pq.top().second);
                 pq.pop();
                 }
              else break;   
        }

        i=0;
        for(string c : creators){
            if(idMp.find(c)==idMp.end()){
                idMp[c] = {ids[i],views[i]};
            }
            else{
                 if(idMp[c].second<views[i])
                    idMp[c] = {ids[i],views[i]};
                 else if(idMp[c].second==views[i]){
                     priority_queue<string, vector<string>, greater<string> > gq;
                     gq.push(ids[i]);
                     gq.push(idMp[c].first);
                     if(gq.top()!=idMp[c].first)
                       idMp[c] = {ids[i],views[i]};
                 }   
            }
            i++;
        }
       
       

        while(names.size()){
          vector<string> temp;
          temp.push_back(names.front());
          temp.push_back(idMp[names.front()].first);
          names.pop();
          ans.push_back(temp); 
        }
       
        return ans;
    }
};