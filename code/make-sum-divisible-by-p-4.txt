class Solution {
public:
    int minSubarray(vector<int>& nums, int p) {
        int64_t size{(int)nums.size()}, min_{size}, r{std::accumulate(nums.begin(), nums.end(), (int64_t)0)%p};
        if(r == 0) return 0;
        std::unordered_map<int,int> m;
        m[0] = -1;
        
        for(int64_t i{0}, cur{0}, size{(int)nums.size()}; i < size; ++i) {
            cur += nums[i];
            int64_t curR{cur%p}, left{(curR+p-r)%p};
            if(m.count((int)left)) min_ = std::min(min_, i-m[(int)left]);
            m[(int)curR] = i;
        }
        
        return min_ == size ? -1 : min_;
    }
};