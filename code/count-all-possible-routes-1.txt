class Solution {
public:
    int dp[101][201] ;
    int mod = 1e9+7 , n;
    
    int solve(vector<int>& loc, int start, int finish, int fuel){
    
        if(dp[start][fuel]!=-1)
            return dp[start][fuel];
        int ans = 0;
        if(start==finish) ans++;
        for(int i=0;i<n;i++){
            if(start!=i && abs(loc[i]-loc[start]) <= fuel){
                ans = (ans + solve(loc,i,finish,fuel-abs(loc[i]-loc[start]))) % mod;
            }
        }
        return dp[start][fuel] = ans;
    }
    
    int countRoutes(vector<int>& loc, int start, int finish, int fuel) {
        n = loc.size();
        memset(dp,-1,sizeof(dp));
        return solve(loc,start,finish,fuel);
    }
};