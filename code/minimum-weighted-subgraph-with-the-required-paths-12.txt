class Solution {
public:
    void dijkstra(int s, vector<long long int>& v, vector<vector<int>>adj[]){
        priority_queue<pair<long long int, int>, vector<pair<long long int, int>>, greater<pair<long long int, int>>>q;
        v[s]=0;
        q.push({0, s});
        while(!q.empty()){
            long long int wt=q.top().first;
            int pos=q.top().second;
            q.pop();
            if(wt!=v[pos]){continue;}
            for(auto it: adj[pos]){
                if(v[it[0]]>wt+it[1]){
                    v[it[0]]=wt+it[1];
                    q.push({v[it[0]], it[0]});
                }
            }
        }
    }
    long long minimumWeight(int n, vector<vector<int>>& edges, int src1, int src2, int dest) {
        vector<vector<int>>adj[n];
        vector<vector<int>>adj1[n];
        for(int i=0; i<edges.size(); i++){
            adj[edges[i][0]].push_back({edges[i][1], edges[i][2]});
            adj1[edges[i][1]].push_back({edges[i][0], edges[i][2]});
        }
        long long int ans=1e18;
        vector<long long int>v1(n, 1e18), v2(n, 1e18), v3(n, 1e18);
        dijkstra(src1, v1, adj);
        dijkstra(src2, v2, adj);
        dijkstra(dest, v3, adj1);
        if(v3[src1]==1e18 || v3[src2]==1e18){return -1;}
        for(int i=0; i<n; i++){
            ans=min(ans, v1[i]+v2[i]+v3[i]);
        }
        if(ans==1e18){return -1;}
        return ans;
    }
};