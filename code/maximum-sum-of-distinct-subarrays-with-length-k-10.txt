class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long ans = 0;
        int left = 0, right = 0;
        int cnt = 0;
        long long sum = 0;
        unordered_map<int, int> have;
        while(left < nums.size() && right < nums.size()){
            while(left < right+1 && (cnt == k || have[nums[right]])){
                have[nums[left]]--;
                sum -= nums[left];
                left++;
                cnt--;
            }
            have[nums[right]]++;
            sum += nums[right];
            cnt++;
            if(cnt == k) ans = max(sum, ans);
            right++;
            // cout << cnt << endl;
        }
        return ans;
    }
};