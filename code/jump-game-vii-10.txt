class Solution {
public:
    bool canReach(string s, int minJump, int maxJump) {
        int n = s.size();
        if (s.back() == '1') {
            return false;
        }
        set<int> validJumps = { n - 1 };
        for (int i = n - 2; i >= 0; i--) {
            if (s[i] == '0') {
                int rangeStart = i + minJump;
                int rangeEnd = i + maxJump;
                auto startIt = validJumps.lower_bound(rangeStart);
                auto endIt = validJumps.lower_bound(rangeEnd);
                if ((startIt != validJumps.end() && rangeStart <= *startIt && *startIt <= rangeEnd) ||
                    (endIt != validJumps.end() && rangeStart <= *endIt && *endIt <= rangeEnd)) {
                    validJumps.insert(i);
                }
            }
        }
        return validJumps.find(0) != validJumps.end();
    }
};