int sumSubarrayMins(int* arr, int arrSize) {
	long long sum = 0;

		int rampingUp = 0;
		int* elem = arr;
		int* arrEnd = arr + arrSize;
		while (elem < arrEnd) {
			int* pos = elem++;
			int curr = *pos;

			int* posR;
			int left;
			int right;

			if (rampingUp > 0) {
				rampingUp--;

				left = 1;

				posR = pos + rampingUp;
				while (++posR < arrEnd) {
					if (*posR < curr) {
						break;
					}
				}
				right = (posR - pos);

			} else {
				int* posL = pos;
				while (--posL >= arr) {
					if (*posL <= curr) {
						break;
					}
				}
				left = (pos - posL);


				posR = pos + 1;
				if (posR < arrEnd) {
					if (*posR >= curr) {

						int prev = *posR;
						if (++posR < arrEnd) {
							if (prev <= *posR) {
								rampingUp = 2;
								prev = *posR;
								while (++posR < arrEnd && prev <= *posR) {
									rampingUp++;
									prev = *posR;
								}
							}

							while (posR < arrEnd) {
								if (*posR < curr) {
									break;
								}
								posR++;
							}
						}
						right = (posR - pos);

					} else {
						right = 1;
					}
				} else {
					right = 1;
				}
			}

			long count = left * right;
			sum += curr * count;
		}
		return sum % 1000000007;
}