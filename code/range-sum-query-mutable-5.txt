struct SegTree{
int leftval,rightval, count;   // count is the total sum in this interval bounded by leftval and rightval
struct SegTree* left;
struct SegTree* right;
};

/** build a segment tree with the given range*/

struct SegTree* buildTree(int min, int max){
    if(max<min)
        return NULL;
    struct SegTree* current= (struct SegTree*) malloc(sizeof(struct SegTree));
    current->leftval=min;
    current->rightval=max;
    current->count=0;
    int mid=min+(max-min)/2;
    if(min==max){
        current->left=NULL;
        current->right=NULL;
    }
    else{
        current->left= buildTree(min, mid);
        current->right= buildTree( mid+1, max);
    }
    return current;
    }

/** destroy the tree*/

void destroyTree(struct SegTree* root){
    if(!root)
        return;
    destroyTree(root->left);
    destroyTree(root->right);
    free(root);
}


/**modify the value of an element in the numArray at a given index, add  int change to its value */

void ModifyElement(struct SegTree** root, int index,int change){
    if(!(*root))
        return;
    (*root)->count=(*root)->count+change;
    int mid=(*root)->leftval+((*root)->rightval-(*root)->leftval)/2;
    if(index<=mid)
        ModifyElement(&((*root)->left), index,change);
    else
        ModifyElement(&((*root)->right), index,change);
}


/**calculate the total sum in the interval */

int countElements(struct SegTree* root,int leftbound, int rightbound){
    if(rightbound<leftbound|| leftbound>root->rightval || rightbound<root->leftval)
        return 0;
    if(root->leftval==leftbound && root->rightval==rightbound)
        return root->count;
    int mid=root->leftval+(root->rightval-root->leftval)/2;
    if(rightbound<=mid)
        return  countElements(root->left,leftbound, rightbound);
    else if(leftbound>mid)
        return  countElements(root->right,leftbound, rightbound);
    else
        return  countElements(root->left,leftbound, mid)+countElements(root->right,mid+1, rightbound);
}







struct NumArray {
    struct SegTree* root;
};

/** Initialize your data structure here. */
struct NumArray* NumArrayCreate(int* nums, int numsSize) {
    struct NumArray*   numArray=(struct NumArray* )malloc(sizeof(struct NumArray*));
     numArray->root=buildTree(0,numsSize-1);
    int i;
    for(i=0;i<numsSize;i++)
        ModifyElement(&(numArray->root),i,nums[i]);
    return  numArray;}

void update(struct NumArray* numArray, int i, int val) {
    int current=countElements(numArray->root,i,i);
    int change=val-current;
    ModifyElement(&( numArray->root),i,change);

}

int sumRange(struct NumArray* numArray, int i, int j) {
    return countElements(numArray->root,i,j);
}

/** Deallocates memory previously allocated for the data structure. */
void NumArrayFree(struct NumArray* numArray) {
    destroyTree(numArray->root);
    free(numArray);
}