    public class Solution
    {
        private const int MODULO = 1_000_000_007;

        public int CheckRecord(int n)
        {
            if (n == 1)
            {
                return 3;
            }

            //0 - P
            //1 -l
            //2 -ll

            checked
            {
                long[,] dp = new long[n + 1,3];

                dp[1, 0] = 1;
                dp[1, 1] = 1;
                dp[1, 2] = 0;

                for (int i = 2; i <= n; i++)
                {
                    dp[i, 0] = dp[i - 1, 0];
                    dp[i, 0] += dp[i - 1, 1];
                    dp[i, 0] += dp[i - 1, 2];

                    dp[i, 0] %= MODULO;

                    dp[i, 1] = dp[i - 1, 0];
                    dp[i, 2] = dp[i - 1, 1];
                }

                long res = 0;
                res += dp[n, 0];
                res %= MODULO;
                res += dp[n, 1];
                res %= MODULO;
                res += dp[n, 2];
                res %= MODULO;

                for (int i = 0; i < n; i++)
                {
                    long left = 1;
                    long right = 1;

                    if (i > 0)
                    {
                        left = dp[i, 0] + dp[i, 1] + dp[i, 2];
                    }

                    if (i < n - 1)
                    {
                        right = dp[n - i - 1, 0] + dp[n - i - 1, 1] + dp[n - i - 1, 2];
                    }

                    res += left * right;
                    res %= MODULO;
                }

                return (int)res;
            }
        }
    }