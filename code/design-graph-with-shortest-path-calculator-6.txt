public class Graph 
{
    private readonly int n;
    private readonly List<int[]>[] adj;
    public Graph(int n, int[][] edges)
    {
        this.n = n;
        adj = new List<int[]>[n];
        for (int i = 0; i < n; i++)
        {
            adj[i] = new List<int[]>();
        }
        foreach (int[] edge in edges)
        {
            AddEdge(edge);
        }
    }

    public void AddEdge(int[] edge)
    {
        adj[edge[0]].Add(new int[] { edge[1], edge[2] });
    }

    public int ShortestPath(int node1, int node2)
    {
        int[] dist = new int[n];
        for (int i = 0; i < n; i++)
        {
            dist[i] = int.MaxValue;
        }
        dist[node1] = 0;
        PriorityQueue<int[], int> pq = new PriorityQueue<int[], int>();
        pq.Enqueue(new int[] { node1, 0 }, 0);
        while (pq.Count > 0)
        {
            int[] curr = pq.Dequeue();
            int u = curr[0];
            int d = curr[1];
            if (u == node2)
            {
                return d;
            }
            foreach (int[] edge in adj[u])
            {
                int v = edge[0];
                int w = edge[1];
                if (dist[u] + w < dist[v])
                {
                    dist[v] = dist[u] + w;
                    pq.Enqueue(new int[] { v, dist[v] }, dist[v]);
                }
            }
        }
        return -1;
    }
}