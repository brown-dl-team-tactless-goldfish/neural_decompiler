typedef struct {
    int ping_time; 
    int count;
    struct Node *next;
} Node;

typedef struct {    
    int node_count;
    Node *head;
    Node *tail;
} RecentCounter;


RecentCounter* recentCounterCreate() {
    RecentCounter *obj = (RecentCounter *)calloc(1, sizeof(*obj));
    obj->head = NULL;
    obj->tail = NULL; 
    obj->node_count = 0;
    return obj;
}

int recentCounterPing(RecentCounter* obj, int t) {
    ++obj->node_count;
    Node *node = (Node *)calloc(1, sizeof(*node));
    node->ping_time = t;
    node->count = obj->node_count;
    node->next = NULL;
    
    if(obj->head == NULL) {
        obj->head = node;
        obj->tail = node;
    } else {
        obj->tail->next = node;
        obj->tail = node;
    }
    
    int lower = t - 3000;
    while(obj->head && lower > obj->head->ping_time)  {
        Node *temp = obj->head;
        obj->head = temp->next;
        free(temp);
    }
    
    if(obj->head && obj->tail) {
        return obj->tail->count - obj->head->count + 1;
    }
    
    return -1;
}

void recentCounterFree(RecentCounter* obj) {
    while(obj->head != NULL) {
        Node *temp = obj->head;
        obj->head = temp->next;
        free(temp);
    }
	free(obj);
}

/**
 * Your RecentCounter struct will be instantiated and called as such:
 * RecentCounter* obj = recentCounterCreate();
 * int param_1 = recentCounterPing(obj, t);
 
 * recentCounterFree(obj);
*/