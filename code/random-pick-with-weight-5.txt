typedef struct {
    int *sumOfWeightsArr;
    int totalWeightSum;
    int weightSize;
} Solution;

Solution* solutionCreate(int* w, int wSize) {
    Solution *s = malloc(sizeof(Solution));
    assert(s != NULL);
    s->weightSize = wSize;
    s->sumOfWeightsArr = malloc(sizeof(int)*wSize);
    assert(s->sumOfWeightsArr != NULL);
    
    // calculate total sum of the array, this will be our max range total
    s->sumOfWeightsArr[0] = w[0];
    for(int i=1; i<wSize; i++){
        s->sumOfWeightsArr[i] = s->sumOfWeightsArr[i-1] + w[i];
    }
    
    // store max sum, so we can scale up/down our random number to this rane
    s->totalWeightSum = s->sumOfWeightsArr[wSize-1];
    return s;
}

int binSearch(int *arr, int size, int target){
    int left, right, mid;
    left = 0;
    right = size-1;
    while(left < right){
        int mid = left + (right - left)/2;
        // return mid+1 instead of mid, since we need to send max range
        // max range is just above currently matched range
        if(arr[mid] == target)  return mid+1;
        else if(arr[mid] < target){
            left = mid + 1;
        }
        else{
            right = mid;
        }
    }
    return left;
}

int solutionPickIndex(Solution* obj) {
    // take any random number, and scale it up/down to our range
    int pos = rand() % obj->totalWeightSum;
    
    // search in our total array via bin search
    return binSearch(obj->sumOfWeightsArr, obj->weightSize, pos);
}

void solutionFree(Solution* obj) {
    free(obj->sumOfWeightsArr);
    free(obj);
}

/**
 * Your Solution struct will be instantiated and called as such:
 * Solution* obj = solutionCreate(w, wSize);
 * int param_1 = solutionPickIndex(obj);
 
 * solutionFree(obj);
*/