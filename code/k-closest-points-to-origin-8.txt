/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

// sum of squares
int ssq(int a, int b)
{
    return a * a + b * b;
}

void swap(int** a, int** b)
{
    int* tmp = *a;
    *a = *b;
    *b = tmp;
}

void heapify(int** heap, int i, int heapSize)
{
    int l = 2 * i + 1; // left child
    int r = 2 * i + 2; // right child
    
    int smallest = i;
    
    if (l <= heapSize - 1)
    {
        int lsum = ssq(heap[l][0], heap[l][1]);
        int isum = ssq(heap[i][0], heap[i][1]);
        
        if (lsum < isum)
        {
            smallest = l;
        }
    }
    
    if (r <= heapSize - 1)
    {
        int rsum = ssq(heap[r][0], heap[r][1]);
        int ssum = ssq(heap[smallest][0], heap[smallest][1]);
        
        if (rsum < ssum)
        {
            smallest = r;
        }
    }
    
    if (smallest != i)
    {
        swap(&heap[smallest], &heap[i]);  // Here pointers are swapped
        heapify(heap, smallest, heapSize);
    }
}

int* pop(int** heap, int* heapSize)
{
    int* ans = heap[0];
    heap[0] = heap[(*heapSize) - 1];
    (*heapSize)--;
    
    heapify(heap, 0, *heapSize);
    
    return ans;
}

int** kClosest(int** points, int pointsSize, int* pointsColSize, int k, int* returnSize, int** returnColumnSizes){
    
    int** minHeap = points;
    int heapSize = pointsSize;
    
    // Build min heap (O(n))
    for (int i = heapSize / 2 - 1; i >= 0; i--)
    {
        heapify(minHeap, i, heapSize);
    }
    
    // printf("\nHeap built:\n");
    // for (int i = 0; i < heapSize; i++)
    // {
    //     printf("[%d, %d]  ", minHeap[i][0], minHeap[i][1]);
    // }
    
    int** ans = malloc(sizeof(int*) * k);
    *returnSize = k;
    *returnColumnSizes = malloc(sizeof(int) * k);
    
    for (int i = 0; i < k; i++)
    {
        ans[i] = pop(minHeap, &heapSize);
        (*returnColumnSizes)[i] = 2;
    }
    
    return ans;
}