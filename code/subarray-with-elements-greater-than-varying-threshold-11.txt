class Solution {
public:
    vector<int>fa,cnt;
    int findFather(int x)
    {
        if(fa[x]==x)return x;
        return fa[x]=findFather(fa[x]);
    }
    void Union(int x,int y)
    {
        x=fa[x],y=fa[y];
        int cnt_x=cnt[x],cnt_y=cnt[y];
        cnt[x]+=cnt_y,cnt[y]+=cnt_x;
        fa[y]=x;
    }
    int validSubarraySize(vector<int>& nums, int threshold) 
    {
        int n=nums.size();
        fa.resize(n),cnt.resize(n);
        for(int i=0;i<n;i++)fa[i]=i,cnt[i]=1;
        vector<int>record(n);
        vector<pair<int,int>>at_least(n);
        for(int i=0;i<n;i++)at_least[i]={ceil(1.0*(threshold+1)/nums[i]),i};
        for(int i=0;i<n;i++)record[i]=at_least[i].first;
        sort(at_least.begin(),at_least.end());
        for(auto &x:at_least)
        {
            int len=x.first,idx=x.second;
            if(idx-1>=0&&(findFather(idx-1)!=findFather(idx))&&record[idx-1]<=len)Union(idx,idx-1);
            if(idx+1<n&&(findFather(idx+1)!=findFather(idx))&&record[idx+1]<=len)Union(idx,idx+1);
            if(cnt[fa[idx]]>=len)return len;
        }
        return -1;
    }
};