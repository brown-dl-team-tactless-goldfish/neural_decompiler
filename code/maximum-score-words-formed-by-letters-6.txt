    public class Solution
    {
        private void Helper(
            string[] words, 
            int wIdx,
            (int count, int score)[] lettersData, int currentScore, ref int res)
        {
            if (wIdx == words.Length)
            {
                res = Math.Max(res, currentScore);
                return;
            }

            //don't use this word
            Helper(words, wIdx + 1, lettersData, currentScore, ref res);

            IDictionary<char, int> needed = new Dictionary<char, int>();

            foreach (var cw in words[wIdx])
            {
                if(!needed.ContainsKey(cw))
                {
                    needed[cw] = 0;
                }

                needed[cw]++;
            }

            foreach (var n in needed)
            {
                currentScore += lettersData[n.Key - 'a'].score * n.Value;

                if (n.Value > lettersData[n.Key - 'a'].count)
                {
                    return;
                }
            }


            
            foreach (var n in needed)
            {
                lettersData[n.Key - 'a'] = (lettersData[n.Key - 'a'].count - n.Value, lettersData[n.Key - 'a'].score);
            }

            Helper(words, wIdx + 1, lettersData, currentScore, ref res);

            foreach (var n in needed)
            {
                lettersData[n.Key - 'a'] = (lettersData[n.Key - 'a'].count + n.Value, lettersData[n.Key - 'a'].score);
            }
        }

        public int MaxScoreWords(string[] words, char[] letters, int[] score)
        {
            (int count, int score)[] lettersData = new (int count, int score)[26];
            for (int i = 0; i < 26; i++)
            {
                lettersData[i] = (0, score[i]);
            }

            foreach (var c in letters)
            {
                lettersData[c - 'a'] = (lettersData[c - 'a'].count + 1, lettersData[c - 'a'].score);
            }

            int res = 0;
            Helper(words, 0, lettersData, 0, ref res);
            return res;
        }
    }