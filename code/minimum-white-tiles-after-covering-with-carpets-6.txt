class Solution {
public:
    vector<int>tile;
    vector<vector<int>>dp;
    int minimumWhiteTiles(string f, int num, int len) {
        int sz=f.size(),totalWHiteTiles=0;
        for(int i=0;i<sz;i++){
            if(f[i]=='1')
                totalWHiteTiles++;
            tile.push_back(totalWHiteTiles);
        }
        dp.resize(sz,vector<int>(num+1,-1));
        return totalWHiteTiles-helper(f,0,num,len);
    }
    int helper(string &floor,int idx,int rem,int &len){
        if(idx>=floor.size() || rem==0)
            return 0;
        if(dp[idx][rem]!=-1)
            return dp[idx][rem];
        int sz=floor.size();
        // don't start covering the tiles from here
        int a=helper(floor,idx+1,rem,len);
        // start covering the  tiles from here
        int b=helper(floor,idx+len,rem-1,len);
        // last index where the carpet can go if we start coering from here
        int lastIdx=idx+len-1;
        // calculating how many tiles we will civer if we start from here
        b+=tile[lastIdx>=sz?(sz-1):lastIdx]-tile[idx];
        if(floor[idx]=='1')
            b++;
        dp[idx][rem]=max(a,b);
        return dp[idx][rem];
    }
};