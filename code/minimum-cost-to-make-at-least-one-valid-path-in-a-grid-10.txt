class Solution {
public:
    int m, n;
    int minCost(vector<vector<int>>& grid) {
        m = grid.size();    n = grid[0].size();
        
        if(grid.size()==1 && grid[0].size()==1) return 0;
        vector<vector<int>> mark(m, vector<int>(n, 0));
        deque<vector<int>> deq;
        deq.push_back({0,0,0});
        int row[4] = {0,0,1,-1};
        int col[4] = {1,-1,0,0};
        
        
        while(!deq.empty()){
            auto cur = deq.front();
            deq.pop_front();
            mark[cur[0]][cur[1]] = 1;
            if(cur[0]==m-1 && cur[1]==n-1)
                return cur[2];
            int dir = grid[cur[0]][cur[1]]-1;
            for(int i=0; i<4; i++){
                int r = row[i] + cur[0];
                int c = col[i] + cur[1];
                if(valid(r,c) && !mark[r][c])
                    if(r == row[dir] + cur[0] && c == col[dir] + cur[1])
                        deq.push_front({r,c,cur[2]});
                    else
                        deq.push_back({r,c,cur[2]+1});
            }

        }return -1;
        
    }
    
    bool valid(int r, int c){
        return r>=0 && r<m && c>=0 && c<n;
    }
};