class MovieRentingSystem {
public:
    unordered_map <int, set <vector<int>> > price_shop_for; //key: movie 
    unordered_map <int, unordered_map <int, int>> price_of_in; //key: movie
    set <vector <int>> rented; 
    
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        for (vector<int> &entry : entries) {
            price_shop_for[entry[1]].insert({entry[2], entry[0]}); 
            price_of_in[entry[1]][entry[0]] = entry[2]; 
        }
    }
    
    vector<int> search(int movie) {
        if (price_shop_for.find(movie) == price_shop_for.end()) return {};
        vector <int> ans; 
        for (auto it = price_shop_for[movie].begin(); it != price_shop_for[movie].end(); ++it) {
            ans.push_back((*it)[1]);
            if (ans.size()==5) break; 
        }
        return ans; 
    }
    
    void rent(int shop, int movie) {
        vector <int> cur = {price_of_in[movie][shop], shop};
        price_shop_for[movie].erase(cur); 
        rented.insert({cur[0], shop, movie}); 
    }
    
    void drop(int shop, int movie) {
        vector <int> cur = {price_of_in[movie][shop], shop};
        price_shop_for[movie].insert(cur); 
        rented.erase({cur[0], shop, movie});
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> ans;
        for (auto it = rented.begin(); it != rented.end(); ++it) {
            ans.push_back({(*it)[1], (*it)[2]});
            if (ans.size()==5) break; 
        }
        return ans; 
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */