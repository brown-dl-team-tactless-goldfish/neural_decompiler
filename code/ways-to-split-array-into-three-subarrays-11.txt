    int waysToSplit(vector<int>& nums) {
        int res = 0, n = nums.size();
        partial_sum(begin(nums), end(nums), begin(nums));
        
        int totalSum = nums[n-1];
        
        for (int i = 0, j = 0, k = 0; i < n - 2; ++i) {
            int leftSum = nums[i];
            int minMidSum = leftSum * 2; // the prefix sum to make the minimum mid array
            int maxMidSum = (totalSum - leftSum) / 2; // the prefix sum to make the maximum mid array

            if (leftSum > minMidSum) break;  // cannot make the answer. Exit early to reduce computation

			// find the index making minimum mid array
            j = max(i + 1, j);
            while (j < n - 1 && nums[j] < minMidSum)
                ++j;

			// find the index making maximum mid array
            k = max(j, k);
            while (k < n - 1 && nums[k] - nums[i] <= maxMidSum)
                ++k;

            res = (res + k - j) % 1000000007;
        }
        return res;
    }