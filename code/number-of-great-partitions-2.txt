using LL = long long ;
class Solution {
    LL M = 1e9 + 7 ;
    LL myPow(LL a, int b){
        if(b == 0)
            return 1 ;
        if(b % 2)
            return a * myPow(a, b-1) % M ;
        else
            return myPow(a*a % M, b/2) % M;
    }
public:
    int countPartitions(vector<int>& nums, int k) {
        int n = nums.size() ;
        LL SUM = accumulate(nums.begin(), nums.end(), 0LL) ;
        if(SUM < 2*k)
            return 0 ;
        auto dp = vector<vector<LL>>(n+1, vector<LL>(k+1)) ; //dp[i][s] , 0-(i-1), combination sum = s
        dp[0][0] = 1 ;
        LL total = 1 ;
        total = myPow(2, n) ;

        for(int i = 0; i < n; i++){
             for(int s = 0; s < k; s++){
                 dp[i+1][s] = dp[i][s] ;
                 if(s - nums[i] >= 0)
                     dp[i+1][s] = (dp[i+1][s] + dp[i][s-nums[i]]) % M ;
             }
        }
        LL sumLessK = 0 ;
        for(int i = 0; i < k ; i++)
            sumLessK  = (sumLessK + dp[n][i]) % M ;
        
        sumLessK = (sumLessK * 2) % M ;
        
        return (total - sumLessK + M) % M ;
    }
};