struct Element {
    int value{ 0 }, count{ 0 };
    Element ( int value, int count ) : value{ value }, count{ count } {}
};

class RLEIterator {
    queue< Element > myQueue;
public:
    RLEIterator ( vector<int> A ) {
        for (size_t index{1}; index < A.size(); index += 2) if (A[index - 1] > 0)
            myQueue.push( Element{A[index], A[index - 1]} );
    }

    int next ( int distance, int lastValue = 0 ) {
        for ( ;  ! myQueue.empty()  &&  myQueue.front().count <= distance;  myQueue.pop() )
            lastValue = myQueue.front().value, distance -= myQueue.front().count;

        if ( distance == 0 )
            return lastValue;
        else if ( myQueue.empty()  &&  distance > 0 )
            return -1;
        else
            myQueue.front().count -= distance;

        return myQueue.front().value;
    }
};