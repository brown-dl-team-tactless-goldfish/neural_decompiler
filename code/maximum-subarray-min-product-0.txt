typedef unsigned long long ULL ;
int maxSumMinProduct(int* nums, int numsSize){
    int n= numsSize ;
    int* nextSmaller = malloc(n * sizeof(int)) ;
    int* prevSmaller = malloc(n * sizeof(int)) ;
    int mod = 1e9 + 7 ;
    for(int i = 0; i < n; i++){
        nextSmaller[i] = n ;
        prevSmaller[i] = -1 ;
    }
    int* stack = malloc(n * sizeof(int)) ;
    int s_idx = 0 ;
    for(int i = 0; i < n; i++){
        while(s_idx > 0 && nums[stack[s_idx-1]] > nums[i]){
            nextSmaller[ stack[s_idx-1] ] = i ;
            s_idx-- ;
        }
        stack[s_idx] = i ;
        s_idx++ ;
    }

    s_idx = 0 ;  //clear stack
    for(int i = n-1; i >=0; i--){
        while(s_idx > 0 && nums[stack[s_idx-1]] > nums[i]){
            prevSmaller[ stack[s_idx-1] ] = i ;
            s_idx-- ;
        }
        stack[s_idx] = i ;
        s_idx++ ;
    }
    ULL* presum = malloc(n * sizeof (ULL)) ;
    presum[0] = nums[0] ;
    for(int i = 1; i < n; i++){
        presum[i] = presum[i-1] + nums[i] ; 
    }
    
    ULL ans = 0 ;
    for(int i = 0; i < n; i++){
        ULL sum ;
        int a = prevSmaller[i] ;
        int b = nextSmaller[i] ;        
        sum = presum[b-1] - ((a == -1) ? 0 : presum[a]) ;
        sum *= nums[i] ;
        ans = fmaxl(ans, sum) ;  //must to use fmaxl : long double fmaxl(long double, long double);   
    }
            
    return ans % mod ;
}