/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct list
{
    int *arr;
    int index;
};

struct list *createList(int capacity)
{
    struct list *myList = (struct list *)malloc(sizeof(struct list));
    myList->arr = (int *)malloc(sizeof(int) * capacity);
    myList->index = 0;
    return myList;
}

void push(struct list *list, int data)
{
    list->arr[list->index++] = data;
}


void dfs(struct TreeNode *root, struct list *list)
{
    if(root == NULL)
        return;
    push(list, root->val);
    
    if(root->left !=NULL && root->right != NULL)
    {
        if(root->left->val < root->right->val)
        {
            dfs(root->left, list);
            dfs(root->right, list);
        }
        else
        {
            dfs(root->right, list);
            dfs(root->left, list);
        }
    }
    else 
    {
         dfs(root->right, list);
         dfs(root->left, list);
    }
    
    push(list, -1);
}

bool compare(struct list *list1, struct list *list2)
{
    if(list1->index != list2->index)
        return false;
    
    for(int i=0; i< list1->index; i++)
    {
        if(list1->arr[i] != list2->arr[i])
            return false;
    }
    return true;
}

bool flipEquiv(struct TreeNode* root1, struct TreeNode* root2)
{
    struct list *list1 = createList(200);
    struct list *list2 = createList(200);
    
    dfs(root1, list1);
    dfs(root2, list2);
        
    return compare(list1, list2);

}