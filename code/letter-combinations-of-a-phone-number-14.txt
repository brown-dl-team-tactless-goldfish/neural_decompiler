#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* convertnumbertochar(int number)
{
    char* returnValue;
    if(number == 9)
    {
        returnValue = (char*)calloc(4,sizeof(char));
        returnValue[0] = 119;
        returnValue[1] = 120;
        returnValue[2] = 121;
        returnValue[3] = 122;
    }else if(number == 8)
    {
        returnValue = (char*)calloc(3,sizeof(char));
        returnValue[0] = 116;
        returnValue[1] = 117;
        returnValue[2] = 118;
    }else if(number == 7)
    {
        returnValue = (char*)calloc(4,sizeof(char));
        returnValue[0] = 112;
        returnValue[1] = 113;
        returnValue[2] = 114;
        returnValue[3] = 115;
    }else if(number < 7 && number > 1)
    {
        returnValue = (char*)calloc(3,sizeof(char));
        returnValue[0] = number * 3 + 91;
        returnValue[1] = number * 3 + 92;
        returnValue[2] = number * 3 + 93;
    }else
    {
        returnValue = (char*)calloc(1,sizeof(char));
        returnValue[0] = 0;
    }
    return returnValue;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** letterCombinations(char * digits, int* returnSize){
    // now I understand backtracking
    int length = strlen(digits);
    if(strlen(digits) == 0)
    {
        *returnSize = 0;
        return NULL;
    }
    int allocated = 1;
    // Collect the digit number and how much memory need to be allocated
    while(length > 0)
    {
        if(digits[length-1] == '9' || digits[length-1] == '7')
        {
            allocated *= 4;
        }
        else
        {
            allocated *= 3;
        }
        length--;
    }
    
    
    
    // allocate the memory
    char** returnValue = (char**)malloc(allocated * sizeof(char*));
    for(int i = 0; i < allocated; i++)
    {
        returnValue[i] = (char*)calloc(strlen(digits)+1 , sizeof(char) );
    }
    
    // put in the value
    char* Combination;
    int currentgap = 1;
    int numberInString = atoi(digits);
    int currentDigit;
    length = strlen(digits) - 1;
    int combineLength;
    
    while(numberInString > 0)
    {
        currentDigit = numberInString%10;
        int i = 0;
        Combination = convertnumbertochar(currentDigit);
        
        if(currentDigit == 9 || currentDigit == 7)
        {
            combineLength = 4;
        }
        else
        {
            combineLength = 3;
        }
        
        while(i<allocated)
        {
            for(int j = 0; j < combineLength; j++)
            {
                for(int k = 0; k < currentgap; k++)
                {
                    returnValue[i][length] = Combination[j];
                    i++;
                }
            }
        }
        if(currentDigit == 9 || currentDigit == 7)
        {
           currentgap *= 4;
        }
        else
        {
            currentgap *= 3;
        }
        
        numberInString /= 10;
        length --;
    }
    
    
    *returnSize = allocated;
    return returnValue;
}