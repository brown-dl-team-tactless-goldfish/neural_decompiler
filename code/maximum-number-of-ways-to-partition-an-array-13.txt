class Solution {
public:
    int waysToPartition(vector<int>& A, int k) {
        int n = A.size();
        unordered_map<long long int, vector<int>> m;
        long long int left = A[0];
        long long int sum = 0;
        for(int x : A)
            sum += x;
        for(int i=1; i<n; i++){
            m[left-(sum-left)].push_back(i-1);
            left += A[i];
        }
        int ans = 0;
        if(m.find(0) != m.end())
            ans = m[0].size();
		for(int i=0; i<n; i++){
            long long int diff = k-A[i];
            int count = 0;
            if(m.find(-diff) != m.end()){
                vector<int> &v = m[-diff];
                count += v.size() - (lower_bound(v.begin(), v.end(), i) - v.begin());
            }
            if(m.find(diff)!=m.end()){
                vector<int> &v = m[diff];
                count += lower_bound(v.begin(), v.end(), i) - v.begin();
            }
            ans = max(ans, count);
        }
        return ans;             
    }
};