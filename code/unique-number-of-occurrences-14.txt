void sort(int *n, int size)
{
    int t;
    for (int i=0; i<size-1; i++)
    {
        for (int j=0; j<size-1; j++)
        {
            if (n[i]>=n[i+1])
            {
                t=n[i];
                n[i]=n[i+1];
                n[i+1]=t;
            }
        }
    }
}

int count(int *n, int index, int size)
{
    int c=0;
    for (int i=index; i<size; i++)
    {
        if (*(n+i)==*(n+index))
            c++;
    }
    return c;
}
//function that verify if a number is arleady been counted and that amounts are different
bool toV(int *c, int value, int size)
{
    int i=0, f=0;
    
    while (i<size && f==0)
    {
        if (value==c[i])
            f++;
        i++;
    }
    if (f>0)
        return false;
    else
        return true;
}

bool uniqueOccurrences(int* arr, int arrSize){
    int c=0, i=0, f=0;
    bool verify=false;
    //sort (arr, arrSize);
    int *counted_value=(int *)malloc(arrSize*sizeof(int));
    int *counted_amount=(int *)malloc(arrSize*sizeof(int));
    
    for (int i=0; i<arrSize; i++)
    {
        counted_value[i]=1001;
    }
    
    for (int i=0; i<arrSize; i++)
    {
        counted_amount[i]=0;
    }
    
    while (i<arrSize && f==0)
    {
        if (i==0)
        {
            c=count(arr, i, arrSize);
            counted_value[i]=arr[i];
            *(counted_amount+i)=c;
        }
        else if (i!=0 && (verify=toV(counted_value, arr[i], arrSize))==true)
        {
            c=count(arr, i, arrSize);
            counted_value[i]=arr[i];
            if ((verify=toV(counted_amount, c, arrSize))==false)
                f=1;
            *(counted_amount+i)=c;
        }
        i++;
    }
    
    if (f==0)
        return true;
    else
        return false;
}