class Solution {
public:
    int totalSteps(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        vector<int> bound(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; i--)
        {
            while (!s.empty() && nums[s.top()] < nums[i])
                s.pop();
            if (s.empty())
                bound[i] = n;
            else
                bound[i] = s.top();
            s.push(i);
        }
        nums.push_back(INT_MAX);
        for (int i = 0; i < n; i = bound[i])
            ans = max<int>(ans, inc(nums, i + 1, bound[i]));
        return ans;
    }
    
private: 
    int inc(vector<int>& nums, int l, int r)
    {
        if (l >= r)
            return 0;
        int ans = 0;
        stack<int> t;
        for (int j = r; j >= l; j--)
        {
            while (!t.empty() && nums[t.top()] < nums[j])
                t.pop();
            t.push(j);
            ans = max<int>(ans, t.size() - 1);
        }
        return ans;
    }
};