int stoneGameII(int* piles, int pilesSize){
    int n = pilesSize;
    int* sum = malloc((n + 1) * sizeof(int));
    int** dp = malloc((n+1) * sizeof(int*));
    for(int i = 0; i <= n; i++){
        dp[i] = calloc(n + 1 , sizeof(int));
    }
    sum[n] = 0;
    for(int i =  n-1; i >=0; i--){
        sum[i] = sum[i+1] + piles[i];
    }
    for (int i = 0; i < n; ++i) {
        dp[i][n] = sum[i];
    }
    for (int i = n - 1; i >= 0; i--) {
        for (int m = n - 1; m >= 1; m--) {
            for (int x = 1; x <= 2 * m && i + x <= n; ++x) {
                dp[i][m] = fmax(dp[i][m], sum[i] - dp[i + x][(int)fmax(m, x)]);
            }
        }
    }
    int ans = dp[0][1];
    //free memory
    for(int i = 0; i <= n; i++){
        free(dp[i]);
    }
    free(dp);
    free(sum);
    return ans;
}