class Solution {
public:
    int dp[7][7][6][6][3][1024];
    int m, n;
    int dfs(int tops, int icnt, int ecnt, int r, int c, int p=0) {
        if (c == n) return dfs(tops, icnt, ecnt, r + 1, 0);
        if (r == m || (!icnt && !ecnt)) return 0;
        if (dp[icnt][ecnt][r][c][p][tops]) return dp[icnt][ecnt][r][c][p][tops];
        int top = (tops >> (c << 1)) & 3;
        int t = tops & ~(3 << (c << 1));
        int ans = dfs(t, icnt, ecnt, r, c + 1);
        int ih = 120, eh = 40;
  
        if(top == 1) ih -= 10, eh += 40;
        if(top == 2) ih -= 60, eh -= 10;                                
        if(p == 1) ih -= 10, eh += 40;
        if(p == 2) ih -= 60, eh -= 10;                                

        if (icnt) {
            ans = max(ans, ih + dfs(t | (2 << (c << 1)), icnt - 1, ecnt, r, c + 1, 2));
        }
        if (ecnt) {
            ans = max(ans, eh + dfs(t | (1 << (c << 1)), icnt, ecnt - 1, r, c + 1, 1));
        }
        return dp[icnt][ecnt][r][c][p][tops] = ans;
    }
    int getMaxGridHappiness(int m, int n, int icnt, int ecnt) {
        this->m = m, this->n = n;
        return dfs(0, icnt, ecnt, 0, 0);
    }
};