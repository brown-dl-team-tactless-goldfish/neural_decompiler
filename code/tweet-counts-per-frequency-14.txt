class TweetCounts {
public:
    TweetCounts() {}
    
    void recordTweet(const string& tweetName, int time) {
        m[tweetName].emplace_back(time);
    }
    
    vector<int> getTweetCountsPerFrequency(const string& freq, const string& tweetName, int startTime, int endTime) {
        int delta = freq[0] == 'm' ? 60 : freq[0] == 'h' ? 3600 : 86400;
        if(!m.count(tweetName)) return {0};
        auto &v = m[tweetName];
        vector<int> res((endTime-startTime)/delta+1, 0);
        for(const int t: v) {
            if(t < startTime || t > endTime) continue;
            ++res[(t-startTime)/delta];
        }
        return res;
    }
    unordered_map<string, vector<int>> m;
};

auto gucciGang = []() {std::ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();