struct am { char *content; int n; };

void insf(struct am *m, int *n, char ***dups, char *content, char *fpath){
    int i;
    for (i = 0 ; i < *n && strcmp(m[i].content, content); i++);
    m[i].content = content;
    m[i].n++;    
    i == *n ? ++*n : 0;
    dups[i] = realloc(dups[i], sizeof(char *[m[i].n]));
    dups[i][m[i].n - 1] = fpath;
}

char *** findDuplicate(char **paths, int pathsSize, int* returnSize, int** returnColumnSizes){
    int n = 0, k = 0, sz = 20000;
    char ***dups = calloc(1, sizeof(char **[sz])), fpath[128], *space, *dir, *fname, *oparen, *content;
    struct am *m = calloc(1, sizeof(struct am[sz]));
    for (int i = 0 ; i < pathsSize ; i++) {
        (space = strchr(dir = paths[i], ' ')) ? *space = 0 : 0;
        while (space) {
            (space = strchr(fname = space + 1, ' ')) ? *space = 0 : 0;
            *(oparen = strchr(fname, '(')) = 0;
            *strchr(content = oparen + 1, ')') = 0;
            snprintf(fpath, sizeof fpath, "%s/%s", dir, fname);
            insf(m, &n, dups, content, strdup(fpath));
        }
    }
    for (int i = 0, *c = *returnColumnSizes = malloc(sizeof(int [n])) ; i < n ; i++)
        m[i].n > 1 ? c[k] = m[i].n, dups[k++] = dups[i] : (free(dups[i][0]), free(dups[i]));
    return free(m), *returnSize = k, dups;
}