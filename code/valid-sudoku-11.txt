bool isValidSudoku(char **board, int boardSize, int *boardColSize){
    *boardColSize = 9;

    int *hash_col = (int *)malloc(10*sizeof(int));
    memset(hash_col, 0, 10*sizeof(int));
    int *hash_row = (int *)malloc(10*sizeof(int));
    memset(hash_row, 0, 10*sizeof(int));

    char temp_c, temp_r;
    for(int i=0;i<9;i++) {
        for(int j=0;j<9;j++) {
            temp_c = board[i][j];
            temp_r = board[j][i];
            if(temp_c != '.') {
                hash_col[temp_c-'0']++;
            }
            if(temp_r != '.') {
                hash_row[temp_r-'0']++;
            }
        }
        for(int k=0;k<10;k++) {
            if(hash_col[k] > 1) {
                return false;
            }
            if(hash_row[k] > 1) {
                return false;
            }
        }
        memset(hash_col, 0, 10*sizeof(int));
        memset(hash_row, 0, 10*sizeof(int));
    }

    // check 3x3
    char temp_33;
    int *hash_33 = (int *)malloc(10*sizeof(int));
    memset(hash_33, 0, 10*sizeof(int));
    for(int i=0;i<9;i+=3) {
        for(int j=0;j<9;j+=3) {
            for(int w=i;w<i+3;w++) {
                for(int q=j;q<j+3;q++) {
                    temp_33 = board[w][q];
                    if(temp_33 != '.') {
                        hash_33[temp_33-'0']++;
                    }
                }
            }
            for(int k=0;k<10;k++) {
                if(hash_33[k] > 1) {
                    return false;
                }
            }
            memset(hash_33, 0, 10*sizeof(int));
        }
    }

    return true;
}
