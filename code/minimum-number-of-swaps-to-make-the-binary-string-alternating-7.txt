public class Solution {
    public int MinSwaps(string s) {
        var len = s.Length;
        var zeroCount = 0;
        var oneCount = 0;
        
        foreach(var c in s)
        {
            if(c == '0')
                zeroCount++;
            else
                oneCount++;
        }
        
        if(Math.Abs(zeroCount - oneCount) > 1)
            return -1;
        else if(zeroCount > oneCount)
            return SwapCount(s, '0');
        else if(oneCount > zeroCount)
            return SwapCount(s, '1');
        
        return Math.Min(SwapCount(s, '0'), SwapCount(s, '1'));
    }
    
    private int SwapCount(string s, char ch)
    {
        int swaps = 0;
        for(int i = 0; i < s.Length; i++)
        {
            if(s[i] != ch)
                swaps++;
            ch = (char)(ch ^ 1); //gotcha Cannot implicitly convert type 'int' to 'char'.
        }
        return swaps/2;
    }
}

//Ex: When 0's and 1's are equal
//0 0 1 1 0 0 1 1

//0 1 0 1 0 1 0 1 -- 2 swaps for starting with 0
//1 0 1 0 1 0 1 0 -- 4 swaps for starting with 1