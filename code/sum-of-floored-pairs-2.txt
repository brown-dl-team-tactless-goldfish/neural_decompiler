class Solution {
    typedef long long ll;
public:
    int sumOfFlooredPairs(vector<int>& nums) {
        const int len = 100002;
        ll eg[len] = {}; // eg[i] means # of elements equal or greater than i.
        int cnt[len] = {}; // cnt[i] means of elements equal to i.
        int maxnum = 0;
        for(const auto& a : nums) {
            cnt[a]++;
            maxnum = max(maxnum, a);
        }
        
        for(int i=maxnum; i>0; --i) {
            eg[i] += eg[i+1];
            if(cnt[i] > 0) eg[i] += cnt[i];   
        }
        
        ll ans = 0;
        for(int n=maxnum; n>0; n--) {
            if(cnt[n] > 0) {
                for(int f = maxnum / n; f > 0; f--) {
                    // Find the # of elements that is >= f * n && < (f + 1) * n. Note that (f + 1) * n may overflow.  
                    ans += f * (eg[f * n] - eg[min((f+1) * n, maxnum+1)]) * cnt[n];
                }
            }
        }
        
        ll big = 1e9 + 7;
        return ans % big;
    }
};