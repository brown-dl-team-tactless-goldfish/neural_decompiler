    int ways = 0;
    
    if(i == n)
    {
        for(int j=0; j<=n;j++)
        {
            int x = j;
            vis[x] = true;
            //cout<<x<<"\n";
            ways = (ways + perm(i-1, x, n, s, dp, vis))%mod;
            //cout<<ways<<" "<<x<<"\n";
            vis[x] = false;
        }
    }
    else
    {
        if(s[i] == 'D')
        {
            for(int j=0; j<=n; j++)
            {
                if(vis[j] == true) continue;
                int x = j;
                if(prev < x)
                {
                    vis[x] = true;
                    ways = (ways + perm(i-1, x,n, s, dp, vis))%mod;
                    vis[x] = false;
                }
                
            }
        }
        else
        {
            for(int j=0; j<=n; j++)
            {
                if(vis[j] == true) continue;
                int x = j;
                if(prev > x)
                {
                    vis[x] = true;
                    ways = (ways + perm(i-1, x,n, s, dp, vis))%mod;
                    vis[x] = false;
                }
            }
        }
    }
    return dp[i][prev] = ways;
}


int numPermsDISequence(string s) {
    vector<bool>vis(s.size()+10, -1);
    for(int i=0; i<= s.size();i++)
    {
        vis[i] = false;
        //cout<<i<<"\n";
    }
    vector<vector<int>>dp(s.size()+10, vector<int>(s.size()+10, -1));
    return perm(s.size(), s.size()+5, s.size(), s, dp, vis);
    return 0;
}