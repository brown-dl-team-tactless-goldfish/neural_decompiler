/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    unordered_map<int, vector<int>>hm;
    int storeSum(TreeNode* root) {
        if (!root) return 0;
        
        int l = storeSum(root->left);
        int r = storeSum(root->right);
        
        int total = root->val + l + r;
        hm[total].push_back(root->val);
        
        return total;
    }
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        if (!root) return vector<int>();
        
        vector<int>v;
        storeSum(root);
        
        int mx = hm.begin()->second.size();
        for (auto it = hm.begin(); it != hm.end(); it++) {
            if (mx <= it->second.size()) {
                if (mx < it->second.size()) {
                    mx = it->second.size();
                    v.clear();
                }
                v.push_back(it->first);
            }    
        }
        
        return v;
    }
};