void countArea(int **grid, int gridSize, int *gridColSize, int m, int n, int *count);

int maxAreaOfIsland(int** grid, int gridSize, int* gridColSize){
   
    int max = 0;
    int count = 0;
    
    for (int i=0; i<gridSize; i++){
        for (int j=0; j<gridColSize[i]; j++){
            if (grid[i][j] == 1){
                countArea(grid, gridSize, gridColSize, i, j, &count);
                if (count > max)
                    max = count;
            }
            count = 0;
        }
    }
    return max;
}

void countArea(int **grid, int gridSize, int *gridColSize, int m, int n, int *count){
    
    if (m < 0 || n < 0 || m >= gridSize || n >= gridColSize[0])  //if index is out of range -> return
        return;
    
    if (grid[m][n] == 1){
        (*count)++;        //add 1 to the corresponding address
        grid[m][n] = 0;    //set visited area to 0 -> it would not be visited again
        
        countArea(grid, gridSize, gridColSize, m-1, n, count);  //up
        countArea(grid, gridSize, gridColSize, m+1, n, count);  //down
        countArea(grid, gridSize, gridColSize, m, n-1, count);  //left
        countArea(grid, gridSize, gridColSize, m, n+1, count);  //righ
    }
}