class Solution {
public:
    int nb, nh;
    string b, h;
    int ans = 6;
    unordered_map<string, unordered_set<string>> map;
    int findMinStep(string B, string H) {
        b = B, h = H;
        nb = b.size();
        nh = h.size();
        int count = 1;
        help(b, h, count);
        return ans > h.size() ? -1 : ans;
    }
    
    void help(string &b, string &h, int count){
        if(count > h.size()){
            ans = min(ans, count);
            return;
        }
        if(count > ans){
            return;
        }
        if(map.count(b) and map[b].count(h)){
            return;
        }
		map[b].insert(h);
        
        for(int i = 0 ; i < h.size(); i++){
            if(h[i] == '*'){
                continue;
            }
            else{
                char ball = h[i];
                h[i] = '*';
                for(int j = 0 ; j < b.size(); j+=1){
                    string newb = b;
                    newb.insert(newb.begin()+j, ball);
                    performRemoval(newb);
                    if(newb == ""){
                        ans = min(ans, count);
                        continue;
                    }
                    help(newb, h, count+1);
                }
                h[i] = ball;
            }
        }
    }
    
    void performRemoval(string &s){
        auto it = s.begin();
        while(s.size() > 2 and it != s.end()){
            char c = *it;
            if(*(it+1) == c and *(it+2) == c){
                while(it != s.end() and (*it) == c){
                    it = s.erase(it);
                }
                it = max(it-2, s.begin());
            }
            else{
                ++it;
            }
        }
    }
};