

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** ans;
int ansTop;
int* path;
int pathTop;

int* length;

int findUsed(int* uset, int usetSize, int key){
    for(int i=0; i<usetSize; i++){
        if(uset[i]==key)
            return 1;
    }
    return 0;
}

void backTracking(int* nums, int numsSize, int startIndex){
    if(pathTop >= 2){
        int* tmp=malloc(sizeof(int)*pathTop);
        for(int i=0; i<pathTop; i++){
            tmp[i]=path[i];
        }
        length[ansTop]=pathTop;
        ans[ansTop++]=tmp;
    }
    int* uset=malloc(sizeof(int)*numsSize);
    int usetTop=0;
    for(int i=startIndex; i<numsSize; i++){
        if(pathTop>0 && nums[i]<path[pathTop-1] || findUsed(uset, usetTop, nums[i])){
            continue;
        }
        uset[usetTop++]=nums[i];
        path[pathTop++]=nums[i];
        backTracking(nums, numsSize, i+1);
        pathTop--;
    }
}

int** findSubsequences(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    ans=malloc(sizeof(int*)*40000);
    path=malloc(sizeof(int)*numsSize);
    length=malloc(sizeof(int)*40000);

    pathTop=ansTop=0;
    
    backTracking(nums, numsSize, 0);
    *returnSize=ansTop;
    *returnColumnSizes=malloc(sizeof(int)*ansTop);
    
    for(int i=0; i<ansTop; i++){
        (*returnColumnSizes)[i]=length[i];
    }
    return ans;
}