class Solution {
public:
    void rem(vector<int>& v,int a)  // to remove the edges
    {
        for(int i=0;i<v.size();i++)
        {
            if(v[i]==a)
            {
                v.erase(v.begin()+i);
                return;
            }
        }
    }
    int collectTheCoins(vector<int>& coins, vector<vector<int>>& edges) {
        int n = coins.size();
        int ans=edges.size();
        int sum=accumulate(coins.begin(),coins.end(),0);
        if(sum<=1)
            return 0;
        vector<vector<int>> graph(n);
        for(auto& e:edges)
        {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<int> leaf;     //Stores the leaves
        for(int i=0;i<graph.size();i++)
        {
            if(graph[i].size()!=1)
            {
                continue;
            }
            leaf.push_back(i);
        }
        vector<int> leav;   // Now remove the leaves with no coins and stoer new leaves here
        for(auto l:leaf)
        {
            if(coins[l]>0)
            {
                leav.push_back(l);
                continue;
            }
            while(coins[l]==0 && graph[l].size()==1)
            {
                int p=graph[l][0];
                rem(graph[l],p);
                rem(graph[p],l);
                ans--;
                l=p;
            }
            if(graph[l].size()==1)
            {
                leav.push_back(l);
            }
        }
        leaf=vector<int>();
        
        
        for(auto& l:leav)
        {
            if(graph[l].size()!=1)
                continue;
            int p=graph[l][0];
            coins[p]=1;
            rem(graph[p],l);
            rem(graph[l],p);
            ans--;
            if(graph[p].size()==1)
            {
                leaf.push_back(p);
            }
        }
        ans-=leaf.size();
        ans*=2;
        return max(0,ans);
        
    }
};