class Solution {
public:
    int maxTwoEvents(vector<vector<int>>& events) {
        sort(begin(events), end(events), [](const auto& a, const auto& b) {
            return a[1] < b[1];
        });
        
        map<int, int> dp;
        int res = 0;
        for (const auto& e: events) {
            // Compute best result using current event and last best disjoint event
            auto it = dp.lower_bound(e[0]);
            int val = it == dp.begin() ? 0 : prev(it)->second;
            res = max(res, val + e[2]);
            // Set dp[event_end_time]
            dp[e[1]] = max(e[2], dp.empty() ? 0 : prev(dp.end())->second);
        }
        
        return res;
    }
};