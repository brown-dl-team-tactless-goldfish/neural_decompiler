class Solution {
public:
    double getMinDistSum(vector<vector<int>>& positions) {
        using Point = complex<double>;
        vector<Point> v;
        for(auto& p: positions) {
            v.emplace_back(p[0], p[1]);
        }
        auto sum = [&](Point& pp) {
            double ret = 0;
            for(auto& p: v) {
                ret += abs(p-pp);
            }
            return ret;
        };
        Point p = v[0];
        double step = 100, eps = 1e-5, last = sum(p);
        vector<Point> dir{{0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}, {-1, 1}};
        while(step > eps) {
            bool flag = false;
            for(int i=0; i<8; i++) {
                auto np = p + step*dir[i];
                double cs = sum(np);
                if(cs < last) {
                    last = cs;
                    p = np;
                    flag = true;
                }
            }
            if(not flag) 
                step /= 2;
        }
        return last;   
    }
};