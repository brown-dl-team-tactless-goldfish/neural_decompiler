int maxProfit(int k, int* prices, int pricesSize){
    if(pricesSize==0) return 0;
    
    int dp[k+1][pricesSize];
    memset(dp, 0, sizeof(dp));
    
     for(int transactions=1; transactions<=k; transactions++){
        for(int day=1; day<pricesSize; day++){
            int max = dp[transactions][day-1];
            
            for(int prev=0; prev<day;prev++){
                if(max < (dp[transactions-1][prev] + prices[day] - prices[prev]))
                    max = dp[transactions-1][prev] + prices[day] - prices[prev];
            }//for prev
            dp[transactions][day] =  max;
        }//for day
    }//for transactions


    for(int transactions=0; transactions<=k; transactions++){
        for(int day=0; day<pricesSize; day++){
            printf("%prev\t",dp[transactions][day] );
        }
        printf("\n");
    }  

    return dp[k][pricesSize-1];
}
```
TC : O(k*pricesSize*pricesSize) SC: O(k * pricesSize)


Optimized the above loop for calculating previous days calculations
```

int maxProfit(int k, int* prices, int pricesSize){
    if(pricesSize==0) return 0;
    
    int dp[k+1][pricesSize];
    memset(dp, 0, sizeof(dp));
    
    for(int transaction=1; transaction<=k; transaction++){
        int max = INT_MIN;
        for(int day=1; day<pricesSize; day++){
            if(max < dp[transaction-1][day-1] - prices[day-1])
                max = dp[transaction-1][day-1] - prices[day-1];
            dp[transaction][day] =  (max + prices[day] ) > dp[transaction][day-1] ? (max + prices[day] ) : dp[transaction][day-1] ;
        }//for day
    }//for transaction
    
    // for(int transaction=0; transaction<=k; transaction++){
    //     for(int day=0; day<pricesSize; day++){
    //         printf("%d\t",dp[transaction][day] );
    //     }
    //     printf("\n");
    // }  

    return dp[k][pricesSize-1];
}
```

TC : O(k*pricesSize) SC: O(k * pricesSize)
I welcome any suggestions for improving the above code.