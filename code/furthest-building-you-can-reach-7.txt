class Solution {
public:
    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
        priority_queue<int, vector<int>, greater<>> pq ;
        int lad = ladders ;
        int brk = bricks ;
        int i ;
        for(i = 1; i < heights.size(); i++)
        {
            if(heights[i] <= heights[i-1])
                continue ;
            else if(lad > 0){
                lad-- ;
                int d = heights[i] - heights[i-1] ;
                pq.push(d) ;
            }
            else{
                int d = heights[i] - heights[i-1] ;
                pq.push(d) ;
                int need = pq.top() ;
                pq.pop() ;
                if(need > brk)
                    break ;
                else
                    brk -= need ;
            }
        }
        return i-1 ;
    }
};