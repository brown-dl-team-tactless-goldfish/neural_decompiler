public class Solution
{
    long mod = (long)Math.Pow(10, 9) + 7;
    public int NumOfWays(int[] nums)
    {
        int n = nums.Length;
        long[,] dp = new long[n, n];
        for (int i = 0; i < n; i++)
        {
            dp[i, 0] = 1;
            for (int j = 1; j <= i; j++)
            {
                dp[i, j] = (dp[i - 1, j - 1] + dp[i - 1, j]) % mod;
            }
        }
        return (int)Helper(nums, dp) - 1;
    }

    private long Helper(IList<int> nums, long[,] dp)
    {
        if (nums.Count < 2) return 1;
        var left = nums.Where(x => x < nums[0]).ToList();
        var right = nums.Where(x => x > nums[0]).ToList();

        long res = dp[nums.Count - 1, left.Count] % mod;
        res = res * Helper(left, dp) % mod;
        res = res * Helper(right, dp) % mod;

        return res;
    }
}