int countValidWords(char * sentence){
    int len = strlen(sentence);
    bool valid = true, hypen = false, punc = false;
    int tokens = 0;
    
    for (int i=0; i<len; i++)
    {
		/* if not a valid token, skip that token */
        if (valid == false)
        {
            while(i<len && sentence[i] != ' ')
                i++;
			/* reset the variables since we it start fresh for the next token */
            hypen = false;
            punc = false;
            valid = true;
        }
        
		/* Boundary check */
        if (i == len)
            return tokens;
        
		/* Before the start of the token, if there are spaces, skip those */
        while(i < len && sentence[i] == ' ')
            i++;

		/* Boundary check */
        if (i == len)
            return tokens;

        /* If number, skip this token*/
        if (sentence[i] >= '0' && sentence[i] <= '9')
        {
            valid = false;
            continue;
        }
        
		/* if hypen, and already hypen is seen for current token, skip this token */
        if (sentence[i] == '-' && hypen == true)
        {
            valid = false;
            continue;
        }
		/* this is the first hypen */
        else if (sentence[i] == '-')
        {
			/* if no letters surroding hypen, skip this token, else mark that we have seen a hypen for the current token */
            if (!(i-1>=0 && sentence[i-1] >= 'a' && sentence[i-1] <= 'z' && i+1<len && sentence[i+1] >= 'a' && sentence[i+1] <= 'z'))
            {
                valid = false;
                continue;
            }
            hypen = true;
        }
		
        /* logic same as for hypen */
        if ((sentence[i] == '!' || sentence[i] == '.' || sentence[i] == ',') && punc == true)
        {
            valid = false;
            continue;
        }
        else if (sentence[i] == '!' || sentence[i] == '.' || sentence[i] == ',')
        {
            if (!((i+1 < len && sentence[i+1] == ' ') || (i+1 == len)))
            {
                valid = false;
                continue;
            }
            punc = true;
        }
        
		/* if the next character is space, then we have a valid token, or if the current token is the end of the sentence */
        if ((i+1 < len && sentence[i+1] == ' ') || (i+1 == len))
        {
            tokens++;
            hypen = false;
            punc = false;
            valid = true;
        }
    }
    return tokens;
}```