/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> st1, st2;
        while (l1) {
            st1.push(l1->val);
            l1 = l1->next;
        }
        while (l2) {
            st2.push(l2->val);
            l2 = l2->next;
        }
        ListNode* res = nullptr;
        int carry = 0;
        while (!st1.empty() && !st2.empty()) {
            ListNode* temp = new ListNode((st1.top() + st2.top() + carry) % 10);
            temp->next = res;
            res = temp;
            carry = (st1.top() + st2.top() + carry) / 10;
            st1.pop(); st2.pop();
        }
        while (!st1.empty()) {
            ListNode* temp = new ListNode((st1.top() + carry) % 10);
            temp->next = res;
            res = temp;
            carry = (st1.top() + carry) / 10;
            st1.pop(); 
        }
        while (!st2.empty()) {
            ListNode* temp = new ListNode((st2.top() + carry) % 10);
            temp->next = res;
            res = temp;
            carry = (st2.top() + carry) / 10;
            st2.pop(); 
        }
        if (carry) {
            ListNode* temp = new ListNode(carry);
            temp->next = res;
            res = temp;
        }
        return res;
    }
};