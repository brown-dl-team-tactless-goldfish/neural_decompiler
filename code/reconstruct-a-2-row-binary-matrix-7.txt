class Solution {
public:
    vector<vector<int>> reconstructMatrix(int upper, int lower, vector<int>& col) {
        

        int n = col.size();
        vector<vector<int>>res(2,vector<int>(n,0));
        vector<int>colsum(col.begin(),col.end());
        
        int rowsum [2] = {upper,lower};
        
        // make res[0][j] && res[1][j] 1 if col[j]==2
        for(int j=0;j<n;j++)
        {
           if(colsum[j]==2)
           {
               res[0][j] = 1;
               res[1][j] = 1;
               colsum[j] = 0;
               rowsum[0] -= 1;
               rowsum[1] -= 1;
           }
        }
        
        // make res[i][j] 1 if both rowsum[i]>0 && colsum[j]>0
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(res[i][j]!=1)
                {
                    res[i][j] = (rowsum[i]>0 && colsum[j]>0) ? 1 : 0;
                    rowsum[i] -= res[i][j];
                    colsum[j] -= res[i][j];
                }
            }   
        }
        
        // check validity of the result vector with given costraints
        int t_upper = 0;
        int t_lower = 0;
        for(int i=0;i<n;i++)
        {
            t_upper+=res[0][i];
            t_lower+=res[1][i];
            
            if(col[i]!=(res[0][i]+res[1][i]))return {}; // invalid
        }
        
        if(t_upper != upper || t_lower!=lower)return {};    // invalid
        
        
        return res;
    }
};