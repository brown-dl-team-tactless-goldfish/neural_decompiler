    bool IsSubset(
        std::unordered_set<size_t>& A,
        std::unordered_set<size_t>& B) {
        for (const size_t& i:A) {
            if (B.find(i) == B.end()) {
                return false;
            }
        }
        return true;
    }
    
    vector<int> peopleIndexes(vector<vector<string>>& f) {
        std::unordered_map<int, std::unordered_set<size_t>> M;
        for (int i=0;i<f.size();++i) {
            for (const auto& c:f[i]) {
                M[i].insert(std::hash<std::string>{}(c));
            }
        }
        
        std::vector<int> ans;
        for (int i=0;i<f.size();++i) {
            bool flag = true;
            for (int k=0;k<f.size();++k) {
                if (k == i) {
                    continue;
                } else {
                    auto it = M.find(k);
                    // true if M[i] is a subset of it->second
                    if (IsSubset(M[i], it->second)) {
                        flag = false;
                        break;
                    }                    
                }
            }
            if (flag) {
                ans.push_back(i);
            }
        }
        return ans;
    }