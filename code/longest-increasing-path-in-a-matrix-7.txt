class Solution {
public:
    int n, m;
    vector<vector<int>> g;
    int dp[201][201];

    int getPath(int i, int j, int pred) {
        if(i >= n || i < 0 || j >= m || j < 0 || pred >= g[i][j]) 
            return 0;
        if(dp[i][j]) 
            return dp[i][j];
        int u = getPath(i + 1, j, g[i][j]);
        int r = getPath(i, j + 1, g[i][j]);
        int d = getPath(i - 1, j, g[i][j]);
        int l = getPath(i, j - 1, g[i][j]);
        return dp[i][j] = max({u, r, d, l}) + 1;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        n = matrix.size(), m = matrix[0].size();
        g = matrix;
        int ans = 0;
        vector<pair<int, pair<int, int>>> go(0);
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                dp[i][j] = getPath(i, j, -1);
                ans = max(ans, dp[i][j]);
            }
        }
        return ans;
    }
};