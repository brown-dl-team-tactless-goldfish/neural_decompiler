int dp[1001];
int solve(vector<int>&nums,int i,int d,int n){
    if(dp[i]!=-1) return dp[i];
    int c = 1;
    for(int x=i+1;x<=min(i+d,n-1) && nums[i]>nums[x];x++){
        c = max(c,1+solve(nums,x,d,n));
    }
    for(int x=i-1;x>=max(i-d,0) && nums[i]>nums[x];x--){
        c = max(c,1+solve(nums,x,d,n));
    }
    return dp[i] = c;
}
int maxJumps(vector<int>& nums, int d) {
    memset(dp,-1,sizeof(dp));
    int n = nums.size();
    int c = 1;
    for(int i=0;i<n;i++){
        c = max(c,solve(nums,i,d,n));
    }
    return c;
}