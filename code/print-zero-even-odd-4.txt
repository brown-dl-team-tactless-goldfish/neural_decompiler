typedef struct 
{
    int n;
    sem_t zero_;
    sem_t even_;
    sem_t odd_;

} ZeroEvenOdd;

ZeroEvenOdd* zeroEvenOddCreate(int n) 
{
    ZeroEvenOdd* obj = (ZeroEvenOdd*) malloc(sizeof(ZeroEvenOdd));
    obj->n = n;
    
    //initialize semaphores
    sem_init(&obj->zero_, 0, 1);
    sem_init(&obj->even_, 0, 0);
    sem_init(&obj->odd_, 0, 0);
    
    return obj;
}

// You may call global function `void printNumber(int x)`
// to output "x", where x is an integer.

void zero(ZeroEvenOdd* obj) 
{
    for(int i = 1; i <= obj->n; i++)
    {    
        sem_wait(&obj->zero_);
        
        printNumber(0);
    
        if(i % 2 == 0)
            sem_post(&obj->even_);
        else
            sem_post(&obj->odd_);
    }
}

void even(ZeroEvenOdd* obj) 
{
    for(int i = 2; i <= obj->n; i+=2)
    {    
        sem_wait(&obj->even_);
        
        printNumber(i);
    
        sem_post(&obj->zero_);
    }
   
}

void odd(ZeroEvenOdd* obj) 
{
    ;
    for(int i = 1; i <= obj->n; i+=2)
    {    
        sem_wait(&obj->odd_);
        
        printNumber(i);
    
        sem_post(&obj->zero_);
    }

   
}

void zeroEvenOddFree(ZeroEvenOdd* obj) 
{
    sem_destroy(&obj->zero_);
    sem_destroy(&obj->even_);
    sem_destroy(&obj->odd_);
    
    free(obj);
    obj = NULL;
}