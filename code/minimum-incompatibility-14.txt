    def minimumIncompatibility(self, A: List[int], k: int) -> int:
        n = len(A) # <= 16
        if n == k: return 0 # each subset has just one integer
        if n % k != 0: return -1
        c = Counter(A)
        if any(x > k for x in c.values()): return -1
        if k == 1: return max(A) - min(A)
        gs = n // k # group size
        
        @lru_cache(None)
        def f(A, k):
            # there is euqal elements for one subset, invalid, set to float('inf')
            if 1 == k: return max(A) - min(A) if len(set(A)) == len(A) else float('inf')
            res, us = float('inf'), set(A)
            for g in itertools.combinations(us, gs):
                s, can, B = Counter(g), max(g) - min(g), list(A)
                for x in g: B.remove(x)
                res = min(res, can + f(tuple(B), k - 1))
            return res
        res = f(tuple(A), k)
        return -1 if res == float('inf') else res