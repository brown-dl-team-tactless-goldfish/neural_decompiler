int compare(const void* a, const void* b)
{
    return *(*(const int**)a + 1) ^ *(*(const int**)b + 1) ? *(*(const int**)a + 1) - *(*(const int**)b + 1) : **(const int**)a - **(const int**)b;
}

int* kWeakestRows(int** mat, int matSize, int* matColSize, int k, int* returnSize)
{
    int* retval = malloc(k * sizeof(int));
    
    for (int i = 0, count; i < matSize; i++)
    {
        for (count ^= count; count < *matColSize ? mat[i][count] : 0; count++); // The loop condition should have been mat[i][count] && count < *matColSize, but LeetCode is just being too dense
        mat[i][0] = i;
        mat[i][1] = count;
    }
    
    qsort(mat, matSize, sizeof(int*), compare);
    
    for (int i = 0; i < k; i++)
        retval[i] = mat[i][0];
    
    *returnSize = k;
    return retval;
}