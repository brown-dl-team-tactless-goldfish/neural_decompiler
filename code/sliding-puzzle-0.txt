typedef struct
{
    int **board,x,y, times;
}dat;

#define F(x,y) for(int x = 0 ; x < y ; x++)
#define loop_x F(i,2)
#define loop_y F(j,3)
#define loop_all loop_x loop_y 

dat stat[720];
int size, ans, _index;

int    **ft_strcpy(int **b)
{
    int **a = (int**)malloc(2 * sizeof(int*));
    loop_x a[i] = (int*)malloc(3 * sizeof(int));
    loop_all a[i][j] = b[i][j];
    return a;
}

void ft_swap(int *a, int *b)
{
    int c = *a;
    *a = *b;
    *b = c;
}

int check(int **board)
{
    F(k,size)
    {
        int same = 1;
        loop_all if (board[i][j] != stat[k].board[i][j]) same = 0;
        if (same) return 0;
    }
    return 1;
}

int solved()
{
    dat temp = stat[_index - 1];
    /*printf("\n\n");
    loop_x
    {
        loop_y printf("%d ",temp.board[i][j]);
        printf("\n");
    }*/
    int x = temp.x, y = temp.y, **board = temp.board;
    if (x != 1 || y != 2) return 0;
    loop_all
    {
        if (i == 1 && j == 2) return 1;
        if (board[i][j] != 3*i+j+1) return 0;
    }
    return 1;
}

void solve()
{
    if (_index >= size) return ;
    dat temp = stat[_index++];
    /*loop_x
    {
        loop_y printf("%d ",temp.board[i][j]);
        printf("\n");
        printf("%d",temp.times);
        printf("\n");
        printf("\n");
    }*/
    int **new, x = temp.x, y = temp.y, times = temp.times;
    dat put;
    if (solved())
    {
        /*loop_x
        {
            loop_y printf("%d ",temp.board[i][j]);
            printf("\n");
        }*/
        ans = times;
        return ;
    }
    if (x > 0)
    {
        new = ft_strcpy(temp.board);
        ft_swap(new[x] + y, new[x - 1] + y);
        put.board = new;
        put.x = x - 1;
        put.y = y;
        put.times = times + 1;
        if (check(new)) stat[size++] = put;
    }
    if (x < 1)
    {
        new = ft_strcpy(temp.board);
        ft_swap(new[x] + y, new[x + 1] + y);
        put.board = new;
        put.x = x + 1;
        put.y = y;
                put.times = times + 1;
        if (check(new)) stat[size++] = put;
    }
    if (y > 0)
    {
        new = ft_strcpy(temp.board);
        ft_swap(new[x] + y, new[x] + y - 1);
        put.board = new;
        put.x = x;
        put.y = y - 1;
                put.times = times + 1;
        if (check(new)) stat[size++] = put;
    }
    if (y < 2)
    {
        new = ft_strcpy(temp.board);
        ft_swap(new[x] + y, new[x] + y + 1);
        put.board = new;
        put.x = x;
        put.y = y + 1;
                put.times = times + 1;
        if (check(new)) stat[size++] = put;
    }
    solve();
}

int slidingPuzzle(int** board, int boardSize, int* boardColSize)
{
    size = 0;
    ans = -1;
    _index = 0;
    loop_all if (board[i][j] == 0)
    {
        stat[size].board = ft_strcpy(board);
        stat[size].times = 0;
        stat[size].x = i;
        stat[size++].y = j;
        solve();
    }
    return ans;
}