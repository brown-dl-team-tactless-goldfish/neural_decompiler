class Solution {
public:
   int parent[100001];
    int findParent(int child) {
        if(parent[child]==-1) return child;
        return parent[child] = findParent(parent[child]);
    }
    void union_value(int child1, int child2) {
        int p_value1 = findParent(child1);
        int p_value2 = findParent(child2);
        if(p_value1 != p_value2) 
            parent[p_value2] = p_value1;
        
    }
    
    int largestComponentSize(vector<int>& A) {
        int ans = 0;
        memset(parent, -1, sizeof parent);
        
        for(int x:A) 
            for(int j=2; j<= sqrt(x); ++j) 
                if(x%j == 0) 
                    {union_value(j, x); union_value(x,x/j);}
             
        unordered_map<int, int> reference;
        for(auto child : A) 
            ans = max(ans, 1 + reference[findParent(child)]++);
        
        return ans;
    }
};