class Solution {
public:
    int len;
    int solve(int l, int r, MountainArray &mountainArr)
    {
        int mid = (l+r)/2;
        
        int b = mountainArr.get(mid);
        
        if(mid<1)
            return solve(mid+1, r, mountainArr);
        else if(mid>=len-1)
            return solve(l, mid-1, mountainArr);
        
        int a = mountainArr.get(mid-1);
        int c = mountainArr.get(mid+1);
        
        if(a<b && b>c)
            return mid;
        else if(a<b && b<c)
            return solve(mid+1, r, mountainArr);
        else
            return solve(l, mid-1, mountainArr);
    }
    
    int find(int l, int r, MountainArray &mountainArr, int tar, int flag)
    {
        if(l>r)
            return -1;
        
        int mid = (l+r)/2;
        int a = mountainArr.get(mid);
        
        if(a==tar)
            return mid;
        else if(l==r)
            return -1;
        else if(!flag)
        {
            if(a<tar)
                return find(mid+1, r, mountainArr, tar, 0);
            else
                return find(l, mid-1, mountainArr, tar, 0);
        }
        else
        {
            if(a>tar)
                return find(mid+1, r, mountainArr, tar, 1);
            else
                return find(l, mid-1, mountainArr, tar, 1);
        }
    }
    
    int findInMountainArray(int tar, MountainArray &mountainArr) {
        len = mountainArr.length();
        
        int mid = solve(0, len-1, mountainArr);
        
        if(mountainArr.get(mid)==tar)
            return mid;
        
        int a = find(0, mid-1, mountainArr, tar, 0);
        
        if(a!=-1)
            return a;
        
        int b = find(mid+1, len-1, mountainArr, tar, 1);
        
        if(b!=-1)
            return b;
        
        return -1;
    }
};