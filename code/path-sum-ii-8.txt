/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
void dfs(struct TreeNode *root, int k, int *path, int len, int **ans, int *l, int **m) {
    if (!root) {
        return;
    }
    if (root && !root->left && !root->right) {
        int tmp = root->val;
        for (int i=0; i<len; i++) {
            tmp += path[i];
        }
        
        if (tmp == k) {
            ans[*l] = (int *)malloc(sizeof(int) * (len+1));
            (*m)[*l] = len + 1;
            for (int i=0; i<len; i++) {
                ans[*l][i] = path[i];
            }
            ans[*l][len] = root->val;
            *l += 1;
        }
        return;
    }
    path[len] = root->val;
    dfs(root->left, k, path, len+1, ans, l, m);
    dfs(root->right, k, path, len+1, ans, l, m);
}

int** pathSum(struct TreeNode* root, int targetSum, int* returnSize, int** returnColumnSizes){
    int path[5001] = {0};
    int len = 0;
    int **ans = (int **)malloc(sizeof(int *) * 5001);
    *returnColumnSizes = (int *)malloc(sizeof(int) * 5001);
    *returnSize = 0;
    dfs(root, targetSum, path, len, ans, returnSize, returnColumnSizes);
    
    return ans;
}