using LL = long long ;
class Solution {
public:
    int waysToPartition(vector<int>& nums, int k) {
        int n = nums.size() ;
        vector<LL>preSum(n) ;
        vector<LL>sufSum(n) ;
        LL sum = accumulate(nums.begin(), nums.end(), 0LL) ;
        vector<int>rets(n) ;
        
        preSum[0] = nums[0] ;
        for(int i = 1; i < n; i++)
            preSum[i] = preSum[i-1] + nums[i] ;
        
        sufSum[n-1] = nums[n-1] ;
        for(int i = n-2 ; i >= 0; i--)
            sufSum[i] = sufSum[i+1] + nums[i] ;
        
        unordered_map<LL, int>Map ; //{preSum, count} 
        for(int i = 0; i < n; i++){
            LL newSum = sum - nums[i] + k ;
            if(newSum % 2 == 0)
                rets[i] += Map[newSum/2] ;
            Map[preSum[i]]++ ;
        }
        Map.clear() ;
        for(int i = n-1; i >= 0; i--){
            LL newSum = sum - nums[i] + k ;
            if(newSum % 2 == 0)
                rets[i] += Map[newSum/2] ;
            Map[sufSum[i]]++ ;
        }
        
        int retNoChanged = 0 ;
        for(int i = 0; i < n-1; i++){
            if(preSum[i]*2 == sum )
                retNoChanged++ ;
        }
        int ans = *max_element(rets.begin(), rets.end()) ;
        ans = max(ans, retNoChanged) ;
        return ans ;
    }
};