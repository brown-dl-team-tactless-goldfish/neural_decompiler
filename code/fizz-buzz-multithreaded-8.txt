typedef struct {
    int n;
    int count;
    sem_t sem1,sem2,sem3,sem4;
} FizzBuzz;

FizzBuzz* fizzBuzzCreate(int n) {
    FizzBuzz* obj = (FizzBuzz*) malloc(sizeof(FizzBuzz));
    obj->n = n;
    obj->count=1;
    sem_init(&obj->sem1,0,1);
    sem_init(&obj->sem2,0,0);
    sem_init(&obj->sem3,0,0);
    sem_init(&obj->sem4,0,0);
    return obj;
}

// printFizz() outputs "fizz".
void fizz(FizzBuzz* obj) {
    while(1){
        sem_wait(&obj->sem2);
        printFizz();
        obj->count++;
        if(obj->count>obj->n) break;
    }
}

// printBuzz() outputs "buzz".
void buzz(FizzBuzz* obj) {
    while(1){
        sem_wait(&obj->sem3);
        printBuzz();
        obj->count++;
        if(obj->count>obj->n) break;
    }
}

// printFizzBuzz() outputs "fizzbuzz".
void fizzbuzz(FizzBuzz* obj) {
    while(1){
        sem_wait(&obj->sem4);
        printFizzBuzz();
        obj->count++;
        if(obj->count>obj->n) break;
    }
}

// You may call global function `void printNumber(int x)`
// to output "x", where x is an integer.
void number(FizzBuzz* obj) {
    while(1){
        sem_wait(&obj->sem1);
        printf("%d",obj->count);
        if((obj->count)%15==0)  sem_post(&obj->sem4);
        else if((obj->count)%5==0)  sem_post(&obj->sem3);
        else if((obj->count)%3==0)  sem_post(&obj->sem2);
        else{
            printNumber(obj->count);
            obj->count++;
        }
        if(obj->count>obj->n) break;
        else{
            sem_post(&obj->sem1);
        }
    }
}

void fizzBuzzFree(FizzBuzz* obj) {
    sem_destroy(&obj->sem1); sem_destroy(&obj->sem2); sem_destroy(&obj->sem3); sem_destroy(&obj->sem4);
    free(obj); obj=NULL;
}