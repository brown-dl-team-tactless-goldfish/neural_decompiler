/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    vector<string> split(string s, char c)
{
	vector<string> res;
	int left = 0, right = 0;
	while (s[left] == c)right = ++left;
	while (right < s.size())
	{
		if (s[right] == c && right > left)
		{
			res.push_back(s.substr(left, right - left));
			left = right + 1;
		}
		++right;
	}
	return res;
}
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) 
    {
        string res = "";
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())
        {
            if(q.front())
            {
                res += to_string(q.front()->val);
                q.push(q.front()->left);
                q.push(q.front()->right);
            }
            else
                res += "null";
            q.pop();
            res += ',';
        }
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) 
    {
        vector<string> nodes = split(data, ',');
        TreeNode* root = NULL;
        queue<TreeNode**> q;
        q.push(&root);
        
        for(int i = 0; i < nodes.size(); i++)
        {
            if(nodes[i] != "null")
            {
                (*q.front()) = new TreeNode(stoi(nodes[i]));
                q.push(&((*q.front())->left));
                q.push(&((*q.front())->right));
            }
            q.pop();
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));