class Solution {
public:
    bool found = false;
    bool check(vector<vector<int>>& m, int r, int c, int len, int thres) {
        for (int i = len - 1; i < r; i++) {
            for (int j = len - 1; j < c; j++) {
                int sub1 = i == len - 1 ? 0 : m[i - len][j];
                int sub2 = j == len - 1 ? 0 : m[i][j - len];
                int add = (i == len - 1 || j == len - 1) ? 0 : m[i - len][j - len];
                if (m[i][j] - sub1 - sub2 + add <= thres) {
                    found = true;
                    return true;
                }
            }
        }
        return false;
    }
    int maxSideLength(vector<vector<int>>& mat, int threshold) {
        int r = mat.size(), c = mat[0].size();
        for (int i = 0; i < r; i++)
            for (int j = 1; j < c; j++) mat[i][j] += mat[i][j - 1];
        for (int j = 0; j < c; j++)
            for (int i = 1; i < r; i++) mat[i][j] += mat[i - 1][j];
        
        int lo = 1, hi = min(r, c), mid, res = 0;
        while (lo <= hi) {
            mid = (lo + hi) / 2;
            if (check(mat, r, c, mid, threshold)) {
                res = mid;
                lo = mid + 1;
            }
            else hi = mid - 1;
        }
        return found ? res : 0;
    }
};