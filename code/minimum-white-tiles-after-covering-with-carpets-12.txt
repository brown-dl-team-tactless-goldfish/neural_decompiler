class Solution {
public:
    vector<vector<int>> dp; int  n = 0;
    int dfs(string& s,int in,int left,int l){
        if(in>=s.size()) return 0;
        if(dp[in][left]!=-1) return dp[in][left];
        if(left==0){
            int k = 0;
            if(s[in]=='0') k++;
            return dp[in][left] = k + dfs(s,in+1,left,l);
        }
        if(s[in]=='0'){
            int k = 1+dfs(s,in+1,left,l);
            return dp[in][left] = k;
        }
        else{
            int re = l;
            if(in+l>=n) re = n-in;
            int ans = max(dfs(s,in+1,left,l),re+dfs(s,in+l,left-1,l));
            
            return dp[in][left] = ans;
        }
    }
    int minimumWhiteTiles(string s, int numCarpets, int carpetLen) {
        n = s.size();
        dp = vector<vector<int>>(s.size()+1,vector<int>(numCarpets+1,-1));
        int k = dfs(s,0,numCarpets,carpetLen);
        return n-k;
    }
};