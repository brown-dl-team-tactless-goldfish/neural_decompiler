class Solution {
public:
    int kthLargestValue(vector<vector<int>>& grid , int k) {
        
        int r = grid.size() , c = grid[0].size() ;
        vector<vector<int>> dp(r,vector<int>(c,0)) ;
        priority_queue<int,vector<int>,greater<int>> pq ;
        
        //Process horizontally 
        for(int i = 0 ; i < r ; ++i ){
            for(int j = 0 ; j < c ; ++j ){
                if(j==0) dp[i][j] = grid[i][j] ;
                else dp[i][j] = dp[i][j-1] ^ grid[i][j] ;
            }
        }
        
        //Process vertically
        for(int i = 0 ; i < c ; ++i ){
            for(int j = 1 ; j < r ; ++j ){
                dp[j][i] = dp[j][i] ^ dp[j-1][i] ;
            }
        }
        
        //Min Heap to find Kth largest
        for(int i = 0 ; i < r ; ++i ){
            for(int j = 0 ; j < c ; ++j ){
                pq.push(dp[i][j]) ;
                if(pq.size() > k) pq.pop() ;
            }
        }
        
        return pq.top() ;
    }
};