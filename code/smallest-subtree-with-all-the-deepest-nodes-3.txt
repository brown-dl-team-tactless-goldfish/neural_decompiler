/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int preOrder2(struct TreeNode* root,int *deepest,int *count,int deepth,struct TreeNode** ret){
    if(root==NULL||ret[0]!=NULL){
        return 0;
    }
    if(deepth==*deepest){
        if(*count==1){
            ret[0]=root;
        }
        return 1;
    }
    int leftCount=preOrder2(root->left,deepest,count,deepth+1,ret);
    int rightCount=preOrder2(root->right,deepest,count,deepth+1,ret);
    if(ret[0]!=NULL){
        return 0;
    }
    if(leftCount+rightCount==*count){
        ret[0]=root;
    }
    return leftCount+rightCount;
}
void preOrder1(struct TreeNode* root,int *deepest,int *count,int deepth){
    if(root==NULL){
        return;
    }
    if(deepth>*deepest){
        *deepest=deepth;
        *count=1;
    }else if(deepth==*deepest){
        (*count)++;
    }
    preOrder1(root->left,deepest,count,deepth+1);
    preOrder1(root->right,deepest,count,deepth+1);
}
struct TreeNode* subtreeWithAllDeepest(struct TreeNode* root) {
    int *count=(int*)calloc(1,sizeof(int));
    int *deepest=(int*)calloc(1,sizeof(int));
    preOrder1(root,deepest,count,1);
    struct TreeNode** ret=(struct TreeNode**)malloc(sizeof(struct TreeNode*));
    if(*deepest==1){
        return root;
    }
    ret[0]=NULL;
    preOrder2(root,deepest,count,1,ret);
    return ret[0];
}