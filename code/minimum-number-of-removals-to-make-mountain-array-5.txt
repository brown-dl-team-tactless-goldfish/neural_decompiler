//check longest increasing subsequence from both side cuz, increasing then decreasing we have to find. 
int minimumMountainRemovals(vector<int>& nums) {
    int n = nums.size();
    vector<int>dp1(n,1),dp2(n,1);
    for(int i=0;i<n;i++){
        for(int j=0;j<i;j++){
            if(nums[i]>nums[j] && dp1[i]<dp1[j]+1){
                dp1[i] = dp1[j]+1;
            }
        }
    }
    for(int i=n-1;i>=0;i--){
        for(int j=n-1;j>i;j--){
            if(nums[i]>nums[j] && dp2[i]<dp2[j]+1){
                dp2[i] = dp2[j]+1;
            }
        }
    }
    int c = 0;
    for(int i=0;i<n;i++){
        if(dp1[i]!=1 && dp2[i]!=1)  // this if cond is so important as you check for eg = [9,8,1,7,6,5,4,3,2,1] you can get my point
        c = max(c,dp1[i]+dp2[i]-1);
    }
    return (n-c);
}