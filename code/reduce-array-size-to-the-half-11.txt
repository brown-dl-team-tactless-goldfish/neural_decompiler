
int cmp(const void *a, const void *b) {
	return *(int *)a - *(int *)b;
}

int minSetSize(int* arr, int arrSize){
	int hash_size = 1, cur_size, temp = 0;
	int *hash_table;

	// Sort Input Array
	qsort(arr, arrSize, sizeof(int), cmp);

	// Parse number of number sets, i.e. hash table size
	for (int i = 1; i < arrSize; i++)
		if (arr[i] != arr[i - 1])
			hash_size++;

	// Return if every number sets have only one element
	if (hash_size == arrSize)
		return hash_size / 2 + hash_size % 2;

	// Generate and sort hash table
	hash_table = (int *) calloc(hash_size, sizeof(int));
	hash_table[0] = 1;
	for (int i = 1; i < arrSize; i++) {
		if (arr[i] != arr[i - 1])
			temp++;
		hash_table[temp]++;
	}
	qsort(hash_table, hash_size, sizeof(int), cmp);

	// Calculate how many number sets need to be removed
	cur_size = arrSize;
	while (temp >= 0) {
		if (cur_size <= (arrSize >> 1))
			break;
		cur_size -= hash_table[temp];
		temp--;
	}


	// Free hash table
	free(hash_table);

	return hash_size - (temp + 1);
}