public class Solution {
    private static bool IsPrime(int value) {
        if (value <= 1)
            return false;

        if (value % 2 == 0)
            return value == 2;

        int sqrt = (int)(Math.Sqrt(value) + 0.1);

        for (int d = 3; d <= sqrt; d += 2)
            if (value % d == 0)
                return false;

        return true;
    }

    public bool PrimeSubOperation(int[] nums) {
        if (nums[0] >= 3) 
            for (int p = nums[0] - 1; p >= 2; --p)
                if (IsPrime(p)) {
                    nums[0] -= p;

                    break;
                } 
        
        for (int i = 1; i < nums.Length; ++i)
            if (nums[i] <= nums[i - 1])
                 return false;
            else 
                for (int sub = nums[i] - nums[i - 1] - 1; sub >= 2; --sub)
                    if (IsPrime(sub)) {
                        nums[i] -= sub;   

                        break;
                    }
            
        return true;         
    }
}