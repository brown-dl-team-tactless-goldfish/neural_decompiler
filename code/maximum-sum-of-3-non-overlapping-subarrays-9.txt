class Solution {
public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        vector<int> sum(nums.size() + 1);
        for (int i = 0; i < (int)nums.size(); i++)
            sum[i + 1] = sum[i] + nums[i];
        
        vector<pair<int,int>> forward(nums.size());
        forward[0] = make_pair(sum[k] - sum[0], 0);
        for (int i = 1; i <= (int)nums.size() - k; i++) {
            int t = sum[i + k] - sum[i];
            forward[i] = (forward[i - 1].first >= t) ? forward[i - 1] : make_pair(t, i);
        }

        vector<pair<int,int>> backward(nums.size());
        for (int i = (int)nums.size() - k; i >= 0; i--) {
            int t = sum[i + k] - sum[i];
            backward[i] = (backward[i + 1].first > t) ? backward[i + 1] : make_pair(t, i);
        }
        
        int ansSum = 0;
        vector<int> ans(3);
        for (int i = k; i <= (int)nums.size() - k * 2; i++) {
            int t = forward[i - k].first + backward[i + k].first + sum[i + k] - sum[i];
            if (ansSum < t) {
                ansSum = t;
                ans = vector<int>{ forward[i - k].second, i, backward[i + k].second };
            }
        }
        
        return ans;
    }
};