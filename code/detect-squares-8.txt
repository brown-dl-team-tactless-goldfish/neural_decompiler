class DetectSquares {
public:
    
    unordered_map<int,vector<int>> row_rc;
    unordered_map<int,vector<int>> col_rc;
    
    unordered_map<long,int> Occur;
    
    DetectSquares() {
        row_rc.clear();
        col_rc.clear();
        Occur.clear();
    }
    
    void add(vector<int> point) {
        int row = point[0];
        int col = point[1];
        int point_no = 1001*row+col;
        if(!Occur[point_no]){
            Occur[point_no] = 1;
            row_rc[row].push_back(col);
            col_rc[col].push_back(row);
        } 
        else Occur[point_no]++;
        
    }
    
    int count(vector<int> point) {
    
        int row = point[0];
        int col = point[1];
        vector<int> c = row_rc[row]; // row , c
        vector<int> r = col_rc[col]; // r, col
        long ans = 0;
       
        for(auto i:c){ // check in same row
            //[row,i]
            int side = abs(i-col);
            long Point = 1001*row+i;
            if(side && Occur[Point]){
                int r1 = row+side;
                int r2 = row-side;
                // check points in column , top and bottom
                int p1 = 1001*r1+col;int p1corner = 1001*r1+i;
                //[row,col]
                //p1 or p2 = [row,i] , [r1 or r2,col] , [r1 or r2,i]
                int p2 = 1001*r2+col;int p2corner = 1001*r2+i;
                ans+=Occur[Point]*(Occur[p1]*Occur[p1corner]+Occur[p2]*Occur[p2corner]);

            }
        }
        return ans;
    }
};

/**
 * Your DetectSquares object will be instantiated and called as such:
 * DetectSquares* obj = new DetectSquares();
 * obj->add(point);
 * int param_2 = obj->count(point);
 */