class Solution {
    vector<int> store(int n) {
        if (!n) return vector<int>();
        
        vector<int>res;
        while (n) {
            res.push_back(n%10);
            n /= 10;
        }
        
        reverse(res.begin(), res.end());
        return res;
    }
    
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        
        int i = 0, j = 0;
        bool dsorted = true;
        
        for (i = n-2; i >= 0; i--) {
            if (nums[i+1] > nums[i]) {
                dsorted = false;
                break;
            }
        }
        
        if (dsorted)
            return;
        
        int mnmx = INT_MAX;
        int index = i;
   
        for (j = i+1; j < n; j++) {
            if (nums[j] < mnmx && nums[j] > nums[i]) {
                mnmx = nums[j];
                index = j;
            }
        }
        
        swap(nums[i], nums[index]);
        sort(nums.begin()+i+1, nums.end());
    }   
public:
    int nextGreaterElement(int n) {
        
        vector<int>v = store(n);
        
        nextPermutation(v);
        
        unsigned long long val = 0;
        for (int i = 0; i < v.size(); i++) {
            val = val*10 + v[i];
            if (val > INT_MAX)
                return -1;
        }
        
        return val == n ? -1 : val;
    }
};