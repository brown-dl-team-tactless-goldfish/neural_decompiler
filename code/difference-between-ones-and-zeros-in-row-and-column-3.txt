class Solution {
public:
    vector<vector<int>> onesMinusZeros(vector<vector<int>>& grid) {
        map<int, pair<int,int>> rowMap, colMap;
        map<int, int> colSum;
        int r = grid.size();
        int c = grid[0].size();
        for(int i=0; i<r; i++){
            vector<int> temp = grid[i];
            int one = accumulate(temp.begin(), temp.end(), 0);
            int zero = r - one; 
            rowMap[i] = {zero, one};
        }
        
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                colSum[j] += grid[i][j];
            }
        }
        
        for(auto it : colSum){
            int idx = it.first;
            int one = it.second;
            int zero = c - one;
            colMap[idx] = {zero, one};
        }
        
        vector<vector<int>> diff(r, vector<int>(c));
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                auto f = rowMap[i];
                auto s = colMap[j];
                int val = f.second + s.second - f.first - s.first;
                diff[i][j] = val;
            }
        }
        
        return diff;
    }
};