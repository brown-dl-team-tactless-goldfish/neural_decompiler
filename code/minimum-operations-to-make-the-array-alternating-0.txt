#define MAP_SIZE (100001)

int max (int a , int b) {
    return (a > b) ? a : b;
}

int minimumOperations(int* nums, int numsSize){
    int evenMap[MAP_SIZE] = {0};
    int oddMap[MAP_SIZE] = {0};
    int oddCnt = 0, evenCnt = 0;   // 1st
    int oddCnt2 = 0, evenCnt2 = 0; // 2nd
    int oddVal = 0, evenVal = 0;
    for (int i = 0; i < numsSize; i++) {
        if (i % 2 == 0) { // even
            evenMap[nums[i]]++;
        }
        else { //odd
            oddMap[nums[i]]++;
        }
    }
    
    for (int i = 0; i < MAP_SIZE; i++) {
        if (evenMap[i] >= evenCnt) {
            evenCnt2 = evenCnt;
            evenCnt = evenMap[i];
            evenVal = i;
        }
        else if (evenMap[i] >= evenCnt2) {
            evenCnt2 = evenMap[i];
        }
    }
    
    for (int i = 0; i < MAP_SIZE; i++) {
        if (oddMap[i] >= oddCnt) {
            oddCnt2 = oddCnt;
            oddCnt = oddMap[i];
            oddVal = i;
        }
        else if (oddMap[i] >= oddCnt2) {
            oddCnt2 = oddMap[i];
        }
    }
    
    // printf("numsSize = %d\n", numsSize);
    // printf("Val: even=%d odd=%d\n", evenVal, oddVal);
    // printf("OddCnt: %d %d\n", oddCnt, oddCnt2);
    // printf("EvenCnt: %d %d\n", evenCnt, evenCnt2);
    
    if (oddVal == evenVal) {
        return numsSize - max(oddCnt+evenCnt2, oddCnt2+evenCnt);
    }

    return numsSize - evenCnt - oddCnt;
}