class Solution {
public:
    int N, M;
    bool isValid(int x, int y){
        if(x<0 || x>=N || y<0 || y>=M)return false;
        return true;
    }
    
    vector<vector<int>> allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {
        N = rows, M = cols;
        
        bool visited[N][M];
        memset(visited, 0, sizeof(visited));
        
        vector<vector<int>>ans;
        
        queue<pair<int, int>>q;
        q.push({rCenter, cCenter});
        visited[rCenter][cCenter] = true;
        
        ans.push_back({rCenter, cCenter});
        
        while(!q.empty()){
            int sz = q.size();
            while(sz){
                auto top = q.front();
                q.pop();
                int x = top.first, y = top.second;
                int dx[] = {0, 0, -1, 1};
                int dy[] = {1, -1, 0, 0};
                
                for(int i = 0; i<4; i++){
                    int px = x + dx[i], py = dy[i] + y;
                    if(isValid(px, py)){
                        if(!visited[px][py]){
                            ans.push_back({px, py});
                            visited[px][py] = true;
                            q.push({px, py});
                        }
                        
                    }
                }
                --sz;
            }
        }
        return ans;
    }
};