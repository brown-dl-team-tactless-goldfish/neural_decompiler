class Solution {
public:
    int impv[1001][1001];
    int dp[1001][1001];
    int minCost(vector<int>& nums, int k) {
         memset(dp,-1,sizeof(dp));
         memset(impv,-1,sizeof(impv));
         for(int i=0; i<nums.size(); i++) {
              int ch[1001] = {0};
              int cnt = 0;
              for(int j=i; j<nums.size(); j++) {
                    ch[nums[j]]++;
                    if(ch[nums[j]] == 1) cnt++;
                    else if(ch[nums[j]] == 2) cnt--;
                    impv[i][j] = (j - i + 1) - cnt;
              }
         }
        return solve(0,0,nums,k);
    }
    long solve(int l,int r,vector<int> &nums,int &k) {
          if(r>=nums.size()) {
               return impv[l][r-1] + k;
          }
          if(dp[l][r]!=-1) return dp[l][r];
          long cnt = 0;
          if(l == r) {
               cnt = min(solve(l,r+1,nums,k),k+impv[l][r]+solve(r+1,r+1,nums,k));
          }else {
               cnt = min(solve(l,r+1,nums,k),k+impv[l][r-1]+solve(r,r+1,nums,k));
          }
         return dp[l][r] = cnt;
    }
};