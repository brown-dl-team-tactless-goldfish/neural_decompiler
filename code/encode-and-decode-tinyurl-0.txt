/** Encodes a URL to a shortened URL. */
#define N  1000
typedef struct _URL{
    char* data[N] ;
    int count ;
}dict;

dict web = { 0 , 0 } ;

// string_concat return str1 + str2 
 char *string_concat(char *str1, char *str2) {   
   int length=strlen(str1)+strlen(str2)+1 ;   
   char *result = (char*)malloc(sizeof(char) * length) ;  
   strcpy(result, str1) ;  
   strcat(result, str2) ;  
   return result ;  
}

char* intToStr(int val){
    if(val == 0)
        return "0" ;
    char* ret = malloc(11) ;
    ret[10] = '\0' ;
    int idx = 9 ;
    while(val){
        ret[idx] = val % 10 + '0' ;
        val /= 10 ;
        idx--;
    }
    return &ret[idx+1] ;
}

int strToInt(char* s){
    int n = strlen(s) ;
    int val = 0 ;
    for(int i = 0; i < n ;i++){
        val = val * 10  +  s[i] -'0' ;
    }
    return val ;
}

char* encode(char* longUrl) {    
    int idx = web.count ;
    web.data[idx] = longUrl ;
    char* num = intToStr(idx) ;
    web.count += 1;
    char* ans = string_concat("https://leetcode.com/" , num) ;  
    return ans ;
}


/** Decodes a shortened URL to its original URL. */
char* decode(char* shortUrl) {
    int idx = strToInt(&shortUrl[21]) ;
    return web.data[idx] ;
}

// Your functions will be called as such:
// char* s = encode(s);
// decode(s);