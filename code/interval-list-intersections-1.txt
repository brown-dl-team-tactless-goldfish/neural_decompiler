
int** intput(int** ans, int* count, int start, int end, int* now){
		ans = realloc(ans,sizeof(int*)*(*count+1));
	  	ans[*count] = malloc(sizeof(int)*2);
		ans[*count][0] = start;
		ans[*count][1] = end;
		*count += 1;
		*now += 1;
return ans;
}

int** intervalIntersection(int** firstList, int firstListSize, int* firstListColSize, int** secondList, int secondListSize, int* secondListColSize, int* returnSize, int** returnColumnSizes){
    *returnSize = 0;
    int fnow = 0;
    int snow = 0;
    int** ans = malloc(sizeof(int*)*1);
    while (fnow < firstListSize && snow < secondListSize){ 
        if (firstList[fnow][0] >= secondList[snow][0]){
            if (firstList[fnow][0] > secondList[snow][1]){
                snow++;
            }
            else if (firstList[fnow][1] >= secondList[snow][1]){
                ans = intput(ans, returnSize, firstList[fnow][0], secondList[snow][1], &snow);
            } else {
                ans = intput(ans, returnSize, firstList[fnow][0], firstList[fnow][1], &fnow);
            }
        } else {
            if (secondList[snow][0] > firstList[fnow][1]){
                fnow++;
            }
            else if (firstList[fnow][1] >= secondList[snow][1]){
                ans = intput(ans, returnSize, secondList[snow][0], secondList[snow][1], &snow);
            } else {
                ans = intput(ans, returnSize, secondList[snow][0], firstList[fnow][1], &fnow);
            }
        }
    }
    (*returnColumnSizes) = malloc(sizeof(int)*(*returnSize));
    for (int i = 0 ; i < *returnSize ; i++){
        (*returnColumnSizes)[i] = 2;
    }
    return ans;
}
