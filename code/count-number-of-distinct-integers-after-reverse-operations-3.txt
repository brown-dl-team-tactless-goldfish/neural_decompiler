void swap(int *a,int *b){
   int temp=*a;
   *a=*b;
   *b=temp;
}

void heapify(int arr[],int numsSize,int a){
     int largest=a;
     int L_child=2*a+1;
     int R_child=2*a+2;
     if(L_child<numsSize && arr[L_child]>arr[largest]){
         largest=L_child;
     }
     
     if(R_child<numsSize && arr[R_child]>arr[largest]){
         largest=R_child;
     }
     if(largest!=a){
         swap(&arr[a],&arr[largest]);
         heapify(arr,numsSize,largest);
     }
}

void create_heap(int arr[],int numsSize){
    int last_node=(numsSize/2)-1;
    for(int i=last_node; i>=0; i--){
       heapify(arr,numsSize,i); 
    }
}

void heap_sort(int arr[],int numsSize){
    for(int i=numsSize-1; i>=0; i--){
        swap(&arr[0],&arr[i]);
        heapify(arr,i,0);
    }
}
/*
int maximum(int arr[],int numsSize){
    int max=arr[0];
    for(int i=0; i<numsSize; i++){
        if(max<arr[i]){
            max=arr[i];
        }
    }
    return max;
}

int  count_sort(int arr[],int numsSize){
    int s=maximum(arr,numsSize);
    int *count=(int*)malloc((s+1)*sizeof(int));
    for(int i=0; i<s+1; i++){
        count[i]=0;
    }
    for(int i=0; i<numsSize; i++){
        count[arr[i]]=count[arr[i]]+1;
    }
    int ans=0;
    for(int i=0; i<s+1; i++){
        if(count[i]!=0){
            ans++;
        }
    }
    return ans;
    
    
    }*/
//}

int countDistinctIntegers(int* nums, int numsSize){
   int *arr=(int*)malloc(2*numsSize*sizeof(int));
   for(int i=0; i<numsSize; i++){
       arr[i]=nums[i];
   }
   int index=numsSize;
   for(int i=0; i<numsSize; i++){
       int rev=0,rem;
       while(nums[i]!=0){
           rem=nums[i]%10;
           rev=rev*10+rem;
           nums[i]/=10;
       }
       arr[index++]=rev;
 }
 // return count_sort(arr,2*numsSize);
 
   create_heap(arr,2*numsSize);
   heap_sort(arr,2*numsSize);
  // for(int i=0;i<2*numsSize;i++)
   //printf("%d ",arr[i]);
   int count=0,j=0;
   for(int i=0; i<2*numsSize;){
      if(j<2*numsSize && arr[i]==arr[j]){
         j++;
     }
     else{
         count++;
         i=j;
         j++;
     }
   }
   return count;
   
}