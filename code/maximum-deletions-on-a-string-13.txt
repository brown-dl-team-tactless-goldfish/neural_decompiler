class Solution {
public:
    int dp[4001];
    int solve(int i, int n, string &s) {
        if(i == n) return 0;
        if(dp[i] != -1) return dp[i];
        int ans = 1;
        string ss = s.substr(i);
        vector<int> LPS(n-i, 0);
        for(int j = 1; j < n-i; j++) {
            int k = LPS[j-1];
            while(k > 0 && ss[k] != ss[j]) {
                k = LPS[k-1]; 
            } 
            if(ss[k] == ss[j]) {
                LPS[j] = k+1;
            }
        }
        for(int j = i; j < n; j++) {
            int len = j-i+1;
            if(len%2 != 0) continue;
            if(LPS[j-i] == len/2) {
                ans = max(ans, 1+solve(i+len/2, n, s));
            }
        }
        return dp[i] = ans;
    }
    int deleteString(string s) {
        memset(dp, -1, sizeof(dp));
        return solve(0, s.size(), s);
    }
};