// 1301. Number of Paths with Max Score
class Solution {
public:
    vector<int> pathsWithMaxScore(vector<string>& board) {
        constexpr int ModBase = 1'000'000'007;
        const int m = board.size(), n = board.size();
        // let fij represent the value of the max-score path from 'E' to ij.
        vector<vector<int>> f(m, vector<int>(n));
        // let gij represent the count of the max-score paths from 'E' to ij.
        vector<vector<int>> g(m, vector<int>(n));
        // initialize the first row
        g[0][0] = 1;
        for (int j = 1; j < n; ++j) {
            if (board[0][j] == 'X') {
                f[0][j] = -1;
                g[0][j] = 0;
            } else {
                f[0][j] = g[0][j - 1] > 0 // has valid path?
                        ? f[0][j - 1] + toInteger(board[0][j])
                        : -1;
                g[0][j] = g[0][j - 1];
            }
        }
        // general case
        for (int i = 1; i < m; ++i) {
            // first cell in the current row i
            if (board[i][0] == 'X') {
                f[i][0] = -1;
                g[i][0] = 0;
            } else {
                f[i][0] = g[i - 1][0] > 0 // has valid path?
                        ? f[i - 1][0] + toInteger(board[i][0])
                        : -1;
                g[i][0] = g[i - 1][0];
            }
            // other cells
            for (int j = 1; j < n; ++j) {
                if (board[i][j] == 'X') {
                    f[i][j] = -1;
                    g[i][j] = 0;
                } else {
                    int maxOf3 =
                            max(f[i - 1][j - 1], // diagonal
                                max(f[i - 1][j], f[i][j - 1])); // left and top
                    f[i][j] = (maxOf3 == -1) ? -1 : toInteger(board[i][j]) + maxOf3;
                    if (maxOf3 == -1) {
                        g[i][j] = 0;
                    } else {
                        int64_t cnt = (f[i - 1][j] == maxOf3 ? g[i - 1][j] : 0)
                                + (f[i - 1][j - 1] == maxOf3 ? g[i - 1][j - 1] : 0)
                                + (f[i][j - 1] == maxOf3 ? g[i][j - 1] : 0);
                        g[i][j] = int(cnt % ModBase);
                    }
                }
            }
        }
        if (g[m - 1][n - 1] == 0) {
            return {0, 0};
        } else {
            return {f[m - 1][n - 1], g[m - 1][n - 1]};
        }
    }

    static inline int toInteger(char c) {
        if ('0' <= c && c <= '9') {
            return c - '0';
        }
        return 0;
    }
};
