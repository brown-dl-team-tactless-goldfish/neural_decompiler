class Solution {
public:
    int numRabbits(vector<int>& answers) {
        
        vector<int> freq(1001,0);
        
        for(int ans:answers)
        {
            freq[ans]++;
        }
        
        int ans = 0;
        
        ans += freq[0];
        
        
        
        for(int i=1;i<1001;i++)
        {
            if(freq[i]!=0){
                
                // let us group all elements in groups of size i+1, where i is the number they say in answer 
                // meaning if a rabbit says it has x more similar to it
                // they can be grouped in size of exactly x+1
                // rest of the rabbits can form one group whoose all rabbits are not in answer group
               // need of rest rabbits 
			   // lets say we have answers as 2,2,2,2
			   // 2,2,2 can be one group of size 3(== 2+1)
			   // left guy with answer=2 also has group with size 3
                int left = freq[i]%(i+1);
                
                // left rabbits form group of size i+1
                int lastgroup_size = (left!=0) ? (i+1):0;
                
                // groups whjoose all rabbits are there in answer group
                // consider 1,1 1,1  1,1 as three groups of size 2(==i+1)
                
                // int completegroups = freq[i]/(i+1)  or (freq[i] - left)/(i+1);
                
                int complete_groups_size = freq[i] - left;
                
                ans += lastgroup_size + complete_groups_size; 
            }
        }
        return ans;
    }
};