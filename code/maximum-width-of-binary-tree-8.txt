class Solution {
public:
    
    int widthOfBinaryTree(TreeNode* root) {
        
        queue<TreeNode*>Q;
        queue<unsigned long>vec;
        unsigned long l;
        unsigned long h;
        long maxl = LONG_MIN;
        int n;
        int c = 0;
        unsigned long level;
        TreeNode * node;
        Q.push(root);
        vec.push(1);
        while(!Q.empty())
        {
            n = Q.size();
            c = 0;
            l = vec.front();
            h = vec.back();
            
            while(n--)
            {
                node = Q.front();
                level = vec.front();
                Q.pop();
                vec.pop();
                c++;
             
                if(node->left!=NULL)
                {
                    Q.push(node->left);
                    vec.push(2*(level-1)+1);
                }
                
                if(node->right!=NULL)
                {
                    Q.push(node->right);
                    vec.push(2*(level-1)+2);
                }
            }
            
            
            if(c==0)
            {
                int wid = 0;
                if(maxl<wid)maxl = wid;
                break;
            }
            else if(c==1)
            {
                int wid = 1;
                if(maxl<wid)maxl = wid;
            }                
            else
            {
                unsigned long wid = h - l + 1;
                if(maxl<wid)maxl = wid;
            }
        }
        
        return maxl;
    }
};