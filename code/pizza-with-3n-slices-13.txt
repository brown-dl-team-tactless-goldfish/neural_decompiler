class Solution {
public:
    int find(vector<int>& nums,int l,int r){
        int n = nums.size()/3;
        vector<vector<int>> dp(n+1,vector<int>(nums.size()+5,INT_MIN));
        if(l==1) dp[1][1]=nums[0];
        if(l==2) dp[1][2]=nums[1];
        for(int i = 0;i<dp[0].size();++i){ dp[0][i]=0;}
        int re = 0;
        for(int i = 1;i<=n;++i){
            for(int j = l+1;j<=r;++j){
                if(j-2<0) continue; 
                int t = dp[i-1][j-2];
                if(t!=INT_MIN){
                    dp[i][j] = max(dp[i][j],nums[j-1]+t);
                }
                dp[i][j] = max(dp[i][j],dp[i][j-1]);
                if(i==n) re=max(re,dp[i][j]);
            }
        }
        return re;
    }
    int maxSizeSlices(vector<int>& nums) {
        int n = nums.size();
        return max(find(nums,1,n-1),find(nums,2,n));
    }
};