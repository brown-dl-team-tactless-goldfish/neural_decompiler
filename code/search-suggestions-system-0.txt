int comp(const void** a, const void** b){
    if ((*(char**)a)[0] == (*(char**)b)[0]){
        int m = 1;
        int n = 1;
        while ((*(char**)a)[m] == (*(char**)b)[n]){
            m++;
            n++;
        }
        if ((*(char**)a)[m] == '\0'){
            return 0;
        }
        if ((*(char**)b)[n] == '\0'){
            return 1;
        }
        return (*(char**)a)[m] - (*(char**)b)[n];
    }
    return (*(char**)a)[0] - (*(char**)b)[0];
}

void search(char ** products, char * searchWord, char*** ans, int** returnColumnSizes, int input, int lens, int start, int end){
    if (input == lens){
        return;
    }
    int k;
    for (; start < end ; start++){
        if (searchWord[input] == products[start][input]){
            k = start+1;
            while (k < end && searchWord[input] == products[k][input]){
                k++;
            }
            int count = k - start < 3 ? k - start : 3;
            ans[input] = malloc(sizeof(char*)*count);
            (*returnColumnSizes)[input] = count;
            for (int x = 0 ; x < count ; x++){
                int lenp = strlen(products[start + x]);
                ans[input][x] = malloc(sizeof(char)*(lenp+1));
                for (int t = 0 ; t < lenp ; t++){
                    ans[input][x][t] = products[start + x][t];
                }
                ans[input][x][lenp] = '\0';
            }
            search(products, searchWord, ans, returnColumnSizes, input+1, lens, start, k);
            return;
        }
    }
    for ( ;input < lens ; input++){
        (*returnColumnSizes)[input] = 0;
    }
    return;
}

char *** suggestedProducts(char ** products, int productsSize, char * searchWord, int* returnSize, int** returnColumnSizes){
    qsort(products, productsSize, sizeof(char*), comp);
    int lens = strlen(searchWord);
    char*** ans = malloc(sizeof(char**)*(lens));
    *returnSize = lens;
    (*returnColumnSizes) = malloc(sizeof(int)*lens);
    search(products, searchWord, ans, returnColumnSizes, 0, lens, 0, productsSize);
    return ans;
}