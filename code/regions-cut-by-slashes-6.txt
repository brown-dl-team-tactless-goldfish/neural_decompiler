class Solution {
    vector<int> parents;
    int find_set(int v)
    {
        if(v == parents[v])
            return v;
        return parents[v] = find_set(parents[v]);
    }
    void union_set(int a, int b)
    {
        a = find_set(a);
        b = find_set(b);
        if(a == b)
            return;
        parents[b] = a;
        return;
    }
public:
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        int ans = 1;
        for(int i = 0; i <= n; i++)
        {
            for(int j = 0; j <= n; j++)
            {
                parents.push_back(i*(n+1) + j);
                if(i == 0 || j == 0 || i == n || j == n)
                {
                    union_set(0, i*(n+1) + j);
                }
            }
        }
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == '/')
                {
                    int x = find_set(i*(n+1)+j+1);
                    int y = find_set((i+1)*(n+1)+j);
                    if(x == y)
                        ans++;
                    union_set(x,y);
                }
                if(grid[i][j] == '\\')
                {
                    int x = find_set(i*(n+1)+j);
                    int y = find_set((i+1)*(n+1)+j+1);
                    if(x == y)
                        ans++;
                    union_set(x,y);
                }
            }
        }
        return ans;
    }
};