class Solution
{
private:
	vector<pair<int, int>> dir = {
		{ -1, 0 }, {	0, -1 }, {1, 0 }, {	0, 1 }
	};
public:
	int shortestPath(vector<vector < int>> &a, int k)
	{
		int n = a.size(), m = a[0].size();

		vector<vector < int>> vis(n, vector<int> (m, -1));
		queue<vector < int>> q;
		q.push({0, 0, 0, k});

		while (q.size())
		{
			int sz = q.size();
			while (sz--)
			{
				auto node = q.front();
				q.pop();
				int r = node[0], c = node[1], len = node[2], curr_k = node[3];
				if (r < 0 || r >= n || c < 0 || c >= m) continue;
				if (r == n - 1 && c == m - 1) return len;

				if (a[r][c] == 1)
				{
					if (curr_k > 0) curr_k--;
					else continue;
				}
				if (vis[r][c] >= curr_k) continue;
				vis[r][c] = curr_k;

				for (auto &e : dir)
				{
					int nr = r + e.first, nc = c + e.second;

					q.push({ nr, nc, len + 1, curr_k});
				}
			}
		}
		return -1;
	}
};