class Solution {
public:
    int mergeStones(vector<int>& stones, int K) {
        if (((int)stones.size() - K) % (K - 1) != 0) return -1;
        
        vector<vector<int>> dp(stones.size(), vector<int>(stones.size(), 0));
        vector<int> prefix(stones.size() + 1, 0);
        for (int i = 1; i <= stones.size(); ++i) {
            prefix[i] = stones[i - 1] + prefix[i - 1];
        }
        
        for (int j = 1; j < dp.size(); j++) {
            int i = 0;
            int k = j;
            while(k < dp.size()) {
                for (int m = i, n = 1; m < k; m += (K - 1), n += (K - 1)) {
                    dp[i][k] = min(dp[i][k] == 0 ? numeric_limits<int>::max() : dp[i][k], 
                                   dp[i][m] + dp[i + n][k]);
                }

                if (j % (K - 1) == 0) {
                    dp[i][k] += prefix[k + 1] - prefix[i];
                }
                i++;
                k++;
            }
        }
        return dp[0][(int)stones.size() - 1];
    }
};