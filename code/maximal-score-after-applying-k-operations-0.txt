void insertHeap(int* heap, int *n, int val){
    heap[*n] = val;
    int idx = *n;
    while(idx > 0){
        int father = (idx-1)/2;
        if(heap[father] < val){
            int tmp = heap[idx];
            heap[idx] = heap[father];
            heap[father] = tmp;
            idx = father;
        }
        else
            break;
    }
    *n = *n + 1;
}

int popHeap(int* heap, int *n){
    int ans = heap[0];
    *n = *n -1;
    heap[0] = heap[*n];
    int idx = 0;
    while(idx < *n){
        int son1 = idx*2 +1;
        int son2 = idx*2 + 2;
        if(son1 >= *n)
            break;
        if(son2 >= *n){
            if(heap[idx] < heap[son1]){
                int tmp = heap[idx];
                heap[idx] = heap[son1];
                heap[son1] = tmp;
                idx = son1;
                continue;
            }    
            else
                break;
        }
        if(heap[son1] >= heap[son2]){
            if(heap[idx] < heap[son1]){
                int tmp = heap[idx];
                heap[idx] = heap[son1];
                heap[son1] = tmp;
                idx = son1;
                continue;
            }
            else
                break;
        }
        else{
            if(heap[idx] < heap[son2]){
                int tmp = heap[idx];
                heap[idx] = heap[son2];
                heap[son2] = tmp;
                idx = son2;
                continue;
            }
            else
                break;
        }
    }
    
    return ans;
}
long long maxKelements(int* nums, int numsSize, int k){
    long long ans = 0;
    int n = numsSize;
    int* heap = malloc(n * sizeof(int));
    int idx = 0;
    for(int i = 0; i < n; i++){
        insertHeap(heap, &idx, nums[i]);
    }
    for(int i = 0; i < k; i++){
        int val = popHeap(heap, &n);
        ans += (long long)val;
        insertHeap(heap, &n, (val+2)/3);
    }
    
    return ans;
}