#define ll long long
class Solution {
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        vector<bool> vis(n);
        
        for(auto &p : edges) {
            adj[p[0]].push_back(p[1]);
            adj[p[1]].push_back(p[0]);
        }
        
        vector<ll> count;  // stores the nodes in every unconnected group
        
        for(int i=0; i<n; i++) {
            ll c = 0;
            if(!vis[i]) {
                dfs(adj, c, vis, i);
                count.push_back(c);
            }
        }
        
        // mathematically calculate the result from all the groups of nodes
        vector<ll> pre(count.size());
        pre[0] = count[0];
        for(int i=1; i<count.size(); i++) {
            pre[i] = pre[i-1] + count[i];
        }
        
        ll res = 0;
        for(int i=0; i<count.size()-1; i++) {
            res += pre[i] * count[i+1];
        }
        return res;
        
    }
    
    void dfs(vector<vector<int>>& adj, ll &c, vector<bool> &vis, int s) {
        c++;
        vis[s] = true;
        
        for(auto &ad : adj[s]) {
            if(!vis[ad]) dfs(adj, c, vis, ad);
        } 
    }
};