struct coordinate {
    int x;
    int y;
};
struct Queue {
    struct coordinate* val;
    unsigned int capacity;
    struct Queue* link;
};

void EnQueue(struct coordinate* x, struct Queue** front, struct Queue** back) {
    struct Queue* t = (struct Queue*)malloc(sizeof(struct Queue));
    t->val = x;
    t->link = NULL;
    if (*front)
        t->capacity = ((*front)->capacity) + 1;
    else
        t->capacity = 0;
    if ((*front) == NULL && (*back) == NULL) {
        (*front) = t;
        (*back) = t;
        return;
    }
    (*back)->link = t;
    (*back) = t;

}

void Dequeue(struct Queue** front) {
    struct Queue* t = (*front);
    if ((*front) == NULL)
        return;
    (*front) = (*front)->link;
    free(t);

}
struct coordinate* Queuefront(struct Queue* front) {
    if (empty(front)) { return front->val; }
    else { return NULL; }

}
int empty(struct Queue* front) {
    if (front)
        return 1;
    return 0;
}

void printQueue(struct Queue* front) {
    struct Queue* p = front;
    while (p != NULL) {
        printf("%d", p->val);
        p = p->link;
    }
}
struct coordinate* visit(struct coordinate* deq_coord, int i, int j, char **grid) {
    struct coordinate* enq = (struct coordinate*)malloc(sizeof(struct coordinate));
    if (!deq_coord) {
        enq->x = i;
        enq->y = j;
    }
    else {
        enq->x = deq_coord->x + i;
        enq->y = deq_coord->y + j;
    }
    grid[enq->x][enq->y] = '0';// mark visited

    return enq;
}
bool isVisitable(struct coordinate* deq_coord, int i, int j, int gridWidth, int gridHeight , char **grid) {
    if ((deq_coord->x + i >= 0 &&
        deq_coord->y + j >= 0 &&
        deq_coord->x + i < gridHeight &&
        deq_coord->y + j < gridWidth)){
            if(grid[deq_coord->x + i][deq_coord->y + j] != '0'){
                return true;
            }
        }

    return false;
}

bool bfs(char **grid, int gridRS, int gridCS, int i_s, int j_s) {
    struct Queue* front = NULL;
    struct Queue* back = NULL;

    EnQueue(visit(NULL, i_s, j_s, grid), &front, &back);

    while (empty(front)) {
        struct coordinate* deq_coord = Queuefront(front);
        //up
        if (isVisitable(deq_coord,-1,0,gridCS,gridRS,grid))
            EnQueue(visit(deq_coord, -1, 0, grid), &front, &back);
        //down
        if (isVisitable(deq_coord, 1, 0, gridCS, gridRS, grid))
            EnQueue(visit(deq_coord, 1, 0, grid), &front, &back);
        //left
        if (isVisitable(deq_coord, 0, -1, gridCS, gridRS, grid))
            EnQueue(visit(deq_coord, 0, -1, grid), &front, &back);

        //right
        if (isVisitable(deq_coord, 0, 1, gridCS, gridRS, grid))
            EnQueue(visit(deq_coord, 0, 1, grid), &front, &back);
			
        Dequeue(&front);

    }

    return true;
}

int numIslands(char **grid, int gridSize, int* gridColSize) {
    int c = 0;
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < *gridColSize; j++) {
            if (grid[i][j] == '1') {
                if (bfs(grid, gridSize, *gridColSize, i, j))
                    c++;
            }
        }
    }
    return c;
}