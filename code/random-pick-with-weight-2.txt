typedef struct {
    int* w;
    int size;
    int* counts;
    int total;
} Solution;


Solution* solutionCreate(int* w, int wSize) {
    int i;
    Solution* obj = NULL;
    
    obj = (Solution*)malloc(sizeof(Solution));
    obj->w = w;
    obj->size = wSize;
    obj->counts = (int*)calloc(wSize,sizeof(int));
    obj->counts[0] = w[0];
    for(i=1;i<wSize;i++)
    {
        obj->counts[i] = obj->counts[i-1] + w[i];
    }
    obj->total = obj->counts[i-1];
    
    return obj;
}

int search(int* arr, int size, int target)
{
    int left = 0, right = size - 1, mid;
    
    while(left<right)
    {
        mid = left + (right-left)/2;
        if(arr[mid] == target)
        {
            return mid+1;
        }
        else if(arr[mid] < target)
        {
            left = mid + 1;
        }
        else
        {
            right = mid;
        }
    }
    
    return left;
}

int solutionPickIndex(Solution* obj) {
    int pos = rand()%obj->total;
    
    return search(obj->counts,obj->size,pos);
}

void solutionFree(Solution* obj) {
    free(obj->counts);
    free(obj);
}

/**
 * Your Solution struct will be instantiated and called as such:
 * Solution* obj = solutionCreate(w, wSize);
 * int param_1 = solutionPickIndex(obj);
 
 * solutionFree(obj);
*/