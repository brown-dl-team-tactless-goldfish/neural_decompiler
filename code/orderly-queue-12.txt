class Solution {
public:
    string orderlyQueue(string s, int k) {
        map<char, int> m, m2;
        for(auto c : s){
            m[c]++;
        }
        int cnt = 0;
        string str = "", str2 = "";
        
        char min_c = s[0];
        int min_ind;
        if(k == 1){
            int n = s.length();
            for(int i=1;i<n;i++){
                if(s[i] < min_c){
                    min_c = s[i];
                    min_ind = i;
                }else if(s[i] == min_c){
                    int j = min_ind+1, j1 = i+1;
                    while((j1%n) != i){
                        j %= n;
                        j1 %= n;
                        if(s[j] == s[j1]){
                            j++;
                            j1++;
                        }else if(s[j] < s[j1]){
                            // 
                            break;
                        }else if(s[j1] < s[j]){
                            min_ind = i;
                            break;
                        }
                    }
                }
            }
            string ans = "";
            string s1 = s.substr(0, min_ind);
            string s2 = s.substr(min_ind, n-min_ind);
            ans = s2 + s1;
            return ans;
        }else{
            sort(s.begin(), s.end());
            return s;
        }
        // cout<<str<<str2<<endl;
    }
};