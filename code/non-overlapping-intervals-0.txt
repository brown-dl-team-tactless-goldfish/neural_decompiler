struct point {
    int start;
    int end;
};

int cmp(const void * a, const void * b){
    int result = ((struct point *)a)->end - ((struct point *)b)->end;
    if (result == 0){
        result = ((struct point *)a)->start - ((struct point *)b)->start;
    }
    return result;
}

int eraseOverlapIntervals(int** intervals, int intervalsSize, int* intervalsColSize){
    if (intervalsSize == 0)
        return 0;
    struct point * arr = malloc(sizeof(struct point) * intervalsSize);
    for (int i = 0; i < intervalsSize; i++){
        arr[i].start = intervals[i][0];
        arr[i].end = intervals[i][1];
    }
    qsort(arr, intervalsSize, sizeof(arr[0]), cmp);
    int num = 1; 
    int start;
    int end = arr[0].end;
    for (int i = 1; i < intervalsSize; i++){
        start = arr[i].start;
        if (start >= end){
            num++;
            end = arr[i].end;
        }
    }
    return intervalsSize - num;
}