class Solution {
public:
    set<int> cantTalk ;
    bool InCommon(vector<int>& lang1  , vector<int>&lang2 ){
        //checks if two friends can speak any language in common ?
        for(auto &x : lang1)
            for(auto &y : lang2)
                if(x == y) return true ;
            
        
        return false ;        
    }
    
    int minimumTeachings(int n, vector<vector<int>>& lang , vector<vector<int>>& friends) {
        
        for(auto &x : friends){
            int u = x[0] , v = x[1] ;
            //if two friends cannot speak any language in common then store them in cantTalk
            if(!InCommon(lang[u-1],lang[v-1])){
                cantTalk.insert(u) ;
                cantTalk.insert(v) ;
            }
        }
        
        //maps the language --> user (only the ones which are present in set cantTalk)! 
        map<int,vector<int>> common ;
        
        for(int i = 0 ; i < lang.size() ; ++i ){
            if(cantTalk.find(i+1) == end(cantTalk)) continue ;
            for(auto &x : lang[i]) common[x].push_back(i+1) ;
        }
        
        int maxCommonSpeaking = 0 ;
        
        //find the max number of users who can speak any language commonly 
        for(int i= 1 ; i <= n ; ++i ) maxCommonSpeaking = max(maxCommonSpeaking,(int)common[i].size()) ;
        
        //rest of the users left will need to be taught the language
        return (int)cantTalk.size() - maxCommonSpeaking ;
        
        
    }
};