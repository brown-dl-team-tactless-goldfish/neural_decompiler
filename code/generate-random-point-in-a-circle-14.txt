    double r;
    double x;
    double y;
    Solution(double radius, double x_center, double y_center) {
        r = radius;
        x = x_center;
        y = y_center;
    }
    
    vector<double> randPoint() {
        /*
         * Logic followed is in polar coordinates, where distance, theta
         * are  calculated and are converted to cartesian coordinates as
         *  point x = x_center + distance * cos(theta)
         *  point y = y_center + distance * sin(theta)
         *
         * In order to find the theta which ranges in 0 ... 2pi, generate
         * a random number in the range of 0..1 and multiple by 2* pi
         *
         * In order to generate the distance, sqrt(rand() in rang of 0...1)
         * multiplied with radius
        */
        
        // sqrt makes uniform distribution
        double distance = sqrt((double)rand() / RAND_MAX) * r;
        // Generate the theta
        double theta = ((double)rand() / RAND_MAX) * 2 * M_PI;
        
        // Convert the polar coordinates to cartesian coordinates.
        return {x + distance * cos(theta), y + distance * sin(theta)};
    }