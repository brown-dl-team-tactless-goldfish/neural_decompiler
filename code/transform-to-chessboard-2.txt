class Solution {
public:
    int movesToChessboard(vector<vector<int>>& grid) {
        int N=grid.size();
        //2 cases, N==odd || N==even
        //Even:0101,1010  odd: 10101  01010
        for(int i=0;i<N;i++){//basic check
            int col=0,row=0; //one
            for(int j=0;j<N;j++){
                row+=grid[i][j];
                col+=grid[j][i];
            }
            if(abs(N-2*row)>1||abs(N-2*col)>1)return -1;
        }
        int res=-1;
        if(N%2==0){
            res=even(grid);
        }else{
            res=odd(grid);
        }
        return res;
    }
    int absv(int i){
        if(i<0)return -i;
        return i;
    }
    
    int even(vector<vector<int>>& grid){
        int N=grid.size();
        int sum=0;
        unordered_map<int,vector<int>>rmap;
        unordered_map<int,vector<int>>cmap;
        for(int i=0;i<grid.size();i++){
            int rbit=0,cbit=0;
            for(int j=0;j<grid.size();j++){
                rbit=rbit|(grid[i][j]<<j);
                cbit=cbit|(grid[j][i]<<j);
            }
            if(rmap.count(rbit)==0){
                vector<int>v;
                rmap[rbit]=v;
            }
            if(cmap.count(cbit)==0){
                vector<int>v;
                cmap[cbit]=v;
            }
            rmap[rbit].push_back(i);
            cmap[cbit].push_back(i);
        }
        if(cmap.size()!=2||rmap.size()!=2)return -1;
        if(rmap.begin()->second.size()!=N/2||cmap.begin()->second.size()!=N/2){
            return -1;
        }
        vector<int>r=rmap.begin()->second;
        vector<int>c=cmap.begin()->second;
        int rcount=0,ccount=0;
        for(int i:r){
            if(i%2==0)rcount++;
        }
        for(int i:c){
            if(i%2==0)ccount++;
        }
        sum=sum+min(rcount,N/2-rcount)+min(ccount,N/2-ccount);
        return sum;
    }
    
    
    int odd(vector<vector<int>>& grid){
        int N=grid.size();
        int sum=0;
        unordered_map<int,vector<int>>rmap;
        unordered_map<int,vector<int>>cmap;
        for(int i=0;i<grid.size();i++){
            int rbit=0,cbit=0;
            for(int j=0;j<grid.size();j++){
                rbit=rbit|(grid[i][j]<<j);
                cbit=cbit|(grid[j][i]<<j);
            }
            if(rmap.count(rbit)==0){
                vector<int>v;
                rmap[rbit]=v;
            }
            if(cmap.count(cbit)==0){
                vector<int>v;
                cmap[cbit]=v;
            }
            rmap[rbit].push_back(i);
            cmap[cbit].push_back(i);
        }
        if(cmap.size()!=2||rmap.size()!=2)return -1;
        if(absv(rmap.begin()->second.size()-N/2)>1||absv(cmap.begin()->second.size()-N/2)>1)return -1;
        
        vector<int>r=rmap.begin()->second;
        vector<int>c=cmap.begin()->second;
        int rcount=0,ccount=0;
        for(int i:r){
            if(i%2==0)rcount++;
        }
        for(int i:c){
            if(i%2==0)ccount++;
        }
        int rsize=r.size(),csize=c.size();
        if(rsize==N/2+1){//odd index
            sum+=(rsize-rcount);
        }else{//odd
            sum+=(rcount);
        }
        if(csize==N/2+1){//even
             sum+=(csize-ccount);
        }else{//odd
             sum+=(ccount);
        }
        return sum;
    }
};





