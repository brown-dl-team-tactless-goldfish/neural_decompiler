typedef struct TimeMap_{
    char* key;
    char* value;
    int timestamp;
}TimeMap;

struct TimeMapHash{
    char* key;
    TimeMap* head[200000];
    int count;
    UT_hash_handle hh;
};

struct TimeMapHash* gHash = NULL;

TimeMap* timeMapCreate() {
    TimeMap* Node = malloc(sizeof(TimeMap));
    Node->key = NULL;
    Node->value = NULL;
    Node->timestamp = 0;
    return Node;
}

void timeMapSet(TimeMap* obj, char * key, char * value, int timestamp) {
    struct TimeMapHash* Temp = NULL;
    TimeMap* Node = timeMapCreate();
    Node->key = key;
    Node->value = value;
    Node->timestamp = timestamp;
    HASH_FIND_STR(gHash, key, Temp);
    if(Temp == NULL){
        Temp = malloc(sizeof(struct TimeMapHash));
        Temp->key = key;
        (Temp->head)[0] = Node;
        Temp->count = 1;
        HASH_ADD_KEYPTR(hh, gHash, key, strlen(key),Temp);
        return;
    } 
    (Temp->head)[Temp->count] = Node;
    Temp->count++;
}

char * timeMapGet(TimeMap* obj, char * key, int timestamp) {
    struct TimeMapHash* Temp = NULL;
    HASH_FIND_STR(gHash, key, Temp);
    if(Temp == NULL){
        return "";
    } 
    char* ans = "";
    int left = 0;
    int right = Temp->count - 1;
    int mid = (left + right) / 2;
    while(left <= right){
        if((Temp->head)[mid] -> timestamp < timestamp){
            ans = (Temp->head)[mid] -> value;
            left = mid + 1;
            mid = (left + right) / 2;
        } else if((Temp->head)[mid] -> timestamp > timestamp){
            right = mid - 1;
            mid = (left + right) / 2;
        } else {
            ans = (Temp->head)[mid] -> value;
            break;
        }
    }
    return ans;
}

void timeMapFree(TimeMap* obj) {
    struct TimeMapHash* Temp, *s;
    HASH_ITER(hh, gHash, s, Temp){
        for(int i = 0; i < s->count; i++){
            free((s->head)[i]);
        }
        HASH_DEL(gHash, s);
        free(s);
    }
}

/**
 * Your TimeMap struct will be instantiated and called as such:
 * TimeMap* obj = timeMapCreate();
 * timeMapSet(obj, key, value, timestamp);
 
 * char * param_2 = timeMapGet(obj, key, timestamp);
 
 * timeMapFree(obj);
*/