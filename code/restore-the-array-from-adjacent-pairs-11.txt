class Solution {
public:
    map<int,int>ind;
    unordered_map<int,int>num;
    
    void dfs(unordered_map<int,vector<int>>&g,unordered_set<int>&vis,int i){
        vis.insert(i);
        vector<int>x=g[i];
        if(ind.size()==0){
            ind[0]=i;
            num[i]=0;
        }
        for(int j:x){
            if(vis.find(j)==vis.end()){
                if(ind.find(num[i]-1)==ind.end()){
                    ind[num[i]-1]=j;
                    num[j]=num[i]-1;
                    dfs(g,vis,j);
                }
                else if(ind.find(num[i]+1)==ind.end()){
                    ind[num[i]+1]=j;
                    num[j]=num[i]+1;
                    dfs(g,vis,j);
                }
            }
        }
    }
    
    vector<int> restoreArray(vector<vector<int>>&a) {
        unordered_map<int,vector<int>>g;
        for(vector<int>x:a){
            g[x[0]].push_back(x[1]);
            g[x[1]].push_back(x[0]);
        }
        unordered_set<int>vis;
        for(auto it:g){
            if(vis.find(it.first)==vis.end())
                dfs(g,vis,it.first);
        }
        vector<int>ans;
        for(auto it:ind){
            ans.push_back(it.second);
        }
        return ans;
    }
};