class Solution {
public:
    int minOperations(vector<int>& arr0, vector<int>& arr1) {
        int s0 = 0, s1 = 0;
        
        for (auto i : arr0) s0 += i;
        for (auto i : arr1) s1 += i;
        
		// Swap arrays so first is smaller (first always increments, second always decrements)
        if (s1 < s0) {
            std::swap(s0, s1);
            std::swap(arr0, arr1);
        }
        else if (s0 == s1)
            return 0;
        
        std::priority_queue<int> pq;
		// Elements from the first array can decrease sum difference by 6 - x (increment to 6)
        for (int i = 0; i < arr0.size(); i++)
            if (arr0[i] < 6)
                pq.push(6 - arr0[i]);
		// Elements from the second array can decrease sum difference by x - 1 (decrement to 1)
        for (int i = 0; i < arr1.size(); i++)
            if (arr1[i] > 1)
                pq.push(arr1[i] - 1);
        
        int ops = 0;
        int diff = s1 - s0;
        while (diff && pq.size()) {
            ++ops;
            
			// Take element with the largest capacity to increment/decrement
            auto p = pq.top();
            pq.pop();
            
			// Decrease capacity of p by c
            int c = std::min(diff, p);
            diff -= c;
            p -= c;
            if (p)
                pq.push(p);
        }
                
		// No difference left = success
        return diff ? -1 : ops;
    }
};