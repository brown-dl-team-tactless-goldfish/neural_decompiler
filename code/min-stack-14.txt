typedef struct {
    int val, min;
} pair;

typedef struct {
    pair* stack;
    int len, cap;
} MinStack;

/** initialize your data structure here. */
#define STARTCAP 8
MinStack* minStackCreate() {
    MinStack *newMinStack = malloc(sizeof(MinStack));
    newMinStack->cap = STARTCAP;
    newMinStack->len = 0;
    newMinStack->stack = malloc(sizeof(pair) * STARTCAP);
    
    return newMinStack;
}

void minStackPush(MinStack* obj, int val) {
    obj->stack[obj->len].val = val;
   
    if (obj->len > 0 && minStackGetMin(obj) < val) {
        obj->stack[obj->len].min = obj->stack[obj->len - 1].min;
    } else {
        obj->stack[obj->len].min = val;
    }
    
    obj->len++;
    
    if (obj->len == obj->cap) {
        obj->cap *= 2;
        obj->stack = realloc(obj->stack, sizeof(pair) * obj->cap);
    }
}

void minStackPop(MinStack* obj) {
    obj->len--;
}

int minStackTop(MinStack* obj) {
  return obj->stack[obj->len - 1].val;
}

int minStackGetMin(MinStack* obj) {
  return obj->stack[obj->len - 1].min;
}

void minStackFree(MinStack* obj) {
    free(obj->stack);
    free(obj);
}