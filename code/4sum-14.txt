int cmp(const int* a,const int* b){
    return *a - *b;
}
int** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes){
    if(nums == NULL || numsSize < 4){
        *returnSize = 0;
        *returnColumnSizes = NULL;
        return NULL;
    }
    
    *returnSize = 0;
    int count = 0;
    int** result = (int**)malloc(8 * sizeof(int*));
    int base = 8;
    qsort(nums, numsSize, sizeof(int), cmp);
    int n = numsSize;
    for(int i=0; i<numsSize-3; i++){
        if(i>0 && nums[i]==nums[i-1])continue;
        if(nums[i]*2>target-nums[i]*2)break;
        for(int j=i+1; j<numsSize-2;j++){
            if(j>i+1&&nums[j]==nums[j-1])continue;
            if(nums[j]*2>target-nums[i]-nums[j]||nums[numsSize-1]*2<target-nums[i]-nums[numsSize-1])break;
            
            int* left = (nums+j+1);
            int* right = (nums+numsSize-1);
            
            while(left<right){
                int sums = nums[i]+nums[j];
                if(sums>target-*left-*right){
                    right--;
                }else if(sums<target-*left-*right){
                    left++;
                }else{
                    result[count]=(int*)malloc(4*sizeof(int));
                    result[count][0]=nums[i];
                    result[count][1]=nums[j];
                    result[count][2]=*left;
                    result[count][3]=*right;
                    count++;
                    if(count==base){
                        base*=2;
                        result=realloc(result,sizeof(int *)*base);
                    }
                    while(left<right&&*left==*(left+1))left++;
                    while(right>left&&*right==*(right-1))right--;
                    left++;
                    right--;
                }
            }
            
        }
    }
    *returnSize = count;
    *returnColumnSizes=malloc(sizeof(int)*(*returnSize));
    for(int i=0;i<*returnSize;i++){
        (*returnColumnSizes)[i]=4;
    }
    return result;
}