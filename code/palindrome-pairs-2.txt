class Solution {
public:
    vector<vector<int>> res;
    struct TrieNode
    {
        TrieNode() : word_index(-1), children(26, nullptr) {}
        int word_index;
        vector<TrieNode*> children;
    };
    
    void insert(TrieNode* root, string& word, int word_index)
    {
        for(auto c : word) 
        {
            int index = c - 'a';
            if(root->children[index] == nullptr)
            {
                root->children[index] = new TrieNode();
            }
            root = root->children[index];
        }
        
        root->word_index = word_index;
    }
    
    
    bool is_palindrome(const string& s)
    {
        int i = 0; 
        int j = s.size() - 1;
        
        while (i < j)
        {
            if (s[i] != s[j])
            {
                return false;
            }
            ++i;
            --j;
        }
        
        return true;
    }
    
    
    void dfs(TrieNode* root, vector<int>& long_word_indices, string& str)
    {
        if(root == nullptr)
        {
            return;
        }
        
        // palindrome + reverse_word
        if(root->word_index != -1 && !str.empty() && is_palindrome(str))
        {
            long_word_indices.push_back(root->word_index);
        }
        
        for(int i = 0; i < 26; ++i)
        {
            str.push_back('a' + i);
            dfs(root->children[i], long_word_indices, str);
            str.pop_back();
        }
    }
    
    void find(TrieNode* root, string& word, int word_index)
    {
        // word is longer than its corresponding word.
        int index = 0;
        while(index < word.length() && root != nullptr)
        {
            root = root->children[word[index++] - 'a'];
            if(root != nullptr && root->word_index != -1)
            {
                if(root->word_index != word_index && is_palindrome(word.substr(index)))
                {
                    res.push_back({word_index, root->word_index});
                }
            }
        }
        
        // word is shorter than its corresponding word.
        if(index == word.length())
        {
            string str;
            vector<int> long_word_indices;
            dfs(root, long_word_indices, str);
            for (int i : long_word_indices)
            {
                res.push_back({word_index, i});
            }
        }
    }
    
    vector<vector<int>> palindromePairs(vector<string>& words)
    {
        TrieNode* root = new TrieNode();
        
        // Create Trie with reversed words
        for(int i = 0; i < words.size(); ++i)
        {
            string reversed_word = words[i];
            reverse(reversed_word.begin(), reversed_word.end());
            insert(root, reversed_word, i);
        }
        
        for(int i = 0; i < words.size(); ++i)
        {
            string& word = words[i];
            // word is palindrome
            if (root->word_index != -1 && !word.empty() && is_palindrome(word))
            {
                res.push_back({i, root->word_index});
            }
            find(root, word, i);
        }
        
        return res; 
    }
};