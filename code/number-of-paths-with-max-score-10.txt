public class Solution 
{
    int[] dx = new int[]{0, -1, -1};
    int[] dy = new int[]{-1, 0, -1};
    
    public int[] PathsWithMaxScore(IList<string> board)
    {
        var n = board.Count;
        var dp = new int[n + 1, n + 1, 3];
        dp[1, 1, 0] = dp[1, 1, 2] = 1;
        for(int i = 1; i <= n; i++)
            for(int j = 1; j <= n; j++)
            {
                var ch = board[i - 1][j - 1];
                if(ch != 'X')
                {
                    int num = Char.IsDigit(ch) ? (int) (ch - '0') : 0, max = 0;
                    for(int k = 0; k < 3; k++)
                    {
                        int nx = i + dx[k], ny = j + dy[k];
                        if(dp[nx, ny, 0] == 1)
                        {
                            if(max < dp[nx, ny, 1])
                                dp[i, j, 2] = dp[nx, ny, 2];
                            else if(max == dp[nx, ny, 1])
                                dp[i, j, 2] = (dp[i, j, 2] + dp[nx, ny, 2]) % 1_000_000_007;
                            
                            max = Math.Max(max, dp[nx, ny, 1]);
                            dp[i, j, 0] = 1;
                            dp[i, j, 1] = max + num;
                        }
                    }
                }
            }
        
        return new int[]{dp[n,n,1], dp[n,n,2]};
    }
}