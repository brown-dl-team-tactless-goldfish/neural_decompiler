// There are two options
// 1. Pick the tallest one and place it rightmost. From here we need to solve d[n-1][k-1] as the rightmost one will alwasy be visible
// 2. Pick any other than the tallest one. In this case no matter what we pick, they will be hidden by the tallest one. So there are (n-1)
// options for that so we solve d[n-1][k] and multiple that with (n-1) as each n-1 will generate a new sequence
public class Solution {
    private const int Mod = 1_000_000_007;
    public int RearrangeSticks(int n, int k) {
        
        var memo = new int?[n + 1,k + 1];
        return Dfs(n, k, memo);
    }
    
    private int Dfs(int n, int k, int?[,] memo)
    {
        // all the sticks has to be visible
        // only 1 arrangemnt possible - Increasing order
        if(n == k)
            return 1;
        
        // Not possible to have any stick not visible
        if(k <= 0)
            return 0;
        
        if(memo[n, k].HasValue)
            return memo[n, k].Value;
        
        long ans = 0;
        ans += Dfs(n-1, k-1, memo) % Mod;
        
        ans = ans % Mod;
        
        ans += ((long)(n-1) * (Dfs(n-1, k, memo) % Mod));
        
        ans = ans % Mod;
        
        memo[n, k] = (int)ans;
        
        return (int)ans;
    }
}