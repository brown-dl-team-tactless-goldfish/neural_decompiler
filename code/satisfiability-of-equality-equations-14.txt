class Solution {
    unordered_map<char, char> uf;
    int find(char c) {
        while(c != uf[c])
            c = uf[c];
        return c;
    }
    void unify(char c1, char c2) {
        if(c1 == c2)
            return;
        
        auto pc1 = find(c1);
        auto pc2 = find(c2);
        if(pc1 != pc2) {
            if(pc1 < pc2) {
                uf[pc1] = pc2;        
            } else {
                uf[pc2] = pc1;
            }
        }
    }
public:
    bool equationsPossible(vector<string>& equations) {
        // union find
        for(char c = 'a'; c <= 'z'; ++c) {
            uf[c] = c;
        }
        for(const auto &e : equations) {
            if(e[1] == '=') {
                unify(e[0],e[3]);
            }
        }
        for(const auto &e : equations) {
            if(e[1] == '!') {
                if(find(e[0]) == find(e[3]))
                    return false;
            }
        }
        return true;
    }
};