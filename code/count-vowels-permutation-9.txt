public class Solution
{
    public int CountVowelPermutation(int n)
    {
        return DFS('#', n, new Dictionary<(char, int), int>());
    }

    private int DFS(char prevChar, int n, Dictionary<(char, int), int> memo)
    {
        if (n == 0)
        {
            return 1;
        }

        if (memo.ContainsKey((prevChar, n)))
        {
            return memo[(prevChar, n)];
        }

        int count = 0;
        foreach (char c in NextChars(prevChar))
        {
            count = (count + DFS(c, n - 1, memo)) % 1000000007;
        }
        memo[(prevChar, n)] = count;
        
        return count;
    }

    private char[] NextChars(char curr)
    {
        if (curr == '#')
        {
            return new char[] { 'a', 'e', 'i', 'o', 'u' };
        }
        if (curr == 'a')
        {
            return new char[] { 'e' };
        }
        if (curr == 'e')
        {
            return new char[] { 'a', 'i' };
        }
        if (curr == 'i')
        {
            return new char[] { 'a', 'e', 'o', 'u' };
        }
        if (curr == 'o')
        {
            return new char[] { 'i', 'u' };
        }
        
        return new char[] { 'a' };
    }
}