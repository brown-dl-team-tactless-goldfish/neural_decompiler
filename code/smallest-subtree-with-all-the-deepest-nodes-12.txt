class Solution {
public:
    
    pair<TreeNode*,int>  dfs(TreeNode* root) {
        
        if(!root)  return {root,0};
        
        if( !root->left && !root->right) return {root,1};
        
        
        auto [p1,d1]=dfs(root->left);
        auto [p2,d2]=dfs(root->right);
        
        
        if(d1==d2)   return {root,d1+1};
        
        if(d1>d2) return {p1,d1+1};
        
        return {p2,d2+1}; 
    }
    
    
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
      return dfs(root).first;   
    }
};