class Solution 
{
public:
    bool hasValidPath(vector<vector<int>>& grid) 
    {
        std::unordered_map<int, std::vector<std::vector<int>>> dirs;
        dirs[1].push_back({0, -1});
        dirs[1].push_back({0, 1});
        dirs[2].push_back({-1, 0});
        dirs[2].push_back({1, 0});
        dirs[3].push_back({0, -1});
        dirs[3].push_back({1, 0});
        dirs[4].push_back({1, 0});
        dirs[4].push_back({0, 1});
        dirs[5].push_back({0, -1});
        dirs[5].push_back({-1, 0});
        dirs[6].push_back({-1, 0});
        dirs[6].push_back({0, 1});
        
        std::queue<std::vector<int>> Q;
        Q.push({0, 0});
        
        std::map<std::vector<int>, bool> visited;
        
        while (!Q.empty())
        {
            std::vector<int> cur = Q.front();
            Q.pop();
            
            if (cur[0] == grid.size() - 1 && cur[1] == grid[0].size() - 1)
                return true;
            
            std::vector<std::vector<int>>& dir = dirs[grid[cur[0]][cur[1]]];
            for (const std::vector<int>& d : dir)
            {
                int next_r = cur[0] + d[0];
                int next_c = cur[1] + d[1];
                
                if (isValid(grid.size(), grid[0].size(), next_r, next_c)
                 && !visited[{next_r, next_c}]
                 && isValid(grid[cur[0]][cur[1]], grid[next_r][next_c], d))
                {
                    Q.push({next_r, next_c});
                    visited[{next_r, next_c}] = true;
                }
            }
        }
        
        return false;
    }
private:
    bool isValid(int m, int n, int r, int c)
    {
        return r >= 0 && r < m && c >= 0 && c < n;
    }
    
    bool isValid(int last_type, int cur_type, std::vector<int> dir)
    {
        if (dir[0] == 0 && dir[1] == -1)
        {
            if (last_type == 1 || last_type == 3 || last_type == 5)
            {
                return (cur_type == 1 || cur_type == 4 || cur_type == 6);
            }
            
        }
        else if (dir[0] == -1 && dir[1] == 0)
        {
            if (last_type == 2 || last_type == 5 || last_type == 6)
            {
                return (cur_type == 2 || cur_type == 3 || cur_type == 4);
            }
        }
        else if (dir[0] == 0 && dir[1] == 1)
        {
            if (last_type == 1 || last_type == 4 || last_type == 6)
            {
                return (cur_type == 1 || cur_type == 3 || cur_type == 5);
            }
        }
        else if (dir[0] == 1 && dir[1] == 0)
        {
            if (last_type == 2 || last_type == 3 || last_type == 4)
            {
                return (cur_type == 2 || cur_type == 5 || cur_type == 6);
            }
        }
        
        return false;
    }
};