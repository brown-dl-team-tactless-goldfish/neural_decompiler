class Solution {
public:
    int maximumMinutes(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> directions{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        queue<pair<int, int>> q;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) q.push({i, j});
                else if (grid[i][j] == 0) grid[i][j] = -1;
                else if (grid[i][j] == 2) grid[i][j] = -2;
            }
        }
        
        int time = 0;
        while (!q.empty()) {
            int sizes = q.size();
            for (int i = 0; i < sizes; ++i) {
                int r = q.front().first;
                int c = q.front().second;
                q.pop();
                grid[r][c] = time;
                for (int j = 0; j < 4; ++j) {
                    int new_r = r + directions[j][0];
                    int new_c = c + directions[j][1];
                    if (new_r >= 0 && new_c >= 0 && new_r < m && new_c < n && grid[new_r][new_c] == -1) {
                        q.push({new_r, new_c});
                    }
                }
            }
            ++time;
        }
        if (grid[0][0] == -1) {
            if (can_pass(grid, 1000000000, directions)) return 1000000000;
            else return -1;
        }
        int max_time = INT_MIN;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] >= 0) {
                    max_time = max(max_time, grid[i][j]);
                }
            }
        }
        int low = 0, high = max_time;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (can_pass(grid, mid, directions)) low = mid + 1;
            else high = mid - 1;
        }
        return high;
    }
    
    bool can_pass(vector<vector<int>>& grid, int start, vector<vector<int>>& directions) {
        queue<pair<int, int>> q;
        int time = start;
        q.push({0, 0});
        int m = grid.size(), n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        visited[0][0] = true;
        while (!q.empty()) {
            int sizes = q.size();
            for (int i = 0; i < sizes; ++i) {
                int r = q.front().first;
                int c = q.front().second;
                q.pop();
                if (r == m - 1 && c == n - 1) return true;
                for (int j = 0; j < 4; ++j) {
                    int new_r = r + directions[j][0];
                    int new_c = c + directions[j][1];
                    if (new_r >= 0 && new_c >= 0 && new_r < m && new_c < n && (grid[new_r][new_c] > time + 1 || grid[new_r][new_c] == -1) && !visited[new_r][new_c]) {
                        q.push({new_r, new_c});
                        visited[new_r][new_c] = true;
                    }
                    if (new_r == m - 1 && new_c == n - 1 && grid[new_r][new_c] >= time + 1) return true;
                }
            }
            ++time;
        }
        return false;
    }
};