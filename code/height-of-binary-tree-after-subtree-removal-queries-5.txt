/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int>mp;
    map<int,int>height;
    map<int,set<pair<int,int>>>mp1;
    int check(TreeNode*root,int count)
    {
        if(!root)return 0;
        mp[root->val] = count;
        int a = check(root->left,count+1);
        int b = check(root->right,count+1);
        int c = 1+max(a,b);
        int d = count+max(a,b);// This is to find total height of tree because of this node
        height[root->val] = d;
        mp1[count].insert({d,root->val});
        return c;
    }
    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {
        mp.clear();
        mp1.clear();
        height.clear();
        check(root,0);
        vector<int>ans;
        for(auto x:queries)
        {
            int a = mp[x];
            if(mp1[a].size()>1)
            {
                int x1 = height[x];
                auto it = mp1[a].lower_bound({x1,-1});
                pair<int,int>p = *it;
                mp1[a].erase(it);
                auto y = *(mp1[a].rbegin());
                ans.push_back(y.first);
                mp1[a].insert(p);
            }
            else
            {
                ans.push_back(a-1);
            }
        }
        return ans;
    }
};