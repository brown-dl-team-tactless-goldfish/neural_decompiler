class Max {
public:
    bool operator() (pair<int, string> &p1, pair<int, string> &p2) {
        return p1.first == p2.first ? p1.second < p2.second : p1.first > p2.first;
    }
};
class Min {
public:
    bool operator() (pair<int, string> &p1, pair<int, string> &p2) {
        return p1.first == p2.first ? p1.second > p2.second : p1.first < p2.first;
    }
};
class SORTracker {
public:
    int cnt = 0;
    priority_queue<pair<int, string>, vector<pair<int, string>>, Max> minHeap;
    priority_queue<pair<int, string>, vector<pair<int, string>>, Min> maxHeap;
    SORTracker() {
        
    }
    
    void add(string name, int score) {
        minHeap.push({score, name});
        while (minHeap.size() > cnt) {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }
    
    string get() {
        cnt++;
        while (minHeap.size() < cnt) {
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
        return minHeap.top().second;
    }
};