int ans, blank;
void dfs(int** grid, int gridSize, int* gridColSize, int l, int r, int cnt)
{
    if (l < 0 || l >= gridSize || r < 0 || r >= *gridColSize || *(*(grid + l) + r) == -1)
        return;
    
    if (*(*(grid + l) + r) == 2)
    {
        if(blank == cnt) 
            ans++;
        return;
    }

    *(*(grid + l) + r) = -1;

    dfs(grid, gridSize, gridColSize, l+1, r, cnt+1);
    dfs(grid, gridSize, gridColSize, l-1, r, cnt+1);
    dfs(grid, gridSize, gridColSize, l, r+1, cnt+1);
    dfs(grid, gridSize, gridColSize, l, r-1, cnt+1);

    *(*(grid + l) + r) = 0;

}

int uniquePathsIII(int** grid, int gridSize, int* gridColSize){

    int left, right;
    ans = 0;
    blank = 1;
    
    for(int i = 0; i < gridSize; ++i)
    {
        for(int j = 0; j < gridColSize[i]; ++j)
        {
            if(*(*(grid + i) + j) == 1)
            {
                left = i;
                right = j;
            } else if (*(*(grid + i) + j) == 0) {
                blank++;
            }
        }
    }

    dfs(grid, gridSize, gridColSize, left, right, 0);
    return ans;
    
}