public class Solution {
            public int MinStickers(string[] stickers, string target) {
        var dp=new Dictionary<(int id,int cnt,string str),int>();
        var r= helper(stickers,0,0,target,dp);
        return r;
    }
    int helper(string[] stickers,int pos,int cnt,string tar,Dictionary<(int id,int cnt,string str),int> dp)
    {
        if(string.IsNullOrEmpty(tar))return 0;
        if(pos==stickers.Length)return -1;
        if(dp.ContainsKey((pos,cnt,tar)))return dp[(pos,cnt,tar)];
        
        var cur=stickers[pos];
        int ret=int.MaxValue;
        int ans=0;

        bool contribute=false;
        var dict=new Dictionary<char,int>();
        foreach(var ch in cur)
        {
            if(!dict.ContainsKey(ch))dict.Add(ch,0);
            dict[ch]++;
        }
        var newTar=new StringBuilder();
        foreach(var ch in tar)
        {
            if(dict.ContainsKey(ch)&&dict[ch]>0)
            {
                dict[ch]--;
                contribute=true;
            }
            else
                newTar.Append(ch);
        }

        if(contribute)
        {
            ans=helper(stickers,pos,cnt+1,newTar.ToString(),dp);
            if(ans!=-1) ret=ans+1;
        }
        ans=helper(stickers,pos+1,0,tar,dp);
        if(ans!=-1)
        {
            ret=Math.Min(ret,ans);
        }
        dp[(pos,cnt,tar)]=ret==int.MaxValue?-1:ret;
        return dp[(pos,cnt,tar)];
    }
}