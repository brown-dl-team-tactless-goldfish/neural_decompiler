static inline void rep2del(int del, int *rep, int *cont_remain, int n)
{
        int d = del;
        for (int k = 0; k < n; k++) {
                if (d >= k + 1) {
                        int turn = d < cont_remain[k] ? d : cont_remain[k];
                        d -= turn * (k + 1);
                        (*rep) -= turn;
                }
        }
        while (*rep > 0 && d >= 3) {
                d -= 3;
                (*rep)--;
        }
}

static inline void deal_l_u_d(int ins, int *rep, bool lower, bool upper, bool digit)
{
        #define deal() do { \
                if (i > 0) \
                        i--; \
                else if (r > 0) \
                        r--; \
                else \
                        (*rep)++; \
        } while (0)
        int i = ins;
        int r = *rep;
        if (!lower)
                deal();
        if (!upper)
                deal();
        if (!digit)
                deal();
}

int strongPasswordChecker(char * s){
        #define l_u_d() do { \
                if (c >= 'a' && c <= 'z') \
                        lower = true; \
                else if (c >= 'A' && c <= 'Z') \
                        upper = true; \
                else if (c >= '0' && c <= '9') \
                        digit = true; \
        } while (0)
        char c, a, b;
        int i, ins = 0, del = 0, rep = 0;
        int cont = 0, cont_remain[3] = {0};
        bool lower = false;
        bool upper = false;
        bool digit = false;
        for (i = 0; (c = s[i]) != '\0'; i++) {
                l_u_d();
                if (i == 1) {
                        i++;
                        break;
                }
        }
        if (c == '\0')
                return 6-i;
        a = s[0];
        b = s[1];
        if (a == b)
                cont = 2;
        i--;
        do {
                c = s[++i];
                if (b == c) {
                        if (a == b)
                                cont++;
                        else
                                cont = 2;
                } else if (cont >= 3) {
                        rep += cont / 3;
                        cont_remain[cont%3]++;
                        cont = 0;
                }
                l_u_d();
                a = b;
                b = c;
        } while (c != '\0');
        if (i < 6) {
                ins += 6 - i;
                if (rep) {
                        rep -= ins < rep ? ins : rep;
                        if (cont_remain[2])             // i == 5 && cont == 5
                                rep += 1;
                }
        } else if (i > 20) {
                del += i - 20;
                if (rep)
                        rep2del(del, &rep, cont_remain, 3);
        }
        deal_l_u_d(ins, &rep, lower, upper, digit);
        return ins + del + rep;
}