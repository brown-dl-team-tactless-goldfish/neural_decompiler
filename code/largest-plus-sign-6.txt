class Solution {
public:
    
    int minimum (int a, int b, int c, int d) {
       // cout << a << " " << b << " " << c << " " << d << endl;
        int ans = min(a,b);
        ans = min(ans, c);
        ans = min(ans, d);
        return ans;
    }
    
    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {
        vector<vector<int>> grid(n, vector<int> (n, 1));
        vector<vector<int>> left(n, vector<int> (n, 0));
        vector<vector<int>> right(n, vector<int> (n, 0));
        vector<vector<int>> up(n, vector<int> (n, 0));
        vector<vector<int>> down(n, vector<int> (n, 0));
        bool seen = false;
        
        for (auto m : mines) {
            int x = m[0];
            int y = m[1];
            grid[x][y] = 0;
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j]) {
                    seen = true;
                    if (i == 0) up[i][j] = 1;
                    else up[i][j] = 1+up[i-1][j];
                }
            }
        }
        
        for (int i = n-1; i >= 0; i--) {
             for (int j = 0; j < n; j++) {
                if (grid[i][j]) {
                    seen = true;
                    if (i == n-1) down[i][j] = 1;
                    else down[i][j] = 1+down[i+1][j];
                }
            }
        }
        
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (grid[i][j]) {
                    if (j == 0) left[i][j] = 1;
                    else left[i][j] = 1+left[i][j-1];
                }
            }
        }
        
        for (int j = n-1; j >= 0; j--) {
            for (int i = 0; i < n; i++) {
                if (grid[i][j]) {
                    seen = true;
                    if (j == n-1) right[i][j] = 1;
                    else right[i][j] = 1+right[i][j+1];
                }
            }
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                //if (grid[i][j]) {
                    ans = max(ans, minimum(up[i][j], left[i][j], right[i][j], down[i][j]));
                //}
            }
        }
        
        if (ans == 0 && seen) ans = 1;
        
        return ans;
    }
};