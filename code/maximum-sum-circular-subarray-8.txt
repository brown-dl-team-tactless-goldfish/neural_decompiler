int kadan(vector<int> &ar){
    int cur=ar[0],ans=ar[0];
    for(int i=1;i<ar.size();i++){
        cur+=ar[i];
        cur=max(cur,ar[i]);
        ans=max(ans,cur);
    }
    return ans;
}

class Solution {
public:
    int maxSubarraySumCircular(vector<int>& ar) {
        int n=ar.size();
        vector<int> pre(n,ar[0]),suf(n,ar[n-1]);
        for(int i=1;i<n;i++) pre[i]=pre[i-1]+ar[i];
        for(int i=n-2;i>=0;i--) suf[i]=suf[i+1]+ar[i];
        vector<int> preMax(n,ar[0]),sufMax(n,ar[n-1]);
        for(int i=1;i<n;i++) preMax[i]=max(preMax[i-1],pre[i]);
        for(int i=n-2;i>=0;i--) sufMax[i]=max(sufMax[i+1],suf[i]);
        //  3 cases arise:
        //  some part on left and some on right
        //  total sum is ans
        //  max sum subarray lies inside completely
        //  case 1:
        int ans=INT_MIN;
        for(int i=1;i<n-1;i++) ans=max(ans,preMax[i-1]+max(sufMax[i+1],0));
        //  case 2:
        int sum=0;
        for(auto it:ar) sum+=it;
        ans=max(ans,sum);
        //  case 3:
        ans=max(ans,kadan(ar));
        return ans;
    }
};