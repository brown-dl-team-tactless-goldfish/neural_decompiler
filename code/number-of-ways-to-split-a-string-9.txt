// OJ: https://leetcode.com/problems/number-of-ways-to-split-a-string/
// Author: github.com/lzl124631x
// Time: O(N)
// Space: O(1)
class Solution {
public:
    int numWays(string s) {
        long mod = 1e9+7, cnt = 0;
        for (char c : s) cnt += c == '1';  // cnt is the count of all 1s
        if (cnt % 3) return 0;  // if cnt is not divisible by 3, we can't split the string into 3 parts, return 0
        if (cnt == 0) return (long)(s.size() - 1) * (s.size() - 2) / 2 % mod; // if cnt is 0, there are (N - 1) * (N - 2) / 2 cases.
        int i = 0, c = 0, left = 0, right = 0; // left and right are the numbers of possible cases for s1 and s2 respectively
        while (c <= cnt / 3) {
            c += s[i++] == '1';
            if (c == cnt / 3) ++left;
        }
        i = s.size() - 1, c = 0;
        while (c <= cnt / 3) {
            c += s[i--] == '1';
            if (c == cnt / 3) ++right;
        }
        return (long)left * right % mod; // The answer is simply left * right
    }
};