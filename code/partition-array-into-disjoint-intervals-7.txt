public class Solution {
    public int PartitionDisjoint(int[] nums) {
        
        int leftMax = nums[0], currMax = nums[0], partionIdx = 0;
        
        for(int i = 1; i < nums.Length; i++)
        {
            // if a voilence (nums[i] is smaller than a previous number) occurs
            // we need to at least include nums[i] in the left subarray
            if(nums[i] < leftMax)
            {
                partionIdx = i;
                
                // after changing partionIdx, we need to update the leftMax with the largest number between [0, partionIdx]
                leftMax = currMax;
            }
            
            // currMax: max number between [0, i]                 
            currMax = Math.Max(currMax, nums[i]);
            
        }
        
        // return the length instead of index
        return partionIdx + 1;
    }
}