int** spiralMatrixIII(int rows, int cols, int rStart, int cStart, int* returnSize, int** returnColumnSizes){
    int all = rows*cols;
    int count = 0;
    int a = 1;
    *returnSize = all;
    int** ans = malloc(sizeof(int*)*all);
    (*returnColumnSizes) = malloc(sizeof(int)*all);
    for(int i = 0 ; i < all ; i++){
        ans[i] = malloc(sizeof(int)*2);
        (*returnColumnSizes)[i] = 2;
    }
    ans[count][0] = rStart;
    ans[count][1] = cStart;
    count++;
    while(count < all){
        
        if (rStart >= rows || rStart < 0){
                cStart += a;
        } else {
            for (int i = 1 ; i <= a ; i++){
                cStart++;
                if (cStart < cols && cStart >= 0){
                    ans[count][0] = rStart;
                    ans[count][1] = cStart;
                    count++;
                    if (count == all){
                        return ans;
                    }
                }
            }
        }
        
        if (cStart >= cols || cStart < 0){
                rStart += a;
        } else {
            for (int i = 1 ; i <= a ; i++){
                rStart++;
                if (rStart >= 0 && rStart < rows){
                    ans[count][0] = rStart;
                    ans[count][1] = cStart;
                    count++;
                    if (count == all){
                        return ans;
                    }
                }
            }
        }
        
        a++;
        
        if (rStart >= rows || rStart < 0){
                cStart -= a;
        } else {
            for (int i = 1 ; i <= a ; i++){
                cStart--;
                if (cStart < cols && cStart >= 0){
                    ans[count][0] = rStart;
                    ans[count][1] = cStart;
                    count++;
                    if (count == all){
                        return ans;
                    }
                }
            }
        }
        
        if (cStart >= cols || cStart < 0){
                rStart -= a;
        } else {
            for (int i = 1 ; i <= a ; i++){
                rStart--;
                if (rStart >= 0 && rStart < rows){
                    ans[count][0] = rStart;
                    ans[count][1] = cStart;
                    count++;
                    if (count == all){
                        return ans;
                    }
                }
            }
        }
        
        a++;
    }
    return ans;
}