#include <vector>
#include <limits>

using namespace std;

class Solution {
public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> pres(n + 1, 0);
        for (int i = 1; i < n + 1; ++i) {
            pres[i] = pres[i - 1] + nums[i - 1];
        }

        int maxs = numeric_limits<int>::min();
        vector<int> left(n, 0);
        vector<int> lefts(n, 0);
        for (int i = k - 1; i < n; ++i) {
            int start = i - k + 1;
            if (pres[i + 1] - pres[start] > maxs) {
                maxs = pres[i + 1] - pres[start];
                left[i] = start;
            } else {
                left[i] = left[i - 1];
            }
            lefts[i] = maxs;
        }

        maxs = numeric_limits<int>::min();
        vector<int> right(n, 0);
        vector<int> rights(n, 0);
        for (int i = n - k; i >= 0; --i) {
            int end = i + k - 1;
            if (pres[end + 1] - pres[i] >= maxs) {
                maxs = pres[end + 1] - pres[i];
                right[i] = i;
            } else {
                right[i] = right[i + 1];
            }
            rights[i] = maxs;
        }

        int p1 = -1;
        int p2 = -1;
        int p3 = -1;
        maxs = numeric_limits<int>::min();
        for (int i = k; i <= n - 2 * k; ++i) {
            int s = pres[i + k] - pres[i] + lefts[i - 1] + rights[i + k];
            if (s > maxs) {
                p1 = left[i - 1];
                p2 = i;
                p3 = right[i + k];
                maxs = s;
            }
        }

        return {p1, p2, p3};
    }
};

#if DEBUG
int main(int argc, char** argv) {
    return 0;
}
#endif
