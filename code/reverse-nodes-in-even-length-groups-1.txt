struct ListNode* reverseList(struct ListNode* head){
    if (!head)
        return NULL;
    if (!head->next)
        return head;
    
    struct ListNode *pre = NULL, *tmp = NULL, *cur = head;
    for (cur = head; cur != NULL; cur = tmp) {
        tmp = cur->next;
        cur->next = pre;
        pre = cur;
    }
    return pre;
}

struct ListNode* reverseEvenLengthGroups(struct ListNode* head){
    if (!head)
        return NULL;
    if (!head->next)
        return head;
    
    struct ListNode *subH = NULL, *subT = NULL, *pre = NULL, *nxt = NULL;
    int group = 0, node = 0;
    
    for (pre = head, subH = head; subH; node = 0){
        node++;
        group++;
        subT = subH;
        
        for (int i = 0; i < group - 1; i++) {
            node++;
            if (!subT->next) {
                node--;
                break;
            }
            subT = subT->next;
        }
        
        if (node % 2 == 0) {
            nxt = subT->next;    //backup subList nxt
            subT->next = NULL;   //break subList
            pre->next = reverseList(subH);  //pre link to subListTail
            subH->next = nxt;    //link subListHead to nxt
            pre = subH;
            subH = subH->next;
        } else {
            pre = subT;
            subH = subT->next;
        }
    }

    return head;
}