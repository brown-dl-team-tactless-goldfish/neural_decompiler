class Solution {
public:
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        sort(tasks.begin(), tasks.end());
        multiset<int> st(workers.begin(), workers.end());
        multiset<int> taken;
        int n = tasks.size(), m = workers.size();
        int res = 0;
        for (int i = n - 1; i >= 0 && !st.empty(); --i) {
            if (*st.rbegin() >= tasks[i]) {
                ++res;
                st.erase(prev(st.end()));
                continue;
            }
            auto it = st.lower_bound(tasks[i] - strength);
            if (it == st.end()) {
                if (!taken.empty() && *taken.rbegin() >= tasks[i]) {
                    taken.erase(prev(taken.end()));
                    ++pills;
                }
                continue;
            }
            if (pills == 0) {
                if (taken.empty()) {
                    continue;
                }
                if (*taken.rbegin() >= tasks[i]) {
                    ++pills;
                    taken.erase(prev(taken.end()));
                } else {
                    int ma = max(*it, *taken.rbegin());
                    int mi = min(*it, *taken.rbegin());
                    taken.erase(prev(taken.end()));
                    taken.insert(mi);
                    st.erase(it);
                    st.insert(ma);
                }
                continue;
            }
            taken.insert(*it);
            st.erase(it);
            ++res;
            --pills;
        }
        return res;
    }
};