/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class CBTInserter {
public:
    queue<TreeNode*> q1;
    queue<TreeNode*> q2; 
    TreeNode* root;
    CBTInserter(TreeNode* root) {
        this->root = root; 
        q1.push(root);
        while(q1.size()&&q1.front()->left!=nullptr&&q1.front()->right!=nullptr){
            auto x = q1.front();
            q2.push(x->left);
            q2.push(x->right);
            q1.pop();
            if(q1.empty()){
                swap(q1,q2);
            }
        }
        if(q1.size()){
            auto x = q1.front();
            if(x->left){
                q2.push(x->left);
            }
        }
    }
    
    int insert(int v) {
        if(q1.empty()){
            swap(q1,q2);
        }
        auto x = q1.front();
        if(x->left == nullptr) {
            x->left = new TreeNode(v);
            q2.push(x->left);
        } else {
            x->right = new TreeNode(v);
            q2.push(x->right);
            q1.pop();
        }
        return x->val;
    }
    
    TreeNode* get_root() {
        return root; 
    }
};

/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter* obj = new CBTInserter(root);
 * int param_1 = obj->insert(v);
 * TreeNode* param_2 = obj->get_root();
 */