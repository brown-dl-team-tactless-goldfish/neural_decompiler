class Solution {
public:
    vector<long long> kthPalindrome(vector<int>& q, int l) {
        vector<long long> ans;
        for(int i=0;i<q.size();i++){
            long long temp=1;
            int x=0;                                              //Length of half portion of ans[i]
            if(l%2==0){
                x=l/2;
                temp=pow(10,x-1);
            }
            else{
                x=(l+1)/2;
                temp=pow(10,x-1);
            }
            
            temp+=q[i]-1;                                 //increment or q[i]th smallest number
            string s=to_string(temp);               // to make it palidrome we need to reverse temp and add it, to do so we first convert it into string
            if(s.size()>x){                     // if given q[i] exceeds the limit of palidrome possible of given size, e.g length =1 and q[i]=4
                ans.push_back(-1);
                continue;
            }
            if(l%2!=0){
                s.pop_back();                    //in odd cases, to ignore repeat addition of mid element
            }
            reverse(s.begin(),s.end());
            if(s.size()>0){
                temp=temp*pow(10,l-x)+stoi(s);      //addition of both parts to make a complete palindrome
            }
            ans.push_back(temp);
        }
        return ans;
    }
};