void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize){
    // since array is supposed to be [1, n], we desire
    // a[i] = i + 1;  0 <=i<=n - 1
    // find the right place for each item
    for (int i = 0; i < numsSize; i++)
    {
        while (nums[i] != i + 1)
        {
            int index = nums[i] - 1;
            if (nums[index] != index + 1)
            {
                swap(nums + i, nums + index);
            }
            else
            {
                break;
            }
        }
    }
    
    int *result = NULL;
    int count = 0;
    
    for (int i = 0; i < numsSize; i ++)
    {
        if (nums[i] != i+1)
        {
            result = (int *)realloc(result, (count + 1) * sizeof(int));
            result[count++] = i + 1;
        }
    }
    *returnSize = count;
    
    return result;
}