
//vowel[5]={a,e,i,o,u}
//dp[i][j] is count of strings of length "i" starting with vowel[j]
//dp[i][j] = Don't want to start with vowel[j] dp[i][j+1]+
//           Fill first 1 character with vowel[j] dp[i-1][j+1]+
//           Fill first 2 characters with vowel[j] dp[i-2][j+1]+
//           .......................................dp[i-3][j+1]+
//....
//''''
//           Fill first i characters with vowel[j] dp[0][j+1]
//This looks like sum of all values in (j+1)th column of dp[][] for "i" rows
//Therefore, dp[i][j] is sum of all values in (j+1)th column of dp[][] for "i" rows
//dp[i-1][j] is sum of all values in (j+1)th column of dp[][] for "i-1" rows

//Therefore dp[i][j] = dp[i-1][j] (sum of all values in (j+1)th column of dp[][] for "i-1" rows)
//                         +
//                     dp[i][j+1] (Value in (j+1)th column in ith row)
                             
//If you try to build dp table you will figure it as same as Unique paths in grid

//countVowelStrings(n) is number of unique paths to move from 
// (0,0) to (n,4) moving either right or down                           
                             
//O(1) solution is number of ways to arrange "n" same characters and "4" same characters
// countVowelStrings(int n) = (n+4)! / (n!*4!)
//                          = (n+4)*(n+3)*(n+2)*(n+1)/24;
     
//Understamding sub-problems from brute force approach
int countVowelStrings(int n){
    int column_count[5]={0},i,v;
    int dp[51][5]={0};
    for(i=0;i<=4;i++){
        column_count[i]=1;
        dp[0][i]=1;
    }
    for(i=1;i<=n;i++)
    {
        dp[i][4]=1;
        column_count[4]++;
        for(j=3;j>=0;j--)
        {
            dp[i][j]+=column_count[j+1];
            column_count[j]+=dp[i][j];
        }
    }
    return dp[n][0];
}

//When it's same as Unique paths in grid
int countVowelStrings(int n){
    int i,v;
    int dp[51][5]={0};
    for(i=0;i<=4;i++)
        dp[0][i]=1;
    for(i=1;i<=n;i++)
    {
        dp[i][4]=1;
        for(j=3;j>=0;j--)
            dp[i][j]=dp[i-1][j]+dp[i][j+1];
    }
    return dp[n][0];
}


//Solving grid problem with O(1) time
int countVowelStrings(int n){
    return (n+4)*(n+3)*(n+2)*(n+1)/24;
}