class Solution {
private:
    unordered_map<int, int> fac(int num){
        unordered_map<int, int> res;
        int f =2;
        while(num > 1 and f*f <= num){
            while(num%f == 0){
                res[f]++;
                num/=f;
            }
            f++;
        }
        if(num!=1) res[num] = 1;
        return res;
    }
    
public:
    int findValidSplit(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, int> freq;
        for(auto &i:nums){
            auto fr = fac(i);
            for(auto &[f,c]:fr) freq[f] += c;
        }

        auto org = freq;

        int count = 0;
        for(int i=0; i<n-1; i++){
            auto fr = fac(nums[i]);
            for(auto &[f,c]: fr){
                if(freq[f] == org[f] and c!= freq[f]) count++;
                if(freq[f] != org[f] and c == freq[f]) count--;
                freq[f]-=c;
            }
            if(count == 0) return i;
        }
        
        return -1;
    }
};