    int oddEvenJumps(vector<int>& A) {
        int res = 1, n = A.size();
        vector<bool> odp(n, false), edp(n, false);
        map<int,int> seen;
        
        odp[n-1] = true; edp[n-1] = true;
        seen[A[n-1]] = n-1;
        
        for (int i = n-2; i >= 0; i--) {
            // Odd : A[i] <= A[j]
            auto up = seen.find(A[i]);
            if (up == seen.end()) up = seen.upper_bound(A[i]);
            odp[i] = (up!=seen.end()?edp[up->second]:false);
            
            // Even : A[i] >= A[j]
            auto lo = seen.lower_bound(A[i]);
            if (lo == seen.end()) lo = prev(lo);
            else if (lo->first > A[i]) lo = (lo==seen.begin()?seen.end():prev(lo)); 
            edp[i] = (lo!=seen.end()?odp[lo->second]:false);
            
            //cout << (lo!=seen.end()?lo->first:-1) << " <= " << A[i] << " <= " << (up!=seen.end()?up->first:-1) << endl;
            
            seen[A[i]] = i;
            if (odp[i]==true) res++;
        }
        return res;
    }