bool check(char * word,char * lookup,char *que)
{
    memset(lookup,-1,26);
    for(int i = 0; word[i] != '\0';++i)
    {
        if(lookup[word[i] - 'a'] == -1)
            lookup[word[i] - 'a'] = i;
        if(que[i] != lookup[word[i] - 'a'])
            return false;
    }
    return true;
}

char ** findAndReplacePattern(char ** words, int wordsSize, char * pattern, int* returnSize)
{
    char lookup[26];
    memset(lookup,-1,26);
    char que[50] = {0};
    char **res = malloc(sizeof(char**) * wordsSize);
    size_t len = strlen(pattern);
    for(int i = 0;i < len;++i)
    {
        if(lookup[pattern[i] - 'a'] == -1)
            lookup[pattern[i] - 'a'] = i;
        que[i] = lookup[pattern[i] - 'a'];
    }
    int size = 0;
    for(int i = 0;i < wordsSize;++i)
        if (check(words[i],lookup,que))
        {
            char *kekw = malloc(sizeof(char) * (len + 1));
            memcpy(kekw,words[i],len + 1);
            res[size++] = kekw;
        }
    *returnSize = size;
    return res;
}