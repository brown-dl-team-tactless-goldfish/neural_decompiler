Unique* guser= NULL, *element; 

int returnSize =0, xorval=0, total = 0;

 long val = ((long)1<<numsSize);  //Total size of set would be 2^N

  int* ret = (int*)calloc(val, sizeof(int));
  if(ret == NULL)
    return NULL;

for(int i =1; i <val; i ++)
{
    int count =0, prev = 0;
    bool flag = true;
    for(int j = 0; j < numsSize && ( (1<<j)<=i) ;  j++)
    {
        int y =0;
        if(i & (1<<j) && ( (1<<j)<=i) )
        {
            if((j -prev)>1 && j !=0 && count !=0)
            {
              ret[returnSize] = 0;
               flag = false;
              break;
            }
            prev = j;
            count++; 
            y = numsSize -1-log2(1<<j);
            ret[returnSize] |= nums[y]; 

        }
      
    }
      if(flag){
         int tmp = ret[returnSize];
           HASH_FIND_INT(guser, &tmp, element);
           if(element == NULL)
           {
               element = (Unique*)calloc(1, sizeof(*element));
               if(element == NULL)
                   return INT_MIN;
               
               element->xor = tmp;
               HASH_ADD_INT(guser, xor, element);
               total++;
           }
   
        returnSize++;
     }
}

 
return total; 