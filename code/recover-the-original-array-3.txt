class Solution {
public:
    vector<int> recoverArray(vector<int>& nums) {
        //sort the numbers
        sort(nums.begin(), nums.end());
        
        //insert in a multiset
        multiset<int> ms;
        for(auto x : nums) 
            ms.insert(x);
        
        // try all possible values of k 
        // k = nums[i]-nums[0], for all i=1 to i=n-1
        for(int i = 1; i < nums.size(); i++) 
        {
            int k = nums[i] - nums[0];
            if(k == 0 || k % 2) 
                continue;
            k = k / 2;
            
            //make a copy of the multiset, dont modify the original
            auto copySet = ms;
            vector<int> result;
            
            //iterate through the nums , and check if we can find pairs for all values
            for(int i = 0; i < nums.size(); i++) {
                auto it = copySet.find(nums[i]);
                if(it == copySet.end()) 
                    continue;
                auto it2 = copySet.find(nums[i] + 2 * k);
                if(it2 == copySet.end()) 
                    continue;
                
                // if pair is found, delete them from multiset, and enter the arr value 
                // of nums[i]+k in result
                copySet.erase(it);
                copySet.erase(it2);
                result.push_back(nums[i] + k);
            }
            // if all elements had a pair, at the end multiset will be empty
            if(copySet.size() == 0) 
                return result;
        }
        return {};
    
    }
};