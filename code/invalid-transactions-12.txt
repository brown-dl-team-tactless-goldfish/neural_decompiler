class Solution {
public:
    vector<string> invalidTransactions(vector<string>& transactions) {
        vector<string> ans; 
        unordered_map<string, map<int, vector<pair<string, string>>>> trans;
        unordered_map<string, int> freq;
        unordered_set<string> unique;
        for (auto& s : transactions)
        {
            auto p = split(s);
            if (p.first.second > 1000)
                unique.insert(s);
            if (freq[s] == 0)
                trans[p.first.first][p.second.first].push_back({p.second.second, s});
            freq[s]++;
        }
        for (auto& u : trans)
        {
            for (auto i = u.second.begin(); i != u.second.end(); i++)
            {
                int m = i->second.size();
                if (m > 1)
                {
                    for (int k = 0; k < m; k++)
                        unique.insert(i->second[k].second);
                }   
                for (auto j = next(i); j != u.second.end(); j++)
                    if (j->first - i->first <= 60)
                    {
                        int n = j->second.size();
                        for (int k = 0; k < m; k++)
                            for (int l = 0; l < n; l++)
                                if (i->second[k].first != j->second[l].first)
                                {
                                    unique.insert(i->second[k].second);
                                    unique.insert(j->second[l].second);
                                }
                    }
            }
        }
        for (auto& s : unique)
            for (int i = 0; i < freq[s]; i++)
                ans.push_back(s);
        return ans;
    }
    
private: 
    pair<pair<string, int>, pair<int, string>> split(string s)
    {
        int time, amount;
        string name, city;
        int l = 0, r = 0;
        r = s.find(',', l);
        name = s.substr(l, r - l);
        l = r + 1;
        r = s.find(',', l);
        time = stoi(s.substr(l, r - l));
        l = r + 1;
        r = s.find(',', l);
        amount = stoi(s.substr(l, r - l));
        city = s.substr(r + 1);
        return {{name, amount}, {time, city}};
    }
};