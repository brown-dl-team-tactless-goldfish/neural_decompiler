class Solution {
private:
long long solve(vector<int> &a,vector<long long> &f,long long i,long long j,vector<vector<long long>> &dp){
    if(i==a.size()) return 0;
    if(j==f.size()) return 1e13;
    if(dp[i][j]!=-1) return dp[i][j];
    long long take=1e13;
    take=min(take,solve(a,f,i+1,j+1,dp)+abs(a[i]-f[j]));
    take=min(take,solve(a,f,i,j+1,dp));
    // cout<<take<<" ";
    return dp[i][j]=take;
};
public:
    long long minimumTotalDistance(vector<int>& robot, vector<vector<int>>& factory) {
        vector<long long> f;
        for(long long i=0;i<factory.size();i++){
            for(long long j=0;j<factory[i][1];j++){
                f.push_back(factory[i][0]);
            }
        }
        sort(f.begin(),f.end());
        sort(robot.begin(),robot.end());
        vector<vector<long long>> dp(robot.size(),vector<long long>(f.size(),-1));
        return solve(robot,f,0,0,dp);

    }
};