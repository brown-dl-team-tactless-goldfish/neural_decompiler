typedef struct {
    int  size;
    int* bitTree;
} NumArray;

void update(int* bit, int size,  int idx , int val)
{
    idx++;
    for(int i = idx; i < size; i += i & -i)
        bit[i] += val;   
}

int getSum(int* bit, int idx)
{
    idx++;
    int ans = 0;
    for(int i= idx; i > 0; i -= i & -i )
        ans += bit[i];  

    return ans;
}

NumArray* numArrayCreate(int* nums, int numsSize) {
    NumArray* new = malloc(sizeof(NumArray));
    new->size = numsSize + 1;
    new->bitTree = calloc(new->size , sizeof(int));
    for(int i = 0; i < numsSize; i++)
        update(new->bitTree, new->size , i, nums[i]);
    
    return new;
}

void numArrayUpdate(NumArray* obj, int index, int val) {
  
    val -=  getSum(obj->bitTree , index) - getSum(obj->bitTree , index-1);
    update(obj->bitTree, obj->size , index  , val);
}

int numArraySumRange(NumArray* obj, int left, int right) {

    return getSum(obj->bitTree , right) -  getSum(obj->bitTree , left-1);

}

void numArrayFree(NumArray* obj) {
    free(obj->bitTree);
    free(obj);
}