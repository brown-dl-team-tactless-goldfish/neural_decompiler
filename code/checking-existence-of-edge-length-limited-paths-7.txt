class Solution {
public:
    
    vector<int> p;
    vector<int> h;
    
    int findRoot(int a)
    {
        if(p[a]==-1)
        {
            return a;
        }
        else
        {
            int par=findRoot(p[a]);
            p[a]=par;
            return par;
        }
    }
    
    
    void unon(int i,int j)
    {
        int c=findRoot(i);
        int d=findRoot(j);
        
        if(c!=d)
        {
            if(h[c]<h[d])
            {
                swap(c,d);
            }
            p[d]=c;
            if(h[c]==h[d])
            {
                h[c]+=1;
            }
        }      
    }
    
    
    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& queries) {
        
        
        int i,nn=queries.size(),mm=edgeList.size();
        
        p.resize(n,-1);
        h.resize(n,1);
        
        sort(edgeList.begin(), edgeList.end(), [](vector<int>& a, vector<int>& b){
            return a[2] < b[2];
        });
        
        for(i=0;i<nn;i++)
        {
            queries[i].push_back(i);
        }
        
        vector<int> qu(queries.size());
        iota(qu.begin(), qu.end(), 0);
        sort(qu.begin(), qu.end(), [&](int a, int b){
            return queries[a][2] < queries[b][2];
        });
        
        vector<bool> an(queries.size());
        
        i=0;
        int j=0;
        
        for(auto x:qu)
        {
            while((i<mm)&&(queries[x][2]>edgeList[i][2]))
            {
                unon(edgeList[i][0],edgeList[i][1]);
                i++;
            }
            
            int c=findRoot(queries[x][0]);
            int d=findRoot(queries[x][1]);
            
            //cout<<mp[queries[j]]<<"  "<<c<<"  "<<d<<endl;
            
            an[x]=(c==d);   
        }
        
        // for(auto x:p)
        // {
        //     cout<<x<<"  ";
        // }
        
        return an;
    }
};