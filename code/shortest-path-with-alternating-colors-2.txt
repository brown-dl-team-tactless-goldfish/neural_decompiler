class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) 
    {
        vector<vector<int>> g[2];
        g[0].resize(n);
        g[1].resize(n);
        for(auto x : red_edges) {
            g[0][x[0]].push_back(x[1]);
        }
        for(auto x : blue_edges) {
            g[1][x[0]].push_back(x[1]);
        }
        
        int d[2][n];
        for(int i = 0 ; i < 2 ; ++i) {
            for(int j = 0 ; j < n ; ++j) d[i][j] = INT_MAX;
        }
        d[0][0] = d[1][0] = 0;
        
        queue<vector<int>> q;
        q.push({0, 0});
        q.push({1, 0});
        while(!q.empty())
        {
            vector<int> p = q.front();
            q.pop();
            
            int v = p[1], c = p[0];
            for(int u : g[1-c][v]) {
                if(d[1-c][u] > d[c][v] + 1) {
                    d[1-c][u] = d[c][v] + 1;
                    q.push({1-c, u});
                }
            }
        }
        
        vector<int> ans(n);
        for(int i = 0 ; i < n ; ++i) {
            int t = min(d[0][i], d[1][i]);
            ans[i] = t == INT_MAX ? -1 : t;
        }
        return ans;
    }
};