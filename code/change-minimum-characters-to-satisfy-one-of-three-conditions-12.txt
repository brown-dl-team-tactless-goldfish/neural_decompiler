public class Solution {
    
    private static int StrictlyLess(Dictionary<char, int> a, Dictionary<char, int> b) => Enumerable
          .Range('b', 'z' - 'a')
          .Min(middle => a.Where(pair => pair.Key >= middle).Sum(pair => pair.Value) + 
                         b.Where(pair => pair.Key < middle).Sum(pair => pair.Value));
    
    public int MinCharacters(string a, string b) {
        Dictionary<char, int> ha = a
            .GroupBy(c => c)
            .ToDictionary(g => g.Key, g => g.Count());

        Dictionary<char, int> hb = b
            .GroupBy(c => c)
            .ToDictionary(g => g.Key, g => g.Count());

        return new int[] {
            a.Length - ha.Values.Max() + b.Length - hb.Values.Max(),
            StrictlyLess(ha, hb),
            StrictlyLess(hb, ha)
        }.Min();
    }
}