
class Solution {
public:
    int lastRemaining(int n) {
       int start = 1;
       int diff = 1;
        if(n==1)
            return 1;
        // C-> true = left to right
        // C->false = right to left
        bool c = true;
        while(n>1)
       {
            //checking new start of sequence
        int nstart = start+diff;
           if(c){
            // if value of c is true then first value need to be updated to nstart
            start = nstart;
           }
            else {
                if(n%2)
                    //Observation : if n is odd then first number is deleted whereas in case of even the first number remain in sequence (see Example 1) 
                    start = nstart;
            }
            // diff = diff*2 
            diff*=2;
            n=n/2;
            // changing direction
            c = !c;
       }
        // return start 
        return start;
    }
};