int cmp(void* a,void* b){
    return ((int**)a)[0][0]-((int**)b)[0][0];
}
int abs(int a){
    return a>0?a:-a;
}
bool possibleBipartition(int N, int** dislikes, int dislikesRowSize, int *dislikesColSizes) {
    if(dislikesRowSize==0){
        return true;
    }
    int* map=(int*)calloc(N+1,sizeof(int));
    qsort(dislikes,dislikesRowSize,sizeof(dislikes[0]),cmp);
    for(int j=0;j<dislikesRowSize;j++){
        if(map[dislikes[j][0]]!=0){
            continue;
        }
        memset(map, 0, (N+1)*sizeof(int));
        map[dislikes[j][0]]=1;
        for(int i=j;i<dislikesRowSize;i++){
            if(map[dislikes[i][0]]!=0){
                if(map[dislikes[i][1]]!=0&&abs(map[dislikes[i][0]]+1-map[dislikes[i][1]])%2==1){
                    return false;
                }
                map[dislikes[i][1]]=map[dislikes[i][0]]+1;
            }
        }
    }
    free(map);
    return true;
}