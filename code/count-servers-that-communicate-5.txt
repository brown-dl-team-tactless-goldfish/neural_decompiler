int countServers(int** grid, int m, int* gridColnSize) {
    int n = *gridColnSize; // easier access, faster
    int pos, neg; // positive and negative cells
    int i, j; // loop counters
    int pi, pj; // i,j of previous server
    int count = 0; // return value
    
    // check row-wise
    for(i = 0; i < m; i++) {
        pos = 0;
        pi = pj = -1;
        for(j = 0; j < n; j++) {
            if(grid[i][j] == 0)
                continue;
            pos++;
            // if found more than 2 servers in row
            // set to negative to manage already seen servers
            if(pos == 2) // extra condition for branch prediction
                grid[pi][pj] = -1;
            if(pos >= 2)
                grid[i][j] = -1;
            // set as previous coords
            pi = i;
            pj = j;
        }
        if(pos >= 2) // add all servers if more than 2 servers in row
            count += pos;
    }
    
    // check col-wise
    for(j = 0; j < n; j++) {
        pos = 0;
        neg = 0;
        for(i = 0; i < m; i++) {
            if(grid[i][j] == +1)
                pos++;
            else if(grid[i][j] == -1)
                neg++;
        }
        if((pos + neg) >= 2) // add only positive servers if more than 2 servers in row
            count += pos;
    }
    
    return count;
}