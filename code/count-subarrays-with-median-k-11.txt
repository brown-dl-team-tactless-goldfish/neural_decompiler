class Solution {
public:
    int countSubarrays(vector<int>& nums, int k) {
        vector<int> numsMod, prefixSum(nums.size()+1, 0);
        unordered_map<int,int> m;
        int index=0, kIndex=0;
        for(auto &i: nums){
            index++;
            if(i<=k){
                numsMod.push_back(-1);
            }
            else{
                numsMod.push_back(1);
            }
            if(i==k)
                kIndex=index;
        }
        // cout<<kIndex<<endl;
        for(int i=1;i<prefixSum.size();i++){
            prefixSum[i]=prefixSum[i-1]+numsMod[i-1];
        }
        
        for(int i=1;i<prefixSum.size();i++){
            // cout<<prefixSum[i]<<" ";
            if(i>=kIndex)
                m[prefixSum[i]]++;
        }
        // cout<<endl;
        // for(auto &i: m){
        //     cout<<i.first<<" "<<i.second<<endl;
        // }
        int ans=0;
        for(int i=1;i<=kIndex;i++){
            if(i>=kIndex)
                m[prefixSum[i]]--;
            if(i<=kIndex+1){
                if(nums[i-1]<=k){
                    // cout<<" "<<prefixSum[i]<<" "<<m[prefixSum[i]]<<" "<<m[prefixSum[i]+1]<<endl;
                    ans+=m[prefixSum[i]];
                    ans+=m[prefixSum[i]+1];
                }
                else{
                    ans+=m[prefixSum[i]-1];
                    ans+=m[prefixSum[i]-2];
                }
                    
            }
            
        }
        return ans+1;
    }
};