/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

typedef struct TreeNode Node;

struct TreeNode* buildTree(int* inorder, int inorderSize, int* postorder, int postorderSize){
    if (postorderSize <= 0 || inorderSize <= 0) return NULL;
    int root_val = postorder[postorderSize-1];
    int i = 0;
    int curr_val;
    do {
        curr_val = inorder[i];
        i++;
    } while (i < inorderSize && curr_val != root_val);
    // now inorder[i] is the val of the first occurrence of a node in the
    // right subtree of root, and inorder[i-1] is the root
    // Thus, the first i-1 elems belong to the left subtree.
    // However, as all the nodes in the left subtree is guaranteed to come 
    // before any node in the right subtree, the first i-1 elems in postorder
    // also belong to the left subtree.
    // for inorder:
    // [....][....][....]|[root]|[i-th][....][....][....]
    // for postorder:
    // [....][....][....][....]|[(i-1)th][....][....]|[root]
    Node* root = malloc(sizeof(Node));
    root->val = root_val;
    root->left = buildTree(inorder, i-1, postorder, i-1);
    root->right = buildTree(inorder+i, inorderSize-i, postorder+i-1, postorderSize-i);
    return root;
}