using PII = pair<int, int> ;

class Solution {
    int visited[6001][2] ;
public:
    int minimumJumps(vector<int>& forbidden, int a, int b, int x) {        
        queue<PII>q ; 
        int limit = 4000;
        for(auto i : forbidden)
        {
            visited[i][0] = -1 ;
            visited[i][1] = -1 ;
        }
        visited[0][0] = 1 ;
        q.push( {0,0} ) ;
        int step = 0 ;
        while(!q.empty())
        {
            int len = q.size() ;
            
            while(len--)
            {
                int cur = q.front().first ;
                int dir = q.front().second ;
                q.pop() ;
                if(cur == x)
                    return step ;
                if(cur<= limit && visited[cur+a][0] == 0)
                {
                    visited[cur+a][0] = 1 ;
                    q.push({cur+a, 0}) ;
                }
                if(dir == 0)
                {
                    if((cur - b) >= 0 && visited[cur-b][1] == 0)
                    {
                        visited[cur-b][1] = 1 ;
                        q.push({cur-b, 1}) ;
                    }
                }
            }
            step++ ;
        }
        return -1 ;
    }
};