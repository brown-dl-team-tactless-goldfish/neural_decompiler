public class Solution {
    public IList<int> FindMinHeightTrees(int n, int[][] edges) {
        if (n == 1)
        {
            return new List<int>() { 0 };
        }
        
        IList<int> res = new List<int>();
        Dictionary<int, List<int>> g = new Dictionary<int, List<int>>();
        int[] indegree = new int[n];
        bool[] v = new bool[n];
        Queue<int> q = new Queue<int>();
        
        foreach (var e in edges)
        {
            indegree[e[0]] += 1;
            indegree[e[1]] += 1;
            
            if (!g.ContainsKey(e[0]))
            {
                g.Add(e[0], new List<int>());
            }
            
            if (!g.ContainsKey(e[1]))
            {
                g.Add(e[1], new List<int>());
            }
            
            g[e[0]].Add(e[1]);
            g[e[1]].Add(e[0]);
        }
        
        for (int i = 0; i < indegree.Length; i++)
        {
            if (indegree[i] == 1)
            {
                q.Enqueue(i);
                v[i] = true;
            }
        }
        
        while (q.Count > 0)
        {
            int cnt = q.Count;
            
            while (cnt > 0)
            {
                bool end = true;
                int cur = q.Dequeue();

                foreach (var nei in g[cur])
                {
                    if (!v[nei])
                    {
                        indegree[nei] -= 1;
                        end = false;
                    }
                    else
                    {
                        end &= true;
                    }
                }

                if (end)
                {
                    res.Add(cur);
                }
                
                cnt--;
            }
            
            for (int i = 0; i < indegree.Length; i++)
            {
                if ((indegree[i] == 1 || indegree[i] == 0 )&& !v[i])
                {
                    q.Enqueue(i);
                    v[i] = true;
                }
            }
        }        
        
        return res;
    }
}