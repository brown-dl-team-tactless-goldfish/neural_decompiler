class Solution {
public:
    int countPyramids(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        vector<int> prev(c,0);
        vector<int> cur(c,0);
        int result = 0;
        // Assume each cell as apex and check how much it can increase the hieght of new apxex
        // a new apex will be apex if its 3 children beneath are apex
        for (int i = r-2; i >= 0; i--) {
            for (int j = 1; j < c-1; j++) {
                cur[j] = 0;
                if (grid[i][j]) {
                    if (grid[i+1][j-1] && grid[i+1][j] && grid[i+1][j+1])
                        cur[j] = 1 + min({prev[j-1], prev[j], prev[j+1]});
                        result += cur[j];
                }
            }
            swap(prev,cur);
        }
        fill(begin(prev),end(prev),0);
        // iterate it reverse for reverse pyramid
        for (int i = 1; i < r; i++) {
            for (int j = 1; j < c-1; j++) {
                cur[j] = 0;
                if (grid[i][j]) {
                    if (grid[i-1][j-1] && grid[i-1][j] && grid[i-1][j+1])
                        cur[j] = 1 + min({prev[j-1], prev[j], prev[j+1]});
                        result += cur[j];
                }
            }
            swap(prev,cur);
        }
        return result;
    }
};