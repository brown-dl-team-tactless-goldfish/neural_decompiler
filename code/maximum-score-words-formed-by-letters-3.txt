    int res = 0;
public:
    int maxScoreWords(vector<string>& words, vector<char>& letters, vector<int>& score) {
        unordered_map<char, int> count;
        for(auto c : letters) count[c]++;
        dfs(words, 0, 0, score, count);
        return res;
    }
    
    void dfs(vector<string>& w, int idx, int cur, vector<int>& score, unordered_map<char, int>& count) {
        if(idx == w.size()) {
            res = max(res, cur);
            return;
        }

        bool use = true;
        int sum = 0;
        unordered_map<char, int> me;
        for(auto c : w[idx]) {
            sum += score[c-'a'];
            if(++me[c-'a'] > count[c]) { use = false; break;}
        }
        
        if(use) {
            for(auto c : w[idx]) count[c]--;
            dfs(w, idx + 1, cur + sum, score, count);
            for(auto c : w[idx]) count[c]++;
        }
        
        dfs(w, idx + 1, cur, score, count);
    }