class Solution {
public:
    int minSpaceWastedKResizing(vector<int>& nums, int k) {
        
        int n = nums.size();
        vector<int> prefixSum(n+1,0);
        vector<vector<int>> dp(n,vector<int>(k+1,-1));
        vector<vector<int>> max_element(n,vector<int>(n,-1));
        
        // max_element[i][j] = maximum element from i to j
        for(int i=0;i<n;i++){
            int maxi = nums[i];
            prefixSum[i+1] = prefixSum[i] + nums[i];
            for(int j=i;j<n;j++){
                maxi = max(maxi, nums[j]);
                max_element[i][j] = maxi;
            }
        }
        //initialization
        for(int i=0;i<n;i++) dp[i][0] = (i+1)*max_element[0][i] - prefixSum[i+1];
        for(int j=0;j<=k;j++) dp[0][j] = 0;
        
        for(int i=1;i<n;i++){
            for(int j=1;j<=i && j<=k;j++){
                dp[i][j] = INT_MAX;
                for(int l=0;l<i;l++){
                    if(dp[l][j-1] == -1) continue;
                    int temp = dp[l][j-1] + max_element[l+1][i]*(i-l) - (prefixSum[i+1] - prefixSum[l+1]);
                    dp[i][j] = min(dp[i][j], temp);
                }
                if(dp[i][j] == INT_MAX) dp[i][j] = -1;
            }
        }
        
        return dp[n-1][k];
    }
};