class Solution {
public:
    int minimumScore(vector<int>& V, vector<vector<int>>& E) {
        unordered_set<int> g[1001];
        for(auto & e : E) {
            g[e[0]].insert(e[1]);
            g[e[1]].insert(e[0]);
        }

        int res = INT_MAX;

        function<int(int, int)> calc = [&](int n, int p)->int {
            int total = V[n];
            for(auto nxt : g[n]) if(nxt != p) total ^= calc(nxt, n);
            return total;
        };

        function<int(int, int, int, int)> final = [&](int a, int b, int r, int p)->int {
            int total = V[r];
            for(auto nxt : g[r]) {
                if(nxt == p) continue;
                int c = final(a, b, nxt, r), other = b^c, min_v = min({a, c, other}), max_v = max({a, c, other});
                res = min(res, max_v-min_v);
                total ^= c;
            }
            return total;
        };

        for(auto & e : E) {
            g[e[0]].erase(e[1]);
            g[e[1]].erase(e[0]);
            int A = calc(e[0], -1);
            int B = calc(e[1], -1);
            final(A, B, e[1], -1);
            final(B, A, e[0], -1);
            g[e[0]].insert(e[1]);
            g[e[1]].insert(e[0]);
        }

        return res;
    }
};