class Solution {
public:
    string crackSafe(int n, int k) {
        if (k == 1) return string(n, '0');
        
        int vertices = 1;
        for (int i = 1; i < n; ++i) {
            vertices *= k;
        }
        
        vector<vector<int>> edges(vertices, vector<int>(k, 0));
        int edges_cnt = vertices * k;
        
        for (int i = 0; i < vertices; ++i) {
            for (int j = 0; j < k; ++j) {
                edges[i][j] = 1;
            }
        }
        
        string answer(vertices * k + n - 1, '0');
        int end = n - 1;
        int cur_vertex = 0;
        vector<char> circuit;
        
        while (end < answer.size()) {
            int i;
            for (i = 0; i < k; ++i) {
                if (edges[cur_vertex][i] > 0) {
                    edges[cur_vertex][i] = 0;
                    --edges_cnt;
                    break;
                }
            }
            
            if (i < k) {
                answer[end++] = i + '0';
                if (edges_cnt == 0) break;
            } else {
                circuit.push_back(answer[end - 1]);
                --end;
            }
            
            string next = answer.substr(end - n + 1, n - 1).c_str();
            cur_vertex = 0;
            for (int j = 0; j < next.size(); ++j) {
                cur_vertex = cur_vertex * k + next[j] - '0';
            }
        }
        
        for (int i = circuit.size() - 1; i >= 0; --i)
            answer[end++] = circuit[i];
        
        return answer;
    }
};