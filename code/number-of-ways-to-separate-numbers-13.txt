import numpy as np

class Solution:
    def numberOfCombinations(self, num: str) -> int:
        
        if(num[0]=='0'):
            return 0
        
        MOD = 10**9 + 7
        n=len(num)
        dp = np.zeros((n, n//2+1), dtype = int)
        dp[n-1][0]=1   # only required if len(n) == 1
        
        for i in range(n-2, -1, -1):
            subtotal = 0
            
            if(n-i)%2 == 0 and num[i:i+(n-i)//2] <= num[i+(n-i)//2:]: # check if splitting in half is valid
                subtotal = subtotal + 1
                dp[i][(n-i)//2]=1
            
            for j in range(((n-i)//2) - (n-i+1)%2, 0, -1):
                
                if(num[i+j]!='0'):
                    if j > (n-i)//3:
                        subtotal = (subtotal + 1)%MOD
                        dp[i][j] = subtotal
                        continue
                    if num[i:i+j]<= num[i+j:i+2*j]:
                        subtotal = (subtotal + 1 + dp[i+j][j])%MOD
                        dp[i][j] = subtotal
                    else:
                        if(j+1<((n//2)+1)):
                            subtotal = (subtotal + 1 + dp[i+j][j+1])%MOD
                        else:
                            subtotal = (subtotal + 1)%MOD
                        dp[i][j]= subtotal
                else:
                    dp[i][j]=subtotal
                    
            dp[i][0]=subtotal+1
        
        return dp[0][0]