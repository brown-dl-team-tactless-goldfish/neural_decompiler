class Solution {
public:
    int n;
    int find(int n){
        int re = 0;
        while(n){ n = n&(n-1); re++;}
        return re;
    }
    int dfs(vector<int>& nums,vector<vector<int>> &dp,int n,int k){
        if(dp[n][k]!=-1) return dp[n][k];
        int l = find(n), re = INT_MAX;
        if(k==1){
           re = 0;
           for(int j = 13; j>=0;j--){
             if(n&(1<<j)) re+=nums[j];
           }
            return dp[n][k] = re;
        }
        for(int i = n; i>0; i = n&(i-1)){  
            if(l-find(i)>=k-1){
                int sum = 0;
                for(int j = 13; j>=0;j--){
                    if(i&(1<<j)) sum+=nums[j];
                }
                sum = max(sum,dfs(nums,dp,n^i,k-1));
                re = min(re,sum);
            }
        }
        return dp[n][k] = re;
    }
    int minimumTimeRequired(vector<int>& nums, int k) {
        n = nums.size();
        n = (1<<n)-1;
        vector<vector<int>> dp(n+2,vector<int>(k+1,-1));
        return dfs(nums,dp,n,k);
    }
};