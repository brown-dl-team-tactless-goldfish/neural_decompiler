char * getHappyString(int n, int k){
    // Number of happy permutations = 3 * 2^(n-1)
    // Reason: s[1] available option = size of {'a' 'b' 'c'} (note s is 1-indexed)
    //                               = 3
    //         s[i] available option = size of {'a' 'b' 'c'}\s[i-1] 
    //                               =2
    char str[n+1], *ans=str;
	// if k > number of valid happy strings, return an empty string.
    if (k > (3<<(n-1))) {
        str[0]='\0';
        return ans;
    }
    k-=1;
    char prev='d';
    while(--n>=0){
		// s[i] = 'a' + k's most significant bit
        *ans = ('a'+(k>>n));
		// if s[i]>=s[i-1], s[i]++
        *ans += (*ans>=prev)?1:0;
        // discard k's most significant bit
        k = k & ((1<<n)-1);
		// update s[i-1] holder and ans pointer 
        prev=*ans;
        ans++;
    }
    *ans='\0';
    ans=str;
    return ans;
}