class Solution {
public:
    unordered_map<string,string> parent;
    string find(string a)
    {
         if(a == parent[a]) return a;
         return parent[a] = find(parent[a]);
    } 
    void merge(string a,string b){
         a = find(a);
         b = find(b);
        
         if(a != b){
              parent[a] = b;
         }
    }
    bool equationsPossible(vector<string>& E) {
        
           parent.clear();
        
           for(char c ='a';c<='z';c++){
               
                 parent[to_string(c)] = to_string(c);
           }
        
           for(auto s : E){
               
               string a = to_string(s[0]);
               string b = to_string(s[3]);
               
               if(s[1] != '!'){
                   
                    merge(a,b);
               }
          }
         for(auto s : E){
               
               if(s[1] == '!'){
                   
                    string a = to_string(s[0]);
                    string b = to_string(s[3]);
                   
                    if(parent.count(a) && parent.count(b)){
                        
                         string pa = find(a);
                         string pb = find(b);
                        
                         if(pa == pb) return false;
                             
                    }
               }
         }
  
         return true;
    }
};