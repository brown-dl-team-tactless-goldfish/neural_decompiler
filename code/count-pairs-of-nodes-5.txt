	public class Solution {

		public int TwoPointers(int[] array, int query) {
			int left = 1;
			int right = array.Length - 1;
			int total = 0;

			while (left < right)
				if (array[left] + array[right] > query)
					total += (right-- - left);
				else
					left++;

			return total;
		}

		public int[] CountPairs(int n, int[][] edges, int[] queries) {
			int[] inDegree = new int[n + 1];

			for (int i = 0; i < edges.Length; ++i) {
				inDegree[edges[i][0]]++;
				inDegree[edges[i][1]]++;
			}

			int[] duplicate = inDegree.ToArray();

			Array.Sort(duplicate);

			Dictionary<(int a, int b), int> map = new();

			for (int i = 0; i < edges.Length; ++i) {
				int a = edges[i][0];
				int b = edges[i][1];

				if (a > b)
					(a, b) = (b, a);

				if (!map.TryAdd((a, b), 1))
					map[(a, b)] += 1;
			}

			int[] result = new int[queries.Length];

			int index = 0;

			foreach (int query in queries) {
				// Fast Estimation (two pointers)
				int total = TwoPointers(duplicate, query);

				// Correction (some total values are Overestiated)
				foreach (var edge in map.Keys)
					if (inDegree[edge.a] + inDegree[edge.b] > query && 
						inDegree[edge.a] + inDegree[edge.b] - map[edge] <= query)
					  total -= 1;

				result[index++] = total;
			}

			return result;
		}

	}