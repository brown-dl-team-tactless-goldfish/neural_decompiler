int cmp(const void *p1, const void *p2) {
    return ( (*(int *)p1) - (*(int *)p2) );
}

long long minimumTime(int* time, int timeSize, int totalTrips) {
    qsort(time, timeSize, sizeof(int), cmp);

    if (totalTrips == 1)
        return time[0];

    long long int min = time[0];
    long long int max = (long long int)(time[timeSize - 1]) * totalTrips;
    long long int mid;
    long long int totalRep;

    while (min < max) {
        mid = (min + max) / 2;
        totalRep = totalTrips;
        for (int i = 0; i < timeSize; i ++) {
            totalRep -= (mid / time[i]);
        }
        if (totalRep > 0) {
            min = mid + 1;
        }
        else {
            totalRep = totalTrips;
            for (int i = 0; i < timeSize; i ++) {
                totalRep -= ((mid - 1) / time[i]);
            }
            if (totalRep > 0)
                return mid;
            else {
                max = mid - 1;
            }
        }
        //printf("min = %llu, max = %llu\n", min, max);
    }
    if (min == max)
        return min;
    totalRep = totalTrips;
    for (int i = 0; i < timeSize; i ++) {
        totalRep -= ((max) / time[i]);
    }
    if (totalRep > 0)
        return min;
    else 
        return max;
}