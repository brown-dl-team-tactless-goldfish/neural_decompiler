class RandomizedCollection {
public:
    unordered_map<int,unordered_set<int>> m; 
    vector<int> data;
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        auto& s = m[val];
        s.insert(data.size());
        data.push_back(val);
        return s.size() == 1; 
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        auto& s = m[val];
        if(s.empty()){
            return false; 
        }
        int x = data[data.size()-1];
        data.pop_back();
        if(x == val) {
            s.erase(data.size());
            return true; 
        }
        int i = *(s.begin());
        s.erase(i);
        data[i] = x; 
        auto& s1 = m[x];
        s1.erase(data.size());
        s1.insert(i);
        return true; 
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return data[rand()%data.size()];
    }
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection* obj = new RandomizedCollection();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */