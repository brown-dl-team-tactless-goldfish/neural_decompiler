class Solution {
public:
    bool equalFrequency(string word) {
        unordered_map<char,int> map;
        unordered_map<int, int> count;
        for(char& c: word) {
            map[c]++;
        }
        if(map.size() == 1) {return true;}
        
        for(auto& ele: map) {
            count[ele.second]++;
        }

        if(count.size() == 1 && map[word[0]] == 1) {
            return true;
        }

        if(count.size()!=2) {
            return false;
        }
        

        auto ele = count.begin();
        int sharedCount1 = ele->first;
        int numChars1 = ele->second;
        ele = next(ele);

        int sharedCount2 = ele->first;
        int numChars2 = ele->second;

        bool flag = false;
        if(numChars1 == 1) {
            flag |= sharedCount1 - sharedCount2 == 1 || sharedCount1 == 1;
        }

        if(numChars2 == 1) {
            flag |= sharedCount2 - sharedCount1 == 1 || sharedCount2 == 1;
        }

        return flag;

    }
};