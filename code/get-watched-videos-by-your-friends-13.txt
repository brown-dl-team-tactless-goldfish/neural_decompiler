class Solution {
public:
    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        queue<pair<int, int>> q;
        vector<bool> visited(friends.size(), false);
        int depth = -1;
        q.push({id, level});
        visited[id] = true;
        unordered_map<string, int> counts;
        while(!q.empty()) {
            int size = q.size();
            while(size--) {
                auto p = q.front(); q.pop();
                int person = p.first, depth = p.second;
                if(depth == 0) {
                    for(auto &movie : watchedVideos[person])
                        counts[movie]++;
                }
                for(auto &adjc : friends[person]) {
                    if(!visited[adjc] and depth > 0) {
                        visited[adjc] = true;
                        q.push({adjc, depth-1});
                    }
                }
            }
        }
        vector<string> res;
        vector<pair<int, string>> subres;
        for(auto &itr: counts)
            subres.push_back({itr.second, itr.first});
        sort(subres.begin(), subres.end());
        for(auto &p : subres)
            res.push_back(p.second);
        return res;
    }
};