/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

#define STACK_SIZE 10240

typedef struct {
    int* stack;
    int count;
} BSTIterator;

void helper(struct TreeNode* root, BSTIterator* obj)
{
    if(root==NULL)
        return;
    
    helper(root->right,obj);
    obj->stack[obj->count++] = root->val;
    helper(root->left,obj);
}

BSTIterator* bSTIteratorCreate(struct TreeNode* root) {
    BSTIterator* obj = (BSTIterator*)malloc(sizeof(BSTIterator));
    
    obj->stack = (int*)malloc(STACK_SIZE*sizeof(int));
    obj->count = 0;
    
    helper(root,obj);
    
    return obj;
}

/** @return the next smallest number */
int bSTIteratorNext(BSTIterator* obj) {
    int temp = -1;
    
    if(obj->count)
    {
        temp = obj->stack[obj->count-1];
        obj->count--;
    }
    return temp;
}

/** @return whether we have a next smallest number */
bool bSTIteratorHasNext(BSTIterator* obj) {
    return (obj->count>0);
}

void bSTIteratorFree(BSTIterator* obj) {
    free(obj->stack);
    free(obj);
}

/**
 * Your BSTIterator struct will be instantiated and called as such:
 * BSTIterator* obj = bSTIteratorCreate(root);
 * int param_1 = bSTIteratorNext(obj);
 
 * bool param_2 = bSTIteratorHasNext(obj);
 
 * bSTIteratorFree(obj);
*/