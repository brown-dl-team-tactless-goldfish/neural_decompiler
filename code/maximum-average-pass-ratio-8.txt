class Solution {
public:
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        // Greedy: each time we add the student into the class where the delta of pass / total is the greatest.
        // To do this, create a heap and sort the values by the delta, aka (pass + 1) / (total + 1) - pass / total.
        // Then push all classes into the heap, each time we get the top element, and student to that class.
        // Meanwhile, we also accumulate the ratio. Finally, return the result.
        auto comp = [](const pair<int, int>& p1, const pair<int, int>& p2)
        {
            double delta1 = (p1.first + 1) / (double)(p1.second + 1) - p1.first / (double)p1.second;
            double delta2 = (p2.first + 1) / (double)(p2.second + 1) - p2.first / (double)p2.second;
            return delta1 < delta2; // comparator of heap
        };
        
        double res = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> heap(comp);
        for (const auto& c : classes)
        {
            res += c[0] / (double)c[1];
            heap.push({c[0], c[1]}); // push all elements in the heap
        }
        
        for (int n = 0; n < extraStudents; ++n)
        {
            auto v = heap.top();
            heap.pop();
            res += (v.first + 1) / (double)(v.second + 1) - v.first / (double)v.second;
            
            ++v.first, ++v.second;
            heap.push(v); // calculate result and update the heap
        }
        
        return res / classes.size();
    }
};