int numUniqueEmails(char** emails, int emailsSize) {

	size_t* set = calloc(emailsSize, sizeof(size_t));
	size_t setLength = (size_t)emailsSize;
	size_t count = 0;

	for (size_t i = 0; i < (size_t)emailsSize; i++)
	{
		char* email = emails[i];
		size_t length = strlen(email);
		size_t i = 0;
		char* nem = calloc(length, sizeof(char*));
		char* ptr = email;
		char* dst = nem;

		while (*ptr != 0)
		{
			if (*ptr == '+')
			{
				//ignore everything and fast forward to '@'
				while (*ptr != '@' && *ptr != 0) ptr++;
				continue;
			}
			else if (*ptr == '@')
			{
				memcpy(dst, ptr, length - (email - ptr));
				break;
			}
			else if (*ptr != '.')
			{
				*dst = *ptr;
				dst++;
			}
			ptr++;
		}
		//calculate D.J.Bernstein hash
		size_t hash = 5381;
		char* cp = nem;
		while (*cp) 
		{
			hash = 33 * hash ^ (unsigned char)*cp++;
		}
		// store in array of hashes if vvalue not yet present
		size_t* setPtr = set;
		size_t pos = 0;
		while (pos < setLength) 
		{
			if (*setPtr == hash)
			{
				//already exists
				break; 
			}
			else if (*setPtr == 0) 
			{
				//not found, let's add new one
				*setPtr = hash;
				count++;
				break;
			}
			pos++;
			setPtr++;
		}
		free(nem);
	}
	free(set);
	return count;    
}