class Solution {
public:
    long long maxPower(vector<int>& stat, int r, int k) {
        int n=stat.size();
        vector<long long> a(n+1,0);

        for(int i=0;i<n;i++){
            int l=max(i-r,0);
            int x=min(i+r,n-1);
            a[l]+=1ll*stat[i];
            a[x+1]-=1ll*stat[i];
        }

        for(int i=1;i<n;i++){
            a[i]+=a[i-1];
        }

        long long low=0, high=LLONG_MAX;
        long long ans=0;
        while(low<=high){
            long long mid=low+(high-low)/2;  //want atleast this much at each position

            vector<long long> add(n+1,0);  //for extra add
            long long rem=k;
            for(int i=0;i<n;i++){
                if(i){
                    add[i]+=add[i-1];
                }
                long long got=a[i]+add[i];

                if(got<mid){
                    long long need=mid-got;
                    rem-=need;
                    if(rem<0){
                        break;
                    }
                    long long far=min(i+r+r,n-1);       //give i+r th index station and it will provide b/w i to i+r+r 
                    add[i]+=need;
                    add[far+1]-=need;   //at this index station not going to give power 
                }
            }
            if(rem>=0){
                ans=mid;
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
       return ans;
       
    }
};
//code by sachin