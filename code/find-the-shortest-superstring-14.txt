#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define dbg1(x,y) cout<<#x<<" = "<<(x)<<" | "<<#y<<" = "<<(y)<<endl;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<vi> iv;
int n;
int mx=-1;
iv g;
int dp[14][((1<<14))];

int rec(int idx,int mask){
    if(mask==((1<<n)-1)){
        return 0;
    }
    if(dp[idx][mask]!=-1) return dp[idx][mask];
    for(int i=0;i<n;i++){
        if(((1<<i)&mask)==0){
            int temp=(mask|(1<<i));
            dp[idx][mask]=max( dp[idx][mask] , g[idx][i]+rec(i,temp) );
        }
    }
    return dp[idx][mask];
}

string path(int x,int rem,int mask,vector<string> &A){
    string out=A[x];
    if(mask==((1<<n)-1)){
        return out;
    }
    for(int i=0;i<n;i++){
        if(((1<<i)&mask)==0){
            if(g[x][i]+rec(i,(mask|(1<<i)))==rem){
                string t=out;
                string y=path(i,rem-g[x][i],(mask|(1<<i)),A);           
                return out+y.substr(g[x][i]);
            }
        }
    }
}



class Solution {
public:
    string shortestSuperstring(vector<string>& A) {
        int tot=0;
        A.insert(A.begin(),"");
        n=A.size();
        g.clear();
        g.resize(n,vi(n));
        mx=0;
        for(int i=0; i<n; ++i) for(int j=0; j<n; ++j) if(i!=j){
            for(int k = min(A[i].size(), A[j].size()); k>0; --k)
                if(A[i].substr(A[i].size()-k)==A[j].substr(0,k)){
                    g[i][j] = k; 
                    break;
                }
        }
        
        memset(dp,-1,sizeof(dp));
        int rem=rec(0,1);
        string x=path(0,rem,1,A);
        return x;
    }
};