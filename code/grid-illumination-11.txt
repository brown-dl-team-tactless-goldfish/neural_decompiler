class Solution {
public:
    
    bool valid(int  i,int j,int n){
        return ( i>=0 and i<n and j>=0 and j<n );
    }
	
    vector<int> gridIllumination(int n, 
	vector<vector<int>>& lamps, vector<vector<int>>& queries) {
        
        unordered_multiset<int>row,col,right_dia,left_dia; 
        set<pair<int,int>> isLamps;
        vector<int>ans;
        
        for(auto it : lamps){
            isLamps.insert({it[0],it[1]});
        }
        
        for(auto it2 : isLamps){
            vector<int> it{it2.first,it2.second};
            row.insert(it[0]);
            col.insert(it[1]);
            right_dia.insert(it[0]+it[1]);
            left_dia.insert(it[0]-it[1]);
        }
        
        for(auto it : queries){
            int x = it[0] , y = it[1];            
            
            if(
               row.find(x) != row.end() or 
               col.find(y) != col.end() or 
               right_dia.find(x+y)!=right_dia.end() or 
               left_dia.find(x-y) != left_dia.end() 
              )
                ans.push_back(1);
            else ans.push_back(0);
            
            for(int i=-1;i<2;++i){
                for(int j=-1;j<2;++j){
                    if(valid(x+i,y+j,n)){
                        int valx = x+i , valy = y+j;
                        
                        if(isLamps.find({valx,valy}) == isLamps.end())
                            continue;
                        
                        isLamps.erase(isLamps.find({valx,valy}));
                       
                       if(row.find(valx) != row.end()){
                           row.erase(row.find(valx));
                       }
                        
                        if(col.find(valy) != col.end())
                            col.erase(col.find(valy));
                        
                        if(right_dia.find(valx+valy) != right_dia.end())
                            right_dia.erase(right_dia.find(valx+valy));
                        
                        if(left_dia.find(valx-valy) != left_dia.end())
                            left_dia.erase(left_dia.find(valx-valy));
                    }
                }
            }
            
        }
        
        return ans;
    }
};
