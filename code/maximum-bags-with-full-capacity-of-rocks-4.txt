int sort_asscend(const void* nums1, const void* nums2){
    return *(int*)nums1 - *(int*)nums2;
}

int maximumBags(int* capacity, int capacitySize, int* rocks, int rocksSize, int additionalRocks){
int* empty_bag_space = (int*)calloc(capacitySize,sizeof(int));
long long total_available_space = 0;
//we ll calculate the total space in bags 
for(int bags=0; bags < rocksSize; bags++){
    empty_bag_space[bags] = capacity[bags] - rocks[bags];
    total_available_space += empty_bag_space[bags];
}
//condtion which checks if additional rocks is more than the total available space
if(additionalRocks >= total_available_space){free(empty_bag_space);return rocksSize;}
else{
    //we ll sort the available capacity in ascending order to get maximum bags full
    qsort(empty_bag_space,rocksSize,sizeof(int),sort_asscend);
    int total_full_bags = 0;
    //loop to check maximum number of rocks to be full
    while((additionalRocks > 0) && (total_full_bags < rocksSize)){
        additionalRocks  = additionalRocks - empty_bag_space[total_full_bags];
        if(additionalRocks < 0){free(empty_bag_space); return total_full_bags;} 
        total_full_bags++;
    }
    free(empty_bag_space);
    return total_full_bags;
}
}