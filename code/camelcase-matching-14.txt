class Solution {
public:
    vector<bool> camelMatch(vector<string>& queries, string pattern) {
        vector<bool> result;
        for (const string& query : queries) {
            bool isMatch = true;
            int i = 0;
            for (char c : pattern) {
                i = query.find_first_of(c, i);
                if (i == string::npos) {
                    isMatch = false;
                    break;
                }
                ++i;
            }
            result.push_back(isMatch && upper(query) == upper(pattern));
        }
        return result;
    }
    
    string upper(string s) {
        string u;
        for (char c : s) {
            if (c >= 'A' && c <= 'Z')
                u += c;
        }
        return u;
    }
};