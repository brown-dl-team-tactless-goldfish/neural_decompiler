class Solution {
public:
    unordered_map<long, long> compress;
    vector<int> BIT;
    int n, c;
    int bit_size;
    
    void populateCompress(vector<long>& S) {
        c = 0;
        sort(S.begin(), S.end());
        for(long x : S) {
            compress[x] = c++;
        }
        bit_size = c + 1;
    }
    
    void update(int i, int x) {
        i++;
        for(; i <= bit_size - 1; i += (i & (-i))) {
            BIT[i] += x;
        }
    }
    
    int query(int i) {
        i++;
        int ans = 0;
        for(; i > 0; i -= (i & (-i))) {
            ans += BIT[i];
        }
        return ans;
    }
    
    int rangeQuery(int i, int j) {
        return query(j) - query(i - 1);
    }
    
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        n = nums.size();
        vector<long> pre, bgv;
        long sum = 0;
        for(long x : nums) {
            sum += x;
            pre.emplace_back(sum);
            bgv.emplace_back(sum);
        }
        bgv.emplace_back(0);
        for(long x : pre) {
            bgv.emplace_back((long)x - (long)lower);
            bgv.emplace_back((long)x - (long)upper);
        }
        
        populateCompress(bgv);
        BIT.resize(bit_size);
        int ans = 0;
        update(compress[0], 1);
        for(long x : pre) {
            long l = compress[(long)x - (long)upper];
            long r = compress[(long)x - (long)lower];
            ans += rangeQuery(l, r);
            update(compress[x], 1);
        }
        return ans;
    }
};