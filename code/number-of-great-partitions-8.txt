class Solution {
public:
    const int MOD = (int)(1E9 + 7);

    int powMod(int len) {
        int base = 1;
        for (int i = 0; i < len; ++i) {
            base = base * 1ll * 2 % MOD;
        }
        return base;
    }

    int countPartitions(vector<int>& nums, int k) {
        long long _sum = 0;
        for (int num : nums) {
            _sum += num;
        }
        if (_sum < 2 * k) {
            return 0;
        }
        int len = nums.size();
        vector<int> dp(k);
        dp[0] = 1;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < len; ++i) {
            vector<int> tmp = dp;
            for (int j = 0; j < k; ++j) {
                if (j - nums[i] >= 0) {
                    dp[j] = (dp[j] * 1ll + tmp[j - nums[i]]) % MOD;
                }
            }
        }
        int sum = 0;
        for (int j = 1; j < k; ++j) {
            sum = (sum * 1ll + dp[j]) % MOD;
        }
        
        int ori = (powMod(len) * 1ll - 2 + MOD) % MOD;
        return (ori * 1ll - sum * 2 + MOD) % MOD;
    }
};