// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

int firstBadVersion(int n) 
{
    int first;
    int mid;
    
    //At least from a software POV - the version should start at 1.
    first = 1;
    
    //These 2 values will eventually meet when the search is complete.
    while(first < n)
    {
        //Divide and Conquer - Take the middle value to instantly cut out half of the work
        mid = first + (n - first)/2;
        if(isBadVersion(mid) == true)
        {
            //If the middle is bad, we do not need the entire 2nd half.
            //The highest value can become the value we just confirmed is bad.
            n = mid;
        }
        else
        {
            //If the middle is not bad, we can move the starting value to one we cannot confirm is not bad.
            first = mid+1;
        }
        //The search will now loop and create a new mid point based on 
        //either the first or last value being altered.
        //Eventually these 2 values will meet, ending the search at the correct value.
    }
     return first;
}