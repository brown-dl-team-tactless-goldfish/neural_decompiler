int dfs(int* edges, bool* visited,int node,int* recent, int* rec_idx_ptr){
    if(edges[node]==-1) return -1;
    int now;
    if(visited[node]){
        int idx = 0;
        while(idx<=(*rec_idx_ptr)){
            if(recent[idx]==node){
                break;
            }
            idx+=1;
        }
        return (*rec_idx_ptr)+1-idx;
    }
    visited[node] = true;
    *rec_idx_ptr +=1;
    recent[(*rec_idx_ptr)] = node;
    now = dfs(edges,visited,edges[node], recent, rec_idx_ptr);
    if(now == 0) return -1;
    return now;
}

int longestCycle(int* edges, int edgesSize){
    bool* visited = (bool *) malloc(sizeof(bool)*edgesSize);
    int* recent = (int *)malloc(sizeof(int)*edgesSize);
    int rec_idx = -1;
    int* rec_idx_ptr = &rec_idx;
    memset(visited,false,sizeof(bool)*edgesSize);
    int max = -2, now;
    for(int i =0;i<edgesSize;i++){
        if(visited[i]) continue;
        now = dfs(edges,visited,i, recent, rec_idx_ptr);
        rec_idx = -1;
        if(now>max) max = now;
    }
    return max;
}


