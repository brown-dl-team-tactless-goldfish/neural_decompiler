class Solution {
public:
    vector<int> sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {
        
        vector<int> ans;
        
        int N = A.size();
        
        int evenSum = 0;
        int val = 0, index = 0;
        
        for (int i = 0; i < N; i++)
        {
            if (A[i] % 2 == 0)
                evenSum += A[i];
        }
        
        for (const auto & q : queries)
        {
            val   = q[0];
            index = q[1];
            
            int original = A[index];
            
            A[index] += val;
            
            if (original % 2 != 0 && A[index] % 2 == 0)
                evenSum += A[index];
            else if (original % 2 == 0 && A[index] % 2 != 0)
                evenSum -= original;
            else if (original % 2 != 0 && A[index] % 2 != 0)
            {
                ;
            }
            else if (original % 2 == 0 && A[index] % 2 == 0)
            {
                evenSum = evenSum - original + A[index];
            }
            
            ans.push_back(evenSum);
        }
        
        return ans;
    }
};