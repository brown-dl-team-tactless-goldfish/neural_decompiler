class Solution {
public:
    int depthTree(TreeNode * root)
    {
        if(root==NULL)return -1;
        
        return max(depthTree(root->left),depthTree(root->right))+1;
    }
    
    bool isCompleteTree(TreeNode* root) {
        
        if(root==NULL)return true;
        int depth = depthTree(root);
        if(depth==0)return true;
        if(depth==1)return (root->left!=NULL);
        queue<TreeNode *>Q;
        Q.push(root);
        int n;
        int c;
        TreeNode * node;
        int l = 0;
        vector<TreeNode*>dNodes;
        while(!Q.empty())
        {
            n = Q.size();
            c = n;
            while(n--)
            {
                node = Q.front();
                Q.pop();
                
                if(l==depth-1)
                {
                   dNodes.push_back(node->left);
                   dNodes.push_back(node->right);
                }
                
                if(node->left)Q.push(node->left);
                if(node->right)Q.push(node->right);
            }
            
            if(!Q.empty() && c<((int)pow(2,l)))return false;
            l++;
        }
        
        int s = dNodes.size();
        for(int i=0;i<(s-1);i++)
        {
            if(dNodes[i]==NULL && dNodes[i+1]!=NULL)return false;
        }
        
        return true;
    }
};