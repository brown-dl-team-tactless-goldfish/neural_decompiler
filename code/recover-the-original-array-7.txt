class Solution
{
public:
    vector<int> recoverArray(vector<int> &nums)
    {

        sort(nums.begin(), nums.end());

        int n = nums.size();

        map<int, int> mp;
        for (int i : nums)
        {
            mp[i]++;
        }
        
        vector<int> d;
        for (int i = 1; i < n; i++)
        {
            if ((nums[i] - nums[0]) % 2 == 0 && (nums[i] - nums[0]) > 0)
                d.push_back(nums[i] - nums[0]);
        }

        int k = 0;
        for (int i = 0; i < d.size(); i++)
        {
            map<int, int> tmp;
            tmp = mp;
            int flag = 1;
            int dif = d[i];
            for (int j = 0; j < n; j++)
            {
                if (tmp[nums[j]] == 0)
                    continue;
                if (tmp[nums[j] + dif] <= 0)
                {
                    flag = 0;
                    break;
                }
                tmp[nums[j]]--;
                tmp[nums[j] + dif]--;
            }

            if (flag)
            {
                tmp = mp;
                vector<int> v;
                for (int j = 0; j < n; j++)
                {
                    if (tmp[nums[j]] == 0)
                        continue;

                    tmp[nums[j]]--;
                    tmp[nums[j] + dif]--;
                    v.push_back(nums[j] + dif / 2);
                }
                return v;
            }
        }
        return {};
    }
};