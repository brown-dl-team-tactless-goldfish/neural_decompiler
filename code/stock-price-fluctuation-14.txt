class StockPrice {
private:
    map<int, unordered_set<int>> priceTimestamps;
    unordered_map<int, int> values;
    
    int recentTimeStamp = 0;
    
public:
    StockPrice() {
        
    }
    
    void update(int time, int price) {
        int lastPrice = -1;
        if(values.find(time) != values.end()) lastPrice = values[time];
        
        if(lastPrice != -1 && 
           priceTimestamps.find(lastPrice) != priceTimestamps.end() &&
           priceTimestamps[lastPrice].find(time) != priceTimestamps[lastPrice].end()) {
            
            priceTimestamps[lastPrice].erase(time);
            
            if(priceTimestamps[lastPrice].empty()) priceTimestamps.erase(lastPrice);
        }
        
        priceTimestamps[price].insert(time);
        values[time] = price;
        recentTimeStamp = max(recentTimeStamp, time);
    }
    
    int current() {
        return values[recentTimeStamp]; 
    }
    
    int maximum() {
        return priceTimestamps.rbegin()->first;
    }
    
    int minimum() {
        return priceTimestamps.begin()->first;
    }
};

/**
 * Your StockPrice object will be instantiated and called as such:
 * StockPrice* obj = new StockPrice();
 * obj->update(timestamp,price);
 * int param_2 = obj->current();
 * int param_3 = obj->maximum();
 * int param_4 = obj->minimum();
 */