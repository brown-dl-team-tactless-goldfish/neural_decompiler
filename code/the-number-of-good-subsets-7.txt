class Solution {
public:
    int numberOfGoodSubsets(vector<int>& nums) {
        vector<vector<int>> subsets{ {} };
        for(auto num : nums)
        {
            int n= subsets.size();
            for(int i=0;i<n;i++)
            {
                subsets.push_back(subsets[i]);
                subsets.back().push_back(num);
            }
        }
        vector<int> products;
        for(auto vec: subsets)
        {
            if(vec.size()==0) continue;
            uint64_t product=1;
            for(auto num: vec)
            {
                product*=num;
            }
            products.push_back(product);
        }
        int ans=0;
        for(auto product: products)
        {
            if(primeFactors(product)) ans+=1;
            
        }
        return ans;
    }

    bool primeFactors(int n)
    {
        if(n==1) return false;
        set<int> prime_fac;
        while (n % 2 == 0)
        {
            if(!prime_fac.count(2)) prime_fac.insert(2);
            else return false;
            n = n/2;
        }

        for (int i = 3; i <= sqrt(n); i = i + 2)
        {
            while (n % i == 0)
            {
                if(prime_fac.count(i)) return false;
                prime_fac.insert(i);
                n = n/i;
            }
        }
        if (n > 2)
        {
            if(!prime_fac.count(n)) prime_fac.insert(n); 
            else return false;
        }
        return true;
    }
};