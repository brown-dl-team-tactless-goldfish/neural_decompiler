class Solution {
public:
    int solve(int s, int h, int n) {
        int ans = 0;
        for (int i = 0; i < n; i++) ans += (((s>>i&1)==h) != (i%2==0));        
        return ans / 2;
    }
    
    
    int movesToChessboard(vector<vector<int>>& arr) {     int n = arr.size();
        int row[110] = {0};
        int col[110] = {0};
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i] |= (arr[i][j]==arr[i][0])<<j;    // get row mode
                col[j] |= (arr[i][j]==arr[0][j])<<i;
            }
        }
        for (int i = 1; i < n; i++) {
            if (row[i]!=row[0]) return -1;              // all the rows have the same row mode
            if (col[i]!=col[0]) return -1;      
        }
                                                     
        int a = __builtin_popcount(row[0]), b = n-a;
        int c = __builtin_popcount(col[0]), d = n-c;
        if (abs(a-b) > 1 || abs(c-d) > 1) return -1;        
                  
        // rows and columns do not affect each other
        int u = min(a>=b?solve(row[0],1,n):INT_MAX,b>=a?solve(row[0],0,n):INT_MAX);
        int v = min(c>=d?solve(col[0],1,n):INT_MAX,d>=c?solve(col[0],0,n):INT_MAX);
        return u + v;
    }
};