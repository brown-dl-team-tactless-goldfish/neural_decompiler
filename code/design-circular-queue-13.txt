typedef struct 
{
    int front;
    int rear;
    int size;
    int * circular_arr;
} MyCircularQueue;

bool myCircularQueueIsFull(MyCircularQueue* obj);
bool myCircularQueueIsEmpty(MyCircularQueue* obj);

MyCircularQueue* myCircularQueueCreate(int k)
{
    MyCircularQueue * obj = (MyCircularQueue *)malloc(sizeof(MyCircularQueue));
    obj->front = 0;
    obj->rear = 0;
    obj->size = k+1;
    obj->circular_arr = (int *)malloc(sizeof(int) * obj->size);
    return obj;
}

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) 
{
    if(myCircularQueueIsFull(obj))
        return false;
    obj->rear = (obj->rear + 1) % obj->size;
    obj->circular_arr[obj->rear] = value;
    return true;
        
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
        return false;
    
    obj->front = (obj->front + 1) % obj->size;
    return true;
}

int myCircularQueueFront(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->circular_arr[(obj->front+1) % obj->size];
}

int myCircularQueueRear(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->circular_arr[(obj->rear) % obj->size];
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
  return (obj->front == obj->rear) ? true : false;
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
  return (obj->front == (obj->rear + 1) % obj->size) ? true : false;
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->circular_arr);
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/