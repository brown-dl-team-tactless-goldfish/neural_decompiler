int dp[102][102];
int solve(vector<int>&cuts,int i,int j){
    if(i>j) return 0;
    if(dp[i][j]!=-1) return dp[i][j];
    int c = INT_MAX;
    for(int k=i;k<=j;k++){
        int x = solve(cuts,i,k-1)+solve(cuts,k+1,j)+(cuts[j+1]-cuts[i-1]);
        c = min(c,x);
    }
    return dp[i][j] = c;
}
int minCost(int n, vector<int>& cuts) {
    memset(dp,-1,sizeof(dp));
    int sz = cuts.size();
    sort(cuts.begin(),cuts.end()); // important because we divide the stick in left portion and right portion so it should be sorted if something big length comes in left portion then answer will be wrong.
    cuts.insert(cuts.begin(),0);
    cuts.push_back(n);
    return solve(cuts,1,sz);
}