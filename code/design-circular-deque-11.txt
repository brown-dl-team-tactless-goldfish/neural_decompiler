class MyCircularDeque {
public:
    vector<pair<int, bool>> d;
    int st;
    int ed;
    int c;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    MyCircularDeque(int k) {
        d = vector<pair<int, bool>>(k, make_pair(0, false));
        c = k;
        st = 0;
        ed = 0;
    }
    
    void next(int& t) {
        t++;
        if (t >= c) t -= c;
    }
    
    void prev(int& t) {
        t--;
        if (t < 0) t += c;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    bool insertFront(int value) {
        if (d[st].second) return false;
        bool flag = isEmpty();
        d[st].first = value;
        d[st].second = true;
        if (flag) next(ed);
        prev(st);
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    bool insertLast(int value) {
        if (d[ed].second) return false;
        bool flag = isEmpty();
        d[ed].first = value;
        d[ed].second = true;
        if (flag) prev(st);
        next(ed);
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    bool deleteFront() {
        if (isEmpty()) return false;
        next(st);
        d[st].second = false;
        next(st);
        if (st != ed) prev(st);
        return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    bool deleteLast() {
        if (isEmpty()) return false;
        prev(ed);
        d[ed].second = false;
        next(st);
        if (st != ed) prev(st);
        return true;
    }
    
    /** Get the front item from the deque. */
    int getFront() {
        if (isEmpty()) return -1;
        int t = st;
        next(t);
        return d[t].first;
    }
    
    /** Get the last item from the deque. */
    int getRear() {
        if (isEmpty()) return -1;
        int t = ed;
        prev(t);
        return d[t].first;
    }
    
    /** Checks whether the circular deque is empty or not. */
    bool isEmpty() {
        int t = st;
        prev(t);
        return !isFull() && st == ed && !d[t].second;
    }
    
    /** Checks whether the circular deque is full or not. */
    bool isFull() {
        return d[st].second;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * bool param_1 = obj.insertFront(value);
 * bool param_2 = obj.insertLast(value);
 * bool param_3 = obj.deleteFront();
 * bool param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * bool param_7 = obj.isEmpty();
 * bool param_8 = obj.isFull();
 */