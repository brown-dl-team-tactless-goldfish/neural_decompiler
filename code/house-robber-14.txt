/*3 ways to solve this problem
1st: Create graph
2nd: use recursion
Something like:
for i < n; i ++ 
        recur(i)
    recur(int start )
    {
        ans += nums[start]
            for i < n; i = i +2 
                recur (i)
    }
    
3rd: Use dp
We are using DP
*/
class Solution {
public:
    int rob(vector<int>& nums) {
        
        vector<int> dp (nums.size(), 0);
        if ( nums.size() == 0 )
            return 0;
            
        if (nums.size() == 1 )
        {
            return nums[0];
        }
        
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for (int i = 2; i < nums.size(); i++ )
        {
           
            dp[i] = nums[i];
            dp[i] = max(dp[i-2] + dp[i], dp[i]);
            dp[i] = max( dp[i-1], dp[i] );
        }
        
        return dp[nums.size()-1];
    }
};