static bool comp(vector<int> a, vector<int> b)
{
    return a[1] < b[1];
}
int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
    
    int n = startTime.size(), i;
    
    vector<vector<int>> v;
    
    for(i=0; i<n; i++)
    {
        v.push_back({startTime[i],endTime[i],profit[i]});
    }
    
    sort(v.begin(), v.end(), comp);
    
    int dp[n];
    
    dp[0] = v[0][2];
    
    for(i=1; i< n; i++)
    {
        int inc = v[i][2];
        int low = 0;
        int high = i-1;
        int temp = -1;
        
        while(low <= high)
        {
            int mid = low + (high-low)/2;
        
            if(v[mid][1] <= v[i][0])
            {
                temp = mid;
                low = mid+1;
            }
            else
            {
             high = mid-1;
           }
    }
        
        if(temp != -1)
        { 
            inc += dp[temp];
        }
        
        int exclude = dp[i-1];
        
        dp[i] = max(inc, exclude);
        
    }
    
    return dp[n-1];
    
}