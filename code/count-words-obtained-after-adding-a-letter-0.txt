typedef struct {
    int charMask;
    UT_hash_handle hh;
} hElem;

int wordCount(char ** startWords, int startWordsSize, char ** targetWords, int targetWordsSize){
    hElem *set = NULL, *s;
    int result = 0;
    
    for(int i = 0; i < startWordsSize; i++) {
        int mask = 0;    
        for(int c = 0; startWords[i][c]; c++)
            mask ^= 1 << (startWords[i][c] - 'a');
        s = calloc(sizeof(hElem), 1);
        s->charMask = mask;
        HASH_ADD_INT(set, charMask, s);
    }
    
    for(int i = 0; i < targetWordsSize; i++) {
        int mask = 0;
        
        for(int c = 0; targetWords[i][c]; c++)
            mask ^= 1 << (targetWords[i][c] - 'a');
        
        for(int c = 0; targetWords[i][c]; c++) {
            int tMask = mask ^ (1 << targetWords[i][c] - 'a');
            HASH_FIND_INT(set, &tMask, s);
            if(s) {
                result ++;
                break;
            }
        }
    }
    return result;
}