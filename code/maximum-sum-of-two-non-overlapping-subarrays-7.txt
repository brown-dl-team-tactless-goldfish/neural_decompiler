public class Solution {
    public int MaxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {
        
        // dp[i]: sum of subarry of length i (ending at index i-1)
        int[] dp = new int[nums.Length + 1];
        for(int i = 1; i < dp.Length; i++)
            dp[i] = dp[i-1] + nums[i-1];
        
        return Math.Max(maxSum(dp, firstLen, secondLen), maxSum(dp, secondLen, firstLen));
    }
       
    // return the maximum sum of the two subarrays
    // subarray of firstLen is before subarray of secondLen
    private int maxSum(int[] dp, int firstLen, int secondLen)
    {
        int res = 0, maxSum_firstSubarray = 0;
        
        for(int i = firstLen + secondLen; i < dp.Length; i++)
        {
            maxSum_firstSubarray = Math.Max(maxSum_firstSubarray, dp[i - secondLen] - dp[i - secondLen - firstLen]);
            res = Math.Max(res, maxSum_firstSubarray + dp[i] - dp[i - secondLen]);
        }
        
        return res;
    }
}