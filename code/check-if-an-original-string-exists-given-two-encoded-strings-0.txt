public class Solution {
    public bool PossiblyEquals(string s1, string s2) {
        int[,,] dp = new int[s1.Length + 1, s2.Length + 1, 2001];
        for (int i = 0; i < dp.GetLength(0); ++i)
            for (int j = 0; j < dp.GetLength(1); ++j)
                for (int k = 0; k < dp.GetLength(2); ++k)
                    dp[i, j, k] = -1;
        
        int r = DFS(0, 0, 0, s1, s2, dp);
        return r == 1 ? true : false;
    }
    
    public int DFS(int i, int j, int d, string s1, string s2, int[,,] dp) {
        if (i >= s1.Length && j >= s2.Length && d == 0) return 1;
        
        if (dp[i, j, d + 1000] != -1) return dp[i, j, d + 1000];
        
        int v = 0;
        
        if (i < s1.Length) {
            if (s1[i] - '0' <= 9) {
                int val = 0, c = 0;
                while (i + c < s1.Length && c < 3 && s1[i + c] - '0' <= 9) {
                    val = val * 10 + (s1[i + c] - '0');
                    c++;
                    if (DFS(i + c, j, d - val, s1, s2, dp) == 1) v = 1;
                }
            } else {
                if (d > 0) {
                    if (DFS(i + 1, j, d - 1, s1, s2, dp) == 1) v = 1;
                } else if (d == 0 && j < s2.Length && s1[i] == s2[j]) {
                    if (DFS(i + 1, j + 1, d, s1, s2, dp) == 1) v = 1;
                }
            }
        }
        
        if (j < s2.Length) {
            if (s2[j] - '0' <= 9) {
                int val = 0, c = 0;
                while (j + c < s2.Length && c < 3 && s2[j + c] - '0' <= 9) {
                    val = val * 10 + (s2[j + c] - '0');
                    c++;
                    if (DFS(i, j + c, d + val, s1, s2, dp) == 1) v = 1;
                }
            } else {
                if (d < 0) {
                    if (DFS(i, j + 1, d + 1, s1, s2, dp) == 1) v = 1;
                }
            }
        }
        
        return dp[i, j, d + 1000] = v;
    }
}