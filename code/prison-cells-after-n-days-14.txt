class Solution {
public:
    vector<int> prisonAfterNDays(vector<int>& cells, int N) {
        vector<string> unique;
        while (N > 0) {
            N--;
            
            vector<int> newCells(cells.size(), 0);
            string str = getString(cells);
            unique.push_back(str);
            for (int i = 1; i < cells.size() - 1; ++i) {
                if (cells[i-1] == cells[i+1]) newCells[i] = 1;
                else newCells[i] = 0;
            }
            
            auto it = find(unique.begin(), unique.end(), getString(newCells)); 
            if (it != unique.end()) {
                int loop = unique.end() - it;
                int idx = N%loop;
                return getVector(*(it + idx));
            }
        
            cells = newCells;
        }
        
        return cells;
    }
    
private:
    string getString(vector<int>& cells) {
        string res;
        for (auto& c : cells) {
            res += to_string(c);
        }
        return res;
    }
    
    vector<int> getVector(string& str) {
        vector<int> res;
        for (auto& ch : str) {
            res.push_back(ch - '0');
        }
        return res;
    }
};