class Solution {
public:
    vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {
        const int n = adjacentPairs.size();
        unordered_map<int, vector<int>> g;
        for(auto& v: adjacentPairs){
            g[v[0]].push_back(v[1]);
            g[v[1]].push_back(v[0]);
        }
        
        int par = g.begin()->first;
        vector<int> left, right;
        auto& neib = g[par];
        dfs(g, neib[0], par, left);
        if(neib.size() > 1) dfs(g, neib[1], par, right);
        reverse(left.begin(), left.end());
        left.push_back(par);
        left.insert(left.end(), right.begin(), right.end());
        return left;
    }
    
    void dfs(unordered_map<int, vector<int>>& g, int i, int par, vector<int>& res){
        res.push_back(i);
        for(auto j:g[i]){
            if(j != par) dfs(g, j, i, res);
        }
    }
};