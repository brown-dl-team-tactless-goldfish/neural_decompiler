class Solution {
public:
    int mod=1e9+7;
    map<pair<int,int>,long long> mp;
    long long solve(int i,int primes,vector<int>& freq){
        if(i<0)return 1;
        if(mp.find({i,primes})!=mp.end())return mp[{i,primes}];
        int x=i;
        int z=primes;
        long long ans=solve(i-1,primes,freq)%mod;
        if(x==1 || freq[i]==0)return mp[{i,primes}]=ans;
        bool call=true;
        for(int j=2;j*j<=x;j++){
            
            while(x%j==0){
                x/=j;
                if(primes&(1<<j))primes^=(1<<j);
                else {
                    call=false;
                    break;
                }
            }
            if(!call)break;
        }
        if(call && x!=1){
            if(primes&(1<<x))primes^=(1<<x);
            else call=false;
        }
        if(call)ans=(ans%mod+(freq[i]%mod*solve(i-1,primes,freq)%mod)%mod)%mod;
        return mp[{i,z}]=ans;
    }
    int numberOfGoodSubsets(vector<int>& nums) {
        std::ios::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
        mp.clear();
        int n=nums.size();
        int ones=1;
        vector<int> freq(31,0);
        for(int i=0;i<n;i++){
            if(nums[i]==1)ones=(ones%mod*2)%mod;
            freq[nums[i]]++;
        }
        int primes=0;
        for(int i=2;i<=30;i++){
            int x=i;
            bool add=true;
            for(int j=2;j<=x-1;j++){
                if(x%j==0){
                    add=false;
                    break;
                }
            }
            if(add)primes|=(1<<i);
        }
        long long ans=solve(30,primes,freq);
        ans-=1;
        return (ans*ones)%mod;
    }
};