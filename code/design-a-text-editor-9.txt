class TextEditor {
public:
	// linked list node structure
    struct Node
    {
		char data;
        Node *prev, *next;
        Node(){ prev = next = NULL;}
        Node(char ch){ prev = next = NULL; data = ch; }
    };
    
    Node *head, *curr;
    int len;
	
    TextEditor(){
		// initializing dummy node
        head = new Node('#');
        curr = head;
		len = 0;
    }

    
    void addText(string text) {
        Node *next = curr->next;
        for(char ch : text)
        {
            curr->next = new Node(ch);
            curr->next->prev = curr;
            curr = curr->next;
            len++;
        }
        curr->next = next;
        if(next) next->prev = curr;
    }
    
    int deleteText(int k) {
        int cnt = 0;
        while(k && (curr != NULL) && (curr->data != '#'))
        {
            k--;
            Node *prev = curr->prev;
            prev->next = curr->next;
            if(curr->next)
                curr->next->prev = prev;
            curr = prev;
            cnt++; len--;
        }
        return cnt;
    }
    
    string getVal()
    {
        string s;
        int k = min(len, 10);
        Node *temp = curr;
        while(k && (temp != NULL) && (temp->data != '#')){
            k--;
            s.push_back(temp->data);
            temp = temp->prev;
        }
        reverse(s.begin(), s.end());
        return s;
    }
    string cursorLeft(int k)
    {
  
        while(k && (curr != NULL) && (curr->data != '#')){
            k--;
            curr = curr->prev;
        }
        return getVal();
    }
    
    string cursorRight(int k)
    {
        while(k && (curr != NULL) ){
            k--;
            if(curr->next) curr = curr->next;
            else break;
        }
        return getVal();
    }
};
