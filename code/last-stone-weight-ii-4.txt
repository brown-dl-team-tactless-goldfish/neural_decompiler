class Solution {
public:
    int comp(int index,int this_sum,int req,vector<int>&stones,vector<vector<int>>&dp){
        if(this_sum>req)
            return -1;
        if(this_sum==req)
            return req;
        if(index<0)
            return this_sum;
        int rem = req-this_sum;
        if(dp[index][rem]!=INT_MIN)
            return dp[index][rem];
        
        int ans1 = comp(index-1,this_sum+stones[index],req,stones,dp);
        int ans2 = comp(index-1,this_sum,req,stones,dp);
        
        dp[index][rem]=max(ans1,ans2);
        
        return dp[index][rem];
    }
    int lastStoneWeightII(vector<int>& stones) {
        int sum = 0;
        for(auto e:stones){
            sum+=e;
        }
        int req = sum/2;
        vector<vector<int>>dp(stones.size()+1,vector<int>(req+1,INT_MIN));
        int max_sum  = comp(stones.size()-1,0,req,stones,dp);
        return abs(sum-max_sum-max_sum);
    }
};