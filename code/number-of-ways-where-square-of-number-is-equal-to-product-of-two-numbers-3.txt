class Solution
{
public:
    int count(vector<int> &arr, long long int x, int n)
    {

        auto low = lower_bound(arr.begin(), arr.end(), x);
        if (low == arr.end() || *low != x)
            return 0;
        auto high = upper_bound(low, arr.end(), x);
        return high - low;
    }

    int numTriplets(vector<int> &nums1, vector<int> &nums2)
    {
        int m = nums1.size();
        int n = nums2.size();
        int i, j;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int trip = 0;
        for (i = 0; i < m; i++)
        {
            long long toSearch = (long long)nums1[i] * (long long)nums1[i];
            for (j = 0; j < n; j++)
            {
                long long int num1 = nums2[j];
                if (toSearch % num1 == 0)
                {

                    int c = count(nums2, toSearch / num1, n);
                    if (c > 0)
                        trip += c;
                    if (num1 * num1 == toSearch)
                        trip -= 1;
                }
            }
        }
        for (i = 0; i < n; i++)
        {
            long long toSearch = (long long)nums2[i] * (long long)nums2[i];
            for (j = 0; j < m; j++)
            {
                long long int num1 = nums1[j];
                if (toSearch % num1 == 0)
                {

                    int c = count(nums1, toSearch / num1, m);
                    if (c > 0)
                        trip += c;
                    if (num1 * num1 == toSearch)
                        trip -= 1;
                }
            }
        }
        return trip / 2;
    }
};