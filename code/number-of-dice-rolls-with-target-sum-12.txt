class Solution {
public:
    int numRollsToTarget(int d, int f, int target) {
        vector<int> pre(target+1);
        
		# initialize pre array (only use 1 die)
        fill(pre.begin()+1, pre.begin()+min(f,target)+1, 1);
		
        # loop through using 2 die to d die
        for (int i = 1; i < d; i++) {
            # initial array for every row
            # this is important, we need to set array to 0 everytime
            vector<int> cur(target+1);
            
			# loop from 1 to target
            for (int j = 1; j <= target; j++) {
                
				# loop from faces number 1 to min(f, target)
                for (int k = 1; k <= min(f,target); k++) {
                    if (k <= j) {
                        
						# state transfer function
                        # similar to coin change 2 problem
                        # dp[i][j] stands for using i die to make sum = j
                        # dp[i][j] = sum(dp[i][j-1], ..., dp[i][j-f])
                        # inorder to save space, we only use 2 1-d array to record the state
                        cur[j] = (cur[j] + pre[j-k]) % 1000000007;
                    }
                }
            }
            swap(pre, cur);
        }
        return pre[target]; 
    }
};