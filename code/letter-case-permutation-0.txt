void __letterCasePermutation(char *s, int len, int j, char **rt, int *count, char *str)  // fill jth char in tmp str arr
{
        if (j == len) {
                char *new = malloc(sizeof(char) * (len + 1));
                memcpy(new, str, len);
                new[len] = '\0';
                
                rt[(*count)++] = new;
                return;
        }
        
        char c = *(s + j);
        if (!(c >= '0' && c <= '9')) {
                char c2;
                if (c >= 'a')
                        c2 = c - ('a' - 'A');
                else
                        c2 = c + ('a' - 'A');
                
                str[j] = c2;
                __letterCasePermutation(s, len, j + 1, rt, count, str);
        } 
        str[j] = c;
        __letterCasePermutation(s, len, j + 1, rt, count, str);
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** letterCasePermutation(char * s, int* returnSize)
{
        char *p = s;
        
        int total = 1;
        int len = 0;

        while (*p) {
                if (!(*p >= '0' && *p <= '9'))
                        total *= 2;
                p++;
                len++;
        }

        char **rt = malloc(sizeof(char *) * total);
        
        int count = 0;
        char *str = malloc(sizeof(char) * len + 1); //tmp str arr to form a new string 
        __letterCasePermutation(s, len, 0, rt, &count, str);

        *returnSize = total;
        return rt;
}