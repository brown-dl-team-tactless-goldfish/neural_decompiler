

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
void swap(int *p,int *q){
    *p=*p^*q;
    *q=*p^*q;
    *p=*q^*p;
}

void sort(int *arr,int n){
    int flag=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<n-1-i;j++){
            if(arr[j]>arr[j+1])
                swap(&arr[j],&arr[j+1]);
                  flag=1;}
        if(flag==0)
            break;
    }
}
int* relativeSortArray(int* arr1, int n1, int* arr2, int n2, int* returnSize){
    * returnSize=n1;
    int *output=(int*)malloc(sizeof(int)*n1);
    int p=0;
    sort(arr1,n1);
    int j;
    int count=0;
    for(int i=0;i<n2;i++)
        for(j=0;j<n1;j++)
            if(arr2[i]==arr1[j])
            {
                output[p]=arr1[j];
                arr1[j]=-1;/*making all elements in arr1 -1 which are present in arr2(as range of numbers in arr1 and arr2 is 0 to 1000)*/
                p++;
            }
    for(int i=0;i<n1;i++)
        if(arr1[i]!=-1)
            output[p++]=arr1[i];
        
    return output;
}