public class Solution {
    int MOD = 1000000007;
    long[,] Counts;
	
    public int CountPaths(int[][] grid) {
        this.Counts = new long[grid.Length, grid[0].Length];
        
        long count = 0;
        for (int i = 0; i < grid.Length; i++) {
            for (int j = 0; j < grid[0].Length; j++) {
                if (this.Counts[i, j] == 0)
                    this.DFS(grid, i, j);
                
                count += (int)(this.Counts[i, j] % MOD);
            }
        }
        
        return (int)(count % MOD);
    }
    
    private long DFS(int[][] grid, int r, int c) {
        if (r < 0 || c < 0 || r > grid.Length || c > grid[0].Length)
            return 0;
        
        if (this.Counts[r, c] == 0) {
            long count = 1;
            if (r + 1 < grid.Length && grid[r][c] < grid[r + 1][c])
                count += this.DFS(grid, r + 1, c);

            if (c + 1 < grid[0].Length && grid[r][c] < grid[r][c + 1])
                count += this.DFS(grid, r, c + 1);

            if (r - 1 >= 0 && grid[r][c] < grid[r - 1][c])
                count += this.DFS(grid, r - 1, c);

            if (c - 1 >= 0 && grid[r][c] < grid[r][c - 1])
                count += this.DFS(grid, r, c - 1);

            this.Counts[r, c] = count % MOD;
        }

        return this.Counts[r, c];
    }
}