class Solution {
public:
    int totalStrength(vector<int>& strength) {
        const int mod = 1e9 + 7;
        int len = strength.size();
        vector<long long> prefix(len);
        int i, j;
        
        prefix[0] = strength[0];
        for(i = 1; i < len; i++){
            prefix[i] = prefix[i - 1] + strength[i];
            prefix[i] %= mod;
        }
        
        for(i = 1; i < len; i++){
            prefix[i] = prefix[i - 1] + prefix[i];
            prefix[i] %= mod;
        }
        
        vector<pair<int, int>> stack;
        vector<int> right(len);
        vector<int> left(len);
        
        for(i = 0; i < len; i++){
            while(!stack.empty() && stack.back().first > strength[i]){
                right[stack.back().second] = i - stack.back().second - 1;
                stack.pop_back();
            }
            stack.push_back(make_pair(strength[i], i));
        }
        while(!stack.empty()){
            right[stack.back().second] = len - 1 - stack.back().second;
            stack.pop_back();
        }
        
        for(i = len - 1; i >= 0; i--){
            while(!stack.empty() && stack.back().first >= strength[i]){
                left[stack.back().second] = stack.back().second - i - 1;
                stack.pop_back();
            }
            stack.push_back(make_pair(strength[i], i));
        }
        for(i = stack.size() - 1; i >= 0; i--){
            left[stack[i].second] = stack[i].second;
        }
        
        long long ans = 0;
        
        for(i = 0; i < len; i++){
            long long minim = strength[i];
            int l = i - left[i];
            int r = i + right[i];
            long long s = i >= 1 ? prefix[i - 1] : 0;
            long long p = (prefix[r] - s) * (i - l + 1);
            p %= mod;
            long long q;
            if(i == 0){
                q = 0;
            }
            else{
                if(l >= 2){
                    q = prefix[i - 1] - prefix[l - 2];
                }
                else{
                    q = prefix[i - 1];
                }
            }
            q = q * (r - i + 1);
            q %= mod;
            p = p - q;
            if(p < 0){
                p += mod;
            }
            p *= minim;
            p %= mod;
            ans += p;
            ans %= mod;
        }
        return ans;
    }
};