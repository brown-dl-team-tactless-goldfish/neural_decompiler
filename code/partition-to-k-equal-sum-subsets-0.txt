
int cmp(const void* a, const void* b){
    return *(int*)b - *(int*)a;
}

bool DFS(int* nums, bool* visited ,int cur, int n, int k, int group, long long target, long long sum){
    if(group == k)
        return true;
    if(sum > target)
        return false;
    if(sum == target){
        //let begin from group, from 0 also OK.
        return DFS(nums, visited, group, n, k, group+1 , target, 0);
    }
    int last = -1;   
    for(int i = cur; i < n; i++){
        if( visited[i] == true)
            continue;
        if(nums[i] == last)
           continue;
        visited[i] = true;
        if( DFS( nums, visited,i+1, n, k, group, target, sum+nums[i] ) == true )
            return true;    
        visited[i] = false; 
        last = nums[i];
    }
    return false;
}

bool canPartitionKSubsets(int* nums, int numsSize, int k){
    int i;
    long long sum = 0;
    int n = numsSize;
    for(i = 0; i < n; i++){
        sum += nums[i];
    }
    if(sum % k != 0)
        return false;
    long long target = sum/k;
    qsort(nums, n, sizeof(int), cmp);
    if(nums[0] > target)
        return false;
    bool visited[16] = {false}; 
    return  DFS(nums, visited, 0, n, k, 0, target, 0);
}