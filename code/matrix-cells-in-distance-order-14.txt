from collections import deque

class Solution(object):
    def valid_cell(self, r, c, R, C):
        return 0 <= r < R and 0 <= c < C
    
    def allCellsDistOrder(self, R, C, r0, c0):
        """
        :type R: int
        :type C: int
        :type r0: int
        :type c0: int
        :rtype: List[List[int]]
        """
        queue = deque([(r0, c0)])
        visited = set()
        visited.add((r0, c0))
        cell_order = [[r0, c0]]
        
        while len(queue) > 0:
            r, c = queue.pop()
            
            for next_r, next_c in [(r+1,c),(r-1,c),(r,c+1),(r,c-1)]:
                if self.valid_cell(next_r, next_c, R, C) and (next_r, next_c) not in visited:
                    visited.add((next_r, next_c))
                    queue.appendleft((next_r, next_c))
                    cell_order.append([next_r, next_c])
                    
        return cell_order