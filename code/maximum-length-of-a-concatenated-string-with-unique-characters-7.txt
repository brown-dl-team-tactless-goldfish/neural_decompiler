int MAX(int a, int b){ return(a>b?a:b); }
void DFS(int* maskArr, int cnt, int arrSize, int currMask, int* ans){
    if(cnt == arrSize){
        (*ans) = MAX((*ans), __builtin_popcount(currMask));
        return;
    }
    bool passFlag = (currMask & maskArr[cnt])? false : true;
    currMask = (currMask & maskArr[cnt])? currMask : (currMask | maskArr[cnt]);
    DFS(maskArr, cnt+1, arrSize, currMask, ans);
    if(passFlag){ /* ignore maskArr[cnt] to check the next */
        currMask ^= maskArr[cnt];
        DFS(maskArr, cnt+1, arrSize, currMask, ans);
    }
}

int maxLength(char ** arr, int arrSize){
    int* mask = (int*)calloc(arrSize, sizeof(int));
    for(int i = 0; i < arrSize; i++){
        int len = strlen(arr[i]);
        for(int j = 0; j < len; j++){
            if(mask[i] & (1 << (arr[i][j]-'a'))){
                mask[i] = 0;/* repeat char */
                break;
            }
            mask[i] |= (1 << (arr[i][j]-'a'));
        }
    }
    int ans = 0;
    DFS(mask, 0, arrSize, 0, &ans);
    return ans;
}