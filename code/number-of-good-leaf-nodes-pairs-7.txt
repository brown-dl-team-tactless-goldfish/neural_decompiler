/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void f(TreeNode* root, bool isl, unordered_map<int,int>&l, unordered_map<int,int>& r, int h, const int& distance, int& ret) {
        if(root == nullptr) {
            return;
        }
        if(root->left == nullptr && root->right == nullptr) {
            if(isl) {
                l[h]++;
            } else {
                r[h]++;
            }
            return; 
        }
        unordered_map<int,int> _l,_r;
        f(root->left,true,_l,r,h+1,distance,ret);
        f(root->right,false,l,_r,h+1,distance,ret);
        for(auto x : _l) {
            for(auto y : _r) {
                if(x.first+y.first - 2*h<=distance) {
                    ret += x.second * y.second;
                }
            }
        }
        if(isl) {
            for(auto y : _r) {
                l[y.first] += y.second;
            }
            for(auto y : _l) {
                l[y.first] += y.second;
            }
        } else {
            for(auto y : _l) {
                r[y.first] += y.second;
            }
            for(auto y : _r) {
                r[y.first] += y.second; 
            }
        }
    }
    int countPairs(TreeNode* root, int distance) {
        unordered_map<int,int> l,r;
        int ret = 0;
        f(root,true,l,r,0,distance,ret);
        return ret; 
    }
};