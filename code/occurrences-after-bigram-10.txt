/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#define RESLEN 400
#define WORD 10
char ** findOcurrences(char * text, char * first, char * second, int* returnSize){
    char** opt = NULL;
    int len, count, i, j, lst, wordlen;
    *returnSize = 0;
    opt = (char**)malloc(RESLEN * sizeof(char*));
    if (opt == NULL) {
        return NULL;
    }
    // memory assignment
    for (i = 0; i < RESLEN; i++) {
        opt[i] = (char*)malloc((WORD + 1) * sizeof(char));
        if (opt[i] == NULL) {
            for (j = 0; j < i; j++) {
                free(opt[j]);
            }
            free(opt);
            return NULL;
        }
    }
    
    char *token, *f, *s;
    token = strtok(text, " ");
    f = NULL;
    s = NULL;
    lst = 0;
    // match the pattern and swap the value of each variables
    // feed the valid word into the list
    while (token != NULL) {
        count = 0;
        if ((f != NULL) && (s!= NULL) && (strcmp(first, f) == 0) && (strcmp(second, s) == 0)) {
            len = strlen(token);
            for (i = 0; i < len; i++) {
                opt[lst][i] = token[i];
                count++;
            }
            opt[lst][count] = '\0';
            lst++;
        }
        f = s;
        s = token;
        token = strtok(NULL, " ");
    }
    *returnSize = lst;
    return opt;
}

