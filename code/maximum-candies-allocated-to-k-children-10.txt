class Solution {
public:
    int maximumCandies(vector<int>& candies, long long k) {
        // corner case
        long long sum = 0;
        for(auto c : candies){
            sum += c;
        }
        if(sum < k){
            return 0;
        }
        // binary search
        long long start = 1, end = *max_element(candies.begin(), candies.end());
        while(start < end){
            long long mid = start + (end - start + 1) / 2; // since we want to get the upper bound of the answers(maximum)
            long long count = numKidsAllocatedWithGivenCandyNum(candies, mid);
            if(count < k){
                // the number is too large, mid cannot be the answer
                end = mid - 1; 
            }
            else{
                // the number is too small, but could be the answer
                start = mid;
            }
        }
        
        return start;
    }
    
    long long numKidsAllocatedWithGivenCandyNum(vector<int>& candies, int val){
        long long count = 0;
        for(auto candy : candies){
            count += candy / val;
        }
        return count;
    }
 
};