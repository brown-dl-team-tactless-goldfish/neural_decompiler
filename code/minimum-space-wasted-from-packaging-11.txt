class Solution {
public:
    int minWastedSpace(vector<int>& packages, vector<vector<int>>& boxes) {
        sort(begin(packages), end(packages)); 
        long ans = LONG_MAX; 
        for (auto& box : boxes) {
            sort(begin(box), end(box)); 
            if (packages.back() <= box.back()) {
                int kk = 0; 
                long val = 0; 
                for (long x : box) {
                    long k = upper_bound(begin(packages), end(packages), x) - begin(packages); 
                    val += (long) (k - kk) * x; 
                    kk = k; 
                }
                ans = min(ans, val); 
            }
        }
        return ans < LONG_MAX ? (ans - accumulate(begin(packages), end(packages), (long) 0)) % 1'000'000'007 : -1; 
    }
};