const int N = 1e5 + 10;
int in[N];
set<int> g[N];

class Solution {
public:
    bool isPossible(int n, vector<vector<int>>& edges) {
        for(int i = 0; i <= n; i++) { 
            in[i] = 0; 
            g[i].clear();
        }
        
        for(vector<int>& e : edges) {
            in[e[0]]++;
            in[e[1]]++;
            g[e[0]].insert(e[1]);
            g[e[1]].insert(e[0]);
        }
        
        vector<int> nodes;
        for(int i = 1; i <= n; i++) {
            if(in[i] % 2 == 1) {
                nodes.push_back(i);
            }
        }
        
        if(nodes.size() == 0) {
            return true;
        }
        
        if(nodes.size() > 4 || nodes.size() == 1 || nodes.size() == 3){
            return false;
        }   
        
        if(nodes.size() == 2) {
            if(g[nodes[0]].find(nodes[1]) == g[nodes[0]].end()) {
                return true;
            }
            for(int i = 1; i <= n; i++) {
                if(i == nodes[0] || i == nodes[1]) {
                    continue;
                }
                if(g[i].find(nodes[0]) == g[i].end() && g[i].find(nodes[1]) == g[i].end()) {
                    return true;
                }
            }
        } else {
            do {
                int u = nodes[0], v = nodes[1], x = nodes[2], y = nodes[3];
                if(g[u].find(v) == g[u].end() && g[x].find(y) == g[x].end()) {
                    return true;
                }
            } while (std::next_permutation(nodes.begin(), nodes.end()));
        }
        return false;
    }
};