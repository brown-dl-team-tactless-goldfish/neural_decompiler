    int findGoodStrings(int n, string s1, string s2, string evil) {
        int l1 = s1.length(), l2 = evil.length(), mod = 1e9 + 7;
        vector<vector<vector<vector<long>>>> dp(l1, vector<vector<vector<long>>>(l2, vector<vector<long>>(2, vector<long>(2, -1))));

        vector<int> lps(l2, 0);
        for(int i = 1, j = 0; i < l2; i++) {
            if(evil[i] == evil[j]) {
                lps[i] = ++j;
            } else if(j != 0) {
                j = lps[j-1];
                i--;
            } 
        }
        
        function<long(int, int, int, int)> dfs = [&](int i, int j, int e1, int e2) {
            if(j == l2) return (long)0;
            if(i == l1) return (long)1;
            if(dp[i][j][e1][e2] != -1) return dp[i][j][e1][e2];

            long res = 0;
            for(char c = 'a'; c <= 'z'; c++) {
                int nxt_j = j;
                while(c != evil[nxt_j] && nxt_j != 0) nxt_j = lps[nxt_j-1];
                if(c == evil[nxt_j]) nxt_j++;
                
                if(e1 && e2 && c >= s1[i] && c <= s2[i]) {
                    res += dfs(i+1, nxt_j, c == s1[i], c == s2[i]);
                } else if(!e1 && e2 && c <= s2[i]) {
                    res += dfs(i+1, nxt_j, 0, c == s2[i]);
                } else if(e1 && !e2&& c >= s1[i]) {
                    res += dfs(i+1, nxt_j, c == s1[i], 0);
                } else if(!e1 && !e2) {
                    res += dfs(i+1, nxt_j, 0, 0);
                }
            }
            dp[i][j][e1][e2] = res % mod;
            return dp[i][j][e1][e2];
        };
        
        return dfs(0, 0, 1, 1);
    }