/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int cmpfunc (const void* a, const void* b) {
    return *(int*)a - *(int*)b;
}

void inorder_traversal (struct TreeNode* root, int *arr, int *count) {
    if (!root)
        return;
    inorder_traversal(root->left, arr, count);
    arr[(*count)++] = root->val;
    inorder_traversal(root->right, arr, count);
}

int* getAllElements(struct TreeNode* root1, struct TreeNode* root2, int* returnSize){
    if (!root1 && !root2)
        return NULL;

    int i, count = 0;
    int *arr = (int*)malloc(sizeof(int) * 10002);

    inorder_traversal(root1, arr, &count);
    inorder_traversal(root2, arr, &count);

    int *result = (int*)malloc(sizeof(int) * count);

    for (i = 0; i < count; i++)
        result[i] = arr[i];

    free(arr);

    qsort(result, count, sizeof(int), cmpfunc);

    *returnSize = count;
    return result;
}