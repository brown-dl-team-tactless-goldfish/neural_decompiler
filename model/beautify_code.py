import re

def beautify_c_code(c_code, indent_size):
    """
    Given raw C code generated by the model, returns a beautified, indented version of it.

    ### Params
    c_code: str - a string containing the raw C code.
    indent_size: int - the number of spaces to use for indenting.

    ### Returns
    str - the beautified code.
    """
    # adding newlines after ; { }
    c_code = re.sub(r'(;|{|})', r'\1\n', c_code)

    # removing spaces before * ) ; ,
    c_code = re.sub(r' (\*|\)|;|,)', r'\1', c_code)
    # removing spaces after (
    c_code = re.sub(r'\( ', r'(', c_code)

    # removing spaces between operators (+=, -=, *=, /=, ==, ++, --)
    c_code = re.sub(r'(\+|\-|\*|/|=) =', r'\1=', c_code)
    c_code = re.sub(r' (\+|\-) \1', r'\1\1', c_code)
    
    # removing spaces around array indexing.
    # ex. var_0 [ var_1 ] --> var_0[var_1]
    c_code = re.sub(r'(var_\d+) \[ (var_\d+) \]', r'\1[\2]', c_code)

    # adding spaces between multiplication that were removed above
    # ex. var_0* var_1 --> var_0 * var_1
    c_code = re.sub(r'(var_\d+)\* (var_\d+)', r'\1 * \2', c_code)

    # get rid of space between function name and open bracket (
    # ex. func_0 (int var_0) --> func_0(int var_0)
    c_code = re.sub(r'(func_\d+) \(', r'\1(', c_code)

    # removing newlines after ; inside for loop
    # ex. 
    # for (int var_0 = <CNUM>;
    # var_0 < var_1;
    # var_0++) {
    # becomes
    # for (int var_0 = <CNUM>; var_0 < var_1; var_0++) {
    c_code = re.sub(r'for \(([^\)]*);\s+([^\)]*);\s+([^\)]*)\)', r'for (\1; \2; \3)', c_code)

    # indenting code
    indent_level = 0 # the running number of indents
    output_lines = []
    for line in c_code.split('\n'):
        if '{' in line: # if we have open bracket, increment indent level
            output_lines.append(' ' * indent_size * indent_level + line.strip())
            indent_level += 1
        elif '}' in line: # if we have close bracket, decrement indent level
            indent_level -= 1
            output_lines.append(' ' * indent_size * indent_level + line.strip())
        else:
            output_lines.append(' ' * indent_size * indent_level + line.strip())

    return '\n'.join(output_lines)