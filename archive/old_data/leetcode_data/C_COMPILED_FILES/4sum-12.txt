#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdint.h>
#include<math.h>
int func_1(int *var_0, int *var_1)
{
return *var_0 - *var_1;
}
void func_3(int *var_7, int var_8, int ***var_10, int *var_13, int var_15, int var_2)
{
int var_3, var_5, var_9;
long var_14;
for (var_3 = 0; var_3 < var_8 - 2; var_3++) {
if (var_3 > 0 && var_7[var_3] == var_7[var_3 - 1])
continue;
else if ((long)var_7[var_3] + var_7[var_3 + 1] + var_7[var_3 + 2] > var_15)
return;
else if ((long)var_7[var_3] + var_7[var_8 - 2] + var_7[var_8 - 1] < var_15)
continue;
var_5 = var_3 + 1;
var_9 = var_8 - 1;
while (var_5 < var_9) {
if (var_5 > var_3 + 1 && var_7[var_5] == var_7[var_5 - 1]) {
var_5++;
continue;
}
var_14 = (long)var_7[var_5] + var_7[var_3] + var_7[var_9];
if (var_14 > var_15) {
var_9--;
} else if (var_14 < var_15) {
var_5++;
} else {
int *var_6 = (int *)malloc(sizeof(int) * 4);
var_6[0] = var_2;
var_6[1] = var_7[var_3];
var_6[2] = var_7[var_5];
var_6[3] = var_7[var_9];
(*var_10)[(*var_13)++] = var_6;
var_5++;
}
}
}
}
int** func_2(int* var_7, int var_8, int var_15, int* var_12, int** var_11)
{
*var_12 = 0;
if (var_8 < 4)
return NULL;
qsort(var_7, var_8, sizeof(int), func_1);
int var_3, var_4;
int var_13;
int **var_10 = (int **)malloc(sizeof(int *) * 2000);
for (var_3 = 0; var_3 < var_8 - 3; var_3++) {
if (var_3 > 0 && var_7[var_3] == var_7[var_3 - 1])
continue;
else if ((long)var_7[var_3] + var_7[var_3 + 1] + var_7[var_3 + 2] + var_7[var_3 + 3] > var_15)
break;
else if ((long)var_7[var_3] + var_7[var_8 - 3] + var_7[var_8 - 2] + var_7[var_8 - 1] < var_15)
continue;
func_3(var_7 + var_3 + 1, var_8 - var_3 - 1, &var_10, var_12, var_15 - var_7[var_3], var_7[var_3]);
}
if (!*var_12)
return NULL;
*var_11 = (int *)malloc(sizeof(int) * *var_12);
for (var_3 = 0; var_3 < *var_12; var_3++) {
(*var_11)[var_3] = 4;
}
return var_10;
}