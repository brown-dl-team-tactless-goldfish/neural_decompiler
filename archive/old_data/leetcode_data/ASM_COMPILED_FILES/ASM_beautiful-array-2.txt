func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movl    %edi, -52(%rbp)
        movq    %rsi, -64(%rbp)
        movl    -52(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L2
        movl    -52(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        jmp     .L3
.L2:
        movl    -52(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        cmpl    $1, -52(%rbp)
        jne     .L4
        movq    -16(%rbp), %rax
        movl    $1, (%rax)
        jmp     .L5
.L4:
        movl    $0, -20(%rbp)
        movl    -52(%rbp), %eax
        addl    $1, %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movq    -64(%rbp), %rax
        movq    %rax, %rsi
        movl    %edx, %edi
        call    func_1
        movq    %rax, -32(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L6
.L7:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        leal    (%rax,%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -16(%rbp), %rax
        addq    %rcx, %rax
        subl    $1, %edx
        movl    %edx, (%rax)
        addl    $1, -4(%rbp)
.L6:
        movl    -52(%rbp), %eax
        addl    $1, %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        cmpl    %eax, -4(%rbp)
        jl      .L7
        movl    -52(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, %edx
        movq    -64(%rbp), %rax
        movq    %rax, %rsi
        movl    %edx, %edi
        call    func_1
        movq    %rax, -40(%rbp)
        movl    $0, -8(%rbp)
        jmp     .L8
.L9:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -52(%rbp), %eax
        addl    $1, %eax
        movl    %eax, %ecx
        shrl    $31, %ecx
        addl    %ecx, %eax
        sarl    %eax
        movl    %eax, %ecx
        movl    -8(%rbp), %eax
        addl    %ecx, %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -16(%rbp), %rax
        addq    %rcx, %rax
        addl    %edx, %edx
        movl    %edx, (%rax)
        addl    $1, -8(%rbp)
.L8:
        movl    -52(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        cmpl    %eax, -8(%rbp)
        jl      .L9
.L5:
        movl    -52(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -64(%rbp), %rax
        addq    %rax, %rdx
        movq    -16(%rbp), %rax
        movq    %rax, (%rdx)
        movq    -16(%rbp), %rax
.L3:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movl    %edi, -36(%rbp)
        movq    %rsi, -48(%rbp)
        movl    -36(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        movq    -48(%rbp), %rax
        movl    -36(%rbp), %edx
        movl    %edx, (%rax)
        cmpl    $1, -36(%rbp)
        jne     .L11
        movq    -16(%rbp), %rax
        movl    $1, (%rax)
        movq    -16(%rbp), %rax
        jmp     .L12
.L11:
        cmpl    $2, -36(%rbp)
        jne     .L13
        movq    -16(%rbp), %rax
        movl    $1, (%rax)
        movq    -16(%rbp), %rax
        addq    $4, %rax
        movl    $2, (%rax)
        movq    -16(%rbp), %rax
        jmp     .L12
.L13:
        movl    -36(%rbp), %eax
        addl    $1, %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L14
.L15:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    $0, (%rax)
        addl    $1, -4(%rbp)
.L14:
        movl    -36(%rbp), %eax
        cmpl    -4(%rbp), %eax
        jge     .L15
        movq    -24(%rbp), %rdx
        movl    -36(%rbp), %eax
        movq    %rdx, %rsi
        movl    %eax, %edi
        call    func_1
        movq    %rax, -16(%rbp)
        movq    -48(%rbp), %rax
        movl    -36(%rbp), %edx
        movl    %edx, (%rax)
        movl    $0, -8(%rbp)
        jmp     .L16
.L18:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        je      .L17
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
.L17:
        addl    $1, -8(%rbp)
.L16:
        movl    -8(%rbp), %eax
        cmpl    -36(%rbp), %eax
        jl      .L18
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -16(%rbp), %rax
.L12:
        leave
        ret
