func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -4(%rbp)
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -8(%rbp)
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L4
        movl    -4(%rbp), %eax
        addl    $1, %eax
        jmp     .L3
.L4:
        movl    -8(%rbp), %eax
        addl    $1, %eax
.L3:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        movq    %rdx, -24(%rbp)
        movq    %rcx, -32(%rbp)
        movq    %r8, -40(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L10
        cmpl    $0, -12(%rbp)
        jne     .L8
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -24(%rbp), %rax
        movq    (%rax), %rdx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        subq    $4, %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -40(%rbp), %rax
        movb    $1, (%rax)
        jmp     .L5
.L8:
        movl    -12(%rbp), %eax
        leal    -1(%rax), %esi
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -40(%rbp), %rdi
        movq    -32(%rbp), %rcx
        movq    -24(%rbp), %rdx
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_1
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        testb   %al, %al
        jne     .L11
        movl    -12(%rbp), %eax
        leal    -1(%rax), %esi
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -40(%rbp), %rdi
        movq    -32(%rbp), %rcx
        movq    -24(%rbp), %rdx
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_1
        movq    -40(%rbp), %rax
        movzbl  (%rax), %eax
        testb   %al, %al
        jmp     .L5
.L10:
        nop
        jmp     .L5
.L11:
        nop
.L5:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    -48(%rbp), %rax
        movl    $0, (%rax)
        cmpq    $0, -40(%rbp)
        jne     .L13
        movl    $0, %eax
        jmp     .L17
.L13:
        movq    $0, -16(%rbp)
        movb    $0, -17(%rbp)
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -8(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L15
.L16:
        movb    $0, -17(%rbp)
        leaq    -17(%rbp), %rdi
        movq    -48(%rbp), %rcx
        leaq    -16(%rbp), %rdx
        movl    -4(%rbp), %esi
        movq    -40(%rbp), %rax
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_1
        addl    $1, -4(%rbp)
.L15:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L16
        movq    -16(%rbp), %rax
.L17:
        leave
        ret
