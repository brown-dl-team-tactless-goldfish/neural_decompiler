func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, %eax
        movq    %rdx, -40(%rbp)
        movl    %ecx, %edx
        movb    %al, -28(%rbp)
        movl    %edx, %eax
        movb    %al, -32(%rbp)
        movzbl  -32(%rbp), %eax
        cmpb    -28(%rbp), %al
        jne     .L2
        movl    $1, %eax
        jmp     .L3
.L2:
        movl    $0, -4(%rbp)
        movsbq  -32(%rbp), %rax
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        subl    $1, %eax
        movb    %al, -5(%rbp)
        jmp     .L4
.L5:
        movsbq  -32(%rbp), %rax
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movsbq  -5(%rbp), %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        movsbl  %al, %ecx
        movsbl  -28(%rbp), %esi
        movq    -40(%rbp), %rdx
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        addl    %eax, -4(%rbp)
        movzbl  -5(%rbp), %eax
        subl    $1, %eax
        movb    %al, -5(%rbp)
.L4:
        cmpb    $0, -5(%rbp)
        jns     .L5
        movl    -4(%rbp), %eax
.L3:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $88, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rdx, -56(%rbp)
        movq    %rcx, -64(%rbp)
        movq    %r8, -72(%rbp)
        movq    %r9, -80(%rbp)
        movl    16(%rbp), %edx
        movl    32(%rbp), %eax
        movl    %esi, %ecx
        movb    %cl, -44(%rbp)
        movb    %dl, -48(%rbp)
        movb    %al, -84(%rbp)
        movzbl  -48(%rbp), %eax
        cmpb    -44(%rbp), %al
        jne     .L7
        movsbl  -84(%rbp), %eax
        addl    $1, %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -80(%rbp), %rax
        leaq    (%rcx,%rax), %rbx
        movq    %rdx, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movb    $0, -17(%rbp)
        jmp     .L8
.L9:
        movsbq  -17(%rbp), %rdx
        movq    24(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %ecx
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movsbq  -17(%rbp), %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movsbl  %cl, %eax
        movl    %eax, (%rdx)
        movzbl  -17(%rbp), %eax
        addl    $1, %eax
        movb    %al, -17(%rbp)
.L8:
        movzbl  -17(%rbp), %eax
        cmpb    -84(%rbp), %al
        jl      .L9
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movzbl  -84(%rbp), %eax
        movl    %eax, %ecx
        addl    $1, %ecx
        movb    %cl, -84(%rbp)
        movsbq  %al, %rax
        salq    $2, %rax
        addq    %rax, %rdx
        movsbl  -44(%rbp), %eax
        movl    %eax, (%rdx)
        movq    -72(%rbp), %rax
        movq    (%rax), %rsi
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -64(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movsbl  -84(%rbp), %eax
        movl    %eax, (%rdx)
        jmp     .L6
.L7:
        movsbq  -84(%rbp), %rdx
        movq    24(%rbp), %rax
        addq    %rax, %rdx
        movzbl  -48(%rbp), %eax
        movb    %al, (%rdx)
        movsbq  -48(%rbp), %rax
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        subl    $1, %eax
        movb    %al, -18(%rbp)
        jmp     .L11
.L12:
        movzbl  -84(%rbp), %eax
        addl    $1, %eax
        movsbl  %al, %r8d
        movsbq  -48(%rbp), %rax
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movsbq  -18(%rbp), %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %eax
        movsbl  %al, %edi
        movsbl  -44(%rbp), %esi
        movq    -80(%rbp), %r9
        movq    -72(%rbp), %r10
        movq    -64(%rbp), %rcx
        movq    -56(%rbp), %rdx
        movq    -40(%rbp), %rax
        subq    $8, %rsp
        pushq   %r8
        pushq   24(%rbp)
        pushq   %rdi
        movq    %r10, %r8
        movq    %rax, %rdi
        call    func_3
        addq    $32, %rsp
        movzbl  -18(%rbp), %eax
        subl    $1, %eax
        movb    %al, -18(%rbp)
.L11:
        cmpb    $0, -18(%rbp)
        jns     .L12
.L6:
        movq    -8(%rbp), %rbx
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %r15
        pushq   %r14
        pushq   %r13
        pushq   %r12
        pushq   %rbx
        subq    $88, %rsp
        movq    %rdi, -88(%rbp)
        movl    %esi, -92(%rbp)
        movq    %rdx, -104(%rbp)
        movq    %rcx, -112(%rbp)
        movq    %r8, -120(%rbp)
        movq    %rsp, %rax
        movq    %rax, %rbx
        movl    -92(%rbp), %eax
        subl    $1, %eax
        movb    %al, -49(%rbp)
        movsbl  -49(%rbp), %esi
        movq    -104(%rbp), %rdx
        movq    -88(%rbp), %rax
        movl    $0, %ecx
        movq    %rax, %rdi
        call    func_1
        movl    %eax, %edx
        movq    -112(%rbp), %rax
        movl    %edx, (%rax)
        movq    -112(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, %rdx
        movq    -120(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -112(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -64(%rbp)
        movzbl  -49(%rbp), %eax
        movsbq  %al, %rdx
        subq    $1, %rdx
        movq    %rdx, -72(%rbp)
        movsbq  %al, %rdx
        movq    %rdx, %r14
        movl    $0, %r15d
        movsbq  %al, %rdx
        movq    %rdx, %r12
        movl    $0, %r13d
        movsbq  %al, %rax
        movl    $16, %edx
        subq    $1, %rdx
        addq    %rdx, %rax
        movl    $16, %ecx
        movl    $0, %edx
        divq    %rcx
        imulq   $16, %rax, %rax
        subq    %rax, %rsp
        movq    %rsp, %rax
        addq    $0, %rax
        movq    %rax, -80(%rbp)
        movq    -112(%rbp), %rax
        movl    $0, (%rax)
        movq    -80(%rbp), %rdi
        movsbl  -49(%rbp), %esi
        movq    -64(%rbp), %r9
        movq    -120(%rbp), %r8
        movq    -112(%rbp), %rcx
        movq    -104(%rbp), %rdx
        movq    -88(%rbp), %rax
        subq    $8, %rsp
        pushq   $0
        pushq   %rdi
        pushq   $0
        movq    %rax, %rdi
        call    func_3
        addq    $32, %rsp
        movq    -64(%rbp), %rax
        movq    %rbx, %rsp
        leaq    -40(%rbp), %rsp
        popq    %rbx
        popq    %r12
        popq    %r13
        popq    %r14
        popq    %r15
        popq    %rbp
        ret
