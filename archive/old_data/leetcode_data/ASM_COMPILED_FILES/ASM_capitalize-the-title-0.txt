func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -12(%rbp)
        cmpl    $2, -12(%rbp)
        jg      .L2
        movl    $0, -4(%rbp)
        jmp     .L3
.L4:
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        movl    %eax, %edi
        call    tolower
        movl    %eax, %ecx
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        addl    $1, -4(%rbp)
.L3:
        movl    -4(%rbp), %eax
        cmpl    -12(%rbp), %eax
        jl      .L4
        jmp     .L8
.L2:
        movq    -32(%rbp), %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        movl    %eax, %edi
        call    toupper
        movl    %eax, %edx
        movq    -24(%rbp), %rax
        movb    %dl, (%rax)
        movl    $1, -8(%rbp)
        jmp     .L6
.L7:
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        movl    %eax, %edi
        call    tolower
        movl    %eax, %ecx
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        addl    $1, -8(%rbp)
.L6:
        movl    -8(%rbp), %eax
        cmpl    -12(%rbp), %eax
        jl      .L7
.L8:
        nop
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        addl    $1, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    -12(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movl    $0, -4(%rbp)
        movl    $0, -8(%rbp)
        jmp     .L10
.L12:
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        cmpb    $32, %al
        jne     .L11
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -40(%rbp), %rax
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        movslq  %eax, %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movb    $32, (%rax)
        movl    -8(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -4(%rbp)
.L11:
        addl    $1, -8(%rbp)
.L10:
        movl    -8(%rbp), %eax
        cmpl    -12(%rbp), %eax
        jl      .L12
        movl    -4(%rbp), %eax
        movslq  %eax, %rdx
        movq    -40(%rbp), %rax
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        movslq  %eax, %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        movq    -24(%rbp), %rax
        leave
        ret
