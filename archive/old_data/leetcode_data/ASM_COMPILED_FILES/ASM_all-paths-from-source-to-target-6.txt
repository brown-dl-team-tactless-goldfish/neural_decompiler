func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movq    %rdx, -56(%rbp)
        movq    %rcx, -64(%rbp)
        movq    %r8, -72(%rbp)
        movl    %r9d, -48(%rbp)
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -64(%rbp), %rax
        movl    %edx, (%rax)
        movq    -56(%rbp), %rax
        movq    (%rax), %rdx
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        subq    $4, %rax
        addq    %rax, %rdx
        movl    -44(%rbp), %eax
        movl    %eax, (%rdx)
        movl    -48(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -44(%rbp)
        jne     .L2
        movq    24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    24(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rcx
        movq    -72(%rbp), %rax
        leaq    (%rcx,%rax), %rbx
        movq    %rdx, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movl    $0, -20(%rbp)
        jmp     .L3
.L4:
        movq    -56(%rbp), %rax
        movq    (%rax), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        leaq    (%rax,%rdx), %rcx
        movq    24(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    (%rcx), %eax
        movl    %eax, (%rdx)
        addl    $1, -20(%rbp)
.L3:
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L4
        movq    32(%rbp), %rax
        movq    (%rax), %rdx
        movq    24(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        subq    $4, %rax
        addq    %rax, %rdx
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        jmp     .L5
.L2:
        movl    $0, -24(%rbp)
        jmp     .L6
.L7:
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %esi
        movl    -48(%rbp), %r8d
        movq    -72(%rbp), %rdi
        movq    -64(%rbp), %rcx
        movq    -56(%rbp), %rdx
        movq    -40(%rbp), %rax
        subq    $8, %rsp
        pushq   32(%rbp)
        pushq   24(%rbp)
        pushq   16(%rbp)
        movl    %r8d, %r9d
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_1
        addq    $32, %rsp
        addl    $1, -24(%rbp)
.L6:
        movl    -44(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    16(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -24(%rbp)
        jl      .L7
.L5:
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        leal    -1(%rax), %edx
        movq    -64(%rbp), %rax
        movl    %edx, (%rax)
        nop
        movq    -8(%rbp), %rbx
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $80, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movq    %rdx, -56(%rbp)
        movq    %rcx, -64(%rbp)
        movq    %r8, -72(%rbp)
        movl    $49664, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movl    $24832, %edi
        call    malloc
        movq    %rax, %rdx
        movq    -72(%rbp), %rax
        movq    %rdx, (%rax)
        movl    -44(%rbp), %eax
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -16(%rbp)
        movl    $0, -20(%rbp)
        movq    -64(%rbp), %rax
        movl    $0, (%rax)
        movl    -44(%rbp), %edi
        movq    -8(%rbp), %rsi
        leaq    -20(%rbp), %rcx
        leaq    -16(%rbp), %rdx
        movq    -40(%rbp), %rax
        subq    $8, %rsp
        pushq   -72(%rbp)
        pushq   -64(%rbp)
        pushq   -56(%rbp)
        movl    %edi, %r9d
        movq    %rsi, %r8
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_1
        addq    $32, %rsp
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, -8(%rbp)
        movq    -64(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -72(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -16(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -8(%rbp), %rax
        leave
        ret
