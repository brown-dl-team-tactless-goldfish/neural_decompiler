func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        cmpl    $0, -28(%rbp)
        jle     .L6
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -8(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L4
.L5:
        movl    -4(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -4(%rbp)
.L4:
        movl    -4(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L5
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -8(%rbp), %eax
        movl    %eax, (%rdx)
        jmp     .L1
.L6:
        nop
.L1:
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movl    %edi, -20(%rbp)
        movl    %esi, -24(%rbp)
        movq    %rdx, -32(%rbp)
        movl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        cmpq    $0, -16(%rbp)
        jne     .L8
        movl    $0, %eax
        jmp     .L9
.L8:
        movl    $0, -4(%rbp)
        jmp     .L10
.L11:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movl    -4(%rbp), %edx
        addl    $1, %edx
        movl    %edx, (%rax)
        addl    $1, -4(%rbp)
.L10:
        movl    -4(%rbp), %eax
        cmpl    -20(%rbp), %eax
        jl      .L11
        movl    -24(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -4(%rbp)
        jmp     .L12
.L13:
        movl    -4(%rbp), %edx
        movq    -16(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_1
        subl    $2, -4(%rbp)
.L12:
        cmpl    $0, -4(%rbp)
        jg      .L13
        movq    -32(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
        movq    -16(%rbp), %rax
.L9:
        leave
        ret
