func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movl    %edx, -20(%rbp)
        movq    %rcx, -32(%rbp)
        movq    %r8, -40(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L6
        cmpl    $0, -20(%rbp)
        js      .L6
        cmpl    $0, -20(%rbp)
        jne     .L5
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        addl    $1, %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -40(%rbp), %rax
        movq    (%rax), %rsi
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -32(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        jmp     .L1
.L5:
        movl    -20(%rbp), %eax
        leal    -1(%rax), %edi
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -40(%rbp), %rcx
        movq    -32(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rcx, %r8
        movq    %rdx, %rcx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    func_1
        movl    -20(%rbp), %eax
        leal    -1(%rax), %edi
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -40(%rbp), %rcx
        movq    -32(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rcx, %r8
        movq    %rdx, %rcx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    func_1
        jmp     .L1
.L6:
        nop
.L1:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    %edx, -36(%rbp)
        movq    %rcx, -48(%rbp)
        movq    %r8, -56(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L8
        movl    $0, %eax
        jmp     .L9
.L8:
        movq    -24(%rbp), %rax
        cmpq    -32(%rbp), %rax
        jne     .L10
        movl    -36(%rbp), %eax
        leal    -1(%rax), %edi
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -56(%rbp), %rcx
        movq    -48(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %rcx, %r8
        movq    %rdx, %rcx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    func_1
        movl    -36(%rbp), %eax
        leal    -1(%rax), %edi
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -56(%rbp), %rcx
        movq    -48(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %rcx, %r8
        movq    %rdx, %rcx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    func_1
        movl    $1, %eax
        jmp     .L9
.L10:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -56(%rbp), %rdi
        movq    -48(%rbp), %rcx
        movl    -36(%rbp), %edx
        movq    -32(%rbp), %rsi
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -4(%rbp)
        cmpl    $0, -4(%rbp)
        jle     .L11
        movl    -4(%rbp), %eax
        cmpl    -36(%rbp), %eax
        jne     .L12
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        addl    $1, %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -56(%rbp), %rax
        movq    (%rax), %rsi
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -48(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
.L12:
        movl    -36(%rbp), %eax
        subl    -4(%rbp), %eax
        leal    -1(%rax), %edi
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -56(%rbp), %rcx
        movq    -48(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %rcx, %r8
        movq    %rdx, %rcx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    func_1
        movl    -4(%rbp), %eax
        addl    $1, %eax
        jmp     .L9
.L11:
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -56(%rbp), %rdi
        movq    -48(%rbp), %rcx
        movl    -36(%rbp), %edx
        movq    -32(%rbp), %rsi
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -8(%rbp)
        cmpl    $0, -8(%rbp)
        jle     .L13
        movl    -8(%rbp), %eax
        cmpl    -36(%rbp), %eax
        jne     .L14
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        addl    $1, %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -56(%rbp), %rax
        movq    (%rax), %rsi
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -48(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
.L14:
        movl    -36(%rbp), %eax
        subl    -8(%rbp), %eax
        leal    -1(%rax), %edi
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -56(%rbp), %rcx
        movq    -48(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %rcx, %r8
        movq    %rdx, %rcx
        movl    %edi, %edx
        movq    %rax, %rdi
        call    func_1
        movl    -8(%rbp), %eax
        addl    $1, %eax
        jmp     .L9
.L13:
        movl    $0, %eax
.L9:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    %edx, -36(%rbp)
        movq    %rcx, -48(%rbp)
        movq    $0, -8(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L16
        cmpq    $0, -32(%rbp)
        jne     .L17
.L16:
        movq    -48(%rbp), %rax
        movl    $0, (%rax)
        movl    $0, %eax
        jmp     .L20
.L17:
        cmpl    $0, -36(%rbp)
        jne     .L19
        movq    -48(%rbp), %rax
        movl    $1, (%rax)
        movl    $4, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    -32(%rbp), %rdx
        movl    (%rdx), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        jmp     .L20
.L19:
        leaq    -8(%rbp), %rdi
        movq    -48(%rbp), %rcx
        movl    -36(%rbp), %edx
        movq    -32(%rbp), %rsi
        movq    -24(%rbp), %rax
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movq    -8(%rbp), %rax
.L20:
        leave
        ret
