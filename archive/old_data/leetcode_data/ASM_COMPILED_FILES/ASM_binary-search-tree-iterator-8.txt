func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        jmp     .L2
.L3:
        movq    -16(%rbp), %rax
        movl    8(%rax), %eax
        addl    $1, %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        movq    (%rax), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    realloc
        movq    %rax, %rdx
        movq    -16(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -16(%rbp), %rax
        movq    (%rax), %rdx
        movq    -16(%rbp), %rax
        movl    8(%rax), %eax
        cltq
        salq    $3, %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rax, (%rdx)
        movq    -16(%rbp), %rax
        movl    8(%rax), %eax
        leal    1(%rax), %edx
        movq    -16(%rbp), %rax
        movl    %edx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -8(%rbp)
.L2:
        cmpq    $0, -8(%rbp)
        jne     .L3
        nop
        leave
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    $16, %esi
        movl    $1, %edi
        call    calloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    -24(%rbp), %rax
        movq    (%rax), %rdx
        movq    -24(%rbp), %rax
        movl    8(%rax), %eax
        cltq
        salq    $3, %rax
        subq    $8, %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movl    8(%rax), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L7
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
.L7:
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    8(%rax), %eax
        testl   %eax, %eax
        setne   %al
        popq    %rbp
        ret
func_5:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
        movq    -8(%rbp), %rax
        movq    $0, (%rax)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        nop
        leave
        ret
