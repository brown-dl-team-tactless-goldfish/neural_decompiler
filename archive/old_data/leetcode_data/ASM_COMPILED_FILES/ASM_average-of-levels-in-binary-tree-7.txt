func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        movq    %rdx, -24(%rbp)
        movq    %rcx, -32(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L4
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movsd   (%rax), %xmm1
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        cvtsi2sd        %eax, %xmm0
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        addsd   %xmm1, %xmm0
        movsd   %xmm0, (%rax)
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        addl    $1, %edx
        movl    %edx, (%rax)
        movl    -12(%rbp), %eax
        leal    1(%rax), %esi
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -32(%rbp), %rcx
        movq    -24(%rbp), %rdx
        movq    %rax, %rdi
        call    func_2
        movl    -12(%rbp), %eax
        leal    1(%rax), %esi
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -32(%rbp), %rcx
        movq    -24(%rbp), %rdx
        movq    %rax, %rdi
        call    func_2
        jmp     .L1
.L4:
        nop
.L1:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L6
        movl    $0, %eax
        jmp     .L7
.L6:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -4(%rbp)
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -8(%rbp)
        movl    -4(%rbp), %eax
        cmpl    %eax, -8(%rbp)
        cmovge  -8(%rbp), %eax
        addl    $1, %eax
.L7:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -8(%rbp)
        movl    $0, -4(%rbp)
        movl    -8(%rbp), %eax
        cltq
        movl    $8, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -16(%rbp)
        cmpq    $0, -16(%rbp)
        jne     .L9
        movl    $0, %eax
        jmp     .L10
.L9:
        movl    -8(%rbp), %eax
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -24(%rbp)
        cmpq    $0, -16(%rbp)
        jne     .L11
        movl    $0, %eax
        jmp     .L10
.L11:
        movq    -24(%rbp), %rcx
        movq    -16(%rbp), %rdx
        movq    -40(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_2
        movl    $0, -4(%rbp)
        jmp     .L12
.L13:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movsd   (%rax), %xmm0
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cvtsi2sd        %eax, %xmm1
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        divsd   %xmm1, %xmm0
        movsd   %xmm0, (%rax)
        addl    $1, -4(%rbp)
.L12:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jl      .L13
        movq    -48(%rbp), %rax
        movl    -8(%rbp), %edx
        movl    %edx, (%rax)
        movq    -16(%rbp), %rax
.L10:
        leave
        ret
