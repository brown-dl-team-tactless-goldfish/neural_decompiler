func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        movl    %eax, -4(%rbp)
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        movl    %eax, -8(%rbp)
        movl    -4(%rbp), %eax
        subl    -8(%rbp), %eax
        movl    %eax, %edx
        movl    %edx, %eax
        sarl    $31, %eax
        xorl    %eax, %edx
        movl    %edx, -12(%rbp)
        subl    %eax, -12(%rbp)
        cmpl    $1, -12(%rbp)
        jle     .L4
        movq    -32(%rbp), %rax
        movb    $0, (%rax)
.L4:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jle     .L5
        movl    -4(%rbp), %eax
        addl    $1, %eax
        jmp     .L3
.L5:
        movl    -8(%rbp), %eax
        addl    $1, %eax
.L3:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movb    $1, -1(%rbp)
        leaq    -1(%rbp), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        movzbl  -1(%rbp), %eax
        leave
        ret
