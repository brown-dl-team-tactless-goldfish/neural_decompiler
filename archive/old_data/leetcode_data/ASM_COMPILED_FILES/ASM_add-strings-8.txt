func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $64, %rsp
        movq    %rdi, -56(%rbp)
        movq    %rsi, -64(%rbp)
        movq    -56(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -12(%rbp)
        movq    -64(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -16(%rbp)
        movl    -12(%rbp), %eax
        cmpl    %eax, -16(%rbp)
        cmovge  -16(%rbp), %eax
        movl    %eax, -20(%rbp)
        movl    -12(%rbp), %eax
        cmpl    %eax, -16(%rbp)
        cmovle  -16(%rbp), %eax
        movl    %eax, -24(%rbp)
        movl    -20(%rbp), %eax
        addl    $2, %eax
        cltq
        movl    $1, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -32(%rbp)
        movb    $0, -1(%rbp)
        movl    -12(%rbp), %eax
        cmpl    -16(%rbp), %eax
        jle     .L2
        movq    -56(%rbp), %rax
        jmp     .L3
.L2:
        movq    -64(%rbp), %rax
.L3:
        movq    %rax, -40(%rbp)
        movl    $0, -8(%rbp)
        jmp     .L4
.L9:
        movl    -8(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jge     .L5
        movl    -12(%rbp), %eax
        subl    -8(%rbp), %eax
        cltq
        leaq    -1(%rax), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movl    %eax, %ecx
        movl    -16(%rbp), %eax
        subl    -8(%rbp), %eax
        cltq
        leaq    -1(%rax), %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        leal    (%rcx,%rax), %edx
        movzbl  -1(%rbp), %eax
        addl    %edx, %eax
        leal    -48(%rax), %ecx
        movl    -20(%rbp), %eax
        subl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        jmp     .L6
.L5:
        movl    -20(%rbp), %eax
        subl    -8(%rbp), %eax
        cltq
        leaq    -1(%rax), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movl    %eax, %edx
        movzbl  -1(%rbp), %eax
        leal    (%rdx,%rax), %ecx
        movl    -20(%rbp), %eax
        subl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
.L6:
        movl    -20(%rbp), %eax
        subl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        cmpb    $57, %al
        jle     .L7
        movb    $1, -1(%rbp)
        movl    -20(%rbp), %eax
        subl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        leal    -10(%rax), %ecx
        movl    -20(%rbp), %eax
        subl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        jmp     .L8
.L7:
        movb    $0, -1(%rbp)
.L8:
        addl    $1, -8(%rbp)
.L4:
        movl    -8(%rbp), %eax
        cmpl    -20(%rbp), %eax
        jl      .L9
        cmpb    $0, -1(%rbp)
        je      .L10
        movq    -32(%rbp), %rax
        movb    $49, (%rax)
        jmp     .L11
.L10:
        movl    -20(%rbp), %eax
        addl    $1, %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        leaq    1(%rax), %rcx
        movq    -32(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memmove
.L11:
        movq    -32(%rbp), %rax
        leave
        ret
