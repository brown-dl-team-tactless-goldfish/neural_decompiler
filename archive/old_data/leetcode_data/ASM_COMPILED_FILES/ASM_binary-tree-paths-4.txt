func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    %edx, -36(%rbp)
        movl    $0, -8(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L2
.L3:
        movl    -8(%rbp), %eax
        cltq
        leaq    -2(%rax), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        addl    $1, -4(%rbp)
.L2:
        movl    -4(%rbp), %eax
        cmpl    -36(%rbp), %eax
        jl      .L3
        nop
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    %rdx, -40(%rbp)
        movq    %rcx, -48(%rbp)
        movq    %r8, -56(%rbp)
        cmpq    $0, -24(%rbp)
        je      .L8
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -56(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -48(%rbp), %rax
        addq    %rax, %rdx
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        jne     .L7
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        jne     .L7
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    $100, %edi
        call    malloc
        movq    %rax, (%rbx)
        movq    -56(%rbp), %rax
        movl    (%rax), %edx
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movq    (%rax), %rcx
        movq    -48(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -32(%rbp), %rax
        movl    %edx, (%rax)
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        leal    -1(%rax), %edx
        movq    -56(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L4
.L7:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    -56(%rbp), %rdi
        movq    -48(%rbp), %rcx
        movq    -40(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -56(%rbp), %rdi
        movq    -48(%rbp), %rcx
        movq    -40(%rbp), %rdx
        movq    -32(%rbp), %rsi
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        leal    -1(%rax), %edx
        movq    -56(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L4
.L8:
        nop
.L4:
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movl    $4, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    $0, (%rax)
        movl    $400, %edi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    $800, %edi
        call    malloc
        movq    %rax, -24(%rbp)
        movq    -48(%rbp), %rax
        movl    $0, (%rax)
        cmpq    $0, -40(%rbp)
        jne     .L10
        movl    $0, %eax
        jmp     .L11
.L10:
        movq    -8(%rbp), %rdi
        movq    -16(%rbp), %rcx
        movq    -24(%rbp), %rdx
        movq    -48(%rbp), %rsi
        movq    -40(%rbp), %rax
        movq    %rdi, %r8
        movq    %rax, %rdi
        call    func_3
        movq    -24(%rbp), %rax
.L11:
        leave
        ret
