func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movl    %ecx, -28(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L5
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -28(%rbp)
        jle     .L4
        movq    -24(%rbp), %rax
        movl    -28(%rbp), %edx
        movl    %edx, (%rax)
.L4:
        movq    var_5(%rip), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        salq    $3, %rdx
        subq    $8, %rdx
        addq    %rdx, %rax
        movq    (%rax), %rsi
        movq    -16(%rbp), %rax
        movq    (%rax), %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        subq    $4, %rdx
        addq    %rax, %rdx
        movl    (%rdx), %eax
        leal    1(%rax), %ecx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -28(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_1
        movl    -28(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_1
        jmp     .L1
.L5:
        nop
.L1:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    -28(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, -8(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L7
.L8:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -28(%rbp), %eax
        subl    $1, %eax
        subl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rsi
        movq    -24(%rbp), %rax
        addq    %rsi, %rax
        xorl    %ecx, %edx
        movl    %edx, (%rax)
        movl    -28(%rbp), %eax
        subl    $1, %eax
        subl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -28(%rbp), %eax
        subl    $1, %eax
        subl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rsi
        movq    -24(%rbp), %rax
        addq    %rsi, %rax
        xorl    %ecx, %edx
        movl    %edx, (%rax)
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -28(%rbp), %eax
        subl    $1, %eax
        subl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rsi
        movq    -24(%rbp), %rax
        addq    %rsi, %rax
        xorl    %ecx, %edx
        movl    %edx, (%rax)
        addl    $1, -4(%rbp)
.L7:
        movl    -4(%rbp), %eax
        cmpl    -8(%rbp), %eax
        jl      .L8
        nop
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %rdx, -56(%rbp)
        movl    $130, -28(%rbp)
        movl    -28(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, var_5(%rip)
        movl    $0, -20(%rbp)
        jmp     .L10
.L11:
        movl    -28(%rbp), %eax
        cltq
        movq    var_5(%rip), %rdx
        movl    -20(%rbp), %ecx
        movslq  %ecx, %rcx
        salq    $3, %rcx
        leaq    (%rdx,%rcx), %rbx
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, (%rbx)
        addl    $1, -20(%rbp)
.L10:
        movl    -20(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L11
        movq    -56(%rbp), %rax
        movl    $0, (%rax)
        movl    -28(%rbp), %eax
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, %rdx
        movq    -48(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -56(%rbp), %rdx
        movq    -48(%rbp), %rsi
        movq    -40(%rbp), %rax
        movl    $1, %ecx
        movq    %rax, %rdi
        call    func_1
        movl    $1, -24(%rbp)
        jmp     .L12
.L14:
        movl    -24(%rbp), %eax
        andl    $1, %eax
        testl   %eax, %eax
        je      .L13
        movq    -48(%rbp), %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %edx
        movq    var_5(%rip), %rax
        movl    -24(%rbp), %ecx
        movslq  %ecx, %rcx
        salq    $3, %rcx
        addq    %rcx, %rax
        movq    (%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_2
.L13:
        addl    $1, -24(%rbp)
.L12:
        movq    -56(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -24(%rbp)
        jl      .L14
        movq    var_5(%rip), %rax
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
