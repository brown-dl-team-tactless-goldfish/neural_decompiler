func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, %rax
        movq    %rsi, %rcx
        movq    %rcx, %rdx
        movq    %rax, -16(%rbp)
        movq    %rdx, -8(%rbp)
        movq    -16(%rbp), %rax
        testq   %rax, %rax
        jne     .L2
        movq    -8(%rbp), %rax
        testq   %rax, %rax
        jne     .L2
        movl    $1, %eax
        jmp     .L3
.L2:
        movl    $0, %eax
.L3:
        andl    $1, %eax
        popq    %rbp
        ret
func_8:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movl    %edi, -20(%rbp)
        movl    $16, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -8(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        leave
        ret
func_9:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, (%rax)
        nop
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    -8(%rbp), %rax
        movq    (%rax), %rdx
        movq    8(%rax), %rax
        movq    %rdx, %rdi
        movq    %rax, %rsi
        call    func_4
        testb   %al, %al
        je      .L9
        movq    -8(%rbp), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    8(%rax), %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, (%rax)
        jmp     .L11
.L9:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -8(%rbp), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, 8(%rax)
.L11:
        nop
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L15
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, %edi
        call    func_8
        movq    %rax, %rdx
        movq    -16(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        jmp     .L12
.L15:
        nop
.L12:
        leave
        ret
func_7:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    $16, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    func_9
        movq    -8(%rbp), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -8(%rbp), %rax
        leave
        ret
func_6:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movl    (%rax), %eax
        movl    %eax, -12(%rbp)
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    8(%rax), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movl    -12(%rbp), %eax
        leave
        ret
func_5:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        testq   %rax, %rax
        setne   %al
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    -24(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        jmp     .L23
.L24:
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, -16(%rbp)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -16(%rbp), %rax
        movq    %rax, -8(%rbp)
.L23:
        cmpq    $0, -8(%rbp)
        jne     .L24
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    free
        nop
        leave
        ret
