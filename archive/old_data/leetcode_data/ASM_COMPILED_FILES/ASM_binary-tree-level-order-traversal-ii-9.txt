func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movl    %edx, -20(%rbp)
        movq    -16(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jle     .L2
        movq    -16(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
.L2:
        cmpq    $0, -8(%rbp)
        je      .L5
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        jmp     .L1
.L5:
        nop
.L1:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        movl    %ecx, -28(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L9
        movl    -28(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_2
        movl    -28(%rbp), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rsi
        movq    %rax, %rdi
        call    func_2
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rsi
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    (%rdx), %eax
        leal    1(%rax), %ecx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        jmp     .L6
.L9:
        nop
.L6:
        leave
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $88, %rsp
        movq    %rdi, -72(%rbp)
        movq    %rsi, -80(%rbp)
        movl    %edx, -84(%rbp)
        movl    -84(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -48(%rbp)
        movl    -84(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -56(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L11
.L14:
        movl    -84(%rbp), %eax
        subl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -48(%rbp), %rdx
        leaq    (%rcx,%rdx), %rbx
        movq    %rax, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movl    $0, -24(%rbp)
        jmp     .L12
.L13:
        movl    -84(%rbp), %eax
        subl    -20(%rbp), %eax
        cltq
        salq    $3, %rax
        leaq    -8(%rax), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -24(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -48(%rbp), %rdx
        addq    %rcx, %rdx
        movq    (%rdx), %rdx
        movl    -24(%rbp), %ecx
        movslq  %ecx, %rcx
        salq    $2, %rcx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -24(%rbp)
.L12:
        movl    -84(%rbp), %eax
        subl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -24(%rbp)
        jl      .L13
        addl    $1, -20(%rbp)
.L11:
        movl    -20(%rbp), %eax
        cmpl    -84(%rbp), %eax
        jl      .L14
        movl    $0, -28(%rbp)
        jmp     .L15
.L16:
        movl    -84(%rbp), %eax
        subl    -28(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -56(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -28(%rbp)
.L15:
        movl    -28(%rbp), %eax
        cmpl    -84(%rbp), %eax
        jl      .L16
        movl    $0, -32(%rbp)
        jmp     .L17
.L20:
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -80(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    $0, -36(%rbp)
        jmp     .L18
.L19:
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -48(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -36(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    -32(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,8), %rcx
        movq    -72(%rbp), %rdx
        addq    %rcx, %rdx
        movq    (%rdx), %rdx
        movl    -36(%rbp), %ecx
        movslq  %ecx, %rcx
        salq    $2, %rcx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        addl    $1, -36(%rbp)
.L18:
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -36(%rbp)
        jl      .L19
        addl    $1, -32(%rbp)
.L17:
        movl    -32(%rbp), %eax
        cmpl    -84(%rbp), %eax
        jl      .L20
        movq    -48(%rbp), %rax
        movq    %rax, %rdi
        call    free
        movq    -56(%rbp), %rax
        movq    %rax, %rdi
        call    free
        nop
        addq    $88, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %rdx, -56(%rbp)
        movq    -48(%rbp), %rax
        movl    $0, (%rax)
        movq    -48(%rbp), %rcx
        movq    -40(%rbp), %rax
        movl    $0, %edx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -24(%rbp)
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    $0, -20(%rbp)
        jmp     .L22
.L23:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -32(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    $4000, %edi
        call    malloc
        movq    %rax, (%rbx)
        addl    $1, -20(%rbp)
.L22:
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L23
        movq    -48(%rbp), %rax
        movl    (%rax), %eax
        cltq
        movl    $8, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -56(%rbp), %rax
        movq    (%rax), %rdx
        movq    -32(%rbp), %rsi
        movq    -40(%rbp), %rax
        movl    $0, %ecx
        movq    %rax, %rdi
        call    func_2
        movq    -56(%rbp), %rax
        movq    (%rax), %rcx
        movl    -24(%rbp), %edx
        movq    -32(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_4
        movq    -32(%rbp), %rax
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
