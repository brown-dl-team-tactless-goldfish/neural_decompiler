func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -4(%rbp)
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    -28(%rbp), %edx
        movslq  %edx, %rdx
        leaq    0(,%rdx,4), %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        movl    %eax, (%rdx)
        nop
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $40, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movq    %rdx, -40(%rbp)
        movl    %ecx, -32(%rbp)
        movl    $0, -4(%rbp)
        jmp     .L3
.L9:
        movl    -4(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -8(%rbp)
        jmp     .L4
.L8:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jne     .L5
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jg      .L6
.L5:
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jle     .L7
.L6:
        movl    -8(%rbp), %edx
        movl    -4(%rbp), %ecx
        movq    -40(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_3
        movl    -8(%rbp), %edx
        movl    -4(%rbp), %ecx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_3
.L7:
        addl    $1, -8(%rbp)
.L4:
        movl    -8(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jl      .L8
        addl    $1, -4(%rbp)
.L3:
        movl    -28(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -4(%rbp)
        jl      .L9
        nop
        leave
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movl    %edi, -52(%rbp)
        movq    %rsi, -64(%rbp)
        movl    %edx, -56(%rbp)
        movq    %rcx, -72(%rbp)
        movl    %r8d, -76(%rbp)
        movl    %r9d, -80(%rbp)
        movl    -52(%rbp), %eax
        cmpl    -56(%rbp), %eax
        jl      .L11
        movl    $0, %eax
        jmp     .L12
.L11:
        movl    -80(%rbp), %eax
        addl    $1, %eax
        imull   -56(%rbp), %eax
        movslq  %eax, %rdx
        movl    -52(%rbp), %eax
        cltq
        addq    %rdx, %rax
        leaq    0(,%rax,4), %rdx
        movq    16(%rbp), %rax
        addq    %rdx, %rax
        movq    %rax, -32(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        je      .L13
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        jmp     .L12
.L13:
        movl    $0, -36(%rbp)
        movl    -36(%rbp), %eax
        movl    %eax, -20(%rbp)
        cmpl    $0, -80(%rbp)
        js      .L14
        movl    -52(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -80(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -72(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jl      .L15
.L14:
        movl    -52(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ebx
        movl    -52(%rbp), %eax
        leal    1(%rax), %edi
        movl    -52(%rbp), %r8d
        movl    -76(%rbp), %esi
        movq    -72(%rbp), %rcx
        movl    -56(%rbp), %edx
        movq    -64(%rbp), %rax
        subq    $8, %rsp
        pushq   16(%rbp)
        movl    %r8d, %r9d
        movl    %esi, %r8d
        movq    %rax, %rsi
        call    func_4
        addq    $16, %rsp
        addl    %ebx, %eax
        movl    %eax, -20(%rbp)
.L15:
        movl    -52(%rbp), %eax
        leal    1(%rax), %edi
        movl    -80(%rbp), %r8d
        movl    -76(%rbp), %esi
        movq    -72(%rbp), %rcx
        movl    -56(%rbp), %edx
        movq    -64(%rbp), %rax
        subq    $8, %rsp
        pushq   16(%rbp)
        movl    %r8d, %r9d
        movl    %esi, %r8d
        movq    %rax, %rsi
        call    func_4
        addq    $16, %rsp
        movl    %eax, -36(%rbp)
        movl    -20(%rbp), %eax
        cmpl    -36(%rbp), %eax
        jge     .L16
        movq    -32(%rbp), %rax
        movl    -36(%rbp), %edx
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
        jmp     .L12
.L16:
        movq    -32(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movl    (%rax), %eax
.L12:
        movq    -8(%rbp), %rbx
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %r15
        pushq   %r14
        pushq   %r13
        pushq   %r12
        pushq   %rbx
        subq    $120, %rsp
        movq    %rdi, -88(%rbp)
        movl    %esi, -92(%rbp)
        movq    %rdx, -104(%rbp)
        movl    %ecx, -96(%rbp)
        movq    %rsp, %rax
        movq    %rax, %rbx
        movl    -96(%rbp), %eax
        movq    -104(%rbp), %rdx
        movl    -92(%rbp), %esi
        movq    -88(%rbp), %rdi
        movl    %eax, %ecx
        call    func_2
        movl    -96(%rbp), %ecx
        movl    -96(%rbp), %esi
        movslq  %ecx, %rax
        subq    $1, %rax
        movq    %rax, -56(%rbp)
        movslq  %ecx, %rax
        movq    %rax, -160(%rbp)
        movq    $0, -152(%rbp)
        movslq  %esi, %rax
        subq    $1, %rax
        movq    %rax, -64(%rbp)
        movslq  %ecx, %rax
        movq    %rax, -128(%rbp)
        movq    $0, -120(%rbp)
        movslq  %esi, %rax
        movq    %rax, -144(%rbp)
        movq    $0, -136(%rbp)
        movq    -128(%rbp), %r10
        movq    -120(%rbp), %r11
        movq    %r11, %rdx
        movq    -144(%rbp), %r8
        movq    -136(%rbp), %r9
        imulq   %r8, %rdx
        movq    %r9, %rax
        imulq   %r10, %rax
        leaq    (%rdx,%rax), %rdi
        movq    %r10, %rax
        mulq    %r8
        addq    %rdx, %rdi
        movq    %rdi, %rdx
        movslq  %ecx, %rax
        movq    %rax, %r14
        movl    $0, %r15d
        movslq  %esi, %rax
        movq    %rax, %r12
        movl    $0, %r13d
        movq    %r15, %rdx
        imulq   %r12, %rdx
        movq    %r13, %rax
        imulq   %r14, %rax
        leaq    (%rdx,%rax), %rdi
        movq    %r14, %rax
        mulq    %r12
        addq    %rdx, %rdi
        movq    %rdi, %rdx
        movslq  %ecx, %rdx
        movslq  %esi, %rax
        imulq   %rdx, %rax
        leaq    0(,%rax,4), %rdx
        movl    $16, %eax
        subq    $1, %rax
        addq    %rdx, %rax
        movl    $16, %ecx
        movl    $0, %edx
        divq    %rcx
        imulq   $16, %rax, %rax
        subq    %rax, %rsp
        movq    %rsp, %rax
        addq    $3, %rax
        shrq    $2, %rax
        salq    $2, %rax
        movq    %rax, -72(%rbp)
        movl    -96(%rbp), %eax
        imull   -96(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -72(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    memset
        movq    -72(%rbp), %rsi
        movl    -92(%rbp), %edi
        movq    -88(%rbp), %rcx
        movl    -96(%rbp), %edx
        movq    -104(%rbp), %rax
        subq    $8, %rsp
        pushq   %rsi
        movl    $-1, %r9d
        movl    %edi, %r8d
        movq    %rax, %rsi
        movl    $0, %edi
        call    func_4
        addq    $16, %rsp
        movq    %rbx, %rsp
        leaq    -40(%rbp), %rsp
        popq    %rbx
        popq    %r12
        popq    %r13
        popq    %r14
        popq    %r15
        popq    %rbp
        ret
