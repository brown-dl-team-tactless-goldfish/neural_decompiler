func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $136, %rsp
        movq    %rdi, -104(%rbp)
        movl    %esi, -108(%rbp)
        movq    %rdx, -120(%rbp)
        movq    %rcx, -128(%rbp)
        movq    %r8, -136(%rbp)
        movq    %r9, -144(%rbp)
        movl    -108(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, 16(%rbp)
        jne     .L2
        movl    32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -136(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -128(%rbp), %rax
        leaq    (%rcx,%rax), %rbx
        movq    %rdx, %rdi
        call    malloc
        movq    %rax, (%rbx)
        movq    -144(%rbp), %rax
        movq    (%rax), %rdx
        movq    -136(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        addq    %rax, %rdx
        movl    32(%rbp), %eax
        movl    %eax, (%rdx)
        movl    32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -136(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -128(%rbp), %rax
        addq    %rcx, %rax
        movq    (%rax), %rax
        movq    24(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memcpy
        movq    -136(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -136(%rbp), %rax
        movl    %edx, (%rax)
        jmp     .L1
.L2:
        movl    $0, -20(%rbp)
        jmp     .L4
.L5:
        movq    $0, -96(%rbp)
        movq    $0, -88(%rbp)
        movq    $0, -80(%rbp)
        movq    $0, -72(%rbp)
        movq    $0, -64(%rbp)
        movq    $0, -56(%rbp)
        movq    $0, -48(%rbp)
        movq    $0, -40(%rbp)
        movq    24(%rbp), %rcx
        leaq    -96(%rbp), %rax
        movl    $64, %edx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memcpy
        movl    32(%rbp), %eax
        movl    %eax, -24(%rbp)
        movl    16(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -104(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -24(%rbp), %eax
        cltq
        movl    %edx, -96(%rbp,%rax,4)
        addl    $1, -24(%rbp)
        movl    16(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -104(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rdx, %rax
        movl    (%rax), %edi
        movq    -144(%rbp), %r9
        movq    -136(%rbp), %r10
        movq    -128(%rbp), %rcx
        movq    -120(%rbp), %rdx
        movl    -108(%rbp), %esi
        movq    -104(%rbp), %rax
        subq    $8, %rsp
        movl    -24(%rbp), %r8d
        pushq   %r8
        leaq    -96(%rbp), %r8
        pushq   %r8
        pushq   %rdi
        movq    %r10, %r8
        movq    %rax, %rdi
        call    func_1
        addq    $32, %rsp
        addl    $1, -20(%rbp)
.L4:
        movl    16(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -120(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L5
.L1:
        movq    -8(%rbp), %rbx
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        addq    $-128, %rsp
        movq    %rdi, -88(%rbp)
        movl    %esi, -92(%rbp)
        movq    %rdx, -104(%rbp)
        movq    %rcx, -112(%rbp)
        movq    %r8, -120(%rbp)
        movl    $80000, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -112(%rbp), %rax
        movl    $0, (%rax)
        movl    $40000, %edi
        call    malloc
        movq    %rax, %rdx
        movq    -120(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -104(%rbp), %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jne     .L7
        movq    -8(%rbp), %rax
        jmp     .L9
.L7:
        movq    $0, -80(%rbp)
        movq    $0, -72(%rbp)
        movq    $0, -64(%rbp)
        movq    $0, -56(%rbp)
        movq    $0, -48(%rbp)
        movq    $0, -40(%rbp)
        movq    $0, -32(%rbp)
        movq    $0, -24(%rbp)
        movl    $0, -12(%rbp)
        movl    -12(%rbp), %eax
        cltq
        movl    $0, -80(%rbp,%rax,4)
        addl    $1, -12(%rbp)
        movq    -120(%rbp), %r9
        movq    -112(%rbp), %r8
        movq    -8(%rbp), %rcx
        movq    -104(%rbp), %rdx
        movl    -92(%rbp), %esi
        movq    -88(%rbp), %rax
        subq    $8, %rsp
        movl    -12(%rbp), %edi
        pushq   %rdi
        leaq    -80(%rbp), %rdi
        pushq   %rdi
        pushq   $0
        movq    %rax, %rdi
        call    func_1
        addq    $32, %rsp
        movq    -8(%rbp), %rax
.L9:
        leave
        ret
