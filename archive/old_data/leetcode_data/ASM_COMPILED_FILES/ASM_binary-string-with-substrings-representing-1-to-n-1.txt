func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -12(%rbp)
        movq    -32(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -16(%rbp)
        movl    $0, -4(%rbp)
        movl    $0, -8(%rbp)
        movl    -12(%rbp), %eax
        cmpl    -16(%rbp), %eax
        jge     .L4
        movl    $0, %eax
        jmp     .L3
.L10:
        movl    $0, -8(%rbp)
        jmp     .L5
.L8:
        movl    -4(%rbp), %edx
        movl    -8(%rbp), %eax
        addl    %edx, %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %edx
        movl    -8(%rbp), %eax
        movslq  %eax, %rcx
        movq    -32(%rbp), %rax
        addq    %rcx, %rax
        movzbl  (%rax), %eax
        cmpb    %al, %dl
        jne     .L11
        addl    $1, -8(%rbp)
.L5:
        movl    -8(%rbp), %eax
        cmpl    -16(%rbp), %eax
        jl      .L8
        jmp     .L7
.L11:
        nop
.L7:
        movl    -8(%rbp), %eax
        cmpl    -16(%rbp), %eax
        jne     .L9
        movl    $1, %eax
        jmp     .L3
.L9:
        addl    $1, -4(%rbp)
.L4:
        movl    -12(%rbp), %eax
        subl    -16(%rbp), %eax
        cmpl    %eax, -4(%rbp)
        jle     .L10
        movl    $0, %eax
.L3:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movl    $33, %edi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    $1, -4(%rbp)
        jmp     .L13
.L20:
        movl    $0, -12(%rbp)
        movl    -4(%rbp), %eax
        movl    %eax, -16(%rbp)
        jmp     .L14
.L15:
        movl    -16(%rbp), %eax
        andl    $1, %eax
        leal    48(%rax), %ecx
        movl    -12(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -12(%rbp)
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        sarl    -16(%rbp)
.L14:
        cmpl    $0, -16(%rbp)
        jne     .L15
        movl    -12(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movl    $0, -8(%rbp)
        jmp     .L16
.L17:
        movl    -8(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        movl    %eax, -16(%rbp)
        movl    -12(%rbp), %eax
        cltq
        leaq    -1(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    -8(%rbp), %edx
        movslq  %edx, %rcx
        movq    -24(%rbp), %rdx
        addq    %rcx, %rdx
        movzbl  (%rax), %eax
        movb    %al, (%rdx)
        movl    -12(%rbp), %eax
        cltq
        leaq    -1(%rax), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    -16(%rbp), %edx
        movb    %dl, (%rax)
        addl    $1, -8(%rbp)
        subl    $1, -12(%rbp)
.L16:
        movl    -12(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -8(%rbp)
        jl      .L17
        movq    -24(%rbp), %rdx
        movq    -40(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        xorl    $1, %eax
        testb   %al, %al
        je      .L18
        movl    $0, %eax
        jmp     .L19
.L18:
        addl    $1, -4(%rbp)
.L13:
        movl    -4(%rbp), %eax
        cmpl    -44(%rbp), %eax
        jle     .L20
        movl    $1, %eax
.L19:
        leave
        ret
