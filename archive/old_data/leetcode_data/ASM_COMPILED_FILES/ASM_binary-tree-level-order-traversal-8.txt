func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movl    %esi, -12(%rbp)
        cmpq    $0, -8(%rbp)
        jne     .L2
        movl    var_9(%rip), %eax
        cmpl    %eax, -12(%rbp)
        jle     .L5
        movl    -12(%rbp), %eax
        movl    %eax, var_9(%rip)
        jmp     .L5
.L2:
        movl    -12(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_3
        movl    -12(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_3
        jmp     .L1
.L5:
        nop
.L1:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movl    %edx, -20(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L9
        movq    var_4(%rip), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $3, %rdx
        addq    %rdx, %rax
        movq    (%rax), %rsi
        movq    -16(%rbp), %rax
        movq    (%rax), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $2, %rdx
        addq    %rax, %rdx
        movl    (%rdx), %eax
        leal    1(%rax), %ecx
        movl    %ecx, (%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
        jmp     .L6
.L9:
        nop
.L6:
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -40(%rbp)
        movq    %rsi, -48(%rbp)
        movq    %rdx, -56(%rbp)
        movl    $0, var_9(%rip)
        movq    -40(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_3
        movl    var_9(%rip), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, var_4(%rip)
        movl    $0, -20(%rbp)
        jmp     .L11
.L12:
        movq    var_4(%rip), %rax
        movl    -20(%rbp), %edx
        movslq  %edx, %rdx
        salq    $3, %rdx
        leaq    (%rax,%rdx), %rbx
        movl    $1024, %edi
        call    malloc
        movq    %rax, (%rbx)
        addl    $1, -20(%rbp)
.L11:
        movl    var_9(%rip), %eax
        cmpl    %eax, -20(%rbp)
        jl      .L12
        movl    var_9(%rip), %eax
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, %rdx
        movq    -56(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -56(%rbp), %rcx
        movq    -40(%rbp), %rax
        movl    $0, %edx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_2
        movl    var_9(%rip), %edx
        movq    -48(%rbp), %rax
        movl    %edx, (%rax)
        movq    var_4(%rip), %rax
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
