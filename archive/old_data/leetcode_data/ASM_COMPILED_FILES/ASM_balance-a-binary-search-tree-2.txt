func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $24, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L2
        movl    $0, %eax
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_4
        movl    %eax, %ebx
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_4
        addl    %ebx, %eax
        addl    $1, %eax
.L3:
        addq    $24, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movl    %edi, -20(%rbp)
        movl    $24, %esi
        movl    $1, %edi
        call    calloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    -20(%rbp), %edx
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -8(%rbp), %rax
        movq    $0, 16(%rax)
        movq    -8(%rbp), %rax
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        movq    %rdx, -24(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L9
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %ecx
        movq    -24(%rbp), %rdx
        movl    %ecx, (%rdx)
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rax, (%rdx)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -24(%rbp), %rdx
        movq    -16(%rbp), %rcx
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        jmp     .L6
.L9:
        nop
.L6:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    -28(%rbp), %eax
        cmpl    -32(%rbp), %eax
        jle     .L11
        movl    $0, %eax
        jmp     .L12
.L11:
        movl    -28(%rbp), %edx
        movl    -32(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        sarl    %eax
        movl    %eax, -4(%rbp)
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, -16(%rbp)
        movl    -4(%rbp), %eax
        leal    -1(%rax), %edx
        movl    -28(%rbp), %ecx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_2
        movq    %rax, %rdx
        movq    -16(%rbp), %rax
        movq    %rdx, 8(%rax)
        movl    -4(%rbp), %eax
        leal    1(%rax), %ecx
        movl    -32(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_2
        movq    %rax, %rdx
        movq    -16(%rbp), %rax
        movq    %rdx, 16(%rax)
        movq    -16(%rbp), %rax
.L12:
        leave
        ret
balancefunc_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -56(%rbp)
        movq    -56(%rbp), %rax
        movq    16(%rax), %rdx
        movq    -56(%rbp), %rax
        movq    8(%rax), %rax
        cmpq    %rax, %rdx
        je      .L14
        cmpq    $0, -56(%rbp)
        jne     .L15
.L14:
        movq    -56(%rbp), %rax
        jmp     .L17
.L15:
        movq    -56(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_4
        movl    %eax, %ebx
        movq    -56(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_4
        addl    %ebx, %eax
        addl    $1, %eax
        movl    %eax, -20(%rbp)
        movl    -20(%rbp), %eax
        cltq
        movl    $8, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, -32(%rbp)
        movl    $0, -36(%rbp)
        leaq    -36(%rbp), %rdx
        movq    -32(%rbp), %rcx
        movq    -56(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_1
        movl    -20(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -32(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_2
        movq    %rax, -56(%rbp)
        movq    -56(%rbp), %rax
.L17:
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
