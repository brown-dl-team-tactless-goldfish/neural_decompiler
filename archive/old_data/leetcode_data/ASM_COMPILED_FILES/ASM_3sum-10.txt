func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, -4(%rbp)
        movq    -32(%rbp), %rax
        movl    (%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movl    -4(%rbp), %edx
        movl    %edx, (%rax)
        nop
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    -28(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -4(%rbp)
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        movl    %eax, -12(%rbp)
        movl    -28(%rbp), %eax
        movl    %eax, -8(%rbp)
        jmp     .L3
.L5:
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        cmpl    %eax, -12(%rbp)
        jl      .L4
        addl    $1, -4(%rbp)
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
.L4:
        addl    $1, -8(%rbp)
.L3:
        movl    -8(%rbp), %eax
        cmpl    -32(%rbp), %eax
        jl      .L5
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rax, %rdx
        movl    -4(%rbp), %eax
        cltq
        addq    $1, %rax
        leaq    0(,%rax,4), %rcx
        movq    -24(%rbp), %rax
        addq    %rcx, %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        movl    -4(%rbp), %eax
        addl    $1, %eax
        leave
        ret
func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    %esi, -28(%rbp)
        movl    %edx, -32(%rbp)
        movl    -32(%rbp), %eax
        cmpl    -28(%rbp), %eax
        jle     .L9
        movl    -32(%rbp), %edx
        movl    -28(%rbp), %ecx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_3
        movl    %eax, -4(%rbp)
        movl    -4(%rbp), %eax
        leal    -1(%rax), %edx
        movl    -28(%rbp), %ecx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_4
        movl    -4(%rbp), %eax
        leal    1(%rax), %ecx
        movl    -32(%rbp), %edx
        movq    -24(%rbp), %rax
        movl    %ecx, %esi
        movq    %rax, %rdi
        call    func_4
.L9:
        nop
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $72, %rsp
        movq    %rdi, -56(%rbp)
        movl    %esi, -60(%rbp)
        movq    %rdx, -72(%rbp)
        movq    %rcx, -80(%rbp)
        movq    -72(%rbp), %rax
        movl    $0, (%rax)
        movl    -60(%rbp), %eax
        imull   -60(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, %rdx
        movq    -80(%rbp), %rax
        movq    %rdx, (%rax)
        movl    -60(%rbp), %eax
        imull   -60(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -40(%rbp)
        movl    -60(%rbp), %eax
        leal    -1(%rax), %edx
        movq    -56(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_4
        movl    $0, -28(%rbp)
        jmp     .L11
.L20:
        movl    -28(%rbp), %eax
        addl    $1, %eax
        movl    %eax, -20(%rbp)
        movl    -60(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -24(%rbp)
        cmpl    $0, -28(%rbp)
        jle     .L14
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -28(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        je      .L22
        jmp     .L14
.L19:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        addl    %eax, %edx
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        addl    %edx, %eax
        movl    %eax, -44(%rbp)
        cmpl    $0, -44(%rbp)
        jns     .L15
        addl    $1, -20(%rbp)
        jmp     .L14
.L15:
        cmpl    $0, -44(%rbp)
        jle     .L16
        subl    $1, -24(%rbp)
        jmp     .L14
.L16:
        movq    -72(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        leaq    (%rdx,%rax), %rbx
        movl    $12, %edi
        call    malloc
        movq    %rax, (%rbx)
        movq    -80(%rbp), %rax
        movq    (%rax), %rdx
        movq    -72(%rbp), %rax
        movl    (%rax), %eax
        cltq
        salq    $2, %rax
        addq    %rdx, %rax
        movl    $3, (%rax)
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rax, %rdx
        movq    -72(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rcx
        movq    -40(%rbp), %rax
        addq    %rcx, %rax
        movq    (%rax), %rax
        movl    (%rdx), %edx
        movl    %edx, (%rax)
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movq    -72(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        leaq    4(%rax), %rdx
        movl    (%rcx), %eax
        movl    %eax, (%rdx)
        movl    -24(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movq    -72(%rbp), %rax
        movl    (%rax), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        leaq    8(%rax), %rdx
        movl    (%rcx), %eax
        movl    %eax, (%rdx)
        movq    -72(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -72(%rbp), %rax
        movl    %edx, (%rax)
        addl    $1, -20(%rbp)
        jmp     .L17
.L18:
        addl    $1, -20(%rbp)
.L17:
        movl    -20(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -56(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        cmpl    %eax, %edx
        jne     .L14
        movl    -20(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jl      .L18
.L14:
        movl    -20(%rbp), %eax
        cmpl    -24(%rbp), %eax
        jl      .L19
        jmp     .L13
.L22:
        nop
.L13:
        addl    $1, -28(%rbp)
.L11:
        movl    -60(%rbp), %eax
        subl    $2, %eax
        cmpl    %eax, -28(%rbp)
        jl      .L20
        movq    -40(%rbp), %rax
        addq    $72, %rsp
        popq    %rbx
        popq    %rbp
        ret
