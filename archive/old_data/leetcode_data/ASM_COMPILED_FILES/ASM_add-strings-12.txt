func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %r12
        pushq   %rbx
        subq    $32, %rsp
        movq    %rdi, -40(%rbp)
        movl    %esi, -44(%rbp)
        movl    -44(%rbp), %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -24(%rbp)
        movl    -44(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        movl    $48, %esi
        movq    %rax, %rdi
        call    memset
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movq    %rax, %r12
        movl    -44(%rbp), %eax
        movslq  %eax, %rbx
        movq    -40(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        subq    %rax, %rbx
        movq    %rbx, %rdx
        movq    -24(%rbp), %rax
        leaq    (%rdx,%rax), %rcx
        movq    -40(%rbp), %rax
        movq    %r12, %rdx
        movq    %rax, %rsi
        movq    %rcx, %rdi
        call    memcpy
        movq    -24(%rbp), %rax
        addq    $32, %rsp
        popq    %rbx
        popq    %r12
        popq    %rbp
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    %edx, -36(%rbp)
        movl    $0, -4(%rbp)
        movl    $0, -8(%rbp)
        movl    -36(%rbp), %eax
        subl    $1, %eax
        movl    %eax, -12(%rbp)
        jmp     .L4
.L7:
        movl    -12(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        leal    -48(%rax), %ecx
        movl    -12(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movzbl  (%rax), %eax
        movsbl  %al, %eax
        subl    $48, %eax
        leal    (%rcx,%rax), %edx
        movl    -4(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -8(%rbp)
        cmpl    $9, -8(%rbp)
        jle     .L5
        movl    $1, -4(%rbp)
        subl    $10, -8(%rbp)
        jmp     .L6
.L5:
        movl    $0, -4(%rbp)
.L6:
        movl    -8(%rbp), %eax
        leal    48(%rax), %ecx
        movl    -12(%rbp), %eax
        movslq  %eax, %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    %ecx, %edx
        movb    %dl, (%rax)
        subl    $1, -12(%rbp)
.L4:
        cmpl    $0, -12(%rbp)
        jns     .L7
        cmpl    $0, -4(%rbp)
        setne   %al
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $104, %rsp
        movq    %rdi, -104(%rbp)
        movq    %rsi, -112(%rbp)
        movq    -104(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movq    %rax, %rbx
        movq    -112(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        cmpq    %rax, %rbx
        jnb     .L10
        movq    -112(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -20(%rbp)
        movl    -20(%rbp), %edx
        movq    -104(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_2
        movq    %rax, -104(%rbp)
        movl    -20(%rbp), %edx
        movq    -112(%rbp), %rcx
        movq    -104(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        movb    %al, -21(%rbp)
        cmpb    $0, -21(%rbp)
        je      .L11
        movl    -20(%rbp), %eax
        addl    $2, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -32(%rbp)
        movl    -20(%rbp), %eax
        movslq  %eax, %rdx
        movq    -32(%rbp), %rax
        leaq    1(%rax), %rcx
        movq    -104(%rbp), %rax
        movq    %rax, %rsi
        movq    %rcx, %rdi
        call    memcpy
        movq    -32(%rbp), %rax
        movb    $49, (%rax)
        movl    -20(%rbp), %eax
        cltq
        leaq    1(%rax), %rdx
        movq    -32(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -32(%rbp), %rax
        jmp     .L12
.L11:
        movl    -20(%rbp), %eax
        addl    $1, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -40(%rbp)
        movl    -20(%rbp), %eax
        movslq  %eax, %rdx
        movq    -104(%rbp), %rcx
        movq    -40(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memcpy
        movl    -20(%rbp), %eax
        movslq  %eax, %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -40(%rbp), %rax
        jmp     .L12
.L10:
        movq    -104(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movq    %rax, %rbx
        movq    -112(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        cmpq    %rax, %rbx
        jbe     .L13
        movq    -104(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -44(%rbp)
        movl    -44(%rbp), %edx
        movq    -112(%rbp), %rax
        movl    %edx, %esi
        movq    %rax, %rdi
        call    func_2
        movq    %rax, -112(%rbp)
        movl    -44(%rbp), %edx
        movq    -112(%rbp), %rcx
        movq    -104(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        movb    %al, -45(%rbp)
        cmpb    $0, -45(%rbp)
        je      .L14
        movl    -44(%rbp), %eax
        addl    $2, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -56(%rbp)
        movl    -44(%rbp), %eax
        movslq  %eax, %rdx
        movq    -56(%rbp), %rax
        leaq    1(%rax), %rcx
        movq    -104(%rbp), %rax
        movq    %rax, %rsi
        movq    %rcx, %rdi
        call    memcpy
        movq    -56(%rbp), %rax
        movb    $49, (%rax)
        movl    -44(%rbp), %eax
        cltq
        leaq    1(%rax), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -56(%rbp), %rax
        jmp     .L12
.L14:
        movl    -44(%rbp), %eax
        addl    $1, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -64(%rbp)
        movl    -44(%rbp), %eax
        movslq  %eax, %rdx
        movq    -104(%rbp), %rcx
        movq    -64(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memcpy
        movl    -44(%rbp), %eax
        movslq  %eax, %rdx
        movq    -64(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -64(%rbp), %rax
        jmp     .L12
.L13:
        movq    -104(%rbp), %rax
        movq    %rax, %rdi
        call    strlen
        movl    %eax, -68(%rbp)
        movl    -68(%rbp), %edx
        movq    -112(%rbp), %rcx
        movq    -104(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    func_3
        movb    %al, -69(%rbp)
        cmpb    $0, -69(%rbp)
        je      .L15
        movl    -68(%rbp), %eax
        addl    $2, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -80(%rbp)
        movl    -68(%rbp), %eax
        movslq  %eax, %rdx
        movq    -80(%rbp), %rax
        leaq    1(%rax), %rcx
        movq    -104(%rbp), %rax
        movq    %rax, %rsi
        movq    %rcx, %rdi
        call    memcpy
        movq    -80(%rbp), %rax
        movb    $49, (%rax)
        movl    -68(%rbp), %eax
        cltq
        leaq    1(%rax), %rdx
        movq    -80(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -80(%rbp), %rax
        jmp     .L12
.L15:
        movl    -68(%rbp), %eax
        addl    $1, %eax
        cltq
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -88(%rbp)
        movl    -68(%rbp), %eax
        movslq  %eax, %rdx
        movq    -104(%rbp), %rcx
        movq    -88(%rbp), %rax
        movq    %rcx, %rsi
        movq    %rax, %rdi
        call    memcpy
        movl    -68(%rbp), %eax
        movslq  %eax, %rdx
        movq    -88(%rbp), %rax
        addq    %rdx, %rax
        movb    $0, (%rax)
        movq    -88(%rbp), %rax
.L12:
        addq    $104, %rsp
        popq    %rbx
        popq    %rbp
        ret
