func_4:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    %rsi, -16(%rbp)
        cmpq    $0, -8(%rbp)
        je      .L4
        movq    -8(%rbp), %rax
        movq    8(%rax), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_4
        movq    -16(%rbp), %rax
        movq    (%rax), %rsi
        movq    -16(%rbp), %rax
        movl    8(%rax), %eax
        leal    1(%rax), %ecx
        movq    -16(%rbp), %rdx
        movl    %ecx, 8(%rdx)
        cltq
        salq    $2, %rax
        leaq    (%rsi,%rax), %rdx
        movq    -8(%rbp), %rax
        movl    (%rax), %eax
        movl    %eax, (%rdx)
        movq    -8(%rbp), %rax
        movq    16(%rax), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_4
        jmp     .L1
.L4:
        nop
.L1:
        leave
        ret
func_5:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $24, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L6
        movl    $0, %eax
        jmp     .L7
.L6:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_5
        movl    %eax, %ebx
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_5
        addl    %ebx, %eax
        addl    $1, %eax
.L7:
        addq    $24, %rsp
        popq    %rbx
        popq    %rbp
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movl    $16, %esi
        movl    $1, %edi
        call    calloc
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movq    %rax, %rdi
        call    func_5
        cltq
        movl    $4, %esi
        movq    %rax, %rdi
        call    calloc
        movq    %rax, %rdx
        movq    -8(%rbp), %rax
        movq    %rdx, (%rax)
        movq    -8(%rbp), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_4
        movq    -8(%rbp), %rax
        movl    8(%rax), %edx
        movq    -8(%rbp), %rax
        movl    %edx, 12(%rax)
        movq    -8(%rbp), %rax
        movl    $0, 8(%rax)
        movq    -8(%rbp), %rax
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    (%rax), %rsi
        movq    -8(%rbp), %rax
        movl    8(%rax), %eax
        leal    1(%rax), %ecx
        movq    -8(%rbp), %rdx
        movl    %ecx, 8(%rdx)
        cltq
        salq    $2, %rax
        addq    %rsi, %rax
        movl    (%rax), %eax
        popq    %rbp
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movl    8(%rax), %edx
        movq    -8(%rbp), %rax
        movl    12(%rax), %eax
        cmpl    %eax, %edx
        setl    %al
        popq    %rbp
        ret
func_6:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    free
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    free
        nop
        leave
        ret
