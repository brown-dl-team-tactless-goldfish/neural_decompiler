func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    $16, %edi
        call    malloc
        movq    %rax, -8(%rbp)
        movq    -8(%rbp), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, (%rax)
        movq    -8(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jne     .L2
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 8(%rax)
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 8(%rax)
.L3:
        movq    -24(%rbp), %rax
        movq    -8(%rbp), %rdx
        movq    %rdx, 16(%rax)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        nop
        leave
        ret
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        testl   %eax, %eax
        jne     .L5
        movl    $0, %eax
        jmp     .L6
.L5:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    (%rax), %rax
        movq    %rax, -8(%rbp)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    8(%rax), %rax
        movq    %rax, -16(%rbp)
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    free
        movq    -24(%rbp), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -24(%rbp), %rax
        movl    (%rax), %eax
        leal    -1(%rax), %edx
        movq    -24(%rbp), %rax
        movl    %edx, (%rax)
        movq    -8(%rbp), %rax
.L6:
        leave
        ret
func_3:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $80, %rsp
        movq    %rdi, -72(%rbp)
        movl    %esi, -76(%rbp)
        movl    %edx, -80(%rbp)
        movq    $0, -56(%rbp)
        movq    $0, -48(%rbp)
        movl    $0, -64(%rbp)
        movq    -72(%rbp), %rdx
        leaq    -64(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        leaq    -64(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_2
        movl    $1, -4(%rbp)
        jmp     .L8
.L16:
        leaq    -64(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        movq    %rax, -16(%rbp)
        cmpq    $0, -16(%rbp)
        jne     .L9
        movl    -80(%rbp), %eax
        cmpl    -4(%rbp), %eax
        jle     .L8
        leaq    -64(%rbp), %rax
        movl    $0, %esi
        movq    %rax, %rdi
        call    func_2
        addl    $1, -4(%rbp)
        jmp     .L8
.L9:
        movl    -80(%rbp), %eax
        subl    $1, %eax
        cmpl    %eax, -4(%rbp)
        jge     .L11
        movq    -16(%rbp), %rax
        movq    8(%rax), %rax
        testq   %rax, %rax
        je      .L12
        movq    -16(%rbp), %rax
        movq    8(%rax), %rdx
        leaq    -64(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
.L12:
        movq    -16(%rbp), %rax
        movq    16(%rax), %rax
        testq   %rax, %rax
        je      .L8
        movq    -16(%rbp), %rax
        movq    16(%rax), %rdx
        leaq    -64(%rbp), %rax
        movq    %rdx, %rsi
        movq    %rax, %rdi
        call    func_2
        jmp     .L8
.L11:
        movl    $24, %edi
        call    malloc
        movq    %rax, -24(%rbp)
        movq    -24(%rbp), %rax
        movl    -76(%rbp), %edx
        movl    %edx, (%rax)
        movq    -24(%rbp), %rax
        movq    $0, 16(%rax)
        cmpl    $1, -80(%rbp)
        je      .L14
        movl    $24, %edi
        call    malloc
        movq    %rax, -32(%rbp)
        movq    -32(%rbp), %rax
        movl    -76(%rbp), %edx
        movl    %edx, (%rax)
        movq    -32(%rbp), %rax
        movq    $0, 8(%rax)
        movq    -16(%rbp), %rax
        movq    16(%rax), %rdx
        movq    -32(%rbp), %rax
        movq    %rdx, 16(%rax)
        movq    -16(%rbp), %rax
        movq    -32(%rbp), %rdx
        movq    %rdx, 16(%rax)
        movq    -16(%rbp), %rax
        movq    8(%rax), %rdx
        movq    -24(%rbp), %rax
        movq    %rdx, 8(%rax)
        movq    -16(%rbp), %rax
        movq    -24(%rbp), %rdx
        movq    %rdx, 8(%rax)
        jmp     .L8
.L14:
        movq    -24(%rbp), %rax
        movq    -16(%rbp), %rdx
        movq    %rdx, 8(%rax)
        movq    -24(%rbp), %rax
        jmp     .L17
.L8:
        movl    -64(%rbp), %eax
        testl   %eax, %eax
        jne     .L16
        movq    -72(%rbp), %rax
.L17:
        leave
        ret
