func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $32, %rsp
        movq    %rdi, -24(%rbp)
        cmpq    $0, -24(%rbp)
        jne     .L2
        movl    $1, %eax
        jmp     .L3
.L2:
        movq    -24(%rbp), %rax
        movq    8(%rax), %rax
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -4(%rbp)
        movq    -24(%rbp), %rax
        movq    16(%rax), %rax
        movq    %rax, %rdi
        call    func_1
        movl    %eax, -8(%rbp)
        cmpl    $1, -4(%rbp)
        jne     .L4
        cmpl    $1, -8(%rbp)
        jne     .L4
        movl    $-1, %eax
        jmp     .L3
.L4:
        cmpl    $-1, -4(%rbp)
        je      .L5
        cmpl    $-1, -8(%rbp)
        jne     .L6
.L5:
        movl    var_1(%rip), %eax
        addl    $1, %eax
        movl    %eax, var_1(%rip)
        movl    $0, %eax
        jmp     .L3
.L6:
        cmpl    $0, -4(%rbp)
        je      .L7
        cmpl    $0, -8(%rbp)
        jne     .L8
.L7:
        movl    $1, %eax
        jmp     .L3
.L8:
        movl    $1, %eax
.L3:
        leave
        ret
func_2:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movq    %rdi, -8(%rbp)
        movl    $0, var_1(%rip)
        movq    -8(%rbp), %rax
        movq    %rax, %rdi
        call    func_1
        cmpl    $-1, %eax
        jne     .L10
        movl    var_1(%rip), %eax
        addl    $1, %eax
        movl    %eax, var_1(%rip)
.L10:
        movl    var_1(%rip), %eax
        leave
        ret
