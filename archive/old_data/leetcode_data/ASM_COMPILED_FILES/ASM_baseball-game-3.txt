.LC0:
        .string "C"
.LC1:
        .string "D"
.LC2:
        .string "+"
func_1:
        pushq   %rbp
        movq    %rsp, %rbp
        pushq   %rbx
        subq    $56, %rsp
        movq    %rdi, -56(%rbp)
        movl    %esi, -60(%rbp)
        movl    -60(%rbp), %eax
        cltq
        salq    $2, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -40(%rbp)
        movl    $0, -20(%rbp)
        movl    $0, -24(%rbp)
        movl    $0, -28(%rbp)
        jmp     .L2
.L7:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    $.LC0, %esi
        movq    %rax, %rdi
        call    strcmp
        testl   %eax, %eax
        jne     .L3
        subl    $1, -20(%rbp)
        jmp     .L4
.L3:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    $.LC1, %esi
        movq    %rax, %rdi
        call    strcmp
        testl   %eax, %eax
        jne     .L5
        movl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -20(%rbp)
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        leal    (%rcx,%rcx), %edx
        movl    %edx, (%rax)
        jmp     .L4
.L5:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movl    $.LC2, %esi
        movq    %rax, %rdi
        call    strcmp
        testl   %eax, %eax
        jne     .L6
        movl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %esi
        movl    -20(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -8(%rax), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %ecx
        movl    -20(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -20(%rbp)
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        leal    (%rsi,%rcx), %edx
        movl    %edx, (%rax)
        jmp     .L4
.L6:
        movl    -28(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -56(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rdx
        movl    -20(%rbp), %eax
        leal    1(%rax), %ecx
        movl    %ecx, -20(%rbp)
        cltq
        leaq    0(,%rax,4), %rcx
        movq    -40(%rbp), %rax
        leaq    (%rcx,%rax), %rbx
        movq    %rdx, %rdi
        call    atoi
        movl    %eax, (%rbx)
.L4:
        addl    $1, -28(%rbp)
.L2:
        movl    -28(%rbp), %eax
        cmpl    -60(%rbp), %eax
        jl      .L7
        movl    $0, -32(%rbp)
        jmp     .L8
.L9:
        movl    -32(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -40(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %eax
        addl    %eax, -24(%rbp)
        addl    $1, -32(%rbp)
.L8:
        movl    -32(%rbp), %eax
        cmpl    -20(%rbp), %eax
        jl      .L9
        movl    -24(%rbp), %eax
        addq    $56, %rsp
        popq    %rbx
        popq    %rbp
        ret
